
LVI_Gimbal2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009164  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  08009308  08009308  00019308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009988  08009988  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08009988  08009988  00019988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009990  08009990  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009990  08009990  00019990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009994  08009994  00019994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08009998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042fc  200001f8  08009b90  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044f4  08009b90  000244f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022aa2  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004219  00000000  00000000  00042cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00016197  00000000  00000000  00046ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  0005d080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002790  00000000  00000000  0005de98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a1d8  00000000  00000000  00060628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fe39  00000000  00000000  0007a800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e24a  00000000  00000000  0009a639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00138883  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045c0  00000000  00000000  001388d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080092ec 	.word	0x080092ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	080092ec 	.word	0x080092ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <as5048a_read>:
uint8_t calcEvenParity(uint16_t value) {
	uint8_t cnt = 0;

	for (uint8_t i = 0; i < 16; i++) {
		if (value & 0x1) {
			cnt++;
 8000f50:	f001 0301 	and.w	r3, r1, #1
	uint16_t cmd = CMD_READ | reg;
 8000f54:	f441 4280 	orr.w	r2, r1, #16384	; 0x4000
uint16_t as5048a_read(uint16_t ss, uint16_t reg) {
 8000f58:	b530      	push	{r4, r5, lr}
 8000f5a:	4604      	mov	r4, r0
		if (value & 0x1) {
 8000f5c:	0788      	lsls	r0, r1, #30
			cnt++;
 8000f5e:	bf48      	it	mi
 8000f60:	3301      	addmi	r3, #1
		if (value & 0x1) {
 8000f62:	0751      	lsls	r1, r2, #29
			cnt++;
 8000f64:	bf44      	itt	mi
 8000f66:	3301      	addmi	r3, #1
 8000f68:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f6a:	0715      	lsls	r5, r2, #28
			cnt++;
 8000f6c:	bf44      	itt	mi
 8000f6e:	3301      	addmi	r3, #1
 8000f70:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f72:	06d0      	lsls	r0, r2, #27
			cnt++;
 8000f74:	bf44      	itt	mi
 8000f76:	3301      	addmi	r3, #1
 8000f78:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f7a:	0691      	lsls	r1, r2, #26
			cnt++;
 8000f7c:	bf44      	itt	mi
 8000f7e:	3301      	addmi	r3, #1
 8000f80:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f82:	0655      	lsls	r5, r2, #25
			cnt++;
 8000f84:	bf44      	itt	mi
 8000f86:	3301      	addmi	r3, #1
 8000f88:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f8a:	0610      	lsls	r0, r2, #24
			cnt++;
 8000f8c:	bf44      	itt	mi
 8000f8e:	3301      	addmi	r3, #1
 8000f90:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f92:	05d1      	lsls	r1, r2, #23
			cnt++;
 8000f94:	bf44      	itt	mi
 8000f96:	3301      	addmi	r3, #1
 8000f98:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f9a:	0595      	lsls	r5, r2, #22
			cnt++;
 8000f9c:	bf44      	itt	mi
 8000f9e:	3301      	addmi	r3, #1
 8000fa0:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000fa2:	0550      	lsls	r0, r2, #21
			cnt++;
 8000fa4:	bf44      	itt	mi
 8000fa6:	3301      	addmi	r3, #1
 8000fa8:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000faa:	0511      	lsls	r1, r2, #20
			cnt++;
 8000fac:	bf44      	itt	mi
 8000fae:	3301      	addmi	r3, #1
 8000fb0:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000fb2:	04d5      	lsls	r5, r2, #19
			cnt++;
 8000fb4:	bf44      	itt	mi
 8000fb6:	3301      	addmi	r3, #1
 8000fb8:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000fba:	0490      	lsls	r0, r2, #18
			cnt++;
 8000fbc:	bf44      	itt	mi
 8000fbe:	3301      	addmi	r3, #1
 8000fc0:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000fc2:	0451      	lsls	r1, r2, #17
			cnt++;
 8000fc4:	bf44      	itt	mi
 8000fc6:	3301      	addmi	r3, #1
 8000fc8:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000fca:	0bd1      	lsrs	r1, r2, #15
			cnt++;
 8000fcc:	bf1c      	itt	ne
 8000fce:	3301      	addne	r3, #1
 8000fd0:	b2db      	uxtbne	r3, r3
	cmd |= ((uint16_t) calcEvenParity(cmd) << 15);
 8000fd2:	f003 0301 	and.w	r3, r3, #1
uint16_t as5048a_read(uint16_t ss, uint16_t reg) {
 8000fd6:	b083      	sub	sp, #12
	cmd |= ((uint16_t) calcEvenParity(cmd) << 15);
 8000fd8:	ea42 33c3 	orr.w	r3, r2, r3, lsl #15
	data[0] = (cmd >> 8) & 0xFF;
 8000fdc:	ba5b      	rev16	r3, r3
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_RESET);
 8000fde:	481d      	ldr	r0, [pc, #116]	; (8001054 <as5048a_read+0x104>)
	data[0] = (cmd >> 8) & 0xFF;
 8000fe0:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4621      	mov	r1, r4
 8000fe8:	f002 fab2 	bl	8003550 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 2, 0xFFFF);
 8000fec:	481a      	ldr	r0, [pc, #104]	; (8001058 <as5048a_read+0x108>)
 8000fee:	a901      	add	r1, sp, #4
 8000ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ff4:	2202      	movs	r2, #2
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8000ff6:	4605      	mov	r5, r0
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 2, 0xFFFF);
 8000ff8:	f002 fe48 	bl	8003c8c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	f003 f9fb 	bl	80043f8 <HAL_SPI_GetState>
 8001002:	2801      	cmp	r0, #1
 8001004:	d1fa      	bne.n	8000ffc <as5048a_read+0xac>
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_SET);
 8001006:	4602      	mov	r2, r0
 8001008:	4621      	mov	r1, r4
 800100a:	4812      	ldr	r0, [pc, #72]	; (8001054 <as5048a_read+0x104>)
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 800100c:	4d12      	ldr	r5, [pc, #72]	; (8001058 <as5048a_read+0x108>)
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_SET);
 800100e:	f002 fa9f 	bl	8003550 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_RESET);
 8001012:	4810      	ldr	r0, [pc, #64]	; (8001054 <as5048a_read+0x104>)
 8001014:	2200      	movs	r2, #0
 8001016:	4621      	mov	r1, r4
 8001018:	f002 fa9a 	bl	8003550 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 2, 0xFFFF);
 800101c:	a901      	add	r1, sp, #4
 800101e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001022:	2202      	movs	r2, #2
 8001024:	4628      	mov	r0, r5
 8001026:	f003 f8db 	bl	80041e0 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 800102a:	4628      	mov	r0, r5
 800102c:	f003 f9e4 	bl	80043f8 <HAL_SPI_GetState>
 8001030:	2801      	cmp	r0, #1
 8001032:	d1fa      	bne.n	800102a <as5048a_read+0xda>
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_SET);
 8001034:	4602      	mov	r2, r0
 8001036:	4621      	mov	r1, r4
 8001038:	4806      	ldr	r0, [pc, #24]	; (8001054 <as5048a_read+0x104>)
 800103a:	f002 fa89 	bl	8003550 <HAL_GPIO_WritePin>
	return (((data[0] & 0xFF) << 8) | (data[1] & 0xFF)) & ~0xC000; //wat
 800103e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001042:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001046:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 800104a:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800104e:	b003      	add	sp, #12
 8001050:	bd30      	pop	{r4, r5, pc}
 8001052:	bf00      	nop
 8001054:	40020400 	.word	0x40020400
 8001058:	200043ec 	.word	0x200043ec
 800105c:	00000000 	.word	0x00000000

08001060 <as5048a_init>:
void as5048a_init(MotorDriver *driver) {
 8001060:	b538      	push	{r3, r4, r5, lr}
 8001062:	4604      	mov	r4, r0
 8001064:	ed2d 8b02 	vpush	{d8}
	HAL_GPIO_WritePin(PINBUS_ENC, driver->PIN_ENC, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	8801      	ldrh	r1, [r0, #0]
 800106c:	4830      	ldr	r0, [pc, #192]	; (8001130 <as5048a_init+0xd0>)
	return 2 * ((float) angle * (360.0f * _1_16384) - 180);
 800106e:	ed9f 8a31 	vldr	s16, [pc, #196]	; 8001134 <as5048a_init+0xd4>
 8001072:	eddf 8a31 	vldr	s17, [pc, #196]	; 8001138 <as5048a_init+0xd8>
	HAL_GPIO_WritePin(PINBUS_ENC, driver->PIN_ENC, GPIO_PIN_SET);
 8001076:	f002 fa6b 	bl	8003550 <HAL_GPIO_WritePin>
	return as5048a_read(ss, REG_ANGLE);
 800107a:	8820      	ldrh	r0, [r4, #0]
 800107c:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001080:	f7ff ff66 	bl	8000f50 <as5048a_read>

/**
 * @brief Set zero angle from current angle
 */
void as5048a_setZero(MotorDriver *driver) {
	driver->zero_pos = as5048a_getRawRotation(driver->PIN_ENC);
 8001084:	ee07 0a90 	vmov	s15, r0
 8001088:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return 2 * ((float) angle * (360.0f * _1_16384) - 180);
 800108c:	eeb0 7a48 	vmov.f32	s14, s16
 8001090:	eea7 7aa8 	vfma.f32	s14, s15, s17
	return as5048a_read(ss, REG_ANGLE);
 8001094:	8820      	ldrh	r0, [r4, #0]
	driver->zero_pos = as5048a_getRawRotation(driver->PIN_ENC);
 8001096:	edc4 7a4c 	vstr	s15, [r4, #304]	; 0x130
	return 2 * ((float) angle * (360.0f * _1_16384) - 180);
 800109a:	ee77 7a07 	vadd.f32	s15, s14, s14
	return as5048a_read(ss, REG_ANGLE);
 800109e:	f643 71ff 	movw	r1, #16383	; 0x3fff
	driver->zero_pos_map = as5048a_readToAngle(driver->zero_pos);
 80010a2:	edc4 7a4e 	vstr	s15, [r4, #312]	; 0x138
	return as5048a_read(ss, REG_ANGLE);
 80010a6:	f7ff ff53 	bl	8000f50 <as5048a_read>
	return 2 * ((float) angle * (360.0f * _1_16384) - 180);
 80010aa:	ee07 0a90 	vmov	s15, r0
 80010ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
	angle += 180;
 80010b2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800113c <as5048a_init+0xdc>
	return 2 * ((float) angle * (360.0f * _1_16384) - 180);
 80010b6:	eea7 8aa8 	vfma.f32	s16, s15, s17
	driver->angle = lpf_exec(&driver->LPF_angle_measure, as5048a_normalize(angle));
 80010ba:	f504 758a 	add.w	r5, r4, #276	; 0x114
	angle += 180;
 80010be:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
	angle = fmod(angle, 360);
 80010c2:	eea8 7a27 	vfma.f32	s14, s16, s15
 80010c6:	ee17 0a10 	vmov	r0, s14
 80010ca:	f7ff fa45 	bl	8000558 <__aeabi_f2d>
 80010ce:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8001128 <as5048a_init+0xc8>
 80010d2:	ec41 0b10 	vmov	d0, r0, r1
 80010d6:	f006 fd69 	bl	8007bac <fmod>
 80010da:	ec51 0b10 	vmov	r0, r1, d0
 80010de:	f7ff fd6b 	bl	8000bb8 <__aeabi_d2f>
 80010e2:	ee07 0a90 	vmov	s15, r0
	if (angle < 0) {
 80010e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		angle += 360;
 80010ee:	bf48      	it	mi
 80010f0:	ed9f 7a13 	vldrmi	s14, [pc, #76]	; 8001140 <as5048a_init+0xe0>
	angle -= 180;
 80010f4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800113c <as5048a_init+0xdc>
		angle += 360;
 80010f8:	bf48      	it	mi
 80010fa:	ee77 7a87 	vaddmi.f32	s15, s15, s14
	driver->angle = lpf_exec(&driver->LPF_angle_measure, as5048a_normalize(angle));
 80010fe:	4628      	mov	r0, r5
 8001100:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8001104:	f000 fc32 	bl	800196c <lpf_exec>
	HAL_Delay(1);
 8001108:	2001      	movs	r0, #1
	driver->angle = lpf_exec(&driver->LPF_angle_measure, as5048a_normalize(angle));
 800110a:	ed84 0a4f 	vstr	s0, [r4, #316]	; 0x13c
	HAL_Delay(1);
 800110e:	f001 fc99 	bl	8002a44 <HAL_Delay>
}
 8001112:	ecbd 8b02 	vpop	{d8}
	lpf_init(&driver->LPF_angle_measure, 0.005);
 8001116:	4628      	mov	r0, r5
 8001118:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001144 <as5048a_init+0xe4>
}
 800111c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lpf_init(&driver->LPF_angle_measure, 0.005);
 8001120:	f000 bc1a 	b.w	8001958 <lpf_init>
 8001124:	f3af 8000 	nop.w
 8001128:	00000000 	.word	0x00000000
 800112c:	40768000 	.word	0x40768000
 8001130:	40020400 	.word	0x40020400
 8001134:	c3340000 	.word	0xc3340000
 8001138:	3cb40000 	.word	0x3cb40000
 800113c:	43340000 	.word	0x43340000
 8001140:	43b40000 	.word	0x43b40000
 8001144:	3ba3d70a 	.word	0x3ba3d70a

08001148 <as5048a_getAngle>:
void as5048a_getAngle(MotorDriver *driver) {
 8001148:	b538      	push	{r3, r4, r5, lr}
	return as5048a_read(ss, REG_ANGLE);
 800114a:	f643 71ff 	movw	r1, #16383	; 0x3fff
void as5048a_getAngle(MotorDriver *driver) {
 800114e:	4604      	mov	r4, r0
	return as5048a_read(ss, REG_ANGLE);
 8001150:	8800      	ldrh	r0, [r0, #0]
 8001152:	f7ff fefd 	bl	8000f50 <as5048a_read>
	return 2 * ((float) angle * (360.0f * _1_16384) - 180);
 8001156:	ee07 0a90 	vmov	s15, r0
 800115a:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80011d0 <as5048a_getAngle+0x88>
	angle += 180;
 800115e:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80011d4 <as5048a_getAngle+0x8c>
	return 2 * ((float) angle * (360.0f * _1_16384) - 180);
 8001162:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001166:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80011d8 <as5048a_getAngle+0x90>
 800116a:	eee7 7a06 	vfma.f32	s15, s14, s12
	driver->angle = lpf_exec(&driver->LPF_angle_measure, as5048a_normalize(angle));
 800116e:	f504 758a 	add.w	r5, r4, #276	; 0x114
	angle += 180;
 8001172:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
	angle = fmod(angle, 360);
 8001176:	eee7 6a87 	vfma.f32	s13, s15, s14
 800117a:	ee16 0a90 	vmov	r0, s13
 800117e:	f7ff f9eb 	bl	8000558 <__aeabi_f2d>
 8001182:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80011c8 <as5048a_getAngle+0x80>
 8001186:	ec41 0b10 	vmov	d0, r0, r1
 800118a:	f006 fd0f 	bl	8007bac <fmod>
 800118e:	ec51 0b10 	vmov	r0, r1, d0
 8001192:	f7ff fd11 	bl	8000bb8 <__aeabi_d2f>
 8001196:	ee07 0a90 	vmov	s15, r0
	if (angle < 0) {
 800119a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		angle += 360;
 80011a2:	bf48      	it	mi
 80011a4:	ed9f 7a0d 	vldrmi	s14, [pc, #52]	; 80011dc <as5048a_getAngle+0x94>
	angle -= 180;
 80011a8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80011d4 <as5048a_getAngle+0x8c>
		angle += 360;
 80011ac:	bf48      	it	mi
 80011ae:	ee77 7a87 	vaddmi.f32	s15, s15, s14
	driver->angle = lpf_exec(&driver->LPF_angle_measure, as5048a_normalize(angle));
 80011b2:	4628      	mov	r0, r5
 80011b4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80011b8:	f000 fbd8 	bl	800196c <lpf_exec>
 80011bc:	ed84 0a4f 	vstr	s0, [r4, #316]	; 0x13c
}
 80011c0:	bd38      	pop	{r3, r4, r5, pc}
 80011c2:	bf00      	nop
 80011c4:	f3af 8000 	nop.w
 80011c8:	00000000 	.word	0x00000000
 80011cc:	40768000 	.word	0x40768000
 80011d0:	3cb40000 	.word	0x3cb40000
 80011d4:	43340000 	.word	0x43340000
 80011d8:	c3340000 	.word	0xc3340000
 80011dc:	43b40000 	.word	0x43b40000

080011e0 <as5048a_getVelocity>:
}

/**@brief Calculate speed in ˚/s using angular values and input time
 *@param Motor driver containing anglular values
 */
void as5048a_getVelocity(MotorDriver *driver){
 80011e0:	b538      	push	{r3, r4, r5, lr}
 80011e2:	4604      	mov	r4, r0
 80011e4:	ed2d 8b02 	vpush	{d8}

//	as5048a_getAngle(driver);
	uint32_t timestamp_us = get_us();
 80011e8:	f001 fbaa 	bl	8002940 <get_us>

	float T_samp = (timestamp_us - driver->prev_timestamp_us) * 1e-6f;
 80011ec:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 80011f0:	ed9f 8a37 	vldr	s16, [pc, #220]	; 80012d0 <as5048a_getVelocity+0xf0>
	if(T_samp <= 0 || T_samp > 0.5f) T_samp = 1e-3;

	/* Calculate difference between current and previous angles */
	float angle_diff = fabs(fmod(driver->angle - driver->prev_angle + 180, 360) - 180);
 80011f4:	edd4 8a4f 	vldr	s17, [r4, #316]	; 0x13c
	float T_samp = (timestamp_us - driver->prev_timestamp_us) * 1e-6f;
 80011f8:	1ac3      	subs	r3, r0, r3
 80011fa:	ee07 3a90 	vmov	s15, r3
 80011fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
	uint32_t timestamp_us = get_us();
 8001202:	4605      	mov	r5, r0
	float T_samp = (timestamp_us - driver->prev_timestamp_us) * 1e-6f;
 8001204:	ee27 8a88 	vmul.f32	s16, s15, s16
	if(T_samp <= 0 || T_samp > 0.5f) T_samp = 1e-3;
 8001208:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800120c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001210:	d92f      	bls.n	8001272 <as5048a_getVelocity+0x92>
 8001212:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80012d4 <as5048a_getVelocity+0xf4>
 8001216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800121a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121e:	dc28      	bgt.n	8001272 <as5048a_getVelocity+0x92>
	float angle_diff = fabs(fmod(driver->angle - driver->prev_angle + 180, 360) - 180);
 8001220:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80012d8 <as5048a_getVelocity+0xf8>
 8001224:	ed94 7a50 	vldr	s14, [r4, #320]	; 0x140
 8001228:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800122c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001230:	ee17 0a90 	vmov	r0, s15
 8001234:	f7ff f990 	bl	8000558 <__aeabi_f2d>
 8001238:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80012c8 <as5048a_getVelocity+0xe8>
 800123c:	ec41 0b10 	vmov	d0, r0, r1
 8001240:	f006 fcb4 	bl	8007bac <fmod>
 8001244:	4b25      	ldr	r3, [pc, #148]	; (80012dc <as5048a_getVelocity+0xfc>)
 8001246:	ec51 0b10 	vmov	r0, r1, d0
 800124a:	2200      	movs	r2, #0
 800124c:	f7ff f824 	bl	8000298 <__aeabi_dsub>
 8001250:	f7ff fcb2 	bl	8000bb8 <__aeabi_d2f>
 8001254:	ee07 0a90 	vmov	s15, r0
 8001258:	eef0 7ae7 	vabs.f32	s15, s15

	/* Calculate velocity */
	driver->velocity = angle_diff/T_samp;
 800125c:	ee87 7a88 	vdiv.f32	s14, s15, s16
	if(T_samp == 0) driver->velocity = 0;

	driver->prev_timestamp_us = timestamp_us;
 8001260:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
	driver->prev_angle = driver->angle;
 8001264:	edc4 8a50 	vstr	s17, [r4, #320]	; 0x140
}
 8001268:	ecbd 8b02 	vpop	{d8}
	driver->velocity = angle_diff/T_samp;
 800126c:	ed84 7a53 	vstr	s14, [r4, #332]	; 0x14c
}
 8001270:	bd38      	pop	{r3, r4, r5, pc}
	float angle_diff = fabs(fmod(driver->angle - driver->prev_angle + 180, 360) - 180);
 8001272:	eddf 7a19 	vldr	s15, [pc, #100]	; 80012d8 <as5048a_getVelocity+0xf8>
 8001276:	ed94 7a50 	vldr	s14, [r4, #320]	; 0x140
 800127a:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800127e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001282:	ee17 0a90 	vmov	r0, s15
 8001286:	f7ff f967 	bl	8000558 <__aeabi_f2d>
 800128a:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80012c8 <as5048a_getVelocity+0xe8>
 800128e:	ec41 0b10 	vmov	d0, r0, r1
 8001292:	f006 fc8b 	bl	8007bac <fmod>
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <as5048a_getVelocity+0xfc>)
 8001298:	ec51 0b10 	vmov	r0, r1, d0
 800129c:	2200      	movs	r2, #0
 800129e:	f7fe fffb 	bl	8000298 <__aeabi_dsub>
 80012a2:	f7ff fc89 	bl	8000bb8 <__aeabi_d2f>
	driver->prev_angle = driver->angle;
 80012a6:	edc4 8a50 	vstr	s17, [r4, #320]	; 0x140
	float angle_diff = fabs(fmod(driver->angle - driver->prev_angle + 180, 360) - 180);
 80012aa:	ee07 0a90 	vmov	s15, r0
}
 80012ae:	ecbd 8b02 	vpop	{d8}
	driver->velocity = angle_diff/T_samp;
 80012b2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80012e0 <as5048a_getVelocity+0x100>
	driver->prev_timestamp_us = timestamp_us;
 80012b6:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
	float angle_diff = fabs(fmod(driver->angle - driver->prev_angle + 180, 360) - 180);
 80012ba:	eef0 7ae7 	vabs.f32	s15, s15
	driver->velocity = angle_diff/T_samp;
 80012be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c2:	edc4 7a53 	vstr	s15, [r4, #332]	; 0x14c
}
 80012c6:	bd38      	pop	{r3, r4, r5, pc}
 80012c8:	00000000 	.word	0x00000000
 80012cc:	40768000 	.word	0x40768000
 80012d0:	358637bd 	.word	0x358637bd
 80012d4:	48f42400 	.word	0x48f42400
 80012d8:	43340000 	.word	0x43340000
 80012dc:	40668000 	.word	0x40668000
 80012e0:	4479ffff 	.word	0x4479ffff

080012e4 <drv8313_init>:
 * 1: Set nRESET and nSLEEP to inactive HIGH to enable the three phase H-bridge.
 * 2: Read the nFAULT pin. If the pin is active HIGH, the initialization stops. If inactive LOW, the procedure continues.
 * 3: Pass references to timers and timer channels so that the PWM function of each timer may be used.
 * 4: Start PWM.
 */
uint8_t drv8313_init(MotorDriver *driver, TIM_HandleTypeDef *htim) {
 80012e4:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(PINBUS_DRV8313, PIN_nSLEEP, GPIO_PIN_SET); /* Enable the unit by setting nRESET + nSLEEP to HIGH*/
 80012e6:	2201      	movs	r2, #1
uint8_t drv8313_init(MotorDriver *driver, TIM_HandleTypeDef *htim) {
 80012e8:	4604      	mov	r4, r0
 80012ea:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(PINBUS_DRV8313, PIN_nSLEEP, GPIO_PIN_SET); /* Enable the unit by setting nRESET + nSLEEP to HIGH*/
 80012ec:	4841      	ldr	r0, [pc, #260]	; (80013f4 <drv8313_init+0x110>)
 80012ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f2:	f002 f92d 	bl	8003550 <HAL_GPIO_WritePin>
	HAL_Delay(1); //Misread prevention delay.
 80012f6:	2001      	movs	r0, #1
 80012f8:	f001 fba4 	bl	8002a44 <HAL_Delay>
	if (!HAL_GPIO_ReadPin(PINBUS_DRV8313, PIN_nFAULT)) {
 80012fc:	483d      	ldr	r0, [pc, #244]	; (80013f4 <drv8313_init+0x110>)
 80012fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001302:	f002 f91f 	bl	8003544 <HAL_GPIO_ReadPin>
 8001306:	b900      	cbnz	r0, 800130a <drv8313_init+0x26>
	/* Calculate PWM period */
	driver->pwm_period = driver->timer->Init.Period + 1;

	return 1;

}
 8001308:	bd70      	pop	{r4, r5, r6, pc}
	driver->pwm_ch1 = TIM_CHANNEL_1;
 800130a:	f44f 6280 	mov.w	r2, #1024	; 0x400
	driver->pwm_ch3 = TIM_CHANNEL_3;
 800130e:	2308      	movs	r3, #8
	driver->pwm_ch1 = TIM_CHANNEL_1;
 8001310:	f8a4 2124 	strh.w	r2, [r4, #292]	; 0x124
	driver->pwm_ch3 = TIM_CHANNEL_3;
 8001314:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
	driver->timer = htim;
 8001318:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
	PID_Init(&driver->d_reg);
 800131c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001320:	f001 f820 	bl	8002364 <PID_Init>
	PID_Init(&driver->q_reg);
 8001324:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8001328:	f001 f81c 	bl	8002364 <PID_Init>
	PID_Init(&driver->speed_reg);
 800132c:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8001330:	f001 f818 	bl	8002364 <PID_Init>
	PID_Init(&driver->pos_reg);
 8001334:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8001338:	f001 f814 	bl	8002364 <PID_Init>
	driver->speed_reg.lim_min = -BLDC_MAX_VOLTAGE/BLDC_PHASE_RESISTANCE;
 800133c:	4d2e      	ldr	r5, [pc, #184]	; (80013f8 <drv8313_init+0x114>)
	driver->speed_reg.lim_max = BLDC_MAX_VOLTAGE/BLDC_PHASE_RESISTANCE;
 800133e:	482f      	ldr	r0, [pc, #188]	; (80013fc <drv8313_init+0x118>)
	driver->pos_reg.lim_min = -6000; 		/* ˚/s */
 8001340:	492f      	ldr	r1, [pc, #188]	; (8001400 <drv8313_init+0x11c>)
	driver->pos_reg.lim_max = 6000;		/* ˚/s */
 8001342:	4a30      	ldr	r2, [pc, #192]	; (8001404 <drv8313_init+0x120>)
	driver->speed_reg.lim_min = -BLDC_MAX_VOLTAGE/BLDC_PHASE_RESISTANCE;
 8001344:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
	driver->d_reg.Ki = 0.0f;
 8001348:	2300      	movs	r3, #0
	driver->speed_reg.lim_max = BLDC_MAX_VOLTAGE/BLDC_PHASE_RESISTANCE;
 800134a:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
	driver->pos_reg.lim_min = -6000; 		/* ˚/s */
 800134e:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	driver->d_reg.lim_min = -BLDC_MAX_VOLTAGE;
 8001352:	482d      	ldr	r0, [pc, #180]	; (8001408 <drv8313_init+0x124>)
	driver->d_reg.lim_max = BLDC_MAX_VOLTAGE;
 8001354:	492d      	ldr	r1, [pc, #180]	; (800140c <drv8313_init+0x128>)
	driver->pos_reg.lim_max = 6000;		/* ˚/s */
 8001356:	f8c4 20c4 	str.w	r2, [r4, #196]	; 0xc4
	driver->d_reg.Ki = 0.0f;
 800135a:	62a3      	str	r3, [r4, #40]	; 0x28
	driver->d_reg.Kp = 1.0f;
 800135c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	driver->d_reg.Kd = 0.0f;
 8001360:	62e3      	str	r3, [r4, #44]	; 0x2c
	driver->q_reg.Ki = 0.0f;
 8001362:	65a3      	str	r3, [r4, #88]	; 0x58
	driver->q_reg.Kd = 0.0f;
 8001364:	65e3      	str	r3, [r4, #92]	; 0x5c
	driver->speed_reg.Kd = 0.0f;
 8001366:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	driver->pos_reg.Ki = 0.0f;
 800136a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	driver->pos_reg.Kd = 0.0f;
 800136e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	driver->speed_reg.Kp = 0.2785f;
 8001372:	4e27      	ldr	r6, [pc, #156]	; (8001410 <drv8313_init+0x12c>)
	driver->pos_reg.Kp = 20.0f;
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <drv8313_init+0x130>)
	driver->speed_reg.Ki = 10.0f;
 8001376:	4d28      	ldr	r5, [pc, #160]	; (8001418 <drv8313_init+0x134>)
	driver->pos_reg.Kp = 20.0f;
 8001378:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
	driver->d_reg.Kp = 1.0f;
 800137c:	6262      	str	r2, [r4, #36]	; 0x24
	driver->q_reg.Kp = 1.0f;
 800137e:	6562      	str	r2, [r4, #84]	; 0x54
	driver->d_reg.lim_max = BLDC_MAX_VOLTAGE;
 8001380:	6361      	str	r1, [r4, #52]	; 0x34
	driver->q_reg.lim_max = BLDC_MAX_VOLTAGE;
 8001382:	6661      	str	r1, [r4, #100]	; 0x64
	driver->d_reg.lim_min = -BLDC_MAX_VOLTAGE;
 8001384:	6320      	str	r0, [r4, #48]	; 0x30
	driver->q_reg.lim_min = -BLDC_MAX_VOLTAGE;
 8001386:	6620      	str	r0, [r4, #96]	; 0x60
	lpf_init(&driver->LPF_current_d, 0.005f);
 8001388:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800141c <drv8313_init+0x138>
	driver->speed_reg.Kp = 0.2785f;
 800138c:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
	lpf_init(&driver->LPF_current_d, 0.005f);
 8001390:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	driver->speed_reg.Ki = 10.0f;
 8001394:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
	lpf_init(&driver->LPF_current_d, 0.005f);
 8001398:	f000 fade 	bl	8001958 <lpf_init>
	lpf_init(&driver->LPF_current_q, 0.005f);
 800139c:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
 80013a0:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800141c <drv8313_init+0x138>
 80013a4:	f000 fad8 	bl	8001958 <lpf_init>
	lpf_init(&driver->LPF_velocity, 0.005f);
 80013a8:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
 80013ac:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800141c <drv8313_init+0x138>
 80013b0:	f000 fad2 	bl	8001958 <lpf_init>
	lpf_init(&driver->LPF_angle, 0.005f);
 80013b4:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800141c <drv8313_init+0x138>
 80013b8:	f504 7084 	add.w	r0, r4, #264	; 0x108
 80013bc:	f000 facc 	bl	8001958 <lpf_init>
	HAL_TIM_PWM_Start(driver->timer, driver->pwm_ch1);
 80013c0:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
 80013c4:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
 80013c8:	f003 f994 	bl	80046f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(driver->timer, driver->pwm_ch2);
 80013cc:	f894 1125 	ldrb.w	r1, [r4, #293]	; 0x125
 80013d0:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
 80013d4:	f003 f98e 	bl	80046f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(driver->timer, driver->pwm_ch3);
 80013d8:	f894 1126 	ldrb.w	r1, [r4, #294]	; 0x126
 80013dc:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
 80013e0:	f003 f988 	bl	80046f4 <HAL_TIM_PWM_Start>
	driver->pwm_period = driver->timer->Init.Period + 1;
 80013e4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	3301      	adds	r3, #1
 80013ec:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
	return 1;
 80013f0:	2001      	movs	r0, #1
}
 80013f2:	bd70      	pop	{r4, r5, r6, pc}
 80013f4:	40020400 	.word	0x40020400
 80013f8:	c01197a8 	.word	0xc01197a8
 80013fc:	401197a8 	.word	0x401197a8
 8001400:	c5bb8000 	.word	0xc5bb8000
 8001404:	45bb8000 	.word	0x45bb8000
 8001408:	c1400000 	.word	0xc1400000
 800140c:	41400000 	.word	0x41400000
 8001410:	3e8e978d 	.word	0x3e8e978d
 8001414:	41a00000 	.word	0x41a00000
 8001418:	41200000 	.word	0x41200000
 800141c:	3ba3d70a 	.word	0x3ba3d70a

08001420 <drv8313_setPWM2>:
	/* Wait for PWM period to finish before setting new duty period
	 * Note: May be unnecessary, but used as a safety measure for now */
//	while(tim_instance->CNT != 0){
//	}

	tim_instance->CCR1 = duty_a * driver->pwm_period;
 8001420:	f8b0 3128 	ldrh.w	r3, [r0, #296]	; 0x128
 8001424:	ee07 3a90 	vmov	s15, r3
 8001428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142c:	ee27 0a80 	vmul.f32	s0, s15, s0
	tim_instance->CCR2 = duty_b * driver->pwm_period;
 8001430:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tim_instance->CCR3 = duty_c * driver->pwm_period;
 8001434:	ee27 1a81 	vmul.f32	s2, s15, s2
	tim_instance->CCR1 = duty_a * driver->pwm_period;
 8001438:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	tim_instance->CCR2 = duty_b * driver->pwm_period;
 800143c:	eefc 0ae0 	vcvt.u32.f32	s1, s1
	tim_instance->CCR3 = duty_c * driver->pwm_period;
 8001440:	eebc 1ac1 	vcvt.u32.f32	s2, s2
	tim_instance->CCR1 = duty_a * driver->pwm_period;
 8001444:	ed81 0a0d 	vstr	s0, [r1, #52]	; 0x34
	tim_instance->CCR2 = duty_b * driver->pwm_period;
 8001448:	edc1 0a0e 	vstr	s1, [r1, #56]	; 0x38
	tim_instance->CCR3 = duty_c * driver->pwm_period;
 800144c:	ed81 1a0f 	vstr	s2, [r1, #60]	; 0x3c
}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop

08001454 <foc_pi_control>:
}

/**
 * @brief All PI regulation required to get dq-reference voltages
 */
void foc_pi_control(MotorDriver *driver, float target){
 8001454:	b510      	push	{r4, lr}

	/* Check which type of regulation should be used */
	if(CONTROL_TYPE == CONTROL_POSITION) driver->velocity_target = PID_Update(&driver->pos_reg, target, driver->angle);
 8001456:	edd0 0a4f 	vldr	s1, [r0, #316]	; 0x13c
void foc_pi_control(MotorDriver *driver, float target){
 800145a:	4604      	mov	r4, r0
 800145c:	ed2d 8b02 	vpush	{d8}
	if(CONTROL_TYPE == CONTROL_POSITION) driver->velocity_target = PID_Update(&driver->pos_reg, target, driver->angle);
 8001460:	30b4      	adds	r0, #180	; 0xb4
 8001462:	f000 ff8f 	bl	8002384 <PID_Update>
	else if(CONTROL_TYPE == CONTROL_VELOCITY) driver->velocity_target = target;

	/* Velocity regulation --> i_qref
	 * Note: Setpoint should be set by main function later*/
	float i_qref = PID_Update(&driver->speed_reg, driver->velocity_target, driver->velocity);
 8001466:	edd4 0a53 	vldr	s1, [r4, #332]	; 0x14c
	if(CONTROL_TYPE == CONTROL_POSITION) driver->velocity_target = PID_Update(&driver->pos_reg, target, driver->angle);
 800146a:	ed84 0a54 	vstr	s0, [r4, #336]	; 0x150
	float i_qref = PID_Update(&driver->speed_reg, driver->velocity_target, driver->velocity);
 800146e:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8001472:	f000 ff87 	bl	8002384 <PID_Update>

	driver->i_d = lpf_exec(&driver->LPF_current_d, driver->i_d);
 8001476:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
	float i_qref = PID_Update(&driver->speed_reg, driver->velocity_target, driver->velocity);
 800147a:	eeb0 8a40 	vmov.f32	s16, s0
	driver->i_d = lpf_exec(&driver->LPF_current_d, driver->i_d);
 800147e:	ed94 0a03 	vldr	s0, [r4, #12]
 8001482:	f000 fa73 	bl	800196c <lpf_exec>
	driver->i_q = lpf_exec(&driver->LPF_current_q, driver->i_q);
 8001486:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
	driver->i_d = lpf_exec(&driver->LPF_current_d, driver->i_d);
 800148a:	ed84 0a03 	vstr	s0, [r4, #12]
	driver->i_q = lpf_exec(&driver->LPF_current_q, driver->i_q);
 800148e:	ed94 0a04 	vldr	s0, [r4, #16]
 8001492:	f000 fa6b 	bl	800196c <lpf_exec>
	/* current PI stuff */
	driver->V_d = PID_Update(&driver->d_reg, 0, driver->i_d);
 8001496:	edd4 0a03 	vldr	s1, [r4, #12]
	driver->i_q = lpf_exec(&driver->LPF_current_q, driver->i_q);
 800149a:	ed84 0a04 	vstr	s0, [r4, #16]
	driver->V_d = PID_Update(&driver->d_reg, 0, driver->i_d);
 800149e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80014a2:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80014c8 <foc_pi_control+0x74>
 80014a6:	f000 ff6d 	bl	8002384 <PID_Update>
	driver->V_q = PID_Update(&driver->q_reg, i_qref, driver->i_q);
 80014aa:	edd4 0a04 	vldr	s1, [r4, #16]
	driver->V_d = PID_Update(&driver->d_reg, 0, driver->i_d);
 80014ae:	ed84 0a06 	vstr	s0, [r4, #24]
	driver->V_q = PID_Update(&driver->q_reg, i_qref, driver->i_q);
 80014b2:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80014b6:	eeb0 0a48 	vmov.f32	s0, s16
 80014ba:	f000 ff63 	bl	8002384 <PID_Update>
}
 80014be:	ecbd 8b02 	vpop	{d8}
	driver->V_q = PID_Update(&driver->q_reg, i_qref, driver->i_q);
 80014c2:	ed84 0a05 	vstr	s0, [r4, #20]
}
 80014c6:	bd10      	pop	{r4, pc}
	...

080014d0 <foc_setPhaseVoltage3>:


	float V_ref, a_duty = 0, b_duty = 0, c_duty = 0;


	V_ref = sqrtApprox(V_alpha * V_alpha + V_beta * V_beta);
 80014d0:	ee60 7aa0 	vmul.f32	s15, s1, s1
void foc_setPhaseVoltage3(MotorDriver *driver, float V_alpha, float V_beta){
 80014d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	V_ref = sqrtApprox(V_alpha * V_alpha + V_beta * V_beta);
 80014d6:	eee0 7a00 	vfma.f32	s15, s0, s0
  i = 0x5f375a86 - ( i >> 1 );
 80014da:	4bcf      	ldr	r3, [pc, #828]	; (8001818 <foc_setPhaseVoltage3+0x348>)
void foc_setPhaseVoltage3(MotorDriver *driver, float V_alpha, float V_beta){
 80014dc:	4605      	mov	r5, r0
  i = 0x5f375a86 - ( i >> 1 );
 80014de:	ee17 2a90 	vmov	r2, s15
 80014e2:	eba3 0062 	sub.w	r0, r3, r2, asr #1

	float T1, T2, T0;

	float m = _SQRT3 * V_ref * _1_Vdc;
 80014e6:	ee07 0a10 	vmov	s14, r0
void foc_setPhaseVoltage3(MotorDriver *driver, float V_alpha, float V_beta){
 80014ea:	ed2d 8b04 	vpush	{d8-d9}
	float m = _SQRT3 * V_ref * _1_Vdc;
 80014ee:	ee67 7a87 	vmul.f32	s15, s15, s14
void foc_setPhaseVoltage3(MotorDriver *driver, float V_alpha, float V_beta){
 80014f2:	b083      	sub	sp, #12
	float m = _SQRT3 * V_ref * _1_Vdc;
 80014f4:	ee17 0a90 	vmov	r0, s15
void foc_setPhaseVoltage3(MotorDriver *driver, float V_alpha, float V_beta){
 80014f8:	eeb0 8a60 	vmov.f32	s16, s1
 80014fc:	eef0 8a40 	vmov.f32	s17, s0
	float m = _SQRT3 * V_ref * _1_Vdc;
 8001500:	f7ff f82a 	bl	8000558 <__aeabi_f2d>
 8001504:	a3c0      	add	r3, pc, #768	; (adr r3, 8001808 <foc_setPhaseVoltage3+0x338>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7ff f87d 	bl	8000608 <__aeabi_dmul>
 800150e:	f7ff fb53 	bl	8000bb8 <__aeabi_d2f>
//	float theta = fmod(atan2(V_beta, V_alpha) + _2PI, _2PI);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8001512:	2201      	movs	r2, #1
	float m = _SQRT3 * V_ref * _1_Vdc;
 8001514:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8001516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800151a:	48c0      	ldr	r0, [pc, #768]	; (800181c <foc_setPhaseVoltage3+0x34c>)
	/*Sector selection*/
	uint8_t sector = theta * _3_PI + 1;


	/* Duty time calculation */
	T1 = m * sin(sector * _PI_3 - theta);
 800151c:	eddf 9ac0 	vldr	s19, [pc, #768]	; 8001820 <foc_setPhaseVoltage3+0x350>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8001520:	f002 f816 	bl	8003550 <HAL_GPIO_WritePin>
	float theta = _normalizeAngle(driver->angle_electrical*DEG_TO_RAD + atan2(V_beta, V_alpha));
 8001524:	ee18 0a90 	vmov	r0, s17
 8001528:	f7ff f816 	bl	8000558 <__aeabi_f2d>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	ee18 0a10 	vmov	r0, s16
 8001534:	ec43 2b18 	vmov	d8, r2, r3
 8001538:	f7ff f80e 	bl	8000558 <__aeabi_f2d>
 800153c:	eeb0 1a48 	vmov.f32	s2, s16
 8001540:	eef0 1a68 	vmov.f32	s3, s17
 8001544:	ec41 0b10 	vmov	d0, r0, r1
 8001548:	f006 fb2e 	bl	8007ba8 <atan2>
 800154c:	ed95 7a51 	vldr	s14, [r5, #324]	; 0x144
 8001550:	eddf 7ab4 	vldr	s15, [pc, #720]	; 8001824 <foc_setPhaseVoltage3+0x354>
 8001554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001558:	ec57 6b10 	vmov	r6, r7, d0
 800155c:	ee17 0a90 	vmov	r0, s15
 8001560:	f7fe fffa 	bl	8000558 <__aeabi_f2d>
 8001564:	463b      	mov	r3, r7
 8001566:	4632      	mov	r2, r6
 8001568:	f7fe fe98 	bl	800029c <__adddf3>
 800156c:	f7ff fb24 	bl	8000bb8 <__aeabi_d2f>
  float a = fmod(angle, _2PI);
 8001570:	f7fe fff2 	bl	8000558 <__aeabi_f2d>
 8001574:	ed9f 1ba6 	vldr	d1, [pc, #664]	; 8001810 <foc_setPhaseVoltage3+0x340>
 8001578:	ec41 0b10 	vmov	d0, r0, r1
 800157c:	f006 fb16 	bl	8007bac <fmod>
 8001580:	ec51 0b10 	vmov	r0, r1, d0
 8001584:	f7ff fb18 	bl	8000bb8 <__aeabi_d2f>
 8001588:	ee08 0a90 	vmov	s17, r0
  return a >= 0 ? a : (a + _2PI);
 800158c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	bf48      	it	mi
 8001596:	eddf 7aa4 	vldrmi	s15, [pc, #656]	; 8001828 <foc_setPhaseVoltage3+0x358>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, !SET);
 800159a:	48a0      	ldr	r0, [pc, #640]	; (800181c <foc_setPhaseVoltage3+0x34c>)
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  return a >= 0 ? a : (a + _2PI);
 80015a4:	bf48      	it	mi
 80015a6:	ee78 8aa7 	vaddmi.f32	s17, s17, s15
	uint8_t sector = theta * _3_PI + 1;
 80015aa:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, !SET);
 80015ae:	f001 ffcf 	bl	8003550 <HAL_GPIO_WritePin>
	uint8_t sector = theta * _3_PI + 1;
 80015b2:	eddf 7a9e 	vldr	s15, [pc, #632]	; 800182c <foc_setPhaseVoltage3+0x35c>
 80015b6:	eeb0 7a48 	vmov.f32	s14, s16
 80015ba:	eea8 7aa7 	vfma.f32	s14, s17, s15
	T1 = m * sin(sector * _PI_3 - theta);
 80015be:	4620      	mov	r0, r4
	uint8_t sector = theta * _3_PI + 1;
 80015c0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80015c4:	edcd 7a00 	vstr	s15, [sp]
 80015c8:	f89d 4000 	ldrb.w	r4, [sp]
	T1 = m * sin(sector * _PI_3 - theta);
 80015cc:	f7fe ffc4 	bl	8000558 <__aeabi_f2d>
 80015d0:	ee07 4a90 	vmov	s15, r4
 80015d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d8:	eeb0 7a68 	vmov.f32	s14, s17
 80015dc:	ee97 7aa9 	vfnms.f32	s14, s15, s19
 80015e0:	4606      	mov	r6, r0
 80015e2:	460f      	mov	r7, r1
	T2 = m * sin(theta - (sector - 1) * _PI_3);
 80015e4:	3c01      	subs	r4, #1
	T1 = m * sin(sector * _PI_3 - theta);
 80015e6:	ee17 0a10 	vmov	r0, s14
 80015ea:	f7fe ffb5 	bl	8000558 <__aeabi_f2d>
 80015ee:	ec41 0b10 	vmov	d0, r0, r1
 80015f2:	f006 fa85 	bl	8007b00 <sin>
 80015f6:	4630      	mov	r0, r6
 80015f8:	ec53 2b10 	vmov	r2, r3, d0
 80015fc:	4639      	mov	r1, r7
 80015fe:	f7ff f803 	bl	8000608 <__aeabi_dmul>
 8001602:	f7ff fad9 	bl	8000bb8 <__aeabi_d2f>
	T2 = m * sin(theta - (sector - 1) * _PI_3);
 8001606:	ee07 4a90 	vmov	s15, r4
 800160a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	T1 = m * sin(sector * _PI_3 - theta);
 800160e:	ee09 0a10 	vmov	s18, r0
	T2 = m * sin(theta - (sector - 1) * _PI_3);
 8001612:	eee7 8ae9 	vfms.f32	s17, s15, s19
 8001616:	ee18 0a90 	vmov	r0, s17
 800161a:	f7fe ff9d 	bl	8000558 <__aeabi_f2d>
 800161e:	ec41 0b10 	vmov	d0, r0, r1
 8001622:	f006 fa6d 	bl	8007b00 <sin>
 8001626:	4630      	mov	r0, r6
 8001628:	ec53 2b10 	vmov	r2, r3, d0
 800162c:	4639      	mov	r1, r7
 800162e:	f7fe ffeb 	bl	8000608 <__aeabi_dmul>
 8001632:	f7ff fac1 	bl	8000bb8 <__aeabi_d2f>
 8001636:	ee08 0a90 	vmov	s17, r0
	T0 = 1 - T1 - T2;
 800163a:	ee79 9a28 	vadd.f32	s19, s18, s17
 800163e:	ee38 8a69 	vsub.f32	s16, s16, s19



		switch (sector) {
 8001642:	2c05      	cmp	r4, #5
 8001644:	f200 80d7 	bhi.w	80017f6 <foc_setPhaseVoltage3+0x326>
 8001648:	e8df f004 	tbb	[pc, r4]
 800164c:	9b7b633a 	.word	0x9b7b633a
 8001650:	03bb      	.short	0x03bb
				a_duty = T2 + T0*0.5;
				b_duty = T0*0.5;
				c_duty = T1 + T2 + T0*0.5;
				break;
			case 6:
				a_duty = T1 + T2 + T0*0.5;
 8001652:	ee18 0a10 	vmov	r0, s16
 8001656:	f7fe ff7f 	bl	8000558 <__aeabi_f2d>
 800165a:	4b75      	ldr	r3, [pc, #468]	; (8001830 <foc_setPhaseVoltage3+0x360>)
 800165c:	2200      	movs	r2, #0
 800165e:	f7fe ffd3 	bl	8000608 <__aeabi_dmul>
 8001662:	4606      	mov	r6, r0
 8001664:	460f      	mov	r7, r1
 8001666:	ee19 0a90 	vmov	r0, s19
 800166a:	f7fe ff75 	bl	8000558 <__aeabi_f2d>
 800166e:	463b      	mov	r3, r7
 8001670:	4632      	mov	r2, r6
 8001672:	f7fe fe13 	bl	800029c <__adddf3>
 8001676:	f7ff fa9f 	bl	8000bb8 <__aeabi_d2f>
 800167a:	4603      	mov	r3, r0
				b_duty = T0*0.5;
				c_duty = T1 + T0*0.5;
 800167c:	ee19 0a10 	vmov	r0, s18
				b_duty = T0*0.5;
 8001680:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001684:	ee68 0a20 	vmul.f32	s1, s16, s1
				a_duty = T1 + T2 + T0*0.5;
 8001688:	9301      	str	r3, [sp, #4]
				b_duty = T0*0.5;
 800168a:	edcd 0a00 	vstr	s1, [sp]
				c_duty = T1 + T0*0.5;
 800168e:	f7fe ff63 	bl	8000558 <__aeabi_f2d>
 8001692:	4632      	mov	r2, r6
 8001694:	463b      	mov	r3, r7
 8001696:	f7fe fe01 	bl	800029c <__adddf3>
 800169a:	f7ff fa8d 	bl	8000bb8 <__aeabi_d2f>
				break;
 800169e:	eddd 0a00 	vldr	s1, [sp]
 80016a2:	ed9d 0a01 	vldr	s0, [sp, #4]
				c_duty = T1 + T0*0.5;
 80016a6:	ee01 0a10 	vmov	s2, r0
		}


	drv8313_setPWM2(driver, driver->timer->Instance, a_duty, b_duty, c_duty);
 80016aa:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 80016ae:	6819      	ldr	r1, [r3, #0]
 80016b0:	4628      	mov	r0, r5
}
 80016b2:	b003      	add	sp, #12
 80016b4:	ecbd 8b04 	vpop	{d8-d9}
 80016b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	drv8313_setPWM2(driver, driver->timer->Instance, a_duty, b_duty, c_duty);
 80016bc:	f7ff beb0 	b.w	8001420 <drv8313_setPWM2>
				a_duty = T1 + T2 + T0*0.5;
 80016c0:	ee18 0a10 	vmov	r0, s16
 80016c4:	f7fe ff48 	bl	8000558 <__aeabi_f2d>
 80016c8:	4b59      	ldr	r3, [pc, #356]	; (8001830 <foc_setPhaseVoltage3+0x360>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	f7fe ff9c 	bl	8000608 <__aeabi_dmul>
 80016d0:	4606      	mov	r6, r0
 80016d2:	460f      	mov	r7, r1
 80016d4:	ee19 0a90 	vmov	r0, s19
 80016d8:	f7fe ff3e 	bl	8000558 <__aeabi_f2d>
 80016dc:	463b      	mov	r3, r7
 80016de:	4632      	mov	r2, r6
 80016e0:	f7fe fddc 	bl	800029c <__adddf3>
 80016e4:	f7ff fa68 	bl	8000bb8 <__aeabi_d2f>
 80016e8:	4603      	mov	r3, r0
				b_duty = T2 + T0*0.5;
 80016ea:	ee18 0a90 	vmov	r0, s17
				a_duty = T1 + T0*0.5;
 80016ee:	9300      	str	r3, [sp, #0]
				b_duty = T1 + T2 + T0*0.5;
 80016f0:	f7fe ff32 	bl	8000558 <__aeabi_f2d>
 80016f4:	4632      	mov	r2, r6
 80016f6:	463b      	mov	r3, r7
 80016f8:	f7fe fdd0 	bl	800029c <__adddf3>
 80016fc:	f7ff fa5c 	bl	8000bb8 <__aeabi_d2f>
				c_duty = T0*0.5;
 8001700:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
				b_duty = T1 + T2 + T0*0.5;
 8001704:	ee00 0a90 	vmov	s1, r0
				c_duty = T0*0.5;
 8001708:	ee28 1a01 	vmul.f32	s2, s16, s2
				break;
 800170c:	ed9d 0a00 	vldr	s0, [sp]
 8001710:	e7cb      	b.n	80016aa <foc_setPhaseVoltage3+0x1da>
				a_duty = T1 + T0*0.5;
 8001712:	ee18 0a10 	vmov	r0, s16
 8001716:	f7fe ff1f 	bl	8000558 <__aeabi_f2d>
 800171a:	4b45      	ldr	r3, [pc, #276]	; (8001830 <foc_setPhaseVoltage3+0x360>)
 800171c:	2200      	movs	r2, #0
 800171e:	f7fe ff73 	bl	8000608 <__aeabi_dmul>
 8001722:	4606      	mov	r6, r0
 8001724:	460f      	mov	r7, r1
 8001726:	ee19 0a10 	vmov	r0, s18
 800172a:	f7fe ff15 	bl	8000558 <__aeabi_f2d>
 800172e:	463b      	mov	r3, r7
 8001730:	4632      	mov	r2, r6
 8001732:	f7fe fdb3 	bl	800029c <__adddf3>
 8001736:	f7ff fa3f 	bl	8000bb8 <__aeabi_d2f>
 800173a:	4603      	mov	r3, r0
				b_duty = T1 + T2 + T0*0.5;
 800173c:	ee19 0a90 	vmov	r0, s19
 8001740:	e7d5      	b.n	80016ee <foc_setPhaseVoltage3+0x21e>
				a_duty = T0*0.5;
 8001742:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001746:	ee28 0a00 	vmul.f32	s0, s16, s0
				b_duty = T1 + T2 + T0*0.5;
 800174a:	ee18 0a10 	vmov	r0, s16
				a_duty = T0*0.5;
 800174e:	ed8d 0a01 	vstr	s0, [sp, #4]
				b_duty = T1 + T2 + T0*0.5;
 8001752:	f7fe ff01 	bl	8000558 <__aeabi_f2d>
 8001756:	4b36      	ldr	r3, [pc, #216]	; (8001830 <foc_setPhaseVoltage3+0x360>)
 8001758:	2200      	movs	r2, #0
 800175a:	f7fe ff55 	bl	8000608 <__aeabi_dmul>
 800175e:	4606      	mov	r6, r0
 8001760:	460f      	mov	r7, r1
 8001762:	ee19 0a90 	vmov	r0, s19
 8001766:	f7fe fef7 	bl	8000558 <__aeabi_f2d>
 800176a:	463b      	mov	r3, r7
 800176c:	4632      	mov	r2, r6
 800176e:	f7fe fd95 	bl	800029c <__adddf3>
 8001772:	f7ff fa21 	bl	8000bb8 <__aeabi_d2f>
 8001776:	4603      	mov	r3, r0
 8001778:	ee00 3a90 	vmov	s1, r3
				c_duty = T2 + T0*0.5;
 800177c:	ee18 0a90 	vmov	r0, s17
 8001780:	e783      	b.n	800168a <foc_setPhaseVoltage3+0x1ba>
				a_duty = T0*0.5;
 8001782:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001786:	ee28 0a00 	vmul.f32	s0, s16, s0
				b_duty = T1 + T0*0.5;
 800178a:	ee18 0a10 	vmov	r0, s16
				a_duty = T0*0.5;
 800178e:	ed8d 0a01 	vstr	s0, [sp, #4]
				b_duty = T1 + T0*0.5;
 8001792:	f7fe fee1 	bl	8000558 <__aeabi_f2d>
 8001796:	4b26      	ldr	r3, [pc, #152]	; (8001830 <foc_setPhaseVoltage3+0x360>)
 8001798:	2200      	movs	r2, #0
 800179a:	f7fe ff35 	bl	8000608 <__aeabi_dmul>
 800179e:	4606      	mov	r6, r0
 80017a0:	460f      	mov	r7, r1
 80017a2:	ee19 0a10 	vmov	r0, s18
 80017a6:	f7fe fed7 	bl	8000558 <__aeabi_f2d>
 80017aa:	463b      	mov	r3, r7
 80017ac:	4632      	mov	r2, r6
 80017ae:	f7fe fd75 	bl	800029c <__adddf3>
 80017b2:	f7ff fa01 	bl	8000bb8 <__aeabi_d2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	ee00 3a90 	vmov	s1, r3
				c_duty = T1 + T2 + T0*0.5;
 80017bc:	ee19 0a90 	vmov	r0, s19
 80017c0:	e763      	b.n	800168a <foc_setPhaseVoltage3+0x1ba>
				a_duty = T2 + T0*0.5;
 80017c2:	ee18 0a10 	vmov	r0, s16
 80017c6:	f7fe fec7 	bl	8000558 <__aeabi_f2d>
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <foc_setPhaseVoltage3+0x360>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	f7fe ff1b 	bl	8000608 <__aeabi_dmul>
 80017d2:	4606      	mov	r6, r0
 80017d4:	460f      	mov	r7, r1
 80017d6:	ee18 0a90 	vmov	r0, s17
 80017da:	f7fe febd 	bl	8000558 <__aeabi_f2d>
 80017de:	463b      	mov	r3, r7
 80017e0:	4632      	mov	r2, r6
 80017e2:	f7fe fd5b 	bl	800029c <__adddf3>
 80017e6:	f7ff f9e7 	bl	8000bb8 <__aeabi_d2f>
				b_duty = T0*0.5;
 80017ea:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
				a_duty = T2 + T0*0.5;
 80017ee:	4603      	mov	r3, r0
				c_duty = T1 + T2 + T0*0.5;
 80017f0:	ee19 0a90 	vmov	r0, s19
 80017f4:	e746      	b.n	8001684 <foc_setPhaseVoltage3+0x1b4>
	T0 = 1 - T1 - T2;
 80017f6:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8001834 <foc_setPhaseVoltage3+0x364>
 80017fa:	eef0 0a41 	vmov.f32	s1, s2
 80017fe:	eeb0 0a41 	vmov.f32	s0, s2
 8001802:	e752      	b.n	80016aa <foc_setPhaseVoltage3+0x1da>
 8001804:	f3af 8000 	nop.w
 8001808:	c6f05b8e 	.word	0xc6f05b8e
 800180c:	3fc279a6 	.word	0x3fc279a6
 8001810:	60000000 	.word	0x60000000
 8001814:	401921fb 	.word	0x401921fb
 8001818:	5f375a86 	.word	0x5f375a86
 800181c:	40020000 	.word	0x40020000
 8001820:	3f860a92 	.word	0x3f860a92
 8001824:	3c8efa35 	.word	0x3c8efa35
 8001828:	40c90fdb 	.word	0x40c90fdb
 800182c:	3f747645 	.word	0x3f747645
 8001830:	3fe00000 	.word	0x3fe00000
 8001834:	00000000 	.word	0x00000000

08001838 <foc_update>:
void foc_update(MotorDriver *driver, float target){
 8001838:	b538      	push	{r3, r4, r5, lr}
	if(move_counter == 0){
 800183a:	4d41      	ldr	r5, [pc, #260]	; (8001940 <foc_update+0x108>)
 800183c:	882b      	ldrh	r3, [r5, #0]
void foc_update(MotorDriver *driver, float target){
 800183e:	ed2d 8b06 	vpush	{d8-d10}
 8001842:	4604      	mov	r4, r0
	if(move_counter == 0){
 8001844:	b19b      	cbz	r3, 800186e <foc_update+0x36>
	foc_setPhaseVoltage3(driver, driver->V_d, driver->V_q);
 8001846:	edd4 0a05 	vldr	s1, [r4, #20]
 800184a:	ed94 0a06 	vldr	s0, [r4, #24]
 800184e:	4620      	mov	r0, r4
 8001850:	f7ff fe3e 	bl	80014d0 <foc_setPhaseVoltage3>
	move_counter++;
 8001854:	882b      	ldrh	r3, [r5, #0]
	move_counter %= move_exec;
 8001856:	4a3b      	ldr	r2, [pc, #236]	; (8001944 <foc_update+0x10c>)
}
 8001858:	ecbd 8b06 	vpop	{d8-d10}
	move_counter %= move_exec;
 800185c:	8811      	ldrh	r1, [r2, #0]
	move_counter++;
 800185e:	3301      	adds	r3, #1
	move_counter %= move_exec;
 8001860:	b29b      	uxth	r3, r3
 8001862:	fbb3 f2f1 	udiv	r2, r3, r1
 8001866:	fb01 3312 	mls	r3, r1, r2, r3
 800186a:	802b      	strh	r3, [r5, #0]
}
 800186c:	bd38      	pop	{r3, r4, r5, pc}
		as5048a_getAngle(driver);
 800186e:	eeb0 8a40 	vmov.f32	s16, s0
 8001872:	f7ff fc69 	bl	8001148 <as5048a_getAngle>
	driver->angle_electrical = driver->pole_pairs * driver->angle + offset - 180.0f;
 8001876:	f8b4 3154 	ldrh.w	r3, [r4, #340]	; 0x154
 800187a:	ed94 6a4f 	vldr	s12, [r4, #316]	; 0x13c
	float i_alpha = driver->i_a;
 800187e:	edd4 9a01 	vldr	s19, [r4, #4]
	driver->angle_electrical = driver->pole_pairs * driver->angle + offset - 180.0f;
 8001882:	eddf 8a31 	vldr	s17, [pc, #196]	; 8001948 <foc_update+0x110>
	float i_beta = (driver->i_a + 2*driver->i_b)*_1_SQRT3;
 8001886:	edd4 6a02 	vldr	s13, [r4, #8]
	driver->angle_electrical = driver->pole_pairs * driver->angle + offset - 180.0f;
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float i_beta = (driver->i_a + 2*driver->i_b)*_1_SQRT3;
 8001892:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
	driver->angle_electrical = driver->pole_pairs * driver->angle + offset - 180.0f;
 8001896:	eee7 8a86 	vfma.f32	s17, s15, s12
	float i_beta = (driver->i_a + 2*driver->i_b)*_1_SQRT3;
 800189a:	eef0 7a69 	vmov.f32	s15, s19
 800189e:	eee6 7a87 	vfma.f32	s15, s13, s14
	driver->angle_electrical = driver->pole_pairs * driver->angle + offset - 180.0f;
 80018a2:	edc4 8a51 	vstr	s17, [r4, #324]	; 0x144
	float i_beta = (driver->i_a + 2*driver->i_b)*_1_SQRT3;
 80018a6:	ee17 0a90 	vmov	r0, s15
 80018aa:	f7fe fe55 	bl	8000558 <__aeabi_f2d>
 80018ae:	a322      	add	r3, pc, #136	; (adr r3, 8001938 <foc_update+0x100>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe fea8 	bl	8000608 <__aeabi_dmul>
 80018b8:	f7ff f97e 	bl	8000bb8 <__aeabi_d2f>
	sin_val = sin(driver->angle_electrical*DEG_TO_RAD);
 80018bc:	eddf 7a23 	vldr	s15, [pc, #140]	; 800194c <foc_update+0x114>
 80018c0:	ee68 7aa7 	vmul.f32	s15, s17, s15
	float i_beta = (driver->i_a + 2*driver->i_b)*_1_SQRT3;
 80018c4:	4603      	mov	r3, r0
	sin_val = sin(driver->angle_electrical*DEG_TO_RAD);
 80018c6:	ee17 0a90 	vmov	r0, s15
	float i_beta = (driver->i_a + 2*driver->i_b)*_1_SQRT3;
 80018ca:	ee09 3a10 	vmov	s18, r3
	sin_val = sin(driver->angle_electrical*DEG_TO_RAD);
 80018ce:	f7fe fe43 	bl	8000558 <__aeabi_f2d>
 80018d2:	ec41 0b10 	vmov	d0, r0, r1
 80018d6:	ec41 0b1a 	vmov	d10, r0, r1
 80018da:	f006 f911 	bl	8007b00 <sin>
 80018de:	ec51 0b10 	vmov	r0, r1, d0
 80018e2:	f7ff f969 	bl	8000bb8 <__aeabi_d2f>
	cos_val = cos(driver->angle_electrical*DEG_TO_RAD);
 80018e6:	eeb0 0a4a 	vmov.f32	s0, s20
 80018ea:	eef0 0a6a 	vmov.f32	s1, s21
	sin_val = sin(driver->angle_electrical*DEG_TO_RAD);
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <foc_update+0x118>)
 80018f0:	ee08 0a90 	vmov	s17, r0
 80018f4:	6018      	str	r0, [r3, #0]
	cos_val = cos(driver->angle_electrical*DEG_TO_RAD);
 80018f6:	f006 f8b3 	bl	8007a60 <cos>
 80018fa:	ec51 0b10 	vmov	r0, r1, d0
 80018fe:	f7ff f95b 	bl	8000bb8 <__aeabi_d2f>
	driver->i_d = i_alpha*cos_val + i_beta*sin_val;
 8001902:	ee29 7a28 	vmul.f32	s14, s18, s17
	cos_val = cos(driver->angle_electrical*DEG_TO_RAD);
 8001906:	ee07 0a90 	vmov	s15, r0
	driver->i_q = i_beta*cos_val - i_alpha*sin_val;
 800190a:	ee68 8ae9 	vnmul.f32	s17, s17, s19
	driver->i_d = i_alpha*cos_val + i_beta*sin_val;
 800190e:	eea9 7aa7 	vfma.f32	s14, s19, s15
	cos_val = cos(driver->angle_electrical*DEG_TO_RAD);
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <foc_update+0x11c>)
	driver->i_q = i_beta*cos_val - i_alpha*sin_val;
 8001914:	eee9 8a27 	vfma.f32	s17, s18, s15
		as5048a_getVelocity(driver);
 8001918:	4620      	mov	r0, r4
	driver->i_d = i_alpha*cos_val + i_beta*sin_val;
 800191a:	ed84 7a03 	vstr	s14, [r4, #12]
	driver->i_q = i_beta*cos_val - i_alpha*sin_val;
 800191e:	edc4 8a04 	vstr	s17, [r4, #16]
	cos_val = cos(driver->angle_electrical*DEG_TO_RAD);
 8001922:	edc3 7a00 	vstr	s15, [r3]
		as5048a_getVelocity(driver);
 8001926:	f7ff fc5b 	bl	80011e0 <as5048a_getVelocity>
		foc_pi_control(driver, target);
 800192a:	eeb0 0a48 	vmov.f32	s0, s16
 800192e:	4620      	mov	r0, r4
 8001930:	f7ff fd90 	bl	8001454 <foc_pi_control>
 8001934:	e787      	b.n	8001846 <foc_update+0xe>
 8001936:	bf00      	nop
 8001938:	561abec8 	.word	0x561abec8
 800193c:	3fe279a7 	.word	0x3fe279a7
 8001940:	20000214 	.word	0x20000214
 8001944:	20000000 	.word	0x20000000
 8001948:	c3340000 	.word	0xc3340000
 800194c:	3c8efa35 	.word	0x3c8efa35
 8001950:	20000240 	.word	0x20000240
 8001954:	2000023c 	.word	0x2000023c

08001958 <lpf_init>:
 *      Author: maxborglowe
 */

#include "LowPassFilter.h"

void lpf_init(struct LPF *lpf, float Tf_init){
 8001958:	b510      	push	{r4, lr}
	lpf->Tf = Tf_init;
	lpf->out_prev = 0;
 800195a:	2300      	movs	r3, #0
	lpf->Tf = Tf_init;
 800195c:	ed80 0a02 	vstr	s0, [r0, #8]
	lpf->out_prev = 0;
 8001960:	6043      	str	r3, [r0, #4]
void lpf_init(struct LPF *lpf, float Tf_init){
 8001962:	4604      	mov	r4, r0
	lpf->timestamp_prev = get_us();
 8001964:	f000 ffec 	bl	8002940 <get_us>
 8001968:	6020      	str	r0, [r4, #0]
}
 800196a:	bd10      	pop	{r4, pc}

0800196c <lpf_exec>:

float lpf_exec(struct LPF *lpf, float input){
 800196c:	b510      	push	{r4, lr}
 800196e:	4604      	mov	r4, r0
 8001970:	ed2d 8b02 	vpush	{d8}
 8001974:	eeb0 8a40 	vmov.f32	s16, s0
	uint32_t timestamp = get_us();
 8001978:	f000 ffe2 	bl	8002940 <get_us>
	float dt = (timestamp - lpf->timestamp_prev) * 1e-6f;
 800197c:	6823      	ldr	r3, [r4, #0]

	if (dt < 0.0f ) dt = 1e-3f;
	else if(dt > 0.3f) {
 800197e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80019dc <lpf_exec+0x70>
	float dt = (timestamp - lpf->timestamp_prev) * 1e-6f;
 8001982:	1ac3      	subs	r3, r0, r3
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eef8 7a67 	vcvt.f32.u32	s15, s15
	else if(dt > 0.3f) {
 800198c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001994:	dc19      	bgt.n	80019ca <lpf_exec+0x5e>
		lpf->out_prev = input;
		lpf->timestamp_prev = timestamp;
		return input;
	}

	float alpha = lpf->Tf/(lpf->Tf + dt);
 8001996:	ed94 7a02 	vldr	s14, [r4, #8]
 800199a:	ed9f 6a11 	vldr	s12, [pc, #68]	; 80019e0 <lpf_exec+0x74>
	float out = alpha * lpf->out_prev + (1.0f - alpha) * input;
 800199e:	edd4 6a01 	vldr	s13, [r4, #4]
 80019a2:	6020      	str	r0, [r4, #0]
	float alpha = lpf->Tf/(lpf->Tf + dt);
 80019a4:	eef0 5a47 	vmov.f32	s11, s14
 80019a8:	eee7 5a86 	vfma.f32	s11, s15, s12
	float out = alpha * lpf->out_prev + (1.0f - alpha) * input;
 80019ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	float alpha = lpf->Tf/(lpf->Tf + dt);
 80019b0:	eec7 7a25 	vdiv.f32	s15, s14, s11
	float out = alpha * lpf->out_prev + (1.0f - alpha) * input;
 80019b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80019b8:	ee20 0a08 	vmul.f32	s0, s0, s16
	lpf->out_prev = out;
	lpf->timestamp_prev = timestamp;
	return out;
}
 80019bc:	ecbd 8b02 	vpop	{d8}
	float out = alpha * lpf->out_prev + (1.0f - alpha) * input;
 80019c0:	eea6 0aa7 	vfma.f32	s0, s13, s15
	return out;
 80019c4:	ed84 0a01 	vstr	s0, [r4, #4]
}
 80019c8:	bd10      	pop	{r4, pc}
		return input;
 80019ca:	eeb0 0a48 	vmov.f32	s0, s16
}
 80019ce:	ecbd 8b02 	vpop	{d8}
 80019d2:	6020      	str	r0, [r4, #0]
 80019d4:	ed84 0a01 	vstr	s0, [r4, #4]
 80019d8:	bd10      	pop	{r4, pc}
 80019da:	bf00      	nop
 80019dc:	48927c00 	.word	0x48927c00
 80019e0:	358637bd 	.word	0x358637bd

080019e4 <setSampleFreq_ms>:

/*
 * @brief Set the sample frequency based on the while loop cycle time (in milliseconds)
 */
void setSampleFreq_ms() {
	sampleFreq = 1 / (1e-3 * while_t);
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <setSampleFreq_ms+0x18>)
 80019e6:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001a00 <setSampleFreq_ms+0x1c>
 80019ea:	ed93 7a00 	vldr	s14, [r3]
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <setSampleFreq_ms+0x20>)
 80019f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f4:	edc3 7a00 	vstr	s15, [r3]
}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000014 	.word	0x20000014
 8001a00:	447a0000 	.word	0x447a0000
 8001a04:	20000238 	.word	0x20000238

08001a08 <setSampleFreq_us>:

/*
 * @brief Set the sample frequency based on the while loop cycle time (in milliseconds)
 */
void setSampleFreq_us() {
 8001a08:	b508      	push	{r3, lr}

	sampleFreq = 1 / get_us();
 8001a0a:	f000 ff99 	bl	8002940 <get_us>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	4a02      	ldr	r2, [pc, #8]	; (8001a24 <setSampleFreq_us+0x1c>)
 8001a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1e:	edc2 7a00 	vstr	s15, [r2]
//	sampleFreq = 1 / (1e-6 * us_t);
}
 8001a22:	bd08      	pop	{r3, pc}
 8001a24:	20000238 	.word	0x20000238

08001a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a28:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2a:	2300      	movs	r3, #0
{
 8001a2c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8001a32:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a36:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001a3a:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	4923      	ldr	r1, [pc, #140]	; (8001acc <SystemClock_Config+0xa4>)
 8001a40:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a42:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a44:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a48:	4a21      	ldr	r2, [pc, #132]	; (8001ad0 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001a4e:	6408      	str	r0, [r1, #64]	; 0x40
 8001a50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a52:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8001a56:	9100      	str	r1, [sp, #0]
 8001a58:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	6813      	ldr	r3, [r2, #0]
 8001a5e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	6813      	ldr	r3, [r2, #0]
 8001a6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a6e:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a70:	2301      	movs	r3, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a72:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a74:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a76:	2202      	movs	r2, #2
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001a7e:	2208      	movs	r2, #8
 8001a80:	2354      	movs	r3, #84	; 0x54
 8001a82:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a86:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a88:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 84;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a90:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a94:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a96:	910c      	str	r1, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a98:	f001 fd5e 	bl	8003558 <HAL_RCC_OscConfig>
 8001a9c:	b108      	cbz	r0, 8001aa2 <SystemClock_Config+0x7a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001aa0:	e7fe      	b.n	8001aa0 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aa2:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aa4:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa6:	2502      	movs	r5, #2
 8001aa8:	240f      	movs	r4, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aaa:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aac:	2200      	movs	r2, #0
 8001aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ab2:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001ab8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001abc:	f001 ff68 	bl	8003990 <HAL_RCC_ClockConfig>
 8001ac0:	b108      	cbz	r0, 8001ac6 <SystemClock_Config+0x9e>
 8001ac2:	b672      	cpsid	i
	while (1) {
 8001ac4:	e7fe      	b.n	8001ac4 <SystemClock_Config+0x9c>
}
 8001ac6:	b015      	add	sp, #84	; 0x54
 8001ac8:	bd30      	pop	{r4, r5, pc}
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40007000 	.word	0x40007000

08001ad4 <main>:
{
 8001ad4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	2400      	movs	r4, #0
{
 8001ada:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
  HAL_Init();
 8001ade:	f000 ff85 	bl	80029ec <HAL_Init>
  SystemClock_Config();
 8001ae2:	f7ff ffa1 	bl	8001a28 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae6:	e9cd 44b4 	strd	r4, r4, [sp, #720]	; 0x2d0
 8001aea:	e9cd 44b6 	strd	r4, r4, [sp, #728]	; 0x2d8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aee:	4da6      	ldr	r5, [pc, #664]	; (8001d88 <main+0x2b4>)
 8001af0:	9402      	str	r4, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af2:	94b8      	str	r4, [sp, #736]	; 0x2e0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5
 8001af6:	48a5      	ldr	r0, [pc, #660]	; (8001d8c <main+0x2b8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	632b      	str	r3, [r5, #48]	; 0x30
 8001afe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	9302      	str	r3, [sp, #8]
 8001b06:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b08:	9403      	str	r4, [sp, #12]
 8001b0a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b10:	632b      	str	r3, [r5, #48]	; 0x30
 8001b12:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b18:	9303      	str	r3, [sp, #12]
 8001b1a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	9404      	str	r4, [sp, #16]
 8001b1e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	632b      	str	r3, [r5, #48]	; 0x30
 8001b26:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	9304      	str	r3, [sp, #16]
 8001b2e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b30:	9405      	str	r4, [sp, #20]
 8001b32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	632b      	str	r3, [r5, #48]	; 0x30
 8001b3a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5
 8001b42:	4622      	mov	r2, r4
 8001b44:	f242 0171 	movw	r1, #8305	; 0x2071
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b48:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5
 8001b4a:	f001 fd01 	bl	8003550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b4e:	4890      	ldr	r0, [pc, #576]	; (8001d90 <main+0x2bc>)
 8001b50:	4622      	mov	r2, r4
 8001b52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b56:	f001 fcfb 	bl	8003550 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b5e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b62:	488c      	ldr	r0, [pc, #560]	; (8001d94 <main+0x2c0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	94b6      	str	r4, [sp, #728]	; 0x2d8
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b66:	a9b4      	add	r1, sp, #720	; 0x2d0
  GPIO_InitStruct.Pin = B1_Pin;
 8001b68:	e9cd 23b4 	strd	r2, r3, [sp, #720]	; 0x2d0
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5
 8001b6c:	2600      	movs	r6, #0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f001 fbfd 	bl	800336c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5
 8001b72:	2700      	movs	r7, #0
 8001b74:	f242 0271 	movw	r2, #8305	; 0x2071
 8001b78:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	4884      	ldr	r0, [pc, #528]	; (8001d8c <main+0x2b8>)
 8001b7c:	a9b4      	add	r1, sp, #720	; 0x2d0
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5
 8001b7e:	e9cd 23b4 	strd	r2, r3, [sp, #720]	; 0x2d0
 8001b82:	e9cd 67b6 	strd	r6, r7, [sp, #728]	; 0x2d8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b86:	f001 fbf1 	bl	800336c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b8e:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b90:	487e      	ldr	r0, [pc, #504]	; (8001d8c <main+0x2b8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	94b6      	str	r4, [sp, #728]	; 0x2d8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b94:	a9b4      	add	r1, sp, #720	; 0x2d0
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b96:	e9cd 23b4 	strd	r2, r3, [sp, #720]	; 0x2d0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9a:	f001 fbe7 	bl	800336c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ba2:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba4:	487a      	ldr	r0, [pc, #488]	; (8001d90 <main+0x2bc>)
 8001ba6:	a9b4      	add	r1, sp, #720	; 0x2d0
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ba8:	e9cd 23b4 	strd	r2, r3, [sp, #720]	; 0x2d0
 8001bac:	e9cd 67b6 	strd	r6, r7, [sp, #728]	; 0x2d8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f001 fbdc 	bl	800336c <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8001bb4:	4878      	ldr	r0, [pc, #480]	; (8001d98 <main+0x2c4>)
 8001bb6:	4979      	ldr	r1, [pc, #484]	; (8001d9c <main+0x2c8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb8:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001bba:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bbe:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bc0:	e9c0 4403 	strd	r4, r4, [r0, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc4:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.Init.BaudRate = 115200;
 8001bc8:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bcc:	6143      	str	r3, [r0, #20]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8001bce:	f003 f8f3 	bl	8004db8 <HAL_HalfDuplex_Init>
 8001bd2:	b108      	cbz	r0, 8001bd8 <main+0x104>
 8001bd4:	b672      	cpsid	i
	while (1) {
 8001bd6:	e7fe      	b.n	8001bd6 <main+0x102>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bd8:	9001      	str	r0, [sp, #4]
 8001bda:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hadc1.Instance = ADC1;
 8001bdc:	4c70      	ldr	r4, [pc, #448]	; (8001da0 <main+0x2cc>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001be2:	632b      	str	r3, [r5, #48]	; 0x30
 8001be4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bea:	4606      	mov	r6, r0
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001bec:	4602      	mov	r2, r0
 8001bee:	4601      	mov	r1, r0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bf0:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001bf2:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bf4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001bf6:	f001 f991 	bl	8002f1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001bfa:	2038      	movs	r0, #56	; 0x38
 8001bfc:	f001 f9c6 	bl	8002f8c <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8001c00:	4868      	ldr	r0, [pc, #416]	; (8001da4 <main+0x2d0>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c02:	4969      	ldr	r1, [pc, #420]	; (8001da8 <main+0x2d4>)
  hadc1.Instance = ADC1;
 8001c04:	6020      	str	r0, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001c06:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hadc1.Init.NbrOfConversion = 9;
 8001c0a:	2209      	movs	r2, #9
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001c0c:	6063      	str	r3, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c0e:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ENABLE;
 8001c10:	2301      	movs	r3, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c12:	e9cd 66b5 	strd	r6, r6, [sp, #724]	; 0x2d4
 8001c16:	96b4      	str	r6, [sp, #720]	; 0x2d0
 8001c18:	96b7      	str	r6, [sp, #732]	; 0x2dc
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c1a:	60a6      	str	r6, [r4, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c1c:	f884 6020 	strb.w	r6, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c20:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c22:	60e6      	str	r6, [r4, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c24:	62a1      	str	r1, [r4, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 9;
 8001c26:	61e2      	str	r2, [r4, #28]
  hadc1.Init.ScanConvMode = ENABLE;
 8001c28:	6123      	str	r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c2a:	7623      	strb	r3, [r4, #24]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c2c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c30:	6163      	str	r3, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c32:	f000 ff19 	bl	8002a68 <HAL_ADC_Init>
 8001c36:	b108      	cbz	r0, 8001c3c <main+0x168>
 8001c38:	b672      	cpsid	i
	while (1) {
 8001c3a:	e7fe      	b.n	8001c3a <main+0x166>
  sConfig.Channel = ADC_CHANNEL_0;
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c40:	90b6      	str	r0, [sp, #728]	; 0x2d8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c42:	a9b4      	add	r1, sp, #720	; 0x2d0
 8001c44:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8001c46:	e9cd 23b4 	strd	r2, r3, [sp, #720]	; 0x2d0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c4a:	f001 f8ab 	bl	8002da4 <HAL_ADC_ConfigChannel>
 8001c4e:	b108      	cbz	r0, 8001c54 <main+0x180>
 8001c50:	b672      	cpsid	i
	while (1) {
 8001c52:	e7fe      	b.n	8001c52 <main+0x17e>
  sConfig.Channel = ADC_CHANNEL_4;
 8001c54:	2204      	movs	r2, #4
 8001c56:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c58:	a9b4      	add	r1, sp, #720	; 0x2d0
 8001c5a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 8001c5c:	e9cd 23b4 	strd	r2, r3, [sp, #720]	; 0x2d0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c60:	f001 f8a0 	bl	8002da4 <HAL_ADC_ConfigChannel>
 8001c64:	b108      	cbz	r0, 8001c6a <main+0x196>
 8001c66:	b672      	cpsid	i
	while (1) {
 8001c68:	e7fe      	b.n	8001c68 <main+0x194>
  sConfig.Channel = ADC_CHANNEL_9;
 8001c6a:	2209      	movs	r2, #9
 8001c6c:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c6e:	a9b4      	add	r1, sp, #720	; 0x2d0
 8001c70:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 8001c72:	e9cd 23b4 	strd	r2, r3, [sp, #720]	; 0x2d0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c76:	f001 f895 	bl	8002da4 <HAL_ADC_ConfigChannel>
 8001c7a:	b108      	cbz	r0, 8001c80 <main+0x1ac>
 8001c7c:	b672      	cpsid	i
	while (1) {
 8001c7e:	e7fe      	b.n	8001c7e <main+0x1aa>
  sConfig.Channel = ADC_CHANNEL_10;
 8001c80:	220a      	movs	r2, #10
 8001c82:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c84:	a9b4      	add	r1, sp, #720	; 0x2d0
 8001c86:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_10;
 8001c88:	e9cd 23b4 	strd	r2, r3, [sp, #720]	; 0x2d0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c8c:	f001 f88a 	bl	8002da4 <HAL_ADC_ConfigChannel>
 8001c90:	b108      	cbz	r0, 8001c96 <main+0x1c2>
 8001c92:	b672      	cpsid	i
	while (1) {
 8001c94:	e7fe      	b.n	8001c94 <main+0x1c0>
  sConfig.Channel = ADC_CHANNEL_11;
 8001c96:	220b      	movs	r2, #11
 8001c98:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c9a:	a9b4      	add	r1, sp, #720	; 0x2d0
 8001c9c:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_11;
 8001c9e:	e9cd 23b4 	strd	r2, r3, [sp, #720]	; 0x2d0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ca2:	f001 f87f 	bl	8002da4 <HAL_ADC_ConfigChannel>
 8001ca6:	b108      	cbz	r0, 8001cac <main+0x1d8>
 8001ca8:	b672      	cpsid	i
	while (1) {
 8001caa:	e7fe      	b.n	8001caa <main+0x1d6>
  sConfig.Channel = ADC_CHANNEL_12;
 8001cac:	220c      	movs	r2, #12
 8001cae:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb0:	a9b4      	add	r1, sp, #720	; 0x2d0
 8001cb2:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_12;
 8001cb4:	e9cd 23b4 	strd	r2, r3, [sp, #720]	; 0x2d0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb8:	f001 f874 	bl	8002da4 <HAL_ADC_ConfigChannel>
 8001cbc:	b108      	cbz	r0, 8001cc2 <main+0x1ee>
 8001cbe:	b672      	cpsid	i
	while (1) {
 8001cc0:	e7fe      	b.n	8001cc0 <main+0x1ec>
  sConfig.Channel = ADC_CHANNEL_13;
 8001cc2:	220d      	movs	r2, #13
 8001cc4:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cc6:	a9b4      	add	r1, sp, #720	; 0x2d0
 8001cc8:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_13;
 8001cca:	e9cd 23b4 	strd	r2, r3, [sp, #720]	; 0x2d0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cce:	f001 f869 	bl	8002da4 <HAL_ADC_ConfigChannel>
 8001cd2:	b108      	cbz	r0, 8001cd8 <main+0x204>
 8001cd4:	b672      	cpsid	i
	while (1) {
 8001cd6:	e7fe      	b.n	8001cd6 <main+0x202>
  sConfig.Channel = ADC_CHANNEL_14;
 8001cd8:	220e      	movs	r2, #14
 8001cda:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cdc:	4620      	mov	r0, r4
 8001cde:	a9b4      	add	r1, sp, #720	; 0x2d0
  sConfig.Channel = ADC_CHANNEL_14;
 8001ce0:	e9cd 23b4 	strd	r2, r3, [sp, #720]	; 0x2d0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ce4:	f001 f85e 	bl	8002da4 <HAL_ADC_ConfigChannel>
 8001ce8:	b108      	cbz	r0, 8001cee <main+0x21a>
 8001cea:	b672      	cpsid	i
	while (1) {
 8001cec:	e7fe      	b.n	8001cec <main+0x218>
  sConfig.Channel = ADC_CHANNEL_15;
 8001cee:	220f      	movs	r2, #15
 8001cf0:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cf2:	482b      	ldr	r0, [pc, #172]	; (8001da0 <main+0x2cc>)
 8001cf4:	a9b4      	add	r1, sp, #720	; 0x2d0
  sConfig.Channel = ADC_CHANNEL_15;
 8001cf6:	e9cd 23b4 	strd	r2, r3, [sp, #720]	; 0x2d0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cfa:	f001 f853 	bl	8002da4 <HAL_ADC_ConfigChannel>
 8001cfe:	4604      	mov	r4, r0
 8001d00:	b108      	cbz	r0, 8001d06 <main+0x232>
 8001d02:	b672      	cpsid	i
	while (1) {
 8001d04:	e7fe      	b.n	8001d04 <main+0x230>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d06:	2620      	movs	r6, #32
  htim1.Instance = TIM1;
 8001d08:	4d28      	ldr	r5, [pc, #160]	; (8001dac <main+0x2d8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0a:	9008      	str	r0, [sp, #32]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d0c:	4601      	mov	r1, r0
 8001d0e:	4632      	mov	r2, r6
 8001d10:	a8b4      	add	r0, sp, #720	; 0x2d0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d12:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d16:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d1a:	e9cd 445e 	strd	r4, r4, [sp, #376]	; 0x178
 8001d1e:	e9cd 4460 	strd	r4, r4, [sp, #384]	; 0x180
 8001d22:	e9cd 4462 	strd	r4, r4, [sp, #392]	; 0x188
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d26:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d28:	9464      	str	r4, [sp, #400]	; 0x190
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d2a:	f003 f9bd 	bl	80050a8 <memset>
  htim1.Instance = TIM1;
 8001d2e:	4920      	ldr	r1, [pc, #128]	; (8001db0 <main+0x2dc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001d30:	60ae      	str	r6, [r5, #8]
  htim1.Init.Prescaler = 1;
 8001d32:	2201      	movs	r2, #1
  htim1.Init.Period = 1200-1;
 8001d34:	f240 43af 	movw	r3, #1199	; 0x4af
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d38:	4628      	mov	r0, r5
  htim1.Init.RepetitionCounter = 0;
 8001d3a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.Prescaler = 1;
 8001d3e:	e9c5 1200 	strd	r1, r2, [r5]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d42:	61ac      	str	r4, [r5, #24]
  htim1.Init.Period = 1200-1;
 8001d44:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d46:	f002 fb5b 	bl	8004400 <HAL_TIM_Base_Init>
 8001d4a:	b108      	cbz	r0, 8001d50 <main+0x27c>
 8001d4c:	b672      	cpsid	i
	while (1) {
 8001d4e:	e7fe      	b.n	8001d4e <main+0x27a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d54:	a908      	add	r1, sp, #32
 8001d56:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d58:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d5a:	f002 ff19 	bl	8004b90 <HAL_TIM_ConfigClockSource>
 8001d5e:	b108      	cbz	r0, 8001d64 <main+0x290>
 8001d60:	b672      	cpsid	i
	while (1) {
 8001d62:	e7fe      	b.n	8001d62 <main+0x28e>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d64:	4628      	mov	r0, r5
 8001d66:	f002 fc47 	bl	80045f8 <HAL_TIM_PWM_Init>
 8001d6a:	b108      	cbz	r0, 8001d70 <main+0x29c>
 8001d6c:	b672      	cpsid	i
	while (1) {
 8001d6e:	e7fe      	b.n	8001d6e <main+0x29a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d70:	2600      	movs	r6, #0
 8001d72:	2700      	movs	r7, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d74:	a906      	add	r1, sp, #24
 8001d76:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d78:	e9cd 6706 	strd	r6, r7, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d7c:	f002 ffb8 	bl	8004cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d80:	b1c0      	cbz	r0, 8001db4 <main+0x2e0>
 8001d82:	b672      	cpsid	i
	while (1) {
 8001d84:	e7fe      	b.n	8001d84 <main+0x2b0>
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020400 	.word	0x40020400
 8001d90:	40020000 	.word	0x40020000
 8001d94:	40020800 	.word	0x40020800
 8001d98:	20004494 	.word	0x20004494
 8001d9c:	40004400 	.word	0x40004400
 8001da0:	200042f0 	.word	0x200042f0
 8001da4:	40012000 	.word	0x40012000
 8001da8:	0f000001 	.word	0x0f000001
 8001dac:	200043a4 	.word	0x200043a4
 8001db0:	40010000 	.word	0x40010000
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db4:	f04f 0860 	mov.w	r8, #96	; 0x60
 8001db8:	f04f 0900 	mov.w	r9, #0
 8001dbc:	e9cd 895e 	strd	r8, r9, [sp, #376]	; 0x178
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc0:	4602      	mov	r2, r0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dc2:	9064      	str	r0, [sp, #400]	; 0x190
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc4:	f04f 0804 	mov.w	r8, #4
 8001dc8:	f04f 0900 	mov.w	r9, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dcc:	a95e      	add	r1, sp, #376	; 0x178
 8001dce:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd0:	e9cd 6760 	strd	r6, r7, [sp, #384]	; 0x180
 8001dd4:	e9cd 8962 	strd	r8, r9, [sp, #392]	; 0x188
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd8:	f002 fdca 	bl	8004970 <HAL_TIM_PWM_ConfigChannel>
 8001ddc:	b108      	cbz	r0, 8001de2 <main+0x30e>
 8001dde:	b672      	cpsid	i
	while (1) {
 8001de0:	e7fe      	b.n	8001de0 <main+0x30c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001de2:	2204      	movs	r2, #4
 8001de4:	a95e      	add	r1, sp, #376	; 0x178
 8001de6:	4628      	mov	r0, r5
 8001de8:	f002 fdc2 	bl	8004970 <HAL_TIM_PWM_ConfigChannel>
 8001dec:	b108      	cbz	r0, 8001df2 <main+0x31e>
 8001dee:	b672      	cpsid	i
	while (1) {
 8001df0:	e7fe      	b.n	8001df0 <main+0x31c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001df2:	2208      	movs	r2, #8
 8001df4:	a95e      	add	r1, sp, #376	; 0x178
 8001df6:	4628      	mov	r0, r5
 8001df8:	f002 fdba 	bl	8004970 <HAL_TIM_PWM_ConfigChannel>
 8001dfc:	b108      	cbz	r0, 8001e02 <main+0x32e>
 8001dfe:	b672      	cpsid	i
	while (1) {
 8001e00:	e7fe      	b.n	8001e00 <main+0x32c>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e02:	2200      	movs	r2, #0
 8001e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e08:	90bb      	str	r0, [sp, #748]	; 0x2ec
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e0a:	a9b4      	add	r1, sp, #720	; 0x2d0
 8001e0c:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e0e:	e9cd 67b4 	strd	r6, r7, [sp, #720]	; 0x2d0
 8001e12:	e9cd 67b6 	strd	r6, r7, [sp, #728]	; 0x2d8
 8001e16:	e9cd 23b8 	strd	r2, r3, [sp, #736]	; 0x2e0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e1a:	f002 ffa3 	bl	8004d64 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e1e:	4604      	mov	r4, r0
 8001e20:	b108      	cbz	r0, 8001e26 <main+0x352>
 8001e22:	b672      	cpsid	i
	while (1) {
 8001e24:	e7fe      	b.n	8001e24 <main+0x350>
  HAL_TIM_MspPostInit(&htim1);
 8001e26:	4628      	mov	r0, r5
 8001e28:	f000 fc52 	bl	80026d0 <HAL_TIM_MspPostInit>
  hspi1.Instance = SPI1;
 8001e2c:	4870      	ldr	r0, [pc, #448]	; (8001ff0 <main+0x51c>)
 8001e2e:	4a71      	ldr	r2, [pc, #452]	; (8001ff4 <main+0x520>)
 8001e30:	6002      	str	r2, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e32:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e36:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e3a:	6041      	str	r1, [r0, #4]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e3c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001e3e:	2108      	movs	r1, #8
  hspi1.Init.CRCPolynomial = 10;
 8001e40:	220a      	movs	r2, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e42:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e46:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e4a:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e4e:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001e50:	61c1      	str	r1, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 8001e52:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e54:	f001 feba 	bl	8003bcc <HAL_SPI_Init>
 8001e58:	b108      	cbz	r0, 8001e5e <main+0x38a>
 8001e5a:	b672      	cpsid	i
	while (1) {
 8001e5c:	e7fe      	b.n	8001e5c <main+0x388>
  htim2.Instance = TIM2;
 8001e5e:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 800200c <main+0x538>
 8001e62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Period = 512-1;
 8001e66:	f240 12ff 	movw	r2, #511	; 0x1ff
  htim2.Init.Prescaler = 1;
 8001e6a:	f04f 0a01 	mov.w	sl, #1
  htim2.Instance = TIM2;
 8001e6e:	f8cb 3000 	str.w	r3, [fp]
  htim2.Init.Period = 512-1;
 8001e72:	f8cb 200c 	str.w	r2, [fp, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e76:	2300      	movs	r3, #0
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e78:	2220      	movs	r2, #32
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e7a:	4658      	mov	r0, fp
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7c:	e9cd 335e 	strd	r3, r3, [sp, #376]	; 0x178
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e80:	e9cd 33b4 	strd	r3, r3, [sp, #720]	; 0x2d0
 8001e84:	e9cd 33b6 	strd	r3, r3, [sp, #728]	; 0x2d8
 8001e88:	e9cd 33b8 	strd	r3, r3, [sp, #736]	; 0x2e0
  htim2.Init.Prescaler = 1;
 8001e8c:	f8cb a004 	str.w	sl, [fp, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e90:	f8cb 2008 	str.w	r2, [fp, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e94:	f8cb 3010 	str.w	r3, [fp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e98:	93ba      	str	r3, [sp, #744]	; 0x2e8
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9a:	f8cb 3018 	str.w	r3, [fp, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e9e:	f002 fbab 	bl	80045f8 <HAL_TIM_PWM_Init>
 8001ea2:	b108      	cbz	r0, 8001ea8 <main+0x3d4>
 8001ea4:	b672      	cpsid	i
	while (1) {
 8001ea6:	e7fe      	b.n	8001ea6 <main+0x3d2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea8:	f04f 0800 	mov.w	r8, #0
 8001eac:	f04f 0900 	mov.w	r9, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eb0:	a95e      	add	r1, sp, #376	; 0x178
 8001eb2:	4658      	mov	r0, fp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb4:	e9cd 895e 	strd	r8, r9, [sp, #376]	; 0x178
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eb8:	f002 ff1a 	bl	8004cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	b108      	cbz	r0, 8001ec4 <main+0x3f0>
 8001ec0:	b672      	cpsid	i
	while (1) {
 8001ec2:	e7fe      	b.n	8001ec2 <main+0x3ee>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec4:	2660      	movs	r6, #96	; 0x60
 8001ec6:	2700      	movs	r7, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec8:	a9b4      	add	r1, sp, #720	; 0x2d0
 8001eca:	4658      	mov	r0, fp
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ecc:	e9cd 67b4 	strd	r6, r7, [sp, #720]	; 0x2d0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ed0:	92b6      	str	r2, [sp, #728]	; 0x2d8
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ed2:	92b8      	str	r2, [sp, #736]	; 0x2e0
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ed4:	f002 fd4c 	bl	8004970 <HAL_TIM_PWM_ConfigChannel>
 8001ed8:	b108      	cbz	r0, 8001ede <main+0x40a>
 8001eda:	b672      	cpsid	i
	while (1) {
 8001edc:	e7fe      	b.n	8001edc <main+0x408>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ede:	2204      	movs	r2, #4
 8001ee0:	a9b4      	add	r1, sp, #720	; 0x2d0
 8001ee2:	4658      	mov	r0, fp
 8001ee4:	f002 fd44 	bl	8004970 <HAL_TIM_PWM_ConfigChannel>
 8001ee8:	b108      	cbz	r0, 8001eee <main+0x41a>
 8001eea:	b672      	cpsid	i
	while (1) {
 8001eec:	e7fe      	b.n	8001eec <main+0x418>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001eee:	2208      	movs	r2, #8
 8001ef0:	a9b4      	add	r1, sp, #720	; 0x2d0
 8001ef2:	4658      	mov	r0, fp
 8001ef4:	f002 fd3c 	bl	8004970 <HAL_TIM_PWM_ConfigChannel>
 8001ef8:	4604      	mov	r4, r0
 8001efa:	b108      	cbz	r0, 8001f00 <main+0x42c>
 8001efc:	b672      	cpsid	i
	while (1) {
 8001efe:	e7fe      	b.n	8001efe <main+0x42a>
  htim3.Instance = TIM3;
 8001f00:	4d3d      	ldr	r5, [pc, #244]	; (8001ff8 <main+0x524>)
  HAL_TIM_MspPostInit(&htim2);
 8001f02:	4658      	mov	r0, fp
 8001f04:	f000 fbe4 	bl	80026d0 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 8001f08:	493c      	ldr	r1, [pc, #240]	; (8001ffc <main+0x528>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f0a:	94ba      	str	r4, [sp, #744]	; 0x2e8
  htim3.Init.Period = 65535;
 8001f0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001f10:	2320      	movs	r3, #32
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f12:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f14:	e9cd 445e 	strd	r4, r4, [sp, #376]	; 0x178
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f18:	e9cd 44b4 	strd	r4, r4, [sp, #720]	; 0x2d0
 8001f1c:	e9cd 44b6 	strd	r4, r4, [sp, #728]	; 0x2d8
 8001f20:	e9cd 44b8 	strd	r4, r4, [sp, #736]	; 0x2e0
  htim3.Init.Prescaler = 1;
 8001f24:	f8c5 a004 	str.w	sl, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001f28:	60ab      	str	r3, [r5, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2a:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2c:	61ac      	str	r4, [r5, #24]
  htim3.Instance = TIM3;
 8001f2e:	6029      	str	r1, [r5, #0]
  htim3.Init.Period = 65535;
 8001f30:	60ea      	str	r2, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f32:	f002 fb61 	bl	80045f8 <HAL_TIM_PWM_Init>
 8001f36:	b108      	cbz	r0, 8001f3c <main+0x468>
 8001f38:	b672      	cpsid	i
	while (1) {
 8001f3a:	e7fe      	b.n	8001f3a <main+0x466>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f3c:	a95e      	add	r1, sp, #376	; 0x178
 8001f3e:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f40:	e9cd 895e 	strd	r8, r9, [sp, #376]	; 0x178
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f44:	f002 fed4 	bl	8004cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	b108      	cbz	r0, 8001f50 <main+0x47c>
 8001f4c:	b672      	cpsid	i
	while (1) {
 8001f4e:	e7fe      	b.n	8001f4e <main+0x47a>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f50:	a9b4      	add	r1, sp, #720	; 0x2d0
 8001f52:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f54:	e9cd 67b4 	strd	r6, r7, [sp, #720]	; 0x2d0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f58:	92b6      	str	r2, [sp, #728]	; 0x2d8
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f5a:	92b8      	str	r2, [sp, #736]	; 0x2e0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f5c:	f002 fd08 	bl	8004970 <HAL_TIM_PWM_ConfigChannel>
 8001f60:	b108      	cbz	r0, 8001f66 <main+0x492>
 8001f62:	b672      	cpsid	i
	while (1) {
 8001f64:	e7fe      	b.n	8001f64 <main+0x490>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f66:	2204      	movs	r2, #4
 8001f68:	a9b4      	add	r1, sp, #720	; 0x2d0
 8001f6a:	4628      	mov	r0, r5
 8001f6c:	f002 fd00 	bl	8004970 <HAL_TIM_PWM_ConfigChannel>
 8001f70:	b108      	cbz	r0, 8001f76 <main+0x4a2>
 8001f72:	b672      	cpsid	i
	while (1) {
 8001f74:	e7fe      	b.n	8001f74 <main+0x4a0>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f76:	4628      	mov	r0, r5
 8001f78:	2208      	movs	r2, #8
 8001f7a:	a9b4      	add	r1, sp, #720	; 0x2d0
 8001f7c:	f002 fcf8 	bl	8004970 <HAL_TIM_PWM_ConfigChannel>
 8001f80:	b108      	cbz	r0, 8001f86 <main+0x4b2>
 8001f82:	b672      	cpsid	i
	while (1) {
 8001f84:	e7fe      	b.n	8001f84 <main+0x4b0>
  htim5.Instance = TIM5;
 8001f86:	4c1e      	ldr	r4, [pc, #120]	; (8002000 <main+0x52c>)
  HAL_TIM_MspPostInit(&htim3);
 8001f88:	481b      	ldr	r0, [pc, #108]	; (8001ff8 <main+0x524>)
 8001f8a:	f000 fba1 	bl	80026d0 <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <main+0x530>)
  htim5.Init.Period = 999999;
 8001f90:	4a1d      	ldr	r2, [pc, #116]	; (8002008 <main+0x534>)
  htim5.Instance = TIM5;
 8001f92:	6023      	str	r3, [r4, #0]
  htim5.Init.Prescaler = 84;
 8001f94:	2354      	movs	r3, #84	; 0x54
 8001f96:	6063      	str	r3, [r4, #4]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001f98:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f9a:	2300      	movs	r3, #0
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9c:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa0:	e9cd 335e 	strd	r3, r3, [sp, #376]	; 0x178
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fa4:	e9cd 33b4 	strd	r3, r3, [sp, #720]	; 0x2d0
 8001fa8:	e9cd 33b6 	strd	r3, r3, [sp, #728]	; 0x2d8
 8001fac:	e9cd 33b8 	strd	r3, r3, [sp, #736]	; 0x2e0
 8001fb0:	93ba      	str	r3, [sp, #744]	; 0x2e8
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb2:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb4:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001fb6:	f002 faa1 	bl	80044fc <HAL_TIM_OC_Init>
 8001fba:	b108      	cbz	r0, 8001fc0 <main+0x4ec>
 8001fbc:	b672      	cpsid	i
	while (1) {
 8001fbe:	e7fe      	b.n	8001fbe <main+0x4ea>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc0:	2600      	movs	r6, #0
 8001fc2:	2700      	movs	r7, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001fc4:	a95e      	add	r1, sp, #376	; 0x178
 8001fc6:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc8:	e9cd 675e 	strd	r6, r7, [sp, #376]	; 0x178
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001fcc:	f002 fe90 	bl	8004cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	b108      	cbz	r0, 8001fd8 <main+0x504>
 8001fd4:	b672      	cpsid	i
	while (1) {
 8001fd6:	e7fe      	b.n	8001fd6 <main+0x502>
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fd8:	4620      	mov	r0, r4
 8001fda:	220c      	movs	r2, #12
 8001fdc:	a9b4      	add	r1, sp, #720	; 0x2d0
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001fde:	e9cd 67b4 	strd	r6, r7, [sp, #720]	; 0x2d0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe2:	93b6      	str	r3, [sp, #728]	; 0x2d8
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe4:	93b8      	str	r3, [sp, #736]	; 0x2e0
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fe6:	f002 fbed 	bl	80047c4 <HAL_TIM_OC_ConfigChannel>
 8001fea:	b188      	cbz	r0, 8002010 <main+0x53c>
 8001fec:	b672      	cpsid	i
	while (1) {
 8001fee:	e7fe      	b.n	8001fee <main+0x51a>
 8001ff0:	200043ec 	.word	0x200043ec
 8001ff4:	40013000 	.word	0x40013000
 8001ff8:	20004294 	.word	0x20004294
 8001ffc:	40000400 	.word	0x40000400
 8002000:	2000424c 	.word	0x2000424c
 8002004:	40000c00 	.word	0x40000c00
 8002008:	000f423f 	.word	0x000f423f
 800200c:	20004448 	.word	0x20004448
		sprintf((char*) buff, "\r\n###########################\r\n");
 8002010:	4dba      	ldr	r5, [pc, #744]	; (80022fc <main+0x828>)
 8002012:	4cbb      	ldr	r4, [pc, #748]	; (8002300 <main+0x82c>)
		adc_ratio = 1/(float)adc_max;
 8002014:	4fbb      	ldr	r7, [pc, #748]	; (8002304 <main+0x830>)
		sense_ratio = 1/(float)(sense_resistance*ina181_gain);
 8002016:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8002348 <main+0x874>
 800201a:	4ebb      	ldr	r6, [pc, #748]	; (8002308 <main+0x834>)
		sprintf((char*) buff, "\r\n###########################\r\n");
 800201c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800201e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002020:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002024:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart2, (uint8_t*) buff, strlen((char*) buff),
 8002028:	f1a4 0110 	sub.w	r1, r4, #16
 800202c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002030:	221f      	movs	r2, #31
 8002032:	48b6      	ldr	r0, [pc, #728]	; (800230c <main+0x838>)
 8002034:	f002 ff60 	bl	8004ef8 <HAL_UART_Transmit>

uint32_t get_us();

__STATIC_INLINE void DWT_Init(void)
{
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8002038:	49b5      	ldr	r1, [pc, #724]	; (8002310 <main+0x83c>)
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 800203a:	4ab6      	ldr	r2, [pc, #728]	; (8002314 <main+0x840>)
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 800203c:	68cb      	ldr	r3, [r1, #12]
 800203e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002042:	60cb      	str	r3, [r1, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8002044:	6813      	ldr	r3, [r2, #0]
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6013      	str	r3, [r2, #0]
	MotorY.PIN_ENC = PIN_ENC_Y;
 800204c:	2220      	movs	r2, #32
		as5048a_init(&MotorX);
 800204e:	eb0d 0002 	add.w	r0, sp, r2
	MotorX.PIN_ENC = PIN_ENC_X;
 8002052:	2110      	movs	r1, #16
	MotorZ.PIN_ENC = PIN_ENC_Z;
 8002054:	2340      	movs	r3, #64	; 0x40
	MotorY.PIN_ENC = PIN_ENC_Y;
 8002056:	f8ad 2178 	strh.w	r2, [sp, #376]	; 0x178
	MotorX.PIN_ENC = PIN_ENC_X;
 800205a:	f8ad 1020 	strh.w	r1, [sp, #32]
	MotorZ.PIN_ENC = PIN_ENC_Z;
 800205e:	f8ad 32d0 	strh.w	r3, [sp, #720]	; 0x2d0
		as5048a_init(&MotorX);
 8002062:	f7fe fffd 	bl	8001060 <as5048a_init>
		as5048a_init(&MotorY);
 8002066:	a85e      	add	r0, sp, #376	; 0x178
 8002068:	f7fe fffa 	bl	8001060 <as5048a_init>
		as5048a_init(&MotorZ);
 800206c:	a8b4      	add	r0, sp, #720	; 0x2d0
 800206e:	f7fe fff7 	bl	8001060 <as5048a_init>
		MotorY.LPF_angle_measure.Tf = 0.001f;
 8002072:	4ba9      	ldr	r3, [pc, #676]	; (8002318 <main+0x844>)
		drv8313_init(&MotorX, &htim1);
 8002074:	49a9      	ldr	r1, [pc, #676]	; (800231c <main+0x848>)
		MotorY.LPF_angle_measure.Tf = 0.001f;
 8002076:	93a5      	str	r3, [sp, #660]	; 0x294
		drv8313_init(&MotorX, &htim1);
 8002078:	a808      	add	r0, sp, #32
 800207a:	f7ff f933 	bl	80012e4 <drv8313_init>
		drv8313_init(&MotorY, &htim2);
 800207e:	49a8      	ldr	r1, [pc, #672]	; (8002320 <main+0x84c>)
 8002080:	a85e      	add	r0, sp, #376	; 0x178
 8002082:	f7ff f92f 	bl	80012e4 <drv8313_init>
		drv8313_init(&MotorZ, &htim3);
 8002086:	49a7      	ldr	r1, [pc, #668]	; (8002324 <main+0x850>)
 8002088:	a8b4      	add	r0, sp, #720	; 0x2d0
 800208a:	f7ff f92b 	bl	80012e4 <drv8313_init>
		MotorX.pole_pairs = 11;
 800208e:	230b      	movs	r3, #11
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_read, ADC_CHANNELS);
 8002090:	49a5      	ldr	r1, [pc, #660]	; (8002328 <main+0x854>)
 8002092:	48a6      	ldr	r0, [pc, #664]	; (800232c <main+0x858>)
		MotorX.pole_pairs = 11;
 8002094:	f8ad 3174 	strh.w	r3, [sp, #372]	; 0x174
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_read, ADC_CHANNELS);
 8002098:	2209      	movs	r2, #9
		MotorY.pole_pairs = 11;
 800209a:	f8ad 32cc 	strh.w	r3, [sp, #716]	; 0x2cc
		MotorZ.pole_pairs = 11;
 800209e:	f8ad 3424 	strh.w	r3, [sp, #1060]	; 0x424
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_read, ADC_CHANNELS);
 80020a2:	f000 fd8f 	bl	8002bc4 <HAL_ADC_Start_DMA>
		adc_ratio = 1/(float)adc_max;
 80020a6:	49a2      	ldr	r1, [pc, #648]	; (8002330 <main+0x85c>)
		sense_ratio = 1/(float)(sense_resistance*ina181_gain);
 80020a8:	4aa2      	ldr	r2, [pc, #648]	; (8002334 <main+0x860>)
 80020aa:	4ba3      	ldr	r3, [pc, #652]	; (8002338 <main+0x864>)
		adc_ratio = 1/(float)adc_max;
 80020ac:	8809      	ldrh	r1, [r1, #0]
		sense_ratio = 1/(float)(sense_resistance*ina181_gain);
 80020ae:	edd3 6a00 	vldr	s13, [r3]
 80020b2:	ed92 7a00 	vldr	s14, [r2]
		adc_ratio = 1/(float)adc_max;
 80020b6:	ee07 1a90 	vmov	s15, r1
		sense_ratio = 1/(float)(sense_resistance*ina181_gain);
 80020ba:	ee27 7a26 	vmul.f32	s14, s14, s13
		adc_ratio = 1/(float)adc_max;
 80020be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80020c6:	eec6 6a27 	vdiv.f32	s13, s12, s15
		sense_ratio = 1/(float)(sense_resistance*ina181_gain);
 80020ca:	eec6 7a07 	vdiv.f32	s15, s12, s14
		adc_ratio = 1/(float)adc_max;
 80020ce:	edc7 6a00 	vstr	s13, [r7]
		sense_ratio = 1/(float)(sense_resistance*ina181_gain);
 80020d2:	edc8 7a00 	vstr	s15, [r8]
		while (adcConvComplete == 0) {
 80020d6:	7833      	ldrb	r3, [r6, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0fc      	beq.n	80020d6 <main+0x602>
		ina_ref = adc_read[2]*adc_ratio*adc_ref;
 80020dc:	4d92      	ldr	r5, [pc, #584]	; (8002328 <main+0x854>)
 80020de:	f8df a26c 	ldr.w	sl, [pc, #620]	; 800234c <main+0x878>
 80020e2:	4c96      	ldr	r4, [pc, #600]	; (800233c <main+0x868>)
 80020e4:	ed9a 6a00 	vldr	s12, [sl]
 80020e8:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8002350 <main+0x87c>
			foc_update(&MotorX, 180);
 80020ec:	ed9f 8a94 	vldr	s16, [pc, #592]	; 8002340 <main+0x86c>
		adcConvComplete = 0;
 80020f0:	f04f 0b00 	mov.w	fp, #0
 80020f4:	f886 b000 	strb.w	fp, [r6]
		ina_ref = adc_read[2]*adc_ratio*adc_ref;
 80020f8:	88ab      	ldrh	r3, [r5, #4]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	ee07 3a10 	vmov	s14, r3
 8002100:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002104:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002108:	ee27 7a06 	vmul.f32	s14, s14, s12
 800210c:	ed84 7a00 	vstr	s14, [r4]
		MotorX.i_a = (adc_read[0]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002110:	f8b5 c000 	ldrh.w	ip, [r5]
 8002114:	ed94 1a00 	vldr	s2, [r4]
		MotorX.i_b = (adc_read[1]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002118:	8868      	ldrh	r0, [r5, #2]
 800211a:	edd4 1a00 	vldr	s3, [r4]
		MotorY.i_a = (adc_read[3]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 800211e:	88e9      	ldrh	r1, [r5, #6]
 8002120:	ed94 2a00 	vldr	s4, [r4]
		MotorY.i_b = (adc_read[4]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002124:	892b      	ldrh	r3, [r5, #8]
 8002126:	edd4 2a00 	vldr	s5, [r4]
		MotorX.i_a = (adc_read[0]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 800212a:	fa1f f28c 	uxth.w	r2, ip
 800212e:	ee03 2a90 	vmov	s7, r2
		MotorY.i_b = (adc_read[4]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002132:	b29b      	uxth	r3, r3
		MotorX.i_b = (adc_read[1]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002134:	b282      	uxth	r2, r0
 8002136:	ee04 2a10 	vmov	s8, r2
		MotorY.i_b = (adc_read[4]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 800213a:	ee05 3a10 	vmov	s10, r3
		MotorY.i_a = (adc_read[3]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 800213e:	b28a      	uxth	r2, r1
		MotorZ.i_a = (adc_read[6]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002140:	89a9      	ldrh	r1, [r5, #12]
 8002142:	ed94 3a00 	vldr	s6, [r4]
		MotorZ.i_b = (adc_read[7]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002146:	89eb      	ldrh	r3, [r5, #14]
 8002148:	edd4 0a00 	vldr	s1, [r4]
		MotorY.i_a = (adc_read[3]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 800214c:	ee04 2a90 	vmov	s9, r2
		MotorZ.i_b = (adc_read[7]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002150:	b29b      	uxth	r3, r3
		MotorZ.i_a = (adc_read[6]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002152:	b28a      	uxth	r2, r1
 8002154:	ee05 2a90 	vmov	s11, r2
		MotorZ.i_b = (adc_read[7]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002158:	ee07 3a10 	vmov	s14, r3
		MotorX.i_a = (adc_read[0]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 800215c:	eef8 3ae3 	vcvt.f32.s32	s7, s7
		MotorZ.i_b = (adc_read[7]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002160:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		MotorX.i_b = (adc_read[1]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002164:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
		MotorY.i_a = (adc_read[3]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002168:	eef8 4ae4 	vcvt.f32.s32	s9, s9
		MotorY.i_b = (adc_read[4]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 800216c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
		MotorZ.i_a = (adc_read[6]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002170:	eef8 5ae5 	vcvt.f32.s32	s11, s11
		MotorX.i_a = (adc_read[0]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002174:	ee63 3aa6 	vmul.f32	s7, s7, s13
		MotorZ.i_a = (adc_read[6]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002178:	ee65 5aa6 	vmul.f32	s11, s11, s13
		MotorX.i_b = (adc_read[1]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 800217c:	ee24 4a26 	vmul.f32	s8, s8, s13
		MotorY.i_a = (adc_read[3]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002180:	ee64 4aa6 	vmul.f32	s9, s9, s13
		MotorY.i_b = (adc_read[4]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002184:	ee25 5a26 	vmul.f32	s10, s10, s13
		MotorZ.i_b = (adc_read[7]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002188:	ee67 6a26 	vmul.f32	s13, s14, s13
		MotorZ.i_a = (adc_read[6]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 800218c:	eeb0 7a43 	vmov.f32	s14, s6
		MotorZ.i_b = (adc_read[7]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002190:	eeb0 3a60 	vmov.f32	s6, s1
		MotorZ.i_a = (adc_read[6]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002194:	ee96 7a25 	vfnms.f32	s14, s12, s11
		MotorZ.i_b = (adc_read[7]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002198:	ee96 3a26 	vfnms.f32	s6, s12, s13
		MotorX.i_a = (adc_read[0]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 800219c:	ee96 1a23 	vfnms.f32	s2, s12, s7
		MotorX.i_b = (adc_read[1]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80021a0:	eed6 1a04 	vfnms.f32	s3, s12, s8
		MotorY.i_b = (adc_read[4]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80021a4:	eed6 2a05 	vfnms.f32	s5, s12, s10
		MotorY.i_a = (adc_read[3]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80021a8:	ee96 2a24 	vfnms.f32	s4, s12, s9
		MotorX.i_a = (adc_read[0]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80021ac:	ee67 3a81 	vmul.f32	s7, s15, s2
		MotorX.i_b = (adc_read[1]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80021b0:	ee67 5aa1 	vmul.f32	s11, s15, s3
		MotorY.i_a = (adc_read[3]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80021b4:	ee27 6a82 	vmul.f32	s12, s15, s4
		MotorY.i_b = (adc_read[4]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80021b8:	ee67 6aa2 	vmul.f32	s13, s15, s5
		MotorZ.i_a = (adc_read[6]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80021bc:	ee27 7a87 	vmul.f32	s14, s15, s14
		MotorZ.i_b = (adc_read[7]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80021c0:	ee67 7a83 	vmul.f32	s15, s15, s6
		MotorX.i_a = (adc_read[0]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80021c4:	edcd 3a09 	vstr	s7, [sp, #36]	; 0x24
		MotorX.i_b = (adc_read[1]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80021c8:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
		MotorY.i_a = (adc_read[3]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80021cc:	ed8d 6a5f 	vstr	s12, [sp, #380]	; 0x17c
		MotorY.i_b = (adc_read[4]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80021d0:	edcd 6a60 	vstr	s13, [sp, #384]	; 0x180
		MotorZ.i_a = (adc_read[6]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80021d4:	ed8d 7ab5 	vstr	s14, [sp, #724]	; 0x2d4
		MotorZ.i_b = (adc_read[7]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80021d8:	edcd 7ab6 	vstr	s15, [sp, #728]	; 0x2d8
	setSampleFreq_ms();
 80021dc:	f7ff fc02 	bl	80019e4 <setSampleFreq_ms>
		setSampleFreq_us();
 80021e0:	f7ff fc12 	bl	8001a08 <setSampleFreq_us>
			as5048a_getAngle(&MotorX);
 80021e4:	a808      	add	r0, sp, #32
 80021e6:	f7fe ffaf 	bl	8001148 <as5048a_getAngle>
			as5048a_getAngle(&MotorY);
 80021ea:	a85e      	add	r0, sp, #376	; 0x178
 80021ec:	f7fe ffac 	bl	8001148 <as5048a_getAngle>
			while (adcConvComplete == 0) {
 80021f0:	7833      	ldrb	r3, [r6, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0fc      	beq.n	80021f0 <main+0x71c>
			adcConvComplete = 0;
 80021f6:	f886 b000 	strb.w	fp, [r6]
			ina_ref = adc_read[2]*adc_ratio*adc_ref;
 80021fa:	88ab      	ldrh	r3, [r5, #4]
 80021fc:	edda 6a00 	vldr	s13, [sl]
 8002200:	ed97 7a00 	vldr	s14, [r7]
			MotorX.i_a = (adc_read[0]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002204:	edd8 5a00 	vldr	s11, [r8]
			ina_ref = adc_read[2]*adc_ratio*adc_ref;
 8002208:	b29b      	uxth	r3, r3
 800220a:	ee07 3a90 	vmov	s15, r3
 800220e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			foc_update(&MotorX, 180);
 8002216:	a808      	add	r0, sp, #32
			ina_ref = adc_read[2]*adc_ratio*adc_ref;
 8002218:	ee67 7a87 	vmul.f32	s15, s15, s14
			foc_update(&MotorX, 180);
 800221c:	eeb0 0a48 	vmov.f32	s0, s16
			ina_ref = adc_read[2]*adc_ratio*adc_ref;
 8002220:	edc4 7a00 	vstr	s15, [r4]
			MotorX.i_a = (adc_read[0]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002224:	8829      	ldrh	r1, [r5, #0]
 8002226:	edd4 7a00 	vldr	s15, [r4]
			MotorX.i_b = (adc_read[1]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 800222a:	886b      	ldrh	r3, [r5, #2]
 800222c:	ed94 5a00 	vldr	s10, [r4]
			MotorX.i_a = (adc_read[0]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002230:	b289      	uxth	r1, r1
 8002232:	ee06 1a90 	vmov	s13, r1
			MotorX.i_b = (adc_read[1]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002236:	b29b      	uxth	r3, r3
			MotorX.i_a = (adc_read[0]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002238:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
			MotorX.i_b = (adc_read[1]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 800223c:	ee06 3a90 	vmov	s13, r3
 8002240:	eef8 6ae6 	vcvt.f32.s32	s13, s13
			MotorX.i_a = (adc_read[0]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002244:	eed6 7a07 	vfnms.f32	s15, s12, s14
			MotorX.i_b = (adc_read[1]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002248:	ee96 5a87 	vfnms.f32	s10, s13, s14
			MotorX.i_a = (adc_read[0]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 800224c:	ee67 7aa5 	vmul.f32	s15, s15, s11
			MotorX.i_b = (adc_read[1]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002250:	ee65 5a85 	vmul.f32	s11, s11, s10
			MotorX.i_a = (adc_read[0]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002254:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
			MotorX.i_b = (adc_read[1]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002258:	edcd 5a0a 	vstr	s11, [sp, #40]	; 0x28
			foc_update(&MotorX, 180);
 800225c:	f7ff faec 	bl	8001838 <foc_update>
			MotorY.i_a = (adc_read[3]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002260:	f8b5 c006 	ldrh.w	ip, [r5, #6]
 8002264:	edd4 5a00 	vldr	s11, [r4]
			MotorY.i_b = (adc_read[4]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002268:	8928      	ldrh	r0, [r5, #8]
 800226a:	ed9a 5a00 	vldr	s10, [sl]
 800226e:	ed97 7a00 	vldr	s14, [r7]
 8002272:	ed94 6a00 	vldr	s12, [r4]
			MotorZ.i_a = (adc_read[6]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002276:	89a9      	ldrh	r1, [r5, #12]
 8002278:	edd4 6a00 	vldr	s13, [r4]
			MotorZ.i_b = (adc_read[7]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 800227c:	89eb      	ldrh	r3, [r5, #14]
 800227e:	ed94 3a00 	vldr	s6, [r4]
		loop_cnt %= print_flag;
 8002282:	4a30      	ldr	r2, [pc, #192]	; (8002344 <main+0x870>)
			MotorY.i_a = (adc_read[3]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002284:	edd8 7a00 	vldr	s15, [r8]
			MotorY.i_b = (adc_read[4]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002288:	b280      	uxth	r0, r0
 800228a:	ee27 7a05 	vmul.f32	s14, s14, s10
 800228e:	ee05 0a10 	vmov	s10, r0
			MotorZ.i_a = (adc_read[6]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002292:	b289      	uxth	r1, r1
			MotorY.i_a = (adc_read[3]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002294:	fa1f fc8c 	uxth.w	ip, ip
 8002298:	ee04 ca90 	vmov	s9, ip
			MotorY.i_b = (adc_read[4]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 800229c:	eeb8 4ac5 	vcvt.f32.s32	s8, s10
			MotorZ.i_a = (adc_read[6]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80022a0:	ee05 1a10 	vmov	s10, r1
			MotorZ.i_b = (adc_read[7]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80022a4:	b29b      	uxth	r3, r3
			MotorY.i_a = (adc_read[3]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80022a6:	eef8 3ae4 	vcvt.f32.s32	s7, s9
			MotorZ.i_a = (adc_read[6]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80022aa:	eef8 4ac5 	vcvt.f32.s32	s9, s10
			MotorZ.i_b = (adc_read[7]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80022ae:	ee05 3a10 	vmov	s10, r3
 80022b2:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
			MotorY.i_a = (adc_read[3]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80022b6:	eed3 5a87 	vfnms.f32	s11, s7, s14
		loop_cnt++;
 80022ba:	f8d9 3000 	ldr.w	r3, [r9]
		loop_cnt %= print_flag;
 80022be:	6810      	ldr	r0, [r2, #0]
			MotorY.i_b = (adc_read[4]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80022c0:	ee94 6a07 	vfnms.f32	s12, s8, s14
		loop_cnt++;
 80022c4:	3301      	adds	r3, #1
		loop_cnt %= print_flag;
 80022c6:	fbb3 f1f0 	udiv	r1, r3, r0
			MotorZ.i_b = (adc_read[7]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80022ca:	ee95 3a07 	vfnms.f32	s6, s10, s14
		loop_cnt %= print_flag;
 80022ce:	fb00 3311 	mls	r3, r0, r1, r3
 80022d2:	f8c9 3000 	str.w	r3, [r9]
			MotorZ.i_a = (adc_read[6]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80022d6:	eed4 6a87 	vfnms.f32	s13, s9, s14
			MotorY.i_a = (adc_read[3]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80022da:	ee65 5aa7 	vmul.f32	s11, s11, s15
			MotorY.i_b = (adc_read[4]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80022de:	ee27 6a86 	vmul.f32	s12, s15, s12
			MotorZ.i_a = (adc_read[6]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80022e2:	ee27 7aa6 	vmul.f32	s14, s15, s13
			MotorZ.i_b = (adc_read[7]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80022e6:	ee67 7a83 	vmul.f32	s15, s15, s6
			MotorY.i_a = (adc_read[3]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80022ea:	edcd 5a5f 	vstr	s11, [sp, #380]	; 0x17c
			MotorY.i_b = (adc_read[4]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80022ee:	ed8d 6a60 	vstr	s12, [sp, #384]	; 0x180
			MotorZ.i_a = (adc_read[6]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80022f2:	ed8d 7ab5 	vstr	s14, [sp, #724]	; 0x2d4
			MotorZ.i_b = (adc_read[7]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80022f6:	edcd 7ab6 	vstr	s15, [sp, #728]	; 0x2d8
		setSampleFreq_us();
 80022fa:	e771      	b.n	80021e0 <main+0x70c>
 80022fc:	08009308 	.word	0x08009308
 8002300:	20000248 	.word	0x20000248
 8002304:	20004444 	.word	0x20004444
 8002308:	20000216 	.word	0x20000216
 800230c:	20004494 	.word	0x20004494
 8002310:	e000edf0 	.word	0xe000edf0
 8002314:	e0001000 	.word	0xe0001000
 8002318:	3a83126f 	.word	0x3a83126f
 800231c:	200043a4 	.word	0x200043a4
 8002320:	20004448 	.word	0x20004448
 8002324:	20004294 	.word	0x20004294
 8002328:	200042dc 	.word	0x200042dc
 800232c:	200042f0 	.word	0x200042f0
 8002330:	20000002 	.word	0x20000002
 8002334:	20000010 	.word	0x20000010
 8002338:	20000008 	.word	0x20000008
 800233c:	20000218 	.word	0x20000218
 8002340:	43340000 	.word	0x43340000
 8002344:	2000000c 	.word	0x2000000c
 8002348:	2000439c 	.word	0x2000439c
 800234c:	20000004 	.word	0x20000004
 8002350:	2000021c 	.word	0x2000021c

08002354 <HAL_ADC_ConvCpltCallback>:
	adcConvComplete = 1;
 8002354:	4b01      	ldr	r3, [pc, #4]	; (800235c <HAL_ADC_ConvCpltCallback+0x8>)
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
}
 800235a:	4770      	bx	lr
 800235c:	20000216 	.word	0x20000216

08002360 <Error_Handler>:
 8002360:	b672      	cpsid	i
	while (1) {
 8002362:	e7fe      	b.n	8002362 <Error_Handler+0x2>

08002364 <PID_Init>:
 *      Author: maxborglowe
 */

#include "pid.h"

void PID_Init(struct PID *pid) {
 8002364:	b510      	push	{r4, lr}
	pid->integrator = 0.0f;
 8002366:	2300      	movs	r3, #0
 8002368:	61c3      	str	r3, [r0, #28]
	pid->prevErr = 0.0f;
 800236a:	6203      	str	r3, [r0, #32]
	pid->differentiator = 0.0f;
 800236c:	6243      	str	r3, [r0, #36]	; 0x24
	pid->prevMeas = 0.0f;
 800236e:	6283      	str	r3, [r0, #40]	; 0x28
	pid->out = 0.0f;
 8002370:	62c3      	str	r3, [r0, #44]	; 0x2c
	pid->Kp = 0.0f;
 8002372:	6003      	str	r3, [r0, #0]
	pid->Ki = 0.0f;
 8002374:	6043      	str	r3, [r0, #4]
	pid->Kd = 0.0f;
 8002376:	6083      	str	r3, [r0, #8]
void PID_Init(struct PID *pid) {
 8002378:	4604      	mov	r4, r0

	pid->timestamp_prev = get_us();
 800237a:	f000 fae1 	bl	8002940 <get_us>
 800237e:	6160      	str	r0, [r4, #20]
}
 8002380:	bd10      	pop	{r4, pc}
 8002382:	bf00      	nop

08002384 <PID_Update>:
/**
 * @brief Update the pid output based on error
 * @param The value to be achieved
 * @param Measured value
 */
float PID_Update(struct PID *pid, float setpoint, float meas) {
 8002384:	b510      	push	{r4, lr}
 8002386:	4604      	mov	r4, r0
 8002388:	ed2d 8b02 	vpush	{d8}
 800238c:	eeb0 8a40 	vmov.f32	s16, s0
 8002390:	eef0 8a60 	vmov.f32	s17, s1

	uint32_t timestamp_now = get_us();
 8002394:	f000 fad4 	bl	8002940 <get_us>
	float Ts = (timestamp_now - pid->timestamp_prev) * 1e-6f;
 8002398:	6963      	ldr	r3, [r4, #20]
 800239a:	eddf 6a31 	vldr	s13, [pc, #196]	; 8002460 <PID_Update+0xdc>
 800239e:	1ac3      	subs	r3, r0, r3
 80023a0:	ee07 3a90 	vmov	s15, r3
 80023a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023a8:	ee67 6aa6 	vmul.f32	s13, s15, s13
	/* fix micros overflow */
	if(Ts <= 0.0f || Ts > 0.5f) Ts = 1e-3f;
 80023ac:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80023b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b4:	d951      	bls.n	800245a <PID_Update+0xd6>
 80023b6:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 8002464 <PID_Update+0xe0>
 80023ba:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002468 <PID_Update+0xe4>
 80023be:	eef4 7a46 	vcmp.f32	s15, s12
 80023c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c6:	bfc8      	it	gt
 80023c8:	eef0 6a47 	vmovgt.f32	s13, s14

	/* Error output from leftmost summer*/
	float err = setpoint - meas;
 80023cc:	ee78 7a68 	vsub.f32	s15, s16, s17

	/* Proportional */
	float prop = pid->Kp * err;

	/* Integrator */
	pid->integrator = pid->integrator + 0.5f * pid->Ki * Ts * (err + pid->prevErr);
 80023d0:	ed94 6a08 	vldr	s12, [r4, #32]
 80023d4:	ed94 5a01 	vldr	s10, [r4, #4]
 80023d8:	edd4 5a07 	vldr	s11, [r4, #28]
//		lim_min_int = pid->lim_min - prop;
//	} else {
//		lim_min_int = 0.0f;
//	}

	pid->integrator = _constrain(pid->integrator, pid->lim_min, pid->lim_max);
 80023dc:	ed94 0a03 	vldr	s0, [r4, #12]
	float prop = pid->Kp * err;
 80023e0:	ed94 7a00 	vldr	s14, [r4]
	pid->integrator = pid->integrator + 0.5f * pid->Ki * Ts * (err + pid->prevErr);
 80023e4:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 80023e8:	ee37 6a86 	vadd.f32	s12, s15, s12
 80023ec:	ee25 5a24 	vmul.f32	s10, s10, s9
	float prop = pid->Kp * err;
 80023f0:	ee27 7a87 	vmul.f32	s14, s15, s14
	pid->integrator = pid->integrator + 0.5f * pid->Ki * Ts * (err + pid->prevErr);
 80023f4:	ee26 6a05 	vmul.f32	s12, s12, s10
 80023f8:	eee6 5a86 	vfma.f32	s11, s13, s12
	pid->integrator = _constrain(pid->integrator, pid->lim_min, pid->lim_max);
 80023fc:	eef4 5ac0 	vcmpe.f32	s11, s0
 8002400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	pid->integrator = pid->integrator + 0.5f * pid->Ki * Ts * (err + pid->prevErr);
 8002404:	eef0 6a65 	vmov.f32	s13, s11
	pid->integrator = _constrain(pid->integrator, pid->lim_min, pid->lim_max);
 8002408:	d424      	bmi.n	8002454 <PID_Update+0xd0>
 800240a:	ed94 6a04 	vldr	s12, [r4, #16]
 800240e:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8002412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002416:	bf98      	it	ls
 8002418:	eef0 6a46 	vmovls.f32	s13, s12
//	}

	/* Derivative: not necessary for FOC */

	/* Output */
	pid->out = prop + pid->integrator;
 800241c:	ee36 7a87 	vadd.f32	s14, s13, s14
	pid->integrator = _constrain(pid->integrator, pid->lim_min, pid->lim_max);
 8002420:	edc4 6a07 	vstr	s13, [r4, #28]
//		pid->out = pid->lim_max;
//	} else if (pid->out < pid->lim_min) {
//		pid->out = pid->lim_min;
//	}

	pid->out = _constrain(pid->out, pid->lim_min, pid->lim_max);
 8002424:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8002428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242c:	dc08      	bgt.n	8002440 <PID_Update+0xbc>
 800242e:	ed94 0a04 	vldr	s0, [r4, #16]
 8002432:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8002436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243a:	bf88      	it	hi
 800243c:	eeb0 0a47 	vmovhi.f32	s0, s14

	/* Store error and measurement in PID struct*/
	pid->prevErr = err;
	pid->prevMeas = meas;
 8002440:	edc4 8a0a 	vstr	s17, [r4, #40]	; 0x28
	pid->timestamp_prev = timestamp_now;

	return pid->out;
}
 8002444:	ecbd 8b02 	vpop	{d8}
	pid->out = _constrain(pid->out, pid->lim_min, pid->lim_max);
 8002448:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
	pid->prevErr = err;
 800244c:	edc4 7a08 	vstr	s15, [r4, #32]
	pid->timestamp_prev = timestamp_now;
 8002450:	6160      	str	r0, [r4, #20]
}
 8002452:	bd10      	pop	{r4, pc}
	pid->integrator = _constrain(pid->integrator, pid->lim_min, pid->lim_max);
 8002454:	eef0 6a40 	vmov.f32	s13, s0
 8002458:	e7e0      	b.n	800241c <PID_Update+0x98>
	if(Ts <= 0.0f || Ts > 0.5f) Ts = 1e-3f;
 800245a:	eddf 6a03 	vldr	s13, [pc, #12]	; 8002468 <PID_Update+0xe4>
 800245e:	e7b5      	b.n	80023cc <PID_Update+0x48>
 8002460:	358637bd 	.word	0x358637bd
 8002464:	48f42400 	.word	0x48f42400
 8002468:	3a83126f 	.word	0x3a83126f

0800246c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800246c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <HAL_MspInit+0x38>)
 8002470:	2100      	movs	r1, #0
 8002472:	9100      	str	r1, [sp, #0]
 8002474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800247a:	645a      	str	r2, [r3, #68]	; 0x44
 800247c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800247e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002482:	9200      	str	r2, [sp, #0]
 8002484:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002486:	9101      	str	r1, [sp, #4]
 8002488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800248a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800248e:	641a      	str	r2, [r3, #64]	; 0x40
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800249a:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800249c:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800249e:	f000 bd29 	b.w	8002ef4 <HAL_NVIC_SetPriorityGrouping>
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800

080024a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024a8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80024aa:	6802      	ldr	r2, [r0, #0]
 80024ac:	4b38      	ldr	r3, [pc, #224]	; (8002590 <HAL_ADC_MspInit+0xe8>)
{
 80024ae:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80024b2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80024b8:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80024bc:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 80024be:	d001      	beq.n	80024c4 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024c0:	b00a      	add	sp, #40	; 0x28
 80024c2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024c4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80024c8:	9400      	str	r4, [sp, #0]
 80024ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 80024cc:	4e31      	ldr	r6, [pc, #196]	; (8002594 <HAL_ADC_MspInit+0xec>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d2:	645a      	str	r2, [r3, #68]	; 0x44
 80024d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024d6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80024da:	9200      	str	r2, [sp, #0]
 80024dc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024de:	9401      	str	r4, [sp, #4]
 80024e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e2:	f042 0204 	orr.w	r2, r2, #4
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
 80024e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ea:	f002 0204 	and.w	r2, r2, #4
 80024ee:	9201      	str	r2, [sp, #4]
 80024f0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	9402      	str	r4, [sp, #8]
 80024f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
 80024fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024fe:	f002 0201 	and.w	r2, r2, #1
 8002502:	9202      	str	r2, [sp, #8]
 8002504:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002506:	9403      	str	r4, [sp, #12]
 8002508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800250a:	f042 0202 	orr.w	r2, r2, #2
 800250e:	631a      	str	r2, [r3, #48]	; 0x30
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800251a:	223f      	movs	r2, #63	; 0x3f
 800251c:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251e:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002520:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002522:	a904      	add	r1, sp, #16
 8002524:	481c      	ldr	r0, [pc, #112]	; (8002598 <HAL_ADC_MspInit+0xf0>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002526:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800252a:	f000 ff1f 	bl	800336c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800252e:	2211      	movs	r2, #17
 8002530:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002532:	481a      	ldr	r0, [pc, #104]	; (800259c <HAL_ADC_MspInit+0xf4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8002538:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253c:	f000 ff16 	bl	800336c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002540:	2202      	movs	r2, #2
 8002542:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002544:	4816      	ldr	r0, [pc, #88]	; (80025a0 <HAL_ADC_MspInit+0xf8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002548:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800254a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254e:	f000 ff0d 	bl	800336c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_ADC_MspInit+0xfc>)
 8002554:	6033      	str	r3, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002556:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800255a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800255e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002562:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002566:	6130      	str	r0, [r6, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002568:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800256a:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800256e:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002572:	e9c6 1205 	strd	r1, r2, [r6, #20]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002576:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002578:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800257a:	f000 fd2f 	bl	8002fdc <HAL_DMA_Init>
 800257e:	b918      	cbnz	r0, 8002588 <HAL_ADC_MspInit+0xe0>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002580:	63ae      	str	r6, [r5, #56]	; 0x38
 8002582:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8002584:	b00a      	add	sp, #40	; 0x28
 8002586:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002588:	f7ff feea 	bl	8002360 <Error_Handler>
 800258c:	e7f8      	b.n	8002580 <HAL_ADC_MspInit+0xd8>
 800258e:	bf00      	nop
 8002590:	40012000 	.word	0x40012000
 8002594:	2000433c 	.word	0x2000433c
 8002598:	40020800 	.word	0x40020800
 800259c:	40020000 	.word	0x40020000
 80025a0:	40020400 	.word	0x40020400
 80025a4:	40026410 	.word	0x40026410

080025a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025a8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 80025aa:	6801      	ldr	r1, [r0, #0]
 80025ac:	4a18      	ldr	r2, [pc, #96]	; (8002610 <HAL_SPI_MspInit+0x68>)
{
 80025ae:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 80025b2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80025b8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80025bc:	9306      	str	r3, [sp, #24]
  if(hspi->Instance==SPI1)
 80025be:	d001      	beq.n	80025c4 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025c0:	b009      	add	sp, #36	; 0x24
 80025c2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025c4:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025cc:	4811      	ldr	r0, [pc, #68]	; (8002614 <HAL_SPI_MspInit+0x6c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025ce:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80025d2:	6451      	str	r1, [r2, #68]	; 0x44
 80025d4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80025d6:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 80025da:	9100      	str	r1, [sp, #0]
 80025dc:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025de:	9301      	str	r3, [sp, #4]
 80025e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6313      	str	r3, [r2, #48]	; 0x30
 80025e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025f0:	2305      	movs	r3, #5
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025f4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025f6:	2200      	movs	r2, #0
 80025f8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fa:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025fc:	24e0      	movs	r4, #224	; 0xe0
 80025fe:	2502      	movs	r5, #2
 8002600:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002604:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002608:	f000 feb0 	bl	800336c <HAL_GPIO_Init>
}
 800260c:	b009      	add	sp, #36	; 0x24
 800260e:	bd30      	pop	{r4, r5, pc}
 8002610:	40013000 	.word	0x40013000
 8002614:	40020000 	.word	0x40020000

08002618 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8002618:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <HAL_TIM_Base_MspInit+0x2c>)
 800261a:	6802      	ldr	r2, [r0, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d000      	beq.n	8002622 <HAL_TIM_Base_MspInit+0xa>
 8002620:	4770      	bx	lr
{
 8002622:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002624:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8002628:	2200      	movs	r2, #0
 800262a:	9201      	str	r2, [sp, #4]
 800262c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	645a      	str	r2, [r3, #68]	; 0x44
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800263e:	b002      	add	sp, #8
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40010000 	.word	0x40010000

08002648 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8002648:	6803      	ldr	r3, [r0, #0]
 800264a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800264e:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM2)
 8002650:	d012      	beq.n	8002678 <HAL_TIM_PWM_MspInit+0x30>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 8002652:	4a11      	ldr	r2, [pc, #68]	; (8002698 <HAL_TIM_PWM_MspInit+0x50>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d001      	beq.n	800265c <HAL_TIM_PWM_MspInit+0x14>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002658:	b002      	add	sp, #8
 800265a:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <HAL_TIM_PWM_MspInit+0x54>)
 800265e:	2200      	movs	r2, #0
 8002660:	9201      	str	r2, [sp, #4]
 8002662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002664:	f042 0202 	orr.w	r2, r2, #2
 8002668:	641a      	str	r2, [r3, #64]	; 0x40
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	9b01      	ldr	r3, [sp, #4]
}
 8002674:	b002      	add	sp, #8
 8002676:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002678:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800267c:	2200      	movs	r2, #0
 800267e:	9200      	str	r2, [sp, #0]
 8002680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	9b00      	ldr	r3, [sp, #0]
}
 8002692:	b002      	add	sp, #8
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40000400 	.word	0x40000400
 800269c:	40023800 	.word	0x40023800

080026a0 <HAL_TIM_OC_MspInit>:
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
  if(htim_oc->Instance==TIM5)
 80026a0:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <HAL_TIM_OC_MspInit+0x2c>)
 80026a2:	6802      	ldr	r2, [r0, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d000      	beq.n	80026aa <HAL_TIM_OC_MspInit+0xa>
 80026a8:	4770      	bx	lr
{
 80026aa:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80026ac:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
 80026b0:	2200      	movs	r2, #0
 80026b2:	9201      	str	r2, [sp, #4]
 80026b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026b6:	f042 0208 	orr.w	r2, r2, #8
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80026c6:	b002      	add	sp, #8
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40000c00 	.word	0x40000c00

080026d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026d0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80026d2:	6802      	ldr	r2, [r0, #0]
 80026d4:	4939      	ldr	r1, [pc, #228]	; (80027bc <HAL_TIM_MspPostInit+0xec>)
{
 80026d6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80026da:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80026e0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80026e4:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 80026e6:	d007      	beq.n	80026f8 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 80026e8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80026ec:	d020      	beq.n	8002730 <HAL_TIM_MspPostInit+0x60>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 80026ee:	4934      	ldr	r1, [pc, #208]	; (80027c0 <HAL_TIM_MspPostInit+0xf0>)
 80026f0:	428a      	cmp	r2, r1
 80026f2:	d050      	beq.n	8002796 <HAL_TIM_MspPostInit+0xc6>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026f4:	b00a      	add	sp, #40	; 0x28
 80026f6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f8:	4a32      	ldr	r2, [pc, #200]	; (80027c4 <HAL_TIM_MspPostInit+0xf4>)
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fe:	4832      	ldr	r0, [pc, #200]	; (80027c8 <HAL_TIM_MspPostInit+0xf8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002710:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002712:	f44f 64e0 	mov.w	r4, #1792	; 0x700
 8002716:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002718:	2301      	movs	r3, #1
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800271a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800271c:	2200      	movs	r2, #0
 800271e:	2300      	movs	r3, #0
 8002720:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002724:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002728:	f000 fe20 	bl	800336c <HAL_GPIO_Init>
}
 800272c:	b00a      	add	sp, #40	; 0x28
 800272e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002730:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002738:	4823      	ldr	r0, [pc, #140]	; (80027c8 <HAL_TIM_MspPostInit+0xf8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273a:	f041 0101 	orr.w	r1, r1, #1
 800273e:	6311      	str	r1, [r2, #48]	; 0x30
 8002740:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002742:	f001 0101 	and.w	r1, r1, #1
 8002746:	9101      	str	r1, [sp, #4]
 8002748:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800274a:	9302      	str	r3, [sp, #8]
 800274c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800274e:	f043 0302 	orr.w	r3, r3, #2
 8002752:	6313      	str	r3, [r2, #48]	; 0x30
 8002754:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	9302      	str	r3, [sp, #8]
 800275c:	9902      	ldr	r1, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 800275e:	f248 0202 	movw	r2, #32770	; 0x8002
 8002762:	2302      	movs	r3, #2
 8002764:	2400      	movs	r4, #0
 8002766:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002768:	2601      	movs	r6, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 800276c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002770:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002774:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002776:	f000 fdf9 	bl	800336c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800277a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800277e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002780:	4812      	ldr	r0, [pc, #72]	; (80027cc <HAL_TIM_MspPostInit+0xfc>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002782:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002784:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002786:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800278a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278e:	f000 fded 	bl	800336c <HAL_GPIO_Init>
}
 8002792:	b00a      	add	sp, #40	; 0x28
 8002794:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002796:	4a0b      	ldr	r2, [pc, #44]	; (80027c4 <HAL_TIM_MspPostInit+0xf4>)
 8002798:	9303      	str	r3, [sp, #12]
 800279a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800279c:	480c      	ldr	r0, [pc, #48]	; (80027d0 <HAL_TIM_MspPostInit+0x100>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800279e:	f043 0304 	orr.w	r3, r3, #4
 80027a2:	6313      	str	r3, [r2, #48]	; 0x30
 80027a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	9303      	str	r3, [sp, #12]
 80027ac:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ae:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80027b0:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80027b4:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027b6:	2302      	movs	r3, #2
 80027b8:	e7af      	b.n	800271a <HAL_TIM_MspPostInit+0x4a>
 80027ba:	bf00      	nop
 80027bc:	40010000 	.word	0x40010000
 80027c0:	40000400 	.word	0x40000400
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40020000 	.word	0x40020000
 80027cc:	40020400 	.word	0x40020400
 80027d0:	40020800 	.word	0x40020800

080027d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80027d6:	6801      	ldr	r1, [r0, #0]
 80027d8:	4a18      	ldr	r2, [pc, #96]	; (800283c <HAL_UART_MspInit+0x68>)
{
 80027da:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 80027de:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80027e4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80027e8:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 80027ea:	d001      	beq.n	80027f0 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027ec:	b009      	add	sp, #36	; 0x24
 80027ee:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80027f0:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f8:	4811      	ldr	r0, [pc, #68]	; (8002840 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80027fa:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80027fe:	6411      	str	r1, [r2, #64]	; 0x40
 8002800:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002802:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 8002806:	9100      	str	r1, [sp, #0]
 8002808:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6313      	str	r3, [r2, #48]	; 0x30
 8002814:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800281c:	2307      	movs	r3, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002820:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002822:	2200      	movs	r2, #0
 8002824:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002826:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002828:	2404      	movs	r4, #4
 800282a:	2512      	movs	r5, #18
 800282c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002830:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002834:	f000 fd9a 	bl	800336c <HAL_GPIO_Init>
}
 8002838:	b009      	add	sp, #36	; 0x24
 800283a:	bd30      	pop	{r4, r5, pc}
 800283c:	40004400 	.word	0x40004400
 8002840:	40020000 	.word	0x40020000

08002844 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002844:	e7fe      	b.n	8002844 <NMI_Handler>
 8002846:	bf00      	nop

08002848 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002848:	e7fe      	b.n	8002848 <HardFault_Handler>
 800284a:	bf00      	nop

0800284c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800284c:	e7fe      	b.n	800284c <MemManage_Handler>
 800284e:	bf00      	nop

08002850 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002850:	e7fe      	b.n	8002850 <BusFault_Handler>
 8002852:	bf00      	nop

08002854 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002854:	e7fe      	b.n	8002854 <UsageFault_Handler>
 8002856:	bf00      	nop

08002858 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop

0800285c <DebugMon_Handler>:
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop

08002860 <PendSV_Handler>:
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop

08002864 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002864:	f000 b8dc 	b.w	8002a20 <HAL_IncTick>

08002868 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002868:	4801      	ldr	r0, [pc, #4]	; (8002870 <DMA2_Stream0_IRQHandler+0x8>)
 800286a:	f000 bc8f 	b.w	800318c <HAL_DMA_IRQHandler>
 800286e:	bf00      	nop
 8002870:	2000433c 	.word	0x2000433c

08002874 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002874:	2001      	movs	r0, #1
 8002876:	4770      	bx	lr

08002878 <_kill>:

int _kill(int pid, int sig)
{
 8002878:	b508      	push	{r3, lr}
	errno = EINVAL;
 800287a:	f002 fbeb 	bl	8005054 <__errno>
 800287e:	2316      	movs	r3, #22
 8002880:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002886:	bd08      	pop	{r3, pc}

08002888 <_exit>:

void _exit (int status)
{
 8002888:	b508      	push	{r3, lr}
	errno = EINVAL;
 800288a:	f002 fbe3 	bl	8005054 <__errno>
 800288e:	2316      	movs	r3, #22
 8002890:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002892:	e7fe      	b.n	8002892 <_exit+0xa>

08002894 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002894:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002896:	1e16      	subs	r6, r2, #0
 8002898:	dd07      	ble.n	80028aa <_read+0x16>
 800289a:	460c      	mov	r4, r1
 800289c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800289e:	f3af 8000 	nop.w
 80028a2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a6:	42a5      	cmp	r5, r4
 80028a8:	d1f9      	bne.n	800289e <_read+0xa>
	}

return len;
}
 80028aa:	4630      	mov	r0, r6
 80028ac:	bd70      	pop	{r4, r5, r6, pc}
 80028ae:	bf00      	nop

080028b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028b0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b2:	1e16      	subs	r6, r2, #0
 80028b4:	dd07      	ble.n	80028c6 <_write+0x16>
 80028b6:	460c      	mov	r4, r1
 80028b8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80028ba:	f814 0b01 	ldrb.w	r0, [r4], #1
 80028be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c2:	42ac      	cmp	r4, r5
 80028c4:	d1f9      	bne.n	80028ba <_write+0xa>
	}
	return len;
}
 80028c6:	4630      	mov	r0, r6
 80028c8:	bd70      	pop	{r4, r5, r6, pc}
 80028ca:	bf00      	nop

080028cc <_close>:

int _close(int file)
{
	return -1;
}
 80028cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop

080028d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80028d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028d8:	604b      	str	r3, [r1, #4]
	return 0;
}
 80028da:	2000      	movs	r0, #0
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop

080028e0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80028e0:	2001      	movs	r0, #1
 80028e2:	4770      	bx	lr

080028e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80028e4:	2000      	movs	r0, #0
 80028e6:	4770      	bx	lr

080028e8 <_sbrk>:
			- (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80028e8:	490c      	ldr	r1, [pc, #48]	; (800291c <_sbrk+0x34>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80028ea:	4a0d      	ldr	r2, [pc, #52]	; (8002920 <_sbrk+0x38>)
	if (NULL == __sbrk_heap_end) {
 80028ec:	680b      	ldr	r3, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 80028ee:	b510      	push	{r4, lr}
	const uint32_t stack_limit = (uint32_t) &_estack
 80028f0:	4c0c      	ldr	r4, [pc, #48]	; (8002924 <_sbrk+0x3c>)
 80028f2:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 80028f4:	b12b      	cbz	r3, 8002902 <_sbrk+0x1a>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80028f6:	4418      	add	r0, r3
 80028f8:	4290      	cmp	r0, r2
 80028fa:	d807      	bhi.n	800290c <_sbrk+0x24>
		errno = ENOMEM;
		return (void*) -1;
	}

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;
 80028fc:	6008      	str	r0, [r1, #0]

	return (void*) prev_heap_end;
}
 80028fe:	4618      	mov	r0, r3
 8002900:	bd10      	pop	{r4, pc}
		__sbrk_heap_end = &_end;
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <_sbrk+0x40>)
 8002904:	600b      	str	r3, [r1, #0]
	if (__sbrk_heap_end + incr > max_heap) {
 8002906:	4418      	add	r0, r3
 8002908:	4290      	cmp	r0, r2
 800290a:	d9f7      	bls.n	80028fc <_sbrk+0x14>
		errno = ENOMEM;
 800290c:	f002 fba2 	bl	8005054 <__errno>
 8002910:	230c      	movs	r3, #12
 8002912:	6003      	str	r3, [r0, #0]
		return (void*) -1;
 8002914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd10      	pop	{r4, pc}
 800291c:	20000220 	.word	0x20000220
 8002920:	20018000 	.word	0x20018000
 8002924:	00000400 	.word	0x00000400
 8002928:	200044f8 	.word	0x200044f8

0800292c <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 800292c:	4a03      	ldr	r2, [pc, #12]	; (800293c <SystemInit+0x10>)
 800292e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002932:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002936:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800293a:	4770      	bx	lr
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <get_us>:
 *      Author: maxborglowe
 */

#include "time_utils.h"

uint32_t get_us(){
 8002940:	b508      	push	{r3, lr}
	return HAL_GetTick()*1000;
 8002942:	f000 f879 	bl	8002a38 <HAL_GetTick>
 8002946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800294a:	fb03 f000 	mul.w	r0, r3, r0
 800294e:	bd08      	pop	{r3, pc}

08002950 <Reset_Handler>:
 8002950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002988 <LoopFillZerobss+0x12>
 8002954:	480d      	ldr	r0, [pc, #52]	; (800298c <LoopFillZerobss+0x16>)
 8002956:	490e      	ldr	r1, [pc, #56]	; (8002990 <LoopFillZerobss+0x1a>)
 8002958:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <LoopFillZerobss+0x1e>)
 800295a:	2300      	movs	r3, #0
 800295c:	e002      	b.n	8002964 <LoopCopyDataInit>

0800295e <CopyDataInit>:
 800295e:	58d4      	ldr	r4, [r2, r3]
 8002960:	50c4      	str	r4, [r0, r3]
 8002962:	3304      	adds	r3, #4

08002964 <LoopCopyDataInit>:
 8002964:	18c4      	adds	r4, r0, r3
 8002966:	428c      	cmp	r4, r1
 8002968:	d3f9      	bcc.n	800295e <CopyDataInit>
 800296a:	4a0b      	ldr	r2, [pc, #44]	; (8002998 <LoopFillZerobss+0x22>)
 800296c:	4c0b      	ldr	r4, [pc, #44]	; (800299c <LoopFillZerobss+0x26>)
 800296e:	2300      	movs	r3, #0
 8002970:	e001      	b.n	8002976 <LoopFillZerobss>

08002972 <FillZerobss>:
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	3204      	adds	r2, #4

08002976 <LoopFillZerobss>:
 8002976:	42a2      	cmp	r2, r4
 8002978:	d3fb      	bcc.n	8002972 <FillZerobss>
 800297a:	f7ff ffd7 	bl	800292c <SystemInit>
 800297e:	f002 fb6f 	bl	8005060 <__libc_init_array>
 8002982:	f7ff f8a7 	bl	8001ad4 <main>
 8002986:	4770      	bx	lr
 8002988:	20018000 	.word	0x20018000
 800298c:	20000000 	.word	0x20000000
 8002990:	200001f8 	.word	0x200001f8
 8002994:	08009998 	.word	0x08009998
 8002998:	200001f8 	.word	0x200001f8
 800299c:	200044f4 	.word	0x200044f4

080029a0 <ADC_IRQHandler>:
 80029a0:	e7fe      	b.n	80029a0 <ADC_IRQHandler>
	...

080029a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a6:	4a0e      	ldr	r2, [pc, #56]	; (80029e0 <HAL_InitTick+0x3c>)
 80029a8:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_InitTick+0x40>)
 80029aa:	7812      	ldrb	r2, [r2, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
{
 80029ae:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029b4:	fbb0 f0f2 	udiv	r0, r0, r2
 80029b8:	fbb3 f0f0 	udiv	r0, r3, r0
 80029bc:	f000 faf4 	bl	8002fa8 <HAL_SYSTICK_Config>
 80029c0:	b908      	cbnz	r0, 80029c6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c2:	2d0f      	cmp	r5, #15
 80029c4:	d901      	bls.n	80029ca <HAL_InitTick+0x26>
    return HAL_ERROR;
 80029c6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80029c8:	bd38      	pop	{r3, r4, r5, pc}
 80029ca:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029cc:	4602      	mov	r2, r0
 80029ce:	4629      	mov	r1, r5
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029d4:	f000 faa2 	bl	8002f1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <HAL_InitTick+0x44>)
 80029da:	4620      	mov	r0, r4
 80029dc:	601d      	str	r5, [r3, #0]
}
 80029de:	bd38      	pop	{r3, r4, r5, pc}
 80029e0:	2000001c 	.word	0x2000001c
 80029e4:	20000018 	.word	0x20000018
 80029e8:	20000020 	.word	0x20000020

080029ec <HAL_Init>:
{
 80029ec:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_Init+0x30>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029fe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a06:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a08:	2003      	movs	r0, #3
 8002a0a:	f000 fa73 	bl	8002ef4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f7ff ffc8 	bl	80029a4 <HAL_InitTick>
  HAL_MspInit();
 8002a14:	f7ff fd2a 	bl	800246c <HAL_MspInit>
}
 8002a18:	2000      	movs	r0, #0
 8002a1a:	bd08      	pop	{r3, pc}
 8002a1c:	40023c00 	.word	0x40023c00

08002a20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002a20:	4a03      	ldr	r2, [pc, #12]	; (8002a30 <HAL_IncTick+0x10>)
 8002a22:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <HAL_IncTick+0x14>)
 8002a24:	6811      	ldr	r1, [r2, #0]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	440b      	add	r3, r1
 8002a2a:	6013      	str	r3, [r2, #0]
}
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	200044e0 	.word	0x200044e0
 8002a34:	2000001c 	.word	0x2000001c

08002a38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a38:	4b01      	ldr	r3, [pc, #4]	; (8002a40 <HAL_GetTick+0x8>)
 8002a3a:	6818      	ldr	r0, [r3, #0]
}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	200044e0 	.word	0x200044e0

08002a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a44:	b538      	push	{r3, r4, r5, lr}
 8002a46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a48:	f7ff fff6 	bl	8002a38 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a4c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002a4e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002a50:	d002      	beq.n	8002a58 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <HAL_Delay+0x20>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a58:	f7ff ffee 	bl	8002a38 <HAL_GetTick>
 8002a5c:	1b43      	subs	r3, r0, r5
 8002a5e:	42a3      	cmp	r3, r4
 8002a60:	d3fa      	bcc.n	8002a58 <HAL_Delay+0x14>
  {
  }
}
 8002a62:	bd38      	pop	{r3, r4, r5, pc}
 8002a64:	2000001c 	.word	0x2000001c

08002a68 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	f000 80a0 	beq.w	8002bae <HAL_ADC_Init+0x146>
{
 8002a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a70:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002a72:	4604      	mov	r4, r0
 8002a74:	b13d      	cbz	r5, 8002a86 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a78:	06db      	lsls	r3, r3, #27
 8002a7a:	d50c      	bpl.n	8002a96 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8002a82:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8002a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8002a86:	f7ff fd0f 	bl	80024a8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002a8a:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8002a8e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a92:	06db      	lsls	r3, r3, #27
 8002a94:	d4f2      	bmi.n	8002a7c <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8002a96:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a98:	4948      	ldr	r1, [pc, #288]	; (8002bbc <HAL_ADC_Init+0x154>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a9a:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a9c:	4d48      	ldr	r5, [pc, #288]	; (8002bc0 <HAL_ADC_Init+0x158>)
    ADC_STATE_CLR_SET(hadc->State,
 8002a9e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002aa2:	f022 0202 	bic.w	r2, r2, #2
 8002aa6:	f042 0202 	orr.w	r2, r2, #2
 8002aaa:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002aac:	684a      	ldr	r2, [r1, #4]
 8002aae:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002ab2:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ab4:	684a      	ldr	r2, [r1, #4]
 8002ab6:	6860      	ldr	r0, [r4, #4]
 8002ab8:	4302      	orrs	r2, r0
 8002aba:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002abc:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002abe:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ac0:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ac2:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ac4:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8002ac8:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ad0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ad2:	6858      	ldr	r0, [r3, #4]
 8002ad4:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8002ad8:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ada:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002adc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ade:	4339      	orrs	r1, r7
 8002ae0:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ae2:	6899      	ldr	r1, [r3, #8]
 8002ae4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002ae8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002aea:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aec:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002aee:	ea42 0206 	orr.w	r2, r2, r6
 8002af2:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002af4:	d052      	beq.n	8002b9c <HAL_ADC_Init+0x134>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002af6:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002af8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002afa:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8002afe:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	4310      	orrs	r0, r2
 8002b04:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b06:	6899      	ldr	r1, [r3, #8]
 8002b08:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8002b0c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	432a      	orrs	r2, r5
 8002b12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	f022 0202 	bic.w	r2, r2, #2
 8002b1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	7e21      	ldrb	r1, [r4, #24]
 8002b20:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002b24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b26:	f894 2020 	ldrb.w	r2, [r4, #32]
 8002b2a:	2a00      	cmp	r2, #0
 8002b2c:	d041      	beq.n	8002bb2 <HAL_ADC_Init+0x14a>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b2e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b30:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	3901      	subs	r1, #1
 8002b44:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002b48:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b4c:	69e0      	ldr	r0, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b4e:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b50:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b58:	3801      	subs	r0, #1
 8002b5a:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
 8002b5e:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b60:	6899      	ldr	r1, [r3, #8]
 8002b62:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8002b66:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b68:	6899      	ldr	r1, [r3, #8]
 8002b6a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8002b6e:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8002b72:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b74:	6899      	ldr	r1, [r3, #8]
 8002b76:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002b7a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b7c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002b7e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b80:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8002b84:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002b86:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002b88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b8a:	f023 0303 	bic.w	r3, r3, #3
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002b94:	2300      	movs	r3, #0
 8002b96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ba2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	e7b2      	b.n	8002b14 <HAL_ADC_Init+0xac>
    return HAL_ERROR;
 8002bae:	2001      	movs	r0, #1
}
 8002bb0:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	e7c6      	b.n	8002b4a <HAL_ADC_Init+0xe2>
 8002bbc:	40012300 	.word	0x40012300
 8002bc0:	0f000001 	.word	0x0f000001

08002bc4 <HAL_ADC_Start_DMA>:
{
 8002bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc6:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8002bc8:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
{
 8002bcc:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8002bce:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8002bd0:	2801      	cmp	r0, #1
  __IO uint32_t counter = 0U;
 8002bd2:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 8002bd4:	f000 8088 	beq.w	8002ce8 <HAL_ADC_Start_DMA+0x124>
 8002bd8:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bda:	682e      	ldr	r6, [r5, #0]
  __HAL_LOCK(hadc);
 8002bdc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002be0:	68b3      	ldr	r3, [r6, #8]
 8002be2:	07dc      	lsls	r4, r3, #31
 8002be4:	d414      	bmi.n	8002c10 <HAL_ADC_Start_DMA+0x4c>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002be6:	4b42      	ldr	r3, [pc, #264]	; (8002cf0 <HAL_ADC_Start_DMA+0x12c>)
 8002be8:	4c42      	ldr	r4, [pc, #264]	; (8002cf4 <HAL_ADC_Start_DMA+0x130>)
 8002bea:	6818      	ldr	r0, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8002bec:	68b3      	ldr	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bee:	fba4 4000 	umull	r4, r0, r4, r0
 8002bf2:	0c80      	lsrs	r0, r0, #18
    __HAL_ADC_ENABLE(hadc);
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bf8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8002bfc:	60b3      	str	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bfe:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8002c00:	9b01      	ldr	r3, [sp, #4]
 8002c02:	b12b      	cbz	r3, 8002c10 <HAL_ADC_Start_DMA+0x4c>
      counter--;
 8002c04:	9c01      	ldr	r4, [sp, #4]
 8002c06:	3c01      	subs	r4, #1
 8002c08:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8002c0a:	9801      	ldr	r0, [sp, #4]
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	d1f9      	bne.n	8002c04 <HAL_ADC_Start_DMA+0x40>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002c10:	68b3      	ldr	r3, [r6, #8]
 8002c12:	05d8      	lsls	r0, r3, #23
 8002c14:	d503      	bpl.n	8002c1e <HAL_ADC_Start_DMA+0x5a>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c16:	68b3      	ldr	r3, [r6, #8]
 8002c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c1c:	60b3      	str	r3, [r6, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c1e:	68b0      	ldr	r0, [r6, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8002c20:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c22:	f010 0001 	ands.w	r0, r0, #1
 8002c26:	d043      	beq.n	8002cb0 <HAL_ADC_Start_DMA+0xec>
    ADC_STATE_CLR_SET(hadc->State,
 8002c28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c2c:	f023 0301 	bic.w	r3, r3, #1
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c36:	6873      	ldr	r3, [r6, #4]
 8002c38:	055b      	lsls	r3, r3, #21
 8002c3a:	d505      	bpl.n	8002c48 <HAL_ADC_Start_DMA+0x84>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c3c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002c3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c46:	642b      	str	r3, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c48:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c4a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8002c4c:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8002d08 <HAL_ADC_Start_DMA+0x144>
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c50:	4f29      	ldr	r7, [pc, #164]	; (8002cf8 <HAL_ADC_Start_DMA+0x134>)
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c52:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c56:	bf1c      	itt	ne
 8002c58:	6c6b      	ldrne	r3, [r5, #68]	; 0x44
 8002c5a:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002c5e:	646b      	str	r3, [r5, #68]	; 0x44
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c60:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <HAL_ADC_Start_DMA+0x138>)
    __HAL_UNLOCK(hadc);   
 8002c62:	2400      	movs	r4, #0
 8002c64:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c68:	e9c0 c30f 	strd	ip, r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c6c:	f06f 0322 	mvn.w	r3, #34	; 0x22
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c70:	64c7      	str	r7, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c72:	6033      	str	r3, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c74:	6873      	ldr	r3, [r6, #4]
 8002c76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c7a:	6073      	str	r3, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c7c:	68b7      	ldr	r7, [r6, #8]
 8002c7e:	f447 7780 	orr.w	r7, r7, #256	; 0x100
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c82:	4613      	mov	r3, r2
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c84:	60b7      	str	r7, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c86:	460a      	mov	r2, r1
 8002c88:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8002c8c:	f000 fa40 	bl	8003110 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_ADC_Start_DMA+0x13c>)
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	f012 021f 	ands.w	r2, r2, #31
 8002c98:	d113      	bne.n	8002cc2 <HAL_ADC_Start_DMA+0xfe>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c9a:	6829      	ldr	r1, [r5, #0]
 8002c9c:	6888      	ldr	r0, [r1, #8]
 8002c9e:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8002ca2:	d115      	bne.n	8002cd0 <HAL_ADC_Start_DMA+0x10c>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ca4:	688b      	ldr	r3, [r1, #8]
 8002ca6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002caa:	608b      	str	r3, [r1, #8]
}
 8002cac:	b003      	add	sp, #12
 8002cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb0:	f043 0310 	orr.w	r3, r3, #16
 8002cb4:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	646b      	str	r3, [r5, #68]	; 0x44
}
 8002cbe:	b003      	add	sp, #12
 8002cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cc2:	682b      	ldr	r3, [r5, #0]
 8002cc4:	4a0f      	ldr	r2, [pc, #60]	; (8002d04 <HAL_ADC_Start_DMA+0x140>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d005      	beq.n	8002cd6 <HAL_ADC_Start_DMA+0x112>
  return HAL_OK;
 8002cca:	4620      	mov	r0, r4
}
 8002ccc:	b003      	add	sp, #12
 8002cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8002cd0:	4610      	mov	r0, r2
}
 8002cd2:	b003      	add	sp, #12
 8002cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cd6:	6898      	ldr	r0, [r3, #8]
 8002cd8:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8002cdc:	d1f5      	bne.n	8002cca <HAL_ADC_Start_DMA+0x106>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	e7ea      	b.n	8002cbe <HAL_ADC_Start_DMA+0xfa>
  __HAL_LOCK(hadc);
 8002ce8:	2002      	movs	r0, #2
}
 8002cea:	b003      	add	sp, #12
 8002cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000018 	.word	0x20000018
 8002cf4:	431bde83 	.word	0x431bde83
 8002cf8:	08002d21 	.word	0x08002d21
 8002cfc:	08002d11 	.word	0x08002d11
 8002d00:	40012300 	.word	0x40012300
 8002d04:	40012000 	.word	0x40012000
 8002d08:	08002d39 	.word	0x08002d39

08002d0c <HAL_ADC_ConvHalfCpltCallback>:
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop

08002d10 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d10:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d12:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002d14:	f7ff fffa 	bl	8002d0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d18:	bd08      	pop	{r3, pc}
 8002d1a:	bf00      	nop

08002d1c <HAL_ADC_ErrorCallback>:
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop

08002d20 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d20:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002d22:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d24:	2340      	movs	r3, #64	; 0x40
 8002d26:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d28:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002d2a:	f043 0304 	orr.w	r3, r3, #4
 8002d2e:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d30:	f7ff fff4 	bl	8002d1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d34:	bd08      	pop	{r3, pc}
 8002d36:	bf00      	nop

08002d38 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d38:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d3c:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8002d40:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d44:	d123      	bne.n	8002d8e <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d4a:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d4e:	688a      	ldr	r2, [r1, #8]
 8002d50:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002d54:	d117      	bne.n	8002d86 <ADC_DMAConvCplt+0x4e>
 8002d56:	7e1a      	ldrb	r2, [r3, #24]
 8002d58:	b9aa      	cbnz	r2, 8002d86 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d5a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d5c:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8002d60:	d002      	beq.n	8002d68 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d62:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d64:	0550      	lsls	r0, r2, #21
 8002d66:	d40e      	bmi.n	8002d86 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d68:	684a      	ldr	r2, [r1, #4]
 8002d6a:	f022 0220 	bic.w	r2, r2, #32
 8002d6e:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7a:	04d1      	lsls	r1, r2, #19
 8002d7c:	d403      	bmi.n	8002d86 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d80:	f042 0201 	orr.w	r2, r2, #1
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fae4 	bl	8002354 <HAL_ADC_ConvCpltCallback>
}
 8002d8c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d8e:	06d2      	lsls	r2, r2, #27
 8002d90:	d404      	bmi.n	8002d9c <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9a:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ffbd 	bl	8002d1c <HAL_ADC_ErrorCallback>
}
 8002da2:	bd10      	pop	{r4, pc}

08002da4 <HAL_ADC_ConfigChannel>:
{
 8002da4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 8002da6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002daa:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8002dac:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002dae:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8002db0:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002db2:	f000 8094 	beq.w	8002ede <HAL_ADC_ConfigChannel+0x13a>
 8002db6:	2301      	movs	r3, #1
 8002db8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dbc:	680d      	ldr	r5, [r1, #0]
 8002dbe:	2d09      	cmp	r5, #9
 8002dc0:	d829      	bhi.n	8002e16 <HAL_ADC_ConfigChannel+0x72>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dc2:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dc4:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dc6:	6922      	ldr	r2, [r4, #16]
 8002dc8:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8002dcc:	2607      	movs	r6, #7
 8002dce:	40be      	lsls	r6, r7
 8002dd0:	ea22 0206 	bic.w	r2, r2, r6
 8002dd4:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dd6:	6922      	ldr	r2, [r4, #16]
 8002dd8:	40bb      	lsls	r3, r7
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7U)
 8002dde:	684b      	ldr	r3, [r1, #4]
 8002de0:	2b06      	cmp	r3, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002de2:	462e      	mov	r6, r5
  if (sConfig->Rank < 7U)
 8002de4:	d82c      	bhi.n	8002e40 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002de6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002dea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002dec:	3b05      	subs	r3, #5
 8002dee:	211f      	movs	r1, #31
 8002df0:	4099      	lsls	r1, r3
 8002df2:	ea22 0201 	bic.w	r2, r2, r1
 8002df6:	6362      	str	r2, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002df8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002dfa:	fa06 f303 	lsl.w	r3, r6, r3
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e02:	4b39      	ldr	r3, [pc, #228]	; (8002ee8 <HAL_ADC_ConfigChannel+0x144>)
 8002e04:	429c      	cmp	r4, r3
 8002e06:	d02f      	beq.n	8002e68 <HAL_ADC_ConfigChannel+0xc4>
  __HAL_UNLOCK(hadc);
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002e0e:	4618      	mov	r0, r3
}
 8002e10:	b002      	add	sp, #8
 8002e12:	bcf0      	pop	{r4, r5, r6, r7}
 8002e14:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e16:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e18:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e1a:	68e7      	ldr	r7, [r4, #12]
 8002e1c:	b2ae      	uxth	r6, r5
 8002e1e:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8002e22:	3a1e      	subs	r2, #30
 8002e24:	f04f 0c07 	mov.w	ip, #7
 8002e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8002e2c:	ea27 070c 	bic.w	r7, r7, ip
 8002e30:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e32:	68e7      	ldr	r7, [r4, #12]
 8002e34:	4093      	lsls	r3, r2
 8002e36:	433b      	orrs	r3, r7
 8002e38:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8002e3a:	684b      	ldr	r3, [r1, #4]
 8002e3c:	2b06      	cmp	r3, #6
 8002e3e:	d9d2      	bls.n	8002de6 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8002e40:	2b0c      	cmp	r3, #12
 8002e42:	d837      	bhi.n	8002eb4 <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e48:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8002e4c:	221f      	movs	r2, #31
 8002e4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e50:	408a      	lsls	r2, r1
 8002e52:	ea23 0302 	bic.w	r3, r3, r2
 8002e56:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e5a:	fa06 f101 	lsl.w	r1, r6, r1
 8002e5e:	4319      	orrs	r1, r3
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e60:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <HAL_ADC_ConfigChannel+0x144>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e62:	6321      	str	r1, [r4, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e64:	429c      	cmp	r4, r3
 8002e66:	d1cf      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x64>
 8002e68:	2d12      	cmp	r5, #18
 8002e6a:	d032      	beq.n	8002ed2 <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e6c:	f1a5 0310 	sub.w	r3, r5, #16
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d8c9      	bhi.n	8002e08 <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e74:	4a1d      	ldr	r2, [pc, #116]	; (8002eec <HAL_ADC_ConfigChannel+0x148>)
 8002e76:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e78:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e7e:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e80:	d1c2      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x64>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e82:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_ADC_ConfigChannel+0x14c>)
 8002e84:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8002e8e:	f202 3283 	addw	r2, r2, #899	; 0x383
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	0c9b      	lsrs	r3, r3, #18
 8002e98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002ea0:	9b01      	ldr	r3, [sp, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0b0      	beq.n	8002e08 <HAL_ADC_ConfigChannel+0x64>
        counter--;
 8002ea6:	9b01      	ldr	r3, [sp, #4]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002eac:	9b01      	ldr	r3, [sp, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f9      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x102>
 8002eb2:	e7a9      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002eb4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002eb8:	3a41      	subs	r2, #65	; 0x41
 8002eba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ebc:	211f      	movs	r1, #31
 8002ebe:	4091      	lsls	r1, r2
 8002ec0:	ea23 0301 	bic.w	r3, r3, r1
 8002ec4:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ec6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ec8:	fa06 f102 	lsl.w	r1, r6, r2
 8002ecc:	4319      	orrs	r1, r3
 8002ece:	62e1      	str	r1, [r4, #44]	; 0x2c
 8002ed0:	e797      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x5e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ed2:	4a06      	ldr	r2, [pc, #24]	; (8002eec <HAL_ADC_ConfigChannel+0x148>)
 8002ed4:	6853      	ldr	r3, [r2, #4]
 8002ed6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002eda:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002edc:	e794      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x64>
  __HAL_LOCK(hadc);
 8002ede:	2002      	movs	r0, #2
}
 8002ee0:	b002      	add	sp, #8
 8002ee2:	bcf0      	pop	{r4, r5, r6, r7}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40012000 	.word	0x40012000
 8002eec:	40012300 	.word	0x40012300
 8002ef0:	20000018 	.word	0x20000018

08002ef4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef4:	4908      	ldr	r1, [pc, #32]	; (8002f18 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8002ef6:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef8:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002efa:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efc:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8002f00:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f02:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002f10:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8002f14:	60cb      	str	r3, [r1, #12]
 8002f16:	4770      	bx	lr
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_NVIC_SetPriority+0x68>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f24:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f26:	f1c3 0507 	rsb	r5, r3, #7
 8002f2a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f30:	bf28      	it	cs
 8002f32:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f34:	2c06      	cmp	r4, #6
 8002f36:	d919      	bls.n	8002f6c <HAL_NVIC_SetPriority+0x50>
 8002f38:	3b03      	subs	r3, #3
 8002f3a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002f3e:	409c      	lsls	r4, r3
 8002f40:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002f48:	40ac      	lsls	r4, r5
 8002f4a:	ea21 0104 	bic.w	r1, r1, r4
 8002f4e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002f50:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f52:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002f56:	db0c      	blt.n	8002f72 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f58:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002f5c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002f60:	0109      	lsls	r1, r1, #4
 8002f62:	b2c9      	uxtb	r1, r1
 8002f64:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002f68:	bc30      	pop	{r4, r5}
 8002f6a:	4770      	bx	lr
 8002f6c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f6e:	4613      	mov	r3, r2
 8002f70:	e7e8      	b.n	8002f44 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_NVIC_SetPriority+0x6c>)
 8002f74:	f000 000f 	and.w	r0, r0, #15
 8002f78:	0109      	lsls	r1, r1, #4
 8002f7a:	4403      	add	r3, r0
 8002f7c:	b2c9      	uxtb	r1, r1
 8002f7e:	7619      	strb	r1, [r3, #24]
 8002f80:	bc30      	pop	{r4, r5}
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00
 8002f88:	e000ecfc 	.word	0xe000ecfc

08002f8c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	db07      	blt.n	8002fa0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f90:	f000 011f 	and.w	r1, r0, #31
 8002f94:	4a03      	ldr	r2, [pc, #12]	; (8002fa4 <HAL_NVIC_EnableIRQ+0x18>)
 8002f96:	0940      	lsrs	r0, r0, #5
 8002f98:	2301      	movs	r3, #1
 8002f9a:	408b      	lsls	r3, r1
 8002f9c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	e000e100 	.word	0xe000e100

08002fa8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fa8:	3801      	subs	r0, #1
 8002faa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002fae:	d20e      	bcs.n	8002fce <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fb2:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb4:	4c08      	ldr	r4, [pc, #32]	; (8002fd8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fb6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb8:	20f0      	movs	r0, #240	; 0xf0
 8002fba:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fbe:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fc0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fc4:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8002fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fca:	6019      	str	r1, [r3, #0]
 8002fcc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002fce:	2001      	movs	r0, #1
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	e000e010 	.word	0xe000e010
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fde:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff fd2a 	bl	8002a38 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fe4:	2c00      	cmp	r4, #0
 8002fe6:	d054      	beq.n	8003092 <HAL_DMA_Init+0xb6>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fe8:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002fea:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fec:	2102      	movs	r1, #2
 8002fee:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8002ff2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	4605      	mov	r5, r0
 8002ffe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003000:	e005      	b.n	800300e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003002:	f7ff fd19 	bl	8002a38 <HAL_GetTick>
 8003006:	1b43      	subs	r3, r0, r5
 8003008:	2b05      	cmp	r3, #5
 800300a:	d83b      	bhi.n	8003084 <HAL_DMA_Init+0xa8>
 800300c:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	07d1      	lsls	r1, r2, #31
 8003012:	d4f6      	bmi.n	8003002 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003014:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003018:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800301c:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800301e:	6961      	ldr	r1, [r4, #20]
  tmp = hdma->Instance->CR;
 8003020:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003022:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003024:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003028:	4302      	orrs	r2, r0
 800302a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800302c:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800302e:	4935      	ldr	r1, [pc, #212]	; (8003104 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003030:	4332      	orrs	r2, r6
 8003032:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003034:	4302      	orrs	r2, r0

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003036:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003038:	4039      	ands	r1, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800303a:	2804      	cmp	r0, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800303c:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003040:	d029      	beq.n	8003096 <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003042:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003044:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003046:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800304a:	4310      	orrs	r0, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800304c:	b2da      	uxtb	r2, r3
 800304e:	492e      	ldr	r1, [pc, #184]	; (8003108 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8003050:	6158      	str	r0, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003052:	3a10      	subs	r2, #16
 8003054:	fba1 0102 	umull	r0, r1, r1, r2
 8003058:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800305a:	482c      	ldr	r0, [pc, #176]	; (800310c <HAL_DMA_Init+0x130>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800305c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003060:	5c41      	ldrb	r1, [r0, r1]
 8003062:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003064:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8003068:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800306a:	bf88      	it	hi
 800306c:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800306e:	223f      	movs	r2, #63	; 0x3f
 8003070:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 8003072:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003074:	2100      	movs	r1, #0
 8003076:	65a3      	str	r3, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003078:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800307a:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800307c:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 8003080:	4608      	mov	r0, r1
}
 8003082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003084:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003086:	2220      	movs	r2, #32
 8003088:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800308a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 800308e:	4618      	mov	r0, r3
}
 8003090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003092:	2001      	movs	r0, #1
}
 8003094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003096:	e9d4 500b 	ldrd	r5, r0, [r4, #44]	; 0x2c
 800309a:	4328      	orrs	r0, r5
 800309c:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 800309e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 80030a0:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 80030a2:	6958      	ldr	r0, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030a4:	f020 0007 	bic.w	r0, r0, #7
 80030a8:	4310      	orrs	r0, r2
    tmp |= hdma->Init.FIFOThreshold;
 80030aa:	f040 0004 	orr.w	r0, r0, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030ae:	2d00      	cmp	r5, #0
 80030b0:	d0cc      	beq.n	800304c <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030b2:	b17e      	cbz	r6, 80030d4 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030b4:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80030b8:	d012      	beq.n	80030e0 <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030ba:	2a02      	cmp	r2, #2
 80030bc:	d903      	bls.n	80030c6 <HAL_DMA_Init+0xea>
 80030be:	2a03      	cmp	r2, #3
 80030c0:	d1c4      	bne.n	800304c <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c2:	01ea      	lsls	r2, r5, #7
 80030c4:	d5c2      	bpl.n	800304c <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 80030c6:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030c8:	2240      	movs	r2, #64	; 0x40
 80030ca:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80030cc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80030d0:	4618      	mov	r0, r3
}
 80030d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 80030d4:	2a01      	cmp	r2, #1
 80030d6:	d011      	beq.n	80030fc <HAL_DMA_Init+0x120>
 80030d8:	f032 0202 	bics.w	r2, r2, #2
 80030dc:	d1b6      	bne.n	800304c <HAL_DMA_Init+0x70>
 80030de:	e7f0      	b.n	80030c2 <HAL_DMA_Init+0xe6>
    switch (tmp)
 80030e0:	2a03      	cmp	r2, #3
 80030e2:	d8b3      	bhi.n	800304c <HAL_DMA_Init+0x70>
 80030e4:	a101      	add	r1, pc, #4	; (adr r1, 80030ec <HAL_DMA_Init+0x110>)
 80030e6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80030ea:	bf00      	nop
 80030ec:	080030c7 	.word	0x080030c7
 80030f0:	080030c3 	.word	0x080030c3
 80030f4:	080030c7 	.word	0x080030c7
 80030f8:	080030fd 	.word	0x080030fd
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030fc:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8003100:	d1a4      	bne.n	800304c <HAL_DMA_Init+0x70>
 8003102:	e7e0      	b.n	80030c6 <HAL_DMA_Init+0xea>
 8003104:	f010803f 	.word	0xf010803f
 8003108:	aaaaaaab 	.word	0xaaaaaaab
 800310c:	08009340 	.word	0x08009340

08003110 <HAL_DMA_Start_IT>:
{
 8003110:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8003112:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003116:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8003118:	2c01      	cmp	r4, #1
 800311a:	d034      	beq.n	8003186 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 800311c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8003120:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003122:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8003124:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003128:	d005      	beq.n	8003136 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 800312a:	2300      	movs	r3, #0
 800312c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 8003130:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8003132:	2002      	movs	r0, #2
}
 8003134:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003136:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8003138:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800313a:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800313c:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003140:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003142:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003144:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003146:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800314a:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800314c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800314e:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 8003150:	bf0a      	itet	eq
 8003152:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8003154:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8003156:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003158:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 800315a:	bf18      	it	ne
 800315c:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800315e:	233f      	movs	r3, #63	; 0x3f
 8003160:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 8003162:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003164:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	f043 0316 	orr.w	r3, r3, #22
 800316c:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800316e:	b11a      	cbz	r2, 8003178 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	f043 0308 	orr.w	r3, r3, #8
 8003176:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003180:	2000      	movs	r0, #0
}
 8003182:	bcf0      	pop	{r4, r5, r6, r7}
 8003184:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8003186:	2002      	movs	r0, #2
}
 8003188:	bcf0      	pop	{r4, r5, r6, r7}
 800318a:	4770      	bx	lr

0800318c <HAL_DMA_IRQHandler>:
{
 800318c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003190:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003192:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003194:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 8003196:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003198:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800319a:	6834      	ldr	r4, [r6, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800319c:	4971      	ldr	r1, [pc, #452]	; (8003364 <HAL_DMA_IRQHandler+0x1d8>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800319e:	2208      	movs	r2, #8
 80031a0:	409a      	lsls	r2, r3
 80031a2:	4222      	tst	r2, r4
  uint32_t timeout = SystemCoreClock / 9600U;
 80031a4:	680d      	ldr	r5, [r1, #0]
{
 80031a6:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031a8:	d004      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031aa:	6801      	ldr	r1, [r0, #0]
 80031ac:	680f      	ldr	r7, [r1, #0]
 80031ae:	0778      	lsls	r0, r7, #29
 80031b0:	f100 808a 	bmi.w	80032c8 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031b4:	2201      	movs	r2, #1
 80031b6:	409a      	lsls	r2, r3
 80031b8:	4222      	tst	r2, r4
 80031ba:	d004      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031bc:	f8d8 1000 	ldr.w	r1, [r8]
 80031c0:	6949      	ldr	r1, [r1, #20]
 80031c2:	0609      	lsls	r1, r1, #24
 80031c4:	d478      	bmi.n	80032b8 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c6:	2204      	movs	r2, #4
 80031c8:	409a      	lsls	r2, r3
 80031ca:	4222      	tst	r2, r4
 80031cc:	d004      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031ce:	f8d8 1000 	ldr.w	r1, [r8]
 80031d2:	6809      	ldr	r1, [r1, #0]
 80031d4:	078f      	lsls	r7, r1, #30
 80031d6:	d467      	bmi.n	80032a8 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031d8:	2210      	movs	r2, #16
 80031da:	409a      	lsls	r2, r3
 80031dc:	4222      	tst	r2, r4
 80031de:	d004      	beq.n	80031ea <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031e0:	f8d8 1000 	ldr.w	r1, [r8]
 80031e4:	680f      	ldr	r7, [r1, #0]
 80031e6:	0738      	lsls	r0, r7, #28
 80031e8:	d449      	bmi.n	800327e <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031ea:	2220      	movs	r2, #32
 80031ec:	409a      	lsls	r2, r3
 80031ee:	4222      	tst	r2, r4
 80031f0:	d017      	beq.n	8003222 <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031f2:	f8d8 1000 	ldr.w	r1, [r8]
 80031f6:	680c      	ldr	r4, [r1, #0]
 80031f8:	06e0      	lsls	r0, r4, #27
 80031fa:	d512      	bpl.n	8003222 <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031fc:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031fe:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8003202:	2a05      	cmp	r2, #5
 8003204:	d073      	beq.n	80032ee <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003206:	680b      	ldr	r3, [r1, #0]
 8003208:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800320c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800320e:	f000 8090 	beq.w	8003332 <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003212:	0319      	lsls	r1, r3, #12
 8003214:	f140 809b 	bpl.w	800334e <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 8003218:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800321c:	b10b      	cbz	r3, 8003222 <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 800321e:	4640      	mov	r0, r8
 8003220:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003222:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8003226:	b33b      	cbz	r3, 8003278 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003228:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800322c:	07da      	lsls	r2, r3, #31
 800322e:	d51b      	bpl.n	8003268 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8003230:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003234:	494c      	ldr	r1, [pc, #304]	; (8003368 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8003236:	2305      	movs	r3, #5
 8003238:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800323c:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800323e:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8003242:	f023 0301 	bic.w	r3, r3, #1
 8003246:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003248:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 800324a:	e002      	b.n	8003252 <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800324c:	6813      	ldr	r3, [r2, #0]
 800324e:	07db      	lsls	r3, r3, #31
 8003250:	d504      	bpl.n	800325c <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 8003252:	9b01      	ldr	r3, [sp, #4]
 8003254:	3301      	adds	r3, #1
 8003256:	42ab      	cmp	r3, r5
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	d9f7      	bls.n	800324c <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 800325c:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800325e:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8003260:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8003264:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8003268:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800326c:	b123      	cbz	r3, 8003278 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 800326e:	4640      	mov	r0, r8
}
 8003270:	b002      	add	sp, #8
 8003272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8003276:	4718      	bx	r3
}
 8003278:	b002      	add	sp, #8
 800327a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800327e:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003280:	680a      	ldr	r2, [r1, #0]
 8003282:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003286:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003288:	d12a      	bne.n	80032e0 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800328a:	05d7      	lsls	r7, r2, #23
 800328c:	d403      	bmi.n	8003296 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800328e:	680a      	ldr	r2, [r1, #0]
 8003290:	f022 0208 	bic.w	r2, r2, #8
 8003294:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8003296:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800329a:	2a00      	cmp	r2, #0
 800329c:	d0a5      	beq.n	80031ea <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 800329e:	4640      	mov	r0, r8
 80032a0:	4790      	blx	r2
 80032a2:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 80032a6:	e7a0      	b.n	80031ea <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032a8:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032aa:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80032ae:	f042 0204 	orr.w	r2, r2, #4
 80032b2:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80032b6:	e78f      	b.n	80031d8 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032b8:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032ba:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80032be:	f042 0202 	orr.w	r2, r2, #2
 80032c2:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80032c6:	e77e      	b.n	80031c6 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032c8:	680f      	ldr	r7, [r1, #0]
 80032ca:	f027 0704 	bic.w	r7, r7, #4
 80032ce:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032d0:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032d2:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80032de:	e769      	b.n	80031b4 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032e0:	0312      	lsls	r2, r2, #12
 80032e2:	d5d8      	bpl.n	8003296 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032e4:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80032e8:	2a00      	cmp	r2, #0
 80032ea:	d1d8      	bne.n	800329e <HAL_DMA_IRQHandler+0x112>
 80032ec:	e77d      	b.n	80031ea <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ee:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032f0:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032f4:	f022 0216 	bic.w	r2, r2, #22
 80032f8:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032fa:	694a      	ldr	r2, [r1, #20]
 80032fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003300:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003302:	b354      	cbz	r4, 800335a <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003304:	680a      	ldr	r2, [r1, #0]
 8003306:	f022 0208 	bic.w	r2, r2, #8
 800330a:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800330c:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 800330e:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
        hdma->State = HAL_DMA_STATE_READY;
 8003316:	2401      	movs	r4, #1
        __HAL_UNLOCK(hdma);
 8003318:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800331a:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800331c:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8003320:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8003324:	2900      	cmp	r1, #0
 8003326:	d0a7      	beq.n	8003278 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8003328:	4640      	mov	r0, r8
}
 800332a:	b002      	add	sp, #8
 800332c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8003330:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003332:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8003336:	f47f af6f 	bne.w	8003218 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800333a:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800333c:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800333e:	f022 0210 	bic.w	r2, r2, #16
 8003342:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8003344:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8003348:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800334c:	e764      	b.n	8003218 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 800334e:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8003352:	2b00      	cmp	r3, #0
 8003354:	f47f af63 	bne.w	800321e <HAL_DMA_IRQHandler+0x92>
 8003358:	e763      	b.n	8003222 <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800335a:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800335e:	2a00      	cmp	r2, #0
 8003360:	d1d0      	bne.n	8003304 <HAL_DMA_IRQHandler+0x178>
 8003362:	e7d3      	b.n	800330c <HAL_DMA_IRQHandler+0x180>
 8003364:	20000018 	.word	0x20000018
 8003368:	1b4e81b5 	.word	0x1b4e81b5

0800336c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800336c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003370:	468b      	mov	fp, r1
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003372:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 8003540 <HAL_GPIO_Init+0x1d4>
 8003376:	6809      	ldr	r1, [r1, #0]
{
 8003378:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 800337a:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800337c:	f04f 0a01 	mov.w	sl, #1
 8003380:	46d9      	mov	r9, fp
 8003382:	e002      	b.n	800338a <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003384:	3301      	adds	r3, #1
 8003386:	2b10      	cmp	r3, #16
 8003388:	d079      	beq.n	800347e <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 800338a:	fa0a f203 	lsl.w	r2, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800338e:	ea02 0b01 	and.w	fp, r2, r1
    if(iocurrent == ioposition)
 8003392:	438a      	bics	r2, r1
 8003394:	d1f6      	bne.n	8003384 <HAL_GPIO_Init+0x18>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003396:	f8d9 5004 	ldr.w	r5, [r9, #4]
 800339a:	f005 0203 	and.w	r2, r5, #3
 800339e:	1e54      	subs	r4, r2, #1
 80033a0:	2c01      	cmp	r4, #1
 80033a2:	ea4f 0743 	mov.w	r7, r3, lsl #1
 80033a6:	d96d      	bls.n	8003484 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033a8:	2a03      	cmp	r2, #3
 80033aa:	f040 80ab 	bne.w	8003504 <HAL_GPIO_Init+0x198>
 80033ae:	40ba      	lsls	r2, r7
 80033b0:	43d4      	mvns	r4, r2
 80033b2:	9400      	str	r4, [sp, #0]
      temp = GPIOx->MODER;
 80033b4:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033b6:	9c00      	ldr	r4, [sp, #0]
 80033b8:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033ba:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033bc:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80033c0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033c2:	d0df      	beq.n	8003384 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c4:	4c59      	ldr	r4, [pc, #356]	; (800352c <HAL_GPIO_Init+0x1c0>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	9203      	str	r2, [sp, #12]
 80033ca:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80033cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033d0:	6462      	str	r2, [r4, #68]	; 0x44
 80033d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80033d4:	f023 0603 	bic.w	r6, r3, #3
 80033d8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80033dc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80033e0:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 80033e4:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033e6:	f003 0403 	and.w	r4, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ea:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80033ec:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033ee:	00a4      	lsls	r4, r4, #2
 80033f0:	220f      	movs	r2, #15
 80033f2:	40a2      	lsls	r2, r4
 80033f4:	ea27 0202 	bic.w	r2, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033f8:	4f4d      	ldr	r7, [pc, #308]	; (8003530 <HAL_GPIO_Init+0x1c4>)
 80033fa:	42b8      	cmp	r0, r7
 80033fc:	d014      	beq.n	8003428 <HAL_GPIO_Init+0xbc>
 80033fe:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003402:	42b8      	cmp	r0, r7
 8003404:	f000 8083 	beq.w	800350e <HAL_GPIO_Init+0x1a2>
 8003408:	4f4a      	ldr	r7, [pc, #296]	; (8003534 <HAL_GPIO_Init+0x1c8>)
 800340a:	42b8      	cmp	r0, r7
 800340c:	f000 8083 	beq.w	8003516 <HAL_GPIO_Init+0x1aa>
 8003410:	4f49      	ldr	r7, [pc, #292]	; (8003538 <HAL_GPIO_Init+0x1cc>)
 8003412:	42b8      	cmp	r0, r7
 8003414:	f000 8084 	beq.w	8003520 <HAL_GPIO_Init+0x1b4>
 8003418:	4f48      	ldr	r7, [pc, #288]	; (800353c <HAL_GPIO_Init+0x1d0>)
 800341a:	42b8      	cmp	r0, r7
 800341c:	bf0c      	ite	eq
 800341e:	2704      	moveq	r7, #4
 8003420:	2707      	movne	r7, #7
 8003422:	fa07 f404 	lsl.w	r4, r7, r4
 8003426:	4322      	orrs	r2, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003428:	60b2      	str	r2, [r6, #8]
        temp = EXTI->IMR;
 800342a:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
 800342e:	ea6f 060b 	mvn.w	r6, fp
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003432:	03ec      	lsls	r4, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8003434:	bf54      	ite	pl
 8003436:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8003438:	ea4b 0202 	orrmi.w	r2, fp, r2
        }
        EXTI->IMR = temp;
 800343c:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 8003440:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003444:	03aa      	lsls	r2, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8003446:	bf54      	ite	pl
 8003448:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800344a:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->EMR = temp;
 800344e:	f8cc 4004 	str.w	r4, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003452:	f8dc 4008 	ldr.w	r4, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003456:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8003458:	bf54      	ite	pl
 800345a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800345c:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->RTSR = temp;
 8003460:	f8cc 4008 	str.w	r4, [ip, #8]

        temp = EXTI->FTSR;
 8003464:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003468:	02ac      	lsls	r4, r5, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 800346a:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 800346e:	bf54      	ite	pl
 8003470:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8003472:	ea4b 0202 	orrmi.w	r2, fp, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003476:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8003478:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800347c:	d185      	bne.n	800338a <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 800347e:	b005      	add	sp, #20
 8003480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8003484:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003486:	2403      	movs	r4, #3
 8003488:	40bc      	lsls	r4, r7
 800348a:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800348e:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8003492:	40be      	lsls	r6, r7
 8003494:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8003498:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800349a:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800349e:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034a2:	ea2e 0e0b 	bic.w	lr, lr, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034a6:	409e      	lsls	r6, r3
 80034a8:	ea46 060e 	orr.w	r6, r6, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034ac:	43e4      	mvns	r4, r4
 80034ae:	9400      	str	r4, [sp, #0]
        GPIOx->OTYPER = temp;
 80034b0:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80034b2:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034b4:	ea06 0e04 	and.w	lr, r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034b8:	f8d9 6008 	ldr.w	r6, [r9, #8]
 80034bc:	40be      	lsls	r6, r7
 80034be:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c2:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80034c4:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c6:	d001      	beq.n	80034cc <HAL_GPIO_Init+0x160>
 80034c8:	40ba      	lsls	r2, r7
 80034ca:	e773      	b.n	80033b4 <HAL_GPIO_Init+0x48>
        temp = GPIOx->AFR[position >> 3U];
 80034cc:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 80034d0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034d4:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80034d8:	f8d8 4020 	ldr.w	r4, [r8, #32]
 80034dc:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034de:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80034e2:	240f      	movs	r4, #15
 80034e4:	fa04 f60e 	lsl.w	r6, r4, lr
 80034e8:	9c01      	ldr	r4, [sp, #4]
 80034ea:	ea24 0606 	bic.w	r6, r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034ee:	f8d9 4010 	ldr.w	r4, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034f2:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034f4:	fa04 f60e 	lsl.w	r6, r4, lr
 80034f8:	9c01      	ldr	r4, [sp, #4]
 80034fa:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 80034fc:	40ba      	lsls	r2, r7
 80034fe:	f8c8 6020 	str.w	r6, [r8, #32]
 8003502:	e757      	b.n	80033b4 <HAL_GPIO_Init+0x48>
 8003504:	2403      	movs	r4, #3
 8003506:	40bc      	lsls	r4, r7
 8003508:	43e4      	mvns	r4, r4
 800350a:	9400      	str	r4, [sp, #0]
 800350c:	e7d1      	b.n	80034b2 <HAL_GPIO_Init+0x146>
 800350e:	fa0a f404 	lsl.w	r4, sl, r4
 8003512:	4322      	orrs	r2, r4
 8003514:	e788      	b.n	8003428 <HAL_GPIO_Init+0xbc>
 8003516:	2702      	movs	r7, #2
 8003518:	fa07 f404 	lsl.w	r4, r7, r4
 800351c:	4322      	orrs	r2, r4
 800351e:	e783      	b.n	8003428 <HAL_GPIO_Init+0xbc>
 8003520:	2703      	movs	r7, #3
 8003522:	fa07 f404 	lsl.w	r4, r7, r4
 8003526:	4322      	orrs	r2, r4
 8003528:	e77e      	b.n	8003428 <HAL_GPIO_Init+0xbc>
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800
 8003530:	40020000 	.word	0x40020000
 8003534:	40020800 	.word	0x40020800
 8003538:	40020c00 	.word	0x40020c00
 800353c:	40021000 	.word	0x40021000
 8003540:	40013c00 	.word	0x40013c00

08003544 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003544:	6903      	ldr	r3, [r0, #16]
 8003546:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003548:	bf14      	ite	ne
 800354a:	2001      	movne	r0, #1
 800354c:	2000      	moveq	r0, #0
 800354e:	4770      	bx	lr

08003550 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003550:	b902      	cbnz	r2, 8003554 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003552:	0409      	lsls	r1, r1, #16
 8003554:	6181      	str	r1, [r0, #24]
  }
}
 8003556:	4770      	bx	lr

08003558 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003558:	2800      	cmp	r0, #0
 800355a:	f000 81a5 	beq.w	80038a8 <HAL_RCC_OscConfig+0x350>
{
 800355e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003562:	6803      	ldr	r3, [r0, #0]
 8003564:	07dd      	lsls	r5, r3, #31
{
 8003566:	b082      	sub	sp, #8
 8003568:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356a:	d52f      	bpl.n	80035cc <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800356c:	49ac      	ldr	r1, [pc, #688]	; (8003820 <HAL_RCC_OscConfig+0x2c8>)
 800356e:	688a      	ldr	r2, [r1, #8]
 8003570:	f002 020c 	and.w	r2, r2, #12
 8003574:	2a04      	cmp	r2, #4
 8003576:	f000 80ec 	beq.w	8003752 <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800357a:	688a      	ldr	r2, [r1, #8]
 800357c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003580:	2a08      	cmp	r2, #8
 8003582:	f000 80e2 	beq.w	800374a <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003586:	6863      	ldr	r3, [r4, #4]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	f000 80eb 	beq.w	8003766 <HAL_RCC_OscConfig+0x20e>
 8003590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003594:	f000 8178 	beq.w	8003888 <HAL_RCC_OscConfig+0x330>
 8003598:	4da1      	ldr	r5, [pc, #644]	; (8003820 <HAL_RCC_OscConfig+0x2c8>)
 800359a:	682a      	ldr	r2, [r5, #0]
 800359c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80035a0:	602a      	str	r2, [r5, #0]
 80035a2:	682a      	ldr	r2, [r5, #0]
 80035a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035a8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f040 80e0 	bne.w	8003770 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7ff fa42 	bl	8002a38 <HAL_GetTick>
 80035b4:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b6:	e005      	b.n	80035c4 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b8:	f7ff fa3e 	bl	8002a38 <HAL_GetTick>
 80035bc:	1b80      	subs	r0, r0, r6
 80035be:	2864      	cmp	r0, #100	; 0x64
 80035c0:	f200 8100 	bhi.w	80037c4 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c4:	682b      	ldr	r3, [r5, #0]
 80035c6:	039b      	lsls	r3, r3, #14
 80035c8:	d4f6      	bmi.n	80035b8 <HAL_RCC_OscConfig+0x60>
 80035ca:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035cc:	079f      	lsls	r7, r3, #30
 80035ce:	d528      	bpl.n	8003622 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035d0:	4a93      	ldr	r2, [pc, #588]	; (8003820 <HAL_RCC_OscConfig+0x2c8>)
 80035d2:	6891      	ldr	r1, [r2, #8]
 80035d4:	f011 0f0c 	tst.w	r1, #12
 80035d8:	f000 8090 	beq.w	80036fc <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035dc:	6891      	ldr	r1, [r2, #8]
 80035de:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035e2:	2908      	cmp	r1, #8
 80035e4:	f000 8086 	beq.w	80036f4 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035e8:	68e3      	ldr	r3, [r4, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8106 	beq.w	80037fc <HAL_RCC_OscConfig+0x2a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f0:	4b8c      	ldr	r3, [pc, #560]	; (8003824 <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f2:	4e8b      	ldr	r6, [pc, #556]	; (8003820 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 80035f4:	2201      	movs	r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80035f8:	f7ff fa1e 	bl	8002a38 <HAL_GetTick>
 80035fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fe:	e005      	b.n	800360c <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003600:	f7ff fa1a 	bl	8002a38 <HAL_GetTick>
 8003604:	1b40      	subs	r0, r0, r5
 8003606:	2802      	cmp	r0, #2
 8003608:	f200 80dc 	bhi.w	80037c4 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360c:	6833      	ldr	r3, [r6, #0]
 800360e:	0798      	lsls	r0, r3, #30
 8003610:	d5f6      	bpl.n	8003600 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003612:	6833      	ldr	r3, [r6, #0]
 8003614:	6922      	ldr	r2, [r4, #16]
 8003616:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800361a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800361e:	6033      	str	r3, [r6, #0]
 8003620:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003622:	071a      	lsls	r2, r3, #28
 8003624:	d452      	bmi.n	80036cc <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003626:	0758      	lsls	r0, r3, #29
 8003628:	d52f      	bpl.n	800368a <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362a:	4a7d      	ldr	r2, [pc, #500]	; (8003820 <HAL_RCC_OscConfig+0x2c8>)
 800362c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800362e:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003632:	d07e      	beq.n	8003732 <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 8003634:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003636:	4e7c      	ldr	r6, [pc, #496]	; (8003828 <HAL_RCC_OscConfig+0x2d0>)
 8003638:	6833      	ldr	r3, [r6, #0]
 800363a:	05d9      	lsls	r1, r3, #23
 800363c:	f140 80b2 	bpl.w	80037a4 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003640:	68a3      	ldr	r3, [r4, #8]
 8003642:	2b01      	cmp	r3, #1
 8003644:	f000 80c2 	beq.w	80037cc <HAL_RCC_OscConfig+0x274>
 8003648:	2b05      	cmp	r3, #5
 800364a:	f000 812f 	beq.w	80038ac <HAL_RCC_OscConfig+0x354>
 800364e:	4e74      	ldr	r6, [pc, #464]	; (8003820 <HAL_RCC_OscConfig+0x2c8>)
 8003650:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	6732      	str	r2, [r6, #112]	; 0x70
 8003658:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800365a:	f022 0204 	bic.w	r2, r2, #4
 800365e:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003660:	2b00      	cmp	r3, #0
 8003662:	f040 80b8 	bne.w	80037d6 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003666:	f7ff f9e7 	bl	8002a38 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800366e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003670:	e005      	b.n	800367e <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7ff f9e1 	bl	8002a38 <HAL_GetTick>
 8003676:	1bc0      	subs	r0, r0, r7
 8003678:	4540      	cmp	r0, r8
 800367a:	f200 80a3 	bhi.w	80037c4 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003680:	0798      	lsls	r0, r3, #30
 8003682:	d4f6      	bmi.n	8003672 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003684:	2d00      	cmp	r5, #0
 8003686:	f040 8109 	bne.w	800389c <HAL_RCC_OscConfig+0x344>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800368a:	69a0      	ldr	r0, [r4, #24]
 800368c:	b1d0      	cbz	r0, 80036c4 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800368e:	4d64      	ldr	r5, [pc, #400]	; (8003820 <HAL_RCC_OscConfig+0x2c8>)
 8003690:	68ab      	ldr	r3, [r5, #8]
 8003692:	f003 030c 	and.w	r3, r3, #12
 8003696:	2b08      	cmp	r3, #8
 8003698:	f000 80cc 	beq.w	8003834 <HAL_RCC_OscConfig+0x2dc>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369c:	4b63      	ldr	r3, [pc, #396]	; (800382c <HAL_RCC_OscConfig+0x2d4>)
 800369e:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80036a2:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a4:	f000 810c 	beq.w	80038c0 <HAL_RCC_OscConfig+0x368>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7ff f9c6 	bl	8002a38 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ac:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80036ae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b0:	e005      	b.n	80036be <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b2:	f7ff f9c1 	bl	8002a38 <HAL_GetTick>
 80036b6:	1b40      	subs	r0, r0, r5
 80036b8:	2802      	cmp	r0, #2
 80036ba:	f200 8083 	bhi.w	80037c4 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	019b      	lsls	r3, r3, #6
 80036c2:	d4f6      	bmi.n	80036b2 <HAL_RCC_OscConfig+0x15a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80036c4:	2000      	movs	r0, #0
}
 80036c6:	b002      	add	sp, #8
 80036c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036cc:	6963      	ldr	r3, [r4, #20]
 80036ce:	b303      	cbz	r3, 8003712 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 80036d0:	4b57      	ldr	r3, [pc, #348]	; (8003830 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	4e53      	ldr	r6, [pc, #332]	; (8003820 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 80036d4:	2201      	movs	r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80036d8:	f7ff f9ae 	bl	8002a38 <HAL_GetTick>
 80036dc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036de:	e004      	b.n	80036ea <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e0:	f7ff f9aa 	bl	8002a38 <HAL_GetTick>
 80036e4:	1b40      	subs	r0, r0, r5
 80036e6:	2802      	cmp	r0, #2
 80036e8:	d86c      	bhi.n	80037c4 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ea:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80036ec:	079b      	lsls	r3, r3, #30
 80036ee:	d5f7      	bpl.n	80036e0 <HAL_RCC_OscConfig+0x188>
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	e798      	b.n	8003626 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036f4:	6852      	ldr	r2, [r2, #4]
 80036f6:	0256      	lsls	r6, r2, #9
 80036f8:	f53f af76 	bmi.w	80035e8 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fc:	4a48      	ldr	r2, [pc, #288]	; (8003820 <HAL_RCC_OscConfig+0x2c8>)
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	0795      	lsls	r5, r2, #30
 8003702:	d543      	bpl.n	800378c <HAL_RCC_OscConfig+0x234>
 8003704:	68e2      	ldr	r2, [r4, #12]
 8003706:	2a01      	cmp	r2, #1
 8003708:	d040      	beq.n	800378c <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 800370a:	2001      	movs	r0, #1
}
 800370c:	b002      	add	sp, #8
 800370e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003712:	4a47      	ldr	r2, [pc, #284]	; (8003830 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003714:	4e42      	ldr	r6, [pc, #264]	; (8003820 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8003716:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003718:	f7ff f98e 	bl	8002a38 <HAL_GetTick>
 800371c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800371e:	e004      	b.n	800372a <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003720:	f7ff f98a 	bl	8002a38 <HAL_GetTick>
 8003724:	1b40      	subs	r0, r0, r5
 8003726:	2802      	cmp	r0, #2
 8003728:	d84c      	bhi.n	80037c4 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800372c:	079f      	lsls	r7, r3, #30
 800372e:	d4f7      	bmi.n	8003720 <HAL_RCC_OscConfig+0x1c8>
 8003730:	e7de      	b.n	80036f0 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373a:	6413      	str	r3, [r2, #64]	; 0x40
 800373c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800373e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003742:	9301      	str	r3, [sp, #4]
 8003744:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003746:	2501      	movs	r5, #1
 8003748:	e775      	b.n	8003636 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800374a:	684a      	ldr	r2, [r1, #4]
 800374c:	0250      	lsls	r0, r2, #9
 800374e:	f57f af1a 	bpl.w	8003586 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003752:	4a33      	ldr	r2, [pc, #204]	; (8003820 <HAL_RCC_OscConfig+0x2c8>)
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	0391      	lsls	r1, r2, #14
 8003758:	f57f af38 	bpl.w	80035cc <HAL_RCC_OscConfig+0x74>
 800375c:	6862      	ldr	r2, [r4, #4]
 800375e:	2a00      	cmp	r2, #0
 8003760:	f47f af34 	bne.w	80035cc <HAL_RCC_OscConfig+0x74>
 8003764:	e7d1      	b.n	800370a <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003766:	4a2e      	ldr	r2, [pc, #184]	; (8003820 <HAL_RCC_OscConfig+0x2c8>)
 8003768:	6813      	ldr	r3, [r2, #0]
 800376a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003770:	f7ff f962 	bl	8002a38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003774:	4e2a      	ldr	r6, [pc, #168]	; (8003820 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8003776:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003778:	e004      	b.n	8003784 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800377a:	f7ff f95d 	bl	8002a38 <HAL_GetTick>
 800377e:	1b40      	subs	r0, r0, r5
 8003780:	2864      	cmp	r0, #100	; 0x64
 8003782:	d81f      	bhi.n	80037c4 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003784:	6833      	ldr	r3, [r6, #0]
 8003786:	039a      	lsls	r2, r3, #14
 8003788:	d5f7      	bpl.n	800377a <HAL_RCC_OscConfig+0x222>
 800378a:	e71e      	b.n	80035ca <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378c:	4924      	ldr	r1, [pc, #144]	; (8003820 <HAL_RCC_OscConfig+0x2c8>)
 800378e:	6920      	ldr	r0, [r4, #16]
 8003790:	680a      	ldr	r2, [r1, #0]
 8003792:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003796:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800379a:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800379c:	071a      	lsls	r2, r3, #28
 800379e:	f57f af42 	bpl.w	8003626 <HAL_RCC_OscConfig+0xce>
 80037a2:	e793      	b.n	80036cc <HAL_RCC_OscConfig+0x174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a4:	6833      	ldr	r3, [r6, #0]
 80037a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037aa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80037ac:	f7ff f944 	bl	8002a38 <HAL_GetTick>
 80037b0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	6833      	ldr	r3, [r6, #0]
 80037b4:	05da      	lsls	r2, r3, #23
 80037b6:	f53f af43 	bmi.w	8003640 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ba:	f7ff f93d 	bl	8002a38 <HAL_GetTick>
 80037be:	1bc0      	subs	r0, r0, r7
 80037c0:	2802      	cmp	r0, #2
 80037c2:	d9f6      	bls.n	80037b2 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 80037c4:	2003      	movs	r0, #3
}
 80037c6:	b002      	add	sp, #8
 80037c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037cc:	4a14      	ldr	r2, [pc, #80]	; (8003820 <HAL_RCC_OscConfig+0x2c8>)
 80037ce:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80037d6:	f7ff f92f 	bl	8002a38 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037da:	4f11      	ldr	r7, [pc, #68]	; (8003820 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80037dc:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e2:	e004      	b.n	80037ee <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e4:	f7ff f928 	bl	8002a38 <HAL_GetTick>
 80037e8:	1b80      	subs	r0, r0, r6
 80037ea:	4540      	cmp	r0, r8
 80037ec:	d8ea      	bhi.n	80037c4 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037f0:	079b      	lsls	r3, r3, #30
 80037f2:	d5f7      	bpl.n	80037e4 <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 80037f4:	2d00      	cmp	r5, #0
 80037f6:	f43f af48 	beq.w	800368a <HAL_RCC_OscConfig+0x132>
 80037fa:	e04f      	b.n	800389c <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_HSI_DISABLE();
 80037fc:	4a09      	ldr	r2, [pc, #36]	; (8003824 <HAL_RCC_OscConfig+0x2cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fe:	4e08      	ldr	r6, [pc, #32]	; (8003820 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8003800:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003802:	f7ff f919 	bl	8002a38 <HAL_GetTick>
 8003806:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003808:	e004      	b.n	8003814 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800380a:	f7ff f915 	bl	8002a38 <HAL_GetTick>
 800380e:	1b40      	subs	r0, r0, r5
 8003810:	2802      	cmp	r0, #2
 8003812:	d8d7      	bhi.n	80037c4 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003814:	6833      	ldr	r3, [r6, #0]
 8003816:	0799      	lsls	r1, r3, #30
 8003818:	d4f7      	bmi.n	800380a <HAL_RCC_OscConfig+0x2b2>
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	e701      	b.n	8003622 <HAL_RCC_OscConfig+0xca>
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800
 8003824:	42470000 	.word	0x42470000
 8003828:	40007000 	.word	0x40007000
 800382c:	42470060 	.word	0x42470060
 8003830:	42470e80 	.word	0x42470e80
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003834:	2801      	cmp	r0, #1
 8003836:	f43f af46 	beq.w	80036c6 <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->PLLCFGR;
 800383a:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800383c:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003842:	4291      	cmp	r1, r2
 8003844:	f47f af61 	bne.w	800370a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003848:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800384a:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384e:	4291      	cmp	r1, r2
 8003850:	f47f af5b 	bne.w	800370a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003854:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003856:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800385a:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800385c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003860:	f47f af53 	bne.w	800370a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003864:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003866:	0852      	lsrs	r2, r2, #1
 8003868:	3a01      	subs	r2, #1
 800386a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800386e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003872:	f47f af4a 	bne.w	800370a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003876:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003878:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800387c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8003880:	bf14      	ite	ne
 8003882:	2001      	movne	r0, #1
 8003884:	2000      	moveq	r0, #0
 8003886:	e71e      	b.n	80036c6 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003888:	4b24      	ldr	r3, [pc, #144]	; (800391c <HAL_RCC_OscConfig+0x3c4>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003898:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800389a:	e769      	b.n	8003770 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 800389c:	4a1f      	ldr	r2, [pc, #124]	; (800391c <HAL_RCC_OscConfig+0x3c4>)
 800389e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80038a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a4:	6413      	str	r3, [r2, #64]	; 0x40
 80038a6:	e6f0      	b.n	800368a <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 80038a8:	2001      	movs	r0, #1
}
 80038aa:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ac:	4b1b      	ldr	r3, [pc, #108]	; (800391c <HAL_RCC_OscConfig+0x3c4>)
 80038ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038b0:	f042 0204 	orr.w	r2, r2, #4
 80038b4:	671a      	str	r2, [r3, #112]	; 0x70
 80038b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038b8:	f042 0201 	orr.w	r2, r2, #1
 80038bc:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038be:	e78a      	b.n	80037d6 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 80038c0:	f7ff f8ba 	bl	8002a38 <HAL_GetTick>
 80038c4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c6:	e005      	b.n	80038d4 <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c8:	f7ff f8b6 	bl	8002a38 <HAL_GetTick>
 80038cc:	1b80      	subs	r0, r0, r6
 80038ce:	2802      	cmp	r0, #2
 80038d0:	f63f af78 	bhi.w	80037c4 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	0199      	lsls	r1, r3, #6
 80038d8:	d4f6      	bmi.n	80038c8 <HAL_RCC_OscConfig+0x370>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038da:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 80038de:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 80038e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80038e4:	4333      	orrs	r3, r6
 80038e6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80038ea:	0852      	lsrs	r2, r2, #1
 80038ec:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80038f0:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80038f2:	490b      	ldr	r1, [pc, #44]	; (8003920 <HAL_RCC_OscConfig+0x3c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f4:	4e09      	ldr	r6, [pc, #36]	; (800391c <HAL_RCC_OscConfig+0x3c4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80038fa:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038fc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80038fe:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8003900:	f7ff f89a 	bl	8002a38 <HAL_GetTick>
 8003904:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003906:	e005      	b.n	8003914 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003908:	f7ff f896 	bl	8002a38 <HAL_GetTick>
 800390c:	1b00      	subs	r0, r0, r4
 800390e:	2802      	cmp	r0, #2
 8003910:	f63f af58 	bhi.w	80037c4 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003914:	6833      	ldr	r3, [r6, #0]
 8003916:	019a      	lsls	r2, r3, #6
 8003918:	d5f6      	bpl.n	8003908 <HAL_RCC_OscConfig+0x3b0>
 800391a:	e6d3      	b.n	80036c4 <HAL_RCC_OscConfig+0x16c>
 800391c:	40023800 	.word	0x40023800
 8003920:	42470060 	.word	0x42470060

08003924 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003924:	4917      	ldr	r1, [pc, #92]	; (8003984 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8003926:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003928:	688b      	ldr	r3, [r1, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b04      	cmp	r3, #4
 8003930:	d01b      	beq.n	800396a <HAL_RCC_GetSysClockFreq+0x46>
 8003932:	2b08      	cmp	r3, #8
 8003934:	d117      	bne.n	8003966 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003936:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003938:	684b      	ldr	r3, [r1, #4]
 800393a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800393e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003942:	d114      	bne.n	800396e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003944:	6849      	ldr	r1, [r1, #4]
 8003946:	4810      	ldr	r0, [pc, #64]	; (8003988 <HAL_RCC_GetSysClockFreq+0x64>)
 8003948:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800394c:	fba1 0100 	umull	r0, r1, r1, r0
 8003950:	f7fd f982 	bl	8000c58 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_RCC_GetSysClockFreq+0x60>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800395c:	3301      	adds	r3, #1
 800395e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003960:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003964:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8003966:	4808      	ldr	r0, [pc, #32]	; (8003988 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003968:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800396a:	4808      	ldr	r0, [pc, #32]	; (800398c <HAL_RCC_GetSysClockFreq+0x68>)
}
 800396c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396e:	684b      	ldr	r3, [r1, #4]
 8003970:	4806      	ldr	r0, [pc, #24]	; (800398c <HAL_RCC_GetSysClockFreq+0x68>)
 8003972:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003976:	fba3 0100 	umull	r0, r1, r3, r0
 800397a:	2300      	movs	r3, #0
 800397c:	f7fd f96c 	bl	8000c58 <__aeabi_uldivmod>
 8003980:	e7e8      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x30>
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800
 8003988:	00f42400 	.word	0x00f42400
 800398c:	007a1200 	.word	0x007a1200

08003990 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003990:	2800      	cmp	r0, #0
 8003992:	f000 8087 	beq.w	8003aa4 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003996:	4a48      	ldr	r2, [pc, #288]	; (8003ab8 <HAL_RCC_ClockConfig+0x128>)
 8003998:	6813      	ldr	r3, [r2, #0]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	428b      	cmp	r3, r1
{
 80039a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039a4:	460d      	mov	r5, r1
 80039a6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a8:	d209      	bcs.n	80039be <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	b2cb      	uxtb	r3, r1
 80039ac:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ae:	6813      	ldr	r3, [r2, #0]
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	428b      	cmp	r3, r1
 80039b6:	d002      	beq.n	80039be <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80039b8:	2001      	movs	r0, #1
}
 80039ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	0798      	lsls	r0, r3, #30
 80039c2:	d514      	bpl.n	80039ee <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	0759      	lsls	r1, r3, #29
 80039c6:	d504      	bpl.n	80039d2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c8:	493c      	ldr	r1, [pc, #240]	; (8003abc <HAL_RCC_ClockConfig+0x12c>)
 80039ca:	688a      	ldr	r2, [r1, #8]
 80039cc:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80039d0:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d2:	071a      	lsls	r2, r3, #28
 80039d4:	d504      	bpl.n	80039e0 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039d6:	4939      	ldr	r1, [pc, #228]	; (8003abc <HAL_RCC_ClockConfig+0x12c>)
 80039d8:	688a      	ldr	r2, [r1, #8]
 80039da:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80039de:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e0:	4936      	ldr	r1, [pc, #216]	; (8003abc <HAL_RCC_ClockConfig+0x12c>)
 80039e2:	68a0      	ldr	r0, [r4, #8]
 80039e4:	688a      	ldr	r2, [r1, #8]
 80039e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80039ea:	4302      	orrs	r2, r0
 80039ec:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ee:	07df      	lsls	r7, r3, #31
 80039f0:	d521      	bpl.n	8003a36 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f2:	6862      	ldr	r2, [r4, #4]
 80039f4:	2a01      	cmp	r2, #1
 80039f6:	d057      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039f8:	1e93      	subs	r3, r2, #2
 80039fa:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fc:	4b2f      	ldr	r3, [pc, #188]	; (8003abc <HAL_RCC_ClockConfig+0x12c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a00:	d94d      	bls.n	8003a9e <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a02:	0799      	lsls	r1, r3, #30
 8003a04:	d5d8      	bpl.n	80039b8 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a06:	4e2d      	ldr	r6, [pc, #180]	; (8003abc <HAL_RCC_ClockConfig+0x12c>)
 8003a08:	68b3      	ldr	r3, [r6, #8]
 8003a0a:	f023 0303 	bic.w	r3, r3, #3
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003a12:	f7ff f811 	bl	8002a38 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a16:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003a1a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1c:	e004      	b.n	8003a28 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a1e:	f7ff f80b 	bl	8002a38 <HAL_GetTick>
 8003a22:	1bc0      	subs	r0, r0, r7
 8003a24:	4540      	cmp	r0, r8
 8003a26:	d844      	bhi.n	8003ab2 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a28:	68b3      	ldr	r3, [r6, #8]
 8003a2a:	6862      	ldr	r2, [r4, #4]
 8003a2c:	f003 030c 	and.w	r3, r3, #12
 8003a30:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003a34:	d1f3      	bne.n	8003a1e <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a36:	4a20      	ldr	r2, [pc, #128]	; (8003ab8 <HAL_RCC_ClockConfig+0x128>)
 8003a38:	6813      	ldr	r3, [r2, #0]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	42ab      	cmp	r3, r5
 8003a40:	d906      	bls.n	8003a50 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	b2eb      	uxtb	r3, r5
 8003a44:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	6813      	ldr	r3, [r2, #0]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	42ab      	cmp	r3, r5
 8003a4e:	d1b3      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	075a      	lsls	r2, r3, #29
 8003a54:	d506      	bpl.n	8003a64 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a56:	4919      	ldr	r1, [pc, #100]	; (8003abc <HAL_RCC_ClockConfig+0x12c>)
 8003a58:	68e0      	ldr	r0, [r4, #12]
 8003a5a:	688a      	ldr	r2, [r1, #8]
 8003a5c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003a60:	4302      	orrs	r2, r0
 8003a62:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a64:	071b      	lsls	r3, r3, #28
 8003a66:	d507      	bpl.n	8003a78 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a68:	4a14      	ldr	r2, [pc, #80]	; (8003abc <HAL_RCC_ClockConfig+0x12c>)
 8003a6a:	6921      	ldr	r1, [r4, #16]
 8003a6c:	6893      	ldr	r3, [r2, #8]
 8003a6e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003a72:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003a76:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a78:	f7ff ff54 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 8003a7c:	4a0f      	ldr	r2, [pc, #60]	; (8003abc <HAL_RCC_ClockConfig+0x12c>)
 8003a7e:	4c10      	ldr	r4, [pc, #64]	; (8003ac0 <HAL_RCC_ClockConfig+0x130>)
 8003a80:	6892      	ldr	r2, [r2, #8]
 8003a82:	4910      	ldr	r1, [pc, #64]	; (8003ac4 <HAL_RCC_ClockConfig+0x134>)
 8003a84:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003a88:	4603      	mov	r3, r0
 8003a8a:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8003a8c:	480e      	ldr	r0, [pc, #56]	; (8003ac8 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a8e:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8003a90:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a92:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8003a94:	f7fe ff86 	bl	80029a4 <HAL_InitTick>
  return HAL_OK;
 8003a98:	2000      	movs	r0, #0
}
 8003a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9e:	0198      	lsls	r0, r3, #6
 8003aa0:	d4b1      	bmi.n	8003a06 <HAL_RCC_ClockConfig+0x76>
 8003aa2:	e789      	b.n	80039b8 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003aa4:	2001      	movs	r0, #1
}
 8003aa6:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <HAL_RCC_ClockConfig+0x12c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	039e      	lsls	r6, r3, #14
 8003aae:	d4aa      	bmi.n	8003a06 <HAL_RCC_ClockConfig+0x76>
 8003ab0:	e782      	b.n	80039b8 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8003ab2:	2003      	movs	r0, #3
 8003ab4:	e781      	b.n	80039ba <HAL_RCC_ClockConfig+0x2a>
 8003ab6:	bf00      	nop
 8003ab8:	40023c00 	.word	0x40023c00
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	08009328 	.word	0x08009328
 8003ac4:	20000018 	.word	0x20000018
 8003ac8:	20000020 	.word	0x20000020

08003acc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003acc:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003ace:	4a05      	ldr	r2, [pc, #20]	; (8003ae4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003ad2:	4905      	ldr	r1, [pc, #20]	; (8003ae8 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ad4:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003ad8:	6808      	ldr	r0, [r1, #0]
 8003ada:	5cd3      	ldrb	r3, [r2, r3]
}
 8003adc:	40d8      	lsrs	r0, r3
 8003ade:	4770      	bx	lr
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	08009338 	.word	0x08009338
 8003ae8:	20000018 	.word	0x20000018

08003aec <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aec:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003aee:	4a05      	ldr	r2, [pc, #20]	; (8003b04 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003af0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003af2:	4905      	ldr	r1, [pc, #20]	; (8003b08 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003af4:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003af8:	6808      	ldr	r0, [r1, #0]
 8003afa:	5cd3      	ldrb	r3, [r2, r3]
}
 8003afc:	40d8      	lsrs	r0, r3
 8003afe:	4770      	bx	lr
 8003b00:	40023800 	.word	0x40023800
 8003b04:	08009338 	.word	0x08009338
 8003b08:	20000018 	.word	0x20000018

08003b0c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	4698      	mov	r8, r3
 8003b14:	4616      	mov	r6, r2
 8003b16:	460c      	mov	r4, r1
 8003b18:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b1a:	f7fe ff8d 	bl	8002a38 <HAL_GetTick>
 8003b1e:	44b0      	add	r8, r6
 8003b20:	eba8 0500 	sub.w	r5, r8, r0
  tmp_tickstart = HAL_GetTick();
 8003b24:	f7fe ff88 	bl	8002a38 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b28:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003b30:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 8003b34:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b36:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b38:	1c73      	adds	r3, r6, #1
 8003b3a:	6839      	ldr	r1, [r7, #0]
 8003b3c:	d107      	bne.n	8003b4e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
 8003b3e:	688b      	ldr	r3, [r1, #8]
 8003b40:	ea34 0303 	bics.w	r3, r4, r3
 8003b44:	d0fb      	beq.n	8003b3e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
      }
      count--;
    }
  }

  return HAL_OK;
 8003b46:	2000      	movs	r0, #0
}
 8003b48:	b002      	add	sp, #8
 8003b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b4e:	688b      	ldr	r3, [r1, #8]
 8003b50:	ea34 0303 	bics.w	r3, r4, r3
 8003b54:	d1f7      	bne.n	8003b46 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b56:	f7fe ff6f 	bl	8002a38 <HAL_GetTick>
 8003b5a:	eba0 0308 	sub.w	r3, r0, r8
 8003b5e:	42ab      	cmp	r3, r5
 8003b60:	d208      	bcs.n	8003b74 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
      if(count == 0U)
 8003b62:	9a01      	ldr	r2, [sp, #4]
      count--;
 8003b64:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003b66:	2a00      	cmp	r2, #0
      count--;
 8003b68:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 8003b6c:	bf08      	it	eq
 8003b6e:	2500      	moveq	r5, #0
      count--;
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	e7e1      	b.n	8003b38 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b74:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b78:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b7a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b7e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b82:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b84:	d014      	beq.n	8003bb0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b88:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003b8c:	d007      	beq.n	8003b9e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8003b8e:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8003b90:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8003b92:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003b96:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8003b9a:	2003      	movs	r0, #3
 8003b9c:	e7d4      	b.n	8003b48 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
          SPI_RESET_CRC(hspi);
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	e7ee      	b.n	8003b8e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003bb6:	d002      	beq.n	8003bbe <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bb8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003bbc:	d1e3      	bne.n	8003b86 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	e7de      	b.n	8003b86 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
 8003bc8:	20000018 	.word	0x20000018

08003bcc <HAL_SPI_Init>:
  if (hspi == NULL)
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	d05b      	beq.n	8003c88 <HAL_SPI_Init+0xbc>
{
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bd2:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8003bd4:	4604      	mov	r4, r0
 8003bd6:	2f00      	cmp	r7, #0
 8003bd8:	d046      	beq.n	8003c68 <HAL_SPI_Init+0x9c>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bda:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bdc:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003be0:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003be4:	2000      	movs	r0, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003be6:	f002 01ff 	and.w	r1, r2, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bea:	62a0      	str	r0, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bec:	2a00      	cmp	r2, #0
 8003bee:	d041      	beq.n	8003c74 <HAL_SPI_Init+0xa8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bf0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8003bf4:	68e1      	ldr	r1, [r4, #12]
 8003bf6:	69a6      	ldr	r6, [r4, #24]
 8003bf8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003bfc:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 8003c00:	6923      	ldr	r3, [r4, #16]
 8003c02:	432a      	orrs	r2, r5
 8003c04:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	f003 0102 	and.w	r1, r3, #2
 8003c0e:	6963      	ldr	r3, [r4, #20]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	431a      	orrs	r2, r3
 8003c18:	69e3      	ldr	r3, [r4, #28]
  __HAL_SPI_DISABLE(hspi);
 8003c1a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c1c:	f003 0e38 	and.w	lr, r3, #56	; 0x38
 8003c20:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8003c24:	4313      	orrs	r3, r2
  hspi->State = HAL_SPI_STATE_BUSY;
 8003c26:	2202      	movs	r2, #2
 8003c28:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c2c:	6a22      	ldr	r2, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c2e:	0c35      	lsrs	r5, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c30:	ea43 030e 	orr.w	r3, r3, lr
 8003c34:	f002 0680 	and.w	r6, r2, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c38:	f005 0204 	and.w	r2, r5, #4
  __HAL_SPI_DISABLE(hspi);
 8003c3c:	680d      	ldr	r5, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c3e:	f007 0710 	and.w	r7, r7, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c42:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c44:	433a      	orrs	r2, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c46:	4303      	orrs	r3, r0
  __HAL_SPI_DISABLE(hspi);
 8003c48:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8003c4c:	600d      	str	r5, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c4e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c50:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c52:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c54:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8003c5a:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c5c:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c5e:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c60:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  return HAL_OK;
 8003c64:	4610      	mov	r0, r2
}
 8003c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c68:	6843      	ldr	r3, [r0, #4]
 8003c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c6e:	d0b7      	beq.n	8003be0 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c70:	61c7      	str	r7, [r0, #28]
 8003c72:	e7b5      	b.n	8003be0 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 8003c74:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003c76:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003c7a:	f7fe fc95 	bl	80025a8 <HAL_SPI_MspInit>
 8003c7e:	e9d4 7309 	ldrd	r7, r3, [r4, #36]	; 0x24
 8003c82:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 8003c86:	e7b3      	b.n	8003bf0 <HAL_SPI_Init+0x24>
    return HAL_ERROR;
 8003c88:	2001      	movs	r0, #1
}
 8003c8a:	4770      	bx	lr

08003c8c <HAL_SPI_Transmit>:
{
 8003c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c90:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003c92:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8003c96:	2801      	cmp	r0, #1
{
 8003c98:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8003c9a:	f000 8086 	beq.w	8003daa <HAL_SPI_Transmit+0x11e>
 8003c9e:	461d      	mov	r5, r3
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003ca6:	4688      	mov	r8, r1
 8003ca8:	4617      	mov	r7, r2
 8003caa:	f7fe fec5 	bl	8002a38 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003cae:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003cb2:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8003cb4:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003cb6:	b2d8      	uxtb	r0, r3
 8003cb8:	d009      	beq.n	8003cce <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8003cba:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003cbc:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8003cbe:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8003cc0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003cc4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003cc8:	b002      	add	sp, #8
 8003cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8003cce:	f1b8 0f00 	cmp.w	r8, #0
 8003cd2:	d0f3      	beq.n	8003cbc <HAL_SPI_Transmit+0x30>
 8003cd4:	2f00      	cmp	r7, #0
 8003cd6:	d0f1      	beq.n	8003cbc <HAL_SPI_Transmit+0x30>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cd8:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8003cda:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cdc:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ce6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8003cf0:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8003cf4:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003cf6:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cf8:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003cfa:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003cfc:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cfe:	f000 8085 	beq.w	8003e0c <HAL_SPI_Transmit+0x180>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d02:	6802      	ldr	r2, [r0, #0]
 8003d04:	0652      	lsls	r2, r2, #25
    __HAL_SPI_DISABLE(hspi);
 8003d06:	4603      	mov	r3, r0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d08:	d403      	bmi.n	8003d12 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8003d0a:	6802      	ldr	r2, [r0, #0]
 8003d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d10:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d12:	68e2      	ldr	r2, [r4, #12]
 8003d14:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003d18:	d04b      	beq.n	8003db2 <HAL_SPI_Transmit+0x126>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d1a:	6863      	ldr	r3, [r4, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8097 	beq.w	8003e50 <HAL_SPI_Transmit+0x1c4>
 8003d22:	2f01      	cmp	r7, #1
 8003d24:	f000 8094 	beq.w	8003e50 <HAL_SPI_Transmit+0x1c4>
    while (hspi->TxXferCount > 0U)
 8003d28:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	b1ab      	cbz	r3, 8003d5a <HAL_SPI_Transmit+0xce>
 8003d2e:	1c68      	adds	r0, r5, #1
 8003d30:	f040 8083 	bne.w	8003e3a <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	0791      	lsls	r1, r2, #30
 8003d3a:	f140 8094 	bpl.w	8003e66 <HAL_SPI_Transmit+0x1da>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d3e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003d40:	7812      	ldrb	r2, [r2, #0]
 8003d42:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8003d44:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d46:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003d48:	3a01      	subs	r2, #1
 8003d4a:	b292      	uxth	r2, r2
 8003d4c:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003d4e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d50:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 8003d52:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d54:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8003d56:	2a00      	cmp	r2, #0
 8003d58:	d1ec      	bne.n	8003d34 <HAL_SPI_Transmit+0xa8>
 8003d5a:	6861      	ldr	r1, [r4, #4]
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d5c:	4b5b      	ldr	r3, [pc, #364]	; (8003ecc <HAL_SPI_Transmit+0x240>)
 8003d5e:	4a5c      	ldr	r2, [pc, #368]	; (8003ed0 <HAL_SPI_Transmit+0x244>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	0d5b      	lsrs	r3, r3, #21
 8003d68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d6c:	fb02 f303 	mul.w	r3, r2, r3
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d70:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d74:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d76:	d107      	bne.n	8003d88 <HAL_SPI_Transmit+0xfc>
 8003d78:	e098      	b.n	8003eac <HAL_SPI_Transmit+0x220>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8003d7a:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d7c:	6822      	ldr	r2, [r4, #0]
      count--;
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d82:	6893      	ldr	r3, [r2, #8]
 8003d84:	061b      	lsls	r3, r3, #24
 8003d86:	d502      	bpl.n	8003d8e <HAL_SPI_Transmit+0x102>
      if (count == 0U)
 8003d88:	9b01      	ldr	r3, [sp, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f5      	bne.n	8003d7a <HAL_SPI_Transmit+0xee>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d8e:	68a3      	ldr	r3, [r4, #8]
 8003d90:	b933      	cbnz	r3, 8003da0 <HAL_SPI_Transmit+0x114>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d92:	6822      	ldr	r2, [r4, #0]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	68d3      	ldr	r3, [r2, #12]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	6893      	ldr	r3, [r2, #8]
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003da0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8003da2:	3800      	subs	r0, #0
 8003da4:	bf18      	it	ne
 8003da6:	2001      	movne	r0, #1
error:
 8003da8:	e788      	b.n	8003cbc <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8003daa:	2002      	movs	r0, #2
}
 8003dac:	b002      	add	sp, #8
 8003dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003db2:	6861      	ldr	r1, [r4, #4]
 8003db4:	2900      	cmp	r1, #0
 8003db6:	d176      	bne.n	8003ea6 <HAL_SPI_Transmit+0x21a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003db8:	4647      	mov	r7, r8
 8003dba:	f837 2b02 	ldrh.w	r2, [r7], #2
 8003dbe:	60c2      	str	r2, [r0, #12]
      hspi->TxXferCount--;
 8003dc0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc2:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003dc4:	3a01      	subs	r2, #1
 8003dc6:	b292      	uxth	r2, r2
 8003dc8:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003dca:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003dcc:	b292      	uxth	r2, r2
 8003dce:	2a00      	cmp	r2, #0
 8003dd0:	d0c4      	beq.n	8003d5c <HAL_SPI_Transmit+0xd0>
 8003dd2:	1c6a      	adds	r2, r5, #1
 8003dd4:	d15e      	bne.n	8003e94 <HAL_SPI_Transmit+0x208>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dd6:	6883      	ldr	r3, [r0, #8]
 8003dd8:	079f      	lsls	r7, r3, #30
 8003dda:	d50f      	bpl.n	8003dfc <HAL_SPI_Transmit+0x170>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ddc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003dde:	f832 3b02 	ldrh.w	r3, [r2], #2
 8003de2:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8003de4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de6:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003dee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0b1      	beq.n	8003d5a <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003df6:	6883      	ldr	r3, [r0, #8]
 8003df8:	079f      	lsls	r7, r3, #30
 8003dfa:	d4ef      	bmi.n	8003ddc <HAL_SPI_Transmit+0x150>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dfc:	f7fe fe1c 	bl	8002a38 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8003e00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0a8      	beq.n	8003d5a <HAL_SPI_Transmit+0xce>
 8003e08:	6820      	ldr	r0, [r4, #0]
 8003e0a:	e7e4      	b.n	8003dd6 <HAL_SPI_Transmit+0x14a>
    __HAL_SPI_DISABLE(hspi);
 8003e0c:	6803      	ldr	r3, [r0, #0]
 8003e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e12:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 8003e14:	6803      	ldr	r3, [r0, #0]
 8003e16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e1a:	6003      	str	r3, [r0, #0]
 8003e1c:	e771      	b.n	8003d02 <HAL_SPI_Transmit+0x76>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e1e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003e20:	7812      	ldrb	r2, [r2, #0]
 8003e22:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8003e24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e26:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e2c:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8003e2e:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e30:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8003e32:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d08f      	beq.n	8003d5a <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	0792      	lsls	r2, r2, #30
 8003e40:	d4ed      	bmi.n	8003e1e <HAL_SPI_Transmit+0x192>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e42:	f7fe fdf9 	bl	8002a38 <HAL_GetTick>
 8003e46:	1b80      	subs	r0, r0, r6
 8003e48:	42a8      	cmp	r0, r5
 8003e4a:	d3f2      	bcc.n	8003e32 <HAL_SPI_Transmit+0x1a6>
          errorcode = HAL_TIMEOUT;
 8003e4c:	2003      	movs	r0, #3
 8003e4e:	e735      	b.n	8003cbc <HAL_SPI_Transmit+0x30>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e50:	f898 3000 	ldrb.w	r3, [r8]
 8003e54:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8003e56:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e58:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e5e:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8003e60:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e62:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003e64:	e760      	b.n	8003d28 <HAL_SPI_Transmit+0x9c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e66:	f7fe fde7 	bl	8002a38 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8003e6a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f47f af60 	bne.w	8003d34 <HAL_SPI_Transmit+0xa8>
 8003e74:	e771      	b.n	8003d5a <HAL_SPI_Transmit+0xce>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003e78:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003e7c:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8003e7e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e80:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003e88:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f43f af64 	beq.w	8003d5a <HAL_SPI_Transmit+0xce>
 8003e92:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	0791      	lsls	r1, r2, #30
 8003e98:	d4ed      	bmi.n	8003e76 <HAL_SPI_Transmit+0x1ea>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e9a:	f7fe fdcd 	bl	8002a38 <HAL_GetTick>
 8003e9e:	1b80      	subs	r0, r0, r6
 8003ea0:	42a8      	cmp	r0, r5
 8003ea2:	d3f1      	bcc.n	8003e88 <HAL_SPI_Transmit+0x1fc>
 8003ea4:	e7d2      	b.n	8003e4c <HAL_SPI_Transmit+0x1c0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ea6:	2f01      	cmp	r7, #1
 8003ea8:	d18f      	bne.n	8003dca <HAL_SPI_Transmit+0x13e>
 8003eaa:	e785      	b.n	8003db8 <HAL_SPI_Transmit+0x12c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003eac:	4633      	mov	r3, r6
 8003eae:	462a      	mov	r2, r5
 8003eb0:	2180      	movs	r1, #128	; 0x80
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f7ff fe2a 	bl	8003b0c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	f43f af68 	beq.w	8003d8e <HAL_SPI_Transmit+0x102>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ebe:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ec0:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ec6:	6562      	str	r2, [r4, #84]	; 0x54
 8003ec8:	e761      	b.n	8003d8e <HAL_SPI_Transmit+0x102>
 8003eca:	bf00      	nop
 8003ecc:	20000018 	.word	0x20000018
 8003ed0:	165e9f81 	.word	0x165e9f81

08003ed4 <HAL_SPI_TransmitReceive>:
{
 8003ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ed8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003eda:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8003ede:	2801      	cmp	r0, #1
{
 8003ee0:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8003ee2:	f000 80a4 	beq.w	800402e <HAL_SPI_TransmitReceive+0x15a>
 8003ee6:	461f      	mov	r7, r3
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003eee:	4691      	mov	r9, r2
 8003ef0:	4688      	mov	r8, r1
 8003ef2:	f7fe fda1 	bl	8002a38 <HAL_GetTick>
  tmp_state           = hspi->State;
 8003ef6:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8003efa:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003efc:	2e01      	cmp	r6, #1
  tickstart = HAL_GetTick();
 8003efe:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8003f00:	b2f2      	uxtb	r2, r6
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f02:	d011      	beq.n	8003f28 <HAL_SPI_TransmitReceive+0x54>
 8003f04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f08:	d009      	beq.n	8003f1e <HAL_SPI_TransmitReceive+0x4a>
    errorcode = HAL_BUSY;
 8003f0a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003f0c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8003f0e:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8003f10:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f14:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003f18:	b003      	add	sp, #12
 8003f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f1e:	68a1      	ldr	r1, [r4, #8]
 8003f20:	2900      	cmp	r1, #0
 8003f22:	d1f2      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x36>
 8003f24:	2a04      	cmp	r2, #4
 8003f26:	d1f0      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f28:	f1b8 0f00 	cmp.w	r8, #0
 8003f2c:	f000 8083 	beq.w	8004036 <HAL_SPI_TransmitReceive+0x162>
 8003f30:	f1b9 0f00 	cmp.w	r9, #0
 8003f34:	d07f      	beq.n	8004036 <HAL_SPI_TransmitReceive+0x162>
 8003f36:	2f00      	cmp	r7, #0
 8003f38:	d07d      	beq.n	8004036 <HAL_SPI_TransmitReceive+0x162>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f3a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f3e:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f40:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f44:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f46:	bf1c      	itt	ne
 8003f48:	2205      	movne	r2, #5
 8003f4a:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f4e:	2200      	movs	r2, #0
 8003f50:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8003f52:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8003f54:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f56:	6801      	ldr	r1, [r0, #0]
  hspi->RxXferSize  = Size;
 8003f58:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 8003f5a:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f5e:	064a      	lsls	r2, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f60:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f64:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f66:	d403      	bmi.n	8003f70 <HAL_SPI_TransmitReceive+0x9c>
    __HAL_SPI_ENABLE(hspi);
 8003f68:	6802      	ldr	r2, [r0, #0]
 8003f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f6e:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f70:	68e2      	ldr	r2, [r4, #12]
 8003f72:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003f76:	f000 80ac 	beq.w	80040d2 <HAL_SPI_TransmitReceive+0x1fe>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 809e 	beq.w	80040bc <HAL_SPI_TransmitReceive+0x1e8>
 8003f80:	2f01      	cmp	r7, #1
 8003f82:	f000 809b 	beq.w	80040bc <HAL_SPI_TransmitReceive+0x1e8>
 8003f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f88:	3301      	adds	r3, #1
        txallowed = 1U;
 8003f8a:	f04f 0601 	mov.w	r6, #1
 8003f8e:	d028      	beq.n	8003fe2 <HAL_SPI_TransmitReceive+0x10e>
 8003f90:	e053      	b.n	800403a <HAL_SPI_TransmitReceive+0x166>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f92:	6822      	ldr	r2, [r4, #0]
 8003f94:	6893      	ldr	r3, [r2, #8]
 8003f96:	0798      	lsls	r0, r3, #30
 8003f98:	d50f      	bpl.n	8003fba <HAL_SPI_TransmitReceive+0xe6>
 8003f9a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	b163      	cbz	r3, 8003fba <HAL_SPI_TransmitReceive+0xe6>
 8003fa0:	b15e      	cbz	r6, 8003fba <HAL_SPI_TransmitReceive+0xe6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fa2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8003fa8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8003faa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003fac:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8003fb2:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 8003fb4:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8003fb6:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 8003fb8:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fba:	6893      	ldr	r3, [r2, #8]
 8003fbc:	f013 0301 	ands.w	r3, r3, #1
 8003fc0:	d00d      	beq.n	8003fde <HAL_SPI_TransmitReceive+0x10a>
 8003fc2:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8003fc4:	b289      	uxth	r1, r1
 8003fc6:	b151      	cbz	r1, 8003fde <HAL_SPI_TransmitReceive+0x10a>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fc8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003fca:	68d2      	ldr	r2, [r2, #12]
 8003fcc:	700a      	strb	r2, [r1, #0]
        hspi->RxXferCount--;
 8003fce:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8003fd0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003fd2:	3a01      	subs	r2, #1
 8003fd4:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr++;
 8003fd6:	3101      	adds	r1, #1
        txallowed = 1U;
 8003fd8:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8003fda:	87e2      	strh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8003fdc:	63a1      	str	r1, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fde:	f7fe fd2b 	bl	8002a38 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fe2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1d3      	bne.n	8003f92 <HAL_SPI_TransmitReceive+0xbe>
 8003fea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1cf      	bne.n	8003f92 <HAL_SPI_TransmitReceive+0xbe>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ff2:	4b79      	ldr	r3, [pc, #484]	; (80041d8 <HAL_SPI_TransmitReceive+0x304>)
 8003ff4:	4a79      	ldr	r2, [pc, #484]	; (80041dc <HAL_SPI_TransmitReceive+0x308>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ff8:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	0d5b      	lsrs	r3, r3, #21
 8004000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004004:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004008:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800400c:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800400e:	d146      	bne.n	800409e <HAL_SPI_TransmitReceive+0x1ca>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004012:	462b      	mov	r3, r5
 8004014:	2180      	movs	r1, #128	; 0x80
 8004016:	4620      	mov	r0, r4
 8004018:	f7ff fd78 	bl	8003b0c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800401c:	2800      	cmp	r0, #0
 800401e:	d041      	beq.n	80040a4 <HAL_SPI_TransmitReceive+0x1d0>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004020:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004022:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004024:	4313      	orrs	r3, r2
 8004026:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004028:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800402a:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 800402c:	e76e      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 800402e:	2002      	movs	r0, #2
}
 8004030:	b003      	add	sp, #12
 8004032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 8004036:	2001      	movs	r0, #1
 8004038:	e768      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800403a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800403c:	b29b      	uxth	r3, r3
 800403e:	b91b      	cbnz	r3, 8004048 <HAL_SPI_TransmitReceive+0x174>
 8004040:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0d4      	beq.n	8003ff2 <HAL_SPI_TransmitReceive+0x11e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004048:	6822      	ldr	r2, [r4, #0]
 800404a:	6893      	ldr	r3, [r2, #8]
 800404c:	0799      	lsls	r1, r3, #30
 800404e:	d50f      	bpl.n	8004070 <HAL_SPI_TransmitReceive+0x19c>
 8004050:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004052:	b29b      	uxth	r3, r3
 8004054:	b163      	cbz	r3, 8004070 <HAL_SPI_TransmitReceive+0x19c>
 8004056:	b15e      	cbz	r6, 8004070 <HAL_SPI_TransmitReceive+0x19c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004058:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 800405e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8004060:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004062:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8004064:	3b01      	subs	r3, #1
 8004066:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8004068:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 800406a:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800406c:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 800406e:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004070:	6893      	ldr	r3, [r2, #8]
 8004072:	f013 0301 	ands.w	r3, r3, #1
 8004076:	d003      	beq.n	8004080 <HAL_SPI_TransmitReceive+0x1ac>
 8004078:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800407a:	b289      	uxth	r1, r1
 800407c:	2900      	cmp	r1, #0
 800407e:	d167      	bne.n	8004150 <HAL_SPI_TransmitReceive+0x27c>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004080:	f7fe fcda 	bl	8002a38 <HAL_GetTick>
 8004084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004086:	1b40      	subs	r0, r0, r5
 8004088:	4298      	cmp	r0, r3
 800408a:	d3d6      	bcc.n	800403a <HAL_SPI_TransmitReceive+0x166>
        errorcode = HAL_TIMEOUT;
 800408c:	2003      	movs	r0, #3
 800408e:	e73d      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x38>
      count--;
 8004090:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004092:	6822      	ldr	r2, [r4, #0]
      count--;
 8004094:	3b01      	subs	r3, #1
 8004096:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004098:	6893      	ldr	r3, [r2, #8]
 800409a:	061b      	lsls	r3, r3, #24
 800409c:	d502      	bpl.n	80040a4 <HAL_SPI_TransmitReceive+0x1d0>
      if (count == 0U)
 800409e:	9b01      	ldr	r3, [sp, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1f5      	bne.n	8004090 <HAL_SPI_TransmitReceive+0x1bc>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040a4:	68a0      	ldr	r0, [r4, #8]
 80040a6:	2800      	cmp	r0, #0
 80040a8:	f040 8093 	bne.w	80041d2 <HAL_SPI_TransmitReceive+0x2fe>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	9000      	str	r0, [sp, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	9200      	str	r2, [sp, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	9b00      	ldr	r3, [sp, #0]
 80040ba:	e727      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x38>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040bc:	f898 3000 	ldrb.w	r3, [r8]
 80040c0:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80040c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040ca:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80040cc:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040ce:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80040d0:	e759      	b.n	8003f86 <HAL_SPI_TransmitReceive+0xb2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d148      	bne.n	8004168 <HAL_SPI_TransmitReceive+0x294>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d6:	4641      	mov	r1, r8
 80040d8:	f831 3b02 	ldrh.w	r3, [r1], #2
 80040dc:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 80040de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e0:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	86e3      	strh	r3, [r4, #54]	; 0x36
 80040e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040ea:	3301      	adds	r3, #1
{
 80040ec:	f04f 0601 	mov.w	r6, #1
 80040f0:	d025      	beq.n	800413e <HAL_SPI_TransmitReceive+0x26a>
 80040f2:	e03c      	b.n	800416e <HAL_SPI_TransmitReceive+0x29a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040f4:	6822      	ldr	r2, [r4, #0]
 80040f6:	6893      	ldr	r3, [r2, #8]
 80040f8:	079b      	lsls	r3, r3, #30
 80040fa:	d50d      	bpl.n	8004118 <HAL_SPI_TransmitReceive+0x244>
 80040fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80040fe:	b29b      	uxth	r3, r3
 8004100:	b153      	cbz	r3, 8004118 <HAL_SPI_TransmitReceive+0x244>
 8004102:	b14e      	cbz	r6, 8004118 <HAL_SPI_TransmitReceive+0x244>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004104:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004106:	f831 3b02 	ldrh.w	r3, [r1], #2
 800410a:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 800410c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800410e:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004110:	3b01      	subs	r3, #1
 8004112:	b29b      	uxth	r3, r3
 8004114:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004116:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004118:	6893      	ldr	r3, [r2, #8]
 800411a:	f013 0301 	ands.w	r3, r3, #1
 800411e:	d00c      	beq.n	800413a <HAL_SPI_TransmitReceive+0x266>
 8004120:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004122:	b289      	uxth	r1, r1
 8004124:	b149      	cbz	r1, 800413a <HAL_SPI_TransmitReceive+0x266>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004126:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004128:	68d2      	ldr	r2, [r2, #12]
 800412a:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 800412e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004130:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004132:	3a01      	subs	r2, #1
 8004134:	b292      	uxth	r2, r2
        txallowed = 1U;
 8004136:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8004138:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800413a:	f7fe fc7d 	bl	8002a38 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800413e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1d6      	bne.n	80040f4 <HAL_SPI_TransmitReceive+0x220>
 8004146:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1d2      	bne.n	80040f4 <HAL_SPI_TransmitReceive+0x220>
 800414e:	e750      	b.n	8003ff2 <HAL_SPI_TransmitReceive+0x11e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004150:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004152:	68d2      	ldr	r2, [r2, #12]
 8004154:	700a      	strb	r2, [r1, #0]
        hspi->RxXferCount--;
 8004156:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8004158:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800415a:	3a01      	subs	r2, #1
 800415c:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr++;
 800415e:	3101      	adds	r1, #1
        txallowed = 1U;
 8004160:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8004162:	87e2      	strh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8004164:	63a1      	str	r1, [r4, #56]	; 0x38
        txallowed = 1U;
 8004166:	e78b      	b.n	8004080 <HAL_SPI_TransmitReceive+0x1ac>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004168:	2f01      	cmp	r7, #1
 800416a:	d1bd      	bne.n	80040e8 <HAL_SPI_TransmitReceive+0x214>
 800416c:	e7b3      	b.n	80040d6 <HAL_SPI_TransmitReceive+0x202>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800416e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004170:	b29b      	uxth	r3, r3
 8004172:	b923      	cbnz	r3, 800417e <HAL_SPI_TransmitReceive+0x2aa>
 8004174:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	f43f af3a 	beq.w	8003ff2 <HAL_SPI_TransmitReceive+0x11e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800417e:	6822      	ldr	r2, [r4, #0]
 8004180:	6893      	ldr	r3, [r2, #8]
 8004182:	079f      	lsls	r7, r3, #30
 8004184:	d50d      	bpl.n	80041a2 <HAL_SPI_TransmitReceive+0x2ce>
 8004186:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004188:	b29b      	uxth	r3, r3
 800418a:	b153      	cbz	r3, 80041a2 <HAL_SPI_TransmitReceive+0x2ce>
 800418c:	b14e      	cbz	r6, 80041a2 <HAL_SPI_TransmitReceive+0x2ce>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800418e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004190:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004194:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8004196:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004198:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800419a:	3b01      	subs	r3, #1
 800419c:	b29b      	uxth	r3, r3
 800419e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80041a0:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041a2:	6893      	ldr	r3, [r2, #8]
 80041a4:	f013 0301 	ands.w	r3, r3, #1
 80041a8:	d00c      	beq.n	80041c4 <HAL_SPI_TransmitReceive+0x2f0>
 80041aa:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80041ac:	b289      	uxth	r1, r1
 80041ae:	b149      	cbz	r1, 80041c4 <HAL_SPI_TransmitReceive+0x2f0>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80041b2:	68d2      	ldr	r2, [r2, #12]
 80041b4:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 80041b8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041ba:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80041bc:	3a01      	subs	r2, #1
 80041be:	b292      	uxth	r2, r2
        txallowed = 1U;
 80041c0:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 80041c2:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041c4:	f7fe fc38 	bl	8002a38 <HAL_GetTick>
 80041c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041ca:	1b40      	subs	r0, r0, r5
 80041cc:	4298      	cmp	r0, r3
 80041ce:	d3ce      	bcc.n	800416e <HAL_SPI_TransmitReceive+0x29a>
 80041d0:	e75c      	b.n	800408c <HAL_SPI_TransmitReceive+0x1b8>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041d2:	2000      	movs	r0, #0
 80041d4:	e69a      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x38>
 80041d6:	bf00      	nop
 80041d8:	20000018 	.word	0x20000018
 80041dc:	165e9f81 	.word	0x165e9f81

080041e0 <HAL_SPI_Receive>:
{
 80041e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80041e4:	6846      	ldr	r6, [r0, #4]
 80041e6:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
{
 80041ea:	b083      	sub	sp, #12
 80041ec:	4604      	mov	r4, r0
 80041ee:	4691      	mov	r9, r2
 80041f0:	461d      	mov	r5, r3
 80041f2:	4688      	mov	r8, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80041f4:	d06d      	beq.n	80042d2 <HAL_SPI_Receive+0xf2>
  __HAL_LOCK(hspi);
 80041f6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d075      	beq.n	80042ea <HAL_SPI_Receive+0x10a>
 80041fe:	2301      	movs	r3, #1
 8004200:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004204:	f7fe fc18 	bl	8002a38 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004208:	f894 7051 	ldrb.w	r7, [r4, #81]	; 0x51
 800420c:	2f01      	cmp	r7, #1
  tickstart = HAL_GetTick();
 800420e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004210:	b2f8      	uxtb	r0, r7
 8004212:	d009      	beq.n	8004228 <HAL_SPI_Receive+0x48>
    errorcode = HAL_BUSY;
 8004214:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004216:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8004218:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800421a:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800421e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004222:	b003      	add	sp, #12
 8004224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 8004228:	f1b8 0f00 	cmp.w	r8, #0
 800422c:	d0f3      	beq.n	8004216 <HAL_SPI_Receive+0x36>
 800422e:	f1b9 0f00 	cmp.w	r9, #0
 8004232:	d0f0      	beq.n	8004216 <HAL_SPI_Receive+0x36>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004234:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8004236:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004238:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800423c:	2304      	movs	r3, #4
 800423e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004242:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 800424c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004250:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004254:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004258:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800425a:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800425c:	86e3      	strh	r3, [r4, #54]	; 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800425e:	d107      	bne.n	8004270 <HAL_SPI_Receive+0x90>
    __HAL_SPI_DISABLE(hspi);
 8004260:	680b      	ldr	r3, [r1, #0]
 8004262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004266:	600b      	str	r3, [r1, #0]
    SPI_1LINE_RX(hspi);
 8004268:	680b      	ldr	r3, [r1, #0]
 800426a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800426e:	600b      	str	r3, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004270:	680a      	ldr	r2, [r1, #0]
 8004272:	0650      	lsls	r0, r2, #25
    __HAL_SPI_DISABLE(hspi);
 8004274:	460b      	mov	r3, r1
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004276:	d403      	bmi.n	8004280 <HAL_SPI_Receive+0xa0>
    __HAL_SPI_ENABLE(hspi);
 8004278:	680a      	ldr	r2, [r1, #0]
 800427a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800427e:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004280:	68e2      	ldr	r2, [r4, #12]
 8004282:	2a00      	cmp	r2, #0
 8004284:	d055      	beq.n	8004332 <HAL_SPI_Receive+0x152>
    while (hspi->RxXferCount > 0U)
 8004286:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004288:	b292      	uxth	r2, r2
 800428a:	b18a      	cbz	r2, 80042b0 <HAL_SPI_Receive+0xd0>
 800428c:	1c6a      	adds	r2, r5, #1
 800428e:	d13e      	bne.n	800430e <HAL_SPI_Receive+0x12e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004290:	688b      	ldr	r3, [r1, #8]
 8004292:	07db      	lsls	r3, r3, #31
 8004294:	d545      	bpl.n	8004322 <HAL_SPI_Receive+0x142>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004296:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004298:	68ca      	ldr	r2, [r1, #12]
 800429a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->RxXferCount--;
 800429e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042a0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80042a2:	3a01      	subs	r2, #1
 80042a4:	b292      	uxth	r2, r2
 80042a6:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 80042a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1ef      	bne.n	8004290 <HAL_SPI_Receive+0xb0>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042b0:	6863      	ldr	r3, [r4, #4]
 80042b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b6:	d074      	beq.n	80043a2 <HAL_SPI_Receive+0x1c2>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042b8:	4633      	mov	r3, r6
 80042ba:	462a      	mov	r2, r5
 80042bc:	2101      	movs	r1, #1
 80042be:	4620      	mov	r0, r4
 80042c0:	f7ff fc24 	bl	8003b0c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80042c4:	2800      	cmp	r0, #0
 80042c6:	d17b      	bne.n	80043c0 <HAL_SPI_Receive+0x1e0>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80042ca:	3800      	subs	r0, #0
 80042cc:	bf18      	it	ne
 80042ce:	2001      	movne	r0, #1
error :
 80042d0:	e7a1      	b.n	8004216 <HAL_SPI_Receive+0x36>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80042d2:	6883      	ldr	r3, [r0, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d18e      	bne.n	80041f6 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042d8:	2604      	movs	r6, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042da:	9500      	str	r5, [sp, #0]
 80042dc:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042de:	f880 6051 	strb.w	r6, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042e2:	460a      	mov	r2, r1
 80042e4:	f7ff fdf6 	bl	8003ed4 <HAL_SPI_TransmitReceive>
 80042e8:	e79b      	b.n	8004222 <HAL_SPI_Receive+0x42>
  __HAL_LOCK(hspi);
 80042ea:	2002      	movs	r0, #2
}
 80042ec:	b003      	add	sp, #12
 80042ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 80042fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042fc:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29b      	uxth	r3, r3
 8004302:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8004304:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0d1      	beq.n	80042b0 <HAL_SPI_Receive+0xd0>
 800430c:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	07d2      	lsls	r2, r2, #31
 8004312:	d4ee      	bmi.n	80042f2 <HAL_SPI_Receive+0x112>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004314:	f7fe fb90 	bl	8002a38 <HAL_GetTick>
 8004318:	1b80      	subs	r0, r0, r6
 800431a:	42a8      	cmp	r0, r5
 800431c:	d3f2      	bcc.n	8004304 <HAL_SPI_Receive+0x124>
          errorcode = HAL_TIMEOUT;
 800431e:	2003      	movs	r0, #3
 8004320:	e779      	b.n	8004216 <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004322:	f7fe fb89 	bl	8002a38 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 8004326:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0c0      	beq.n	80042b0 <HAL_SPI_Receive+0xd0>
 800432e:	6821      	ldr	r1, [r4, #0]
 8004330:	e7ae      	b.n	8004290 <HAL_SPI_Receive+0xb0>
    while (hspi->RxXferCount > 0U)
 8004332:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004334:	b292      	uxth	r2, r2
 8004336:	2a00      	cmp	r2, #0
 8004338:	d0ba      	beq.n	80042b0 <HAL_SPI_Receive+0xd0>
 800433a:	1c6f      	adds	r7, r5, #1
 800433c:	d00f      	beq.n	800435e <HAL_SPI_Receive+0x17e>
 800433e:	e027      	b.n	8004390 <HAL_SPI_Receive+0x1b0>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004340:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004342:	7b1b      	ldrb	r3, [r3, #12]
 8004344:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8004346:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004348:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800434a:	3a01      	subs	r2, #1
 800434c:	b292      	uxth	r2, r2
 800434e:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8004350:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004352:	3101      	adds	r1, #1
    while (hspi->RxXferCount > 0U)
 8004354:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004356:	63a1      	str	r1, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0a9      	beq.n	80042b0 <HAL_SPI_Receive+0xd0>
 800435c:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	07d0      	lsls	r0, r2, #31
 8004362:	d4ed      	bmi.n	8004340 <HAL_SPI_Receive+0x160>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004364:	f7fe fb68 	bl	8002a38 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 8004368:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f5      	bne.n	800435c <HAL_SPI_Receive+0x17c>
 8004370:	e79e      	b.n	80042b0 <HAL_SPI_Receive+0xd0>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004372:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004374:	7b1b      	ldrb	r3, [r3, #12]
 8004376:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8004378:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800437a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800437c:	3b01      	subs	r3, #1
 800437e:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004380:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8004382:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004384:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 8004386:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d090      	beq.n	80042b0 <HAL_SPI_Receive+0xd0>
 800438e:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	07d1      	lsls	r1, r2, #31
 8004394:	d4ed      	bmi.n	8004372 <HAL_SPI_Receive+0x192>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004396:	f7fe fb4f 	bl	8002a38 <HAL_GetTick>
 800439a:	1b80      	subs	r0, r0, r6
 800439c:	42a8      	cmp	r0, r5
 800439e:	d3f2      	bcc.n	8004386 <HAL_SPI_Receive+0x1a6>
 80043a0:	e7bd      	b.n	800431e <HAL_SPI_Receive+0x13e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043a2:	68a3      	ldr	r3, [r4, #8]
 80043a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a8:	d020      	beq.n	80043ec <HAL_SPI_Receive+0x20c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ae:	d00e      	beq.n	80043ce <HAL_SPI_Receive+0x1ee>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043b0:	4633      	mov	r3, r6
 80043b2:	462a      	mov	r2, r5
 80043b4:	2180      	movs	r1, #128	; 0x80
 80043b6:	4620      	mov	r0, r4
 80043b8:	f7ff fba8 	bl	8003b0c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80043bc:	2800      	cmp	r0, #0
 80043be:	d083      	beq.n	80042c8 <HAL_SPI_Receive+0xe8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043c2:	f043 0320 	orr.w	r3, r3, #32
 80043c6:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043c8:	2320      	movs	r3, #32
 80043ca:	6563      	str	r3, [r4, #84]	; 0x54
 80043cc:	e77c      	b.n	80042c8 <HAL_SPI_Receive+0xe8>
    __HAL_SPI_DISABLE(hspi);
 80043ce:	6820      	ldr	r0, [r4, #0]
 80043d0:	6801      	ldr	r1, [r0, #0]
 80043d2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80043d6:	6001      	str	r1, [r0, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043d8:	4633      	mov	r3, r6
 80043da:	462a      	mov	r2, r5
 80043dc:	2101      	movs	r1, #1
 80043de:	4620      	mov	r0, r4
 80043e0:	f7ff fb94 	bl	8003b0c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	f43f af6f 	beq.w	80042c8 <HAL_SPI_Receive+0xe8>
 80043ea:	e7e9      	b.n	80043c0 <HAL_SPI_Receive+0x1e0>
    __HAL_SPI_DISABLE(hspi);
 80043ec:	6822      	ldr	r2, [r4, #0]
 80043ee:	6813      	ldr	r3, [r2, #0]
 80043f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f4:	6013      	str	r3, [r2, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80043f6:	e7db      	b.n	80043b0 <HAL_SPI_Receive+0x1d0>

080043f8 <HAL_SPI_GetState>:
  return hspi->State;
 80043f8:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop

08004400 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004400:	2800      	cmp	r0, #0
 8004402:	d076      	beq.n	80044f2 <HAL_TIM_Base_Init+0xf2>
{
 8004404:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004406:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800440a:	4604      	mov	r4, r0
 800440c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004410:	2b00      	cmp	r3, #0
 8004412:	d055      	beq.n	80044c0 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004414:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004416:	4938      	ldr	r1, [pc, #224]	; (80044f8 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004418:	2302      	movs	r3, #2
 800441a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800441e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004420:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004422:	d052      	beq.n	80044ca <HAL_TIM_Base_Init+0xca>
 8004424:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004428:	d021      	beq.n	800446e <HAL_TIM_Base_Init+0x6e>
 800442a:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 800442e:	428a      	cmp	r2, r1
 8004430:	d01d      	beq.n	800446e <HAL_TIM_Base_Init+0x6e>
 8004432:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004436:	428a      	cmp	r2, r1
 8004438:	d019      	beq.n	800446e <HAL_TIM_Base_Init+0x6e>
 800443a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800443e:	428a      	cmp	r2, r1
 8004440:	d015      	beq.n	800446e <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004442:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8004446:	428a      	cmp	r2, r1
 8004448:	d015      	beq.n	8004476 <HAL_TIM_Base_Init+0x76>
 800444a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800444e:	428a      	cmp	r2, r1
 8004450:	d011      	beq.n	8004476 <HAL_TIM_Base_Init+0x76>
 8004452:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004456:	428a      	cmp	r2, r1
 8004458:	d00d      	beq.n	8004476 <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800445a:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800445c:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800445e:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004464:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004466:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004468:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800446a:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800446c:	e010      	b.n	8004490 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 800446e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004474:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004476:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004478:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800447a:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800447c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004480:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004486:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004488:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800448a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800448c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800448e:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004490:	2301      	movs	r3, #1
 8004492:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004494:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004498:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800449c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80044a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80044a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80044b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80044bc:	2000      	movs	r0, #0
}
 80044be:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 80044c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80044c4:	f7fe f8a8 	bl	8002618 <HAL_TIM_Base_MspInit>
 80044c8:	e7a4      	b.n	8004414 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80044ca:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044cc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044ce:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80044d4:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80044d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044da:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044e0:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80044e2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044e4:	68e3      	ldr	r3, [r4, #12]
 80044e6:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80044e8:	6863      	ldr	r3, [r4, #4]
 80044ea:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80044ec:	6963      	ldr	r3, [r4, #20]
 80044ee:	6313      	str	r3, [r2, #48]	; 0x30
 80044f0:	e7ce      	b.n	8004490 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 80044f2:	2001      	movs	r0, #1
}
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40010000 	.word	0x40010000

080044fc <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80044fc:	2800      	cmp	r0, #0
 80044fe:	d076      	beq.n	80045ee <HAL_TIM_OC_Init+0xf2>
{
 8004500:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004502:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004506:	4604      	mov	r4, r0
 8004508:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800450c:	2b00      	cmp	r3, #0
 800450e:	d055      	beq.n	80045bc <HAL_TIM_OC_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004510:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004512:	4938      	ldr	r1, [pc, #224]	; (80045f4 <HAL_TIM_OC_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	2302      	movs	r3, #2
 8004516:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800451a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800451c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800451e:	d052      	beq.n	80045c6 <HAL_TIM_OC_Init+0xca>
 8004520:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004524:	d021      	beq.n	800456a <HAL_TIM_OC_Init+0x6e>
 8004526:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 800452a:	428a      	cmp	r2, r1
 800452c:	d01d      	beq.n	800456a <HAL_TIM_OC_Init+0x6e>
 800452e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004532:	428a      	cmp	r2, r1
 8004534:	d019      	beq.n	800456a <HAL_TIM_OC_Init+0x6e>
 8004536:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800453a:	428a      	cmp	r2, r1
 800453c:	d015      	beq.n	800456a <HAL_TIM_OC_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800453e:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8004542:	428a      	cmp	r2, r1
 8004544:	d015      	beq.n	8004572 <HAL_TIM_OC_Init+0x76>
 8004546:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800454a:	428a      	cmp	r2, r1
 800454c:	d011      	beq.n	8004572 <HAL_TIM_OC_Init+0x76>
 800454e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004552:	428a      	cmp	r2, r1
 8004554:	d00d      	beq.n	8004572 <HAL_TIM_OC_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004556:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004558:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800455a:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800455c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004560:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004562:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004564:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004566:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004568:	e010      	b.n	800458c <HAL_TIM_OC_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 800456a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800456c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004570:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004572:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004574:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004576:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800457c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800457e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004582:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004584:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004586:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004588:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800458a:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800458c:	2301      	movs	r3, #1
 800458e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004590:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004594:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004598:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800459c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80045a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80045b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80045b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80045b8:	2000      	movs	r0, #0
}
 80045ba:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 80045bc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80045c0:	f7fe f86e 	bl	80026a0 <HAL_TIM_OC_MspInit>
 80045c4:	e7a4      	b.n	8004510 <HAL_TIM_OC_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80045c6:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045c8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045ca:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80045d0:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80045d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045dc:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80045de:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045e0:	68e3      	ldr	r3, [r4, #12]
 80045e2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80045e4:	6863      	ldr	r3, [r4, #4]
 80045e6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80045e8:	6963      	ldr	r3, [r4, #20]
 80045ea:	6313      	str	r3, [r2, #48]	; 0x30
 80045ec:	e7ce      	b.n	800458c <HAL_TIM_OC_Init+0x90>
    return HAL_ERROR;
 80045ee:	2001      	movs	r0, #1
}
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40010000 	.word	0x40010000

080045f8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80045f8:	2800      	cmp	r0, #0
 80045fa:	d076      	beq.n	80046ea <HAL_TIM_PWM_Init+0xf2>
{
 80045fc:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80045fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004602:	4604      	mov	r4, r0
 8004604:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004608:	2b00      	cmp	r3, #0
 800460a:	d055      	beq.n	80046b8 <HAL_TIM_PWM_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800460c:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800460e:	4938      	ldr	r1, [pc, #224]	; (80046f0 <HAL_TIM_PWM_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	2302      	movs	r3, #2
 8004612:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004616:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004618:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800461a:	d052      	beq.n	80046c2 <HAL_TIM_PWM_Init+0xca>
 800461c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004620:	d021      	beq.n	8004666 <HAL_TIM_PWM_Init+0x6e>
 8004622:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8004626:	428a      	cmp	r2, r1
 8004628:	d01d      	beq.n	8004666 <HAL_TIM_PWM_Init+0x6e>
 800462a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800462e:	428a      	cmp	r2, r1
 8004630:	d019      	beq.n	8004666 <HAL_TIM_PWM_Init+0x6e>
 8004632:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004636:	428a      	cmp	r2, r1
 8004638:	d015      	beq.n	8004666 <HAL_TIM_PWM_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800463a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800463e:	428a      	cmp	r2, r1
 8004640:	d015      	beq.n	800466e <HAL_TIM_PWM_Init+0x76>
 8004642:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004646:	428a      	cmp	r2, r1
 8004648:	d011      	beq.n	800466e <HAL_TIM_PWM_Init+0x76>
 800464a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800464e:	428a      	cmp	r2, r1
 8004650:	d00d      	beq.n	800466e <HAL_TIM_PWM_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004652:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004654:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8004656:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800465c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800465e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004660:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004662:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004664:	e010      	b.n	8004688 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8004666:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800466c:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800466e:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004670:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004672:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004678:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800467a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800467e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004680:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004682:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004684:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004686:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004688:	2301      	movs	r3, #1
 800468a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800468c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004690:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004694:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004698:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800469c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046a8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80046ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80046b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80046b4:	2000      	movs	r0, #0
}
 80046b6:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 80046b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80046bc:	f7fd ffc4 	bl	8002648 <HAL_TIM_PWM_MspInit>
 80046c0:	e7a4      	b.n	800460c <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80046c2:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046c4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046c6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80046cc:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046d2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80046da:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046dc:	68e3      	ldr	r3, [r4, #12]
 80046de:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80046e0:	6863      	ldr	r3, [r4, #4]
 80046e2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80046e4:	6963      	ldr	r3, [r4, #20]
 80046e6:	6313      	str	r3, [r2, #48]	; 0x30
 80046e8:	e7ce      	b.n	8004688 <HAL_TIM_PWM_Init+0x90>
    return HAL_ERROR;
 80046ea:	2001      	movs	r0, #1
}
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40010000 	.word	0x40010000

080046f4 <HAL_TIM_PWM_Start>:
 80046f4:	2900      	cmp	r1, #0
 80046f6:	d136      	bne.n	8004766 <HAL_TIM_PWM_Start+0x72>
 80046f8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d13a      	bne.n	8004776 <HAL_TIM_PWM_Start+0x82>
 8004700:	2302      	movs	r3, #2
 8004702:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8004706:	6803      	ldr	r3, [r0, #0]
 8004708:	2201      	movs	r2, #1
 800470a:	6a18      	ldr	r0, [r3, #32]
 800470c:	f001 011f 	and.w	r1, r1, #31
 8004710:	fa02 f101 	lsl.w	r1, r2, r1
 8004714:	ea20 0001 	bic.w	r0, r0, r1
 8004718:	b410      	push	{r4}
 800471a:	6218      	str	r0, [r3, #32]
 800471c:	6a1a      	ldr	r2, [r3, #32]
 800471e:	4c27      	ldr	r4, [pc, #156]	; (80047bc <HAL_TIM_PWM_Start+0xc8>)
 8004720:	4311      	orrs	r1, r2
 8004722:	42a3      	cmp	r3, r4
 8004724:	6219      	str	r1, [r3, #32]
 8004726:	d02c      	beq.n	8004782 <HAL_TIM_PWM_Start+0x8e>
 8004728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472c:	d00e      	beq.n	800474c <HAL_TIM_PWM_Start+0x58>
 800472e:	4a24      	ldr	r2, [pc, #144]	; (80047c0 <HAL_TIM_PWM_Start+0xcc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00b      	beq.n	800474c <HAL_TIM_PWM_Start+0x58>
 8004734:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004738:	4293      	cmp	r3, r2
 800473a:	d007      	beq.n	800474c <HAL_TIM_PWM_Start+0x58>
 800473c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004740:	4293      	cmp	r3, r2
 8004742:	d003      	beq.n	800474c <HAL_TIM_PWM_Start+0x58>
 8004744:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004748:	4293      	cmp	r3, r2
 800474a:	d104      	bne.n	8004756 <HAL_TIM_PWM_Start+0x62>
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	f002 0207 	and.w	r2, r2, #7
 8004752:	2a06      	cmp	r2, #6
 8004754:	d01e      	beq.n	8004794 <HAL_TIM_PWM_Start+0xa0>
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800475c:	f042 0201 	orr.w	r2, r2, #1
 8004760:	2000      	movs	r0, #0
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	4770      	bx	lr
 8004766:	2904      	cmp	r1, #4
 8004768:	d018      	beq.n	800479c <HAL_TIM_PWM_Start+0xa8>
 800476a:	2908      	cmp	r1, #8
 800476c:	d01e      	beq.n	80047ac <HAL_TIM_PWM_Start+0xb8>
 800476e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004772:	2b01      	cmp	r3, #1
 8004774:	d001      	beq.n	800477a <HAL_TIM_PWM_Start+0x86>
 8004776:	2001      	movs	r0, #1
 8004778:	4770      	bx	lr
 800477a:	2302      	movs	r3, #2
 800477c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8004780:	e7c1      	b.n	8004706 <HAL_TIM_PWM_Start+0x12>
 8004782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004784:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004788:	645a      	str	r2, [r3, #68]	; 0x44
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	f002 0207 	and.w	r2, r2, #7
 8004790:	2a06      	cmp	r2, #6
 8004792:	d1e0      	bne.n	8004756 <HAL_TIM_PWM_Start+0x62>
 8004794:	2000      	movs	r0, #0
 8004796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d1e8      	bne.n	8004776 <HAL_TIM_PWM_Start+0x82>
 80047a4:	2302      	movs	r3, #2
 80047a6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80047aa:	e7ac      	b.n	8004706 <HAL_TIM_PWM_Start+0x12>
 80047ac:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d1e0      	bne.n	8004776 <HAL_TIM_PWM_Start+0x82>
 80047b4:	2302      	movs	r3, #2
 80047b6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80047ba:	e7a4      	b.n	8004706 <HAL_TIM_PWM_Start+0x12>
 80047bc:	40010000 	.word	0x40010000
 80047c0:	40000400 	.word	0x40000400

080047c4 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80047c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	f000 809a 	beq.w	8004902 <HAL_TIM_OC_ConfigChannel+0x13e>
 80047ce:	2301      	movs	r3, #1
{
 80047d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80047d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80047d6:	2a0c      	cmp	r2, #12
 80047d8:	d808      	bhi.n	80047ec <HAL_TIM_OC_ConfigChannel+0x28>
 80047da:	e8df f002 	tbb	[pc, r2]
 80047de:	072f      	.short	0x072f
 80047e0:	07500707 	.word	0x07500707
 80047e4:	07710707 	.word	0x07710707
 80047e8:	0707      	.short	0x0707
 80047ea:	0d          	.byte	0x0d
 80047eb:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80047ec:	2200      	movs	r2, #0
  __HAL_LOCK(htim);
 80047ee:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80047f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047f8:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047fa:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047fe:	6a13      	ldr	r3, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004800:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004802:	4e5a      	ldr	r6, [pc, #360]	; (800496c <HAL_TIM_OC_ConfigChannel+0x1a8>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004804:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004808:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 800480a:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800480c:	6853      	ldr	r3, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 800480e:	69d5      	ldr	r5, [r2, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8004810:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004814:	f425 45e6 	bic.w	r5, r5, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004818:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800481a:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800481e:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004822:	f000 808e 	beq.w	8004942 <HAL_TIM_OC_ConfigChannel+0x17e>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004826:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004828:	6053      	str	r3, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 800482a:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800482c:	6411      	str	r1, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482e:	6214      	str	r4, [r2, #32]
  __HAL_UNLOCK(htim);
 8004830:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004832:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8004834:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8004838:	4618      	mov	r0, r3
 800483a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800483c:	6802      	ldr	r2, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 800483e:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004842:	6a13      	ldr	r3, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8004844:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004846:	4e49      	ldr	r6, [pc, #292]	; (800496c <HAL_TIM_OC_ConfigChannel+0x1a8>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004848:	f023 0301 	bic.w	r3, r3, #1
 800484c:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 800484e:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004850:	6853      	ldr	r3, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8004852:	6995      	ldr	r5, [r2, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8004854:	f024 0402 	bic.w	r4, r4, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004858:	f025 0573 	bic.w	r5, r5, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800485c:	42b2      	cmp	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 800485e:	ea44 040e 	orr.w	r4, r4, lr
  tmpccmrx |= OC_Config->OCMode;
 8004862:	ea45 0507 	orr.w	r5, r5, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004866:	d04f      	beq.n	8004908 <HAL_TIM_OC_ConfigChannel+0x144>
  TIMx->CCR1 = OC_Config->Pulse;
 8004868:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800486a:	6053      	str	r3, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 800486c:	6195      	str	r5, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800486e:	6351      	str	r1, [r2, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8004870:	6214      	str	r4, [r2, #32]
  __HAL_UNLOCK(htim);
 8004872:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004874:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8004876:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 800487a:	4618      	mov	r0, r3
 800487c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800487e:	6802      	ldr	r2, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004880:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004884:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004886:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004888:	4e38      	ldr	r6, [pc, #224]	; (800496c <HAL_TIM_OC_ConfigChannel+0x1a8>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800488a:	f025 0510 	bic.w	r5, r5, #16
 800488e:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 8004890:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004892:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8004894:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8004896:	f024 0420 	bic.w	r4, r4, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800489a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800489e:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048a0:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048a4:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048a8:	d03c      	beq.n	8004924 <HAL_TIM_OC_ConfigChannel+0x160>
  TIMx->CCR2 = OC_Config->Pulse;
 80048aa:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80048ac:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80048ae:	6197      	str	r7, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80048b0:	6391      	str	r1, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80048b2:	6214      	str	r4, [r2, #32]
  __HAL_UNLOCK(htim);
 80048b4:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80048b6:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 80048b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 80048bc:	4618      	mov	r0, r3
 80048be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048c0:	6802      	ldr	r2, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048c2:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048c6:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 80048c8:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048ca:	4e28      	ldr	r6, [pc, #160]	; (800496c <HAL_TIM_OC_ConfigChannel+0x1a8>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048cc:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 80048d0:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 80048d2:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80048d4:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80048d6:	69d3      	ldr	r3, [r2, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80048d8:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048dc:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048e0:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048e2:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80048e6:	ea47 0703 	orr.w	r7, r7, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048ea:	d030      	beq.n	800494e <HAL_TIM_OC_ConfigChannel+0x18a>
  TIMx->CCR3 = OC_Config->Pulse;
 80048ec:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80048ee:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 80048f0:	61d7      	str	r7, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80048f2:	63d1      	str	r1, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80048f4:	6214      	str	r4, [r2, #32]
  __HAL_UNLOCK(htim);
 80048f6:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80048f8:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 80048fa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 80048fe:	4618      	mov	r0, r3
 8004900:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8004902:	2302      	movs	r3, #2
}
 8004904:	4618      	mov	r0, r3
 8004906:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004908:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 800490c:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 800490e:	698e      	ldr	r6, [r1, #24]
 8004910:	694b      	ldr	r3, [r1, #20]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004912:	f024 0408 	bic.w	r4, r4, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004916:	433c      	orrs	r4, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8004918:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800491a:	f024 0404 	bic.w	r4, r4, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800491e:	ea43 030c 	orr.w	r3, r3, ip
 8004922:	e7a1      	b.n	8004868 <HAL_TIM_OC_ConfigChannel+0xa4>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004924:	e9d1 3605 	ldrd	r3, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004928:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800492c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800492e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004932:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004936:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004938:	f024 0440 	bic.w	r4, r4, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800493c:	ea4c 0583 	orr.w	r5, ip, r3, lsl #2
 8004940:	e7b3      	b.n	80048aa <HAL_TIM_OC_ConfigChannel+0xe6>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004942:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004948:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800494c:	e76b      	b.n	8004826 <HAL_TIM_OC_ConfigChannel+0x62>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800494e:	e9d1 3605 	ldrd	r3, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004952:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004956:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004958:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800495c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004960:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004962:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004966:	ea4c 1503 	orr.w	r5, ip, r3, lsl #4
 800496a:	e7bf      	b.n	80048ec <HAL_TIM_OC_ConfigChannel+0x128>
 800496c:	40010000 	.word	0x40010000

08004970 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004970:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004974:	2b01      	cmp	r3, #1
 8004976:	f000 80d4 	beq.w	8004b22 <HAL_TIM_PWM_ConfigChannel+0x1b2>
 800497a:	2301      	movs	r3, #1
{
 800497c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800497e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004982:	2a0c      	cmp	r2, #12
 8004984:	d808      	bhi.n	8004998 <HAL_TIM_PWM_ConfigChannel+0x28>
 8004986:	e8df f002 	tbb	[pc, r2]
 800498a:	073e      	.short	0x073e
 800498c:	076d0707 	.word	0x076d0707
 8004990:	079d0707 	.word	0x079d0707
 8004994:	0707      	.short	0x0707
 8004996:	0d          	.byte	0x0d
 8004997:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8004998:	2200      	movs	r2, #0
  __HAL_LOCK(htim);
 800499a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800499c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049a4:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049a6:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049a8:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049aa:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ac:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8004b8c <HAL_TIM_PWM_ConfigChannel+0x21c>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049b0:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 80049b4:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80049b6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80049b8:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80049bc:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80049be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049c2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c6:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049c8:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049cc:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d0:	f000 80c7 	beq.w	8004b62 <HAL_TIM_PWM_ConfigChannel+0x1f2>
  TIMx->CCR4 = OC_Config->Pulse;
 80049d4:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80049d6:	f8c3 e004 	str.w	lr, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80049da:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80049dc:	641d      	str	r5, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80049de:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049e0:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049e2:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049e4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80049e8:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049ea:	69d9      	ldr	r1, [r3, #28]
 80049ec:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80049f0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049f2:	69da      	ldr	r2, [r3, #28]
 80049f4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80049f8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80049fa:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80049fc:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 80049fe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a06:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8004a08:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a0c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8004a0e:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a10:	4e5e      	ldr	r6, [pc, #376]	; (8004b8c <HAL_TIM_PWM_ConfigChannel+0x21c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a12:	f025 0501 	bic.w	r5, r5, #1
 8004a16:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004a18:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004a1a:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004a1e:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8004a20:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a24:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a28:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8004a2a:	ea42 020e 	orr.w	r2, r2, lr
  tmpccmrx |= OC_Config->OCMode;
 8004a2e:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a32:	d079      	beq.n	8004b28 <HAL_TIM_PWM_ConfigChannel+0x1b8>
  TIMx->CCR1 = OC_Config->Pulse;
 8004a34:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004a36:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004a3a:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004a3c:	635d      	str	r5, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8004a3e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a40:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a42:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a44:	f044 0408 	orr.w	r4, r4, #8
 8004a48:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a4a:	6999      	ldr	r1, [r3, #24]
 8004a4c:	f021 0104 	bic.w	r1, r1, #4
 8004a50:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a52:	699a      	ldr	r2, [r3, #24]
 8004a54:	432a      	orrs	r2, r5
 8004a56:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004a58:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8004a5c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a64:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a66:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a68:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a6a:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a6c:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8004b8c <HAL_TIM_PWM_ConfigChannel+0x21c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a70:	f025 0510 	bic.w	r5, r5, #16
 8004a74:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004a76:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004a78:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004a7c:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8004a7e:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a82:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a86:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a88:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a8c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a90:	d058      	beq.n	8004b44 <HAL_TIM_PWM_ConfigChannel+0x1d4>
  TIMx->CCR2 = OC_Config->Pulse;
 8004a92:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004a94:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004a98:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004a9a:	639d      	str	r5, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004a9c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a9e:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004aa0:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004aa2:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8004aa6:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004aa8:	6999      	ldr	r1, [r3, #24]
 8004aaa:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004aae:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004ab6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004ab8:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004aba:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8004abc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ac4:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ac6:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ac8:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8004aca:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004acc:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 8004b8c <HAL_TIM_PWM_ConfigChannel+0x21c>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ad0:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8004ad4:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004ad6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004ad8:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004adc:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8004ade:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ae2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ae6:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ae8:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8004aec:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004af0:	d03d      	beq.n	8004b6e <HAL_TIM_PWM_ConfigChannel+0x1fe>
  TIMx->CCR3 = OC_Config->Pulse;
 8004af2:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004af4:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004af8:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004afa:	63dd      	str	r5, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004afc:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004afe:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b00:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b02:	f044 0408 	orr.w	r4, r4, #8
 8004b06:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b08:	69d9      	ldr	r1, [r3, #28]
 8004b0a:	f021 0104 	bic.w	r1, r1, #4
 8004b0e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b10:	69da      	ldr	r2, [r3, #28]
 8004b12:	432a      	orrs	r2, r5
 8004b14:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004b16:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004b18:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8004b1a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8004b22:	2302      	movs	r3, #2
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	4770      	bx	lr
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b28:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpccer |= OC_Config->OCNPolarity;
 8004b2c:	68cf      	ldr	r7, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b2e:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b32:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8004b36:	433a      	orrs	r2, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b38:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b3a:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b3e:	ea45 0c0c 	orr.w	ip, r5, ip
 8004b42:	e777      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0xc4>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b44:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b48:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b4e:	f42c 6c40 	bic.w	ip, ip, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b52:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b56:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b5c:	ea4c 0c85 	orr.w	ip, ip, r5, lsl #2
 8004b60:	e797      	b.n	8004a92 <HAL_TIM_PWM_ConfigChannel+0x122>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b62:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b64:	f42e 4e80 	bic.w	lr, lr, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b68:	ea4e 1e85 	orr.w	lr, lr, r5, lsl #6
 8004b6c:	e732      	b.n	80049d4 <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b6e:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b72:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b78:	f42c 5c40 	bic.w	ip, ip, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b7c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b80:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b86:	ea4c 1c05 	orr.w	ip, ip, r5, lsl #4
 8004b8a:	e7b2      	b.n	8004af2 <HAL_TIM_PWM_ConfigChannel+0x182>
 8004b8c:	40010000 	.word	0x40010000

08004b90 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004b90:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d075      	beq.n	8004c84 <HAL_TIM_ConfigClockSource+0xf4>
 8004b98:	4602      	mov	r2, r0
{
 8004b9a:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8004b9c:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8004b9e:	6814      	ldr	r4, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba0:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004baa:	68a5      	ldr	r5, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8004bac:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bae:	f425 457f 	bic.w	r5, r5, #65280	; 0xff00
 8004bb2:	f025 0577 	bic.w	r5, r5, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8004bb6:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8004bb8:	60a5      	str	r5, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8004bba:	d065      	beq.n	8004c88 <HAL_TIM_ConfigClockSource+0xf8>
 8004bbc:	d824      	bhi.n	8004c08 <HAL_TIM_ConfigClockSource+0x78>
 8004bbe:	2b40      	cmp	r3, #64	; 0x40
 8004bc0:	d07c      	beq.n	8004cbc <HAL_TIM_ConfigClockSource+0x12c>
 8004bc2:	d94b      	bls.n	8004c5c <HAL_TIM_ConfigClockSource+0xcc>
 8004bc4:	2b50      	cmp	r3, #80	; 0x50
 8004bc6:	d117      	bne.n	8004bf8 <HAL_TIM_ConfigClockSource+0x68>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bc8:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bca:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bcc:	6848      	ldr	r0, [r1, #4]
 8004bce:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd0:	f026 0601 	bic.w	r6, r6, #1
 8004bd4:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd6:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bd8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8004be0:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004be2:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004be6:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004be8:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bea:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bf0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bf4:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004bf8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8004bfa:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004bfc:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004c00:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8004c04:	bcf0      	pop	{r4, r5, r6, r7}
 8004c06:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0c:	d038      	beq.n	8004c80 <HAL_TIM_ConfigClockSource+0xf0>
 8004c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c12:	d110      	bne.n	8004c36 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c14:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8004c18:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8004c1a:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c1c:	432b      	orrs	r3, r5
 8004c1e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c22:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c26:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c28:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c2a:	68a3      	ldr	r3, [r4, #8]
 8004c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c30:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004c32:	2000      	movs	r0, #0
      break;
 8004c34:	e7e0      	b.n	8004bf8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004c36:	2b70      	cmp	r3, #112	; 0x70
 8004c38:	d1de      	bne.n	8004bf8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c3a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8004c3e:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8004c40:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c42:	432b      	orrs	r3, r5
 8004c44:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c48:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c4c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004c4e:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004c50:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004c56:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004c58:	2000      	movs	r0, #0
      break;
 8004c5a:	e7cd      	b.n	8004bf8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d002      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0xd6>
 8004c60:	d90a      	bls.n	8004c78 <HAL_TIM_ConfigClockSource+0xe8>
 8004c62:	2b30      	cmp	r3, #48	; 0x30
 8004c64:	d1c8      	bne.n	8004bf8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8004c66:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c68:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004c72:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004c74:	2000      	movs	r0, #0
}
 8004c76:	e7bf      	b.n	8004bf8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004c78:	f033 0110 	bics.w	r1, r3, #16
 8004c7c:	d1bc      	bne.n	8004bf8 <HAL_TIM_ConfigClockSource+0x68>
 8004c7e:	e7f2      	b.n	8004c66 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8004c80:	2000      	movs	r0, #0
 8004c82:	e7b9      	b.n	8004bf8 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8004c84:	2002      	movs	r0, #2
}
 8004c86:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c88:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c8a:	684d      	ldr	r5, [r1, #4]
 8004c8c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c8e:	f020 0010 	bic.w	r0, r0, #16
 8004c92:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c94:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8004c96:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c98:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ca0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ca4:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004ca8:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8004caa:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004cac:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cb2:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004cb6:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb8:	2000      	movs	r0, #0
}
 8004cba:	e79d      	b.n	8004bf8 <HAL_TIM_ConfigClockSource+0x68>
  tmpccer = TIMx->CCER;
 8004cbc:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cbe:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc0:	6848      	ldr	r0, [r1, #4]
 8004cc2:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cc4:	f026 0601 	bic.w	r6, r6, #1
 8004cc8:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cca:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ccc:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8004cd4:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cd6:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004cda:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004cdc:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004cde:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ce4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004ce8:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004cea:	2000      	movs	r0, #0
}
 8004cec:	e784      	b.n	8004bf8 <HAL_TIM_ConfigClockSource+0x68>
 8004cee:	bf00      	nop

08004cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cf0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d02e      	beq.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0x66>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cf8:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfa:	2202      	movs	r2, #2
{
 8004cfc:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfe:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004d02:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d04:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d06:	4d15      	ldr	r5, [pc, #84]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d0c:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d0e:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8004d10:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8004d12:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d14:	d011      	beq.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8004d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d1a:	d00e      	beq.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8004d1c:	4a10      	ldr	r2, [pc, #64]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00b      	beq.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8004d22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d007      	beq.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8004d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d003      	beq.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8004d32:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d104      	bne.n	8004d44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d3a:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d3c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d40:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d42:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004d44:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004d46:	2201      	movs	r2, #1
 8004d48:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004d4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004d50:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8004d52:	4618      	mov	r0, r3
}
 8004d54:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004d56:	2002      	movs	r0, #2
}
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40010000 	.word	0x40010000
 8004d60:	40000400 	.word	0x40000400

08004d64 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d022      	beq.n	8004db2 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
{
 8004d6c:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d6e:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8004d72:	4604      	mov	r4, r0
 8004d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d78:	e9d1 2000 	ldrd	r2, r0, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d7c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d82:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d88:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d8c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d92:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d98:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d9a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d9c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004da2:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 8004da4:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8004da6:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8004da8:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c

  return HAL_OK;
 8004dac:	4608      	mov	r0, r1
}
 8004dae:	bc30      	pop	{r4, r5}
 8004db0:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004db2:	2002      	movs	r0, #2
}
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop

08004db8 <HAL_HalfDuplex_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004db8:	2800      	cmp	r0, #0
 8004dba:	f000 8094 	beq.w	8004ee6 <HAL_HalfDuplex_Init+0x12e>
{
 8004dbe:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dc0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 8086 	beq.w	8004edc <HAL_HalfDuplex_Init+0x124>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dd0:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dd2:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8004dd4:	2224      	movs	r2, #36	; 0x24
 8004dd6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004dda:	68d8      	ldr	r0, [r3, #12]
 8004ddc:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004de0:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8004de4:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de6:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004de8:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dea:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004dee:	4329      	orrs	r1, r5
 8004df0:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004df2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004df4:	6965      	ldr	r5, [r4, #20]
 8004df6:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8004df8:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dfc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8004dfe:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e02:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004e04:	430a      	orrs	r2, r1
 8004e06:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e08:	695a      	ldr	r2, [r3, #20]
 8004e0a:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e0c:	4937      	ldr	r1, [pc, #220]	; (8004eec <HAL_HalfDuplex_Init+0x134>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e0e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e12:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e14:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e16:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e18:	d039      	beq.n	8004e8e <HAL_HalfDuplex_Init+0xd6>
 8004e1a:	4a35      	ldr	r2, [pc, #212]	; (8004ef0 <HAL_HalfDuplex_Init+0x138>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d036      	beq.n	8004e8e <HAL_HalfDuplex_Init+0xd6>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e20:	f7fe fe54 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e24:	69e3      	ldr	r3, [r4, #28]
 8004e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e2a:	d036      	beq.n	8004e9a <HAL_HalfDuplex_Init+0xe2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e2c:	6863      	ldr	r3, [r4, #4]
 8004e2e:	4e31      	ldr	r6, [pc, #196]	; (8004ef4 <HAL_HalfDuplex_Init+0x13c>)
 8004e30:	2119      	movs	r1, #25
 8004e32:	009a      	lsls	r2, r3, #2
 8004e34:	fba0 0101 	umull	r0, r1, r0, r1
 8004e38:	0f9b      	lsrs	r3, r3, #30
 8004e3a:	f7fb ff0d 	bl	8000c58 <__aeabi_uldivmod>
 8004e3e:	fba6 2500 	umull	r2, r5, r6, r0
 8004e42:	096d      	lsrs	r5, r5, #5
 8004e44:	2164      	movs	r1, #100	; 0x64
 8004e46:	fb01 0215 	mls	r2, r1, r5, r0
 8004e4a:	0112      	lsls	r2, r2, #4
 8004e4c:	3232      	adds	r2, #50	; 0x32
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	fba6 1202 	umull	r1, r2, r6, r2
 8004e54:	012d      	lsls	r5, r5, #4
 8004e56:	eb05 1252 	add.w	r2, r5, r2, lsr #5
 8004e5a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e5c:	691a      	ldr	r2, [r3, #16]
 8004e5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004e64:	695a      	ldr	r2, [r3, #20]
 8004e66:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004e6a:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004e6c:	695a      	ldr	r2, [r3, #20]
 8004e6e:	f042 0208 	orr.w	r2, r2, #8
 8004e72:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004e74:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e76:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004e78:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8004e7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e7e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e80:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e82:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e86:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8004e8a:	4628      	mov	r0, r5
}
 8004e8c:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e8e:	f7fe fe2d 	bl	8003aec <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e92:	69e3      	ldr	r3, [r4, #28]
 8004e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e98:	d1c8      	bne.n	8004e2c <HAL_HalfDuplex_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e9a:	6862      	ldr	r2, [r4, #4]
 8004e9c:	4e15      	ldr	r6, [pc, #84]	; (8004ef4 <HAL_HalfDuplex_Init+0x13c>)
 8004e9e:	1892      	adds	r2, r2, r2
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	f04f 0119 	mov.w	r1, #25
 8004ea8:	415b      	adcs	r3, r3
 8004eaa:	fba0 0101 	umull	r0, r1, r0, r1
 8004eae:	f7fb fed3 	bl	8000c58 <__aeabi_uldivmod>
 8004eb2:	fba6 2100 	umull	r2, r1, r6, r0
 8004eb6:	094d      	lsrs	r5, r1, #5
 8004eb8:	2164      	movs	r1, #100	; 0x64
 8004eba:	fb01 0215 	mls	r2, r1, r5, r0
 8004ebe:	00d2      	lsls	r2, r2, #3
 8004ec0:	3232      	adds	r2, #50	; 0x32
 8004ec2:	fba6 1202 	umull	r1, r2, r6, r2
 8004ec6:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8004eca:	0912      	lsrs	r2, r2, #4
 8004ecc:	6823      	ldr	r3, [r4, #0]
 8004ece:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8004ed2:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8004ed6:	440a      	add	r2, r1
 8004ed8:	609a      	str	r2, [r3, #8]
 8004eda:	e7bf      	b.n	8004e5c <HAL_HalfDuplex_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8004edc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004ee0:	f7fd fc78 	bl	80027d4 <HAL_UART_MspInit>
 8004ee4:	e774      	b.n	8004dd0 <HAL_HalfDuplex_Init+0x18>
    return HAL_ERROR;
 8004ee6:	2001      	movs	r0, #1
}
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40011000 	.word	0x40011000
 8004ef0:	40011400 	.word	0x40011400
 8004ef4:	51eb851f 	.word	0x51eb851f

08004ef8 <HAL_UART_Transmit>:
{
 8004ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004efc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004efe:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8004f02:	2820      	cmp	r0, #32
 8004f04:	d177      	bne.n	8004ff6 <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 8004f06:	4688      	mov	r8, r1
 8004f08:	2900      	cmp	r1, #0
 8004f0a:	d040      	beq.n	8004f8e <HAL_UART_Transmit+0x96>
 8004f0c:	4617      	mov	r7, r2
 8004f0e:	2a00      	cmp	r2, #0
 8004f10:	d03d      	beq.n	8004f8e <HAL_UART_Transmit+0x96>
 8004f12:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8004f14:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d06c      	beq.n	8004ff6 <HAL_UART_Transmit+0xfe>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f1c:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8004f1e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f20:	f04f 0900 	mov.w	r9, #0
 8004f24:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    __HAL_LOCK(huart);
 8004f28:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8004f30:	f7fd fd82 	bl	8002a38 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f34:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8004f36:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8004f3c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8004f3e:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f40:	d05c      	beq.n	8004ffc <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 8004f42:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8004f44:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8004f46:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8004f48:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d07e      	beq.n	800504e <HAL_UART_Transmit+0x156>
 8004f50:	6822      	ldr	r2, [r4, #0]
 8004f52:	1c69      	adds	r1, r5, #1
 8004f54:	d11e      	bne.n	8004f94 <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f56:	6813      	ldr	r3, [r2, #0]
 8004f58:	061b      	lsls	r3, r3, #24
 8004f5a:	d5fc      	bpl.n	8004f56 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8004f5c:	f1b8 0f00 	cmp.w	r8, #0
 8004f60:	d044      	beq.n	8004fec <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f62:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004f66:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004f68:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	84e3      	strh	r3, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f70:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1ec      	bne.n	8004f52 <HAL_UART_Transmit+0x5a>
 8004f78:	1c68      	adds	r0, r5, #1
 8004f7a:	d145      	bne.n	8005008 <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f7c:	6813      	ldr	r3, [r2, #0]
 8004f7e:	0659      	lsls	r1, r3, #25
 8004f80:	d5fc      	bpl.n	8004f7c <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8004f82:	2320      	movs	r3, #32
 8004f84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8004f88:	2000      	movs	r0, #0
}
 8004f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8004f8e:	2001      	movs	r0, #1
}
 8004f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f94:	6813      	ldr	r3, [r2, #0]
 8004f96:	061f      	lsls	r7, r3, #24
 8004f98:	d4e0      	bmi.n	8004f5c <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f9a:	b12d      	cbz	r5, 8004fa8 <HAL_UART_Transmit+0xb0>
 8004f9c:	f7fd fd4c 	bl	8002a38 <HAL_GetTick>
 8004fa0:	1b80      	subs	r0, r0, r6
 8004fa2:	4285      	cmp	r5, r0
 8004fa4:	6822      	ldr	r2, [r4, #0]
 8004fa6:	d2d4      	bcs.n	8004f52 <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	f102 030c 	add.w	r3, r2, #12
 8004fac:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	f102 000c 	add.w	r0, r2, #12
 8004fb8:	e840 3100 	strex	r1, r3, [r0]
 8004fbc:	2900      	cmp	r1, #0
 8004fbe:	d1f3      	bne.n	8004fa8 <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	f102 0314 	add.w	r3, r2, #20
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	f102 0014 	add.w	r0, r2, #20
 8004fd0:	e840 3100 	strex	r1, r3, [r0]
 8004fd4:	2900      	cmp	r1, #0
 8004fd6:	d1f3      	bne.n	8004fc0 <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 8004fd8:	2320      	movs	r3, #32
 8004fda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8004fde:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8004fe2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      return HAL_TIMEOUT;
 8004fe6:	2003      	movs	r0, #3
}
 8004fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fec:	f839 3b02 	ldrh.w	r3, [r9], #2
 8004ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff4:	e7b7      	b.n	8004f66 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8004ff6:	2002      	movs	r0, #2
}
 8004ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ffc:	6923      	ldr	r3, [r4, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d19f      	bne.n	8004f42 <HAL_UART_Transmit+0x4a>
 8005002:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8005004:	4698      	mov	r8, r3
 8005006:	e79c      	b.n	8004f42 <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005008:	6813      	ldr	r3, [r2, #0]
 800500a:	065b      	lsls	r3, r3, #25
 800500c:	d4b9      	bmi.n	8004f82 <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800500e:	b12d      	cbz	r5, 800501c <HAL_UART_Transmit+0x124>
 8005010:	f7fd fd12 	bl	8002a38 <HAL_GetTick>
 8005014:	1b80      	subs	r0, r0, r6
 8005016:	4285      	cmp	r5, r0
 8005018:	6822      	ldr	r2, [r4, #0]
 800501a:	d2ad      	bcs.n	8004f78 <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	f102 030c 	add.w	r3, r2, #12
 8005020:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005024:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	f102 000c 	add.w	r0, r2, #12
 800502c:	e840 3100 	strex	r1, r3, [r0]
 8005030:	2900      	cmp	r1, #0
 8005032:	d1f3      	bne.n	800501c <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005034:	f102 0314 	add.w	r3, r2, #20
 8005038:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800503c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	f102 0014 	add.w	r0, r2, #20
 8005044:	e840 3100 	strex	r1, r3, [r0]
 8005048:	2900      	cmp	r1, #0
 800504a:	d1f3      	bne.n	8005034 <HAL_UART_Transmit+0x13c>
 800504c:	e7c4      	b.n	8004fd8 <HAL_UART_Transmit+0xe0>
 800504e:	6822      	ldr	r2, [r4, #0]
 8005050:	e792      	b.n	8004f78 <HAL_UART_Transmit+0x80>
 8005052:	bf00      	nop

08005054 <__errno>:
 8005054:	4b01      	ldr	r3, [pc, #4]	; (800505c <__errno+0x8>)
 8005056:	6818      	ldr	r0, [r3, #0]
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	20000024 	.word	0x20000024

08005060 <__libc_init_array>:
 8005060:	b570      	push	{r4, r5, r6, lr}
 8005062:	4d0d      	ldr	r5, [pc, #52]	; (8005098 <__libc_init_array+0x38>)
 8005064:	4c0d      	ldr	r4, [pc, #52]	; (800509c <__libc_init_array+0x3c>)
 8005066:	1b64      	subs	r4, r4, r5
 8005068:	10a4      	asrs	r4, r4, #2
 800506a:	2600      	movs	r6, #0
 800506c:	42a6      	cmp	r6, r4
 800506e:	d109      	bne.n	8005084 <__libc_init_array+0x24>
 8005070:	4d0b      	ldr	r5, [pc, #44]	; (80050a0 <__libc_init_array+0x40>)
 8005072:	4c0c      	ldr	r4, [pc, #48]	; (80050a4 <__libc_init_array+0x44>)
 8005074:	f004 f93a 	bl	80092ec <_init>
 8005078:	1b64      	subs	r4, r4, r5
 800507a:	10a4      	asrs	r4, r4, #2
 800507c:	2600      	movs	r6, #0
 800507e:	42a6      	cmp	r6, r4
 8005080:	d105      	bne.n	800508e <__libc_init_array+0x2e>
 8005082:	bd70      	pop	{r4, r5, r6, pc}
 8005084:	f855 3b04 	ldr.w	r3, [r5], #4
 8005088:	4798      	blx	r3
 800508a:	3601      	adds	r6, #1
 800508c:	e7ee      	b.n	800506c <__libc_init_array+0xc>
 800508e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005092:	4798      	blx	r3
 8005094:	3601      	adds	r6, #1
 8005096:	e7f2      	b.n	800507e <__libc_init_array+0x1e>
 8005098:	08009990 	.word	0x08009990
 800509c:	08009990 	.word	0x08009990
 80050a0:	08009990 	.word	0x08009990
 80050a4:	08009994 	.word	0x08009994

080050a8 <memset>:
 80050a8:	4402      	add	r2, r0
 80050aa:	4603      	mov	r3, r0
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d100      	bne.n	80050b2 <memset+0xa>
 80050b0:	4770      	bx	lr
 80050b2:	f803 1b01 	strb.w	r1, [r3], #1
 80050b6:	e7f9      	b.n	80050ac <memset+0x4>

080050b8 <__cvt>:
 80050b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050bc:	ec55 4b10 	vmov	r4, r5, d0
 80050c0:	2d00      	cmp	r5, #0
 80050c2:	460e      	mov	r6, r1
 80050c4:	4619      	mov	r1, r3
 80050c6:	462b      	mov	r3, r5
 80050c8:	bfbb      	ittet	lt
 80050ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80050ce:	461d      	movlt	r5, r3
 80050d0:	2300      	movge	r3, #0
 80050d2:	232d      	movlt	r3, #45	; 0x2d
 80050d4:	700b      	strb	r3, [r1, #0]
 80050d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80050dc:	4691      	mov	r9, r2
 80050de:	f023 0820 	bic.w	r8, r3, #32
 80050e2:	bfbc      	itt	lt
 80050e4:	4622      	movlt	r2, r4
 80050e6:	4614      	movlt	r4, r2
 80050e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050ec:	d005      	beq.n	80050fa <__cvt+0x42>
 80050ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80050f2:	d100      	bne.n	80050f6 <__cvt+0x3e>
 80050f4:	3601      	adds	r6, #1
 80050f6:	2102      	movs	r1, #2
 80050f8:	e000      	b.n	80050fc <__cvt+0x44>
 80050fa:	2103      	movs	r1, #3
 80050fc:	ab03      	add	r3, sp, #12
 80050fe:	9301      	str	r3, [sp, #4]
 8005100:	ab02      	add	r3, sp, #8
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	ec45 4b10 	vmov	d0, r4, r5
 8005108:	4653      	mov	r3, sl
 800510a:	4632      	mov	r2, r6
 800510c:	f000 fccc 	bl	8005aa8 <_dtoa_r>
 8005110:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005114:	4607      	mov	r7, r0
 8005116:	d102      	bne.n	800511e <__cvt+0x66>
 8005118:	f019 0f01 	tst.w	r9, #1
 800511c:	d022      	beq.n	8005164 <__cvt+0xac>
 800511e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005122:	eb07 0906 	add.w	r9, r7, r6
 8005126:	d110      	bne.n	800514a <__cvt+0x92>
 8005128:	783b      	ldrb	r3, [r7, #0]
 800512a:	2b30      	cmp	r3, #48	; 0x30
 800512c:	d10a      	bne.n	8005144 <__cvt+0x8c>
 800512e:	2200      	movs	r2, #0
 8005130:	2300      	movs	r3, #0
 8005132:	4620      	mov	r0, r4
 8005134:	4629      	mov	r1, r5
 8005136:	f7fb fccf 	bl	8000ad8 <__aeabi_dcmpeq>
 800513a:	b918      	cbnz	r0, 8005144 <__cvt+0x8c>
 800513c:	f1c6 0601 	rsb	r6, r6, #1
 8005140:	f8ca 6000 	str.w	r6, [sl]
 8005144:	f8da 3000 	ldr.w	r3, [sl]
 8005148:	4499      	add	r9, r3
 800514a:	2200      	movs	r2, #0
 800514c:	2300      	movs	r3, #0
 800514e:	4620      	mov	r0, r4
 8005150:	4629      	mov	r1, r5
 8005152:	f7fb fcc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005156:	b108      	cbz	r0, 800515c <__cvt+0xa4>
 8005158:	f8cd 900c 	str.w	r9, [sp, #12]
 800515c:	2230      	movs	r2, #48	; 0x30
 800515e:	9b03      	ldr	r3, [sp, #12]
 8005160:	454b      	cmp	r3, r9
 8005162:	d307      	bcc.n	8005174 <__cvt+0xbc>
 8005164:	9b03      	ldr	r3, [sp, #12]
 8005166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005168:	1bdb      	subs	r3, r3, r7
 800516a:	4638      	mov	r0, r7
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	b004      	add	sp, #16
 8005170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005174:	1c59      	adds	r1, r3, #1
 8005176:	9103      	str	r1, [sp, #12]
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	e7f0      	b.n	800515e <__cvt+0xa6>

0800517c <__exponent>:
 800517c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800517e:	4603      	mov	r3, r0
 8005180:	2900      	cmp	r1, #0
 8005182:	bfb8      	it	lt
 8005184:	4249      	neglt	r1, r1
 8005186:	f803 2b02 	strb.w	r2, [r3], #2
 800518a:	bfb4      	ite	lt
 800518c:	222d      	movlt	r2, #45	; 0x2d
 800518e:	222b      	movge	r2, #43	; 0x2b
 8005190:	2909      	cmp	r1, #9
 8005192:	7042      	strb	r2, [r0, #1]
 8005194:	dd2a      	ble.n	80051ec <__exponent+0x70>
 8005196:	f10d 0407 	add.w	r4, sp, #7
 800519a:	46a4      	mov	ip, r4
 800519c:	270a      	movs	r7, #10
 800519e:	46a6      	mov	lr, r4
 80051a0:	460a      	mov	r2, r1
 80051a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80051a6:	fb07 1516 	mls	r5, r7, r6, r1
 80051aa:	3530      	adds	r5, #48	; 0x30
 80051ac:	2a63      	cmp	r2, #99	; 0x63
 80051ae:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80051b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80051b6:	4631      	mov	r1, r6
 80051b8:	dcf1      	bgt.n	800519e <__exponent+0x22>
 80051ba:	3130      	adds	r1, #48	; 0x30
 80051bc:	f1ae 0502 	sub.w	r5, lr, #2
 80051c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80051c4:	1c44      	adds	r4, r0, #1
 80051c6:	4629      	mov	r1, r5
 80051c8:	4561      	cmp	r1, ip
 80051ca:	d30a      	bcc.n	80051e2 <__exponent+0x66>
 80051cc:	f10d 0209 	add.w	r2, sp, #9
 80051d0:	eba2 020e 	sub.w	r2, r2, lr
 80051d4:	4565      	cmp	r5, ip
 80051d6:	bf88      	it	hi
 80051d8:	2200      	movhi	r2, #0
 80051da:	4413      	add	r3, r2
 80051dc:	1a18      	subs	r0, r3, r0
 80051de:	b003      	add	sp, #12
 80051e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80051ea:	e7ed      	b.n	80051c8 <__exponent+0x4c>
 80051ec:	2330      	movs	r3, #48	; 0x30
 80051ee:	3130      	adds	r1, #48	; 0x30
 80051f0:	7083      	strb	r3, [r0, #2]
 80051f2:	70c1      	strb	r1, [r0, #3]
 80051f4:	1d03      	adds	r3, r0, #4
 80051f6:	e7f1      	b.n	80051dc <__exponent+0x60>

080051f8 <_printf_float>:
 80051f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fc:	ed2d 8b02 	vpush	{d8}
 8005200:	b08d      	sub	sp, #52	; 0x34
 8005202:	460c      	mov	r4, r1
 8005204:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005208:	4616      	mov	r6, r2
 800520a:	461f      	mov	r7, r3
 800520c:	4605      	mov	r5, r0
 800520e:	f001 fa37 	bl	8006680 <_localeconv_r>
 8005212:	f8d0 a000 	ldr.w	sl, [r0]
 8005216:	4650      	mov	r0, sl
 8005218:	f7fa ffe2 	bl	80001e0 <strlen>
 800521c:	2300      	movs	r3, #0
 800521e:	930a      	str	r3, [sp, #40]	; 0x28
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	9305      	str	r3, [sp, #20]
 8005224:	f8d8 3000 	ldr.w	r3, [r8]
 8005228:	f894 b018 	ldrb.w	fp, [r4, #24]
 800522c:	3307      	adds	r3, #7
 800522e:	f023 0307 	bic.w	r3, r3, #7
 8005232:	f103 0208 	add.w	r2, r3, #8
 8005236:	f8c8 2000 	str.w	r2, [r8]
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005242:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005246:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800524a:	9307      	str	r3, [sp, #28]
 800524c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005250:	ee08 0a10 	vmov	s16, r0
 8005254:	4b9f      	ldr	r3, [pc, #636]	; (80054d4 <_printf_float+0x2dc>)
 8005256:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800525a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800525e:	f7fb fc6d 	bl	8000b3c <__aeabi_dcmpun>
 8005262:	bb88      	cbnz	r0, 80052c8 <_printf_float+0xd0>
 8005264:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005268:	4b9a      	ldr	r3, [pc, #616]	; (80054d4 <_printf_float+0x2dc>)
 800526a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800526e:	f7fb fc47 	bl	8000b00 <__aeabi_dcmple>
 8005272:	bb48      	cbnz	r0, 80052c8 <_printf_float+0xd0>
 8005274:	2200      	movs	r2, #0
 8005276:	2300      	movs	r3, #0
 8005278:	4640      	mov	r0, r8
 800527a:	4649      	mov	r1, r9
 800527c:	f7fb fc36 	bl	8000aec <__aeabi_dcmplt>
 8005280:	b110      	cbz	r0, 8005288 <_printf_float+0x90>
 8005282:	232d      	movs	r3, #45	; 0x2d
 8005284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005288:	4b93      	ldr	r3, [pc, #588]	; (80054d8 <_printf_float+0x2e0>)
 800528a:	4894      	ldr	r0, [pc, #592]	; (80054dc <_printf_float+0x2e4>)
 800528c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005290:	bf94      	ite	ls
 8005292:	4698      	movls	r8, r3
 8005294:	4680      	movhi	r8, r0
 8005296:	2303      	movs	r3, #3
 8005298:	6123      	str	r3, [r4, #16]
 800529a:	9b05      	ldr	r3, [sp, #20]
 800529c:	f023 0204 	bic.w	r2, r3, #4
 80052a0:	6022      	str	r2, [r4, #0]
 80052a2:	f04f 0900 	mov.w	r9, #0
 80052a6:	9700      	str	r7, [sp, #0]
 80052a8:	4633      	mov	r3, r6
 80052aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80052ac:	4621      	mov	r1, r4
 80052ae:	4628      	mov	r0, r5
 80052b0:	f000 f9d8 	bl	8005664 <_printf_common>
 80052b4:	3001      	adds	r0, #1
 80052b6:	f040 8090 	bne.w	80053da <_printf_float+0x1e2>
 80052ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052be:	b00d      	add	sp, #52	; 0x34
 80052c0:	ecbd 8b02 	vpop	{d8}
 80052c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c8:	4642      	mov	r2, r8
 80052ca:	464b      	mov	r3, r9
 80052cc:	4640      	mov	r0, r8
 80052ce:	4649      	mov	r1, r9
 80052d0:	f7fb fc34 	bl	8000b3c <__aeabi_dcmpun>
 80052d4:	b140      	cbz	r0, 80052e8 <_printf_float+0xf0>
 80052d6:	464b      	mov	r3, r9
 80052d8:	2b00      	cmp	r3, #0
 80052da:	bfbc      	itt	lt
 80052dc:	232d      	movlt	r3, #45	; 0x2d
 80052de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80052e2:	487f      	ldr	r0, [pc, #508]	; (80054e0 <_printf_float+0x2e8>)
 80052e4:	4b7f      	ldr	r3, [pc, #508]	; (80054e4 <_printf_float+0x2ec>)
 80052e6:	e7d1      	b.n	800528c <_printf_float+0x94>
 80052e8:	6863      	ldr	r3, [r4, #4]
 80052ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80052ee:	9206      	str	r2, [sp, #24]
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	d13f      	bne.n	8005374 <_printf_float+0x17c>
 80052f4:	2306      	movs	r3, #6
 80052f6:	6063      	str	r3, [r4, #4]
 80052f8:	9b05      	ldr	r3, [sp, #20]
 80052fa:	6861      	ldr	r1, [r4, #4]
 80052fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005300:	2300      	movs	r3, #0
 8005302:	9303      	str	r3, [sp, #12]
 8005304:	ab0a      	add	r3, sp, #40	; 0x28
 8005306:	e9cd b301 	strd	fp, r3, [sp, #4]
 800530a:	ab09      	add	r3, sp, #36	; 0x24
 800530c:	ec49 8b10 	vmov	d0, r8, r9
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	6022      	str	r2, [r4, #0]
 8005314:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005318:	4628      	mov	r0, r5
 800531a:	f7ff fecd 	bl	80050b8 <__cvt>
 800531e:	9b06      	ldr	r3, [sp, #24]
 8005320:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005322:	2b47      	cmp	r3, #71	; 0x47
 8005324:	4680      	mov	r8, r0
 8005326:	d108      	bne.n	800533a <_printf_float+0x142>
 8005328:	1cc8      	adds	r0, r1, #3
 800532a:	db02      	blt.n	8005332 <_printf_float+0x13a>
 800532c:	6863      	ldr	r3, [r4, #4]
 800532e:	4299      	cmp	r1, r3
 8005330:	dd41      	ble.n	80053b6 <_printf_float+0x1be>
 8005332:	f1ab 0b02 	sub.w	fp, fp, #2
 8005336:	fa5f fb8b 	uxtb.w	fp, fp
 800533a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800533e:	d820      	bhi.n	8005382 <_printf_float+0x18a>
 8005340:	3901      	subs	r1, #1
 8005342:	465a      	mov	r2, fp
 8005344:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005348:	9109      	str	r1, [sp, #36]	; 0x24
 800534a:	f7ff ff17 	bl	800517c <__exponent>
 800534e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005350:	1813      	adds	r3, r2, r0
 8005352:	2a01      	cmp	r2, #1
 8005354:	4681      	mov	r9, r0
 8005356:	6123      	str	r3, [r4, #16]
 8005358:	dc02      	bgt.n	8005360 <_printf_float+0x168>
 800535a:	6822      	ldr	r2, [r4, #0]
 800535c:	07d2      	lsls	r2, r2, #31
 800535e:	d501      	bpl.n	8005364 <_printf_float+0x16c>
 8005360:	3301      	adds	r3, #1
 8005362:	6123      	str	r3, [r4, #16]
 8005364:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005368:	2b00      	cmp	r3, #0
 800536a:	d09c      	beq.n	80052a6 <_printf_float+0xae>
 800536c:	232d      	movs	r3, #45	; 0x2d
 800536e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005372:	e798      	b.n	80052a6 <_printf_float+0xae>
 8005374:	9a06      	ldr	r2, [sp, #24]
 8005376:	2a47      	cmp	r2, #71	; 0x47
 8005378:	d1be      	bne.n	80052f8 <_printf_float+0x100>
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1bc      	bne.n	80052f8 <_printf_float+0x100>
 800537e:	2301      	movs	r3, #1
 8005380:	e7b9      	b.n	80052f6 <_printf_float+0xfe>
 8005382:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005386:	d118      	bne.n	80053ba <_printf_float+0x1c2>
 8005388:	2900      	cmp	r1, #0
 800538a:	6863      	ldr	r3, [r4, #4]
 800538c:	dd0b      	ble.n	80053a6 <_printf_float+0x1ae>
 800538e:	6121      	str	r1, [r4, #16]
 8005390:	b913      	cbnz	r3, 8005398 <_printf_float+0x1a0>
 8005392:	6822      	ldr	r2, [r4, #0]
 8005394:	07d0      	lsls	r0, r2, #31
 8005396:	d502      	bpl.n	800539e <_printf_float+0x1a6>
 8005398:	3301      	adds	r3, #1
 800539a:	440b      	add	r3, r1
 800539c:	6123      	str	r3, [r4, #16]
 800539e:	65a1      	str	r1, [r4, #88]	; 0x58
 80053a0:	f04f 0900 	mov.w	r9, #0
 80053a4:	e7de      	b.n	8005364 <_printf_float+0x16c>
 80053a6:	b913      	cbnz	r3, 80053ae <_printf_float+0x1b6>
 80053a8:	6822      	ldr	r2, [r4, #0]
 80053aa:	07d2      	lsls	r2, r2, #31
 80053ac:	d501      	bpl.n	80053b2 <_printf_float+0x1ba>
 80053ae:	3302      	adds	r3, #2
 80053b0:	e7f4      	b.n	800539c <_printf_float+0x1a4>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e7f2      	b.n	800539c <_printf_float+0x1a4>
 80053b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80053ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053bc:	4299      	cmp	r1, r3
 80053be:	db05      	blt.n	80053cc <_printf_float+0x1d4>
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	6121      	str	r1, [r4, #16]
 80053c4:	07d8      	lsls	r0, r3, #31
 80053c6:	d5ea      	bpl.n	800539e <_printf_float+0x1a6>
 80053c8:	1c4b      	adds	r3, r1, #1
 80053ca:	e7e7      	b.n	800539c <_printf_float+0x1a4>
 80053cc:	2900      	cmp	r1, #0
 80053ce:	bfd4      	ite	le
 80053d0:	f1c1 0202 	rsble	r2, r1, #2
 80053d4:	2201      	movgt	r2, #1
 80053d6:	4413      	add	r3, r2
 80053d8:	e7e0      	b.n	800539c <_printf_float+0x1a4>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	055a      	lsls	r2, r3, #21
 80053de:	d407      	bmi.n	80053f0 <_printf_float+0x1f8>
 80053e0:	6923      	ldr	r3, [r4, #16]
 80053e2:	4642      	mov	r2, r8
 80053e4:	4631      	mov	r1, r6
 80053e6:	4628      	mov	r0, r5
 80053e8:	47b8      	blx	r7
 80053ea:	3001      	adds	r0, #1
 80053ec:	d12c      	bne.n	8005448 <_printf_float+0x250>
 80053ee:	e764      	b.n	80052ba <_printf_float+0xc2>
 80053f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80053f4:	f240 80e0 	bls.w	80055b8 <_printf_float+0x3c0>
 80053f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053fc:	2200      	movs	r2, #0
 80053fe:	2300      	movs	r3, #0
 8005400:	f7fb fb6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005404:	2800      	cmp	r0, #0
 8005406:	d034      	beq.n	8005472 <_printf_float+0x27a>
 8005408:	4a37      	ldr	r2, [pc, #220]	; (80054e8 <_printf_float+0x2f0>)
 800540a:	2301      	movs	r3, #1
 800540c:	4631      	mov	r1, r6
 800540e:	4628      	mov	r0, r5
 8005410:	47b8      	blx	r7
 8005412:	3001      	adds	r0, #1
 8005414:	f43f af51 	beq.w	80052ba <_printf_float+0xc2>
 8005418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800541c:	429a      	cmp	r2, r3
 800541e:	db02      	blt.n	8005426 <_printf_float+0x22e>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	07d8      	lsls	r0, r3, #31
 8005424:	d510      	bpl.n	8005448 <_printf_float+0x250>
 8005426:	ee18 3a10 	vmov	r3, s16
 800542a:	4652      	mov	r2, sl
 800542c:	4631      	mov	r1, r6
 800542e:	4628      	mov	r0, r5
 8005430:	47b8      	blx	r7
 8005432:	3001      	adds	r0, #1
 8005434:	f43f af41 	beq.w	80052ba <_printf_float+0xc2>
 8005438:	f04f 0800 	mov.w	r8, #0
 800543c:	f104 091a 	add.w	r9, r4, #26
 8005440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005442:	3b01      	subs	r3, #1
 8005444:	4543      	cmp	r3, r8
 8005446:	dc09      	bgt.n	800545c <_printf_float+0x264>
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	079b      	lsls	r3, r3, #30
 800544c:	f100 8105 	bmi.w	800565a <_printf_float+0x462>
 8005450:	68e0      	ldr	r0, [r4, #12]
 8005452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005454:	4298      	cmp	r0, r3
 8005456:	bfb8      	it	lt
 8005458:	4618      	movlt	r0, r3
 800545a:	e730      	b.n	80052be <_printf_float+0xc6>
 800545c:	2301      	movs	r3, #1
 800545e:	464a      	mov	r2, r9
 8005460:	4631      	mov	r1, r6
 8005462:	4628      	mov	r0, r5
 8005464:	47b8      	blx	r7
 8005466:	3001      	adds	r0, #1
 8005468:	f43f af27 	beq.w	80052ba <_printf_float+0xc2>
 800546c:	f108 0801 	add.w	r8, r8, #1
 8005470:	e7e6      	b.n	8005440 <_printf_float+0x248>
 8005472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005474:	2b00      	cmp	r3, #0
 8005476:	dc39      	bgt.n	80054ec <_printf_float+0x2f4>
 8005478:	4a1b      	ldr	r2, [pc, #108]	; (80054e8 <_printf_float+0x2f0>)
 800547a:	2301      	movs	r3, #1
 800547c:	4631      	mov	r1, r6
 800547e:	4628      	mov	r0, r5
 8005480:	47b8      	blx	r7
 8005482:	3001      	adds	r0, #1
 8005484:	f43f af19 	beq.w	80052ba <_printf_float+0xc2>
 8005488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800548c:	4313      	orrs	r3, r2
 800548e:	d102      	bne.n	8005496 <_printf_float+0x29e>
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	07d9      	lsls	r1, r3, #31
 8005494:	d5d8      	bpl.n	8005448 <_printf_float+0x250>
 8005496:	ee18 3a10 	vmov	r3, s16
 800549a:	4652      	mov	r2, sl
 800549c:	4631      	mov	r1, r6
 800549e:	4628      	mov	r0, r5
 80054a0:	47b8      	blx	r7
 80054a2:	3001      	adds	r0, #1
 80054a4:	f43f af09 	beq.w	80052ba <_printf_float+0xc2>
 80054a8:	f04f 0900 	mov.w	r9, #0
 80054ac:	f104 0a1a 	add.w	sl, r4, #26
 80054b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b2:	425b      	negs	r3, r3
 80054b4:	454b      	cmp	r3, r9
 80054b6:	dc01      	bgt.n	80054bc <_printf_float+0x2c4>
 80054b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054ba:	e792      	b.n	80053e2 <_printf_float+0x1ea>
 80054bc:	2301      	movs	r3, #1
 80054be:	4652      	mov	r2, sl
 80054c0:	4631      	mov	r1, r6
 80054c2:	4628      	mov	r0, r5
 80054c4:	47b8      	blx	r7
 80054c6:	3001      	adds	r0, #1
 80054c8:	f43f aef7 	beq.w	80052ba <_printf_float+0xc2>
 80054cc:	f109 0901 	add.w	r9, r9, #1
 80054d0:	e7ee      	b.n	80054b0 <_printf_float+0x2b8>
 80054d2:	bf00      	nop
 80054d4:	7fefffff 	.word	0x7fefffff
 80054d8:	0800934c 	.word	0x0800934c
 80054dc:	08009350 	.word	0x08009350
 80054e0:	08009358 	.word	0x08009358
 80054e4:	08009354 	.word	0x08009354
 80054e8:	0800935c 	.word	0x0800935c
 80054ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054f0:	429a      	cmp	r2, r3
 80054f2:	bfa8      	it	ge
 80054f4:	461a      	movge	r2, r3
 80054f6:	2a00      	cmp	r2, #0
 80054f8:	4691      	mov	r9, r2
 80054fa:	dc37      	bgt.n	800556c <_printf_float+0x374>
 80054fc:	f04f 0b00 	mov.w	fp, #0
 8005500:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005504:	f104 021a 	add.w	r2, r4, #26
 8005508:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800550a:	9305      	str	r3, [sp, #20]
 800550c:	eba3 0309 	sub.w	r3, r3, r9
 8005510:	455b      	cmp	r3, fp
 8005512:	dc33      	bgt.n	800557c <_printf_float+0x384>
 8005514:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005518:	429a      	cmp	r2, r3
 800551a:	db3b      	blt.n	8005594 <_printf_float+0x39c>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	07da      	lsls	r2, r3, #31
 8005520:	d438      	bmi.n	8005594 <_printf_float+0x39c>
 8005522:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005524:	9b05      	ldr	r3, [sp, #20]
 8005526:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	eba2 0901 	sub.w	r9, r2, r1
 800552e:	4599      	cmp	r9, r3
 8005530:	bfa8      	it	ge
 8005532:	4699      	movge	r9, r3
 8005534:	f1b9 0f00 	cmp.w	r9, #0
 8005538:	dc35      	bgt.n	80055a6 <_printf_float+0x3ae>
 800553a:	f04f 0800 	mov.w	r8, #0
 800553e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005542:	f104 0a1a 	add.w	sl, r4, #26
 8005546:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800554a:	1a9b      	subs	r3, r3, r2
 800554c:	eba3 0309 	sub.w	r3, r3, r9
 8005550:	4543      	cmp	r3, r8
 8005552:	f77f af79 	ble.w	8005448 <_printf_float+0x250>
 8005556:	2301      	movs	r3, #1
 8005558:	4652      	mov	r2, sl
 800555a:	4631      	mov	r1, r6
 800555c:	4628      	mov	r0, r5
 800555e:	47b8      	blx	r7
 8005560:	3001      	adds	r0, #1
 8005562:	f43f aeaa 	beq.w	80052ba <_printf_float+0xc2>
 8005566:	f108 0801 	add.w	r8, r8, #1
 800556a:	e7ec      	b.n	8005546 <_printf_float+0x34e>
 800556c:	4613      	mov	r3, r2
 800556e:	4631      	mov	r1, r6
 8005570:	4642      	mov	r2, r8
 8005572:	4628      	mov	r0, r5
 8005574:	47b8      	blx	r7
 8005576:	3001      	adds	r0, #1
 8005578:	d1c0      	bne.n	80054fc <_printf_float+0x304>
 800557a:	e69e      	b.n	80052ba <_printf_float+0xc2>
 800557c:	2301      	movs	r3, #1
 800557e:	4631      	mov	r1, r6
 8005580:	4628      	mov	r0, r5
 8005582:	9205      	str	r2, [sp, #20]
 8005584:	47b8      	blx	r7
 8005586:	3001      	adds	r0, #1
 8005588:	f43f ae97 	beq.w	80052ba <_printf_float+0xc2>
 800558c:	9a05      	ldr	r2, [sp, #20]
 800558e:	f10b 0b01 	add.w	fp, fp, #1
 8005592:	e7b9      	b.n	8005508 <_printf_float+0x310>
 8005594:	ee18 3a10 	vmov	r3, s16
 8005598:	4652      	mov	r2, sl
 800559a:	4631      	mov	r1, r6
 800559c:	4628      	mov	r0, r5
 800559e:	47b8      	blx	r7
 80055a0:	3001      	adds	r0, #1
 80055a2:	d1be      	bne.n	8005522 <_printf_float+0x32a>
 80055a4:	e689      	b.n	80052ba <_printf_float+0xc2>
 80055a6:	9a05      	ldr	r2, [sp, #20]
 80055a8:	464b      	mov	r3, r9
 80055aa:	4442      	add	r2, r8
 80055ac:	4631      	mov	r1, r6
 80055ae:	4628      	mov	r0, r5
 80055b0:	47b8      	blx	r7
 80055b2:	3001      	adds	r0, #1
 80055b4:	d1c1      	bne.n	800553a <_printf_float+0x342>
 80055b6:	e680      	b.n	80052ba <_printf_float+0xc2>
 80055b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055ba:	2a01      	cmp	r2, #1
 80055bc:	dc01      	bgt.n	80055c2 <_printf_float+0x3ca>
 80055be:	07db      	lsls	r3, r3, #31
 80055c0:	d538      	bpl.n	8005634 <_printf_float+0x43c>
 80055c2:	2301      	movs	r3, #1
 80055c4:	4642      	mov	r2, r8
 80055c6:	4631      	mov	r1, r6
 80055c8:	4628      	mov	r0, r5
 80055ca:	47b8      	blx	r7
 80055cc:	3001      	adds	r0, #1
 80055ce:	f43f ae74 	beq.w	80052ba <_printf_float+0xc2>
 80055d2:	ee18 3a10 	vmov	r3, s16
 80055d6:	4652      	mov	r2, sl
 80055d8:	4631      	mov	r1, r6
 80055da:	4628      	mov	r0, r5
 80055dc:	47b8      	blx	r7
 80055de:	3001      	adds	r0, #1
 80055e0:	f43f ae6b 	beq.w	80052ba <_printf_float+0xc2>
 80055e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055e8:	2200      	movs	r2, #0
 80055ea:	2300      	movs	r3, #0
 80055ec:	f7fb fa74 	bl	8000ad8 <__aeabi_dcmpeq>
 80055f0:	b9d8      	cbnz	r0, 800562a <_printf_float+0x432>
 80055f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f4:	f108 0201 	add.w	r2, r8, #1
 80055f8:	3b01      	subs	r3, #1
 80055fa:	4631      	mov	r1, r6
 80055fc:	4628      	mov	r0, r5
 80055fe:	47b8      	blx	r7
 8005600:	3001      	adds	r0, #1
 8005602:	d10e      	bne.n	8005622 <_printf_float+0x42a>
 8005604:	e659      	b.n	80052ba <_printf_float+0xc2>
 8005606:	2301      	movs	r3, #1
 8005608:	4652      	mov	r2, sl
 800560a:	4631      	mov	r1, r6
 800560c:	4628      	mov	r0, r5
 800560e:	47b8      	blx	r7
 8005610:	3001      	adds	r0, #1
 8005612:	f43f ae52 	beq.w	80052ba <_printf_float+0xc2>
 8005616:	f108 0801 	add.w	r8, r8, #1
 800561a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800561c:	3b01      	subs	r3, #1
 800561e:	4543      	cmp	r3, r8
 8005620:	dcf1      	bgt.n	8005606 <_printf_float+0x40e>
 8005622:	464b      	mov	r3, r9
 8005624:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005628:	e6dc      	b.n	80053e4 <_printf_float+0x1ec>
 800562a:	f04f 0800 	mov.w	r8, #0
 800562e:	f104 0a1a 	add.w	sl, r4, #26
 8005632:	e7f2      	b.n	800561a <_printf_float+0x422>
 8005634:	2301      	movs	r3, #1
 8005636:	4642      	mov	r2, r8
 8005638:	e7df      	b.n	80055fa <_printf_float+0x402>
 800563a:	2301      	movs	r3, #1
 800563c:	464a      	mov	r2, r9
 800563e:	4631      	mov	r1, r6
 8005640:	4628      	mov	r0, r5
 8005642:	47b8      	blx	r7
 8005644:	3001      	adds	r0, #1
 8005646:	f43f ae38 	beq.w	80052ba <_printf_float+0xc2>
 800564a:	f108 0801 	add.w	r8, r8, #1
 800564e:	68e3      	ldr	r3, [r4, #12]
 8005650:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005652:	1a5b      	subs	r3, r3, r1
 8005654:	4543      	cmp	r3, r8
 8005656:	dcf0      	bgt.n	800563a <_printf_float+0x442>
 8005658:	e6fa      	b.n	8005450 <_printf_float+0x258>
 800565a:	f04f 0800 	mov.w	r8, #0
 800565e:	f104 0919 	add.w	r9, r4, #25
 8005662:	e7f4      	b.n	800564e <_printf_float+0x456>

08005664 <_printf_common>:
 8005664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005668:	4616      	mov	r6, r2
 800566a:	4699      	mov	r9, r3
 800566c:	688a      	ldr	r2, [r1, #8]
 800566e:	690b      	ldr	r3, [r1, #16]
 8005670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005674:	4293      	cmp	r3, r2
 8005676:	bfb8      	it	lt
 8005678:	4613      	movlt	r3, r2
 800567a:	6033      	str	r3, [r6, #0]
 800567c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005680:	4607      	mov	r7, r0
 8005682:	460c      	mov	r4, r1
 8005684:	b10a      	cbz	r2, 800568a <_printf_common+0x26>
 8005686:	3301      	adds	r3, #1
 8005688:	6033      	str	r3, [r6, #0]
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	0699      	lsls	r1, r3, #26
 800568e:	bf42      	ittt	mi
 8005690:	6833      	ldrmi	r3, [r6, #0]
 8005692:	3302      	addmi	r3, #2
 8005694:	6033      	strmi	r3, [r6, #0]
 8005696:	6825      	ldr	r5, [r4, #0]
 8005698:	f015 0506 	ands.w	r5, r5, #6
 800569c:	d106      	bne.n	80056ac <_printf_common+0x48>
 800569e:	f104 0a19 	add.w	sl, r4, #25
 80056a2:	68e3      	ldr	r3, [r4, #12]
 80056a4:	6832      	ldr	r2, [r6, #0]
 80056a6:	1a9b      	subs	r3, r3, r2
 80056a8:	42ab      	cmp	r3, r5
 80056aa:	dc26      	bgt.n	80056fa <_printf_common+0x96>
 80056ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056b0:	1e13      	subs	r3, r2, #0
 80056b2:	6822      	ldr	r2, [r4, #0]
 80056b4:	bf18      	it	ne
 80056b6:	2301      	movne	r3, #1
 80056b8:	0692      	lsls	r2, r2, #26
 80056ba:	d42b      	bmi.n	8005714 <_printf_common+0xb0>
 80056bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056c0:	4649      	mov	r1, r9
 80056c2:	4638      	mov	r0, r7
 80056c4:	47c0      	blx	r8
 80056c6:	3001      	adds	r0, #1
 80056c8:	d01e      	beq.n	8005708 <_printf_common+0xa4>
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	68e5      	ldr	r5, [r4, #12]
 80056ce:	6832      	ldr	r2, [r6, #0]
 80056d0:	f003 0306 	and.w	r3, r3, #6
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	bf08      	it	eq
 80056d8:	1aad      	subeq	r5, r5, r2
 80056da:	68a3      	ldr	r3, [r4, #8]
 80056dc:	6922      	ldr	r2, [r4, #16]
 80056de:	bf0c      	ite	eq
 80056e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056e4:	2500      	movne	r5, #0
 80056e6:	4293      	cmp	r3, r2
 80056e8:	bfc4      	itt	gt
 80056ea:	1a9b      	subgt	r3, r3, r2
 80056ec:	18ed      	addgt	r5, r5, r3
 80056ee:	2600      	movs	r6, #0
 80056f0:	341a      	adds	r4, #26
 80056f2:	42b5      	cmp	r5, r6
 80056f4:	d11a      	bne.n	800572c <_printf_common+0xc8>
 80056f6:	2000      	movs	r0, #0
 80056f8:	e008      	b.n	800570c <_printf_common+0xa8>
 80056fa:	2301      	movs	r3, #1
 80056fc:	4652      	mov	r2, sl
 80056fe:	4649      	mov	r1, r9
 8005700:	4638      	mov	r0, r7
 8005702:	47c0      	blx	r8
 8005704:	3001      	adds	r0, #1
 8005706:	d103      	bne.n	8005710 <_printf_common+0xac>
 8005708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800570c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005710:	3501      	adds	r5, #1
 8005712:	e7c6      	b.n	80056a2 <_printf_common+0x3e>
 8005714:	18e1      	adds	r1, r4, r3
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	2030      	movs	r0, #48	; 0x30
 800571a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800571e:	4422      	add	r2, r4
 8005720:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005724:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005728:	3302      	adds	r3, #2
 800572a:	e7c7      	b.n	80056bc <_printf_common+0x58>
 800572c:	2301      	movs	r3, #1
 800572e:	4622      	mov	r2, r4
 8005730:	4649      	mov	r1, r9
 8005732:	4638      	mov	r0, r7
 8005734:	47c0      	blx	r8
 8005736:	3001      	adds	r0, #1
 8005738:	d0e6      	beq.n	8005708 <_printf_common+0xa4>
 800573a:	3601      	adds	r6, #1
 800573c:	e7d9      	b.n	80056f2 <_printf_common+0x8e>
	...

08005740 <_printf_i>:
 8005740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005744:	460c      	mov	r4, r1
 8005746:	4691      	mov	r9, r2
 8005748:	7e27      	ldrb	r7, [r4, #24]
 800574a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800574c:	2f78      	cmp	r7, #120	; 0x78
 800574e:	4680      	mov	r8, r0
 8005750:	469a      	mov	sl, r3
 8005752:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005756:	d807      	bhi.n	8005768 <_printf_i+0x28>
 8005758:	2f62      	cmp	r7, #98	; 0x62
 800575a:	d80a      	bhi.n	8005772 <_printf_i+0x32>
 800575c:	2f00      	cmp	r7, #0
 800575e:	f000 80d8 	beq.w	8005912 <_printf_i+0x1d2>
 8005762:	2f58      	cmp	r7, #88	; 0x58
 8005764:	f000 80a3 	beq.w	80058ae <_printf_i+0x16e>
 8005768:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800576c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005770:	e03a      	b.n	80057e8 <_printf_i+0xa8>
 8005772:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005776:	2b15      	cmp	r3, #21
 8005778:	d8f6      	bhi.n	8005768 <_printf_i+0x28>
 800577a:	a001      	add	r0, pc, #4	; (adr r0, 8005780 <_printf_i+0x40>)
 800577c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005780:	080057d9 	.word	0x080057d9
 8005784:	080057ed 	.word	0x080057ed
 8005788:	08005769 	.word	0x08005769
 800578c:	08005769 	.word	0x08005769
 8005790:	08005769 	.word	0x08005769
 8005794:	08005769 	.word	0x08005769
 8005798:	080057ed 	.word	0x080057ed
 800579c:	08005769 	.word	0x08005769
 80057a0:	08005769 	.word	0x08005769
 80057a4:	08005769 	.word	0x08005769
 80057a8:	08005769 	.word	0x08005769
 80057ac:	080058f9 	.word	0x080058f9
 80057b0:	0800581d 	.word	0x0800581d
 80057b4:	080058db 	.word	0x080058db
 80057b8:	08005769 	.word	0x08005769
 80057bc:	08005769 	.word	0x08005769
 80057c0:	0800591b 	.word	0x0800591b
 80057c4:	08005769 	.word	0x08005769
 80057c8:	0800581d 	.word	0x0800581d
 80057cc:	08005769 	.word	0x08005769
 80057d0:	08005769 	.word	0x08005769
 80057d4:	080058e3 	.word	0x080058e3
 80057d8:	680b      	ldr	r3, [r1, #0]
 80057da:	1d1a      	adds	r2, r3, #4
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	600a      	str	r2, [r1, #0]
 80057e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057e8:	2301      	movs	r3, #1
 80057ea:	e0a3      	b.n	8005934 <_printf_i+0x1f4>
 80057ec:	6825      	ldr	r5, [r4, #0]
 80057ee:	6808      	ldr	r0, [r1, #0]
 80057f0:	062e      	lsls	r6, r5, #24
 80057f2:	f100 0304 	add.w	r3, r0, #4
 80057f6:	d50a      	bpl.n	800580e <_printf_i+0xce>
 80057f8:	6805      	ldr	r5, [r0, #0]
 80057fa:	600b      	str	r3, [r1, #0]
 80057fc:	2d00      	cmp	r5, #0
 80057fe:	da03      	bge.n	8005808 <_printf_i+0xc8>
 8005800:	232d      	movs	r3, #45	; 0x2d
 8005802:	426d      	negs	r5, r5
 8005804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005808:	485e      	ldr	r0, [pc, #376]	; (8005984 <_printf_i+0x244>)
 800580a:	230a      	movs	r3, #10
 800580c:	e019      	b.n	8005842 <_printf_i+0x102>
 800580e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005812:	6805      	ldr	r5, [r0, #0]
 8005814:	600b      	str	r3, [r1, #0]
 8005816:	bf18      	it	ne
 8005818:	b22d      	sxthne	r5, r5
 800581a:	e7ef      	b.n	80057fc <_printf_i+0xbc>
 800581c:	680b      	ldr	r3, [r1, #0]
 800581e:	6825      	ldr	r5, [r4, #0]
 8005820:	1d18      	adds	r0, r3, #4
 8005822:	6008      	str	r0, [r1, #0]
 8005824:	0628      	lsls	r0, r5, #24
 8005826:	d501      	bpl.n	800582c <_printf_i+0xec>
 8005828:	681d      	ldr	r5, [r3, #0]
 800582a:	e002      	b.n	8005832 <_printf_i+0xf2>
 800582c:	0669      	lsls	r1, r5, #25
 800582e:	d5fb      	bpl.n	8005828 <_printf_i+0xe8>
 8005830:	881d      	ldrh	r5, [r3, #0]
 8005832:	4854      	ldr	r0, [pc, #336]	; (8005984 <_printf_i+0x244>)
 8005834:	2f6f      	cmp	r7, #111	; 0x6f
 8005836:	bf0c      	ite	eq
 8005838:	2308      	moveq	r3, #8
 800583a:	230a      	movne	r3, #10
 800583c:	2100      	movs	r1, #0
 800583e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005842:	6866      	ldr	r6, [r4, #4]
 8005844:	60a6      	str	r6, [r4, #8]
 8005846:	2e00      	cmp	r6, #0
 8005848:	bfa2      	ittt	ge
 800584a:	6821      	ldrge	r1, [r4, #0]
 800584c:	f021 0104 	bicge.w	r1, r1, #4
 8005850:	6021      	strge	r1, [r4, #0]
 8005852:	b90d      	cbnz	r5, 8005858 <_printf_i+0x118>
 8005854:	2e00      	cmp	r6, #0
 8005856:	d04d      	beq.n	80058f4 <_printf_i+0x1b4>
 8005858:	4616      	mov	r6, r2
 800585a:	fbb5 f1f3 	udiv	r1, r5, r3
 800585e:	fb03 5711 	mls	r7, r3, r1, r5
 8005862:	5dc7      	ldrb	r7, [r0, r7]
 8005864:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005868:	462f      	mov	r7, r5
 800586a:	42bb      	cmp	r3, r7
 800586c:	460d      	mov	r5, r1
 800586e:	d9f4      	bls.n	800585a <_printf_i+0x11a>
 8005870:	2b08      	cmp	r3, #8
 8005872:	d10b      	bne.n	800588c <_printf_i+0x14c>
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	07df      	lsls	r7, r3, #31
 8005878:	d508      	bpl.n	800588c <_printf_i+0x14c>
 800587a:	6923      	ldr	r3, [r4, #16]
 800587c:	6861      	ldr	r1, [r4, #4]
 800587e:	4299      	cmp	r1, r3
 8005880:	bfde      	ittt	le
 8005882:	2330      	movle	r3, #48	; 0x30
 8005884:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005888:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800588c:	1b92      	subs	r2, r2, r6
 800588e:	6122      	str	r2, [r4, #16]
 8005890:	f8cd a000 	str.w	sl, [sp]
 8005894:	464b      	mov	r3, r9
 8005896:	aa03      	add	r2, sp, #12
 8005898:	4621      	mov	r1, r4
 800589a:	4640      	mov	r0, r8
 800589c:	f7ff fee2 	bl	8005664 <_printf_common>
 80058a0:	3001      	adds	r0, #1
 80058a2:	d14c      	bne.n	800593e <_printf_i+0x1fe>
 80058a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058a8:	b004      	add	sp, #16
 80058aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ae:	4835      	ldr	r0, [pc, #212]	; (8005984 <_printf_i+0x244>)
 80058b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	680e      	ldr	r6, [r1, #0]
 80058b8:	061f      	lsls	r7, r3, #24
 80058ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80058be:	600e      	str	r6, [r1, #0]
 80058c0:	d514      	bpl.n	80058ec <_printf_i+0x1ac>
 80058c2:	07d9      	lsls	r1, r3, #31
 80058c4:	bf44      	itt	mi
 80058c6:	f043 0320 	orrmi.w	r3, r3, #32
 80058ca:	6023      	strmi	r3, [r4, #0]
 80058cc:	b91d      	cbnz	r5, 80058d6 <_printf_i+0x196>
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	f023 0320 	bic.w	r3, r3, #32
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	2310      	movs	r3, #16
 80058d8:	e7b0      	b.n	800583c <_printf_i+0xfc>
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	f043 0320 	orr.w	r3, r3, #32
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	2378      	movs	r3, #120	; 0x78
 80058e4:	4828      	ldr	r0, [pc, #160]	; (8005988 <_printf_i+0x248>)
 80058e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058ea:	e7e3      	b.n	80058b4 <_printf_i+0x174>
 80058ec:	065e      	lsls	r6, r3, #25
 80058ee:	bf48      	it	mi
 80058f0:	b2ad      	uxthmi	r5, r5
 80058f2:	e7e6      	b.n	80058c2 <_printf_i+0x182>
 80058f4:	4616      	mov	r6, r2
 80058f6:	e7bb      	b.n	8005870 <_printf_i+0x130>
 80058f8:	680b      	ldr	r3, [r1, #0]
 80058fa:	6826      	ldr	r6, [r4, #0]
 80058fc:	6960      	ldr	r0, [r4, #20]
 80058fe:	1d1d      	adds	r5, r3, #4
 8005900:	600d      	str	r5, [r1, #0]
 8005902:	0635      	lsls	r5, r6, #24
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	d501      	bpl.n	800590c <_printf_i+0x1cc>
 8005908:	6018      	str	r0, [r3, #0]
 800590a:	e002      	b.n	8005912 <_printf_i+0x1d2>
 800590c:	0671      	lsls	r1, r6, #25
 800590e:	d5fb      	bpl.n	8005908 <_printf_i+0x1c8>
 8005910:	8018      	strh	r0, [r3, #0]
 8005912:	2300      	movs	r3, #0
 8005914:	6123      	str	r3, [r4, #16]
 8005916:	4616      	mov	r6, r2
 8005918:	e7ba      	b.n	8005890 <_printf_i+0x150>
 800591a:	680b      	ldr	r3, [r1, #0]
 800591c:	1d1a      	adds	r2, r3, #4
 800591e:	600a      	str	r2, [r1, #0]
 8005920:	681e      	ldr	r6, [r3, #0]
 8005922:	6862      	ldr	r2, [r4, #4]
 8005924:	2100      	movs	r1, #0
 8005926:	4630      	mov	r0, r6
 8005928:	f7fa fc62 	bl	80001f0 <memchr>
 800592c:	b108      	cbz	r0, 8005932 <_printf_i+0x1f2>
 800592e:	1b80      	subs	r0, r0, r6
 8005930:	6060      	str	r0, [r4, #4]
 8005932:	6863      	ldr	r3, [r4, #4]
 8005934:	6123      	str	r3, [r4, #16]
 8005936:	2300      	movs	r3, #0
 8005938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800593c:	e7a8      	b.n	8005890 <_printf_i+0x150>
 800593e:	6923      	ldr	r3, [r4, #16]
 8005940:	4632      	mov	r2, r6
 8005942:	4649      	mov	r1, r9
 8005944:	4640      	mov	r0, r8
 8005946:	47d0      	blx	sl
 8005948:	3001      	adds	r0, #1
 800594a:	d0ab      	beq.n	80058a4 <_printf_i+0x164>
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	079b      	lsls	r3, r3, #30
 8005950:	d413      	bmi.n	800597a <_printf_i+0x23a>
 8005952:	68e0      	ldr	r0, [r4, #12]
 8005954:	9b03      	ldr	r3, [sp, #12]
 8005956:	4298      	cmp	r0, r3
 8005958:	bfb8      	it	lt
 800595a:	4618      	movlt	r0, r3
 800595c:	e7a4      	b.n	80058a8 <_printf_i+0x168>
 800595e:	2301      	movs	r3, #1
 8005960:	4632      	mov	r2, r6
 8005962:	4649      	mov	r1, r9
 8005964:	4640      	mov	r0, r8
 8005966:	47d0      	blx	sl
 8005968:	3001      	adds	r0, #1
 800596a:	d09b      	beq.n	80058a4 <_printf_i+0x164>
 800596c:	3501      	adds	r5, #1
 800596e:	68e3      	ldr	r3, [r4, #12]
 8005970:	9903      	ldr	r1, [sp, #12]
 8005972:	1a5b      	subs	r3, r3, r1
 8005974:	42ab      	cmp	r3, r5
 8005976:	dcf2      	bgt.n	800595e <_printf_i+0x21e>
 8005978:	e7eb      	b.n	8005952 <_printf_i+0x212>
 800597a:	2500      	movs	r5, #0
 800597c:	f104 0619 	add.w	r6, r4, #25
 8005980:	e7f5      	b.n	800596e <_printf_i+0x22e>
 8005982:	bf00      	nop
 8005984:	0800935e 	.word	0x0800935e
 8005988:	0800936f 	.word	0x0800936f

0800598c <quorem>:
 800598c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005990:	6903      	ldr	r3, [r0, #16]
 8005992:	690c      	ldr	r4, [r1, #16]
 8005994:	42a3      	cmp	r3, r4
 8005996:	4607      	mov	r7, r0
 8005998:	f2c0 8081 	blt.w	8005a9e <quorem+0x112>
 800599c:	3c01      	subs	r4, #1
 800599e:	f101 0814 	add.w	r8, r1, #20
 80059a2:	f100 0514 	add.w	r5, r0, #20
 80059a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059aa:	9301      	str	r3, [sp, #4]
 80059ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059b4:	3301      	adds	r3, #1
 80059b6:	429a      	cmp	r2, r3
 80059b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80059c4:	d331      	bcc.n	8005a2a <quorem+0x9e>
 80059c6:	f04f 0e00 	mov.w	lr, #0
 80059ca:	4640      	mov	r0, r8
 80059cc:	46ac      	mov	ip, r5
 80059ce:	46f2      	mov	sl, lr
 80059d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80059d4:	b293      	uxth	r3, r2
 80059d6:	fb06 e303 	mla	r3, r6, r3, lr
 80059da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80059de:	b29b      	uxth	r3, r3
 80059e0:	ebaa 0303 	sub.w	r3, sl, r3
 80059e4:	0c12      	lsrs	r2, r2, #16
 80059e6:	f8dc a000 	ldr.w	sl, [ip]
 80059ea:	fb06 e202 	mla	r2, r6, r2, lr
 80059ee:	fa13 f38a 	uxtah	r3, r3, sl
 80059f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059f6:	fa1f fa82 	uxth.w	sl, r2
 80059fa:	f8dc 2000 	ldr.w	r2, [ip]
 80059fe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005a02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a0c:	4581      	cmp	r9, r0
 8005a0e:	f84c 3b04 	str.w	r3, [ip], #4
 8005a12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a16:	d2db      	bcs.n	80059d0 <quorem+0x44>
 8005a18:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a1c:	b92b      	cbnz	r3, 8005a2a <quorem+0x9e>
 8005a1e:	9b01      	ldr	r3, [sp, #4]
 8005a20:	3b04      	subs	r3, #4
 8005a22:	429d      	cmp	r5, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	d32e      	bcc.n	8005a86 <quorem+0xfa>
 8005a28:	613c      	str	r4, [r7, #16]
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	f001 f8c0 	bl	8006bb0 <__mcmp>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	db24      	blt.n	8005a7e <quorem+0xf2>
 8005a34:	3601      	adds	r6, #1
 8005a36:	4628      	mov	r0, r5
 8005a38:	f04f 0c00 	mov.w	ip, #0
 8005a3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a40:	f8d0 e000 	ldr.w	lr, [r0]
 8005a44:	b293      	uxth	r3, r2
 8005a46:	ebac 0303 	sub.w	r3, ip, r3
 8005a4a:	0c12      	lsrs	r2, r2, #16
 8005a4c:	fa13 f38e 	uxtah	r3, r3, lr
 8005a50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a5e:	45c1      	cmp	r9, r8
 8005a60:	f840 3b04 	str.w	r3, [r0], #4
 8005a64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a68:	d2e8      	bcs.n	8005a3c <quorem+0xb0>
 8005a6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a72:	b922      	cbnz	r2, 8005a7e <quorem+0xf2>
 8005a74:	3b04      	subs	r3, #4
 8005a76:	429d      	cmp	r5, r3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	d30a      	bcc.n	8005a92 <quorem+0x106>
 8005a7c:	613c      	str	r4, [r7, #16]
 8005a7e:	4630      	mov	r0, r6
 8005a80:	b003      	add	sp, #12
 8005a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a86:	6812      	ldr	r2, [r2, #0]
 8005a88:	3b04      	subs	r3, #4
 8005a8a:	2a00      	cmp	r2, #0
 8005a8c:	d1cc      	bne.n	8005a28 <quorem+0x9c>
 8005a8e:	3c01      	subs	r4, #1
 8005a90:	e7c7      	b.n	8005a22 <quorem+0x96>
 8005a92:	6812      	ldr	r2, [r2, #0]
 8005a94:	3b04      	subs	r3, #4
 8005a96:	2a00      	cmp	r2, #0
 8005a98:	d1f0      	bne.n	8005a7c <quorem+0xf0>
 8005a9a:	3c01      	subs	r4, #1
 8005a9c:	e7eb      	b.n	8005a76 <quorem+0xea>
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	e7ee      	b.n	8005a80 <quorem+0xf4>
 8005aa2:	0000      	movs	r0, r0
 8005aa4:	0000      	movs	r0, r0
	...

08005aa8 <_dtoa_r>:
 8005aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aac:	ed2d 8b02 	vpush	{d8}
 8005ab0:	ec57 6b10 	vmov	r6, r7, d0
 8005ab4:	b095      	sub	sp, #84	; 0x54
 8005ab6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ab8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005abc:	9105      	str	r1, [sp, #20]
 8005abe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ac6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ac8:	b975      	cbnz	r5, 8005ae8 <_dtoa_r+0x40>
 8005aca:	2010      	movs	r0, #16
 8005acc:	f000 fddc 	bl	8006688 <malloc>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	6260      	str	r0, [r4, #36]	; 0x24
 8005ad4:	b920      	cbnz	r0, 8005ae0 <_dtoa_r+0x38>
 8005ad6:	4bb2      	ldr	r3, [pc, #712]	; (8005da0 <_dtoa_r+0x2f8>)
 8005ad8:	21ea      	movs	r1, #234	; 0xea
 8005ada:	48b2      	ldr	r0, [pc, #712]	; (8005da4 <_dtoa_r+0x2fc>)
 8005adc:	f001 fa32 	bl	8006f44 <__assert_func>
 8005ae0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ae4:	6005      	str	r5, [r0, #0]
 8005ae6:	60c5      	str	r5, [r0, #12]
 8005ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aea:	6819      	ldr	r1, [r3, #0]
 8005aec:	b151      	cbz	r1, 8005b04 <_dtoa_r+0x5c>
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	604a      	str	r2, [r1, #4]
 8005af2:	2301      	movs	r3, #1
 8005af4:	4093      	lsls	r3, r2
 8005af6:	608b      	str	r3, [r1, #8]
 8005af8:	4620      	mov	r0, r4
 8005afa:	f000 fe1b 	bl	8006734 <_Bfree>
 8005afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	1e3b      	subs	r3, r7, #0
 8005b06:	bfb9      	ittee	lt
 8005b08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b0c:	9303      	strlt	r3, [sp, #12]
 8005b0e:	2300      	movge	r3, #0
 8005b10:	f8c8 3000 	strge.w	r3, [r8]
 8005b14:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005b18:	4ba3      	ldr	r3, [pc, #652]	; (8005da8 <_dtoa_r+0x300>)
 8005b1a:	bfbc      	itt	lt
 8005b1c:	2201      	movlt	r2, #1
 8005b1e:	f8c8 2000 	strlt.w	r2, [r8]
 8005b22:	ea33 0309 	bics.w	r3, r3, r9
 8005b26:	d11b      	bne.n	8005b60 <_dtoa_r+0xb8>
 8005b28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b34:	4333      	orrs	r3, r6
 8005b36:	f000 857a 	beq.w	800662e <_dtoa_r+0xb86>
 8005b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b3c:	b963      	cbnz	r3, 8005b58 <_dtoa_r+0xb0>
 8005b3e:	4b9b      	ldr	r3, [pc, #620]	; (8005dac <_dtoa_r+0x304>)
 8005b40:	e024      	b.n	8005b8c <_dtoa_r+0xe4>
 8005b42:	4b9b      	ldr	r3, [pc, #620]	; (8005db0 <_dtoa_r+0x308>)
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	3308      	adds	r3, #8
 8005b48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	9800      	ldr	r0, [sp, #0]
 8005b4e:	b015      	add	sp, #84	; 0x54
 8005b50:	ecbd 8b02 	vpop	{d8}
 8005b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b58:	4b94      	ldr	r3, [pc, #592]	; (8005dac <_dtoa_r+0x304>)
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	3303      	adds	r3, #3
 8005b5e:	e7f3      	b.n	8005b48 <_dtoa_r+0xa0>
 8005b60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b64:	2200      	movs	r2, #0
 8005b66:	ec51 0b17 	vmov	r0, r1, d7
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005b70:	f7fa ffb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b74:	4680      	mov	r8, r0
 8005b76:	b158      	cbz	r0, 8005b90 <_dtoa_r+0xe8>
 8005b78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8551 	beq.w	8006628 <_dtoa_r+0xb80>
 8005b86:	488b      	ldr	r0, [pc, #556]	; (8005db4 <_dtoa_r+0x30c>)
 8005b88:	6018      	str	r0, [r3, #0]
 8005b8a:	1e43      	subs	r3, r0, #1
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	e7dd      	b.n	8005b4c <_dtoa_r+0xa4>
 8005b90:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005b94:	aa12      	add	r2, sp, #72	; 0x48
 8005b96:	a913      	add	r1, sp, #76	; 0x4c
 8005b98:	4620      	mov	r0, r4
 8005b9a:	f001 f8ad 	bl	8006cf8 <__d2b>
 8005b9e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005ba2:	4683      	mov	fp, r0
 8005ba4:	2d00      	cmp	r5, #0
 8005ba6:	d07c      	beq.n	8005ca2 <_dtoa_r+0x1fa>
 8005ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005baa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005bae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bb2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005bb6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005bba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005bbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005bc2:	4b7d      	ldr	r3, [pc, #500]	; (8005db8 <_dtoa_r+0x310>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	4639      	mov	r1, r7
 8005bca:	f7fa fb65 	bl	8000298 <__aeabi_dsub>
 8005bce:	a36e      	add	r3, pc, #440	; (adr r3, 8005d88 <_dtoa_r+0x2e0>)
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	f7fa fd18 	bl	8000608 <__aeabi_dmul>
 8005bd8:	a36d      	add	r3, pc, #436	; (adr r3, 8005d90 <_dtoa_r+0x2e8>)
 8005bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bde:	f7fa fb5d 	bl	800029c <__adddf3>
 8005be2:	4606      	mov	r6, r0
 8005be4:	4628      	mov	r0, r5
 8005be6:	460f      	mov	r7, r1
 8005be8:	f7fa fca4 	bl	8000534 <__aeabi_i2d>
 8005bec:	a36a      	add	r3, pc, #424	; (adr r3, 8005d98 <_dtoa_r+0x2f0>)
 8005bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf2:	f7fa fd09 	bl	8000608 <__aeabi_dmul>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	4639      	mov	r1, r7
 8005bfe:	f7fa fb4d 	bl	800029c <__adddf3>
 8005c02:	4606      	mov	r6, r0
 8005c04:	460f      	mov	r7, r1
 8005c06:	f7fa ffaf 	bl	8000b68 <__aeabi_d2iz>
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	4682      	mov	sl, r0
 8005c0e:	2300      	movs	r3, #0
 8005c10:	4630      	mov	r0, r6
 8005c12:	4639      	mov	r1, r7
 8005c14:	f7fa ff6a 	bl	8000aec <__aeabi_dcmplt>
 8005c18:	b148      	cbz	r0, 8005c2e <_dtoa_r+0x186>
 8005c1a:	4650      	mov	r0, sl
 8005c1c:	f7fa fc8a 	bl	8000534 <__aeabi_i2d>
 8005c20:	4632      	mov	r2, r6
 8005c22:	463b      	mov	r3, r7
 8005c24:	f7fa ff58 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c28:	b908      	cbnz	r0, 8005c2e <_dtoa_r+0x186>
 8005c2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c2e:	f1ba 0f16 	cmp.w	sl, #22
 8005c32:	d854      	bhi.n	8005cde <_dtoa_r+0x236>
 8005c34:	4b61      	ldr	r3, [pc, #388]	; (8005dbc <_dtoa_r+0x314>)
 8005c36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c42:	f7fa ff53 	bl	8000aec <__aeabi_dcmplt>
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d04b      	beq.n	8005ce2 <_dtoa_r+0x23a>
 8005c4a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c4e:	2300      	movs	r3, #0
 8005c50:	930e      	str	r3, [sp, #56]	; 0x38
 8005c52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c54:	1b5d      	subs	r5, r3, r5
 8005c56:	1e6b      	subs	r3, r5, #1
 8005c58:	9304      	str	r3, [sp, #16]
 8005c5a:	bf43      	ittte	mi
 8005c5c:	2300      	movmi	r3, #0
 8005c5e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005c62:	9304      	strmi	r3, [sp, #16]
 8005c64:	f04f 0800 	movpl.w	r8, #0
 8005c68:	f1ba 0f00 	cmp.w	sl, #0
 8005c6c:	db3b      	blt.n	8005ce6 <_dtoa_r+0x23e>
 8005c6e:	9b04      	ldr	r3, [sp, #16]
 8005c70:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005c74:	4453      	add	r3, sl
 8005c76:	9304      	str	r3, [sp, #16]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	9306      	str	r3, [sp, #24]
 8005c7c:	9b05      	ldr	r3, [sp, #20]
 8005c7e:	2b09      	cmp	r3, #9
 8005c80:	d869      	bhi.n	8005d56 <_dtoa_r+0x2ae>
 8005c82:	2b05      	cmp	r3, #5
 8005c84:	bfc4      	itt	gt
 8005c86:	3b04      	subgt	r3, #4
 8005c88:	9305      	strgt	r3, [sp, #20]
 8005c8a:	9b05      	ldr	r3, [sp, #20]
 8005c8c:	f1a3 0302 	sub.w	r3, r3, #2
 8005c90:	bfcc      	ite	gt
 8005c92:	2500      	movgt	r5, #0
 8005c94:	2501      	movle	r5, #1
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d869      	bhi.n	8005d6e <_dtoa_r+0x2c6>
 8005c9a:	e8df f003 	tbb	[pc, r3]
 8005c9e:	4e2c      	.short	0x4e2c
 8005ca0:	5a4c      	.short	0x5a4c
 8005ca2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005ca6:	441d      	add	r5, r3
 8005ca8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	bfc1      	itttt	gt
 8005cb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005cb4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005cb8:	fa09 f303 	lslgt.w	r3, r9, r3
 8005cbc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005cc0:	bfda      	itte	le
 8005cc2:	f1c3 0320 	rsble	r3, r3, #32
 8005cc6:	fa06 f003 	lslle.w	r0, r6, r3
 8005cca:	4318      	orrgt	r0, r3
 8005ccc:	f7fa fc22 	bl	8000514 <__aeabi_ui2d>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005cd8:	3d01      	subs	r5, #1
 8005cda:	9310      	str	r3, [sp, #64]	; 0x40
 8005cdc:	e771      	b.n	8005bc2 <_dtoa_r+0x11a>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e7b6      	b.n	8005c50 <_dtoa_r+0x1a8>
 8005ce2:	900e      	str	r0, [sp, #56]	; 0x38
 8005ce4:	e7b5      	b.n	8005c52 <_dtoa_r+0x1aa>
 8005ce6:	f1ca 0300 	rsb	r3, sl, #0
 8005cea:	9306      	str	r3, [sp, #24]
 8005cec:	2300      	movs	r3, #0
 8005cee:	eba8 080a 	sub.w	r8, r8, sl
 8005cf2:	930d      	str	r3, [sp, #52]	; 0x34
 8005cf4:	e7c2      	b.n	8005c7c <_dtoa_r+0x1d4>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	9308      	str	r3, [sp, #32]
 8005cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	dc39      	bgt.n	8005d74 <_dtoa_r+0x2cc>
 8005d00:	f04f 0901 	mov.w	r9, #1
 8005d04:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d08:	464b      	mov	r3, r9
 8005d0a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005d0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005d10:	2200      	movs	r2, #0
 8005d12:	6042      	str	r2, [r0, #4]
 8005d14:	2204      	movs	r2, #4
 8005d16:	f102 0614 	add.w	r6, r2, #20
 8005d1a:	429e      	cmp	r6, r3
 8005d1c:	6841      	ldr	r1, [r0, #4]
 8005d1e:	d92f      	bls.n	8005d80 <_dtoa_r+0x2d8>
 8005d20:	4620      	mov	r0, r4
 8005d22:	f000 fcc7 	bl	80066b4 <_Balloc>
 8005d26:	9000      	str	r0, [sp, #0]
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d14b      	bne.n	8005dc4 <_dtoa_r+0x31c>
 8005d2c:	4b24      	ldr	r3, [pc, #144]	; (8005dc0 <_dtoa_r+0x318>)
 8005d2e:	4602      	mov	r2, r0
 8005d30:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d34:	e6d1      	b.n	8005ada <_dtoa_r+0x32>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e7de      	b.n	8005cf8 <_dtoa_r+0x250>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	9308      	str	r3, [sp, #32]
 8005d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d40:	eb0a 0903 	add.w	r9, sl, r3
 8005d44:	f109 0301 	add.w	r3, r9, #1
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	9301      	str	r3, [sp, #4]
 8005d4c:	bfb8      	it	lt
 8005d4e:	2301      	movlt	r3, #1
 8005d50:	e7dd      	b.n	8005d0e <_dtoa_r+0x266>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e7f2      	b.n	8005d3c <_dtoa_r+0x294>
 8005d56:	2501      	movs	r5, #1
 8005d58:	2300      	movs	r3, #0
 8005d5a:	9305      	str	r3, [sp, #20]
 8005d5c:	9508      	str	r5, [sp, #32]
 8005d5e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005d62:	2200      	movs	r2, #0
 8005d64:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d68:	2312      	movs	r3, #18
 8005d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8005d6c:	e7cf      	b.n	8005d0e <_dtoa_r+0x266>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	9308      	str	r3, [sp, #32]
 8005d72:	e7f4      	b.n	8005d5e <_dtoa_r+0x2b6>
 8005d74:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005d78:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d7c:	464b      	mov	r3, r9
 8005d7e:	e7c6      	b.n	8005d0e <_dtoa_r+0x266>
 8005d80:	3101      	adds	r1, #1
 8005d82:	6041      	str	r1, [r0, #4]
 8005d84:	0052      	lsls	r2, r2, #1
 8005d86:	e7c6      	b.n	8005d16 <_dtoa_r+0x26e>
 8005d88:	636f4361 	.word	0x636f4361
 8005d8c:	3fd287a7 	.word	0x3fd287a7
 8005d90:	8b60c8b3 	.word	0x8b60c8b3
 8005d94:	3fc68a28 	.word	0x3fc68a28
 8005d98:	509f79fb 	.word	0x509f79fb
 8005d9c:	3fd34413 	.word	0x3fd34413
 8005da0:	0800938d 	.word	0x0800938d
 8005da4:	080093a4 	.word	0x080093a4
 8005da8:	7ff00000 	.word	0x7ff00000
 8005dac:	08009389 	.word	0x08009389
 8005db0:	08009380 	.word	0x08009380
 8005db4:	0800935d 	.word	0x0800935d
 8005db8:	3ff80000 	.word	0x3ff80000
 8005dbc:	080094a0 	.word	0x080094a0
 8005dc0:	08009403 	.word	0x08009403
 8005dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dc6:	9a00      	ldr	r2, [sp, #0]
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	9b01      	ldr	r3, [sp, #4]
 8005dcc:	2b0e      	cmp	r3, #14
 8005dce:	f200 80ad 	bhi.w	8005f2c <_dtoa_r+0x484>
 8005dd2:	2d00      	cmp	r5, #0
 8005dd4:	f000 80aa 	beq.w	8005f2c <_dtoa_r+0x484>
 8005dd8:	f1ba 0f00 	cmp.w	sl, #0
 8005ddc:	dd36      	ble.n	8005e4c <_dtoa_r+0x3a4>
 8005dde:	4ac3      	ldr	r2, [pc, #780]	; (80060ec <_dtoa_r+0x644>)
 8005de0:	f00a 030f 	and.w	r3, sl, #15
 8005de4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005de8:	ed93 7b00 	vldr	d7, [r3]
 8005dec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005df0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005df4:	eeb0 8a47 	vmov.f32	s16, s14
 8005df8:	eef0 8a67 	vmov.f32	s17, s15
 8005dfc:	d016      	beq.n	8005e2c <_dtoa_r+0x384>
 8005dfe:	4bbc      	ldr	r3, [pc, #752]	; (80060f0 <_dtoa_r+0x648>)
 8005e00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e08:	f7fa fd28 	bl	800085c <__aeabi_ddiv>
 8005e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e10:	f007 070f 	and.w	r7, r7, #15
 8005e14:	2503      	movs	r5, #3
 8005e16:	4eb6      	ldr	r6, [pc, #728]	; (80060f0 <_dtoa_r+0x648>)
 8005e18:	b957      	cbnz	r7, 8005e30 <_dtoa_r+0x388>
 8005e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e1e:	ec53 2b18 	vmov	r2, r3, d8
 8005e22:	f7fa fd1b 	bl	800085c <__aeabi_ddiv>
 8005e26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e2a:	e029      	b.n	8005e80 <_dtoa_r+0x3d8>
 8005e2c:	2502      	movs	r5, #2
 8005e2e:	e7f2      	b.n	8005e16 <_dtoa_r+0x36e>
 8005e30:	07f9      	lsls	r1, r7, #31
 8005e32:	d508      	bpl.n	8005e46 <_dtoa_r+0x39e>
 8005e34:	ec51 0b18 	vmov	r0, r1, d8
 8005e38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e3c:	f7fa fbe4 	bl	8000608 <__aeabi_dmul>
 8005e40:	ec41 0b18 	vmov	d8, r0, r1
 8005e44:	3501      	adds	r5, #1
 8005e46:	107f      	asrs	r7, r7, #1
 8005e48:	3608      	adds	r6, #8
 8005e4a:	e7e5      	b.n	8005e18 <_dtoa_r+0x370>
 8005e4c:	f000 80a6 	beq.w	8005f9c <_dtoa_r+0x4f4>
 8005e50:	f1ca 0600 	rsb	r6, sl, #0
 8005e54:	4ba5      	ldr	r3, [pc, #660]	; (80060ec <_dtoa_r+0x644>)
 8005e56:	4fa6      	ldr	r7, [pc, #664]	; (80060f0 <_dtoa_r+0x648>)
 8005e58:	f006 020f 	and.w	r2, r6, #15
 8005e5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e68:	f7fa fbce 	bl	8000608 <__aeabi_dmul>
 8005e6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e70:	1136      	asrs	r6, r6, #4
 8005e72:	2300      	movs	r3, #0
 8005e74:	2502      	movs	r5, #2
 8005e76:	2e00      	cmp	r6, #0
 8005e78:	f040 8085 	bne.w	8005f86 <_dtoa_r+0x4de>
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1d2      	bne.n	8005e26 <_dtoa_r+0x37e>
 8005e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 808c 	beq.w	8005fa0 <_dtoa_r+0x4f8>
 8005e88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e8c:	4b99      	ldr	r3, [pc, #612]	; (80060f4 <_dtoa_r+0x64c>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	4630      	mov	r0, r6
 8005e92:	4639      	mov	r1, r7
 8005e94:	f7fa fe2a 	bl	8000aec <__aeabi_dcmplt>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	f000 8081 	beq.w	8005fa0 <_dtoa_r+0x4f8>
 8005e9e:	9b01      	ldr	r3, [sp, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d07d      	beq.n	8005fa0 <_dtoa_r+0x4f8>
 8005ea4:	f1b9 0f00 	cmp.w	r9, #0
 8005ea8:	dd3c      	ble.n	8005f24 <_dtoa_r+0x47c>
 8005eaa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005eae:	9307      	str	r3, [sp, #28]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4b91      	ldr	r3, [pc, #580]	; (80060f8 <_dtoa_r+0x650>)
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	4639      	mov	r1, r7
 8005eb8:	f7fa fba6 	bl	8000608 <__aeabi_dmul>
 8005ebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ec0:	3501      	adds	r5, #1
 8005ec2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005ec6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f7fa fb32 	bl	8000534 <__aeabi_i2d>
 8005ed0:	4632      	mov	r2, r6
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	f7fa fb98 	bl	8000608 <__aeabi_dmul>
 8005ed8:	4b88      	ldr	r3, [pc, #544]	; (80060fc <_dtoa_r+0x654>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	f7fa f9de 	bl	800029c <__adddf3>
 8005ee0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ee8:	9303      	str	r3, [sp, #12]
 8005eea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d15c      	bne.n	8005faa <_dtoa_r+0x502>
 8005ef0:	4b83      	ldr	r3, [pc, #524]	; (8006100 <_dtoa_r+0x658>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	4639      	mov	r1, r7
 8005ef8:	f7fa f9ce 	bl	8000298 <__aeabi_dsub>
 8005efc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f00:	4606      	mov	r6, r0
 8005f02:	460f      	mov	r7, r1
 8005f04:	f7fa fe10 	bl	8000b28 <__aeabi_dcmpgt>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	f040 8296 	bne.w	800643a <_dtoa_r+0x992>
 8005f0e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005f12:	4630      	mov	r0, r6
 8005f14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f18:	4639      	mov	r1, r7
 8005f1a:	f7fa fde7 	bl	8000aec <__aeabi_dcmplt>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	f040 8288 	bne.w	8006434 <_dtoa_r+0x98c>
 8005f24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f2c0 8158 	blt.w	80061e4 <_dtoa_r+0x73c>
 8005f34:	f1ba 0f0e 	cmp.w	sl, #14
 8005f38:	f300 8154 	bgt.w	80061e4 <_dtoa_r+0x73c>
 8005f3c:	4b6b      	ldr	r3, [pc, #428]	; (80060ec <_dtoa_r+0x644>)
 8005f3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f42:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f280 80e3 	bge.w	8006114 <_dtoa_r+0x66c>
 8005f4e:	9b01      	ldr	r3, [sp, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f300 80df 	bgt.w	8006114 <_dtoa_r+0x66c>
 8005f56:	f040 826d 	bne.w	8006434 <_dtoa_r+0x98c>
 8005f5a:	4b69      	ldr	r3, [pc, #420]	; (8006100 <_dtoa_r+0x658>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	4640      	mov	r0, r8
 8005f60:	4649      	mov	r1, r9
 8005f62:	f7fa fb51 	bl	8000608 <__aeabi_dmul>
 8005f66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f6a:	f7fa fdd3 	bl	8000b14 <__aeabi_dcmpge>
 8005f6e:	9e01      	ldr	r6, [sp, #4]
 8005f70:	4637      	mov	r7, r6
 8005f72:	2800      	cmp	r0, #0
 8005f74:	f040 8243 	bne.w	80063fe <_dtoa_r+0x956>
 8005f78:	9d00      	ldr	r5, [sp, #0]
 8005f7a:	2331      	movs	r3, #49	; 0x31
 8005f7c:	f805 3b01 	strb.w	r3, [r5], #1
 8005f80:	f10a 0a01 	add.w	sl, sl, #1
 8005f84:	e23f      	b.n	8006406 <_dtoa_r+0x95e>
 8005f86:	07f2      	lsls	r2, r6, #31
 8005f88:	d505      	bpl.n	8005f96 <_dtoa_r+0x4ee>
 8005f8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f8e:	f7fa fb3b 	bl	8000608 <__aeabi_dmul>
 8005f92:	3501      	adds	r5, #1
 8005f94:	2301      	movs	r3, #1
 8005f96:	1076      	asrs	r6, r6, #1
 8005f98:	3708      	adds	r7, #8
 8005f9a:	e76c      	b.n	8005e76 <_dtoa_r+0x3ce>
 8005f9c:	2502      	movs	r5, #2
 8005f9e:	e76f      	b.n	8005e80 <_dtoa_r+0x3d8>
 8005fa0:	9b01      	ldr	r3, [sp, #4]
 8005fa2:	f8cd a01c 	str.w	sl, [sp, #28]
 8005fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8005fa8:	e78d      	b.n	8005ec6 <_dtoa_r+0x41e>
 8005faa:	9900      	ldr	r1, [sp, #0]
 8005fac:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005fae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fb0:	4b4e      	ldr	r3, [pc, #312]	; (80060ec <_dtoa_r+0x644>)
 8005fb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fb6:	4401      	add	r1, r0
 8005fb8:	9102      	str	r1, [sp, #8]
 8005fba:	9908      	ldr	r1, [sp, #32]
 8005fbc:	eeb0 8a47 	vmov.f32	s16, s14
 8005fc0:	eef0 8a67 	vmov.f32	s17, s15
 8005fc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fcc:	2900      	cmp	r1, #0
 8005fce:	d045      	beq.n	800605c <_dtoa_r+0x5b4>
 8005fd0:	494c      	ldr	r1, [pc, #304]	; (8006104 <_dtoa_r+0x65c>)
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	f7fa fc42 	bl	800085c <__aeabi_ddiv>
 8005fd8:	ec53 2b18 	vmov	r2, r3, d8
 8005fdc:	f7fa f95c 	bl	8000298 <__aeabi_dsub>
 8005fe0:	9d00      	ldr	r5, [sp, #0]
 8005fe2:	ec41 0b18 	vmov	d8, r0, r1
 8005fe6:	4639      	mov	r1, r7
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f7fa fdbd 	bl	8000b68 <__aeabi_d2iz>
 8005fee:	900c      	str	r0, [sp, #48]	; 0x30
 8005ff0:	f7fa faa0 	bl	8000534 <__aeabi_i2d>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	4639      	mov	r1, r7
 8005ffc:	f7fa f94c 	bl	8000298 <__aeabi_dsub>
 8006000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006002:	3330      	adds	r3, #48	; 0x30
 8006004:	f805 3b01 	strb.w	r3, [r5], #1
 8006008:	ec53 2b18 	vmov	r2, r3, d8
 800600c:	4606      	mov	r6, r0
 800600e:	460f      	mov	r7, r1
 8006010:	f7fa fd6c 	bl	8000aec <__aeabi_dcmplt>
 8006014:	2800      	cmp	r0, #0
 8006016:	d165      	bne.n	80060e4 <_dtoa_r+0x63c>
 8006018:	4632      	mov	r2, r6
 800601a:	463b      	mov	r3, r7
 800601c:	4935      	ldr	r1, [pc, #212]	; (80060f4 <_dtoa_r+0x64c>)
 800601e:	2000      	movs	r0, #0
 8006020:	f7fa f93a 	bl	8000298 <__aeabi_dsub>
 8006024:	ec53 2b18 	vmov	r2, r3, d8
 8006028:	f7fa fd60 	bl	8000aec <__aeabi_dcmplt>
 800602c:	2800      	cmp	r0, #0
 800602e:	f040 80b9 	bne.w	80061a4 <_dtoa_r+0x6fc>
 8006032:	9b02      	ldr	r3, [sp, #8]
 8006034:	429d      	cmp	r5, r3
 8006036:	f43f af75 	beq.w	8005f24 <_dtoa_r+0x47c>
 800603a:	4b2f      	ldr	r3, [pc, #188]	; (80060f8 <_dtoa_r+0x650>)
 800603c:	ec51 0b18 	vmov	r0, r1, d8
 8006040:	2200      	movs	r2, #0
 8006042:	f7fa fae1 	bl	8000608 <__aeabi_dmul>
 8006046:	4b2c      	ldr	r3, [pc, #176]	; (80060f8 <_dtoa_r+0x650>)
 8006048:	ec41 0b18 	vmov	d8, r0, r1
 800604c:	2200      	movs	r2, #0
 800604e:	4630      	mov	r0, r6
 8006050:	4639      	mov	r1, r7
 8006052:	f7fa fad9 	bl	8000608 <__aeabi_dmul>
 8006056:	4606      	mov	r6, r0
 8006058:	460f      	mov	r7, r1
 800605a:	e7c4      	b.n	8005fe6 <_dtoa_r+0x53e>
 800605c:	ec51 0b17 	vmov	r0, r1, d7
 8006060:	f7fa fad2 	bl	8000608 <__aeabi_dmul>
 8006064:	9b02      	ldr	r3, [sp, #8]
 8006066:	9d00      	ldr	r5, [sp, #0]
 8006068:	930c      	str	r3, [sp, #48]	; 0x30
 800606a:	ec41 0b18 	vmov	d8, r0, r1
 800606e:	4639      	mov	r1, r7
 8006070:	4630      	mov	r0, r6
 8006072:	f7fa fd79 	bl	8000b68 <__aeabi_d2iz>
 8006076:	9011      	str	r0, [sp, #68]	; 0x44
 8006078:	f7fa fa5c 	bl	8000534 <__aeabi_i2d>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4630      	mov	r0, r6
 8006082:	4639      	mov	r1, r7
 8006084:	f7fa f908 	bl	8000298 <__aeabi_dsub>
 8006088:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800608a:	3330      	adds	r3, #48	; 0x30
 800608c:	f805 3b01 	strb.w	r3, [r5], #1
 8006090:	9b02      	ldr	r3, [sp, #8]
 8006092:	429d      	cmp	r5, r3
 8006094:	4606      	mov	r6, r0
 8006096:	460f      	mov	r7, r1
 8006098:	f04f 0200 	mov.w	r2, #0
 800609c:	d134      	bne.n	8006108 <_dtoa_r+0x660>
 800609e:	4b19      	ldr	r3, [pc, #100]	; (8006104 <_dtoa_r+0x65c>)
 80060a0:	ec51 0b18 	vmov	r0, r1, d8
 80060a4:	f7fa f8fa 	bl	800029c <__adddf3>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4630      	mov	r0, r6
 80060ae:	4639      	mov	r1, r7
 80060b0:	f7fa fd3a 	bl	8000b28 <__aeabi_dcmpgt>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	d175      	bne.n	80061a4 <_dtoa_r+0x6fc>
 80060b8:	ec53 2b18 	vmov	r2, r3, d8
 80060bc:	4911      	ldr	r1, [pc, #68]	; (8006104 <_dtoa_r+0x65c>)
 80060be:	2000      	movs	r0, #0
 80060c0:	f7fa f8ea 	bl	8000298 <__aeabi_dsub>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4630      	mov	r0, r6
 80060ca:	4639      	mov	r1, r7
 80060cc:	f7fa fd0e 	bl	8000aec <__aeabi_dcmplt>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	f43f af27 	beq.w	8005f24 <_dtoa_r+0x47c>
 80060d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060d8:	1e6b      	subs	r3, r5, #1
 80060da:	930c      	str	r3, [sp, #48]	; 0x30
 80060dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060e0:	2b30      	cmp	r3, #48	; 0x30
 80060e2:	d0f8      	beq.n	80060d6 <_dtoa_r+0x62e>
 80060e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80060e8:	e04a      	b.n	8006180 <_dtoa_r+0x6d8>
 80060ea:	bf00      	nop
 80060ec:	080094a0 	.word	0x080094a0
 80060f0:	08009478 	.word	0x08009478
 80060f4:	3ff00000 	.word	0x3ff00000
 80060f8:	40240000 	.word	0x40240000
 80060fc:	401c0000 	.word	0x401c0000
 8006100:	40140000 	.word	0x40140000
 8006104:	3fe00000 	.word	0x3fe00000
 8006108:	4baf      	ldr	r3, [pc, #700]	; (80063c8 <_dtoa_r+0x920>)
 800610a:	f7fa fa7d 	bl	8000608 <__aeabi_dmul>
 800610e:	4606      	mov	r6, r0
 8006110:	460f      	mov	r7, r1
 8006112:	e7ac      	b.n	800606e <_dtoa_r+0x5c6>
 8006114:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006118:	9d00      	ldr	r5, [sp, #0]
 800611a:	4642      	mov	r2, r8
 800611c:	464b      	mov	r3, r9
 800611e:	4630      	mov	r0, r6
 8006120:	4639      	mov	r1, r7
 8006122:	f7fa fb9b 	bl	800085c <__aeabi_ddiv>
 8006126:	f7fa fd1f 	bl	8000b68 <__aeabi_d2iz>
 800612a:	9002      	str	r0, [sp, #8]
 800612c:	f7fa fa02 	bl	8000534 <__aeabi_i2d>
 8006130:	4642      	mov	r2, r8
 8006132:	464b      	mov	r3, r9
 8006134:	f7fa fa68 	bl	8000608 <__aeabi_dmul>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4630      	mov	r0, r6
 800613e:	4639      	mov	r1, r7
 8006140:	f7fa f8aa 	bl	8000298 <__aeabi_dsub>
 8006144:	9e02      	ldr	r6, [sp, #8]
 8006146:	9f01      	ldr	r7, [sp, #4]
 8006148:	3630      	adds	r6, #48	; 0x30
 800614a:	f805 6b01 	strb.w	r6, [r5], #1
 800614e:	9e00      	ldr	r6, [sp, #0]
 8006150:	1bae      	subs	r6, r5, r6
 8006152:	42b7      	cmp	r7, r6
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	d137      	bne.n	80061ca <_dtoa_r+0x722>
 800615a:	f7fa f89f 	bl	800029c <__adddf3>
 800615e:	4642      	mov	r2, r8
 8006160:	464b      	mov	r3, r9
 8006162:	4606      	mov	r6, r0
 8006164:	460f      	mov	r7, r1
 8006166:	f7fa fcdf 	bl	8000b28 <__aeabi_dcmpgt>
 800616a:	b9c8      	cbnz	r0, 80061a0 <_dtoa_r+0x6f8>
 800616c:	4642      	mov	r2, r8
 800616e:	464b      	mov	r3, r9
 8006170:	4630      	mov	r0, r6
 8006172:	4639      	mov	r1, r7
 8006174:	f7fa fcb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006178:	b110      	cbz	r0, 8006180 <_dtoa_r+0x6d8>
 800617a:	9b02      	ldr	r3, [sp, #8]
 800617c:	07d9      	lsls	r1, r3, #31
 800617e:	d40f      	bmi.n	80061a0 <_dtoa_r+0x6f8>
 8006180:	4620      	mov	r0, r4
 8006182:	4659      	mov	r1, fp
 8006184:	f000 fad6 	bl	8006734 <_Bfree>
 8006188:	2300      	movs	r3, #0
 800618a:	702b      	strb	r3, [r5, #0]
 800618c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800618e:	f10a 0001 	add.w	r0, sl, #1
 8006192:	6018      	str	r0, [r3, #0]
 8006194:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006196:	2b00      	cmp	r3, #0
 8006198:	f43f acd8 	beq.w	8005b4c <_dtoa_r+0xa4>
 800619c:	601d      	str	r5, [r3, #0]
 800619e:	e4d5      	b.n	8005b4c <_dtoa_r+0xa4>
 80061a0:	f8cd a01c 	str.w	sl, [sp, #28]
 80061a4:	462b      	mov	r3, r5
 80061a6:	461d      	mov	r5, r3
 80061a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061ac:	2a39      	cmp	r2, #57	; 0x39
 80061ae:	d108      	bne.n	80061c2 <_dtoa_r+0x71a>
 80061b0:	9a00      	ldr	r2, [sp, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d1f7      	bne.n	80061a6 <_dtoa_r+0x6fe>
 80061b6:	9a07      	ldr	r2, [sp, #28]
 80061b8:	9900      	ldr	r1, [sp, #0]
 80061ba:	3201      	adds	r2, #1
 80061bc:	9207      	str	r2, [sp, #28]
 80061be:	2230      	movs	r2, #48	; 0x30
 80061c0:	700a      	strb	r2, [r1, #0]
 80061c2:	781a      	ldrb	r2, [r3, #0]
 80061c4:	3201      	adds	r2, #1
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	e78c      	b.n	80060e4 <_dtoa_r+0x63c>
 80061ca:	4b7f      	ldr	r3, [pc, #508]	; (80063c8 <_dtoa_r+0x920>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	f7fa fa1b 	bl	8000608 <__aeabi_dmul>
 80061d2:	2200      	movs	r2, #0
 80061d4:	2300      	movs	r3, #0
 80061d6:	4606      	mov	r6, r0
 80061d8:	460f      	mov	r7, r1
 80061da:	f7fa fc7d 	bl	8000ad8 <__aeabi_dcmpeq>
 80061de:	2800      	cmp	r0, #0
 80061e0:	d09b      	beq.n	800611a <_dtoa_r+0x672>
 80061e2:	e7cd      	b.n	8006180 <_dtoa_r+0x6d8>
 80061e4:	9a08      	ldr	r2, [sp, #32]
 80061e6:	2a00      	cmp	r2, #0
 80061e8:	f000 80c4 	beq.w	8006374 <_dtoa_r+0x8cc>
 80061ec:	9a05      	ldr	r2, [sp, #20]
 80061ee:	2a01      	cmp	r2, #1
 80061f0:	f300 80a8 	bgt.w	8006344 <_dtoa_r+0x89c>
 80061f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061f6:	2a00      	cmp	r2, #0
 80061f8:	f000 80a0 	beq.w	800633c <_dtoa_r+0x894>
 80061fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006200:	9e06      	ldr	r6, [sp, #24]
 8006202:	4645      	mov	r5, r8
 8006204:	9a04      	ldr	r2, [sp, #16]
 8006206:	2101      	movs	r1, #1
 8006208:	441a      	add	r2, r3
 800620a:	4620      	mov	r0, r4
 800620c:	4498      	add	r8, r3
 800620e:	9204      	str	r2, [sp, #16]
 8006210:	f000 fb4c 	bl	80068ac <__i2b>
 8006214:	4607      	mov	r7, r0
 8006216:	2d00      	cmp	r5, #0
 8006218:	dd0b      	ble.n	8006232 <_dtoa_r+0x78a>
 800621a:	9b04      	ldr	r3, [sp, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	dd08      	ble.n	8006232 <_dtoa_r+0x78a>
 8006220:	42ab      	cmp	r3, r5
 8006222:	9a04      	ldr	r2, [sp, #16]
 8006224:	bfa8      	it	ge
 8006226:	462b      	movge	r3, r5
 8006228:	eba8 0803 	sub.w	r8, r8, r3
 800622c:	1aed      	subs	r5, r5, r3
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	9304      	str	r3, [sp, #16]
 8006232:	9b06      	ldr	r3, [sp, #24]
 8006234:	b1fb      	cbz	r3, 8006276 <_dtoa_r+0x7ce>
 8006236:	9b08      	ldr	r3, [sp, #32]
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 809f 	beq.w	800637c <_dtoa_r+0x8d4>
 800623e:	2e00      	cmp	r6, #0
 8006240:	dd11      	ble.n	8006266 <_dtoa_r+0x7be>
 8006242:	4639      	mov	r1, r7
 8006244:	4632      	mov	r2, r6
 8006246:	4620      	mov	r0, r4
 8006248:	f000 fbec 	bl	8006a24 <__pow5mult>
 800624c:	465a      	mov	r2, fp
 800624e:	4601      	mov	r1, r0
 8006250:	4607      	mov	r7, r0
 8006252:	4620      	mov	r0, r4
 8006254:	f000 fb40 	bl	80068d8 <__multiply>
 8006258:	4659      	mov	r1, fp
 800625a:	9007      	str	r0, [sp, #28]
 800625c:	4620      	mov	r0, r4
 800625e:	f000 fa69 	bl	8006734 <_Bfree>
 8006262:	9b07      	ldr	r3, [sp, #28]
 8006264:	469b      	mov	fp, r3
 8006266:	9b06      	ldr	r3, [sp, #24]
 8006268:	1b9a      	subs	r2, r3, r6
 800626a:	d004      	beq.n	8006276 <_dtoa_r+0x7ce>
 800626c:	4659      	mov	r1, fp
 800626e:	4620      	mov	r0, r4
 8006270:	f000 fbd8 	bl	8006a24 <__pow5mult>
 8006274:	4683      	mov	fp, r0
 8006276:	2101      	movs	r1, #1
 8006278:	4620      	mov	r0, r4
 800627a:	f000 fb17 	bl	80068ac <__i2b>
 800627e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006280:	2b00      	cmp	r3, #0
 8006282:	4606      	mov	r6, r0
 8006284:	dd7c      	ble.n	8006380 <_dtoa_r+0x8d8>
 8006286:	461a      	mov	r2, r3
 8006288:	4601      	mov	r1, r0
 800628a:	4620      	mov	r0, r4
 800628c:	f000 fbca 	bl	8006a24 <__pow5mult>
 8006290:	9b05      	ldr	r3, [sp, #20]
 8006292:	2b01      	cmp	r3, #1
 8006294:	4606      	mov	r6, r0
 8006296:	dd76      	ble.n	8006386 <_dtoa_r+0x8de>
 8006298:	2300      	movs	r3, #0
 800629a:	9306      	str	r3, [sp, #24]
 800629c:	6933      	ldr	r3, [r6, #16]
 800629e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80062a2:	6918      	ldr	r0, [r3, #16]
 80062a4:	f000 fab2 	bl	800680c <__hi0bits>
 80062a8:	f1c0 0020 	rsb	r0, r0, #32
 80062ac:	9b04      	ldr	r3, [sp, #16]
 80062ae:	4418      	add	r0, r3
 80062b0:	f010 001f 	ands.w	r0, r0, #31
 80062b4:	f000 8086 	beq.w	80063c4 <_dtoa_r+0x91c>
 80062b8:	f1c0 0320 	rsb	r3, r0, #32
 80062bc:	2b04      	cmp	r3, #4
 80062be:	dd7f      	ble.n	80063c0 <_dtoa_r+0x918>
 80062c0:	f1c0 001c 	rsb	r0, r0, #28
 80062c4:	9b04      	ldr	r3, [sp, #16]
 80062c6:	4403      	add	r3, r0
 80062c8:	4480      	add	r8, r0
 80062ca:	4405      	add	r5, r0
 80062cc:	9304      	str	r3, [sp, #16]
 80062ce:	f1b8 0f00 	cmp.w	r8, #0
 80062d2:	dd05      	ble.n	80062e0 <_dtoa_r+0x838>
 80062d4:	4659      	mov	r1, fp
 80062d6:	4642      	mov	r2, r8
 80062d8:	4620      	mov	r0, r4
 80062da:	f000 fbfd 	bl	8006ad8 <__lshift>
 80062de:	4683      	mov	fp, r0
 80062e0:	9b04      	ldr	r3, [sp, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	dd05      	ble.n	80062f2 <_dtoa_r+0x84a>
 80062e6:	4631      	mov	r1, r6
 80062e8:	461a      	mov	r2, r3
 80062ea:	4620      	mov	r0, r4
 80062ec:	f000 fbf4 	bl	8006ad8 <__lshift>
 80062f0:	4606      	mov	r6, r0
 80062f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d069      	beq.n	80063cc <_dtoa_r+0x924>
 80062f8:	4631      	mov	r1, r6
 80062fa:	4658      	mov	r0, fp
 80062fc:	f000 fc58 	bl	8006bb0 <__mcmp>
 8006300:	2800      	cmp	r0, #0
 8006302:	da63      	bge.n	80063cc <_dtoa_r+0x924>
 8006304:	2300      	movs	r3, #0
 8006306:	4659      	mov	r1, fp
 8006308:	220a      	movs	r2, #10
 800630a:	4620      	mov	r0, r4
 800630c:	f000 fa34 	bl	8006778 <__multadd>
 8006310:	9b08      	ldr	r3, [sp, #32]
 8006312:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006316:	4683      	mov	fp, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 818f 	beq.w	800663c <_dtoa_r+0xb94>
 800631e:	4639      	mov	r1, r7
 8006320:	2300      	movs	r3, #0
 8006322:	220a      	movs	r2, #10
 8006324:	4620      	mov	r0, r4
 8006326:	f000 fa27 	bl	8006778 <__multadd>
 800632a:	f1b9 0f00 	cmp.w	r9, #0
 800632e:	4607      	mov	r7, r0
 8006330:	f300 808e 	bgt.w	8006450 <_dtoa_r+0x9a8>
 8006334:	9b05      	ldr	r3, [sp, #20]
 8006336:	2b02      	cmp	r3, #2
 8006338:	dc50      	bgt.n	80063dc <_dtoa_r+0x934>
 800633a:	e089      	b.n	8006450 <_dtoa_r+0x9a8>
 800633c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800633e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006342:	e75d      	b.n	8006200 <_dtoa_r+0x758>
 8006344:	9b01      	ldr	r3, [sp, #4]
 8006346:	1e5e      	subs	r6, r3, #1
 8006348:	9b06      	ldr	r3, [sp, #24]
 800634a:	42b3      	cmp	r3, r6
 800634c:	bfbf      	itttt	lt
 800634e:	9b06      	ldrlt	r3, [sp, #24]
 8006350:	9606      	strlt	r6, [sp, #24]
 8006352:	1af2      	sublt	r2, r6, r3
 8006354:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006356:	bfb6      	itet	lt
 8006358:	189b      	addlt	r3, r3, r2
 800635a:	1b9e      	subge	r6, r3, r6
 800635c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800635e:	9b01      	ldr	r3, [sp, #4]
 8006360:	bfb8      	it	lt
 8006362:	2600      	movlt	r6, #0
 8006364:	2b00      	cmp	r3, #0
 8006366:	bfb5      	itete	lt
 8006368:	eba8 0503 	sublt.w	r5, r8, r3
 800636c:	9b01      	ldrge	r3, [sp, #4]
 800636e:	2300      	movlt	r3, #0
 8006370:	4645      	movge	r5, r8
 8006372:	e747      	b.n	8006204 <_dtoa_r+0x75c>
 8006374:	9e06      	ldr	r6, [sp, #24]
 8006376:	9f08      	ldr	r7, [sp, #32]
 8006378:	4645      	mov	r5, r8
 800637a:	e74c      	b.n	8006216 <_dtoa_r+0x76e>
 800637c:	9a06      	ldr	r2, [sp, #24]
 800637e:	e775      	b.n	800626c <_dtoa_r+0x7c4>
 8006380:	9b05      	ldr	r3, [sp, #20]
 8006382:	2b01      	cmp	r3, #1
 8006384:	dc18      	bgt.n	80063b8 <_dtoa_r+0x910>
 8006386:	9b02      	ldr	r3, [sp, #8]
 8006388:	b9b3      	cbnz	r3, 80063b8 <_dtoa_r+0x910>
 800638a:	9b03      	ldr	r3, [sp, #12]
 800638c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006390:	b9a3      	cbnz	r3, 80063bc <_dtoa_r+0x914>
 8006392:	9b03      	ldr	r3, [sp, #12]
 8006394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006398:	0d1b      	lsrs	r3, r3, #20
 800639a:	051b      	lsls	r3, r3, #20
 800639c:	b12b      	cbz	r3, 80063aa <_dtoa_r+0x902>
 800639e:	9b04      	ldr	r3, [sp, #16]
 80063a0:	3301      	adds	r3, #1
 80063a2:	9304      	str	r3, [sp, #16]
 80063a4:	f108 0801 	add.w	r8, r8, #1
 80063a8:	2301      	movs	r3, #1
 80063aa:	9306      	str	r3, [sp, #24]
 80063ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f47f af74 	bne.w	800629c <_dtoa_r+0x7f4>
 80063b4:	2001      	movs	r0, #1
 80063b6:	e779      	b.n	80062ac <_dtoa_r+0x804>
 80063b8:	2300      	movs	r3, #0
 80063ba:	e7f6      	b.n	80063aa <_dtoa_r+0x902>
 80063bc:	9b02      	ldr	r3, [sp, #8]
 80063be:	e7f4      	b.n	80063aa <_dtoa_r+0x902>
 80063c0:	d085      	beq.n	80062ce <_dtoa_r+0x826>
 80063c2:	4618      	mov	r0, r3
 80063c4:	301c      	adds	r0, #28
 80063c6:	e77d      	b.n	80062c4 <_dtoa_r+0x81c>
 80063c8:	40240000 	.word	0x40240000
 80063cc:	9b01      	ldr	r3, [sp, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	dc38      	bgt.n	8006444 <_dtoa_r+0x99c>
 80063d2:	9b05      	ldr	r3, [sp, #20]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	dd35      	ble.n	8006444 <_dtoa_r+0x99c>
 80063d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80063dc:	f1b9 0f00 	cmp.w	r9, #0
 80063e0:	d10d      	bne.n	80063fe <_dtoa_r+0x956>
 80063e2:	4631      	mov	r1, r6
 80063e4:	464b      	mov	r3, r9
 80063e6:	2205      	movs	r2, #5
 80063e8:	4620      	mov	r0, r4
 80063ea:	f000 f9c5 	bl	8006778 <__multadd>
 80063ee:	4601      	mov	r1, r0
 80063f0:	4606      	mov	r6, r0
 80063f2:	4658      	mov	r0, fp
 80063f4:	f000 fbdc 	bl	8006bb0 <__mcmp>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	f73f adbd 	bgt.w	8005f78 <_dtoa_r+0x4d0>
 80063fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006400:	9d00      	ldr	r5, [sp, #0]
 8006402:	ea6f 0a03 	mvn.w	sl, r3
 8006406:	f04f 0800 	mov.w	r8, #0
 800640a:	4631      	mov	r1, r6
 800640c:	4620      	mov	r0, r4
 800640e:	f000 f991 	bl	8006734 <_Bfree>
 8006412:	2f00      	cmp	r7, #0
 8006414:	f43f aeb4 	beq.w	8006180 <_dtoa_r+0x6d8>
 8006418:	f1b8 0f00 	cmp.w	r8, #0
 800641c:	d005      	beq.n	800642a <_dtoa_r+0x982>
 800641e:	45b8      	cmp	r8, r7
 8006420:	d003      	beq.n	800642a <_dtoa_r+0x982>
 8006422:	4641      	mov	r1, r8
 8006424:	4620      	mov	r0, r4
 8006426:	f000 f985 	bl	8006734 <_Bfree>
 800642a:	4639      	mov	r1, r7
 800642c:	4620      	mov	r0, r4
 800642e:	f000 f981 	bl	8006734 <_Bfree>
 8006432:	e6a5      	b.n	8006180 <_dtoa_r+0x6d8>
 8006434:	2600      	movs	r6, #0
 8006436:	4637      	mov	r7, r6
 8006438:	e7e1      	b.n	80063fe <_dtoa_r+0x956>
 800643a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800643c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006440:	4637      	mov	r7, r6
 8006442:	e599      	b.n	8005f78 <_dtoa_r+0x4d0>
 8006444:	9b08      	ldr	r3, [sp, #32]
 8006446:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 80fd 	beq.w	800664a <_dtoa_r+0xba2>
 8006450:	2d00      	cmp	r5, #0
 8006452:	dd05      	ble.n	8006460 <_dtoa_r+0x9b8>
 8006454:	4639      	mov	r1, r7
 8006456:	462a      	mov	r2, r5
 8006458:	4620      	mov	r0, r4
 800645a:	f000 fb3d 	bl	8006ad8 <__lshift>
 800645e:	4607      	mov	r7, r0
 8006460:	9b06      	ldr	r3, [sp, #24]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d05c      	beq.n	8006520 <_dtoa_r+0xa78>
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	4620      	mov	r0, r4
 800646a:	f000 f923 	bl	80066b4 <_Balloc>
 800646e:	4605      	mov	r5, r0
 8006470:	b928      	cbnz	r0, 800647e <_dtoa_r+0x9d6>
 8006472:	4b80      	ldr	r3, [pc, #512]	; (8006674 <_dtoa_r+0xbcc>)
 8006474:	4602      	mov	r2, r0
 8006476:	f240 21ea 	movw	r1, #746	; 0x2ea
 800647a:	f7ff bb2e 	b.w	8005ada <_dtoa_r+0x32>
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	3202      	adds	r2, #2
 8006482:	0092      	lsls	r2, r2, #2
 8006484:	f107 010c 	add.w	r1, r7, #12
 8006488:	300c      	adds	r0, #12
 800648a:	f000 f905 	bl	8006698 <memcpy>
 800648e:	2201      	movs	r2, #1
 8006490:	4629      	mov	r1, r5
 8006492:	4620      	mov	r0, r4
 8006494:	f000 fb20 	bl	8006ad8 <__lshift>
 8006498:	9b00      	ldr	r3, [sp, #0]
 800649a:	3301      	adds	r3, #1
 800649c:	9301      	str	r3, [sp, #4]
 800649e:	9b00      	ldr	r3, [sp, #0]
 80064a0:	444b      	add	r3, r9
 80064a2:	9307      	str	r3, [sp, #28]
 80064a4:	9b02      	ldr	r3, [sp, #8]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	46b8      	mov	r8, r7
 80064ac:	9306      	str	r3, [sp, #24]
 80064ae:	4607      	mov	r7, r0
 80064b0:	9b01      	ldr	r3, [sp, #4]
 80064b2:	4631      	mov	r1, r6
 80064b4:	3b01      	subs	r3, #1
 80064b6:	4658      	mov	r0, fp
 80064b8:	9302      	str	r3, [sp, #8]
 80064ba:	f7ff fa67 	bl	800598c <quorem>
 80064be:	4603      	mov	r3, r0
 80064c0:	3330      	adds	r3, #48	; 0x30
 80064c2:	9004      	str	r0, [sp, #16]
 80064c4:	4641      	mov	r1, r8
 80064c6:	4658      	mov	r0, fp
 80064c8:	9308      	str	r3, [sp, #32]
 80064ca:	f000 fb71 	bl	8006bb0 <__mcmp>
 80064ce:	463a      	mov	r2, r7
 80064d0:	4681      	mov	r9, r0
 80064d2:	4631      	mov	r1, r6
 80064d4:	4620      	mov	r0, r4
 80064d6:	f000 fb87 	bl	8006be8 <__mdiff>
 80064da:	68c2      	ldr	r2, [r0, #12]
 80064dc:	9b08      	ldr	r3, [sp, #32]
 80064de:	4605      	mov	r5, r0
 80064e0:	bb02      	cbnz	r2, 8006524 <_dtoa_r+0xa7c>
 80064e2:	4601      	mov	r1, r0
 80064e4:	4658      	mov	r0, fp
 80064e6:	f000 fb63 	bl	8006bb0 <__mcmp>
 80064ea:	9b08      	ldr	r3, [sp, #32]
 80064ec:	4602      	mov	r2, r0
 80064ee:	4629      	mov	r1, r5
 80064f0:	4620      	mov	r0, r4
 80064f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80064f6:	f000 f91d 	bl	8006734 <_Bfree>
 80064fa:	9b05      	ldr	r3, [sp, #20]
 80064fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064fe:	9d01      	ldr	r5, [sp, #4]
 8006500:	ea43 0102 	orr.w	r1, r3, r2
 8006504:	9b06      	ldr	r3, [sp, #24]
 8006506:	430b      	orrs	r3, r1
 8006508:	9b08      	ldr	r3, [sp, #32]
 800650a:	d10d      	bne.n	8006528 <_dtoa_r+0xa80>
 800650c:	2b39      	cmp	r3, #57	; 0x39
 800650e:	d029      	beq.n	8006564 <_dtoa_r+0xabc>
 8006510:	f1b9 0f00 	cmp.w	r9, #0
 8006514:	dd01      	ble.n	800651a <_dtoa_r+0xa72>
 8006516:	9b04      	ldr	r3, [sp, #16]
 8006518:	3331      	adds	r3, #49	; 0x31
 800651a:	9a02      	ldr	r2, [sp, #8]
 800651c:	7013      	strb	r3, [r2, #0]
 800651e:	e774      	b.n	800640a <_dtoa_r+0x962>
 8006520:	4638      	mov	r0, r7
 8006522:	e7b9      	b.n	8006498 <_dtoa_r+0x9f0>
 8006524:	2201      	movs	r2, #1
 8006526:	e7e2      	b.n	80064ee <_dtoa_r+0xa46>
 8006528:	f1b9 0f00 	cmp.w	r9, #0
 800652c:	db06      	blt.n	800653c <_dtoa_r+0xa94>
 800652e:	9905      	ldr	r1, [sp, #20]
 8006530:	ea41 0909 	orr.w	r9, r1, r9
 8006534:	9906      	ldr	r1, [sp, #24]
 8006536:	ea59 0101 	orrs.w	r1, r9, r1
 800653a:	d120      	bne.n	800657e <_dtoa_r+0xad6>
 800653c:	2a00      	cmp	r2, #0
 800653e:	ddec      	ble.n	800651a <_dtoa_r+0xa72>
 8006540:	4659      	mov	r1, fp
 8006542:	2201      	movs	r2, #1
 8006544:	4620      	mov	r0, r4
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	f000 fac6 	bl	8006ad8 <__lshift>
 800654c:	4631      	mov	r1, r6
 800654e:	4683      	mov	fp, r0
 8006550:	f000 fb2e 	bl	8006bb0 <__mcmp>
 8006554:	2800      	cmp	r0, #0
 8006556:	9b01      	ldr	r3, [sp, #4]
 8006558:	dc02      	bgt.n	8006560 <_dtoa_r+0xab8>
 800655a:	d1de      	bne.n	800651a <_dtoa_r+0xa72>
 800655c:	07da      	lsls	r2, r3, #31
 800655e:	d5dc      	bpl.n	800651a <_dtoa_r+0xa72>
 8006560:	2b39      	cmp	r3, #57	; 0x39
 8006562:	d1d8      	bne.n	8006516 <_dtoa_r+0xa6e>
 8006564:	9a02      	ldr	r2, [sp, #8]
 8006566:	2339      	movs	r3, #57	; 0x39
 8006568:	7013      	strb	r3, [r2, #0]
 800656a:	462b      	mov	r3, r5
 800656c:	461d      	mov	r5, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006574:	2a39      	cmp	r2, #57	; 0x39
 8006576:	d050      	beq.n	800661a <_dtoa_r+0xb72>
 8006578:	3201      	adds	r2, #1
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	e745      	b.n	800640a <_dtoa_r+0x962>
 800657e:	2a00      	cmp	r2, #0
 8006580:	dd03      	ble.n	800658a <_dtoa_r+0xae2>
 8006582:	2b39      	cmp	r3, #57	; 0x39
 8006584:	d0ee      	beq.n	8006564 <_dtoa_r+0xabc>
 8006586:	3301      	adds	r3, #1
 8006588:	e7c7      	b.n	800651a <_dtoa_r+0xa72>
 800658a:	9a01      	ldr	r2, [sp, #4]
 800658c:	9907      	ldr	r1, [sp, #28]
 800658e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006592:	428a      	cmp	r2, r1
 8006594:	d02a      	beq.n	80065ec <_dtoa_r+0xb44>
 8006596:	4659      	mov	r1, fp
 8006598:	2300      	movs	r3, #0
 800659a:	220a      	movs	r2, #10
 800659c:	4620      	mov	r0, r4
 800659e:	f000 f8eb 	bl	8006778 <__multadd>
 80065a2:	45b8      	cmp	r8, r7
 80065a4:	4683      	mov	fp, r0
 80065a6:	f04f 0300 	mov.w	r3, #0
 80065aa:	f04f 020a 	mov.w	r2, #10
 80065ae:	4641      	mov	r1, r8
 80065b0:	4620      	mov	r0, r4
 80065b2:	d107      	bne.n	80065c4 <_dtoa_r+0xb1c>
 80065b4:	f000 f8e0 	bl	8006778 <__multadd>
 80065b8:	4680      	mov	r8, r0
 80065ba:	4607      	mov	r7, r0
 80065bc:	9b01      	ldr	r3, [sp, #4]
 80065be:	3301      	adds	r3, #1
 80065c0:	9301      	str	r3, [sp, #4]
 80065c2:	e775      	b.n	80064b0 <_dtoa_r+0xa08>
 80065c4:	f000 f8d8 	bl	8006778 <__multadd>
 80065c8:	4639      	mov	r1, r7
 80065ca:	4680      	mov	r8, r0
 80065cc:	2300      	movs	r3, #0
 80065ce:	220a      	movs	r2, #10
 80065d0:	4620      	mov	r0, r4
 80065d2:	f000 f8d1 	bl	8006778 <__multadd>
 80065d6:	4607      	mov	r7, r0
 80065d8:	e7f0      	b.n	80065bc <_dtoa_r+0xb14>
 80065da:	f1b9 0f00 	cmp.w	r9, #0
 80065de:	9a00      	ldr	r2, [sp, #0]
 80065e0:	bfcc      	ite	gt
 80065e2:	464d      	movgt	r5, r9
 80065e4:	2501      	movle	r5, #1
 80065e6:	4415      	add	r5, r2
 80065e8:	f04f 0800 	mov.w	r8, #0
 80065ec:	4659      	mov	r1, fp
 80065ee:	2201      	movs	r2, #1
 80065f0:	4620      	mov	r0, r4
 80065f2:	9301      	str	r3, [sp, #4]
 80065f4:	f000 fa70 	bl	8006ad8 <__lshift>
 80065f8:	4631      	mov	r1, r6
 80065fa:	4683      	mov	fp, r0
 80065fc:	f000 fad8 	bl	8006bb0 <__mcmp>
 8006600:	2800      	cmp	r0, #0
 8006602:	dcb2      	bgt.n	800656a <_dtoa_r+0xac2>
 8006604:	d102      	bne.n	800660c <_dtoa_r+0xb64>
 8006606:	9b01      	ldr	r3, [sp, #4]
 8006608:	07db      	lsls	r3, r3, #31
 800660a:	d4ae      	bmi.n	800656a <_dtoa_r+0xac2>
 800660c:	462b      	mov	r3, r5
 800660e:	461d      	mov	r5, r3
 8006610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006614:	2a30      	cmp	r2, #48	; 0x30
 8006616:	d0fa      	beq.n	800660e <_dtoa_r+0xb66>
 8006618:	e6f7      	b.n	800640a <_dtoa_r+0x962>
 800661a:	9a00      	ldr	r2, [sp, #0]
 800661c:	429a      	cmp	r2, r3
 800661e:	d1a5      	bne.n	800656c <_dtoa_r+0xac4>
 8006620:	f10a 0a01 	add.w	sl, sl, #1
 8006624:	2331      	movs	r3, #49	; 0x31
 8006626:	e779      	b.n	800651c <_dtoa_r+0xa74>
 8006628:	4b13      	ldr	r3, [pc, #76]	; (8006678 <_dtoa_r+0xbd0>)
 800662a:	f7ff baaf 	b.w	8005b8c <_dtoa_r+0xe4>
 800662e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006630:	2b00      	cmp	r3, #0
 8006632:	f47f aa86 	bne.w	8005b42 <_dtoa_r+0x9a>
 8006636:	4b11      	ldr	r3, [pc, #68]	; (800667c <_dtoa_r+0xbd4>)
 8006638:	f7ff baa8 	b.w	8005b8c <_dtoa_r+0xe4>
 800663c:	f1b9 0f00 	cmp.w	r9, #0
 8006640:	dc03      	bgt.n	800664a <_dtoa_r+0xba2>
 8006642:	9b05      	ldr	r3, [sp, #20]
 8006644:	2b02      	cmp	r3, #2
 8006646:	f73f aec9 	bgt.w	80063dc <_dtoa_r+0x934>
 800664a:	9d00      	ldr	r5, [sp, #0]
 800664c:	4631      	mov	r1, r6
 800664e:	4658      	mov	r0, fp
 8006650:	f7ff f99c 	bl	800598c <quorem>
 8006654:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006658:	f805 3b01 	strb.w	r3, [r5], #1
 800665c:	9a00      	ldr	r2, [sp, #0]
 800665e:	1aaa      	subs	r2, r5, r2
 8006660:	4591      	cmp	r9, r2
 8006662:	ddba      	ble.n	80065da <_dtoa_r+0xb32>
 8006664:	4659      	mov	r1, fp
 8006666:	2300      	movs	r3, #0
 8006668:	220a      	movs	r2, #10
 800666a:	4620      	mov	r0, r4
 800666c:	f000 f884 	bl	8006778 <__multadd>
 8006670:	4683      	mov	fp, r0
 8006672:	e7eb      	b.n	800664c <_dtoa_r+0xba4>
 8006674:	08009403 	.word	0x08009403
 8006678:	0800935c 	.word	0x0800935c
 800667c:	08009380 	.word	0x08009380

08006680 <_localeconv_r>:
 8006680:	4800      	ldr	r0, [pc, #0]	; (8006684 <_localeconv_r+0x4>)
 8006682:	4770      	bx	lr
 8006684:	20000178 	.word	0x20000178

08006688 <malloc>:
 8006688:	4b02      	ldr	r3, [pc, #8]	; (8006694 <malloc+0xc>)
 800668a:	4601      	mov	r1, r0
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	f000 bbef 	b.w	8006e70 <_malloc_r>
 8006692:	bf00      	nop
 8006694:	20000024 	.word	0x20000024

08006698 <memcpy>:
 8006698:	440a      	add	r2, r1
 800669a:	4291      	cmp	r1, r2
 800669c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80066a0:	d100      	bne.n	80066a4 <memcpy+0xc>
 80066a2:	4770      	bx	lr
 80066a4:	b510      	push	{r4, lr}
 80066a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066ae:	4291      	cmp	r1, r2
 80066b0:	d1f9      	bne.n	80066a6 <memcpy+0xe>
 80066b2:	bd10      	pop	{r4, pc}

080066b4 <_Balloc>:
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80066b8:	4604      	mov	r4, r0
 80066ba:	460d      	mov	r5, r1
 80066bc:	b976      	cbnz	r6, 80066dc <_Balloc+0x28>
 80066be:	2010      	movs	r0, #16
 80066c0:	f7ff ffe2 	bl	8006688 <malloc>
 80066c4:	4602      	mov	r2, r0
 80066c6:	6260      	str	r0, [r4, #36]	; 0x24
 80066c8:	b920      	cbnz	r0, 80066d4 <_Balloc+0x20>
 80066ca:	4b18      	ldr	r3, [pc, #96]	; (800672c <_Balloc+0x78>)
 80066cc:	4818      	ldr	r0, [pc, #96]	; (8006730 <_Balloc+0x7c>)
 80066ce:	2166      	movs	r1, #102	; 0x66
 80066d0:	f000 fc38 	bl	8006f44 <__assert_func>
 80066d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066d8:	6006      	str	r6, [r0, #0]
 80066da:	60c6      	str	r6, [r0, #12]
 80066dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80066de:	68f3      	ldr	r3, [r6, #12]
 80066e0:	b183      	cbz	r3, 8006704 <_Balloc+0x50>
 80066e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066ea:	b9b8      	cbnz	r0, 800671c <_Balloc+0x68>
 80066ec:	2101      	movs	r1, #1
 80066ee:	fa01 f605 	lsl.w	r6, r1, r5
 80066f2:	1d72      	adds	r2, r6, #5
 80066f4:	0092      	lsls	r2, r2, #2
 80066f6:	4620      	mov	r0, r4
 80066f8:	f000 fb5a 	bl	8006db0 <_calloc_r>
 80066fc:	b160      	cbz	r0, 8006718 <_Balloc+0x64>
 80066fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006702:	e00e      	b.n	8006722 <_Balloc+0x6e>
 8006704:	2221      	movs	r2, #33	; 0x21
 8006706:	2104      	movs	r1, #4
 8006708:	4620      	mov	r0, r4
 800670a:	f000 fb51 	bl	8006db0 <_calloc_r>
 800670e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006710:	60f0      	str	r0, [r6, #12]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e4      	bne.n	80066e2 <_Balloc+0x2e>
 8006718:	2000      	movs	r0, #0
 800671a:	bd70      	pop	{r4, r5, r6, pc}
 800671c:	6802      	ldr	r2, [r0, #0]
 800671e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006722:	2300      	movs	r3, #0
 8006724:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006728:	e7f7      	b.n	800671a <_Balloc+0x66>
 800672a:	bf00      	nop
 800672c:	0800938d 	.word	0x0800938d
 8006730:	08009414 	.word	0x08009414

08006734 <_Bfree>:
 8006734:	b570      	push	{r4, r5, r6, lr}
 8006736:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006738:	4605      	mov	r5, r0
 800673a:	460c      	mov	r4, r1
 800673c:	b976      	cbnz	r6, 800675c <_Bfree+0x28>
 800673e:	2010      	movs	r0, #16
 8006740:	f7ff ffa2 	bl	8006688 <malloc>
 8006744:	4602      	mov	r2, r0
 8006746:	6268      	str	r0, [r5, #36]	; 0x24
 8006748:	b920      	cbnz	r0, 8006754 <_Bfree+0x20>
 800674a:	4b09      	ldr	r3, [pc, #36]	; (8006770 <_Bfree+0x3c>)
 800674c:	4809      	ldr	r0, [pc, #36]	; (8006774 <_Bfree+0x40>)
 800674e:	218a      	movs	r1, #138	; 0x8a
 8006750:	f000 fbf8 	bl	8006f44 <__assert_func>
 8006754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006758:	6006      	str	r6, [r0, #0]
 800675a:	60c6      	str	r6, [r0, #12]
 800675c:	b13c      	cbz	r4, 800676e <_Bfree+0x3a>
 800675e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006760:	6862      	ldr	r2, [r4, #4]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006768:	6021      	str	r1, [r4, #0]
 800676a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800676e:	bd70      	pop	{r4, r5, r6, pc}
 8006770:	0800938d 	.word	0x0800938d
 8006774:	08009414 	.word	0x08009414

08006778 <__multadd>:
 8006778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800677c:	690e      	ldr	r6, [r1, #16]
 800677e:	4607      	mov	r7, r0
 8006780:	4698      	mov	r8, r3
 8006782:	460c      	mov	r4, r1
 8006784:	f101 0014 	add.w	r0, r1, #20
 8006788:	2300      	movs	r3, #0
 800678a:	6805      	ldr	r5, [r0, #0]
 800678c:	b2a9      	uxth	r1, r5
 800678e:	fb02 8101 	mla	r1, r2, r1, r8
 8006792:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006796:	0c2d      	lsrs	r5, r5, #16
 8006798:	fb02 c505 	mla	r5, r2, r5, ip
 800679c:	b289      	uxth	r1, r1
 800679e:	3301      	adds	r3, #1
 80067a0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80067a4:	429e      	cmp	r6, r3
 80067a6:	f840 1b04 	str.w	r1, [r0], #4
 80067aa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80067ae:	dcec      	bgt.n	800678a <__multadd+0x12>
 80067b0:	f1b8 0f00 	cmp.w	r8, #0
 80067b4:	d022      	beq.n	80067fc <__multadd+0x84>
 80067b6:	68a3      	ldr	r3, [r4, #8]
 80067b8:	42b3      	cmp	r3, r6
 80067ba:	dc19      	bgt.n	80067f0 <__multadd+0x78>
 80067bc:	6861      	ldr	r1, [r4, #4]
 80067be:	4638      	mov	r0, r7
 80067c0:	3101      	adds	r1, #1
 80067c2:	f7ff ff77 	bl	80066b4 <_Balloc>
 80067c6:	4605      	mov	r5, r0
 80067c8:	b928      	cbnz	r0, 80067d6 <__multadd+0x5e>
 80067ca:	4602      	mov	r2, r0
 80067cc:	4b0d      	ldr	r3, [pc, #52]	; (8006804 <__multadd+0x8c>)
 80067ce:	480e      	ldr	r0, [pc, #56]	; (8006808 <__multadd+0x90>)
 80067d0:	21b5      	movs	r1, #181	; 0xb5
 80067d2:	f000 fbb7 	bl	8006f44 <__assert_func>
 80067d6:	6922      	ldr	r2, [r4, #16]
 80067d8:	3202      	adds	r2, #2
 80067da:	f104 010c 	add.w	r1, r4, #12
 80067de:	0092      	lsls	r2, r2, #2
 80067e0:	300c      	adds	r0, #12
 80067e2:	f7ff ff59 	bl	8006698 <memcpy>
 80067e6:	4621      	mov	r1, r4
 80067e8:	4638      	mov	r0, r7
 80067ea:	f7ff ffa3 	bl	8006734 <_Bfree>
 80067ee:	462c      	mov	r4, r5
 80067f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80067f4:	3601      	adds	r6, #1
 80067f6:	f8c3 8014 	str.w	r8, [r3, #20]
 80067fa:	6126      	str	r6, [r4, #16]
 80067fc:	4620      	mov	r0, r4
 80067fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006802:	bf00      	nop
 8006804:	08009403 	.word	0x08009403
 8006808:	08009414 	.word	0x08009414

0800680c <__hi0bits>:
 800680c:	0c03      	lsrs	r3, r0, #16
 800680e:	041b      	lsls	r3, r3, #16
 8006810:	b9d3      	cbnz	r3, 8006848 <__hi0bits+0x3c>
 8006812:	0400      	lsls	r0, r0, #16
 8006814:	2310      	movs	r3, #16
 8006816:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800681a:	bf04      	itt	eq
 800681c:	0200      	lsleq	r0, r0, #8
 800681e:	3308      	addeq	r3, #8
 8006820:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006824:	bf04      	itt	eq
 8006826:	0100      	lsleq	r0, r0, #4
 8006828:	3304      	addeq	r3, #4
 800682a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800682e:	bf04      	itt	eq
 8006830:	0080      	lsleq	r0, r0, #2
 8006832:	3302      	addeq	r3, #2
 8006834:	2800      	cmp	r0, #0
 8006836:	db05      	blt.n	8006844 <__hi0bits+0x38>
 8006838:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800683c:	f103 0301 	add.w	r3, r3, #1
 8006840:	bf08      	it	eq
 8006842:	2320      	moveq	r3, #32
 8006844:	4618      	mov	r0, r3
 8006846:	4770      	bx	lr
 8006848:	2300      	movs	r3, #0
 800684a:	e7e4      	b.n	8006816 <__hi0bits+0xa>

0800684c <__lo0bits>:
 800684c:	6803      	ldr	r3, [r0, #0]
 800684e:	f013 0207 	ands.w	r2, r3, #7
 8006852:	4601      	mov	r1, r0
 8006854:	d00b      	beq.n	800686e <__lo0bits+0x22>
 8006856:	07da      	lsls	r2, r3, #31
 8006858:	d424      	bmi.n	80068a4 <__lo0bits+0x58>
 800685a:	0798      	lsls	r0, r3, #30
 800685c:	bf49      	itett	mi
 800685e:	085b      	lsrmi	r3, r3, #1
 8006860:	089b      	lsrpl	r3, r3, #2
 8006862:	2001      	movmi	r0, #1
 8006864:	600b      	strmi	r3, [r1, #0]
 8006866:	bf5c      	itt	pl
 8006868:	600b      	strpl	r3, [r1, #0]
 800686a:	2002      	movpl	r0, #2
 800686c:	4770      	bx	lr
 800686e:	b298      	uxth	r0, r3
 8006870:	b9b0      	cbnz	r0, 80068a0 <__lo0bits+0x54>
 8006872:	0c1b      	lsrs	r3, r3, #16
 8006874:	2010      	movs	r0, #16
 8006876:	f013 0fff 	tst.w	r3, #255	; 0xff
 800687a:	bf04      	itt	eq
 800687c:	0a1b      	lsreq	r3, r3, #8
 800687e:	3008      	addeq	r0, #8
 8006880:	071a      	lsls	r2, r3, #28
 8006882:	bf04      	itt	eq
 8006884:	091b      	lsreq	r3, r3, #4
 8006886:	3004      	addeq	r0, #4
 8006888:	079a      	lsls	r2, r3, #30
 800688a:	bf04      	itt	eq
 800688c:	089b      	lsreq	r3, r3, #2
 800688e:	3002      	addeq	r0, #2
 8006890:	07da      	lsls	r2, r3, #31
 8006892:	d403      	bmi.n	800689c <__lo0bits+0x50>
 8006894:	085b      	lsrs	r3, r3, #1
 8006896:	f100 0001 	add.w	r0, r0, #1
 800689a:	d005      	beq.n	80068a8 <__lo0bits+0x5c>
 800689c:	600b      	str	r3, [r1, #0]
 800689e:	4770      	bx	lr
 80068a0:	4610      	mov	r0, r2
 80068a2:	e7e8      	b.n	8006876 <__lo0bits+0x2a>
 80068a4:	2000      	movs	r0, #0
 80068a6:	4770      	bx	lr
 80068a8:	2020      	movs	r0, #32
 80068aa:	4770      	bx	lr

080068ac <__i2b>:
 80068ac:	b510      	push	{r4, lr}
 80068ae:	460c      	mov	r4, r1
 80068b0:	2101      	movs	r1, #1
 80068b2:	f7ff feff 	bl	80066b4 <_Balloc>
 80068b6:	4602      	mov	r2, r0
 80068b8:	b928      	cbnz	r0, 80068c6 <__i2b+0x1a>
 80068ba:	4b05      	ldr	r3, [pc, #20]	; (80068d0 <__i2b+0x24>)
 80068bc:	4805      	ldr	r0, [pc, #20]	; (80068d4 <__i2b+0x28>)
 80068be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80068c2:	f000 fb3f 	bl	8006f44 <__assert_func>
 80068c6:	2301      	movs	r3, #1
 80068c8:	6144      	str	r4, [r0, #20]
 80068ca:	6103      	str	r3, [r0, #16]
 80068cc:	bd10      	pop	{r4, pc}
 80068ce:	bf00      	nop
 80068d0:	08009403 	.word	0x08009403
 80068d4:	08009414 	.word	0x08009414

080068d8 <__multiply>:
 80068d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068dc:	4614      	mov	r4, r2
 80068de:	690a      	ldr	r2, [r1, #16]
 80068e0:	6923      	ldr	r3, [r4, #16]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	bfb8      	it	lt
 80068e6:	460b      	movlt	r3, r1
 80068e8:	460d      	mov	r5, r1
 80068ea:	bfbc      	itt	lt
 80068ec:	4625      	movlt	r5, r4
 80068ee:	461c      	movlt	r4, r3
 80068f0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80068f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80068f8:	68ab      	ldr	r3, [r5, #8]
 80068fa:	6869      	ldr	r1, [r5, #4]
 80068fc:	eb0a 0709 	add.w	r7, sl, r9
 8006900:	42bb      	cmp	r3, r7
 8006902:	b085      	sub	sp, #20
 8006904:	bfb8      	it	lt
 8006906:	3101      	addlt	r1, #1
 8006908:	f7ff fed4 	bl	80066b4 <_Balloc>
 800690c:	b930      	cbnz	r0, 800691c <__multiply+0x44>
 800690e:	4602      	mov	r2, r0
 8006910:	4b42      	ldr	r3, [pc, #264]	; (8006a1c <__multiply+0x144>)
 8006912:	4843      	ldr	r0, [pc, #268]	; (8006a20 <__multiply+0x148>)
 8006914:	f240 115d 	movw	r1, #349	; 0x15d
 8006918:	f000 fb14 	bl	8006f44 <__assert_func>
 800691c:	f100 0614 	add.w	r6, r0, #20
 8006920:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006924:	4633      	mov	r3, r6
 8006926:	2200      	movs	r2, #0
 8006928:	4543      	cmp	r3, r8
 800692a:	d31e      	bcc.n	800696a <__multiply+0x92>
 800692c:	f105 0c14 	add.w	ip, r5, #20
 8006930:	f104 0314 	add.w	r3, r4, #20
 8006934:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006938:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800693c:	9202      	str	r2, [sp, #8]
 800693e:	ebac 0205 	sub.w	r2, ip, r5
 8006942:	3a15      	subs	r2, #21
 8006944:	f022 0203 	bic.w	r2, r2, #3
 8006948:	3204      	adds	r2, #4
 800694a:	f105 0115 	add.w	r1, r5, #21
 800694e:	458c      	cmp	ip, r1
 8006950:	bf38      	it	cc
 8006952:	2204      	movcc	r2, #4
 8006954:	9201      	str	r2, [sp, #4]
 8006956:	9a02      	ldr	r2, [sp, #8]
 8006958:	9303      	str	r3, [sp, #12]
 800695a:	429a      	cmp	r2, r3
 800695c:	d808      	bhi.n	8006970 <__multiply+0x98>
 800695e:	2f00      	cmp	r7, #0
 8006960:	dc55      	bgt.n	8006a0e <__multiply+0x136>
 8006962:	6107      	str	r7, [r0, #16]
 8006964:	b005      	add	sp, #20
 8006966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696a:	f843 2b04 	str.w	r2, [r3], #4
 800696e:	e7db      	b.n	8006928 <__multiply+0x50>
 8006970:	f8b3 a000 	ldrh.w	sl, [r3]
 8006974:	f1ba 0f00 	cmp.w	sl, #0
 8006978:	d020      	beq.n	80069bc <__multiply+0xe4>
 800697a:	f105 0e14 	add.w	lr, r5, #20
 800697e:	46b1      	mov	r9, r6
 8006980:	2200      	movs	r2, #0
 8006982:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006986:	f8d9 b000 	ldr.w	fp, [r9]
 800698a:	b2a1      	uxth	r1, r4
 800698c:	fa1f fb8b 	uxth.w	fp, fp
 8006990:	fb0a b101 	mla	r1, sl, r1, fp
 8006994:	4411      	add	r1, r2
 8006996:	f8d9 2000 	ldr.w	r2, [r9]
 800699a:	0c24      	lsrs	r4, r4, #16
 800699c:	0c12      	lsrs	r2, r2, #16
 800699e:	fb0a 2404 	mla	r4, sl, r4, r2
 80069a2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80069a6:	b289      	uxth	r1, r1
 80069a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80069ac:	45f4      	cmp	ip, lr
 80069ae:	f849 1b04 	str.w	r1, [r9], #4
 80069b2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80069b6:	d8e4      	bhi.n	8006982 <__multiply+0xaa>
 80069b8:	9901      	ldr	r1, [sp, #4]
 80069ba:	5072      	str	r2, [r6, r1]
 80069bc:	9a03      	ldr	r2, [sp, #12]
 80069be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80069c2:	3304      	adds	r3, #4
 80069c4:	f1b9 0f00 	cmp.w	r9, #0
 80069c8:	d01f      	beq.n	8006a0a <__multiply+0x132>
 80069ca:	6834      	ldr	r4, [r6, #0]
 80069cc:	f105 0114 	add.w	r1, r5, #20
 80069d0:	46b6      	mov	lr, r6
 80069d2:	f04f 0a00 	mov.w	sl, #0
 80069d6:	880a      	ldrh	r2, [r1, #0]
 80069d8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80069dc:	fb09 b202 	mla	r2, r9, r2, fp
 80069e0:	4492      	add	sl, r2
 80069e2:	b2a4      	uxth	r4, r4
 80069e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80069e8:	f84e 4b04 	str.w	r4, [lr], #4
 80069ec:	f851 4b04 	ldr.w	r4, [r1], #4
 80069f0:	f8be 2000 	ldrh.w	r2, [lr]
 80069f4:	0c24      	lsrs	r4, r4, #16
 80069f6:	fb09 2404 	mla	r4, r9, r4, r2
 80069fa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80069fe:	458c      	cmp	ip, r1
 8006a00:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006a04:	d8e7      	bhi.n	80069d6 <__multiply+0xfe>
 8006a06:	9a01      	ldr	r2, [sp, #4]
 8006a08:	50b4      	str	r4, [r6, r2]
 8006a0a:	3604      	adds	r6, #4
 8006a0c:	e7a3      	b.n	8006956 <__multiply+0x7e>
 8006a0e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1a5      	bne.n	8006962 <__multiply+0x8a>
 8006a16:	3f01      	subs	r7, #1
 8006a18:	e7a1      	b.n	800695e <__multiply+0x86>
 8006a1a:	bf00      	nop
 8006a1c:	08009403 	.word	0x08009403
 8006a20:	08009414 	.word	0x08009414

08006a24 <__pow5mult>:
 8006a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a28:	4615      	mov	r5, r2
 8006a2a:	f012 0203 	ands.w	r2, r2, #3
 8006a2e:	4606      	mov	r6, r0
 8006a30:	460f      	mov	r7, r1
 8006a32:	d007      	beq.n	8006a44 <__pow5mult+0x20>
 8006a34:	4c25      	ldr	r4, [pc, #148]	; (8006acc <__pow5mult+0xa8>)
 8006a36:	3a01      	subs	r2, #1
 8006a38:	2300      	movs	r3, #0
 8006a3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a3e:	f7ff fe9b 	bl	8006778 <__multadd>
 8006a42:	4607      	mov	r7, r0
 8006a44:	10ad      	asrs	r5, r5, #2
 8006a46:	d03d      	beq.n	8006ac4 <__pow5mult+0xa0>
 8006a48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a4a:	b97c      	cbnz	r4, 8006a6c <__pow5mult+0x48>
 8006a4c:	2010      	movs	r0, #16
 8006a4e:	f7ff fe1b 	bl	8006688 <malloc>
 8006a52:	4602      	mov	r2, r0
 8006a54:	6270      	str	r0, [r6, #36]	; 0x24
 8006a56:	b928      	cbnz	r0, 8006a64 <__pow5mult+0x40>
 8006a58:	4b1d      	ldr	r3, [pc, #116]	; (8006ad0 <__pow5mult+0xac>)
 8006a5a:	481e      	ldr	r0, [pc, #120]	; (8006ad4 <__pow5mult+0xb0>)
 8006a5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006a60:	f000 fa70 	bl	8006f44 <__assert_func>
 8006a64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a68:	6004      	str	r4, [r0, #0]
 8006a6a:	60c4      	str	r4, [r0, #12]
 8006a6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a74:	b94c      	cbnz	r4, 8006a8a <__pow5mult+0x66>
 8006a76:	f240 2171 	movw	r1, #625	; 0x271
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	f7ff ff16 	bl	80068ac <__i2b>
 8006a80:	2300      	movs	r3, #0
 8006a82:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a86:	4604      	mov	r4, r0
 8006a88:	6003      	str	r3, [r0, #0]
 8006a8a:	f04f 0900 	mov.w	r9, #0
 8006a8e:	07eb      	lsls	r3, r5, #31
 8006a90:	d50a      	bpl.n	8006aa8 <__pow5mult+0x84>
 8006a92:	4639      	mov	r1, r7
 8006a94:	4622      	mov	r2, r4
 8006a96:	4630      	mov	r0, r6
 8006a98:	f7ff ff1e 	bl	80068d8 <__multiply>
 8006a9c:	4639      	mov	r1, r7
 8006a9e:	4680      	mov	r8, r0
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	f7ff fe47 	bl	8006734 <_Bfree>
 8006aa6:	4647      	mov	r7, r8
 8006aa8:	106d      	asrs	r5, r5, #1
 8006aaa:	d00b      	beq.n	8006ac4 <__pow5mult+0xa0>
 8006aac:	6820      	ldr	r0, [r4, #0]
 8006aae:	b938      	cbnz	r0, 8006ac0 <__pow5mult+0x9c>
 8006ab0:	4622      	mov	r2, r4
 8006ab2:	4621      	mov	r1, r4
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f7ff ff0f 	bl	80068d8 <__multiply>
 8006aba:	6020      	str	r0, [r4, #0]
 8006abc:	f8c0 9000 	str.w	r9, [r0]
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	e7e4      	b.n	8006a8e <__pow5mult+0x6a>
 8006ac4:	4638      	mov	r0, r7
 8006ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aca:	bf00      	nop
 8006acc:	08009568 	.word	0x08009568
 8006ad0:	0800938d 	.word	0x0800938d
 8006ad4:	08009414 	.word	0x08009414

08006ad8 <__lshift>:
 8006ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006adc:	460c      	mov	r4, r1
 8006ade:	6849      	ldr	r1, [r1, #4]
 8006ae0:	6923      	ldr	r3, [r4, #16]
 8006ae2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ae6:	68a3      	ldr	r3, [r4, #8]
 8006ae8:	4607      	mov	r7, r0
 8006aea:	4691      	mov	r9, r2
 8006aec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006af0:	f108 0601 	add.w	r6, r8, #1
 8006af4:	42b3      	cmp	r3, r6
 8006af6:	db0b      	blt.n	8006b10 <__lshift+0x38>
 8006af8:	4638      	mov	r0, r7
 8006afa:	f7ff fddb 	bl	80066b4 <_Balloc>
 8006afe:	4605      	mov	r5, r0
 8006b00:	b948      	cbnz	r0, 8006b16 <__lshift+0x3e>
 8006b02:	4602      	mov	r2, r0
 8006b04:	4b28      	ldr	r3, [pc, #160]	; (8006ba8 <__lshift+0xd0>)
 8006b06:	4829      	ldr	r0, [pc, #164]	; (8006bac <__lshift+0xd4>)
 8006b08:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006b0c:	f000 fa1a 	bl	8006f44 <__assert_func>
 8006b10:	3101      	adds	r1, #1
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	e7ee      	b.n	8006af4 <__lshift+0x1c>
 8006b16:	2300      	movs	r3, #0
 8006b18:	f100 0114 	add.w	r1, r0, #20
 8006b1c:	f100 0210 	add.w	r2, r0, #16
 8006b20:	4618      	mov	r0, r3
 8006b22:	4553      	cmp	r3, sl
 8006b24:	db33      	blt.n	8006b8e <__lshift+0xb6>
 8006b26:	6920      	ldr	r0, [r4, #16]
 8006b28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b2c:	f104 0314 	add.w	r3, r4, #20
 8006b30:	f019 091f 	ands.w	r9, r9, #31
 8006b34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006b3c:	d02b      	beq.n	8006b96 <__lshift+0xbe>
 8006b3e:	f1c9 0e20 	rsb	lr, r9, #32
 8006b42:	468a      	mov	sl, r1
 8006b44:	2200      	movs	r2, #0
 8006b46:	6818      	ldr	r0, [r3, #0]
 8006b48:	fa00 f009 	lsl.w	r0, r0, r9
 8006b4c:	4302      	orrs	r2, r0
 8006b4e:	f84a 2b04 	str.w	r2, [sl], #4
 8006b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b56:	459c      	cmp	ip, r3
 8006b58:	fa22 f20e 	lsr.w	r2, r2, lr
 8006b5c:	d8f3      	bhi.n	8006b46 <__lshift+0x6e>
 8006b5e:	ebac 0304 	sub.w	r3, ip, r4
 8006b62:	3b15      	subs	r3, #21
 8006b64:	f023 0303 	bic.w	r3, r3, #3
 8006b68:	3304      	adds	r3, #4
 8006b6a:	f104 0015 	add.w	r0, r4, #21
 8006b6e:	4584      	cmp	ip, r0
 8006b70:	bf38      	it	cc
 8006b72:	2304      	movcc	r3, #4
 8006b74:	50ca      	str	r2, [r1, r3]
 8006b76:	b10a      	cbz	r2, 8006b7c <__lshift+0xa4>
 8006b78:	f108 0602 	add.w	r6, r8, #2
 8006b7c:	3e01      	subs	r6, #1
 8006b7e:	4638      	mov	r0, r7
 8006b80:	612e      	str	r6, [r5, #16]
 8006b82:	4621      	mov	r1, r4
 8006b84:	f7ff fdd6 	bl	8006734 <_Bfree>
 8006b88:	4628      	mov	r0, r5
 8006b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b92:	3301      	adds	r3, #1
 8006b94:	e7c5      	b.n	8006b22 <__lshift+0x4a>
 8006b96:	3904      	subs	r1, #4
 8006b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ba0:	459c      	cmp	ip, r3
 8006ba2:	d8f9      	bhi.n	8006b98 <__lshift+0xc0>
 8006ba4:	e7ea      	b.n	8006b7c <__lshift+0xa4>
 8006ba6:	bf00      	nop
 8006ba8:	08009403 	.word	0x08009403
 8006bac:	08009414 	.word	0x08009414

08006bb0 <__mcmp>:
 8006bb0:	b530      	push	{r4, r5, lr}
 8006bb2:	6902      	ldr	r2, [r0, #16]
 8006bb4:	690c      	ldr	r4, [r1, #16]
 8006bb6:	1b12      	subs	r2, r2, r4
 8006bb8:	d10e      	bne.n	8006bd8 <__mcmp+0x28>
 8006bba:	f100 0314 	add.w	r3, r0, #20
 8006bbe:	3114      	adds	r1, #20
 8006bc0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006bc4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006bc8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006bcc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006bd0:	42a5      	cmp	r5, r4
 8006bd2:	d003      	beq.n	8006bdc <__mcmp+0x2c>
 8006bd4:	d305      	bcc.n	8006be2 <__mcmp+0x32>
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	4610      	mov	r0, r2
 8006bda:	bd30      	pop	{r4, r5, pc}
 8006bdc:	4283      	cmp	r3, r0
 8006bde:	d3f3      	bcc.n	8006bc8 <__mcmp+0x18>
 8006be0:	e7fa      	b.n	8006bd8 <__mcmp+0x28>
 8006be2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006be6:	e7f7      	b.n	8006bd8 <__mcmp+0x28>

08006be8 <__mdiff>:
 8006be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bec:	460c      	mov	r4, r1
 8006bee:	4606      	mov	r6, r0
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	4617      	mov	r7, r2
 8006bf6:	f7ff ffdb 	bl	8006bb0 <__mcmp>
 8006bfa:	1e05      	subs	r5, r0, #0
 8006bfc:	d110      	bne.n	8006c20 <__mdiff+0x38>
 8006bfe:	4629      	mov	r1, r5
 8006c00:	4630      	mov	r0, r6
 8006c02:	f7ff fd57 	bl	80066b4 <_Balloc>
 8006c06:	b930      	cbnz	r0, 8006c16 <__mdiff+0x2e>
 8006c08:	4b39      	ldr	r3, [pc, #228]	; (8006cf0 <__mdiff+0x108>)
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	f240 2132 	movw	r1, #562	; 0x232
 8006c10:	4838      	ldr	r0, [pc, #224]	; (8006cf4 <__mdiff+0x10c>)
 8006c12:	f000 f997 	bl	8006f44 <__assert_func>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006c1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c20:	bfa4      	itt	ge
 8006c22:	463b      	movge	r3, r7
 8006c24:	4627      	movge	r7, r4
 8006c26:	4630      	mov	r0, r6
 8006c28:	6879      	ldr	r1, [r7, #4]
 8006c2a:	bfa6      	itte	ge
 8006c2c:	461c      	movge	r4, r3
 8006c2e:	2500      	movge	r5, #0
 8006c30:	2501      	movlt	r5, #1
 8006c32:	f7ff fd3f 	bl	80066b4 <_Balloc>
 8006c36:	b920      	cbnz	r0, 8006c42 <__mdiff+0x5a>
 8006c38:	4b2d      	ldr	r3, [pc, #180]	; (8006cf0 <__mdiff+0x108>)
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006c40:	e7e6      	b.n	8006c10 <__mdiff+0x28>
 8006c42:	693e      	ldr	r6, [r7, #16]
 8006c44:	60c5      	str	r5, [r0, #12]
 8006c46:	6925      	ldr	r5, [r4, #16]
 8006c48:	f107 0114 	add.w	r1, r7, #20
 8006c4c:	f104 0914 	add.w	r9, r4, #20
 8006c50:	f100 0e14 	add.w	lr, r0, #20
 8006c54:	f107 0210 	add.w	r2, r7, #16
 8006c58:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006c5c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006c60:	46f2      	mov	sl, lr
 8006c62:	2700      	movs	r7, #0
 8006c64:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006c6c:	fa1f f883 	uxth.w	r8, r3
 8006c70:	fa17 f78b 	uxtah	r7, r7, fp
 8006c74:	0c1b      	lsrs	r3, r3, #16
 8006c76:	eba7 0808 	sub.w	r8, r7, r8
 8006c7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006c82:	fa1f f888 	uxth.w	r8, r8
 8006c86:	141f      	asrs	r7, r3, #16
 8006c88:	454d      	cmp	r5, r9
 8006c8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006c8e:	f84a 3b04 	str.w	r3, [sl], #4
 8006c92:	d8e7      	bhi.n	8006c64 <__mdiff+0x7c>
 8006c94:	1b2b      	subs	r3, r5, r4
 8006c96:	3b15      	subs	r3, #21
 8006c98:	f023 0303 	bic.w	r3, r3, #3
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	3415      	adds	r4, #21
 8006ca0:	42a5      	cmp	r5, r4
 8006ca2:	bf38      	it	cc
 8006ca4:	2304      	movcc	r3, #4
 8006ca6:	4419      	add	r1, r3
 8006ca8:	4473      	add	r3, lr
 8006caa:	469e      	mov	lr, r3
 8006cac:	460d      	mov	r5, r1
 8006cae:	4565      	cmp	r5, ip
 8006cb0:	d30e      	bcc.n	8006cd0 <__mdiff+0xe8>
 8006cb2:	f10c 0203 	add.w	r2, ip, #3
 8006cb6:	1a52      	subs	r2, r2, r1
 8006cb8:	f022 0203 	bic.w	r2, r2, #3
 8006cbc:	3903      	subs	r1, #3
 8006cbe:	458c      	cmp	ip, r1
 8006cc0:	bf38      	it	cc
 8006cc2:	2200      	movcc	r2, #0
 8006cc4:	441a      	add	r2, r3
 8006cc6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006cca:	b17b      	cbz	r3, 8006cec <__mdiff+0x104>
 8006ccc:	6106      	str	r6, [r0, #16]
 8006cce:	e7a5      	b.n	8006c1c <__mdiff+0x34>
 8006cd0:	f855 8b04 	ldr.w	r8, [r5], #4
 8006cd4:	fa17 f488 	uxtah	r4, r7, r8
 8006cd8:	1422      	asrs	r2, r4, #16
 8006cda:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006cde:	b2a4      	uxth	r4, r4
 8006ce0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006ce4:	f84e 4b04 	str.w	r4, [lr], #4
 8006ce8:	1417      	asrs	r7, r2, #16
 8006cea:	e7e0      	b.n	8006cae <__mdiff+0xc6>
 8006cec:	3e01      	subs	r6, #1
 8006cee:	e7ea      	b.n	8006cc6 <__mdiff+0xde>
 8006cf0:	08009403 	.word	0x08009403
 8006cf4:	08009414 	.word	0x08009414

08006cf8 <__d2b>:
 8006cf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006cfc:	4689      	mov	r9, r1
 8006cfe:	2101      	movs	r1, #1
 8006d00:	ec57 6b10 	vmov	r6, r7, d0
 8006d04:	4690      	mov	r8, r2
 8006d06:	f7ff fcd5 	bl	80066b4 <_Balloc>
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	b930      	cbnz	r0, 8006d1c <__d2b+0x24>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	4b25      	ldr	r3, [pc, #148]	; (8006da8 <__d2b+0xb0>)
 8006d12:	4826      	ldr	r0, [pc, #152]	; (8006dac <__d2b+0xb4>)
 8006d14:	f240 310a 	movw	r1, #778	; 0x30a
 8006d18:	f000 f914 	bl	8006f44 <__assert_func>
 8006d1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006d20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d24:	bb35      	cbnz	r5, 8006d74 <__d2b+0x7c>
 8006d26:	2e00      	cmp	r6, #0
 8006d28:	9301      	str	r3, [sp, #4]
 8006d2a:	d028      	beq.n	8006d7e <__d2b+0x86>
 8006d2c:	4668      	mov	r0, sp
 8006d2e:	9600      	str	r6, [sp, #0]
 8006d30:	f7ff fd8c 	bl	800684c <__lo0bits>
 8006d34:	9900      	ldr	r1, [sp, #0]
 8006d36:	b300      	cbz	r0, 8006d7a <__d2b+0x82>
 8006d38:	9a01      	ldr	r2, [sp, #4]
 8006d3a:	f1c0 0320 	rsb	r3, r0, #32
 8006d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d42:	430b      	orrs	r3, r1
 8006d44:	40c2      	lsrs	r2, r0
 8006d46:	6163      	str	r3, [r4, #20]
 8006d48:	9201      	str	r2, [sp, #4]
 8006d4a:	9b01      	ldr	r3, [sp, #4]
 8006d4c:	61a3      	str	r3, [r4, #24]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bf14      	ite	ne
 8006d52:	2202      	movne	r2, #2
 8006d54:	2201      	moveq	r2, #1
 8006d56:	6122      	str	r2, [r4, #16]
 8006d58:	b1d5      	cbz	r5, 8006d90 <__d2b+0x98>
 8006d5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006d5e:	4405      	add	r5, r0
 8006d60:	f8c9 5000 	str.w	r5, [r9]
 8006d64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d68:	f8c8 0000 	str.w	r0, [r8]
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	b003      	add	sp, #12
 8006d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d78:	e7d5      	b.n	8006d26 <__d2b+0x2e>
 8006d7a:	6161      	str	r1, [r4, #20]
 8006d7c:	e7e5      	b.n	8006d4a <__d2b+0x52>
 8006d7e:	a801      	add	r0, sp, #4
 8006d80:	f7ff fd64 	bl	800684c <__lo0bits>
 8006d84:	9b01      	ldr	r3, [sp, #4]
 8006d86:	6163      	str	r3, [r4, #20]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	6122      	str	r2, [r4, #16]
 8006d8c:	3020      	adds	r0, #32
 8006d8e:	e7e3      	b.n	8006d58 <__d2b+0x60>
 8006d90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d98:	f8c9 0000 	str.w	r0, [r9]
 8006d9c:	6918      	ldr	r0, [r3, #16]
 8006d9e:	f7ff fd35 	bl	800680c <__hi0bits>
 8006da2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006da6:	e7df      	b.n	8006d68 <__d2b+0x70>
 8006da8:	08009403 	.word	0x08009403
 8006dac:	08009414 	.word	0x08009414

08006db0 <_calloc_r>:
 8006db0:	b513      	push	{r0, r1, r4, lr}
 8006db2:	434a      	muls	r2, r1
 8006db4:	4611      	mov	r1, r2
 8006db6:	9201      	str	r2, [sp, #4]
 8006db8:	f000 f85a 	bl	8006e70 <_malloc_r>
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	b118      	cbz	r0, 8006dc8 <_calloc_r+0x18>
 8006dc0:	9a01      	ldr	r2, [sp, #4]
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	f7fe f970 	bl	80050a8 <memset>
 8006dc8:	4620      	mov	r0, r4
 8006dca:	b002      	add	sp, #8
 8006dcc:	bd10      	pop	{r4, pc}
	...

08006dd0 <_free_r>:
 8006dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dd2:	2900      	cmp	r1, #0
 8006dd4:	d048      	beq.n	8006e68 <_free_r+0x98>
 8006dd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dda:	9001      	str	r0, [sp, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f1a1 0404 	sub.w	r4, r1, #4
 8006de2:	bfb8      	it	lt
 8006de4:	18e4      	addlt	r4, r4, r3
 8006de6:	f000 f8ef 	bl	8006fc8 <__malloc_lock>
 8006dea:	4a20      	ldr	r2, [pc, #128]	; (8006e6c <_free_r+0x9c>)
 8006dec:	9801      	ldr	r0, [sp, #4]
 8006dee:	6813      	ldr	r3, [r2, #0]
 8006df0:	4615      	mov	r5, r2
 8006df2:	b933      	cbnz	r3, 8006e02 <_free_r+0x32>
 8006df4:	6063      	str	r3, [r4, #4]
 8006df6:	6014      	str	r4, [r2, #0]
 8006df8:	b003      	add	sp, #12
 8006dfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dfe:	f000 b8e9 	b.w	8006fd4 <__malloc_unlock>
 8006e02:	42a3      	cmp	r3, r4
 8006e04:	d90b      	bls.n	8006e1e <_free_r+0x4e>
 8006e06:	6821      	ldr	r1, [r4, #0]
 8006e08:	1862      	adds	r2, r4, r1
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	bf04      	itt	eq
 8006e0e:	681a      	ldreq	r2, [r3, #0]
 8006e10:	685b      	ldreq	r3, [r3, #4]
 8006e12:	6063      	str	r3, [r4, #4]
 8006e14:	bf04      	itt	eq
 8006e16:	1852      	addeq	r2, r2, r1
 8006e18:	6022      	streq	r2, [r4, #0]
 8006e1a:	602c      	str	r4, [r5, #0]
 8006e1c:	e7ec      	b.n	8006df8 <_free_r+0x28>
 8006e1e:	461a      	mov	r2, r3
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	b10b      	cbz	r3, 8006e28 <_free_r+0x58>
 8006e24:	42a3      	cmp	r3, r4
 8006e26:	d9fa      	bls.n	8006e1e <_free_r+0x4e>
 8006e28:	6811      	ldr	r1, [r2, #0]
 8006e2a:	1855      	adds	r5, r2, r1
 8006e2c:	42a5      	cmp	r5, r4
 8006e2e:	d10b      	bne.n	8006e48 <_free_r+0x78>
 8006e30:	6824      	ldr	r4, [r4, #0]
 8006e32:	4421      	add	r1, r4
 8006e34:	1854      	adds	r4, r2, r1
 8006e36:	42a3      	cmp	r3, r4
 8006e38:	6011      	str	r1, [r2, #0]
 8006e3a:	d1dd      	bne.n	8006df8 <_free_r+0x28>
 8006e3c:	681c      	ldr	r4, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	6053      	str	r3, [r2, #4]
 8006e42:	4421      	add	r1, r4
 8006e44:	6011      	str	r1, [r2, #0]
 8006e46:	e7d7      	b.n	8006df8 <_free_r+0x28>
 8006e48:	d902      	bls.n	8006e50 <_free_r+0x80>
 8006e4a:	230c      	movs	r3, #12
 8006e4c:	6003      	str	r3, [r0, #0]
 8006e4e:	e7d3      	b.n	8006df8 <_free_r+0x28>
 8006e50:	6825      	ldr	r5, [r4, #0]
 8006e52:	1961      	adds	r1, r4, r5
 8006e54:	428b      	cmp	r3, r1
 8006e56:	bf04      	itt	eq
 8006e58:	6819      	ldreq	r1, [r3, #0]
 8006e5a:	685b      	ldreq	r3, [r3, #4]
 8006e5c:	6063      	str	r3, [r4, #4]
 8006e5e:	bf04      	itt	eq
 8006e60:	1949      	addeq	r1, r1, r5
 8006e62:	6021      	streq	r1, [r4, #0]
 8006e64:	6054      	str	r4, [r2, #4]
 8006e66:	e7c7      	b.n	8006df8 <_free_r+0x28>
 8006e68:	b003      	add	sp, #12
 8006e6a:	bd30      	pop	{r4, r5, pc}
 8006e6c:	20000224 	.word	0x20000224

08006e70 <_malloc_r>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	1ccd      	adds	r5, r1, #3
 8006e74:	f025 0503 	bic.w	r5, r5, #3
 8006e78:	3508      	adds	r5, #8
 8006e7a:	2d0c      	cmp	r5, #12
 8006e7c:	bf38      	it	cc
 8006e7e:	250c      	movcc	r5, #12
 8006e80:	2d00      	cmp	r5, #0
 8006e82:	4606      	mov	r6, r0
 8006e84:	db01      	blt.n	8006e8a <_malloc_r+0x1a>
 8006e86:	42a9      	cmp	r1, r5
 8006e88:	d903      	bls.n	8006e92 <_malloc_r+0x22>
 8006e8a:	230c      	movs	r3, #12
 8006e8c:	6033      	str	r3, [r6, #0]
 8006e8e:	2000      	movs	r0, #0
 8006e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e92:	f000 f899 	bl	8006fc8 <__malloc_lock>
 8006e96:	4921      	ldr	r1, [pc, #132]	; (8006f1c <_malloc_r+0xac>)
 8006e98:	680a      	ldr	r2, [r1, #0]
 8006e9a:	4614      	mov	r4, r2
 8006e9c:	b99c      	cbnz	r4, 8006ec6 <_malloc_r+0x56>
 8006e9e:	4f20      	ldr	r7, [pc, #128]	; (8006f20 <_malloc_r+0xb0>)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	b923      	cbnz	r3, 8006eae <_malloc_r+0x3e>
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	f000 f83c 	bl	8006f24 <_sbrk_r>
 8006eac:	6038      	str	r0, [r7, #0]
 8006eae:	4629      	mov	r1, r5
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	f000 f837 	bl	8006f24 <_sbrk_r>
 8006eb6:	1c43      	adds	r3, r0, #1
 8006eb8:	d123      	bne.n	8006f02 <_malloc_r+0x92>
 8006eba:	230c      	movs	r3, #12
 8006ebc:	6033      	str	r3, [r6, #0]
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	f000 f888 	bl	8006fd4 <__malloc_unlock>
 8006ec4:	e7e3      	b.n	8006e8e <_malloc_r+0x1e>
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	1b5b      	subs	r3, r3, r5
 8006eca:	d417      	bmi.n	8006efc <_malloc_r+0x8c>
 8006ecc:	2b0b      	cmp	r3, #11
 8006ece:	d903      	bls.n	8006ed8 <_malloc_r+0x68>
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	441c      	add	r4, r3
 8006ed4:	6025      	str	r5, [r4, #0]
 8006ed6:	e004      	b.n	8006ee2 <_malloc_r+0x72>
 8006ed8:	6863      	ldr	r3, [r4, #4]
 8006eda:	42a2      	cmp	r2, r4
 8006edc:	bf0c      	ite	eq
 8006ede:	600b      	streq	r3, [r1, #0]
 8006ee0:	6053      	strne	r3, [r2, #4]
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f000 f876 	bl	8006fd4 <__malloc_unlock>
 8006ee8:	f104 000b 	add.w	r0, r4, #11
 8006eec:	1d23      	adds	r3, r4, #4
 8006eee:	f020 0007 	bic.w	r0, r0, #7
 8006ef2:	1ac2      	subs	r2, r0, r3
 8006ef4:	d0cc      	beq.n	8006e90 <_malloc_r+0x20>
 8006ef6:	1a1b      	subs	r3, r3, r0
 8006ef8:	50a3      	str	r3, [r4, r2]
 8006efa:	e7c9      	b.n	8006e90 <_malloc_r+0x20>
 8006efc:	4622      	mov	r2, r4
 8006efe:	6864      	ldr	r4, [r4, #4]
 8006f00:	e7cc      	b.n	8006e9c <_malloc_r+0x2c>
 8006f02:	1cc4      	adds	r4, r0, #3
 8006f04:	f024 0403 	bic.w	r4, r4, #3
 8006f08:	42a0      	cmp	r0, r4
 8006f0a:	d0e3      	beq.n	8006ed4 <_malloc_r+0x64>
 8006f0c:	1a21      	subs	r1, r4, r0
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f000 f808 	bl	8006f24 <_sbrk_r>
 8006f14:	3001      	adds	r0, #1
 8006f16:	d1dd      	bne.n	8006ed4 <_malloc_r+0x64>
 8006f18:	e7cf      	b.n	8006eba <_malloc_r+0x4a>
 8006f1a:	bf00      	nop
 8006f1c:	20000224 	.word	0x20000224
 8006f20:	20000228 	.word	0x20000228

08006f24 <_sbrk_r>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	4d06      	ldr	r5, [pc, #24]	; (8006f40 <_sbrk_r+0x1c>)
 8006f28:	2300      	movs	r3, #0
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	4608      	mov	r0, r1
 8006f2e:	602b      	str	r3, [r5, #0]
 8006f30:	f7fb fcda 	bl	80028e8 <_sbrk>
 8006f34:	1c43      	adds	r3, r0, #1
 8006f36:	d102      	bne.n	8006f3e <_sbrk_r+0x1a>
 8006f38:	682b      	ldr	r3, [r5, #0]
 8006f3a:	b103      	cbz	r3, 8006f3e <_sbrk_r+0x1a>
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	bd38      	pop	{r3, r4, r5, pc}
 8006f40:	200044e4 	.word	0x200044e4

08006f44 <__assert_func>:
 8006f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f46:	4614      	mov	r4, r2
 8006f48:	461a      	mov	r2, r3
 8006f4a:	4b09      	ldr	r3, [pc, #36]	; (8006f70 <__assert_func+0x2c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4605      	mov	r5, r0
 8006f50:	68d8      	ldr	r0, [r3, #12]
 8006f52:	b14c      	cbz	r4, 8006f68 <__assert_func+0x24>
 8006f54:	4b07      	ldr	r3, [pc, #28]	; (8006f74 <__assert_func+0x30>)
 8006f56:	9100      	str	r1, [sp, #0]
 8006f58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f5c:	4906      	ldr	r1, [pc, #24]	; (8006f78 <__assert_func+0x34>)
 8006f5e:	462b      	mov	r3, r5
 8006f60:	f000 f80e 	bl	8006f80 <fiprintf>
 8006f64:	f000 fa64 	bl	8007430 <abort>
 8006f68:	4b04      	ldr	r3, [pc, #16]	; (8006f7c <__assert_func+0x38>)
 8006f6a:	461c      	mov	r4, r3
 8006f6c:	e7f3      	b.n	8006f56 <__assert_func+0x12>
 8006f6e:	bf00      	nop
 8006f70:	20000024 	.word	0x20000024
 8006f74:	08009574 	.word	0x08009574
 8006f78:	08009581 	.word	0x08009581
 8006f7c:	080095af 	.word	0x080095af

08006f80 <fiprintf>:
 8006f80:	b40e      	push	{r1, r2, r3}
 8006f82:	b503      	push	{r0, r1, lr}
 8006f84:	4601      	mov	r1, r0
 8006f86:	ab03      	add	r3, sp, #12
 8006f88:	4805      	ldr	r0, [pc, #20]	; (8006fa0 <fiprintf+0x20>)
 8006f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f8e:	6800      	ldr	r0, [r0, #0]
 8006f90:	9301      	str	r3, [sp, #4]
 8006f92:	f000 f84f 	bl	8007034 <_vfiprintf_r>
 8006f96:	b002      	add	sp, #8
 8006f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f9c:	b003      	add	sp, #12
 8006f9e:	4770      	bx	lr
 8006fa0:	20000024 	.word	0x20000024

08006fa4 <__ascii_mbtowc>:
 8006fa4:	b082      	sub	sp, #8
 8006fa6:	b901      	cbnz	r1, 8006faa <__ascii_mbtowc+0x6>
 8006fa8:	a901      	add	r1, sp, #4
 8006faa:	b142      	cbz	r2, 8006fbe <__ascii_mbtowc+0x1a>
 8006fac:	b14b      	cbz	r3, 8006fc2 <__ascii_mbtowc+0x1e>
 8006fae:	7813      	ldrb	r3, [r2, #0]
 8006fb0:	600b      	str	r3, [r1, #0]
 8006fb2:	7812      	ldrb	r2, [r2, #0]
 8006fb4:	1e10      	subs	r0, r2, #0
 8006fb6:	bf18      	it	ne
 8006fb8:	2001      	movne	r0, #1
 8006fba:	b002      	add	sp, #8
 8006fbc:	4770      	bx	lr
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	e7fb      	b.n	8006fba <__ascii_mbtowc+0x16>
 8006fc2:	f06f 0001 	mvn.w	r0, #1
 8006fc6:	e7f8      	b.n	8006fba <__ascii_mbtowc+0x16>

08006fc8 <__malloc_lock>:
 8006fc8:	4801      	ldr	r0, [pc, #4]	; (8006fd0 <__malloc_lock+0x8>)
 8006fca:	f000 bbf1 	b.w	80077b0 <__retarget_lock_acquire_recursive>
 8006fce:	bf00      	nop
 8006fd0:	200044ec 	.word	0x200044ec

08006fd4 <__malloc_unlock>:
 8006fd4:	4801      	ldr	r0, [pc, #4]	; (8006fdc <__malloc_unlock+0x8>)
 8006fd6:	f000 bbec 	b.w	80077b2 <__retarget_lock_release_recursive>
 8006fda:	bf00      	nop
 8006fdc:	200044ec 	.word	0x200044ec

08006fe0 <__sfputc_r>:
 8006fe0:	6893      	ldr	r3, [r2, #8]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	b410      	push	{r4}
 8006fe8:	6093      	str	r3, [r2, #8]
 8006fea:	da08      	bge.n	8006ffe <__sfputc_r+0x1e>
 8006fec:	6994      	ldr	r4, [r2, #24]
 8006fee:	42a3      	cmp	r3, r4
 8006ff0:	db01      	blt.n	8006ff6 <__sfputc_r+0x16>
 8006ff2:	290a      	cmp	r1, #10
 8006ff4:	d103      	bne.n	8006ffe <__sfputc_r+0x1e>
 8006ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ffa:	f000 b94b 	b.w	8007294 <__swbuf_r>
 8006ffe:	6813      	ldr	r3, [r2, #0]
 8007000:	1c58      	adds	r0, r3, #1
 8007002:	6010      	str	r0, [r2, #0]
 8007004:	7019      	strb	r1, [r3, #0]
 8007006:	4608      	mov	r0, r1
 8007008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800700c:	4770      	bx	lr

0800700e <__sfputs_r>:
 800700e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007010:	4606      	mov	r6, r0
 8007012:	460f      	mov	r7, r1
 8007014:	4614      	mov	r4, r2
 8007016:	18d5      	adds	r5, r2, r3
 8007018:	42ac      	cmp	r4, r5
 800701a:	d101      	bne.n	8007020 <__sfputs_r+0x12>
 800701c:	2000      	movs	r0, #0
 800701e:	e007      	b.n	8007030 <__sfputs_r+0x22>
 8007020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007024:	463a      	mov	r2, r7
 8007026:	4630      	mov	r0, r6
 8007028:	f7ff ffda 	bl	8006fe0 <__sfputc_r>
 800702c:	1c43      	adds	r3, r0, #1
 800702e:	d1f3      	bne.n	8007018 <__sfputs_r+0xa>
 8007030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007034 <_vfiprintf_r>:
 8007034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007038:	460d      	mov	r5, r1
 800703a:	b09d      	sub	sp, #116	; 0x74
 800703c:	4614      	mov	r4, r2
 800703e:	4698      	mov	r8, r3
 8007040:	4606      	mov	r6, r0
 8007042:	b118      	cbz	r0, 800704c <_vfiprintf_r+0x18>
 8007044:	6983      	ldr	r3, [r0, #24]
 8007046:	b90b      	cbnz	r3, 800704c <_vfiprintf_r+0x18>
 8007048:	f000 fb14 	bl	8007674 <__sinit>
 800704c:	4b89      	ldr	r3, [pc, #548]	; (8007274 <_vfiprintf_r+0x240>)
 800704e:	429d      	cmp	r5, r3
 8007050:	d11b      	bne.n	800708a <_vfiprintf_r+0x56>
 8007052:	6875      	ldr	r5, [r6, #4]
 8007054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007056:	07d9      	lsls	r1, r3, #31
 8007058:	d405      	bmi.n	8007066 <_vfiprintf_r+0x32>
 800705a:	89ab      	ldrh	r3, [r5, #12]
 800705c:	059a      	lsls	r2, r3, #22
 800705e:	d402      	bmi.n	8007066 <_vfiprintf_r+0x32>
 8007060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007062:	f000 fba5 	bl	80077b0 <__retarget_lock_acquire_recursive>
 8007066:	89ab      	ldrh	r3, [r5, #12]
 8007068:	071b      	lsls	r3, r3, #28
 800706a:	d501      	bpl.n	8007070 <_vfiprintf_r+0x3c>
 800706c:	692b      	ldr	r3, [r5, #16]
 800706e:	b9eb      	cbnz	r3, 80070ac <_vfiprintf_r+0x78>
 8007070:	4629      	mov	r1, r5
 8007072:	4630      	mov	r0, r6
 8007074:	f000 f96e 	bl	8007354 <__swsetup_r>
 8007078:	b1c0      	cbz	r0, 80070ac <_vfiprintf_r+0x78>
 800707a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800707c:	07dc      	lsls	r4, r3, #31
 800707e:	d50e      	bpl.n	800709e <_vfiprintf_r+0x6a>
 8007080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007084:	b01d      	add	sp, #116	; 0x74
 8007086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708a:	4b7b      	ldr	r3, [pc, #492]	; (8007278 <_vfiprintf_r+0x244>)
 800708c:	429d      	cmp	r5, r3
 800708e:	d101      	bne.n	8007094 <_vfiprintf_r+0x60>
 8007090:	68b5      	ldr	r5, [r6, #8]
 8007092:	e7df      	b.n	8007054 <_vfiprintf_r+0x20>
 8007094:	4b79      	ldr	r3, [pc, #484]	; (800727c <_vfiprintf_r+0x248>)
 8007096:	429d      	cmp	r5, r3
 8007098:	bf08      	it	eq
 800709a:	68f5      	ldreq	r5, [r6, #12]
 800709c:	e7da      	b.n	8007054 <_vfiprintf_r+0x20>
 800709e:	89ab      	ldrh	r3, [r5, #12]
 80070a0:	0598      	lsls	r0, r3, #22
 80070a2:	d4ed      	bmi.n	8007080 <_vfiprintf_r+0x4c>
 80070a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070a6:	f000 fb84 	bl	80077b2 <__retarget_lock_release_recursive>
 80070aa:	e7e9      	b.n	8007080 <_vfiprintf_r+0x4c>
 80070ac:	2300      	movs	r3, #0
 80070ae:	9309      	str	r3, [sp, #36]	; 0x24
 80070b0:	2320      	movs	r3, #32
 80070b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80070ba:	2330      	movs	r3, #48	; 0x30
 80070bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007280 <_vfiprintf_r+0x24c>
 80070c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070c4:	f04f 0901 	mov.w	r9, #1
 80070c8:	4623      	mov	r3, r4
 80070ca:	469a      	mov	sl, r3
 80070cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070d0:	b10a      	cbz	r2, 80070d6 <_vfiprintf_r+0xa2>
 80070d2:	2a25      	cmp	r2, #37	; 0x25
 80070d4:	d1f9      	bne.n	80070ca <_vfiprintf_r+0x96>
 80070d6:	ebba 0b04 	subs.w	fp, sl, r4
 80070da:	d00b      	beq.n	80070f4 <_vfiprintf_r+0xc0>
 80070dc:	465b      	mov	r3, fp
 80070de:	4622      	mov	r2, r4
 80070e0:	4629      	mov	r1, r5
 80070e2:	4630      	mov	r0, r6
 80070e4:	f7ff ff93 	bl	800700e <__sfputs_r>
 80070e8:	3001      	adds	r0, #1
 80070ea:	f000 80aa 	beq.w	8007242 <_vfiprintf_r+0x20e>
 80070ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070f0:	445a      	add	r2, fp
 80070f2:	9209      	str	r2, [sp, #36]	; 0x24
 80070f4:	f89a 3000 	ldrb.w	r3, [sl]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 80a2 	beq.w	8007242 <_vfiprintf_r+0x20e>
 80070fe:	2300      	movs	r3, #0
 8007100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007108:	f10a 0a01 	add.w	sl, sl, #1
 800710c:	9304      	str	r3, [sp, #16]
 800710e:	9307      	str	r3, [sp, #28]
 8007110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007114:	931a      	str	r3, [sp, #104]	; 0x68
 8007116:	4654      	mov	r4, sl
 8007118:	2205      	movs	r2, #5
 800711a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711e:	4858      	ldr	r0, [pc, #352]	; (8007280 <_vfiprintf_r+0x24c>)
 8007120:	f7f9 f866 	bl	80001f0 <memchr>
 8007124:	9a04      	ldr	r2, [sp, #16]
 8007126:	b9d8      	cbnz	r0, 8007160 <_vfiprintf_r+0x12c>
 8007128:	06d1      	lsls	r1, r2, #27
 800712a:	bf44      	itt	mi
 800712c:	2320      	movmi	r3, #32
 800712e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007132:	0713      	lsls	r3, r2, #28
 8007134:	bf44      	itt	mi
 8007136:	232b      	movmi	r3, #43	; 0x2b
 8007138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800713c:	f89a 3000 	ldrb.w	r3, [sl]
 8007140:	2b2a      	cmp	r3, #42	; 0x2a
 8007142:	d015      	beq.n	8007170 <_vfiprintf_r+0x13c>
 8007144:	9a07      	ldr	r2, [sp, #28]
 8007146:	4654      	mov	r4, sl
 8007148:	2000      	movs	r0, #0
 800714a:	f04f 0c0a 	mov.w	ip, #10
 800714e:	4621      	mov	r1, r4
 8007150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007154:	3b30      	subs	r3, #48	; 0x30
 8007156:	2b09      	cmp	r3, #9
 8007158:	d94e      	bls.n	80071f8 <_vfiprintf_r+0x1c4>
 800715a:	b1b0      	cbz	r0, 800718a <_vfiprintf_r+0x156>
 800715c:	9207      	str	r2, [sp, #28]
 800715e:	e014      	b.n	800718a <_vfiprintf_r+0x156>
 8007160:	eba0 0308 	sub.w	r3, r0, r8
 8007164:	fa09 f303 	lsl.w	r3, r9, r3
 8007168:	4313      	orrs	r3, r2
 800716a:	9304      	str	r3, [sp, #16]
 800716c:	46a2      	mov	sl, r4
 800716e:	e7d2      	b.n	8007116 <_vfiprintf_r+0xe2>
 8007170:	9b03      	ldr	r3, [sp, #12]
 8007172:	1d19      	adds	r1, r3, #4
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	9103      	str	r1, [sp, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	bfbb      	ittet	lt
 800717c:	425b      	neglt	r3, r3
 800717e:	f042 0202 	orrlt.w	r2, r2, #2
 8007182:	9307      	strge	r3, [sp, #28]
 8007184:	9307      	strlt	r3, [sp, #28]
 8007186:	bfb8      	it	lt
 8007188:	9204      	strlt	r2, [sp, #16]
 800718a:	7823      	ldrb	r3, [r4, #0]
 800718c:	2b2e      	cmp	r3, #46	; 0x2e
 800718e:	d10c      	bne.n	80071aa <_vfiprintf_r+0x176>
 8007190:	7863      	ldrb	r3, [r4, #1]
 8007192:	2b2a      	cmp	r3, #42	; 0x2a
 8007194:	d135      	bne.n	8007202 <_vfiprintf_r+0x1ce>
 8007196:	9b03      	ldr	r3, [sp, #12]
 8007198:	1d1a      	adds	r2, r3, #4
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	9203      	str	r2, [sp, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	bfb8      	it	lt
 80071a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80071a6:	3402      	adds	r4, #2
 80071a8:	9305      	str	r3, [sp, #20]
 80071aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007290 <_vfiprintf_r+0x25c>
 80071ae:	7821      	ldrb	r1, [r4, #0]
 80071b0:	2203      	movs	r2, #3
 80071b2:	4650      	mov	r0, sl
 80071b4:	f7f9 f81c 	bl	80001f0 <memchr>
 80071b8:	b140      	cbz	r0, 80071cc <_vfiprintf_r+0x198>
 80071ba:	2340      	movs	r3, #64	; 0x40
 80071bc:	eba0 000a 	sub.w	r0, r0, sl
 80071c0:	fa03 f000 	lsl.w	r0, r3, r0
 80071c4:	9b04      	ldr	r3, [sp, #16]
 80071c6:	4303      	orrs	r3, r0
 80071c8:	3401      	adds	r4, #1
 80071ca:	9304      	str	r3, [sp, #16]
 80071cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071d0:	482c      	ldr	r0, [pc, #176]	; (8007284 <_vfiprintf_r+0x250>)
 80071d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071d6:	2206      	movs	r2, #6
 80071d8:	f7f9 f80a 	bl	80001f0 <memchr>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d03f      	beq.n	8007260 <_vfiprintf_r+0x22c>
 80071e0:	4b29      	ldr	r3, [pc, #164]	; (8007288 <_vfiprintf_r+0x254>)
 80071e2:	bb1b      	cbnz	r3, 800722c <_vfiprintf_r+0x1f8>
 80071e4:	9b03      	ldr	r3, [sp, #12]
 80071e6:	3307      	adds	r3, #7
 80071e8:	f023 0307 	bic.w	r3, r3, #7
 80071ec:	3308      	adds	r3, #8
 80071ee:	9303      	str	r3, [sp, #12]
 80071f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f2:	443b      	add	r3, r7
 80071f4:	9309      	str	r3, [sp, #36]	; 0x24
 80071f6:	e767      	b.n	80070c8 <_vfiprintf_r+0x94>
 80071f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80071fc:	460c      	mov	r4, r1
 80071fe:	2001      	movs	r0, #1
 8007200:	e7a5      	b.n	800714e <_vfiprintf_r+0x11a>
 8007202:	2300      	movs	r3, #0
 8007204:	3401      	adds	r4, #1
 8007206:	9305      	str	r3, [sp, #20]
 8007208:	4619      	mov	r1, r3
 800720a:	f04f 0c0a 	mov.w	ip, #10
 800720e:	4620      	mov	r0, r4
 8007210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007214:	3a30      	subs	r2, #48	; 0x30
 8007216:	2a09      	cmp	r2, #9
 8007218:	d903      	bls.n	8007222 <_vfiprintf_r+0x1ee>
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0c5      	beq.n	80071aa <_vfiprintf_r+0x176>
 800721e:	9105      	str	r1, [sp, #20]
 8007220:	e7c3      	b.n	80071aa <_vfiprintf_r+0x176>
 8007222:	fb0c 2101 	mla	r1, ip, r1, r2
 8007226:	4604      	mov	r4, r0
 8007228:	2301      	movs	r3, #1
 800722a:	e7f0      	b.n	800720e <_vfiprintf_r+0x1da>
 800722c:	ab03      	add	r3, sp, #12
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	462a      	mov	r2, r5
 8007232:	4b16      	ldr	r3, [pc, #88]	; (800728c <_vfiprintf_r+0x258>)
 8007234:	a904      	add	r1, sp, #16
 8007236:	4630      	mov	r0, r6
 8007238:	f7fd ffde 	bl	80051f8 <_printf_float>
 800723c:	4607      	mov	r7, r0
 800723e:	1c78      	adds	r0, r7, #1
 8007240:	d1d6      	bne.n	80071f0 <_vfiprintf_r+0x1bc>
 8007242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007244:	07d9      	lsls	r1, r3, #31
 8007246:	d405      	bmi.n	8007254 <_vfiprintf_r+0x220>
 8007248:	89ab      	ldrh	r3, [r5, #12]
 800724a:	059a      	lsls	r2, r3, #22
 800724c:	d402      	bmi.n	8007254 <_vfiprintf_r+0x220>
 800724e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007250:	f000 faaf 	bl	80077b2 <__retarget_lock_release_recursive>
 8007254:	89ab      	ldrh	r3, [r5, #12]
 8007256:	065b      	lsls	r3, r3, #25
 8007258:	f53f af12 	bmi.w	8007080 <_vfiprintf_r+0x4c>
 800725c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800725e:	e711      	b.n	8007084 <_vfiprintf_r+0x50>
 8007260:	ab03      	add	r3, sp, #12
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	462a      	mov	r2, r5
 8007266:	4b09      	ldr	r3, [pc, #36]	; (800728c <_vfiprintf_r+0x258>)
 8007268:	a904      	add	r1, sp, #16
 800726a:	4630      	mov	r0, r6
 800726c:	f7fe fa68 	bl	8005740 <_printf_i>
 8007270:	e7e4      	b.n	800723c <_vfiprintf_r+0x208>
 8007272:	bf00      	nop
 8007274:	080096ec 	.word	0x080096ec
 8007278:	0800970c 	.word	0x0800970c
 800727c:	080096cc 	.word	0x080096cc
 8007280:	080095ba 	.word	0x080095ba
 8007284:	080095c4 	.word	0x080095c4
 8007288:	080051f9 	.word	0x080051f9
 800728c:	0800700f 	.word	0x0800700f
 8007290:	080095c0 	.word	0x080095c0

08007294 <__swbuf_r>:
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007296:	460e      	mov	r6, r1
 8007298:	4614      	mov	r4, r2
 800729a:	4605      	mov	r5, r0
 800729c:	b118      	cbz	r0, 80072a6 <__swbuf_r+0x12>
 800729e:	6983      	ldr	r3, [r0, #24]
 80072a0:	b90b      	cbnz	r3, 80072a6 <__swbuf_r+0x12>
 80072a2:	f000 f9e7 	bl	8007674 <__sinit>
 80072a6:	4b21      	ldr	r3, [pc, #132]	; (800732c <__swbuf_r+0x98>)
 80072a8:	429c      	cmp	r4, r3
 80072aa:	d12b      	bne.n	8007304 <__swbuf_r+0x70>
 80072ac:	686c      	ldr	r4, [r5, #4]
 80072ae:	69a3      	ldr	r3, [r4, #24]
 80072b0:	60a3      	str	r3, [r4, #8]
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	071a      	lsls	r2, r3, #28
 80072b6:	d52f      	bpl.n	8007318 <__swbuf_r+0x84>
 80072b8:	6923      	ldr	r3, [r4, #16]
 80072ba:	b36b      	cbz	r3, 8007318 <__swbuf_r+0x84>
 80072bc:	6923      	ldr	r3, [r4, #16]
 80072be:	6820      	ldr	r0, [r4, #0]
 80072c0:	1ac0      	subs	r0, r0, r3
 80072c2:	6963      	ldr	r3, [r4, #20]
 80072c4:	b2f6      	uxtb	r6, r6
 80072c6:	4283      	cmp	r3, r0
 80072c8:	4637      	mov	r7, r6
 80072ca:	dc04      	bgt.n	80072d6 <__swbuf_r+0x42>
 80072cc:	4621      	mov	r1, r4
 80072ce:	4628      	mov	r0, r5
 80072d0:	f000 f93c 	bl	800754c <_fflush_r>
 80072d4:	bb30      	cbnz	r0, 8007324 <__swbuf_r+0x90>
 80072d6:	68a3      	ldr	r3, [r4, #8]
 80072d8:	3b01      	subs	r3, #1
 80072da:	60a3      	str	r3, [r4, #8]
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	6022      	str	r2, [r4, #0]
 80072e2:	701e      	strb	r6, [r3, #0]
 80072e4:	6963      	ldr	r3, [r4, #20]
 80072e6:	3001      	adds	r0, #1
 80072e8:	4283      	cmp	r3, r0
 80072ea:	d004      	beq.n	80072f6 <__swbuf_r+0x62>
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	07db      	lsls	r3, r3, #31
 80072f0:	d506      	bpl.n	8007300 <__swbuf_r+0x6c>
 80072f2:	2e0a      	cmp	r6, #10
 80072f4:	d104      	bne.n	8007300 <__swbuf_r+0x6c>
 80072f6:	4621      	mov	r1, r4
 80072f8:	4628      	mov	r0, r5
 80072fa:	f000 f927 	bl	800754c <_fflush_r>
 80072fe:	b988      	cbnz	r0, 8007324 <__swbuf_r+0x90>
 8007300:	4638      	mov	r0, r7
 8007302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007304:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <__swbuf_r+0x9c>)
 8007306:	429c      	cmp	r4, r3
 8007308:	d101      	bne.n	800730e <__swbuf_r+0x7a>
 800730a:	68ac      	ldr	r4, [r5, #8]
 800730c:	e7cf      	b.n	80072ae <__swbuf_r+0x1a>
 800730e:	4b09      	ldr	r3, [pc, #36]	; (8007334 <__swbuf_r+0xa0>)
 8007310:	429c      	cmp	r4, r3
 8007312:	bf08      	it	eq
 8007314:	68ec      	ldreq	r4, [r5, #12]
 8007316:	e7ca      	b.n	80072ae <__swbuf_r+0x1a>
 8007318:	4621      	mov	r1, r4
 800731a:	4628      	mov	r0, r5
 800731c:	f000 f81a 	bl	8007354 <__swsetup_r>
 8007320:	2800      	cmp	r0, #0
 8007322:	d0cb      	beq.n	80072bc <__swbuf_r+0x28>
 8007324:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007328:	e7ea      	b.n	8007300 <__swbuf_r+0x6c>
 800732a:	bf00      	nop
 800732c:	080096ec 	.word	0x080096ec
 8007330:	0800970c 	.word	0x0800970c
 8007334:	080096cc 	.word	0x080096cc

08007338 <__ascii_wctomb>:
 8007338:	b149      	cbz	r1, 800734e <__ascii_wctomb+0x16>
 800733a:	2aff      	cmp	r2, #255	; 0xff
 800733c:	bf85      	ittet	hi
 800733e:	238a      	movhi	r3, #138	; 0x8a
 8007340:	6003      	strhi	r3, [r0, #0]
 8007342:	700a      	strbls	r2, [r1, #0]
 8007344:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007348:	bf98      	it	ls
 800734a:	2001      	movls	r0, #1
 800734c:	4770      	bx	lr
 800734e:	4608      	mov	r0, r1
 8007350:	4770      	bx	lr
	...

08007354 <__swsetup_r>:
 8007354:	4b32      	ldr	r3, [pc, #200]	; (8007420 <__swsetup_r+0xcc>)
 8007356:	b570      	push	{r4, r5, r6, lr}
 8007358:	681d      	ldr	r5, [r3, #0]
 800735a:	4606      	mov	r6, r0
 800735c:	460c      	mov	r4, r1
 800735e:	b125      	cbz	r5, 800736a <__swsetup_r+0x16>
 8007360:	69ab      	ldr	r3, [r5, #24]
 8007362:	b913      	cbnz	r3, 800736a <__swsetup_r+0x16>
 8007364:	4628      	mov	r0, r5
 8007366:	f000 f985 	bl	8007674 <__sinit>
 800736a:	4b2e      	ldr	r3, [pc, #184]	; (8007424 <__swsetup_r+0xd0>)
 800736c:	429c      	cmp	r4, r3
 800736e:	d10f      	bne.n	8007390 <__swsetup_r+0x3c>
 8007370:	686c      	ldr	r4, [r5, #4]
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007378:	0719      	lsls	r1, r3, #28
 800737a:	d42c      	bmi.n	80073d6 <__swsetup_r+0x82>
 800737c:	06dd      	lsls	r5, r3, #27
 800737e:	d411      	bmi.n	80073a4 <__swsetup_r+0x50>
 8007380:	2309      	movs	r3, #9
 8007382:	6033      	str	r3, [r6, #0]
 8007384:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007388:	81a3      	strh	r3, [r4, #12]
 800738a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800738e:	e03e      	b.n	800740e <__swsetup_r+0xba>
 8007390:	4b25      	ldr	r3, [pc, #148]	; (8007428 <__swsetup_r+0xd4>)
 8007392:	429c      	cmp	r4, r3
 8007394:	d101      	bne.n	800739a <__swsetup_r+0x46>
 8007396:	68ac      	ldr	r4, [r5, #8]
 8007398:	e7eb      	b.n	8007372 <__swsetup_r+0x1e>
 800739a:	4b24      	ldr	r3, [pc, #144]	; (800742c <__swsetup_r+0xd8>)
 800739c:	429c      	cmp	r4, r3
 800739e:	bf08      	it	eq
 80073a0:	68ec      	ldreq	r4, [r5, #12]
 80073a2:	e7e6      	b.n	8007372 <__swsetup_r+0x1e>
 80073a4:	0758      	lsls	r0, r3, #29
 80073a6:	d512      	bpl.n	80073ce <__swsetup_r+0x7a>
 80073a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073aa:	b141      	cbz	r1, 80073be <__swsetup_r+0x6a>
 80073ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073b0:	4299      	cmp	r1, r3
 80073b2:	d002      	beq.n	80073ba <__swsetup_r+0x66>
 80073b4:	4630      	mov	r0, r6
 80073b6:	f7ff fd0b 	bl	8006dd0 <_free_r>
 80073ba:	2300      	movs	r3, #0
 80073bc:	6363      	str	r3, [r4, #52]	; 0x34
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073c4:	81a3      	strh	r3, [r4, #12]
 80073c6:	2300      	movs	r3, #0
 80073c8:	6063      	str	r3, [r4, #4]
 80073ca:	6923      	ldr	r3, [r4, #16]
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	89a3      	ldrh	r3, [r4, #12]
 80073d0:	f043 0308 	orr.w	r3, r3, #8
 80073d4:	81a3      	strh	r3, [r4, #12]
 80073d6:	6923      	ldr	r3, [r4, #16]
 80073d8:	b94b      	cbnz	r3, 80073ee <__swsetup_r+0x9a>
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073e4:	d003      	beq.n	80073ee <__swsetup_r+0x9a>
 80073e6:	4621      	mov	r1, r4
 80073e8:	4630      	mov	r0, r6
 80073ea:	f000 fa07 	bl	80077fc <__smakebuf_r>
 80073ee:	89a0      	ldrh	r0, [r4, #12]
 80073f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073f4:	f010 0301 	ands.w	r3, r0, #1
 80073f8:	d00a      	beq.n	8007410 <__swsetup_r+0xbc>
 80073fa:	2300      	movs	r3, #0
 80073fc:	60a3      	str	r3, [r4, #8]
 80073fe:	6963      	ldr	r3, [r4, #20]
 8007400:	425b      	negs	r3, r3
 8007402:	61a3      	str	r3, [r4, #24]
 8007404:	6923      	ldr	r3, [r4, #16]
 8007406:	b943      	cbnz	r3, 800741a <__swsetup_r+0xc6>
 8007408:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800740c:	d1ba      	bne.n	8007384 <__swsetup_r+0x30>
 800740e:	bd70      	pop	{r4, r5, r6, pc}
 8007410:	0781      	lsls	r1, r0, #30
 8007412:	bf58      	it	pl
 8007414:	6963      	ldrpl	r3, [r4, #20]
 8007416:	60a3      	str	r3, [r4, #8]
 8007418:	e7f4      	b.n	8007404 <__swsetup_r+0xb0>
 800741a:	2000      	movs	r0, #0
 800741c:	e7f7      	b.n	800740e <__swsetup_r+0xba>
 800741e:	bf00      	nop
 8007420:	20000024 	.word	0x20000024
 8007424:	080096ec 	.word	0x080096ec
 8007428:	0800970c 	.word	0x0800970c
 800742c:	080096cc 	.word	0x080096cc

08007430 <abort>:
 8007430:	b508      	push	{r3, lr}
 8007432:	2006      	movs	r0, #6
 8007434:	f000 fa4a 	bl	80078cc <raise>
 8007438:	2001      	movs	r0, #1
 800743a:	f7fb fa25 	bl	8002888 <_exit>
	...

08007440 <__sflush_r>:
 8007440:	898a      	ldrh	r2, [r1, #12]
 8007442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007446:	4605      	mov	r5, r0
 8007448:	0710      	lsls	r0, r2, #28
 800744a:	460c      	mov	r4, r1
 800744c:	d458      	bmi.n	8007500 <__sflush_r+0xc0>
 800744e:	684b      	ldr	r3, [r1, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	dc05      	bgt.n	8007460 <__sflush_r+0x20>
 8007454:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007456:	2b00      	cmp	r3, #0
 8007458:	dc02      	bgt.n	8007460 <__sflush_r+0x20>
 800745a:	2000      	movs	r0, #0
 800745c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007460:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007462:	2e00      	cmp	r6, #0
 8007464:	d0f9      	beq.n	800745a <__sflush_r+0x1a>
 8007466:	2300      	movs	r3, #0
 8007468:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800746c:	682f      	ldr	r7, [r5, #0]
 800746e:	602b      	str	r3, [r5, #0]
 8007470:	d032      	beq.n	80074d8 <__sflush_r+0x98>
 8007472:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	075a      	lsls	r2, r3, #29
 8007478:	d505      	bpl.n	8007486 <__sflush_r+0x46>
 800747a:	6863      	ldr	r3, [r4, #4]
 800747c:	1ac0      	subs	r0, r0, r3
 800747e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007480:	b10b      	cbz	r3, 8007486 <__sflush_r+0x46>
 8007482:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007484:	1ac0      	subs	r0, r0, r3
 8007486:	2300      	movs	r3, #0
 8007488:	4602      	mov	r2, r0
 800748a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800748c:	6a21      	ldr	r1, [r4, #32]
 800748e:	4628      	mov	r0, r5
 8007490:	47b0      	blx	r6
 8007492:	1c43      	adds	r3, r0, #1
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	d106      	bne.n	80074a6 <__sflush_r+0x66>
 8007498:	6829      	ldr	r1, [r5, #0]
 800749a:	291d      	cmp	r1, #29
 800749c:	d82c      	bhi.n	80074f8 <__sflush_r+0xb8>
 800749e:	4a2a      	ldr	r2, [pc, #168]	; (8007548 <__sflush_r+0x108>)
 80074a0:	40ca      	lsrs	r2, r1
 80074a2:	07d6      	lsls	r6, r2, #31
 80074a4:	d528      	bpl.n	80074f8 <__sflush_r+0xb8>
 80074a6:	2200      	movs	r2, #0
 80074a8:	6062      	str	r2, [r4, #4]
 80074aa:	04d9      	lsls	r1, r3, #19
 80074ac:	6922      	ldr	r2, [r4, #16]
 80074ae:	6022      	str	r2, [r4, #0]
 80074b0:	d504      	bpl.n	80074bc <__sflush_r+0x7c>
 80074b2:	1c42      	adds	r2, r0, #1
 80074b4:	d101      	bne.n	80074ba <__sflush_r+0x7a>
 80074b6:	682b      	ldr	r3, [r5, #0]
 80074b8:	b903      	cbnz	r3, 80074bc <__sflush_r+0x7c>
 80074ba:	6560      	str	r0, [r4, #84]	; 0x54
 80074bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074be:	602f      	str	r7, [r5, #0]
 80074c0:	2900      	cmp	r1, #0
 80074c2:	d0ca      	beq.n	800745a <__sflush_r+0x1a>
 80074c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074c8:	4299      	cmp	r1, r3
 80074ca:	d002      	beq.n	80074d2 <__sflush_r+0x92>
 80074cc:	4628      	mov	r0, r5
 80074ce:	f7ff fc7f 	bl	8006dd0 <_free_r>
 80074d2:	2000      	movs	r0, #0
 80074d4:	6360      	str	r0, [r4, #52]	; 0x34
 80074d6:	e7c1      	b.n	800745c <__sflush_r+0x1c>
 80074d8:	6a21      	ldr	r1, [r4, #32]
 80074da:	2301      	movs	r3, #1
 80074dc:	4628      	mov	r0, r5
 80074de:	47b0      	blx	r6
 80074e0:	1c41      	adds	r1, r0, #1
 80074e2:	d1c7      	bne.n	8007474 <__sflush_r+0x34>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d0c4      	beq.n	8007474 <__sflush_r+0x34>
 80074ea:	2b1d      	cmp	r3, #29
 80074ec:	d001      	beq.n	80074f2 <__sflush_r+0xb2>
 80074ee:	2b16      	cmp	r3, #22
 80074f0:	d101      	bne.n	80074f6 <__sflush_r+0xb6>
 80074f2:	602f      	str	r7, [r5, #0]
 80074f4:	e7b1      	b.n	800745a <__sflush_r+0x1a>
 80074f6:	89a3      	ldrh	r3, [r4, #12]
 80074f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074fc:	81a3      	strh	r3, [r4, #12]
 80074fe:	e7ad      	b.n	800745c <__sflush_r+0x1c>
 8007500:	690f      	ldr	r7, [r1, #16]
 8007502:	2f00      	cmp	r7, #0
 8007504:	d0a9      	beq.n	800745a <__sflush_r+0x1a>
 8007506:	0793      	lsls	r3, r2, #30
 8007508:	680e      	ldr	r6, [r1, #0]
 800750a:	bf08      	it	eq
 800750c:	694b      	ldreq	r3, [r1, #20]
 800750e:	600f      	str	r7, [r1, #0]
 8007510:	bf18      	it	ne
 8007512:	2300      	movne	r3, #0
 8007514:	eba6 0807 	sub.w	r8, r6, r7
 8007518:	608b      	str	r3, [r1, #8]
 800751a:	f1b8 0f00 	cmp.w	r8, #0
 800751e:	dd9c      	ble.n	800745a <__sflush_r+0x1a>
 8007520:	6a21      	ldr	r1, [r4, #32]
 8007522:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007524:	4643      	mov	r3, r8
 8007526:	463a      	mov	r2, r7
 8007528:	4628      	mov	r0, r5
 800752a:	47b0      	blx	r6
 800752c:	2800      	cmp	r0, #0
 800752e:	dc06      	bgt.n	800753e <__sflush_r+0xfe>
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007536:	81a3      	strh	r3, [r4, #12]
 8007538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800753c:	e78e      	b.n	800745c <__sflush_r+0x1c>
 800753e:	4407      	add	r7, r0
 8007540:	eba8 0800 	sub.w	r8, r8, r0
 8007544:	e7e9      	b.n	800751a <__sflush_r+0xda>
 8007546:	bf00      	nop
 8007548:	20400001 	.word	0x20400001

0800754c <_fflush_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	690b      	ldr	r3, [r1, #16]
 8007550:	4605      	mov	r5, r0
 8007552:	460c      	mov	r4, r1
 8007554:	b913      	cbnz	r3, 800755c <_fflush_r+0x10>
 8007556:	2500      	movs	r5, #0
 8007558:	4628      	mov	r0, r5
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	b118      	cbz	r0, 8007566 <_fflush_r+0x1a>
 800755e:	6983      	ldr	r3, [r0, #24]
 8007560:	b90b      	cbnz	r3, 8007566 <_fflush_r+0x1a>
 8007562:	f000 f887 	bl	8007674 <__sinit>
 8007566:	4b14      	ldr	r3, [pc, #80]	; (80075b8 <_fflush_r+0x6c>)
 8007568:	429c      	cmp	r4, r3
 800756a:	d11b      	bne.n	80075a4 <_fflush_r+0x58>
 800756c:	686c      	ldr	r4, [r5, #4]
 800756e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0ef      	beq.n	8007556 <_fflush_r+0xa>
 8007576:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007578:	07d0      	lsls	r0, r2, #31
 800757a:	d404      	bmi.n	8007586 <_fflush_r+0x3a>
 800757c:	0599      	lsls	r1, r3, #22
 800757e:	d402      	bmi.n	8007586 <_fflush_r+0x3a>
 8007580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007582:	f000 f915 	bl	80077b0 <__retarget_lock_acquire_recursive>
 8007586:	4628      	mov	r0, r5
 8007588:	4621      	mov	r1, r4
 800758a:	f7ff ff59 	bl	8007440 <__sflush_r>
 800758e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007590:	07da      	lsls	r2, r3, #31
 8007592:	4605      	mov	r5, r0
 8007594:	d4e0      	bmi.n	8007558 <_fflush_r+0xc>
 8007596:	89a3      	ldrh	r3, [r4, #12]
 8007598:	059b      	lsls	r3, r3, #22
 800759a:	d4dd      	bmi.n	8007558 <_fflush_r+0xc>
 800759c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800759e:	f000 f908 	bl	80077b2 <__retarget_lock_release_recursive>
 80075a2:	e7d9      	b.n	8007558 <_fflush_r+0xc>
 80075a4:	4b05      	ldr	r3, [pc, #20]	; (80075bc <_fflush_r+0x70>)
 80075a6:	429c      	cmp	r4, r3
 80075a8:	d101      	bne.n	80075ae <_fflush_r+0x62>
 80075aa:	68ac      	ldr	r4, [r5, #8]
 80075ac:	e7df      	b.n	800756e <_fflush_r+0x22>
 80075ae:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <_fflush_r+0x74>)
 80075b0:	429c      	cmp	r4, r3
 80075b2:	bf08      	it	eq
 80075b4:	68ec      	ldreq	r4, [r5, #12]
 80075b6:	e7da      	b.n	800756e <_fflush_r+0x22>
 80075b8:	080096ec 	.word	0x080096ec
 80075bc:	0800970c 	.word	0x0800970c
 80075c0:	080096cc 	.word	0x080096cc

080075c4 <std>:
 80075c4:	2300      	movs	r3, #0
 80075c6:	b510      	push	{r4, lr}
 80075c8:	4604      	mov	r4, r0
 80075ca:	e9c0 3300 	strd	r3, r3, [r0]
 80075ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075d2:	6083      	str	r3, [r0, #8]
 80075d4:	8181      	strh	r1, [r0, #12]
 80075d6:	6643      	str	r3, [r0, #100]	; 0x64
 80075d8:	81c2      	strh	r2, [r0, #14]
 80075da:	6183      	str	r3, [r0, #24]
 80075dc:	4619      	mov	r1, r3
 80075de:	2208      	movs	r2, #8
 80075e0:	305c      	adds	r0, #92	; 0x5c
 80075e2:	f7fd fd61 	bl	80050a8 <memset>
 80075e6:	4b05      	ldr	r3, [pc, #20]	; (80075fc <std+0x38>)
 80075e8:	6263      	str	r3, [r4, #36]	; 0x24
 80075ea:	4b05      	ldr	r3, [pc, #20]	; (8007600 <std+0x3c>)
 80075ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80075ee:	4b05      	ldr	r3, [pc, #20]	; (8007604 <std+0x40>)
 80075f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075f2:	4b05      	ldr	r3, [pc, #20]	; (8007608 <std+0x44>)
 80075f4:	6224      	str	r4, [r4, #32]
 80075f6:	6323      	str	r3, [r4, #48]	; 0x30
 80075f8:	bd10      	pop	{r4, pc}
 80075fa:	bf00      	nop
 80075fc:	08007905 	.word	0x08007905
 8007600:	08007927 	.word	0x08007927
 8007604:	0800795f 	.word	0x0800795f
 8007608:	08007983 	.word	0x08007983

0800760c <_cleanup_r>:
 800760c:	4901      	ldr	r1, [pc, #4]	; (8007614 <_cleanup_r+0x8>)
 800760e:	f000 b8af 	b.w	8007770 <_fwalk_reent>
 8007612:	bf00      	nop
 8007614:	0800754d 	.word	0x0800754d

08007618 <__sfmoreglue>:
 8007618:	b570      	push	{r4, r5, r6, lr}
 800761a:	1e4a      	subs	r2, r1, #1
 800761c:	2568      	movs	r5, #104	; 0x68
 800761e:	4355      	muls	r5, r2
 8007620:	460e      	mov	r6, r1
 8007622:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007626:	f7ff fc23 	bl	8006e70 <_malloc_r>
 800762a:	4604      	mov	r4, r0
 800762c:	b140      	cbz	r0, 8007640 <__sfmoreglue+0x28>
 800762e:	2100      	movs	r1, #0
 8007630:	e9c0 1600 	strd	r1, r6, [r0]
 8007634:	300c      	adds	r0, #12
 8007636:	60a0      	str	r0, [r4, #8]
 8007638:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800763c:	f7fd fd34 	bl	80050a8 <memset>
 8007640:	4620      	mov	r0, r4
 8007642:	bd70      	pop	{r4, r5, r6, pc}

08007644 <__sfp_lock_acquire>:
 8007644:	4801      	ldr	r0, [pc, #4]	; (800764c <__sfp_lock_acquire+0x8>)
 8007646:	f000 b8b3 	b.w	80077b0 <__retarget_lock_acquire_recursive>
 800764a:	bf00      	nop
 800764c:	200044f0 	.word	0x200044f0

08007650 <__sfp_lock_release>:
 8007650:	4801      	ldr	r0, [pc, #4]	; (8007658 <__sfp_lock_release+0x8>)
 8007652:	f000 b8ae 	b.w	80077b2 <__retarget_lock_release_recursive>
 8007656:	bf00      	nop
 8007658:	200044f0 	.word	0x200044f0

0800765c <__sinit_lock_acquire>:
 800765c:	4801      	ldr	r0, [pc, #4]	; (8007664 <__sinit_lock_acquire+0x8>)
 800765e:	f000 b8a7 	b.w	80077b0 <__retarget_lock_acquire_recursive>
 8007662:	bf00      	nop
 8007664:	200044eb 	.word	0x200044eb

08007668 <__sinit_lock_release>:
 8007668:	4801      	ldr	r0, [pc, #4]	; (8007670 <__sinit_lock_release+0x8>)
 800766a:	f000 b8a2 	b.w	80077b2 <__retarget_lock_release_recursive>
 800766e:	bf00      	nop
 8007670:	200044eb 	.word	0x200044eb

08007674 <__sinit>:
 8007674:	b510      	push	{r4, lr}
 8007676:	4604      	mov	r4, r0
 8007678:	f7ff fff0 	bl	800765c <__sinit_lock_acquire>
 800767c:	69a3      	ldr	r3, [r4, #24]
 800767e:	b11b      	cbz	r3, 8007688 <__sinit+0x14>
 8007680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007684:	f7ff bff0 	b.w	8007668 <__sinit_lock_release>
 8007688:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800768c:	6523      	str	r3, [r4, #80]	; 0x50
 800768e:	4b13      	ldr	r3, [pc, #76]	; (80076dc <__sinit+0x68>)
 8007690:	4a13      	ldr	r2, [pc, #76]	; (80076e0 <__sinit+0x6c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	62a2      	str	r2, [r4, #40]	; 0x28
 8007696:	42a3      	cmp	r3, r4
 8007698:	bf04      	itt	eq
 800769a:	2301      	moveq	r3, #1
 800769c:	61a3      	streq	r3, [r4, #24]
 800769e:	4620      	mov	r0, r4
 80076a0:	f000 f820 	bl	80076e4 <__sfp>
 80076a4:	6060      	str	r0, [r4, #4]
 80076a6:	4620      	mov	r0, r4
 80076a8:	f000 f81c 	bl	80076e4 <__sfp>
 80076ac:	60a0      	str	r0, [r4, #8]
 80076ae:	4620      	mov	r0, r4
 80076b0:	f000 f818 	bl	80076e4 <__sfp>
 80076b4:	2200      	movs	r2, #0
 80076b6:	60e0      	str	r0, [r4, #12]
 80076b8:	2104      	movs	r1, #4
 80076ba:	6860      	ldr	r0, [r4, #4]
 80076bc:	f7ff ff82 	bl	80075c4 <std>
 80076c0:	68a0      	ldr	r0, [r4, #8]
 80076c2:	2201      	movs	r2, #1
 80076c4:	2109      	movs	r1, #9
 80076c6:	f7ff ff7d 	bl	80075c4 <std>
 80076ca:	68e0      	ldr	r0, [r4, #12]
 80076cc:	2202      	movs	r2, #2
 80076ce:	2112      	movs	r1, #18
 80076d0:	f7ff ff78 	bl	80075c4 <std>
 80076d4:	2301      	movs	r3, #1
 80076d6:	61a3      	str	r3, [r4, #24]
 80076d8:	e7d2      	b.n	8007680 <__sinit+0xc>
 80076da:	bf00      	nop
 80076dc:	08009348 	.word	0x08009348
 80076e0:	0800760d 	.word	0x0800760d

080076e4 <__sfp>:
 80076e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e6:	4607      	mov	r7, r0
 80076e8:	f7ff ffac 	bl	8007644 <__sfp_lock_acquire>
 80076ec:	4b1e      	ldr	r3, [pc, #120]	; (8007768 <__sfp+0x84>)
 80076ee:	681e      	ldr	r6, [r3, #0]
 80076f0:	69b3      	ldr	r3, [r6, #24]
 80076f2:	b913      	cbnz	r3, 80076fa <__sfp+0x16>
 80076f4:	4630      	mov	r0, r6
 80076f6:	f7ff ffbd 	bl	8007674 <__sinit>
 80076fa:	3648      	adds	r6, #72	; 0x48
 80076fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007700:	3b01      	subs	r3, #1
 8007702:	d503      	bpl.n	800770c <__sfp+0x28>
 8007704:	6833      	ldr	r3, [r6, #0]
 8007706:	b30b      	cbz	r3, 800774c <__sfp+0x68>
 8007708:	6836      	ldr	r6, [r6, #0]
 800770a:	e7f7      	b.n	80076fc <__sfp+0x18>
 800770c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007710:	b9d5      	cbnz	r5, 8007748 <__sfp+0x64>
 8007712:	4b16      	ldr	r3, [pc, #88]	; (800776c <__sfp+0x88>)
 8007714:	60e3      	str	r3, [r4, #12]
 8007716:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800771a:	6665      	str	r5, [r4, #100]	; 0x64
 800771c:	f000 f847 	bl	80077ae <__retarget_lock_init_recursive>
 8007720:	f7ff ff96 	bl	8007650 <__sfp_lock_release>
 8007724:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007728:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800772c:	6025      	str	r5, [r4, #0]
 800772e:	61a5      	str	r5, [r4, #24]
 8007730:	2208      	movs	r2, #8
 8007732:	4629      	mov	r1, r5
 8007734:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007738:	f7fd fcb6 	bl	80050a8 <memset>
 800773c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007740:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007744:	4620      	mov	r0, r4
 8007746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007748:	3468      	adds	r4, #104	; 0x68
 800774a:	e7d9      	b.n	8007700 <__sfp+0x1c>
 800774c:	2104      	movs	r1, #4
 800774e:	4638      	mov	r0, r7
 8007750:	f7ff ff62 	bl	8007618 <__sfmoreglue>
 8007754:	4604      	mov	r4, r0
 8007756:	6030      	str	r0, [r6, #0]
 8007758:	2800      	cmp	r0, #0
 800775a:	d1d5      	bne.n	8007708 <__sfp+0x24>
 800775c:	f7ff ff78 	bl	8007650 <__sfp_lock_release>
 8007760:	230c      	movs	r3, #12
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	e7ee      	b.n	8007744 <__sfp+0x60>
 8007766:	bf00      	nop
 8007768:	08009348 	.word	0x08009348
 800776c:	ffff0001 	.word	0xffff0001

08007770 <_fwalk_reent>:
 8007770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007774:	4606      	mov	r6, r0
 8007776:	4688      	mov	r8, r1
 8007778:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800777c:	2700      	movs	r7, #0
 800777e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007782:	f1b9 0901 	subs.w	r9, r9, #1
 8007786:	d505      	bpl.n	8007794 <_fwalk_reent+0x24>
 8007788:	6824      	ldr	r4, [r4, #0]
 800778a:	2c00      	cmp	r4, #0
 800778c:	d1f7      	bne.n	800777e <_fwalk_reent+0xe>
 800778e:	4638      	mov	r0, r7
 8007790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007794:	89ab      	ldrh	r3, [r5, #12]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d907      	bls.n	80077aa <_fwalk_reent+0x3a>
 800779a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800779e:	3301      	adds	r3, #1
 80077a0:	d003      	beq.n	80077aa <_fwalk_reent+0x3a>
 80077a2:	4629      	mov	r1, r5
 80077a4:	4630      	mov	r0, r6
 80077a6:	47c0      	blx	r8
 80077a8:	4307      	orrs	r7, r0
 80077aa:	3568      	adds	r5, #104	; 0x68
 80077ac:	e7e9      	b.n	8007782 <_fwalk_reent+0x12>

080077ae <__retarget_lock_init_recursive>:
 80077ae:	4770      	bx	lr

080077b0 <__retarget_lock_acquire_recursive>:
 80077b0:	4770      	bx	lr

080077b2 <__retarget_lock_release_recursive>:
 80077b2:	4770      	bx	lr

080077b4 <__swhatbuf_r>:
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	460e      	mov	r6, r1
 80077b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077bc:	2900      	cmp	r1, #0
 80077be:	b096      	sub	sp, #88	; 0x58
 80077c0:	4614      	mov	r4, r2
 80077c2:	461d      	mov	r5, r3
 80077c4:	da07      	bge.n	80077d6 <__swhatbuf_r+0x22>
 80077c6:	2300      	movs	r3, #0
 80077c8:	602b      	str	r3, [r5, #0]
 80077ca:	89b3      	ldrh	r3, [r6, #12]
 80077cc:	061a      	lsls	r2, r3, #24
 80077ce:	d410      	bmi.n	80077f2 <__swhatbuf_r+0x3e>
 80077d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077d4:	e00e      	b.n	80077f4 <__swhatbuf_r+0x40>
 80077d6:	466a      	mov	r2, sp
 80077d8:	f000 f8fa 	bl	80079d0 <_fstat_r>
 80077dc:	2800      	cmp	r0, #0
 80077de:	dbf2      	blt.n	80077c6 <__swhatbuf_r+0x12>
 80077e0:	9a01      	ldr	r2, [sp, #4]
 80077e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077ea:	425a      	negs	r2, r3
 80077ec:	415a      	adcs	r2, r3
 80077ee:	602a      	str	r2, [r5, #0]
 80077f0:	e7ee      	b.n	80077d0 <__swhatbuf_r+0x1c>
 80077f2:	2340      	movs	r3, #64	; 0x40
 80077f4:	2000      	movs	r0, #0
 80077f6:	6023      	str	r3, [r4, #0]
 80077f8:	b016      	add	sp, #88	; 0x58
 80077fa:	bd70      	pop	{r4, r5, r6, pc}

080077fc <__smakebuf_r>:
 80077fc:	898b      	ldrh	r3, [r1, #12]
 80077fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007800:	079d      	lsls	r5, r3, #30
 8007802:	4606      	mov	r6, r0
 8007804:	460c      	mov	r4, r1
 8007806:	d507      	bpl.n	8007818 <__smakebuf_r+0x1c>
 8007808:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	6123      	str	r3, [r4, #16]
 8007810:	2301      	movs	r3, #1
 8007812:	6163      	str	r3, [r4, #20]
 8007814:	b002      	add	sp, #8
 8007816:	bd70      	pop	{r4, r5, r6, pc}
 8007818:	ab01      	add	r3, sp, #4
 800781a:	466a      	mov	r2, sp
 800781c:	f7ff ffca 	bl	80077b4 <__swhatbuf_r>
 8007820:	9900      	ldr	r1, [sp, #0]
 8007822:	4605      	mov	r5, r0
 8007824:	4630      	mov	r0, r6
 8007826:	f7ff fb23 	bl	8006e70 <_malloc_r>
 800782a:	b948      	cbnz	r0, 8007840 <__smakebuf_r+0x44>
 800782c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007830:	059a      	lsls	r2, r3, #22
 8007832:	d4ef      	bmi.n	8007814 <__smakebuf_r+0x18>
 8007834:	f023 0303 	bic.w	r3, r3, #3
 8007838:	f043 0302 	orr.w	r3, r3, #2
 800783c:	81a3      	strh	r3, [r4, #12]
 800783e:	e7e3      	b.n	8007808 <__smakebuf_r+0xc>
 8007840:	4b0d      	ldr	r3, [pc, #52]	; (8007878 <__smakebuf_r+0x7c>)
 8007842:	62b3      	str	r3, [r6, #40]	; 0x28
 8007844:	89a3      	ldrh	r3, [r4, #12]
 8007846:	6020      	str	r0, [r4, #0]
 8007848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800784c:	81a3      	strh	r3, [r4, #12]
 800784e:	9b00      	ldr	r3, [sp, #0]
 8007850:	6163      	str	r3, [r4, #20]
 8007852:	9b01      	ldr	r3, [sp, #4]
 8007854:	6120      	str	r0, [r4, #16]
 8007856:	b15b      	cbz	r3, 8007870 <__smakebuf_r+0x74>
 8007858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800785c:	4630      	mov	r0, r6
 800785e:	f000 f8c9 	bl	80079f4 <_isatty_r>
 8007862:	b128      	cbz	r0, 8007870 <__smakebuf_r+0x74>
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	f023 0303 	bic.w	r3, r3, #3
 800786a:	f043 0301 	orr.w	r3, r3, #1
 800786e:	81a3      	strh	r3, [r4, #12]
 8007870:	89a0      	ldrh	r0, [r4, #12]
 8007872:	4305      	orrs	r5, r0
 8007874:	81a5      	strh	r5, [r4, #12]
 8007876:	e7cd      	b.n	8007814 <__smakebuf_r+0x18>
 8007878:	0800760d 	.word	0x0800760d

0800787c <_raise_r>:
 800787c:	291f      	cmp	r1, #31
 800787e:	b538      	push	{r3, r4, r5, lr}
 8007880:	4604      	mov	r4, r0
 8007882:	460d      	mov	r5, r1
 8007884:	d904      	bls.n	8007890 <_raise_r+0x14>
 8007886:	2316      	movs	r3, #22
 8007888:	6003      	str	r3, [r0, #0]
 800788a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800788e:	bd38      	pop	{r3, r4, r5, pc}
 8007890:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007892:	b112      	cbz	r2, 800789a <_raise_r+0x1e>
 8007894:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007898:	b94b      	cbnz	r3, 80078ae <_raise_r+0x32>
 800789a:	4620      	mov	r0, r4
 800789c:	f000 f830 	bl	8007900 <_getpid_r>
 80078a0:	462a      	mov	r2, r5
 80078a2:	4601      	mov	r1, r0
 80078a4:	4620      	mov	r0, r4
 80078a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078aa:	f000 b817 	b.w	80078dc <_kill_r>
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d00a      	beq.n	80078c8 <_raise_r+0x4c>
 80078b2:	1c59      	adds	r1, r3, #1
 80078b4:	d103      	bne.n	80078be <_raise_r+0x42>
 80078b6:	2316      	movs	r3, #22
 80078b8:	6003      	str	r3, [r0, #0]
 80078ba:	2001      	movs	r0, #1
 80078bc:	e7e7      	b.n	800788e <_raise_r+0x12>
 80078be:	2400      	movs	r4, #0
 80078c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078c4:	4628      	mov	r0, r5
 80078c6:	4798      	blx	r3
 80078c8:	2000      	movs	r0, #0
 80078ca:	e7e0      	b.n	800788e <_raise_r+0x12>

080078cc <raise>:
 80078cc:	4b02      	ldr	r3, [pc, #8]	; (80078d8 <raise+0xc>)
 80078ce:	4601      	mov	r1, r0
 80078d0:	6818      	ldr	r0, [r3, #0]
 80078d2:	f7ff bfd3 	b.w	800787c <_raise_r>
 80078d6:	bf00      	nop
 80078d8:	20000024 	.word	0x20000024

080078dc <_kill_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	4d07      	ldr	r5, [pc, #28]	; (80078fc <_kill_r+0x20>)
 80078e0:	2300      	movs	r3, #0
 80078e2:	4604      	mov	r4, r0
 80078e4:	4608      	mov	r0, r1
 80078e6:	4611      	mov	r1, r2
 80078e8:	602b      	str	r3, [r5, #0]
 80078ea:	f7fa ffc5 	bl	8002878 <_kill>
 80078ee:	1c43      	adds	r3, r0, #1
 80078f0:	d102      	bne.n	80078f8 <_kill_r+0x1c>
 80078f2:	682b      	ldr	r3, [r5, #0]
 80078f4:	b103      	cbz	r3, 80078f8 <_kill_r+0x1c>
 80078f6:	6023      	str	r3, [r4, #0]
 80078f8:	bd38      	pop	{r3, r4, r5, pc}
 80078fa:	bf00      	nop
 80078fc:	200044e4 	.word	0x200044e4

08007900 <_getpid_r>:
 8007900:	f7fa bfb8 	b.w	8002874 <_getpid>

08007904 <__sread>:
 8007904:	b510      	push	{r4, lr}
 8007906:	460c      	mov	r4, r1
 8007908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800790c:	f000 f894 	bl	8007a38 <_read_r>
 8007910:	2800      	cmp	r0, #0
 8007912:	bfab      	itete	ge
 8007914:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007916:	89a3      	ldrhlt	r3, [r4, #12]
 8007918:	181b      	addge	r3, r3, r0
 800791a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800791e:	bfac      	ite	ge
 8007920:	6563      	strge	r3, [r4, #84]	; 0x54
 8007922:	81a3      	strhlt	r3, [r4, #12]
 8007924:	bd10      	pop	{r4, pc}

08007926 <__swrite>:
 8007926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800792a:	461f      	mov	r7, r3
 800792c:	898b      	ldrh	r3, [r1, #12]
 800792e:	05db      	lsls	r3, r3, #23
 8007930:	4605      	mov	r5, r0
 8007932:	460c      	mov	r4, r1
 8007934:	4616      	mov	r6, r2
 8007936:	d505      	bpl.n	8007944 <__swrite+0x1e>
 8007938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800793c:	2302      	movs	r3, #2
 800793e:	2200      	movs	r2, #0
 8007940:	f000 f868 	bl	8007a14 <_lseek_r>
 8007944:	89a3      	ldrh	r3, [r4, #12]
 8007946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800794a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800794e:	81a3      	strh	r3, [r4, #12]
 8007950:	4632      	mov	r2, r6
 8007952:	463b      	mov	r3, r7
 8007954:	4628      	mov	r0, r5
 8007956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800795a:	f000 b817 	b.w	800798c <_write_r>

0800795e <__sseek>:
 800795e:	b510      	push	{r4, lr}
 8007960:	460c      	mov	r4, r1
 8007962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007966:	f000 f855 	bl	8007a14 <_lseek_r>
 800796a:	1c43      	adds	r3, r0, #1
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	bf15      	itete	ne
 8007970:	6560      	strne	r0, [r4, #84]	; 0x54
 8007972:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007976:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800797a:	81a3      	strheq	r3, [r4, #12]
 800797c:	bf18      	it	ne
 800797e:	81a3      	strhne	r3, [r4, #12]
 8007980:	bd10      	pop	{r4, pc}

08007982 <__sclose>:
 8007982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007986:	f000 b813 	b.w	80079b0 <_close_r>
	...

0800798c <_write_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4d07      	ldr	r5, [pc, #28]	; (80079ac <_write_r+0x20>)
 8007990:	4604      	mov	r4, r0
 8007992:	4608      	mov	r0, r1
 8007994:	4611      	mov	r1, r2
 8007996:	2200      	movs	r2, #0
 8007998:	602a      	str	r2, [r5, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	f7fa ff88 	bl	80028b0 <_write>
 80079a0:	1c43      	adds	r3, r0, #1
 80079a2:	d102      	bne.n	80079aa <_write_r+0x1e>
 80079a4:	682b      	ldr	r3, [r5, #0]
 80079a6:	b103      	cbz	r3, 80079aa <_write_r+0x1e>
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	bd38      	pop	{r3, r4, r5, pc}
 80079ac:	200044e4 	.word	0x200044e4

080079b0 <_close_r>:
 80079b0:	b538      	push	{r3, r4, r5, lr}
 80079b2:	4d06      	ldr	r5, [pc, #24]	; (80079cc <_close_r+0x1c>)
 80079b4:	2300      	movs	r3, #0
 80079b6:	4604      	mov	r4, r0
 80079b8:	4608      	mov	r0, r1
 80079ba:	602b      	str	r3, [r5, #0]
 80079bc:	f7fa ff86 	bl	80028cc <_close>
 80079c0:	1c43      	adds	r3, r0, #1
 80079c2:	d102      	bne.n	80079ca <_close_r+0x1a>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	b103      	cbz	r3, 80079ca <_close_r+0x1a>
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	bd38      	pop	{r3, r4, r5, pc}
 80079cc:	200044e4 	.word	0x200044e4

080079d0 <_fstat_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4d07      	ldr	r5, [pc, #28]	; (80079f0 <_fstat_r+0x20>)
 80079d4:	2300      	movs	r3, #0
 80079d6:	4604      	mov	r4, r0
 80079d8:	4608      	mov	r0, r1
 80079da:	4611      	mov	r1, r2
 80079dc:	602b      	str	r3, [r5, #0]
 80079de:	f7fa ff79 	bl	80028d4 <_fstat>
 80079e2:	1c43      	adds	r3, r0, #1
 80079e4:	d102      	bne.n	80079ec <_fstat_r+0x1c>
 80079e6:	682b      	ldr	r3, [r5, #0]
 80079e8:	b103      	cbz	r3, 80079ec <_fstat_r+0x1c>
 80079ea:	6023      	str	r3, [r4, #0]
 80079ec:	bd38      	pop	{r3, r4, r5, pc}
 80079ee:	bf00      	nop
 80079f0:	200044e4 	.word	0x200044e4

080079f4 <_isatty_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	4d06      	ldr	r5, [pc, #24]	; (8007a10 <_isatty_r+0x1c>)
 80079f8:	2300      	movs	r3, #0
 80079fa:	4604      	mov	r4, r0
 80079fc:	4608      	mov	r0, r1
 80079fe:	602b      	str	r3, [r5, #0]
 8007a00:	f7fa ff6e 	bl	80028e0 <_isatty>
 8007a04:	1c43      	adds	r3, r0, #1
 8007a06:	d102      	bne.n	8007a0e <_isatty_r+0x1a>
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	b103      	cbz	r3, 8007a0e <_isatty_r+0x1a>
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	bd38      	pop	{r3, r4, r5, pc}
 8007a10:	200044e4 	.word	0x200044e4

08007a14 <_lseek_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	4d07      	ldr	r5, [pc, #28]	; (8007a34 <_lseek_r+0x20>)
 8007a18:	4604      	mov	r4, r0
 8007a1a:	4608      	mov	r0, r1
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	2200      	movs	r2, #0
 8007a20:	602a      	str	r2, [r5, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	f7fa ff5e 	bl	80028e4 <_lseek>
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	d102      	bne.n	8007a32 <_lseek_r+0x1e>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	b103      	cbz	r3, 8007a32 <_lseek_r+0x1e>
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	200044e4 	.word	0x200044e4

08007a38 <_read_r>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	4d07      	ldr	r5, [pc, #28]	; (8007a58 <_read_r+0x20>)
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	4608      	mov	r0, r1
 8007a40:	4611      	mov	r1, r2
 8007a42:	2200      	movs	r2, #0
 8007a44:	602a      	str	r2, [r5, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	f7fa ff24 	bl	8002894 <_read>
 8007a4c:	1c43      	adds	r3, r0, #1
 8007a4e:	d102      	bne.n	8007a56 <_read_r+0x1e>
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	b103      	cbz	r3, 8007a56 <_read_r+0x1e>
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	bd38      	pop	{r3, r4, r5, pc}
 8007a58:	200044e4 	.word	0x200044e4
 8007a5c:	00000000 	.word	0x00000000

08007a60 <cos>:
 8007a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a62:	ec53 2b10 	vmov	r2, r3, d0
 8007a66:	4824      	ldr	r0, [pc, #144]	; (8007af8 <cos+0x98>)
 8007a68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a6c:	4281      	cmp	r1, r0
 8007a6e:	dc06      	bgt.n	8007a7e <cos+0x1e>
 8007a70:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007af0 <cos+0x90>
 8007a74:	f000 fcc0 	bl	80083f8 <__kernel_cos>
 8007a78:	ec51 0b10 	vmov	r0, r1, d0
 8007a7c:	e007      	b.n	8007a8e <cos+0x2e>
 8007a7e:	481f      	ldr	r0, [pc, #124]	; (8007afc <cos+0x9c>)
 8007a80:	4281      	cmp	r1, r0
 8007a82:	dd09      	ble.n	8007a98 <cos+0x38>
 8007a84:	ee10 0a10 	vmov	r0, s0
 8007a88:	4619      	mov	r1, r3
 8007a8a:	f7f8 fc05 	bl	8000298 <__aeabi_dsub>
 8007a8e:	ec41 0b10 	vmov	d0, r0, r1
 8007a92:	b005      	add	sp, #20
 8007a94:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a98:	4668      	mov	r0, sp
 8007a9a:	f000 faa1 	bl	8007fe0 <__ieee754_rem_pio2>
 8007a9e:	f000 0003 	and.w	r0, r0, #3
 8007aa2:	2801      	cmp	r0, #1
 8007aa4:	d007      	beq.n	8007ab6 <cos+0x56>
 8007aa6:	2802      	cmp	r0, #2
 8007aa8:	d012      	beq.n	8007ad0 <cos+0x70>
 8007aaa:	b9c0      	cbnz	r0, 8007ade <cos+0x7e>
 8007aac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ab0:	ed9d 0b00 	vldr	d0, [sp]
 8007ab4:	e7de      	b.n	8007a74 <cos+0x14>
 8007ab6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007aba:	ed9d 0b00 	vldr	d0, [sp]
 8007abe:	f001 f8a3 	bl	8008c08 <__kernel_sin>
 8007ac2:	ec53 2b10 	vmov	r2, r3, d0
 8007ac6:	ee10 0a10 	vmov	r0, s0
 8007aca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007ace:	e7de      	b.n	8007a8e <cos+0x2e>
 8007ad0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ad4:	ed9d 0b00 	vldr	d0, [sp]
 8007ad8:	f000 fc8e 	bl	80083f8 <__kernel_cos>
 8007adc:	e7f1      	b.n	8007ac2 <cos+0x62>
 8007ade:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ae2:	ed9d 0b00 	vldr	d0, [sp]
 8007ae6:	2001      	movs	r0, #1
 8007ae8:	f001 f88e 	bl	8008c08 <__kernel_sin>
 8007aec:	e7c4      	b.n	8007a78 <cos+0x18>
 8007aee:	bf00      	nop
	...
 8007af8:	3fe921fb 	.word	0x3fe921fb
 8007afc:	7fefffff 	.word	0x7fefffff

08007b00 <sin>:
 8007b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b02:	ec53 2b10 	vmov	r2, r3, d0
 8007b06:	4826      	ldr	r0, [pc, #152]	; (8007ba0 <sin+0xa0>)
 8007b08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b0c:	4281      	cmp	r1, r0
 8007b0e:	dc07      	bgt.n	8007b20 <sin+0x20>
 8007b10:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007b98 <sin+0x98>
 8007b14:	2000      	movs	r0, #0
 8007b16:	f001 f877 	bl	8008c08 <__kernel_sin>
 8007b1a:	ec51 0b10 	vmov	r0, r1, d0
 8007b1e:	e007      	b.n	8007b30 <sin+0x30>
 8007b20:	4820      	ldr	r0, [pc, #128]	; (8007ba4 <sin+0xa4>)
 8007b22:	4281      	cmp	r1, r0
 8007b24:	dd09      	ble.n	8007b3a <sin+0x3a>
 8007b26:	ee10 0a10 	vmov	r0, s0
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	f7f8 fbb4 	bl	8000298 <__aeabi_dsub>
 8007b30:	ec41 0b10 	vmov	d0, r0, r1
 8007b34:	b005      	add	sp, #20
 8007b36:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b3a:	4668      	mov	r0, sp
 8007b3c:	f000 fa50 	bl	8007fe0 <__ieee754_rem_pio2>
 8007b40:	f000 0003 	and.w	r0, r0, #3
 8007b44:	2801      	cmp	r0, #1
 8007b46:	d008      	beq.n	8007b5a <sin+0x5a>
 8007b48:	2802      	cmp	r0, #2
 8007b4a:	d00d      	beq.n	8007b68 <sin+0x68>
 8007b4c:	b9d0      	cbnz	r0, 8007b84 <sin+0x84>
 8007b4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b52:	ed9d 0b00 	vldr	d0, [sp]
 8007b56:	2001      	movs	r0, #1
 8007b58:	e7dd      	b.n	8007b16 <sin+0x16>
 8007b5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b5e:	ed9d 0b00 	vldr	d0, [sp]
 8007b62:	f000 fc49 	bl	80083f8 <__kernel_cos>
 8007b66:	e7d8      	b.n	8007b1a <sin+0x1a>
 8007b68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b6c:	ed9d 0b00 	vldr	d0, [sp]
 8007b70:	2001      	movs	r0, #1
 8007b72:	f001 f849 	bl	8008c08 <__kernel_sin>
 8007b76:	ec53 2b10 	vmov	r2, r3, d0
 8007b7a:	ee10 0a10 	vmov	r0, s0
 8007b7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007b82:	e7d5      	b.n	8007b30 <sin+0x30>
 8007b84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b88:	ed9d 0b00 	vldr	d0, [sp]
 8007b8c:	f000 fc34 	bl	80083f8 <__kernel_cos>
 8007b90:	e7f1      	b.n	8007b76 <sin+0x76>
 8007b92:	bf00      	nop
 8007b94:	f3af 8000 	nop.w
	...
 8007ba0:	3fe921fb 	.word	0x3fe921fb
 8007ba4:	7fefffff 	.word	0x7fefffff

08007ba8 <atan2>:
 8007ba8:	f000 b83e 	b.w	8007c28 <__ieee754_atan2>

08007bac <fmod>:
 8007bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bae:	ed2d 8b02 	vpush	{d8}
 8007bb2:	ec57 6b10 	vmov	r6, r7, d0
 8007bb6:	ec55 4b11 	vmov	r4, r5, d1
 8007bba:	f000 f8ff 	bl	8007dbc <__ieee754_fmod>
 8007bbe:	4b18      	ldr	r3, [pc, #96]	; (8007c20 <fmod+0x74>)
 8007bc0:	eeb0 8a40 	vmov.f32	s16, s0
 8007bc4:	eef0 8a60 	vmov.f32	s17, s1
 8007bc8:	f993 3000 	ldrsb.w	r3, [r3]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	d020      	beq.n	8007c12 <fmod+0x66>
 8007bd0:	4622      	mov	r2, r4
 8007bd2:	462b      	mov	r3, r5
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	4629      	mov	r1, r5
 8007bd8:	f7f8 ffb0 	bl	8000b3c <__aeabi_dcmpun>
 8007bdc:	b9c8      	cbnz	r0, 8007c12 <fmod+0x66>
 8007bde:	4632      	mov	r2, r6
 8007be0:	463b      	mov	r3, r7
 8007be2:	4630      	mov	r0, r6
 8007be4:	4639      	mov	r1, r7
 8007be6:	f7f8 ffa9 	bl	8000b3c <__aeabi_dcmpun>
 8007bea:	b990      	cbnz	r0, 8007c12 <fmod+0x66>
 8007bec:	2200      	movs	r2, #0
 8007bee:	2300      	movs	r3, #0
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	f7f8 ff70 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bf8:	b158      	cbz	r0, 8007c12 <fmod+0x66>
 8007bfa:	f7fd fa2b 	bl	8005054 <__errno>
 8007bfe:	2321      	movs	r3, #33	; 0x21
 8007c00:	6003      	str	r3, [r0, #0]
 8007c02:	2200      	movs	r2, #0
 8007c04:	2300      	movs	r3, #0
 8007c06:	4610      	mov	r0, r2
 8007c08:	4619      	mov	r1, r3
 8007c0a:	f7f8 fe27 	bl	800085c <__aeabi_ddiv>
 8007c0e:	ec41 0b18 	vmov	d8, r0, r1
 8007c12:	eeb0 0a48 	vmov.f32	s0, s16
 8007c16:	eef0 0a68 	vmov.f32	s1, s17
 8007c1a:	ecbd 8b02 	vpop	{d8}
 8007c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c20:	200001f4 	.word	0x200001f4
 8007c24:	00000000 	.word	0x00000000

08007c28 <__ieee754_atan2>:
 8007c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c2c:	ec57 6b11 	vmov	r6, r7, d1
 8007c30:	4273      	negs	r3, r6
 8007c32:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007db8 <__ieee754_atan2+0x190>
 8007c36:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8007c3a:	4333      	orrs	r3, r6
 8007c3c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007c40:	4573      	cmp	r3, lr
 8007c42:	ec51 0b10 	vmov	r0, r1, d0
 8007c46:	ee11 8a10 	vmov	r8, s2
 8007c4a:	d80a      	bhi.n	8007c62 <__ieee754_atan2+0x3a>
 8007c4c:	4244      	negs	r4, r0
 8007c4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007c52:	4304      	orrs	r4, r0
 8007c54:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007c58:	4574      	cmp	r4, lr
 8007c5a:	ee10 9a10 	vmov	r9, s0
 8007c5e:	468c      	mov	ip, r1
 8007c60:	d907      	bls.n	8007c72 <__ieee754_atan2+0x4a>
 8007c62:	4632      	mov	r2, r6
 8007c64:	463b      	mov	r3, r7
 8007c66:	f7f8 fb19 	bl	800029c <__adddf3>
 8007c6a:	ec41 0b10 	vmov	d0, r0, r1
 8007c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c72:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007c76:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007c7a:	4334      	orrs	r4, r6
 8007c7c:	d103      	bne.n	8007c86 <__ieee754_atan2+0x5e>
 8007c7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c82:	f001 b881 	b.w	8008d88 <atan>
 8007c86:	17bc      	asrs	r4, r7, #30
 8007c88:	f004 0402 	and.w	r4, r4, #2
 8007c8c:	ea53 0909 	orrs.w	r9, r3, r9
 8007c90:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007c94:	d107      	bne.n	8007ca6 <__ieee754_atan2+0x7e>
 8007c96:	2c02      	cmp	r4, #2
 8007c98:	d060      	beq.n	8007d5c <__ieee754_atan2+0x134>
 8007c9a:	2c03      	cmp	r4, #3
 8007c9c:	d1e5      	bne.n	8007c6a <__ieee754_atan2+0x42>
 8007c9e:	a142      	add	r1, pc, #264	; (adr r1, 8007da8 <__ieee754_atan2+0x180>)
 8007ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ca4:	e7e1      	b.n	8007c6a <__ieee754_atan2+0x42>
 8007ca6:	ea52 0808 	orrs.w	r8, r2, r8
 8007caa:	d106      	bne.n	8007cba <__ieee754_atan2+0x92>
 8007cac:	f1bc 0f00 	cmp.w	ip, #0
 8007cb0:	da5f      	bge.n	8007d72 <__ieee754_atan2+0x14a>
 8007cb2:	a13f      	add	r1, pc, #252	; (adr r1, 8007db0 <__ieee754_atan2+0x188>)
 8007cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cb8:	e7d7      	b.n	8007c6a <__ieee754_atan2+0x42>
 8007cba:	4572      	cmp	r2, lr
 8007cbc:	d10f      	bne.n	8007cde <__ieee754_atan2+0xb6>
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007cc4:	d107      	bne.n	8007cd6 <__ieee754_atan2+0xae>
 8007cc6:	2c02      	cmp	r4, #2
 8007cc8:	d84c      	bhi.n	8007d64 <__ieee754_atan2+0x13c>
 8007cca:	4b35      	ldr	r3, [pc, #212]	; (8007da0 <__ieee754_atan2+0x178>)
 8007ccc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007cd0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007cd4:	e7c9      	b.n	8007c6a <__ieee754_atan2+0x42>
 8007cd6:	2c02      	cmp	r4, #2
 8007cd8:	d848      	bhi.n	8007d6c <__ieee754_atan2+0x144>
 8007cda:	4b32      	ldr	r3, [pc, #200]	; (8007da4 <__ieee754_atan2+0x17c>)
 8007cdc:	e7f6      	b.n	8007ccc <__ieee754_atan2+0xa4>
 8007cde:	4573      	cmp	r3, lr
 8007ce0:	d0e4      	beq.n	8007cac <__ieee754_atan2+0x84>
 8007ce2:	1a9b      	subs	r3, r3, r2
 8007ce4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007ce8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007cec:	da1e      	bge.n	8007d2c <__ieee754_atan2+0x104>
 8007cee:	2f00      	cmp	r7, #0
 8007cf0:	da01      	bge.n	8007cf6 <__ieee754_atan2+0xce>
 8007cf2:	323c      	adds	r2, #60	; 0x3c
 8007cf4:	db1e      	blt.n	8007d34 <__ieee754_atan2+0x10c>
 8007cf6:	4632      	mov	r2, r6
 8007cf8:	463b      	mov	r3, r7
 8007cfa:	f7f8 fdaf 	bl	800085c <__aeabi_ddiv>
 8007cfe:	ec41 0b10 	vmov	d0, r0, r1
 8007d02:	f001 f9e1 	bl	80090c8 <fabs>
 8007d06:	f001 f83f 	bl	8008d88 <atan>
 8007d0a:	ec51 0b10 	vmov	r0, r1, d0
 8007d0e:	2c01      	cmp	r4, #1
 8007d10:	d013      	beq.n	8007d3a <__ieee754_atan2+0x112>
 8007d12:	2c02      	cmp	r4, #2
 8007d14:	d015      	beq.n	8007d42 <__ieee754_atan2+0x11a>
 8007d16:	2c00      	cmp	r4, #0
 8007d18:	d0a7      	beq.n	8007c6a <__ieee754_atan2+0x42>
 8007d1a:	a319      	add	r3, pc, #100	; (adr r3, 8007d80 <__ieee754_atan2+0x158>)
 8007d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d20:	f7f8 faba 	bl	8000298 <__aeabi_dsub>
 8007d24:	a318      	add	r3, pc, #96	; (adr r3, 8007d88 <__ieee754_atan2+0x160>)
 8007d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2a:	e014      	b.n	8007d56 <__ieee754_atan2+0x12e>
 8007d2c:	a118      	add	r1, pc, #96	; (adr r1, 8007d90 <__ieee754_atan2+0x168>)
 8007d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d32:	e7ec      	b.n	8007d0e <__ieee754_atan2+0xe6>
 8007d34:	2000      	movs	r0, #0
 8007d36:	2100      	movs	r1, #0
 8007d38:	e7e9      	b.n	8007d0e <__ieee754_atan2+0xe6>
 8007d3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d3e:	4619      	mov	r1, r3
 8007d40:	e793      	b.n	8007c6a <__ieee754_atan2+0x42>
 8007d42:	a30f      	add	r3, pc, #60	; (adr r3, 8007d80 <__ieee754_atan2+0x158>)
 8007d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d48:	f7f8 faa6 	bl	8000298 <__aeabi_dsub>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	a10d      	add	r1, pc, #52	; (adr r1, 8007d88 <__ieee754_atan2+0x160>)
 8007d52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d56:	f7f8 fa9f 	bl	8000298 <__aeabi_dsub>
 8007d5a:	e786      	b.n	8007c6a <__ieee754_atan2+0x42>
 8007d5c:	a10a      	add	r1, pc, #40	; (adr r1, 8007d88 <__ieee754_atan2+0x160>)
 8007d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d62:	e782      	b.n	8007c6a <__ieee754_atan2+0x42>
 8007d64:	a10c      	add	r1, pc, #48	; (adr r1, 8007d98 <__ieee754_atan2+0x170>)
 8007d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d6a:	e77e      	b.n	8007c6a <__ieee754_atan2+0x42>
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	2100      	movs	r1, #0
 8007d70:	e77b      	b.n	8007c6a <__ieee754_atan2+0x42>
 8007d72:	a107      	add	r1, pc, #28	; (adr r1, 8007d90 <__ieee754_atan2+0x168>)
 8007d74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d78:	e777      	b.n	8007c6a <__ieee754_atan2+0x42>
 8007d7a:	bf00      	nop
 8007d7c:	f3af 8000 	nop.w
 8007d80:	33145c07 	.word	0x33145c07
 8007d84:	3ca1a626 	.word	0x3ca1a626
 8007d88:	54442d18 	.word	0x54442d18
 8007d8c:	400921fb 	.word	0x400921fb
 8007d90:	54442d18 	.word	0x54442d18
 8007d94:	3ff921fb 	.word	0x3ff921fb
 8007d98:	54442d18 	.word	0x54442d18
 8007d9c:	3fe921fb 	.word	0x3fe921fb
 8007da0:	08009730 	.word	0x08009730
 8007da4:	08009748 	.word	0x08009748
 8007da8:	54442d18 	.word	0x54442d18
 8007dac:	c00921fb 	.word	0xc00921fb
 8007db0:	54442d18 	.word	0x54442d18
 8007db4:	bff921fb 	.word	0xbff921fb
 8007db8:	7ff00000 	.word	0x7ff00000

08007dbc <__ieee754_fmod>:
 8007dbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc0:	ec53 2b11 	vmov	r2, r3, d1
 8007dc4:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8007dc8:	ea5e 0402 	orrs.w	r4, lr, r2
 8007dcc:	ec51 0b10 	vmov	r0, r1, d0
 8007dd0:	ee11 7a10 	vmov	r7, s2
 8007dd4:	ee11 ca10 	vmov	ip, s2
 8007dd8:	461e      	mov	r6, r3
 8007dda:	d00d      	beq.n	8007df8 <__ieee754_fmod+0x3c>
 8007ddc:	4c7a      	ldr	r4, [pc, #488]	; (8007fc8 <__ieee754_fmod+0x20c>)
 8007dde:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8007de2:	45a0      	cmp	r8, r4
 8007de4:	4689      	mov	r9, r1
 8007de6:	dc07      	bgt.n	8007df8 <__ieee754_fmod+0x3c>
 8007de8:	4254      	negs	r4, r2
 8007dea:	4d78      	ldr	r5, [pc, #480]	; (8007fcc <__ieee754_fmod+0x210>)
 8007dec:	4314      	orrs	r4, r2
 8007dee:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8007df2:	42ac      	cmp	r4, r5
 8007df4:	46ab      	mov	fp, r5
 8007df6:	d909      	bls.n	8007e0c <__ieee754_fmod+0x50>
 8007df8:	f7f8 fc06 	bl	8000608 <__aeabi_dmul>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	f7f8 fd2c 	bl	800085c <__aeabi_ddiv>
 8007e04:	ec41 0b10 	vmov	d0, r0, r1
 8007e08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0c:	45f0      	cmp	r8, lr
 8007e0e:	ee10 aa10 	vmov	sl, s0
 8007e12:	ee10 4a10 	vmov	r4, s0
 8007e16:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007e1a:	dc0a      	bgt.n	8007e32 <__ieee754_fmod+0x76>
 8007e1c:	dbf2      	blt.n	8007e04 <__ieee754_fmod+0x48>
 8007e1e:	4290      	cmp	r0, r2
 8007e20:	d3f0      	bcc.n	8007e04 <__ieee754_fmod+0x48>
 8007e22:	d106      	bne.n	8007e32 <__ieee754_fmod+0x76>
 8007e24:	4a6a      	ldr	r2, [pc, #424]	; (8007fd0 <__ieee754_fmod+0x214>)
 8007e26:	0fed      	lsrs	r5, r5, #31
 8007e28:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007e2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007e30:	e7e8      	b.n	8007e04 <__ieee754_fmod+0x48>
 8007e32:	ea19 0f0b 	tst.w	r9, fp
 8007e36:	d14a      	bne.n	8007ece <__ieee754_fmod+0x112>
 8007e38:	f1b8 0f00 	cmp.w	r8, #0
 8007e3c:	d13f      	bne.n	8007ebe <__ieee754_fmod+0x102>
 8007e3e:	4965      	ldr	r1, [pc, #404]	; (8007fd4 <__ieee754_fmod+0x218>)
 8007e40:	4653      	mov	r3, sl
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	dc38      	bgt.n	8007eb8 <__ieee754_fmod+0xfc>
 8007e46:	4b61      	ldr	r3, [pc, #388]	; (8007fcc <__ieee754_fmod+0x210>)
 8007e48:	4033      	ands	r3, r6
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d14f      	bne.n	8007eee <__ieee754_fmod+0x132>
 8007e4e:	f1be 0f00 	cmp.w	lr, #0
 8007e52:	d144      	bne.n	8007ede <__ieee754_fmod+0x122>
 8007e54:	4a5f      	ldr	r2, [pc, #380]	; (8007fd4 <__ieee754_fmod+0x218>)
 8007e56:	463b      	mov	r3, r7
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	dc3d      	bgt.n	8007ed8 <__ieee754_fmod+0x11c>
 8007e5c:	4b5e      	ldr	r3, [pc, #376]	; (8007fd8 <__ieee754_fmod+0x21c>)
 8007e5e:	4299      	cmp	r1, r3
 8007e60:	db4a      	blt.n	8007ef8 <__ieee754_fmod+0x13c>
 8007e62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e6a:	485b      	ldr	r0, [pc, #364]	; (8007fd8 <__ieee754_fmod+0x21c>)
 8007e6c:	4282      	cmp	r2, r0
 8007e6e:	db57      	blt.n	8007f20 <__ieee754_fmod+0x164>
 8007e70:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8007e74:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8007e78:	1a89      	subs	r1, r1, r2
 8007e7a:	1b98      	subs	r0, r3, r6
 8007e7c:	eba4 070c 	sub.w	r7, r4, ip
 8007e80:	2900      	cmp	r1, #0
 8007e82:	d164      	bne.n	8007f4e <__ieee754_fmod+0x192>
 8007e84:	4564      	cmp	r4, ip
 8007e86:	bf38      	it	cc
 8007e88:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	bfa4      	itt	ge
 8007e90:	463c      	movge	r4, r7
 8007e92:	4603      	movge	r3, r0
 8007e94:	ea53 0104 	orrs.w	r1, r3, r4
 8007e98:	d0c4      	beq.n	8007e24 <__ieee754_fmod+0x68>
 8007e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e9e:	db6b      	blt.n	8007f78 <__ieee754_fmod+0x1bc>
 8007ea0:	494d      	ldr	r1, [pc, #308]	; (8007fd8 <__ieee754_fmod+0x21c>)
 8007ea2:	428a      	cmp	r2, r1
 8007ea4:	db6e      	blt.n	8007f84 <__ieee754_fmod+0x1c8>
 8007ea6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007eaa:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8007eae:	431d      	orrs	r5, r3
 8007eb0:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	e7a5      	b.n	8007e04 <__ieee754_fmod+0x48>
 8007eb8:	3901      	subs	r1, #1
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	e7c1      	b.n	8007e42 <__ieee754_fmod+0x86>
 8007ebe:	4946      	ldr	r1, [pc, #280]	; (8007fd8 <__ieee754_fmod+0x21c>)
 8007ec0:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	ddbe      	ble.n	8007e46 <__ieee754_fmod+0x8a>
 8007ec8:	3901      	subs	r1, #1
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	e7fa      	b.n	8007ec4 <__ieee754_fmod+0x108>
 8007ece:	ea4f 5128 	mov.w	r1, r8, asr #20
 8007ed2:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007ed6:	e7b6      	b.n	8007e46 <__ieee754_fmod+0x8a>
 8007ed8:	3a01      	subs	r2, #1
 8007eda:	005b      	lsls	r3, r3, #1
 8007edc:	e7bc      	b.n	8007e58 <__ieee754_fmod+0x9c>
 8007ede:	4a3e      	ldr	r2, [pc, #248]	; (8007fd8 <__ieee754_fmod+0x21c>)
 8007ee0:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	ddb9      	ble.n	8007e5c <__ieee754_fmod+0xa0>
 8007ee8:	3a01      	subs	r2, #1
 8007eea:	005b      	lsls	r3, r3, #1
 8007eec:	e7fa      	b.n	8007ee4 <__ieee754_fmod+0x128>
 8007eee:	ea4f 522e 	mov.w	r2, lr, asr #20
 8007ef2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007ef6:	e7b1      	b.n	8007e5c <__ieee754_fmod+0xa0>
 8007ef8:	1a5c      	subs	r4, r3, r1
 8007efa:	2c1f      	cmp	r4, #31
 8007efc:	dc0a      	bgt.n	8007f14 <__ieee754_fmod+0x158>
 8007efe:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8007f02:	fa08 f804 	lsl.w	r8, r8, r4
 8007f06:	fa2a f303 	lsr.w	r3, sl, r3
 8007f0a:	ea43 0308 	orr.w	r3, r3, r8
 8007f0e:	fa0a f404 	lsl.w	r4, sl, r4
 8007f12:	e7aa      	b.n	8007e6a <__ieee754_fmod+0xae>
 8007f14:	4b31      	ldr	r3, [pc, #196]	; (8007fdc <__ieee754_fmod+0x220>)
 8007f16:	1a5b      	subs	r3, r3, r1
 8007f18:	fa0a f303 	lsl.w	r3, sl, r3
 8007f1c:	2400      	movs	r4, #0
 8007f1e:	e7a4      	b.n	8007e6a <__ieee754_fmod+0xae>
 8007f20:	eba0 0c02 	sub.w	ip, r0, r2
 8007f24:	f1bc 0f1f 	cmp.w	ip, #31
 8007f28:	dc0a      	bgt.n	8007f40 <__ieee754_fmod+0x184>
 8007f2a:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8007f2e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8007f32:	fa27 f606 	lsr.w	r6, r7, r6
 8007f36:	ea46 060e 	orr.w	r6, r6, lr
 8007f3a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8007f3e:	e79b      	b.n	8007e78 <__ieee754_fmod+0xbc>
 8007f40:	4e26      	ldr	r6, [pc, #152]	; (8007fdc <__ieee754_fmod+0x220>)
 8007f42:	1ab6      	subs	r6, r6, r2
 8007f44:	fa07 f606 	lsl.w	r6, r7, r6
 8007f48:	f04f 0c00 	mov.w	ip, #0
 8007f4c:	e794      	b.n	8007e78 <__ieee754_fmod+0xbc>
 8007f4e:	4564      	cmp	r4, ip
 8007f50:	bf38      	it	cc
 8007f52:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 8007f56:	2800      	cmp	r0, #0
 8007f58:	da05      	bge.n	8007f66 <__ieee754_fmod+0x1aa>
 8007f5a:	0fe0      	lsrs	r0, r4, #31
 8007f5c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007f60:	0064      	lsls	r4, r4, #1
 8007f62:	3901      	subs	r1, #1
 8007f64:	e789      	b.n	8007e7a <__ieee754_fmod+0xbe>
 8007f66:	ea50 0307 	orrs.w	r3, r0, r7
 8007f6a:	f43f af5b 	beq.w	8007e24 <__ieee754_fmod+0x68>
 8007f6e:	0ffb      	lsrs	r3, r7, #31
 8007f70:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007f74:	007c      	lsls	r4, r7, #1
 8007f76:	e7f4      	b.n	8007f62 <__ieee754_fmod+0x1a6>
 8007f78:	0fe1      	lsrs	r1, r4, #31
 8007f7a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8007f7e:	0064      	lsls	r4, r4, #1
 8007f80:	3a01      	subs	r2, #1
 8007f82:	e78a      	b.n	8007e9a <__ieee754_fmod+0xde>
 8007f84:	1a89      	subs	r1, r1, r2
 8007f86:	2914      	cmp	r1, #20
 8007f88:	dc0a      	bgt.n	8007fa0 <__ieee754_fmod+0x1e4>
 8007f8a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8007f8e:	fa03 f202 	lsl.w	r2, r3, r2
 8007f92:	40cc      	lsrs	r4, r1
 8007f94:	4322      	orrs	r2, r4
 8007f96:	410b      	asrs	r3, r1
 8007f98:	ea43 0105 	orr.w	r1, r3, r5
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	e731      	b.n	8007e04 <__ieee754_fmod+0x48>
 8007fa0:	291f      	cmp	r1, #31
 8007fa2:	dc07      	bgt.n	8007fb4 <__ieee754_fmod+0x1f8>
 8007fa4:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8007fa8:	40cc      	lsrs	r4, r1
 8007faa:	fa03 f202 	lsl.w	r2, r3, r2
 8007fae:	4322      	orrs	r2, r4
 8007fb0:	462b      	mov	r3, r5
 8007fb2:	e7f1      	b.n	8007f98 <__ieee754_fmod+0x1dc>
 8007fb4:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8007fb8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007fbc:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8007fc0:	32e2      	adds	r2, #226	; 0xe2
 8007fc2:	fa43 f202 	asr.w	r2, r3, r2
 8007fc6:	e7f3      	b.n	8007fb0 <__ieee754_fmod+0x1f4>
 8007fc8:	7fefffff 	.word	0x7fefffff
 8007fcc:	7ff00000 	.word	0x7ff00000
 8007fd0:	08009760 	.word	0x08009760
 8007fd4:	fffffbed 	.word	0xfffffbed
 8007fd8:	fffffc02 	.word	0xfffffc02
 8007fdc:	fffffbe2 	.word	0xfffffbe2

08007fe0 <__ieee754_rem_pio2>:
 8007fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe4:	ed2d 8b02 	vpush	{d8}
 8007fe8:	ec55 4b10 	vmov	r4, r5, d0
 8007fec:	4bca      	ldr	r3, [pc, #808]	; (8008318 <__ieee754_rem_pio2+0x338>)
 8007fee:	b08b      	sub	sp, #44	; 0x2c
 8007ff0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007ff4:	4598      	cmp	r8, r3
 8007ff6:	4682      	mov	sl, r0
 8007ff8:	9502      	str	r5, [sp, #8]
 8007ffa:	dc08      	bgt.n	800800e <__ieee754_rem_pio2+0x2e>
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2300      	movs	r3, #0
 8008000:	ed80 0b00 	vstr	d0, [r0]
 8008004:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008008:	f04f 0b00 	mov.w	fp, #0
 800800c:	e028      	b.n	8008060 <__ieee754_rem_pio2+0x80>
 800800e:	4bc3      	ldr	r3, [pc, #780]	; (800831c <__ieee754_rem_pio2+0x33c>)
 8008010:	4598      	cmp	r8, r3
 8008012:	dc78      	bgt.n	8008106 <__ieee754_rem_pio2+0x126>
 8008014:	9b02      	ldr	r3, [sp, #8]
 8008016:	4ec2      	ldr	r6, [pc, #776]	; (8008320 <__ieee754_rem_pio2+0x340>)
 8008018:	2b00      	cmp	r3, #0
 800801a:	ee10 0a10 	vmov	r0, s0
 800801e:	a3b0      	add	r3, pc, #704	; (adr r3, 80082e0 <__ieee754_rem_pio2+0x300>)
 8008020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008024:	4629      	mov	r1, r5
 8008026:	dd39      	ble.n	800809c <__ieee754_rem_pio2+0xbc>
 8008028:	f7f8 f936 	bl	8000298 <__aeabi_dsub>
 800802c:	45b0      	cmp	r8, r6
 800802e:	4604      	mov	r4, r0
 8008030:	460d      	mov	r5, r1
 8008032:	d01b      	beq.n	800806c <__ieee754_rem_pio2+0x8c>
 8008034:	a3ac      	add	r3, pc, #688	; (adr r3, 80082e8 <__ieee754_rem_pio2+0x308>)
 8008036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803a:	f7f8 f92d 	bl	8000298 <__aeabi_dsub>
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	e9ca 2300 	strd	r2, r3, [sl]
 8008046:	4620      	mov	r0, r4
 8008048:	4629      	mov	r1, r5
 800804a:	f7f8 f925 	bl	8000298 <__aeabi_dsub>
 800804e:	a3a6      	add	r3, pc, #664	; (adr r3, 80082e8 <__ieee754_rem_pio2+0x308>)
 8008050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008054:	f7f8 f920 	bl	8000298 <__aeabi_dsub>
 8008058:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800805c:	f04f 0b01 	mov.w	fp, #1
 8008060:	4658      	mov	r0, fp
 8008062:	b00b      	add	sp, #44	; 0x2c
 8008064:	ecbd 8b02 	vpop	{d8}
 8008068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800806c:	a3a0      	add	r3, pc, #640	; (adr r3, 80082f0 <__ieee754_rem_pio2+0x310>)
 800806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008072:	f7f8 f911 	bl	8000298 <__aeabi_dsub>
 8008076:	a3a0      	add	r3, pc, #640	; (adr r3, 80082f8 <__ieee754_rem_pio2+0x318>)
 8008078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807c:	4604      	mov	r4, r0
 800807e:	460d      	mov	r5, r1
 8008080:	f7f8 f90a 	bl	8000298 <__aeabi_dsub>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	e9ca 2300 	strd	r2, r3, [sl]
 800808c:	4620      	mov	r0, r4
 800808e:	4629      	mov	r1, r5
 8008090:	f7f8 f902 	bl	8000298 <__aeabi_dsub>
 8008094:	a398      	add	r3, pc, #608	; (adr r3, 80082f8 <__ieee754_rem_pio2+0x318>)
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	e7db      	b.n	8008054 <__ieee754_rem_pio2+0x74>
 800809c:	f7f8 f8fe 	bl	800029c <__adddf3>
 80080a0:	45b0      	cmp	r8, r6
 80080a2:	4604      	mov	r4, r0
 80080a4:	460d      	mov	r5, r1
 80080a6:	d016      	beq.n	80080d6 <__ieee754_rem_pio2+0xf6>
 80080a8:	a38f      	add	r3, pc, #572	; (adr r3, 80082e8 <__ieee754_rem_pio2+0x308>)
 80080aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ae:	f7f8 f8f5 	bl	800029c <__adddf3>
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	e9ca 2300 	strd	r2, r3, [sl]
 80080ba:	4620      	mov	r0, r4
 80080bc:	4629      	mov	r1, r5
 80080be:	f7f8 f8eb 	bl	8000298 <__aeabi_dsub>
 80080c2:	a389      	add	r3, pc, #548	; (adr r3, 80082e8 <__ieee754_rem_pio2+0x308>)
 80080c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c8:	f7f8 f8e8 	bl	800029c <__adddf3>
 80080cc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80080d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80080d4:	e7c4      	b.n	8008060 <__ieee754_rem_pio2+0x80>
 80080d6:	a386      	add	r3, pc, #536	; (adr r3, 80082f0 <__ieee754_rem_pio2+0x310>)
 80080d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080dc:	f7f8 f8de 	bl	800029c <__adddf3>
 80080e0:	a385      	add	r3, pc, #532	; (adr r3, 80082f8 <__ieee754_rem_pio2+0x318>)
 80080e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e6:	4604      	mov	r4, r0
 80080e8:	460d      	mov	r5, r1
 80080ea:	f7f8 f8d7 	bl	800029c <__adddf3>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	e9ca 2300 	strd	r2, r3, [sl]
 80080f6:	4620      	mov	r0, r4
 80080f8:	4629      	mov	r1, r5
 80080fa:	f7f8 f8cd 	bl	8000298 <__aeabi_dsub>
 80080fe:	a37e      	add	r3, pc, #504	; (adr r3, 80082f8 <__ieee754_rem_pio2+0x318>)
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	e7e0      	b.n	80080c8 <__ieee754_rem_pio2+0xe8>
 8008106:	4b87      	ldr	r3, [pc, #540]	; (8008324 <__ieee754_rem_pio2+0x344>)
 8008108:	4598      	cmp	r8, r3
 800810a:	f300 80d9 	bgt.w	80082c0 <__ieee754_rem_pio2+0x2e0>
 800810e:	f000 ffdb 	bl	80090c8 <fabs>
 8008112:	ec55 4b10 	vmov	r4, r5, d0
 8008116:	ee10 0a10 	vmov	r0, s0
 800811a:	a379      	add	r3, pc, #484	; (adr r3, 8008300 <__ieee754_rem_pio2+0x320>)
 800811c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008120:	4629      	mov	r1, r5
 8008122:	f7f8 fa71 	bl	8000608 <__aeabi_dmul>
 8008126:	4b80      	ldr	r3, [pc, #512]	; (8008328 <__ieee754_rem_pio2+0x348>)
 8008128:	2200      	movs	r2, #0
 800812a:	f7f8 f8b7 	bl	800029c <__adddf3>
 800812e:	f7f8 fd1b 	bl	8000b68 <__aeabi_d2iz>
 8008132:	4683      	mov	fp, r0
 8008134:	f7f8 f9fe 	bl	8000534 <__aeabi_i2d>
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	ec43 2b18 	vmov	d8, r2, r3
 8008140:	a367      	add	r3, pc, #412	; (adr r3, 80082e0 <__ieee754_rem_pio2+0x300>)
 8008142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008146:	f7f8 fa5f 	bl	8000608 <__aeabi_dmul>
 800814a:	4602      	mov	r2, r0
 800814c:	460b      	mov	r3, r1
 800814e:	4620      	mov	r0, r4
 8008150:	4629      	mov	r1, r5
 8008152:	f7f8 f8a1 	bl	8000298 <__aeabi_dsub>
 8008156:	a364      	add	r3, pc, #400	; (adr r3, 80082e8 <__ieee754_rem_pio2+0x308>)
 8008158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815c:	4606      	mov	r6, r0
 800815e:	460f      	mov	r7, r1
 8008160:	ec51 0b18 	vmov	r0, r1, d8
 8008164:	f7f8 fa50 	bl	8000608 <__aeabi_dmul>
 8008168:	f1bb 0f1f 	cmp.w	fp, #31
 800816c:	4604      	mov	r4, r0
 800816e:	460d      	mov	r5, r1
 8008170:	dc0d      	bgt.n	800818e <__ieee754_rem_pio2+0x1ae>
 8008172:	4b6e      	ldr	r3, [pc, #440]	; (800832c <__ieee754_rem_pio2+0x34c>)
 8008174:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8008178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800817c:	4543      	cmp	r3, r8
 800817e:	d006      	beq.n	800818e <__ieee754_rem_pio2+0x1ae>
 8008180:	4622      	mov	r2, r4
 8008182:	462b      	mov	r3, r5
 8008184:	4630      	mov	r0, r6
 8008186:	4639      	mov	r1, r7
 8008188:	f7f8 f886 	bl	8000298 <__aeabi_dsub>
 800818c:	e00f      	b.n	80081ae <__ieee754_rem_pio2+0x1ce>
 800818e:	462b      	mov	r3, r5
 8008190:	4622      	mov	r2, r4
 8008192:	4630      	mov	r0, r6
 8008194:	4639      	mov	r1, r7
 8008196:	f7f8 f87f 	bl	8000298 <__aeabi_dsub>
 800819a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800819e:	9303      	str	r3, [sp, #12]
 80081a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80081a4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80081a8:	f1b8 0f10 	cmp.w	r8, #16
 80081ac:	dc02      	bgt.n	80081b4 <__ieee754_rem_pio2+0x1d4>
 80081ae:	e9ca 0100 	strd	r0, r1, [sl]
 80081b2:	e039      	b.n	8008228 <__ieee754_rem_pio2+0x248>
 80081b4:	a34e      	add	r3, pc, #312	; (adr r3, 80082f0 <__ieee754_rem_pio2+0x310>)
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	ec51 0b18 	vmov	r0, r1, d8
 80081be:	f7f8 fa23 	bl	8000608 <__aeabi_dmul>
 80081c2:	4604      	mov	r4, r0
 80081c4:	460d      	mov	r5, r1
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	4630      	mov	r0, r6
 80081cc:	4639      	mov	r1, r7
 80081ce:	f7f8 f863 	bl	8000298 <__aeabi_dsub>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4680      	mov	r8, r0
 80081d8:	4689      	mov	r9, r1
 80081da:	4630      	mov	r0, r6
 80081dc:	4639      	mov	r1, r7
 80081de:	f7f8 f85b 	bl	8000298 <__aeabi_dsub>
 80081e2:	4622      	mov	r2, r4
 80081e4:	462b      	mov	r3, r5
 80081e6:	f7f8 f857 	bl	8000298 <__aeabi_dsub>
 80081ea:	a343      	add	r3, pc, #268	; (adr r3, 80082f8 <__ieee754_rem_pio2+0x318>)
 80081ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f0:	4604      	mov	r4, r0
 80081f2:	460d      	mov	r5, r1
 80081f4:	ec51 0b18 	vmov	r0, r1, d8
 80081f8:	f7f8 fa06 	bl	8000608 <__aeabi_dmul>
 80081fc:	4622      	mov	r2, r4
 80081fe:	462b      	mov	r3, r5
 8008200:	f7f8 f84a 	bl	8000298 <__aeabi_dsub>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4604      	mov	r4, r0
 800820a:	460d      	mov	r5, r1
 800820c:	4640      	mov	r0, r8
 800820e:	4649      	mov	r1, r9
 8008210:	f7f8 f842 	bl	8000298 <__aeabi_dsub>
 8008214:	9a03      	ldr	r2, [sp, #12]
 8008216:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	2b31      	cmp	r3, #49	; 0x31
 800821e:	dc24      	bgt.n	800826a <__ieee754_rem_pio2+0x28a>
 8008220:	e9ca 0100 	strd	r0, r1, [sl]
 8008224:	4646      	mov	r6, r8
 8008226:	464f      	mov	r7, r9
 8008228:	e9da 8900 	ldrd	r8, r9, [sl]
 800822c:	4630      	mov	r0, r6
 800822e:	4642      	mov	r2, r8
 8008230:	464b      	mov	r3, r9
 8008232:	4639      	mov	r1, r7
 8008234:	f7f8 f830 	bl	8000298 <__aeabi_dsub>
 8008238:	462b      	mov	r3, r5
 800823a:	4622      	mov	r2, r4
 800823c:	f7f8 f82c 	bl	8000298 <__aeabi_dsub>
 8008240:	9b02      	ldr	r3, [sp, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008248:	f6bf af0a 	bge.w	8008060 <__ieee754_rem_pio2+0x80>
 800824c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008250:	f8ca 3004 	str.w	r3, [sl, #4]
 8008254:	f8ca 8000 	str.w	r8, [sl]
 8008258:	f8ca 0008 	str.w	r0, [sl, #8]
 800825c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008260:	f8ca 300c 	str.w	r3, [sl, #12]
 8008264:	f1cb 0b00 	rsb	fp, fp, #0
 8008268:	e6fa      	b.n	8008060 <__ieee754_rem_pio2+0x80>
 800826a:	a327      	add	r3, pc, #156	; (adr r3, 8008308 <__ieee754_rem_pio2+0x328>)
 800826c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008270:	ec51 0b18 	vmov	r0, r1, d8
 8008274:	f7f8 f9c8 	bl	8000608 <__aeabi_dmul>
 8008278:	4604      	mov	r4, r0
 800827a:	460d      	mov	r5, r1
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	4640      	mov	r0, r8
 8008282:	4649      	mov	r1, r9
 8008284:	f7f8 f808 	bl	8000298 <__aeabi_dsub>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4606      	mov	r6, r0
 800828e:	460f      	mov	r7, r1
 8008290:	4640      	mov	r0, r8
 8008292:	4649      	mov	r1, r9
 8008294:	f7f8 f800 	bl	8000298 <__aeabi_dsub>
 8008298:	4622      	mov	r2, r4
 800829a:	462b      	mov	r3, r5
 800829c:	f7f7 fffc 	bl	8000298 <__aeabi_dsub>
 80082a0:	a31b      	add	r3, pc, #108	; (adr r3, 8008310 <__ieee754_rem_pio2+0x330>)
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	4604      	mov	r4, r0
 80082a8:	460d      	mov	r5, r1
 80082aa:	ec51 0b18 	vmov	r0, r1, d8
 80082ae:	f7f8 f9ab 	bl	8000608 <__aeabi_dmul>
 80082b2:	4622      	mov	r2, r4
 80082b4:	462b      	mov	r3, r5
 80082b6:	f7f7 ffef 	bl	8000298 <__aeabi_dsub>
 80082ba:	4604      	mov	r4, r0
 80082bc:	460d      	mov	r5, r1
 80082be:	e75f      	b.n	8008180 <__ieee754_rem_pio2+0x1a0>
 80082c0:	4b1b      	ldr	r3, [pc, #108]	; (8008330 <__ieee754_rem_pio2+0x350>)
 80082c2:	4598      	cmp	r8, r3
 80082c4:	dd36      	ble.n	8008334 <__ieee754_rem_pio2+0x354>
 80082c6:	ee10 2a10 	vmov	r2, s0
 80082ca:	462b      	mov	r3, r5
 80082cc:	4620      	mov	r0, r4
 80082ce:	4629      	mov	r1, r5
 80082d0:	f7f7 ffe2 	bl	8000298 <__aeabi_dsub>
 80082d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80082d8:	e9ca 0100 	strd	r0, r1, [sl]
 80082dc:	e694      	b.n	8008008 <__ieee754_rem_pio2+0x28>
 80082de:	bf00      	nop
 80082e0:	54400000 	.word	0x54400000
 80082e4:	3ff921fb 	.word	0x3ff921fb
 80082e8:	1a626331 	.word	0x1a626331
 80082ec:	3dd0b461 	.word	0x3dd0b461
 80082f0:	1a600000 	.word	0x1a600000
 80082f4:	3dd0b461 	.word	0x3dd0b461
 80082f8:	2e037073 	.word	0x2e037073
 80082fc:	3ba3198a 	.word	0x3ba3198a
 8008300:	6dc9c883 	.word	0x6dc9c883
 8008304:	3fe45f30 	.word	0x3fe45f30
 8008308:	2e000000 	.word	0x2e000000
 800830c:	3ba3198a 	.word	0x3ba3198a
 8008310:	252049c1 	.word	0x252049c1
 8008314:	397b839a 	.word	0x397b839a
 8008318:	3fe921fb 	.word	0x3fe921fb
 800831c:	4002d97b 	.word	0x4002d97b
 8008320:	3ff921fb 	.word	0x3ff921fb
 8008324:	413921fb 	.word	0x413921fb
 8008328:	3fe00000 	.word	0x3fe00000
 800832c:	08009770 	.word	0x08009770
 8008330:	7fefffff 	.word	0x7fefffff
 8008334:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008338:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800833c:	ee10 0a10 	vmov	r0, s0
 8008340:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008344:	ee10 6a10 	vmov	r6, s0
 8008348:	460f      	mov	r7, r1
 800834a:	f7f8 fc0d 	bl	8000b68 <__aeabi_d2iz>
 800834e:	f7f8 f8f1 	bl	8000534 <__aeabi_i2d>
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	4630      	mov	r0, r6
 8008358:	4639      	mov	r1, r7
 800835a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800835e:	f7f7 ff9b 	bl	8000298 <__aeabi_dsub>
 8008362:	4b22      	ldr	r3, [pc, #136]	; (80083ec <__ieee754_rem_pio2+0x40c>)
 8008364:	2200      	movs	r2, #0
 8008366:	f7f8 f94f 	bl	8000608 <__aeabi_dmul>
 800836a:	460f      	mov	r7, r1
 800836c:	4606      	mov	r6, r0
 800836e:	f7f8 fbfb 	bl	8000b68 <__aeabi_d2iz>
 8008372:	f7f8 f8df 	bl	8000534 <__aeabi_i2d>
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	4630      	mov	r0, r6
 800837c:	4639      	mov	r1, r7
 800837e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008382:	f7f7 ff89 	bl	8000298 <__aeabi_dsub>
 8008386:	4b19      	ldr	r3, [pc, #100]	; (80083ec <__ieee754_rem_pio2+0x40c>)
 8008388:	2200      	movs	r2, #0
 800838a:	f7f8 f93d 	bl	8000608 <__aeabi_dmul>
 800838e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008392:	ad04      	add	r5, sp, #16
 8008394:	f04f 0803 	mov.w	r8, #3
 8008398:	46a9      	mov	r9, r5
 800839a:	2600      	movs	r6, #0
 800839c:	2700      	movs	r7, #0
 800839e:	4632      	mov	r2, r6
 80083a0:	463b      	mov	r3, r7
 80083a2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80083a6:	46c3      	mov	fp, r8
 80083a8:	3d08      	subs	r5, #8
 80083aa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80083ae:	f7f8 fb93 	bl	8000ad8 <__aeabi_dcmpeq>
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d1f3      	bne.n	800839e <__ieee754_rem_pio2+0x3be>
 80083b6:	4b0e      	ldr	r3, [pc, #56]	; (80083f0 <__ieee754_rem_pio2+0x410>)
 80083b8:	9301      	str	r3, [sp, #4]
 80083ba:	2302      	movs	r3, #2
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	4622      	mov	r2, r4
 80083c0:	465b      	mov	r3, fp
 80083c2:	4651      	mov	r1, sl
 80083c4:	4648      	mov	r0, r9
 80083c6:	f000 f8df 	bl	8008588 <__kernel_rem_pio2>
 80083ca:	9b02      	ldr	r3, [sp, #8]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	4683      	mov	fp, r0
 80083d0:	f6bf ae46 	bge.w	8008060 <__ieee754_rem_pio2+0x80>
 80083d4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80083d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80083dc:	f8ca 3004 	str.w	r3, [sl, #4]
 80083e0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80083e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80083e8:	e73a      	b.n	8008260 <__ieee754_rem_pio2+0x280>
 80083ea:	bf00      	nop
 80083ec:	41700000 	.word	0x41700000
 80083f0:	080097f0 	.word	0x080097f0
 80083f4:	00000000 	.word	0x00000000

080083f8 <__kernel_cos>:
 80083f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fc:	ec57 6b10 	vmov	r6, r7, d0
 8008400:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008404:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008408:	ed8d 1b00 	vstr	d1, [sp]
 800840c:	da07      	bge.n	800841e <__kernel_cos+0x26>
 800840e:	ee10 0a10 	vmov	r0, s0
 8008412:	4639      	mov	r1, r7
 8008414:	f7f8 fba8 	bl	8000b68 <__aeabi_d2iz>
 8008418:	2800      	cmp	r0, #0
 800841a:	f000 8088 	beq.w	800852e <__kernel_cos+0x136>
 800841e:	4632      	mov	r2, r6
 8008420:	463b      	mov	r3, r7
 8008422:	4630      	mov	r0, r6
 8008424:	4639      	mov	r1, r7
 8008426:	f7f8 f8ef 	bl	8000608 <__aeabi_dmul>
 800842a:	4b51      	ldr	r3, [pc, #324]	; (8008570 <__kernel_cos+0x178>)
 800842c:	2200      	movs	r2, #0
 800842e:	4604      	mov	r4, r0
 8008430:	460d      	mov	r5, r1
 8008432:	f7f8 f8e9 	bl	8000608 <__aeabi_dmul>
 8008436:	a340      	add	r3, pc, #256	; (adr r3, 8008538 <__kernel_cos+0x140>)
 8008438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843c:	4682      	mov	sl, r0
 800843e:	468b      	mov	fp, r1
 8008440:	4620      	mov	r0, r4
 8008442:	4629      	mov	r1, r5
 8008444:	f7f8 f8e0 	bl	8000608 <__aeabi_dmul>
 8008448:	a33d      	add	r3, pc, #244	; (adr r3, 8008540 <__kernel_cos+0x148>)
 800844a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844e:	f7f7 ff25 	bl	800029c <__adddf3>
 8008452:	4622      	mov	r2, r4
 8008454:	462b      	mov	r3, r5
 8008456:	f7f8 f8d7 	bl	8000608 <__aeabi_dmul>
 800845a:	a33b      	add	r3, pc, #236	; (adr r3, 8008548 <__kernel_cos+0x150>)
 800845c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008460:	f7f7 ff1a 	bl	8000298 <__aeabi_dsub>
 8008464:	4622      	mov	r2, r4
 8008466:	462b      	mov	r3, r5
 8008468:	f7f8 f8ce 	bl	8000608 <__aeabi_dmul>
 800846c:	a338      	add	r3, pc, #224	; (adr r3, 8008550 <__kernel_cos+0x158>)
 800846e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008472:	f7f7 ff13 	bl	800029c <__adddf3>
 8008476:	4622      	mov	r2, r4
 8008478:	462b      	mov	r3, r5
 800847a:	f7f8 f8c5 	bl	8000608 <__aeabi_dmul>
 800847e:	a336      	add	r3, pc, #216	; (adr r3, 8008558 <__kernel_cos+0x160>)
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	f7f7 ff08 	bl	8000298 <__aeabi_dsub>
 8008488:	4622      	mov	r2, r4
 800848a:	462b      	mov	r3, r5
 800848c:	f7f8 f8bc 	bl	8000608 <__aeabi_dmul>
 8008490:	a333      	add	r3, pc, #204	; (adr r3, 8008560 <__kernel_cos+0x168>)
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	f7f7 ff01 	bl	800029c <__adddf3>
 800849a:	4622      	mov	r2, r4
 800849c:	462b      	mov	r3, r5
 800849e:	f7f8 f8b3 	bl	8000608 <__aeabi_dmul>
 80084a2:	4622      	mov	r2, r4
 80084a4:	462b      	mov	r3, r5
 80084a6:	f7f8 f8af 	bl	8000608 <__aeabi_dmul>
 80084aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084ae:	4604      	mov	r4, r0
 80084b0:	460d      	mov	r5, r1
 80084b2:	4630      	mov	r0, r6
 80084b4:	4639      	mov	r1, r7
 80084b6:	f7f8 f8a7 	bl	8000608 <__aeabi_dmul>
 80084ba:	460b      	mov	r3, r1
 80084bc:	4602      	mov	r2, r0
 80084be:	4629      	mov	r1, r5
 80084c0:	4620      	mov	r0, r4
 80084c2:	f7f7 fee9 	bl	8000298 <__aeabi_dsub>
 80084c6:	4b2b      	ldr	r3, [pc, #172]	; (8008574 <__kernel_cos+0x17c>)
 80084c8:	4598      	cmp	r8, r3
 80084ca:	4606      	mov	r6, r0
 80084cc:	460f      	mov	r7, r1
 80084ce:	dc10      	bgt.n	80084f2 <__kernel_cos+0xfa>
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	4650      	mov	r0, sl
 80084d6:	4659      	mov	r1, fp
 80084d8:	f7f7 fede 	bl	8000298 <__aeabi_dsub>
 80084dc:	460b      	mov	r3, r1
 80084de:	4926      	ldr	r1, [pc, #152]	; (8008578 <__kernel_cos+0x180>)
 80084e0:	4602      	mov	r2, r0
 80084e2:	2000      	movs	r0, #0
 80084e4:	f7f7 fed8 	bl	8000298 <__aeabi_dsub>
 80084e8:	ec41 0b10 	vmov	d0, r0, r1
 80084ec:	b003      	add	sp, #12
 80084ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f2:	4b22      	ldr	r3, [pc, #136]	; (800857c <__kernel_cos+0x184>)
 80084f4:	4920      	ldr	r1, [pc, #128]	; (8008578 <__kernel_cos+0x180>)
 80084f6:	4598      	cmp	r8, r3
 80084f8:	bfcc      	ite	gt
 80084fa:	4d21      	ldrgt	r5, [pc, #132]	; (8008580 <__kernel_cos+0x188>)
 80084fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008500:	2400      	movs	r4, #0
 8008502:	4622      	mov	r2, r4
 8008504:	462b      	mov	r3, r5
 8008506:	2000      	movs	r0, #0
 8008508:	f7f7 fec6 	bl	8000298 <__aeabi_dsub>
 800850c:	4622      	mov	r2, r4
 800850e:	4680      	mov	r8, r0
 8008510:	4689      	mov	r9, r1
 8008512:	462b      	mov	r3, r5
 8008514:	4650      	mov	r0, sl
 8008516:	4659      	mov	r1, fp
 8008518:	f7f7 febe 	bl	8000298 <__aeabi_dsub>
 800851c:	4632      	mov	r2, r6
 800851e:	463b      	mov	r3, r7
 8008520:	f7f7 feba 	bl	8000298 <__aeabi_dsub>
 8008524:	4602      	mov	r2, r0
 8008526:	460b      	mov	r3, r1
 8008528:	4640      	mov	r0, r8
 800852a:	4649      	mov	r1, r9
 800852c:	e7da      	b.n	80084e4 <__kernel_cos+0xec>
 800852e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008568 <__kernel_cos+0x170>
 8008532:	e7db      	b.n	80084ec <__kernel_cos+0xf4>
 8008534:	f3af 8000 	nop.w
 8008538:	be8838d4 	.word	0xbe8838d4
 800853c:	bda8fae9 	.word	0xbda8fae9
 8008540:	bdb4b1c4 	.word	0xbdb4b1c4
 8008544:	3e21ee9e 	.word	0x3e21ee9e
 8008548:	809c52ad 	.word	0x809c52ad
 800854c:	3e927e4f 	.word	0x3e927e4f
 8008550:	19cb1590 	.word	0x19cb1590
 8008554:	3efa01a0 	.word	0x3efa01a0
 8008558:	16c15177 	.word	0x16c15177
 800855c:	3f56c16c 	.word	0x3f56c16c
 8008560:	5555554c 	.word	0x5555554c
 8008564:	3fa55555 	.word	0x3fa55555
 8008568:	00000000 	.word	0x00000000
 800856c:	3ff00000 	.word	0x3ff00000
 8008570:	3fe00000 	.word	0x3fe00000
 8008574:	3fd33332 	.word	0x3fd33332
 8008578:	3ff00000 	.word	0x3ff00000
 800857c:	3fe90000 	.word	0x3fe90000
 8008580:	3fd20000 	.word	0x3fd20000
 8008584:	00000000 	.word	0x00000000

08008588 <__kernel_rem_pio2>:
 8008588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858c:	ed2d 8b02 	vpush	{d8}
 8008590:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008594:	f112 0f14 	cmn.w	r2, #20
 8008598:	9308      	str	r3, [sp, #32]
 800859a:	9101      	str	r1, [sp, #4]
 800859c:	4bc6      	ldr	r3, [pc, #792]	; (80088b8 <__kernel_rem_pio2+0x330>)
 800859e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80085a0:	9009      	str	r0, [sp, #36]	; 0x24
 80085a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80085a6:	9304      	str	r3, [sp, #16]
 80085a8:	9b08      	ldr	r3, [sp, #32]
 80085aa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80085ae:	bfa8      	it	ge
 80085b0:	1ed4      	subge	r4, r2, #3
 80085b2:	9306      	str	r3, [sp, #24]
 80085b4:	bfb2      	itee	lt
 80085b6:	2400      	movlt	r4, #0
 80085b8:	2318      	movge	r3, #24
 80085ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80085be:	f06f 0317 	mvn.w	r3, #23
 80085c2:	fb04 3303 	mla	r3, r4, r3, r3
 80085c6:	eb03 0a02 	add.w	sl, r3, r2
 80085ca:	9b04      	ldr	r3, [sp, #16]
 80085cc:	9a06      	ldr	r2, [sp, #24]
 80085ce:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80088a8 <__kernel_rem_pio2+0x320>
 80085d2:	eb03 0802 	add.w	r8, r3, r2
 80085d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80085d8:	1aa7      	subs	r7, r4, r2
 80085da:	ae20      	add	r6, sp, #128	; 0x80
 80085dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80085e0:	2500      	movs	r5, #0
 80085e2:	4545      	cmp	r5, r8
 80085e4:	dd18      	ble.n	8008618 <__kernel_rem_pio2+0x90>
 80085e6:	9b08      	ldr	r3, [sp, #32]
 80085e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80085ec:	aa20      	add	r2, sp, #128	; 0x80
 80085ee:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80088a8 <__kernel_rem_pio2+0x320>
 80085f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80085f6:	f1c3 0301 	rsb	r3, r3, #1
 80085fa:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80085fe:	9307      	str	r3, [sp, #28]
 8008600:	9b07      	ldr	r3, [sp, #28]
 8008602:	9a04      	ldr	r2, [sp, #16]
 8008604:	4443      	add	r3, r8
 8008606:	429a      	cmp	r2, r3
 8008608:	db2f      	blt.n	800866a <__kernel_rem_pio2+0xe2>
 800860a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800860e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008612:	462f      	mov	r7, r5
 8008614:	2600      	movs	r6, #0
 8008616:	e01b      	b.n	8008650 <__kernel_rem_pio2+0xc8>
 8008618:	42ef      	cmn	r7, r5
 800861a:	d407      	bmi.n	800862c <__kernel_rem_pio2+0xa4>
 800861c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008620:	f7f7 ff88 	bl	8000534 <__aeabi_i2d>
 8008624:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008628:	3501      	adds	r5, #1
 800862a:	e7da      	b.n	80085e2 <__kernel_rem_pio2+0x5a>
 800862c:	ec51 0b18 	vmov	r0, r1, d8
 8008630:	e7f8      	b.n	8008624 <__kernel_rem_pio2+0x9c>
 8008632:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008636:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800863a:	f7f7 ffe5 	bl	8000608 <__aeabi_dmul>
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008646:	f7f7 fe29 	bl	800029c <__adddf3>
 800864a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800864e:	3601      	adds	r6, #1
 8008650:	9b06      	ldr	r3, [sp, #24]
 8008652:	429e      	cmp	r6, r3
 8008654:	f1a7 0708 	sub.w	r7, r7, #8
 8008658:	ddeb      	ble.n	8008632 <__kernel_rem_pio2+0xaa>
 800865a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800865e:	3508      	adds	r5, #8
 8008660:	ecab 7b02 	vstmia	fp!, {d7}
 8008664:	f108 0801 	add.w	r8, r8, #1
 8008668:	e7ca      	b.n	8008600 <__kernel_rem_pio2+0x78>
 800866a:	9b04      	ldr	r3, [sp, #16]
 800866c:	aa0c      	add	r2, sp, #48	; 0x30
 800866e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008672:	930b      	str	r3, [sp, #44]	; 0x2c
 8008674:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008676:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800867a:	9c04      	ldr	r4, [sp, #16]
 800867c:	930a      	str	r3, [sp, #40]	; 0x28
 800867e:	ab98      	add	r3, sp, #608	; 0x260
 8008680:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008684:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008688:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800868c:	f8cd b008 	str.w	fp, [sp, #8]
 8008690:	4625      	mov	r5, r4
 8008692:	2d00      	cmp	r5, #0
 8008694:	dc78      	bgt.n	8008788 <__kernel_rem_pio2+0x200>
 8008696:	ec47 6b10 	vmov	d0, r6, r7
 800869a:	4650      	mov	r0, sl
 800869c:	f000 fda0 	bl	80091e0 <scalbn>
 80086a0:	ec57 6b10 	vmov	r6, r7, d0
 80086a4:	2200      	movs	r2, #0
 80086a6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80086aa:	ee10 0a10 	vmov	r0, s0
 80086ae:	4639      	mov	r1, r7
 80086b0:	f7f7 ffaa 	bl	8000608 <__aeabi_dmul>
 80086b4:	ec41 0b10 	vmov	d0, r0, r1
 80086b8:	f000 fd12 	bl	80090e0 <floor>
 80086bc:	4b7f      	ldr	r3, [pc, #508]	; (80088bc <__kernel_rem_pio2+0x334>)
 80086be:	ec51 0b10 	vmov	r0, r1, d0
 80086c2:	2200      	movs	r2, #0
 80086c4:	f7f7 ffa0 	bl	8000608 <__aeabi_dmul>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	4630      	mov	r0, r6
 80086ce:	4639      	mov	r1, r7
 80086d0:	f7f7 fde2 	bl	8000298 <__aeabi_dsub>
 80086d4:	460f      	mov	r7, r1
 80086d6:	4606      	mov	r6, r0
 80086d8:	f7f8 fa46 	bl	8000b68 <__aeabi_d2iz>
 80086dc:	9007      	str	r0, [sp, #28]
 80086de:	f7f7 ff29 	bl	8000534 <__aeabi_i2d>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4630      	mov	r0, r6
 80086e8:	4639      	mov	r1, r7
 80086ea:	f7f7 fdd5 	bl	8000298 <__aeabi_dsub>
 80086ee:	f1ba 0f00 	cmp.w	sl, #0
 80086f2:	4606      	mov	r6, r0
 80086f4:	460f      	mov	r7, r1
 80086f6:	dd70      	ble.n	80087da <__kernel_rem_pio2+0x252>
 80086f8:	1e62      	subs	r2, r4, #1
 80086fa:	ab0c      	add	r3, sp, #48	; 0x30
 80086fc:	9d07      	ldr	r5, [sp, #28]
 80086fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008702:	f1ca 0118 	rsb	r1, sl, #24
 8008706:	fa40 f301 	asr.w	r3, r0, r1
 800870a:	441d      	add	r5, r3
 800870c:	408b      	lsls	r3, r1
 800870e:	1ac0      	subs	r0, r0, r3
 8008710:	ab0c      	add	r3, sp, #48	; 0x30
 8008712:	9507      	str	r5, [sp, #28]
 8008714:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008718:	f1ca 0317 	rsb	r3, sl, #23
 800871c:	fa40 f303 	asr.w	r3, r0, r3
 8008720:	9302      	str	r3, [sp, #8]
 8008722:	9b02      	ldr	r3, [sp, #8]
 8008724:	2b00      	cmp	r3, #0
 8008726:	dd66      	ble.n	80087f6 <__kernel_rem_pio2+0x26e>
 8008728:	9b07      	ldr	r3, [sp, #28]
 800872a:	2200      	movs	r2, #0
 800872c:	3301      	adds	r3, #1
 800872e:	9307      	str	r3, [sp, #28]
 8008730:	4615      	mov	r5, r2
 8008732:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008736:	4294      	cmp	r4, r2
 8008738:	f300 8099 	bgt.w	800886e <__kernel_rem_pio2+0x2e6>
 800873c:	f1ba 0f00 	cmp.w	sl, #0
 8008740:	dd07      	ble.n	8008752 <__kernel_rem_pio2+0x1ca>
 8008742:	f1ba 0f01 	cmp.w	sl, #1
 8008746:	f000 80a5 	beq.w	8008894 <__kernel_rem_pio2+0x30c>
 800874a:	f1ba 0f02 	cmp.w	sl, #2
 800874e:	f000 80c1 	beq.w	80088d4 <__kernel_rem_pio2+0x34c>
 8008752:	9b02      	ldr	r3, [sp, #8]
 8008754:	2b02      	cmp	r3, #2
 8008756:	d14e      	bne.n	80087f6 <__kernel_rem_pio2+0x26e>
 8008758:	4632      	mov	r2, r6
 800875a:	463b      	mov	r3, r7
 800875c:	4958      	ldr	r1, [pc, #352]	; (80088c0 <__kernel_rem_pio2+0x338>)
 800875e:	2000      	movs	r0, #0
 8008760:	f7f7 fd9a 	bl	8000298 <__aeabi_dsub>
 8008764:	4606      	mov	r6, r0
 8008766:	460f      	mov	r7, r1
 8008768:	2d00      	cmp	r5, #0
 800876a:	d044      	beq.n	80087f6 <__kernel_rem_pio2+0x26e>
 800876c:	4650      	mov	r0, sl
 800876e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80088b0 <__kernel_rem_pio2+0x328>
 8008772:	f000 fd35 	bl	80091e0 <scalbn>
 8008776:	4630      	mov	r0, r6
 8008778:	4639      	mov	r1, r7
 800877a:	ec53 2b10 	vmov	r2, r3, d0
 800877e:	f7f7 fd8b 	bl	8000298 <__aeabi_dsub>
 8008782:	4606      	mov	r6, r0
 8008784:	460f      	mov	r7, r1
 8008786:	e036      	b.n	80087f6 <__kernel_rem_pio2+0x26e>
 8008788:	4b4e      	ldr	r3, [pc, #312]	; (80088c4 <__kernel_rem_pio2+0x33c>)
 800878a:	2200      	movs	r2, #0
 800878c:	4630      	mov	r0, r6
 800878e:	4639      	mov	r1, r7
 8008790:	f7f7 ff3a 	bl	8000608 <__aeabi_dmul>
 8008794:	f7f8 f9e8 	bl	8000b68 <__aeabi_d2iz>
 8008798:	f7f7 fecc 	bl	8000534 <__aeabi_i2d>
 800879c:	4b4a      	ldr	r3, [pc, #296]	; (80088c8 <__kernel_rem_pio2+0x340>)
 800879e:	2200      	movs	r2, #0
 80087a0:	4680      	mov	r8, r0
 80087a2:	4689      	mov	r9, r1
 80087a4:	f7f7 ff30 	bl	8000608 <__aeabi_dmul>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	4630      	mov	r0, r6
 80087ae:	4639      	mov	r1, r7
 80087b0:	f7f7 fd72 	bl	8000298 <__aeabi_dsub>
 80087b4:	f7f8 f9d8 	bl	8000b68 <__aeabi_d2iz>
 80087b8:	9b02      	ldr	r3, [sp, #8]
 80087ba:	f843 0b04 	str.w	r0, [r3], #4
 80087be:	3d01      	subs	r5, #1
 80087c0:	9302      	str	r3, [sp, #8]
 80087c2:	ab70      	add	r3, sp, #448	; 0x1c0
 80087c4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80087c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087cc:	4640      	mov	r0, r8
 80087ce:	4649      	mov	r1, r9
 80087d0:	f7f7 fd64 	bl	800029c <__adddf3>
 80087d4:	4606      	mov	r6, r0
 80087d6:	460f      	mov	r7, r1
 80087d8:	e75b      	b.n	8008692 <__kernel_rem_pio2+0x10a>
 80087da:	d105      	bne.n	80087e8 <__kernel_rem_pio2+0x260>
 80087dc:	1e63      	subs	r3, r4, #1
 80087de:	aa0c      	add	r2, sp, #48	; 0x30
 80087e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80087e4:	15c3      	asrs	r3, r0, #23
 80087e6:	e79b      	b.n	8008720 <__kernel_rem_pio2+0x198>
 80087e8:	4b38      	ldr	r3, [pc, #224]	; (80088cc <__kernel_rem_pio2+0x344>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	f7f8 f992 	bl	8000b14 <__aeabi_dcmpge>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d139      	bne.n	8008868 <__kernel_rem_pio2+0x2e0>
 80087f4:	9002      	str	r0, [sp, #8]
 80087f6:	2200      	movs	r2, #0
 80087f8:	2300      	movs	r3, #0
 80087fa:	4630      	mov	r0, r6
 80087fc:	4639      	mov	r1, r7
 80087fe:	f7f8 f96b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008802:	2800      	cmp	r0, #0
 8008804:	f000 80b4 	beq.w	8008970 <__kernel_rem_pio2+0x3e8>
 8008808:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800880c:	465b      	mov	r3, fp
 800880e:	2200      	movs	r2, #0
 8008810:	9904      	ldr	r1, [sp, #16]
 8008812:	428b      	cmp	r3, r1
 8008814:	da65      	bge.n	80088e2 <__kernel_rem_pio2+0x35a>
 8008816:	2a00      	cmp	r2, #0
 8008818:	d07b      	beq.n	8008912 <__kernel_rem_pio2+0x38a>
 800881a:	ab0c      	add	r3, sp, #48	; 0x30
 800881c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008820:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 80a0 	beq.w	800896a <__kernel_rem_pio2+0x3e2>
 800882a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80088b0 <__kernel_rem_pio2+0x328>
 800882e:	4650      	mov	r0, sl
 8008830:	f000 fcd6 	bl	80091e0 <scalbn>
 8008834:	4f23      	ldr	r7, [pc, #140]	; (80088c4 <__kernel_rem_pio2+0x33c>)
 8008836:	ec55 4b10 	vmov	r4, r5, d0
 800883a:	46d8      	mov	r8, fp
 800883c:	2600      	movs	r6, #0
 800883e:	f1b8 0f00 	cmp.w	r8, #0
 8008842:	f280 80cf 	bge.w	80089e4 <__kernel_rem_pio2+0x45c>
 8008846:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80088a8 <__kernel_rem_pio2+0x320>
 800884a:	465f      	mov	r7, fp
 800884c:	f04f 0800 	mov.w	r8, #0
 8008850:	2f00      	cmp	r7, #0
 8008852:	f2c0 80fd 	blt.w	8008a50 <__kernel_rem_pio2+0x4c8>
 8008856:	ab70      	add	r3, sp, #448	; 0x1c0
 8008858:	f8df a074 	ldr.w	sl, [pc, #116]	; 80088d0 <__kernel_rem_pio2+0x348>
 800885c:	ec55 4b18 	vmov	r4, r5, d8
 8008860:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8008864:	2600      	movs	r6, #0
 8008866:	e0e5      	b.n	8008a34 <__kernel_rem_pio2+0x4ac>
 8008868:	2302      	movs	r3, #2
 800886a:	9302      	str	r3, [sp, #8]
 800886c:	e75c      	b.n	8008728 <__kernel_rem_pio2+0x1a0>
 800886e:	f8db 3000 	ldr.w	r3, [fp]
 8008872:	b955      	cbnz	r5, 800888a <__kernel_rem_pio2+0x302>
 8008874:	b123      	cbz	r3, 8008880 <__kernel_rem_pio2+0x2f8>
 8008876:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800887a:	f8cb 3000 	str.w	r3, [fp]
 800887e:	2301      	movs	r3, #1
 8008880:	3201      	adds	r2, #1
 8008882:	f10b 0b04 	add.w	fp, fp, #4
 8008886:	461d      	mov	r5, r3
 8008888:	e755      	b.n	8008736 <__kernel_rem_pio2+0x1ae>
 800888a:	1acb      	subs	r3, r1, r3
 800888c:	f8cb 3000 	str.w	r3, [fp]
 8008890:	462b      	mov	r3, r5
 8008892:	e7f5      	b.n	8008880 <__kernel_rem_pio2+0x2f8>
 8008894:	1e62      	subs	r2, r4, #1
 8008896:	ab0c      	add	r3, sp, #48	; 0x30
 8008898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80088a0:	a90c      	add	r1, sp, #48	; 0x30
 80088a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80088a6:	e754      	b.n	8008752 <__kernel_rem_pio2+0x1ca>
	...
 80088b4:	3ff00000 	.word	0x3ff00000
 80088b8:	08009938 	.word	0x08009938
 80088bc:	40200000 	.word	0x40200000
 80088c0:	3ff00000 	.word	0x3ff00000
 80088c4:	3e700000 	.word	0x3e700000
 80088c8:	41700000 	.word	0x41700000
 80088cc:	3fe00000 	.word	0x3fe00000
 80088d0:	080098f8 	.word	0x080098f8
 80088d4:	1e62      	subs	r2, r4, #1
 80088d6:	ab0c      	add	r3, sp, #48	; 0x30
 80088d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088dc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80088e0:	e7de      	b.n	80088a0 <__kernel_rem_pio2+0x318>
 80088e2:	a90c      	add	r1, sp, #48	; 0x30
 80088e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80088e8:	3b01      	subs	r3, #1
 80088ea:	430a      	orrs	r2, r1
 80088ec:	e790      	b.n	8008810 <__kernel_rem_pio2+0x288>
 80088ee:	3301      	adds	r3, #1
 80088f0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80088f4:	2900      	cmp	r1, #0
 80088f6:	d0fa      	beq.n	80088ee <__kernel_rem_pio2+0x366>
 80088f8:	9a08      	ldr	r2, [sp, #32]
 80088fa:	18e3      	adds	r3, r4, r3
 80088fc:	18a6      	adds	r6, r4, r2
 80088fe:	aa20      	add	r2, sp, #128	; 0x80
 8008900:	1c65      	adds	r5, r4, #1
 8008902:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008906:	9302      	str	r3, [sp, #8]
 8008908:	9b02      	ldr	r3, [sp, #8]
 800890a:	42ab      	cmp	r3, r5
 800890c:	da04      	bge.n	8008918 <__kernel_rem_pio2+0x390>
 800890e:	461c      	mov	r4, r3
 8008910:	e6b5      	b.n	800867e <__kernel_rem_pio2+0xf6>
 8008912:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008914:	2301      	movs	r3, #1
 8008916:	e7eb      	b.n	80088f0 <__kernel_rem_pio2+0x368>
 8008918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800891a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800891e:	f7f7 fe09 	bl	8000534 <__aeabi_i2d>
 8008922:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008928:	46b3      	mov	fp, r6
 800892a:	461c      	mov	r4, r3
 800892c:	2700      	movs	r7, #0
 800892e:	f04f 0800 	mov.w	r8, #0
 8008932:	f04f 0900 	mov.w	r9, #0
 8008936:	9b06      	ldr	r3, [sp, #24]
 8008938:	429f      	cmp	r7, r3
 800893a:	dd06      	ble.n	800894a <__kernel_rem_pio2+0x3c2>
 800893c:	ab70      	add	r3, sp, #448	; 0x1c0
 800893e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008942:	e9c3 8900 	strd	r8, r9, [r3]
 8008946:	3501      	adds	r5, #1
 8008948:	e7de      	b.n	8008908 <__kernel_rem_pio2+0x380>
 800894a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800894e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008952:	f7f7 fe59 	bl	8000608 <__aeabi_dmul>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	4640      	mov	r0, r8
 800895c:	4649      	mov	r1, r9
 800895e:	f7f7 fc9d 	bl	800029c <__adddf3>
 8008962:	3701      	adds	r7, #1
 8008964:	4680      	mov	r8, r0
 8008966:	4689      	mov	r9, r1
 8008968:	e7e5      	b.n	8008936 <__kernel_rem_pio2+0x3ae>
 800896a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800896e:	e754      	b.n	800881a <__kernel_rem_pio2+0x292>
 8008970:	ec47 6b10 	vmov	d0, r6, r7
 8008974:	f1ca 0000 	rsb	r0, sl, #0
 8008978:	f000 fc32 	bl	80091e0 <scalbn>
 800897c:	ec57 6b10 	vmov	r6, r7, d0
 8008980:	4b9f      	ldr	r3, [pc, #636]	; (8008c00 <__kernel_rem_pio2+0x678>)
 8008982:	ee10 0a10 	vmov	r0, s0
 8008986:	2200      	movs	r2, #0
 8008988:	4639      	mov	r1, r7
 800898a:	f7f8 f8c3 	bl	8000b14 <__aeabi_dcmpge>
 800898e:	b300      	cbz	r0, 80089d2 <__kernel_rem_pio2+0x44a>
 8008990:	4b9c      	ldr	r3, [pc, #624]	; (8008c04 <__kernel_rem_pio2+0x67c>)
 8008992:	2200      	movs	r2, #0
 8008994:	4630      	mov	r0, r6
 8008996:	4639      	mov	r1, r7
 8008998:	f7f7 fe36 	bl	8000608 <__aeabi_dmul>
 800899c:	f7f8 f8e4 	bl	8000b68 <__aeabi_d2iz>
 80089a0:	4605      	mov	r5, r0
 80089a2:	f7f7 fdc7 	bl	8000534 <__aeabi_i2d>
 80089a6:	4b96      	ldr	r3, [pc, #600]	; (8008c00 <__kernel_rem_pio2+0x678>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	f7f7 fe2d 	bl	8000608 <__aeabi_dmul>
 80089ae:	460b      	mov	r3, r1
 80089b0:	4602      	mov	r2, r0
 80089b2:	4639      	mov	r1, r7
 80089b4:	4630      	mov	r0, r6
 80089b6:	f7f7 fc6f 	bl	8000298 <__aeabi_dsub>
 80089ba:	f7f8 f8d5 	bl	8000b68 <__aeabi_d2iz>
 80089be:	f104 0b01 	add.w	fp, r4, #1
 80089c2:	ab0c      	add	r3, sp, #48	; 0x30
 80089c4:	f10a 0a18 	add.w	sl, sl, #24
 80089c8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80089cc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80089d0:	e72b      	b.n	800882a <__kernel_rem_pio2+0x2a2>
 80089d2:	4630      	mov	r0, r6
 80089d4:	4639      	mov	r1, r7
 80089d6:	f7f8 f8c7 	bl	8000b68 <__aeabi_d2iz>
 80089da:	ab0c      	add	r3, sp, #48	; 0x30
 80089dc:	46a3      	mov	fp, r4
 80089de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80089e2:	e722      	b.n	800882a <__kernel_rem_pio2+0x2a2>
 80089e4:	ab70      	add	r3, sp, #448	; 0x1c0
 80089e6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80089ea:	ab0c      	add	r3, sp, #48	; 0x30
 80089ec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80089f0:	f7f7 fda0 	bl	8000534 <__aeabi_i2d>
 80089f4:	4622      	mov	r2, r4
 80089f6:	462b      	mov	r3, r5
 80089f8:	f7f7 fe06 	bl	8000608 <__aeabi_dmul>
 80089fc:	4632      	mov	r2, r6
 80089fe:	e9c9 0100 	strd	r0, r1, [r9]
 8008a02:	463b      	mov	r3, r7
 8008a04:	4620      	mov	r0, r4
 8008a06:	4629      	mov	r1, r5
 8008a08:	f7f7 fdfe 	bl	8000608 <__aeabi_dmul>
 8008a0c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008a10:	4604      	mov	r4, r0
 8008a12:	460d      	mov	r5, r1
 8008a14:	e713      	b.n	800883e <__kernel_rem_pio2+0x2b6>
 8008a16:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008a1a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008a1e:	f7f7 fdf3 	bl	8000608 <__aeabi_dmul>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	4620      	mov	r0, r4
 8008a28:	4629      	mov	r1, r5
 8008a2a:	f7f7 fc37 	bl	800029c <__adddf3>
 8008a2e:	3601      	adds	r6, #1
 8008a30:	4604      	mov	r4, r0
 8008a32:	460d      	mov	r5, r1
 8008a34:	9b04      	ldr	r3, [sp, #16]
 8008a36:	429e      	cmp	r6, r3
 8008a38:	dc01      	bgt.n	8008a3e <__kernel_rem_pio2+0x4b6>
 8008a3a:	45b0      	cmp	r8, r6
 8008a3c:	daeb      	bge.n	8008a16 <__kernel_rem_pio2+0x48e>
 8008a3e:	ab48      	add	r3, sp, #288	; 0x120
 8008a40:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008a44:	e9c3 4500 	strd	r4, r5, [r3]
 8008a48:	3f01      	subs	r7, #1
 8008a4a:	f108 0801 	add.w	r8, r8, #1
 8008a4e:	e6ff      	b.n	8008850 <__kernel_rem_pio2+0x2c8>
 8008a50:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	dc0b      	bgt.n	8008a6e <__kernel_rem_pio2+0x4e6>
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	dc6e      	bgt.n	8008b38 <__kernel_rem_pio2+0x5b0>
 8008a5a:	d045      	beq.n	8008ae8 <__kernel_rem_pio2+0x560>
 8008a5c:	9b07      	ldr	r3, [sp, #28]
 8008a5e:	f003 0007 	and.w	r0, r3, #7
 8008a62:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008a66:	ecbd 8b02 	vpop	{d8}
 8008a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	d1f3      	bne.n	8008a5c <__kernel_rem_pio2+0x4d4>
 8008a74:	ab48      	add	r3, sp, #288	; 0x120
 8008a76:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8008a7a:	46d0      	mov	r8, sl
 8008a7c:	46d9      	mov	r9, fp
 8008a7e:	f1b9 0f00 	cmp.w	r9, #0
 8008a82:	f1a8 0808 	sub.w	r8, r8, #8
 8008a86:	dc64      	bgt.n	8008b52 <__kernel_rem_pio2+0x5ca>
 8008a88:	465c      	mov	r4, fp
 8008a8a:	2c01      	cmp	r4, #1
 8008a8c:	f1aa 0a08 	sub.w	sl, sl, #8
 8008a90:	dc7e      	bgt.n	8008b90 <__kernel_rem_pio2+0x608>
 8008a92:	2000      	movs	r0, #0
 8008a94:	2100      	movs	r1, #0
 8008a96:	f1bb 0f01 	cmp.w	fp, #1
 8008a9a:	f300 8097 	bgt.w	8008bcc <__kernel_rem_pio2+0x644>
 8008a9e:	9b02      	ldr	r3, [sp, #8]
 8008aa0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8008aa4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f040 8099 	bne.w	8008be0 <__kernel_rem_pio2+0x658>
 8008aae:	9b01      	ldr	r3, [sp, #4]
 8008ab0:	e9c3 5600 	strd	r5, r6, [r3]
 8008ab4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008ab8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008abc:	e7ce      	b.n	8008a5c <__kernel_rem_pio2+0x4d4>
 8008abe:	ab48      	add	r3, sp, #288	; 0x120
 8008ac0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac8:	f7f7 fbe8 	bl	800029c <__adddf3>
 8008acc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008ad0:	f1bb 0f00 	cmp.w	fp, #0
 8008ad4:	daf3      	bge.n	8008abe <__kernel_rem_pio2+0x536>
 8008ad6:	9b02      	ldr	r3, [sp, #8]
 8008ad8:	b113      	cbz	r3, 8008ae0 <__kernel_rem_pio2+0x558>
 8008ada:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ade:	4619      	mov	r1, r3
 8008ae0:	9b01      	ldr	r3, [sp, #4]
 8008ae2:	e9c3 0100 	strd	r0, r1, [r3]
 8008ae6:	e7b9      	b.n	8008a5c <__kernel_rem_pio2+0x4d4>
 8008ae8:	2000      	movs	r0, #0
 8008aea:	2100      	movs	r1, #0
 8008aec:	e7f0      	b.n	8008ad0 <__kernel_rem_pio2+0x548>
 8008aee:	ab48      	add	r3, sp, #288	; 0x120
 8008af0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	f7f7 fbd0 	bl	800029c <__adddf3>
 8008afc:	3c01      	subs	r4, #1
 8008afe:	2c00      	cmp	r4, #0
 8008b00:	daf5      	bge.n	8008aee <__kernel_rem_pio2+0x566>
 8008b02:	9b02      	ldr	r3, [sp, #8]
 8008b04:	b1e3      	cbz	r3, 8008b40 <__kernel_rem_pio2+0x5b8>
 8008b06:	4602      	mov	r2, r0
 8008b08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b0c:	9c01      	ldr	r4, [sp, #4]
 8008b0e:	e9c4 2300 	strd	r2, r3, [r4]
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008b1a:	f7f7 fbbd 	bl	8000298 <__aeabi_dsub>
 8008b1e:	ad4a      	add	r5, sp, #296	; 0x128
 8008b20:	2401      	movs	r4, #1
 8008b22:	45a3      	cmp	fp, r4
 8008b24:	da0f      	bge.n	8008b46 <__kernel_rem_pio2+0x5be>
 8008b26:	9b02      	ldr	r3, [sp, #8]
 8008b28:	b113      	cbz	r3, 8008b30 <__kernel_rem_pio2+0x5a8>
 8008b2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b2e:	4619      	mov	r1, r3
 8008b30:	9b01      	ldr	r3, [sp, #4]
 8008b32:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008b36:	e791      	b.n	8008a5c <__kernel_rem_pio2+0x4d4>
 8008b38:	465c      	mov	r4, fp
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	e7de      	b.n	8008afe <__kernel_rem_pio2+0x576>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	e7e2      	b.n	8008b0c <__kernel_rem_pio2+0x584>
 8008b46:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008b4a:	f7f7 fba7 	bl	800029c <__adddf3>
 8008b4e:	3401      	adds	r4, #1
 8008b50:	e7e7      	b.n	8008b22 <__kernel_rem_pio2+0x59a>
 8008b52:	e9d8 4500 	ldrd	r4, r5, [r8]
 8008b56:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	4632      	mov	r2, r6
 8008b5e:	463b      	mov	r3, r7
 8008b60:	4629      	mov	r1, r5
 8008b62:	f7f7 fb9b 	bl	800029c <__adddf3>
 8008b66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4620      	mov	r0, r4
 8008b70:	4629      	mov	r1, r5
 8008b72:	f7f7 fb91 	bl	8000298 <__aeabi_dsub>
 8008b76:	4632      	mov	r2, r6
 8008b78:	463b      	mov	r3, r7
 8008b7a:	f7f7 fb8f 	bl	800029c <__adddf3>
 8008b7e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008b82:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8008b86:	ed88 7b00 	vstr	d7, [r8]
 8008b8a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008b8e:	e776      	b.n	8008a7e <__kernel_rem_pio2+0x4f6>
 8008b90:	e9da 8900 	ldrd	r8, r9, [sl]
 8008b94:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008b98:	4640      	mov	r0, r8
 8008b9a:	4632      	mov	r2, r6
 8008b9c:	463b      	mov	r3, r7
 8008b9e:	4649      	mov	r1, r9
 8008ba0:	f7f7 fb7c 	bl	800029c <__adddf3>
 8008ba4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	4640      	mov	r0, r8
 8008bae:	4649      	mov	r1, r9
 8008bb0:	f7f7 fb72 	bl	8000298 <__aeabi_dsub>
 8008bb4:	4632      	mov	r2, r6
 8008bb6:	463b      	mov	r3, r7
 8008bb8:	f7f7 fb70 	bl	800029c <__adddf3>
 8008bbc:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008bc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008bc4:	ed8a 7b00 	vstr	d7, [sl]
 8008bc8:	3c01      	subs	r4, #1
 8008bca:	e75e      	b.n	8008a8a <__kernel_rem_pio2+0x502>
 8008bcc:	ab48      	add	r3, sp, #288	; 0x120
 8008bce:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	f7f7 fb61 	bl	800029c <__adddf3>
 8008bda:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008bde:	e75a      	b.n	8008a96 <__kernel_rem_pio2+0x50e>
 8008be0:	9b01      	ldr	r3, [sp, #4]
 8008be2:	9a01      	ldr	r2, [sp, #4]
 8008be4:	601d      	str	r5, [r3, #0]
 8008be6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008bea:	605c      	str	r4, [r3, #4]
 8008bec:	609f      	str	r7, [r3, #8]
 8008bee:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008bf2:	60d3      	str	r3, [r2, #12]
 8008bf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bf8:	6110      	str	r0, [r2, #16]
 8008bfa:	6153      	str	r3, [r2, #20]
 8008bfc:	e72e      	b.n	8008a5c <__kernel_rem_pio2+0x4d4>
 8008bfe:	bf00      	nop
 8008c00:	41700000 	.word	0x41700000
 8008c04:	3e700000 	.word	0x3e700000

08008c08 <__kernel_sin>:
 8008c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	ed2d 8b04 	vpush	{d8-d9}
 8008c10:	eeb0 8a41 	vmov.f32	s16, s2
 8008c14:	eef0 8a61 	vmov.f32	s17, s3
 8008c18:	ec55 4b10 	vmov	r4, r5, d0
 8008c1c:	b083      	sub	sp, #12
 8008c1e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008c22:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008c26:	9001      	str	r0, [sp, #4]
 8008c28:	da06      	bge.n	8008c38 <__kernel_sin+0x30>
 8008c2a:	ee10 0a10 	vmov	r0, s0
 8008c2e:	4629      	mov	r1, r5
 8008c30:	f7f7 ff9a 	bl	8000b68 <__aeabi_d2iz>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d051      	beq.n	8008cdc <__kernel_sin+0xd4>
 8008c38:	4622      	mov	r2, r4
 8008c3a:	462b      	mov	r3, r5
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	4629      	mov	r1, r5
 8008c40:	f7f7 fce2 	bl	8000608 <__aeabi_dmul>
 8008c44:	4682      	mov	sl, r0
 8008c46:	468b      	mov	fp, r1
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	4629      	mov	r1, r5
 8008c50:	f7f7 fcda 	bl	8000608 <__aeabi_dmul>
 8008c54:	a341      	add	r3, pc, #260	; (adr r3, 8008d5c <__kernel_sin+0x154>)
 8008c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5a:	4680      	mov	r8, r0
 8008c5c:	4689      	mov	r9, r1
 8008c5e:	4650      	mov	r0, sl
 8008c60:	4659      	mov	r1, fp
 8008c62:	f7f7 fcd1 	bl	8000608 <__aeabi_dmul>
 8008c66:	a33f      	add	r3, pc, #252	; (adr r3, 8008d64 <__kernel_sin+0x15c>)
 8008c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6c:	f7f7 fb14 	bl	8000298 <__aeabi_dsub>
 8008c70:	4652      	mov	r2, sl
 8008c72:	465b      	mov	r3, fp
 8008c74:	f7f7 fcc8 	bl	8000608 <__aeabi_dmul>
 8008c78:	a33c      	add	r3, pc, #240	; (adr r3, 8008d6c <__kernel_sin+0x164>)
 8008c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7e:	f7f7 fb0d 	bl	800029c <__adddf3>
 8008c82:	4652      	mov	r2, sl
 8008c84:	465b      	mov	r3, fp
 8008c86:	f7f7 fcbf 	bl	8000608 <__aeabi_dmul>
 8008c8a:	a33a      	add	r3, pc, #232	; (adr r3, 8008d74 <__kernel_sin+0x16c>)
 8008c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c90:	f7f7 fb02 	bl	8000298 <__aeabi_dsub>
 8008c94:	4652      	mov	r2, sl
 8008c96:	465b      	mov	r3, fp
 8008c98:	f7f7 fcb6 	bl	8000608 <__aeabi_dmul>
 8008c9c:	a337      	add	r3, pc, #220	; (adr r3, 8008d7c <__kernel_sin+0x174>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 fafb 	bl	800029c <__adddf3>
 8008ca6:	9b01      	ldr	r3, [sp, #4]
 8008ca8:	4606      	mov	r6, r0
 8008caa:	460f      	mov	r7, r1
 8008cac:	b9eb      	cbnz	r3, 8008cea <__kernel_sin+0xe2>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	4650      	mov	r0, sl
 8008cb4:	4659      	mov	r1, fp
 8008cb6:	f7f7 fca7 	bl	8000608 <__aeabi_dmul>
 8008cba:	a325      	add	r3, pc, #148	; (adr r3, 8008d50 <__kernel_sin+0x148>)
 8008cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc0:	f7f7 faea 	bl	8000298 <__aeabi_dsub>
 8008cc4:	4642      	mov	r2, r8
 8008cc6:	464b      	mov	r3, r9
 8008cc8:	f7f7 fc9e 	bl	8000608 <__aeabi_dmul>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	f7f7 fae2 	bl	800029c <__adddf3>
 8008cd8:	4604      	mov	r4, r0
 8008cda:	460d      	mov	r5, r1
 8008cdc:	ec45 4b10 	vmov	d0, r4, r5
 8008ce0:	b003      	add	sp, #12
 8008ce2:	ecbd 8b04 	vpop	{d8-d9}
 8008ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cea:	4b1b      	ldr	r3, [pc, #108]	; (8008d58 <__kernel_sin+0x150>)
 8008cec:	ec51 0b18 	vmov	r0, r1, d8
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f7f7 fc89 	bl	8000608 <__aeabi_dmul>
 8008cf6:	4632      	mov	r2, r6
 8008cf8:	ec41 0b19 	vmov	d9, r0, r1
 8008cfc:	463b      	mov	r3, r7
 8008cfe:	4640      	mov	r0, r8
 8008d00:	4649      	mov	r1, r9
 8008d02:	f7f7 fc81 	bl	8000608 <__aeabi_dmul>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	ec51 0b19 	vmov	r0, r1, d9
 8008d0e:	f7f7 fac3 	bl	8000298 <__aeabi_dsub>
 8008d12:	4652      	mov	r2, sl
 8008d14:	465b      	mov	r3, fp
 8008d16:	f7f7 fc77 	bl	8000608 <__aeabi_dmul>
 8008d1a:	ec53 2b18 	vmov	r2, r3, d8
 8008d1e:	f7f7 fabb 	bl	8000298 <__aeabi_dsub>
 8008d22:	a30b      	add	r3, pc, #44	; (adr r3, 8008d50 <__kernel_sin+0x148>)
 8008d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d28:	4606      	mov	r6, r0
 8008d2a:	460f      	mov	r7, r1
 8008d2c:	4640      	mov	r0, r8
 8008d2e:	4649      	mov	r1, r9
 8008d30:	f7f7 fc6a 	bl	8000608 <__aeabi_dmul>
 8008d34:	4602      	mov	r2, r0
 8008d36:	460b      	mov	r3, r1
 8008d38:	4630      	mov	r0, r6
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	f7f7 faae 	bl	800029c <__adddf3>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4620      	mov	r0, r4
 8008d46:	4629      	mov	r1, r5
 8008d48:	f7f7 faa6 	bl	8000298 <__aeabi_dsub>
 8008d4c:	e7c4      	b.n	8008cd8 <__kernel_sin+0xd0>
 8008d4e:	bf00      	nop
 8008d50:	55555549 	.word	0x55555549
 8008d54:	3fc55555 	.word	0x3fc55555
 8008d58:	3fe00000 	.word	0x3fe00000
 8008d5c:	5acfd57c 	.word	0x5acfd57c
 8008d60:	3de5d93a 	.word	0x3de5d93a
 8008d64:	8a2b9ceb 	.word	0x8a2b9ceb
 8008d68:	3e5ae5e6 	.word	0x3e5ae5e6
 8008d6c:	57b1fe7d 	.word	0x57b1fe7d
 8008d70:	3ec71de3 	.word	0x3ec71de3
 8008d74:	19c161d5 	.word	0x19c161d5
 8008d78:	3f2a01a0 	.word	0x3f2a01a0
 8008d7c:	1110f8a6 	.word	0x1110f8a6
 8008d80:	3f811111 	.word	0x3f811111
 8008d84:	00000000 	.word	0x00000000

08008d88 <atan>:
 8008d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d8c:	ec55 4b10 	vmov	r4, r5, d0
 8008d90:	4bc3      	ldr	r3, [pc, #780]	; (80090a0 <atan+0x318>)
 8008d92:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008d96:	429e      	cmp	r6, r3
 8008d98:	46ab      	mov	fp, r5
 8008d9a:	dd18      	ble.n	8008dce <atan+0x46>
 8008d9c:	4bc1      	ldr	r3, [pc, #772]	; (80090a4 <atan+0x31c>)
 8008d9e:	429e      	cmp	r6, r3
 8008da0:	dc01      	bgt.n	8008da6 <atan+0x1e>
 8008da2:	d109      	bne.n	8008db8 <atan+0x30>
 8008da4:	b144      	cbz	r4, 8008db8 <atan+0x30>
 8008da6:	4622      	mov	r2, r4
 8008da8:	462b      	mov	r3, r5
 8008daa:	4620      	mov	r0, r4
 8008dac:	4629      	mov	r1, r5
 8008dae:	f7f7 fa75 	bl	800029c <__adddf3>
 8008db2:	4604      	mov	r4, r0
 8008db4:	460d      	mov	r5, r1
 8008db6:	e006      	b.n	8008dc6 <atan+0x3e>
 8008db8:	f1bb 0f00 	cmp.w	fp, #0
 8008dbc:	f300 8131 	bgt.w	8009022 <atan+0x29a>
 8008dc0:	a59b      	add	r5, pc, #620	; (adr r5, 8009030 <atan+0x2a8>)
 8008dc2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008dc6:	ec45 4b10 	vmov	d0, r4, r5
 8008dca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dce:	4bb6      	ldr	r3, [pc, #728]	; (80090a8 <atan+0x320>)
 8008dd0:	429e      	cmp	r6, r3
 8008dd2:	dc14      	bgt.n	8008dfe <atan+0x76>
 8008dd4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008dd8:	429e      	cmp	r6, r3
 8008dda:	dc0d      	bgt.n	8008df8 <atan+0x70>
 8008ddc:	a396      	add	r3, pc, #600	; (adr r3, 8009038 <atan+0x2b0>)
 8008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de2:	ee10 0a10 	vmov	r0, s0
 8008de6:	4629      	mov	r1, r5
 8008de8:	f7f7 fa58 	bl	800029c <__adddf3>
 8008dec:	4baf      	ldr	r3, [pc, #700]	; (80090ac <atan+0x324>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	f7f7 fe9a 	bl	8000b28 <__aeabi_dcmpgt>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d1e6      	bne.n	8008dc6 <atan+0x3e>
 8008df8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008dfc:	e02b      	b.n	8008e56 <atan+0xce>
 8008dfe:	f000 f963 	bl	80090c8 <fabs>
 8008e02:	4bab      	ldr	r3, [pc, #684]	; (80090b0 <atan+0x328>)
 8008e04:	429e      	cmp	r6, r3
 8008e06:	ec55 4b10 	vmov	r4, r5, d0
 8008e0a:	f300 80bf 	bgt.w	8008f8c <atan+0x204>
 8008e0e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008e12:	429e      	cmp	r6, r3
 8008e14:	f300 80a0 	bgt.w	8008f58 <atan+0x1d0>
 8008e18:	ee10 2a10 	vmov	r2, s0
 8008e1c:	ee10 0a10 	vmov	r0, s0
 8008e20:	462b      	mov	r3, r5
 8008e22:	4629      	mov	r1, r5
 8008e24:	f7f7 fa3a 	bl	800029c <__adddf3>
 8008e28:	4ba0      	ldr	r3, [pc, #640]	; (80090ac <atan+0x324>)
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f7f7 fa34 	bl	8000298 <__aeabi_dsub>
 8008e30:	2200      	movs	r2, #0
 8008e32:	4606      	mov	r6, r0
 8008e34:	460f      	mov	r7, r1
 8008e36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	4629      	mov	r1, r5
 8008e3e:	f7f7 fa2d 	bl	800029c <__adddf3>
 8008e42:	4602      	mov	r2, r0
 8008e44:	460b      	mov	r3, r1
 8008e46:	4630      	mov	r0, r6
 8008e48:	4639      	mov	r1, r7
 8008e4a:	f7f7 fd07 	bl	800085c <__aeabi_ddiv>
 8008e4e:	f04f 0a00 	mov.w	sl, #0
 8008e52:	4604      	mov	r4, r0
 8008e54:	460d      	mov	r5, r1
 8008e56:	4622      	mov	r2, r4
 8008e58:	462b      	mov	r3, r5
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	4629      	mov	r1, r5
 8008e5e:	f7f7 fbd3 	bl	8000608 <__aeabi_dmul>
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	4680      	mov	r8, r0
 8008e68:	4689      	mov	r9, r1
 8008e6a:	f7f7 fbcd 	bl	8000608 <__aeabi_dmul>
 8008e6e:	a374      	add	r3, pc, #464	; (adr r3, 8009040 <atan+0x2b8>)
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	4606      	mov	r6, r0
 8008e76:	460f      	mov	r7, r1
 8008e78:	f7f7 fbc6 	bl	8000608 <__aeabi_dmul>
 8008e7c:	a372      	add	r3, pc, #456	; (adr r3, 8009048 <atan+0x2c0>)
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	f7f7 fa0b 	bl	800029c <__adddf3>
 8008e86:	4632      	mov	r2, r6
 8008e88:	463b      	mov	r3, r7
 8008e8a:	f7f7 fbbd 	bl	8000608 <__aeabi_dmul>
 8008e8e:	a370      	add	r3, pc, #448	; (adr r3, 8009050 <atan+0x2c8>)
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	f7f7 fa02 	bl	800029c <__adddf3>
 8008e98:	4632      	mov	r2, r6
 8008e9a:	463b      	mov	r3, r7
 8008e9c:	f7f7 fbb4 	bl	8000608 <__aeabi_dmul>
 8008ea0:	a36d      	add	r3, pc, #436	; (adr r3, 8009058 <atan+0x2d0>)
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	f7f7 f9f9 	bl	800029c <__adddf3>
 8008eaa:	4632      	mov	r2, r6
 8008eac:	463b      	mov	r3, r7
 8008eae:	f7f7 fbab 	bl	8000608 <__aeabi_dmul>
 8008eb2:	a36b      	add	r3, pc, #428	; (adr r3, 8009060 <atan+0x2d8>)
 8008eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb8:	f7f7 f9f0 	bl	800029c <__adddf3>
 8008ebc:	4632      	mov	r2, r6
 8008ebe:	463b      	mov	r3, r7
 8008ec0:	f7f7 fba2 	bl	8000608 <__aeabi_dmul>
 8008ec4:	a368      	add	r3, pc, #416	; (adr r3, 8009068 <atan+0x2e0>)
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	f7f7 f9e7 	bl	800029c <__adddf3>
 8008ece:	4642      	mov	r2, r8
 8008ed0:	464b      	mov	r3, r9
 8008ed2:	f7f7 fb99 	bl	8000608 <__aeabi_dmul>
 8008ed6:	a366      	add	r3, pc, #408	; (adr r3, 8009070 <atan+0x2e8>)
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	4680      	mov	r8, r0
 8008ede:	4689      	mov	r9, r1
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	4639      	mov	r1, r7
 8008ee4:	f7f7 fb90 	bl	8000608 <__aeabi_dmul>
 8008ee8:	a363      	add	r3, pc, #396	; (adr r3, 8009078 <atan+0x2f0>)
 8008eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eee:	f7f7 f9d3 	bl	8000298 <__aeabi_dsub>
 8008ef2:	4632      	mov	r2, r6
 8008ef4:	463b      	mov	r3, r7
 8008ef6:	f7f7 fb87 	bl	8000608 <__aeabi_dmul>
 8008efa:	a361      	add	r3, pc, #388	; (adr r3, 8009080 <atan+0x2f8>)
 8008efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f00:	f7f7 f9ca 	bl	8000298 <__aeabi_dsub>
 8008f04:	4632      	mov	r2, r6
 8008f06:	463b      	mov	r3, r7
 8008f08:	f7f7 fb7e 	bl	8000608 <__aeabi_dmul>
 8008f0c:	a35e      	add	r3, pc, #376	; (adr r3, 8009088 <atan+0x300>)
 8008f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f12:	f7f7 f9c1 	bl	8000298 <__aeabi_dsub>
 8008f16:	4632      	mov	r2, r6
 8008f18:	463b      	mov	r3, r7
 8008f1a:	f7f7 fb75 	bl	8000608 <__aeabi_dmul>
 8008f1e:	a35c      	add	r3, pc, #368	; (adr r3, 8009090 <atan+0x308>)
 8008f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f24:	f7f7 f9b8 	bl	8000298 <__aeabi_dsub>
 8008f28:	4632      	mov	r2, r6
 8008f2a:	463b      	mov	r3, r7
 8008f2c:	f7f7 fb6c 	bl	8000608 <__aeabi_dmul>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
 8008f34:	4640      	mov	r0, r8
 8008f36:	4649      	mov	r1, r9
 8008f38:	f7f7 f9b0 	bl	800029c <__adddf3>
 8008f3c:	4622      	mov	r2, r4
 8008f3e:	462b      	mov	r3, r5
 8008f40:	f7f7 fb62 	bl	8000608 <__aeabi_dmul>
 8008f44:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	d14b      	bne.n	8008fe6 <atan+0x25e>
 8008f4e:	4620      	mov	r0, r4
 8008f50:	4629      	mov	r1, r5
 8008f52:	f7f7 f9a1 	bl	8000298 <__aeabi_dsub>
 8008f56:	e72c      	b.n	8008db2 <atan+0x2a>
 8008f58:	ee10 0a10 	vmov	r0, s0
 8008f5c:	4b53      	ldr	r3, [pc, #332]	; (80090ac <atan+0x324>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	4629      	mov	r1, r5
 8008f62:	f7f7 f999 	bl	8000298 <__aeabi_dsub>
 8008f66:	4b51      	ldr	r3, [pc, #324]	; (80090ac <atan+0x324>)
 8008f68:	4606      	mov	r6, r0
 8008f6a:	460f      	mov	r7, r1
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	4620      	mov	r0, r4
 8008f70:	4629      	mov	r1, r5
 8008f72:	f7f7 f993 	bl	800029c <__adddf3>
 8008f76:	4602      	mov	r2, r0
 8008f78:	460b      	mov	r3, r1
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	4639      	mov	r1, r7
 8008f7e:	f7f7 fc6d 	bl	800085c <__aeabi_ddiv>
 8008f82:	f04f 0a01 	mov.w	sl, #1
 8008f86:	4604      	mov	r4, r0
 8008f88:	460d      	mov	r5, r1
 8008f8a:	e764      	b.n	8008e56 <atan+0xce>
 8008f8c:	4b49      	ldr	r3, [pc, #292]	; (80090b4 <atan+0x32c>)
 8008f8e:	429e      	cmp	r6, r3
 8008f90:	da1d      	bge.n	8008fce <atan+0x246>
 8008f92:	ee10 0a10 	vmov	r0, s0
 8008f96:	4b48      	ldr	r3, [pc, #288]	; (80090b8 <atan+0x330>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	4629      	mov	r1, r5
 8008f9c:	f7f7 f97c 	bl	8000298 <__aeabi_dsub>
 8008fa0:	4b45      	ldr	r3, [pc, #276]	; (80090b8 <atan+0x330>)
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	460f      	mov	r7, r1
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	4620      	mov	r0, r4
 8008faa:	4629      	mov	r1, r5
 8008fac:	f7f7 fb2c 	bl	8000608 <__aeabi_dmul>
 8008fb0:	4b3e      	ldr	r3, [pc, #248]	; (80090ac <atan+0x324>)
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f7f7 f972 	bl	800029c <__adddf3>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	4639      	mov	r1, r7
 8008fc0:	f7f7 fc4c 	bl	800085c <__aeabi_ddiv>
 8008fc4:	f04f 0a02 	mov.w	sl, #2
 8008fc8:	4604      	mov	r4, r0
 8008fca:	460d      	mov	r5, r1
 8008fcc:	e743      	b.n	8008e56 <atan+0xce>
 8008fce:	462b      	mov	r3, r5
 8008fd0:	ee10 2a10 	vmov	r2, s0
 8008fd4:	4939      	ldr	r1, [pc, #228]	; (80090bc <atan+0x334>)
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	f7f7 fc40 	bl	800085c <__aeabi_ddiv>
 8008fdc:	f04f 0a03 	mov.w	sl, #3
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	460d      	mov	r5, r1
 8008fe4:	e737      	b.n	8008e56 <atan+0xce>
 8008fe6:	4b36      	ldr	r3, [pc, #216]	; (80090c0 <atan+0x338>)
 8008fe8:	4e36      	ldr	r6, [pc, #216]	; (80090c4 <atan+0x33c>)
 8008fea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008fee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008ff2:	e9da 2300 	ldrd	r2, r3, [sl]
 8008ff6:	f7f7 f94f 	bl	8000298 <__aeabi_dsub>
 8008ffa:	4622      	mov	r2, r4
 8008ffc:	462b      	mov	r3, r5
 8008ffe:	f7f7 f94b 	bl	8000298 <__aeabi_dsub>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	e9d6 0100 	ldrd	r0, r1, [r6]
 800900a:	f7f7 f945 	bl	8000298 <__aeabi_dsub>
 800900e:	f1bb 0f00 	cmp.w	fp, #0
 8009012:	4604      	mov	r4, r0
 8009014:	460d      	mov	r5, r1
 8009016:	f6bf aed6 	bge.w	8008dc6 <atan+0x3e>
 800901a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800901e:	461d      	mov	r5, r3
 8009020:	e6d1      	b.n	8008dc6 <atan+0x3e>
 8009022:	a51d      	add	r5, pc, #116	; (adr r5, 8009098 <atan+0x310>)
 8009024:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009028:	e6cd      	b.n	8008dc6 <atan+0x3e>
 800902a:	bf00      	nop
 800902c:	f3af 8000 	nop.w
 8009030:	54442d18 	.word	0x54442d18
 8009034:	bff921fb 	.word	0xbff921fb
 8009038:	8800759c 	.word	0x8800759c
 800903c:	7e37e43c 	.word	0x7e37e43c
 8009040:	e322da11 	.word	0xe322da11
 8009044:	3f90ad3a 	.word	0x3f90ad3a
 8009048:	24760deb 	.word	0x24760deb
 800904c:	3fa97b4b 	.word	0x3fa97b4b
 8009050:	a0d03d51 	.word	0xa0d03d51
 8009054:	3fb10d66 	.word	0x3fb10d66
 8009058:	c54c206e 	.word	0xc54c206e
 800905c:	3fb745cd 	.word	0x3fb745cd
 8009060:	920083ff 	.word	0x920083ff
 8009064:	3fc24924 	.word	0x3fc24924
 8009068:	5555550d 	.word	0x5555550d
 800906c:	3fd55555 	.word	0x3fd55555
 8009070:	2c6a6c2f 	.word	0x2c6a6c2f
 8009074:	bfa2b444 	.word	0xbfa2b444
 8009078:	52defd9a 	.word	0x52defd9a
 800907c:	3fadde2d 	.word	0x3fadde2d
 8009080:	af749a6d 	.word	0xaf749a6d
 8009084:	3fb3b0f2 	.word	0x3fb3b0f2
 8009088:	fe231671 	.word	0xfe231671
 800908c:	3fbc71c6 	.word	0x3fbc71c6
 8009090:	9998ebc4 	.word	0x9998ebc4
 8009094:	3fc99999 	.word	0x3fc99999
 8009098:	54442d18 	.word	0x54442d18
 800909c:	3ff921fb 	.word	0x3ff921fb
 80090a0:	440fffff 	.word	0x440fffff
 80090a4:	7ff00000 	.word	0x7ff00000
 80090a8:	3fdbffff 	.word	0x3fdbffff
 80090ac:	3ff00000 	.word	0x3ff00000
 80090b0:	3ff2ffff 	.word	0x3ff2ffff
 80090b4:	40038000 	.word	0x40038000
 80090b8:	3ff80000 	.word	0x3ff80000
 80090bc:	bff00000 	.word	0xbff00000
 80090c0:	08009968 	.word	0x08009968
 80090c4:	08009948 	.word	0x08009948

080090c8 <fabs>:
 80090c8:	ec51 0b10 	vmov	r0, r1, d0
 80090cc:	ee10 2a10 	vmov	r2, s0
 80090d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80090d4:	ec43 2b10 	vmov	d0, r2, r3
 80090d8:	4770      	bx	lr
 80090da:	0000      	movs	r0, r0
 80090dc:	0000      	movs	r0, r0
	...

080090e0 <floor>:
 80090e0:	ec51 0b10 	vmov	r0, r1, d0
 80090e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80090ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80090f0:	2e13      	cmp	r6, #19
 80090f2:	ee10 5a10 	vmov	r5, s0
 80090f6:	ee10 8a10 	vmov	r8, s0
 80090fa:	460c      	mov	r4, r1
 80090fc:	dc32      	bgt.n	8009164 <floor+0x84>
 80090fe:	2e00      	cmp	r6, #0
 8009100:	da14      	bge.n	800912c <floor+0x4c>
 8009102:	a333      	add	r3, pc, #204	; (adr r3, 80091d0 <floor+0xf0>)
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	f7f7 f8c8 	bl	800029c <__adddf3>
 800910c:	2200      	movs	r2, #0
 800910e:	2300      	movs	r3, #0
 8009110:	f7f7 fd0a 	bl	8000b28 <__aeabi_dcmpgt>
 8009114:	b138      	cbz	r0, 8009126 <floor+0x46>
 8009116:	2c00      	cmp	r4, #0
 8009118:	da57      	bge.n	80091ca <floor+0xea>
 800911a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800911e:	431d      	orrs	r5, r3
 8009120:	d001      	beq.n	8009126 <floor+0x46>
 8009122:	4c2d      	ldr	r4, [pc, #180]	; (80091d8 <floor+0xf8>)
 8009124:	2500      	movs	r5, #0
 8009126:	4621      	mov	r1, r4
 8009128:	4628      	mov	r0, r5
 800912a:	e025      	b.n	8009178 <floor+0x98>
 800912c:	4f2b      	ldr	r7, [pc, #172]	; (80091dc <floor+0xfc>)
 800912e:	4137      	asrs	r7, r6
 8009130:	ea01 0307 	and.w	r3, r1, r7
 8009134:	4303      	orrs	r3, r0
 8009136:	d01f      	beq.n	8009178 <floor+0x98>
 8009138:	a325      	add	r3, pc, #148	; (adr r3, 80091d0 <floor+0xf0>)
 800913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913e:	f7f7 f8ad 	bl	800029c <__adddf3>
 8009142:	2200      	movs	r2, #0
 8009144:	2300      	movs	r3, #0
 8009146:	f7f7 fcef 	bl	8000b28 <__aeabi_dcmpgt>
 800914a:	2800      	cmp	r0, #0
 800914c:	d0eb      	beq.n	8009126 <floor+0x46>
 800914e:	2c00      	cmp	r4, #0
 8009150:	bfbe      	ittt	lt
 8009152:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009156:	fa43 f606 	asrlt.w	r6, r3, r6
 800915a:	19a4      	addlt	r4, r4, r6
 800915c:	ea24 0407 	bic.w	r4, r4, r7
 8009160:	2500      	movs	r5, #0
 8009162:	e7e0      	b.n	8009126 <floor+0x46>
 8009164:	2e33      	cmp	r6, #51	; 0x33
 8009166:	dd0b      	ble.n	8009180 <floor+0xa0>
 8009168:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800916c:	d104      	bne.n	8009178 <floor+0x98>
 800916e:	ee10 2a10 	vmov	r2, s0
 8009172:	460b      	mov	r3, r1
 8009174:	f7f7 f892 	bl	800029c <__adddf3>
 8009178:	ec41 0b10 	vmov	d0, r0, r1
 800917c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009180:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009188:	fa23 f707 	lsr.w	r7, r3, r7
 800918c:	4207      	tst	r7, r0
 800918e:	d0f3      	beq.n	8009178 <floor+0x98>
 8009190:	a30f      	add	r3, pc, #60	; (adr r3, 80091d0 <floor+0xf0>)
 8009192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009196:	f7f7 f881 	bl	800029c <__adddf3>
 800919a:	2200      	movs	r2, #0
 800919c:	2300      	movs	r3, #0
 800919e:	f7f7 fcc3 	bl	8000b28 <__aeabi_dcmpgt>
 80091a2:	2800      	cmp	r0, #0
 80091a4:	d0bf      	beq.n	8009126 <floor+0x46>
 80091a6:	2c00      	cmp	r4, #0
 80091a8:	da02      	bge.n	80091b0 <floor+0xd0>
 80091aa:	2e14      	cmp	r6, #20
 80091ac:	d103      	bne.n	80091b6 <floor+0xd6>
 80091ae:	3401      	adds	r4, #1
 80091b0:	ea25 0507 	bic.w	r5, r5, r7
 80091b4:	e7b7      	b.n	8009126 <floor+0x46>
 80091b6:	2301      	movs	r3, #1
 80091b8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80091bc:	fa03 f606 	lsl.w	r6, r3, r6
 80091c0:	4435      	add	r5, r6
 80091c2:	4545      	cmp	r5, r8
 80091c4:	bf38      	it	cc
 80091c6:	18e4      	addcc	r4, r4, r3
 80091c8:	e7f2      	b.n	80091b0 <floor+0xd0>
 80091ca:	2500      	movs	r5, #0
 80091cc:	462c      	mov	r4, r5
 80091ce:	e7aa      	b.n	8009126 <floor+0x46>
 80091d0:	8800759c 	.word	0x8800759c
 80091d4:	7e37e43c 	.word	0x7e37e43c
 80091d8:	bff00000 	.word	0xbff00000
 80091dc:	000fffff 	.word	0x000fffff

080091e0 <scalbn>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	ec55 4b10 	vmov	r4, r5, d0
 80091e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80091ea:	4606      	mov	r6, r0
 80091ec:	462b      	mov	r3, r5
 80091ee:	b99a      	cbnz	r2, 8009218 <scalbn+0x38>
 80091f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80091f4:	4323      	orrs	r3, r4
 80091f6:	d036      	beq.n	8009266 <scalbn+0x86>
 80091f8:	4b39      	ldr	r3, [pc, #228]	; (80092e0 <scalbn+0x100>)
 80091fa:	4629      	mov	r1, r5
 80091fc:	ee10 0a10 	vmov	r0, s0
 8009200:	2200      	movs	r2, #0
 8009202:	f7f7 fa01 	bl	8000608 <__aeabi_dmul>
 8009206:	4b37      	ldr	r3, [pc, #220]	; (80092e4 <scalbn+0x104>)
 8009208:	429e      	cmp	r6, r3
 800920a:	4604      	mov	r4, r0
 800920c:	460d      	mov	r5, r1
 800920e:	da10      	bge.n	8009232 <scalbn+0x52>
 8009210:	a32b      	add	r3, pc, #172	; (adr r3, 80092c0 <scalbn+0xe0>)
 8009212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009216:	e03a      	b.n	800928e <scalbn+0xae>
 8009218:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800921c:	428a      	cmp	r2, r1
 800921e:	d10c      	bne.n	800923a <scalbn+0x5a>
 8009220:	ee10 2a10 	vmov	r2, s0
 8009224:	4620      	mov	r0, r4
 8009226:	4629      	mov	r1, r5
 8009228:	f7f7 f838 	bl	800029c <__adddf3>
 800922c:	4604      	mov	r4, r0
 800922e:	460d      	mov	r5, r1
 8009230:	e019      	b.n	8009266 <scalbn+0x86>
 8009232:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009236:	460b      	mov	r3, r1
 8009238:	3a36      	subs	r2, #54	; 0x36
 800923a:	4432      	add	r2, r6
 800923c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009240:	428a      	cmp	r2, r1
 8009242:	dd08      	ble.n	8009256 <scalbn+0x76>
 8009244:	2d00      	cmp	r5, #0
 8009246:	a120      	add	r1, pc, #128	; (adr r1, 80092c8 <scalbn+0xe8>)
 8009248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800924c:	da1c      	bge.n	8009288 <scalbn+0xa8>
 800924e:	a120      	add	r1, pc, #128	; (adr r1, 80092d0 <scalbn+0xf0>)
 8009250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009254:	e018      	b.n	8009288 <scalbn+0xa8>
 8009256:	2a00      	cmp	r2, #0
 8009258:	dd08      	ble.n	800926c <scalbn+0x8c>
 800925a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800925e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009262:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009266:	ec45 4b10 	vmov	d0, r4, r5
 800926a:	bd70      	pop	{r4, r5, r6, pc}
 800926c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009270:	da19      	bge.n	80092a6 <scalbn+0xc6>
 8009272:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009276:	429e      	cmp	r6, r3
 8009278:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800927c:	dd0a      	ble.n	8009294 <scalbn+0xb4>
 800927e:	a112      	add	r1, pc, #72	; (adr r1, 80092c8 <scalbn+0xe8>)
 8009280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1e2      	bne.n	800924e <scalbn+0x6e>
 8009288:	a30f      	add	r3, pc, #60	; (adr r3, 80092c8 <scalbn+0xe8>)
 800928a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928e:	f7f7 f9bb 	bl	8000608 <__aeabi_dmul>
 8009292:	e7cb      	b.n	800922c <scalbn+0x4c>
 8009294:	a10a      	add	r1, pc, #40	; (adr r1, 80092c0 <scalbn+0xe0>)
 8009296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d0b8      	beq.n	8009210 <scalbn+0x30>
 800929e:	a10e      	add	r1, pc, #56	; (adr r1, 80092d8 <scalbn+0xf8>)
 80092a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092a4:	e7b4      	b.n	8009210 <scalbn+0x30>
 80092a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80092aa:	3236      	adds	r2, #54	; 0x36
 80092ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80092b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80092b4:	4620      	mov	r0, r4
 80092b6:	4b0c      	ldr	r3, [pc, #48]	; (80092e8 <scalbn+0x108>)
 80092b8:	2200      	movs	r2, #0
 80092ba:	e7e8      	b.n	800928e <scalbn+0xae>
 80092bc:	f3af 8000 	nop.w
 80092c0:	c2f8f359 	.word	0xc2f8f359
 80092c4:	01a56e1f 	.word	0x01a56e1f
 80092c8:	8800759c 	.word	0x8800759c
 80092cc:	7e37e43c 	.word	0x7e37e43c
 80092d0:	8800759c 	.word	0x8800759c
 80092d4:	fe37e43c 	.word	0xfe37e43c
 80092d8:	c2f8f359 	.word	0xc2f8f359
 80092dc:	81a56e1f 	.word	0x81a56e1f
 80092e0:	43500000 	.word	0x43500000
 80092e4:	ffff3cb0 	.word	0xffff3cb0
 80092e8:	3c900000 	.word	0x3c900000

080092ec <_init>:
 80092ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ee:	bf00      	nop
 80092f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092f2:	bc08      	pop	{r3}
 80092f4:	469e      	mov	lr, r3
 80092f6:	4770      	bx	lr

080092f8 <_fini>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	bf00      	nop
 80092fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fe:	bc08      	pop	{r3}
 8009300:	469e      	mov	lr, r3
 8009302:	4770      	bx	lr
