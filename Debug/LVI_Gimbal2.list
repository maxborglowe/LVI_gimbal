
LVI_Gimbal2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  0800b118  0800b118  0001b118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8e8  0800b8e8  000221fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8e8  0800b8e8  0001b8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8f0  0800b8f0  000221fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8f0  0800b8f0  0001b8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8f4  0800b8f4  0001b8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000021fc  20000000  0800b8f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004308  200021fc  0800daf4  000221fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006504  0800daf4  00026504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000221fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002607f  00000000  00000000  0002222c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000467b  00000000  00000000  000482ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00016c3e  00000000  00000000  0004c926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  00063568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002b50  00000000  00000000  000643f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b0a9  00000000  00000000  00066f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021538  00000000  00000000  00081fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e989  00000000  00000000  000a3521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00141eaa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a3c  00000000  00000000  00141f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200021fc 	.word	0x200021fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b0fc 	.word	0x0800b0fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20002200 	.word	0x20002200
 80001dc:	0800b0fc 	.word	0x0800b0fc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <as5048a_read>:
uint8_t calcEvenParity(uint16_t value) {
	uint8_t cnt = 0;

	for (uint8_t i = 0; i < 16; i++) {
		if (value & 0x1) {
			cnt++;
 8000f50:	f001 0301 	and.w	r3, r1, #1
	uint16_t cmd = CMD_READ | reg;
 8000f54:	f441 4280 	orr.w	r2, r1, #16384	; 0x4000
uint16_t as5048a_read(uint16_t ss, uint16_t reg) {
 8000f58:	b530      	push	{r4, r5, lr}
 8000f5a:	4604      	mov	r4, r0
		if (value & 0x1) {
 8000f5c:	0788      	lsls	r0, r1, #30
			cnt++;
 8000f5e:	bf48      	it	mi
 8000f60:	3301      	addmi	r3, #1
		if (value & 0x1) {
 8000f62:	0751      	lsls	r1, r2, #29
			cnt++;
 8000f64:	bf44      	itt	mi
 8000f66:	3301      	addmi	r3, #1
 8000f68:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f6a:	0715      	lsls	r5, r2, #28
			cnt++;
 8000f6c:	bf44      	itt	mi
 8000f6e:	3301      	addmi	r3, #1
 8000f70:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f72:	06d0      	lsls	r0, r2, #27
			cnt++;
 8000f74:	bf44      	itt	mi
 8000f76:	3301      	addmi	r3, #1
 8000f78:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f7a:	0691      	lsls	r1, r2, #26
			cnt++;
 8000f7c:	bf44      	itt	mi
 8000f7e:	3301      	addmi	r3, #1
 8000f80:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f82:	0655      	lsls	r5, r2, #25
			cnt++;
 8000f84:	bf44      	itt	mi
 8000f86:	3301      	addmi	r3, #1
 8000f88:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f8a:	0610      	lsls	r0, r2, #24
			cnt++;
 8000f8c:	bf44      	itt	mi
 8000f8e:	3301      	addmi	r3, #1
 8000f90:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f92:	05d1      	lsls	r1, r2, #23
			cnt++;
 8000f94:	bf44      	itt	mi
 8000f96:	3301      	addmi	r3, #1
 8000f98:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f9a:	0595      	lsls	r5, r2, #22
			cnt++;
 8000f9c:	bf44      	itt	mi
 8000f9e:	3301      	addmi	r3, #1
 8000fa0:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000fa2:	0550      	lsls	r0, r2, #21
			cnt++;
 8000fa4:	bf44      	itt	mi
 8000fa6:	3301      	addmi	r3, #1
 8000fa8:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000faa:	0511      	lsls	r1, r2, #20
			cnt++;
 8000fac:	bf44      	itt	mi
 8000fae:	3301      	addmi	r3, #1
 8000fb0:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000fb2:	04d5      	lsls	r5, r2, #19
			cnt++;
 8000fb4:	bf44      	itt	mi
 8000fb6:	3301      	addmi	r3, #1
 8000fb8:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000fba:	0490      	lsls	r0, r2, #18
			cnt++;
 8000fbc:	bf44      	itt	mi
 8000fbe:	3301      	addmi	r3, #1
 8000fc0:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000fc2:	0451      	lsls	r1, r2, #17
			cnt++;
 8000fc4:	bf44      	itt	mi
 8000fc6:	3301      	addmi	r3, #1
 8000fc8:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000fca:	0bd1      	lsrs	r1, r2, #15
			cnt++;
 8000fcc:	bf1c      	itt	ne
 8000fce:	3301      	addne	r3, #1
 8000fd0:	b2db      	uxtbne	r3, r3
	cmd |= ((uint16_t) calcEvenParity(cmd) << 15);
 8000fd2:	f003 0301 	and.w	r3, r3, #1
uint16_t as5048a_read(uint16_t ss, uint16_t reg) {
 8000fd6:	b083      	sub	sp, #12
	cmd |= ((uint16_t) calcEvenParity(cmd) << 15);
 8000fd8:	ea42 33c3 	orr.w	r3, r2, r3, lsl #15
	data[0] = (cmd >> 8) & 0xFF;
 8000fdc:	ba5b      	rev16	r3, r3
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_RESET);
 8000fde:	481d      	ldr	r0, [pc, #116]	; (8001054 <as5048a_read+0x104>)
	data[0] = (cmd >> 8) & 0xFF;
 8000fe0:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4621      	mov	r1, r4
 8000fe8:	f003 fcbe 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 2, 0xFFFF);
 8000fec:	481a      	ldr	r0, [pc, #104]	; (8001058 <as5048a_read+0x108>)
 8000fee:	a901      	add	r1, sp, #4
 8000ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ff4:	2202      	movs	r2, #2
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8000ff6:	4605      	mov	r5, r0
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 2, 0xFFFF);
 8000ff8:	f004 f854 	bl	80050a4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	f004 fc07 	bl	8005810 <HAL_SPI_GetState>
 8001002:	2801      	cmp	r0, #1
 8001004:	d1fa      	bne.n	8000ffc <as5048a_read+0xac>
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_SET);
 8001006:	4602      	mov	r2, r0
 8001008:	4621      	mov	r1, r4
 800100a:	4812      	ldr	r0, [pc, #72]	; (8001054 <as5048a_read+0x104>)
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 800100c:	4d12      	ldr	r5, [pc, #72]	; (8001058 <as5048a_read+0x108>)
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_SET);
 800100e:	f003 fcab 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_RESET);
 8001012:	4810      	ldr	r0, [pc, #64]	; (8001054 <as5048a_read+0x104>)
 8001014:	2200      	movs	r2, #0
 8001016:	4621      	mov	r1, r4
 8001018:	f003 fca6 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 2, 0xFFFF);
 800101c:	a901      	add	r1, sp, #4
 800101e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001022:	2202      	movs	r2, #2
 8001024:	4628      	mov	r0, r5
 8001026:	f004 fae7 	bl	80055f8 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 800102a:	4628      	mov	r0, r5
 800102c:	f004 fbf0 	bl	8005810 <HAL_SPI_GetState>
 8001030:	2801      	cmp	r0, #1
 8001032:	d1fa      	bne.n	800102a <as5048a_read+0xda>
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_SET);
 8001034:	4602      	mov	r2, r0
 8001036:	4621      	mov	r1, r4
 8001038:	4806      	ldr	r0, [pc, #24]	; (8001054 <as5048a_read+0x104>)
 800103a:	f003 fc95 	bl	8004968 <HAL_GPIO_WritePin>
	return (((data[0] & 0xFF) << 8) | (data[1] & 0xFF)) & ~0xC000; //wat
 800103e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001042:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001046:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 800104a:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800104e:	b003      	add	sp, #12
 8001050:	bd30      	pop	{r4, r5, pc}
 8001052:	bf00      	nop
 8001054:	40020400 	.word	0x40020400
 8001058:	200063fc 	.word	0x200063fc
 800105c:	00000000 	.word	0x00000000

08001060 <as5048a_init>:
void as5048a_init(MotorDriver *driver) {
 8001060:	b538      	push	{r3, r4, r5, lr}
 8001062:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(PINBUS_ENC, driver->PIN_ENC, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	8801      	ldrh	r1, [r0, #0]
 8001068:	482b      	ldr	r0, [pc, #172]	; (8001118 <as5048a_init+0xb8>)
 800106a:	f003 fc7d 	bl	8004968 <HAL_GPIO_WritePin>
	return as5048a_read(ss, REG_ANGLE);
 800106e:	8820      	ldrh	r0, [r4, #0]
 8001070:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001074:	f7ff ff6c 	bl	8000f50 <as5048a_read>
	return 2 * ((float) angle * (_2PI * _1_16384) - _PI);
 8001078:	ee07 0a90 	vmov	s15, r0
 800107c:	ed9f 6a27 	vldr	s12, [pc, #156]	; 800111c <as5048a_init+0xbc>
	angle += _PI;
 8001080:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001120 <as5048a_init+0xc0>
	return 2 * ((float) angle * (_2PI * _1_16384) - _PI);
 8001084:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001088:	eddf 7a26 	vldr	s15, [pc, #152]	; 8001124 <as5048a_init+0xc4>
 800108c:	eee7 7a06 	vfma.f32	s15, s14, s12
/** @brief Get angle from encoder on selected motor.
 *
 */
void as5048a_getAngle(MotorDriver *driver) {
	float angle = as5048a_readToAngle(as5048a_getRawRotation(driver->PIN_ENC)); //- driver->zero_pos_map;
	driver->angle = lpf_exec(&driver->LPF_angle_measure, as5048a_normalize(angle));
 8001090:	f504 75a2 	add.w	r5, r4, #324	; 0x144
	angle += _PI;
 8001094:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
	angle = fmod(angle, _2PI);
 8001098:	eee7 6a87 	vfma.f32	s13, s15, s14
 800109c:	ee16 0a90 	vmov	r0, s13
 80010a0:	f7ff fa5a 	bl	8000558 <__aeabi_f2d>
 80010a4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001110 <as5048a_init+0xb0>
 80010a8:	ec41 0b10 	vmov	d0, r0, r1
 80010ac:	f008 f9b8 	bl	8009420 <fmod>
 80010b0:	ec51 0b10 	vmov	r0, r1, d0
 80010b4:	f7ff fd80 	bl	8000bb8 <__aeabi_d2f>
 80010b8:	ee07 0a90 	vmov	s15, r0
	if (angle < 0) {
 80010bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		angle += _2PI;
 80010c4:	bf48      	it	mi
 80010c6:	ed9f 7a18 	vldrmi	s14, [pc, #96]	; 8001128 <as5048a_init+0xc8>
	angle -= _PI;
 80010ca:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001120 <as5048a_init+0xc0>
		angle += _2PI;
 80010ce:	bf48      	it	mi
 80010d0:	ee77 7a87 	vaddmi.f32	s15, s15, s14
	driver->angle = lpf_exec(&driver->LPF_angle_measure, as5048a_normalize(angle));
 80010d4:	4628      	mov	r0, r5
 80010d6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80010da:	f001 fb21 	bl	8002720 <lpf_exec>
 80010de:	ed84 0a5b 	vstr	s0, [r4, #364]	; 0x16c
 80010e2:	ee10 0a10 	vmov	r0, s0
 * @brief Set the zero position to arbitrary value.
 * Use: When moving the camera by hand, you could make the zero position the same as the current angle
 * @param input angle
 */
void as5048a_setZeroArg(MotorDriver *driver, float arg_pos) {
	driver->zero_pos_map = fmod(arg_pos, _2PI);
 80010e6:	f7ff fa37 	bl	8000558 <__aeabi_f2d>
 80010ea:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8001110 <as5048a_init+0xb0>
 80010ee:	ec41 0b10 	vmov	d0, r0, r1
 80010f2:	f008 f995 	bl	8009420 <fmod>
 80010f6:	ec51 0b10 	vmov	r0, r1, d0
 80010fa:	f7ff fd5d 	bl	8000bb8 <__aeabi_d2f>
	lpf_init(&driver->LPF_angle_measure, 0.005f);
 80010fe:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800112c <as5048a_init+0xcc>
	driver->zero_pos_map = fmod(arg_pos, _2PI);
 8001102:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
	lpf_init(&driver->LPF_angle_measure, 0.005f);
 8001106:	4628      	mov	r0, r5
}
 8001108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lpf_init(&driver->LPF_angle_measure, 0.005f);
 800110c:	f001 bafe 	b.w	800270c <lpf_init>
 8001110:	60000000 	.word	0x60000000
 8001114:	401921fb 	.word	0x401921fb
 8001118:	40020400 	.word	0x40020400
 800111c:	39c90fdb 	.word	0x39c90fdb
 8001120:	40490fdb 	.word	0x40490fdb
 8001124:	c0490fdb 	.word	0xc0490fdb
 8001128:	40c90fdb 	.word	0x40c90fdb
 800112c:	3ba3d70a 	.word	0x3ba3d70a

08001130 <as5048a_getAngle>:
void as5048a_getAngle(MotorDriver *driver) {
 8001130:	b538      	push	{r3, r4, r5, lr}
	return as5048a_read(ss, REG_ANGLE);
 8001132:	f643 71ff 	movw	r1, #16383	; 0x3fff
void as5048a_getAngle(MotorDriver *driver) {
 8001136:	4604      	mov	r4, r0
	return as5048a_read(ss, REG_ANGLE);
 8001138:	8800      	ldrh	r0, [r0, #0]
 800113a:	f7ff ff09 	bl	8000f50 <as5048a_read>
	return 2 * ((float) angle * (_2PI * _1_16384) - _PI);
 800113e:	ee07 0a90 	vmov	s15, r0
 8001142:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80011b8 <as5048a_getAngle+0x88>
	angle += _PI;
 8001146:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80011bc <as5048a_getAngle+0x8c>
	return 2 * ((float) angle * (_2PI * _1_16384) - _PI);
 800114a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800114e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80011c0 <as5048a_getAngle+0x90>
 8001152:	eee7 7a06 	vfma.f32	s15, s14, s12
	driver->angle = lpf_exec(&driver->LPF_angle_measure, as5048a_normalize(angle));
 8001156:	f504 75a2 	add.w	r5, r4, #324	; 0x144
	angle += _PI;
 800115a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
	angle = fmod(angle, _2PI);
 800115e:	eee7 6a87 	vfma.f32	s13, s15, s14
 8001162:	ee16 0a90 	vmov	r0, s13
 8001166:	f7ff f9f7 	bl	8000558 <__aeabi_f2d>
 800116a:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80011b0 <as5048a_getAngle+0x80>
 800116e:	ec41 0b10 	vmov	d0, r0, r1
 8001172:	f008 f955 	bl	8009420 <fmod>
 8001176:	ec51 0b10 	vmov	r0, r1, d0
 800117a:	f7ff fd1d 	bl	8000bb8 <__aeabi_d2f>
 800117e:	ee07 0a90 	vmov	s15, r0
	if (angle < 0) {
 8001182:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		angle += _2PI;
 800118a:	bf48      	it	mi
 800118c:	ed9f 7a0d 	vldrmi	s14, [pc, #52]	; 80011c4 <as5048a_getAngle+0x94>
	angle -= _PI;
 8001190:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80011bc <as5048a_getAngle+0x8c>
		angle += _2PI;
 8001194:	bf48      	it	mi
 8001196:	ee77 7a87 	vaddmi.f32	s15, s15, s14
	driver->angle = lpf_exec(&driver->LPF_angle_measure, as5048a_normalize(angle));
 800119a:	4628      	mov	r0, r5
 800119c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80011a0:	f001 fabe 	bl	8002720 <lpf_exec>
 80011a4:	ed84 0a5b 	vstr	s0, [r4, #364]	; 0x16c
}
 80011a8:	bd38      	pop	{r3, r4, r5, pc}
 80011aa:	bf00      	nop
 80011ac:	f3af 8000 	nop.w
 80011b0:	60000000 	.word	0x60000000
 80011b4:	401921fb 	.word	0x401921fb
 80011b8:	39c90fdb 	.word	0x39c90fdb
 80011bc:	40490fdb 	.word	0x40490fdb
 80011c0:	c0490fdb 	.word	0xc0490fdb
 80011c4:	40c90fdb 	.word	0x40c90fdb

080011c8 <as5048a_setZeroArg>:
void as5048a_setZeroArg(MotorDriver *driver, float arg_pos) {
 80011c8:	b510      	push	{r4, lr}
 80011ca:	4604      	mov	r4, r0
	driver->zero_pos_map = fmod(arg_pos, _2PI);
 80011cc:	ee10 0a10 	vmov	r0, s0
 80011d0:	f7ff f9c2 	bl	8000558 <__aeabi_f2d>
 80011d4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80011f0 <as5048a_setZeroArg+0x28>
 80011d8:	ec41 0b10 	vmov	d0, r0, r1
 80011dc:	f008 f920 	bl	8009420 <fmod>
 80011e0:	ec51 0b10 	vmov	r0, r1, d0
 80011e4:	f7ff fce8 	bl	8000bb8 <__aeabi_d2f>
 80011e8:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
}
 80011ec:	bd10      	pop	{r4, pc}
 80011ee:	bf00      	nop
 80011f0:	60000000 	.word	0x60000000
 80011f4:	401921fb 	.word	0x401921fb

080011f8 <as5048a_getVelocity>:
}

/**@brief Calculate speed in ˚/s using angular values and input time
 *@param Motor driver containing anglular values
 */
void as5048a_getVelocity(MotorDriver *driver){
 80011f8:	b538      	push	{r3, r4, r5, lr}
 80011fa:	4604      	mov	r4, r0
 80011fc:	ed2d 8b02 	vpush	{d8}

//	as5048a_getAngle(driver);
	uint32_t timestamp_us = get_us();
 8001200:	f002 fdaa 	bl	8003d58 <get_us>

	float T_samp = (timestamp_us - driver->prev_timestamp_us) * 1e-6f;
 8001204:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
 8001208:	ed9f 8a39 	vldr	s16, [pc, #228]	; 80012f0 <as5048a_getVelocity+0xf8>
	if(T_samp <= 0 || T_samp > 0.5f) T_samp = 1e-3;

	/* Calculate difference between current and previous angles */
	float angle_diff = fmod(driver->angle - driver->prev_angle + _PI, _2PI) - _PI;
 800120c:	edd4 8a5b 	vldr	s17, [r4, #364]	; 0x16c
	float T_samp = (timestamp_us - driver->prev_timestamp_us) * 1e-6f;
 8001210:	1ac3      	subs	r3, r0, r3
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eef8 7a67 	vcvt.f32.u32	s15, s15
	uint32_t timestamp_us = get_us();
 800121a:	4605      	mov	r5, r0
	float T_samp = (timestamp_us - driver->prev_timestamp_us) * 1e-6f;
 800121c:	ee27 8a88 	vmul.f32	s16, s15, s16
	if(T_samp <= 0 || T_samp > 0.5f) T_samp = 1e-3;
 8001220:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	d92e      	bls.n	8001288 <as5048a_getVelocity+0x90>
 800122a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80012f4 <as5048a_getVelocity+0xfc>
 800122e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001236:	dc27      	bgt.n	8001288 <as5048a_getVelocity+0x90>
	float angle_diff = fmod(driver->angle - driver->prev_angle + _PI, _2PI) - _PI;
 8001238:	eddf 7a2f 	vldr	s15, [pc, #188]	; 80012f8 <as5048a_getVelocity+0x100>
 800123c:	ed94 7a5c 	vldr	s14, [r4, #368]	; 0x170
 8001240:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8001244:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001248:	ee17 0a90 	vmov	r0, s15
 800124c:	f7ff f984 	bl	8000558 <__aeabi_f2d>
 8001250:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80012e0 <as5048a_getVelocity+0xe8>
 8001254:	ec41 0b10 	vmov	d0, r0, r1
 8001258:	f008 f8e2 	bl	8009420 <fmod>
 800125c:	a322      	add	r3, pc, #136	; (adr r3, 80012e8 <as5048a_getVelocity+0xf0>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	ec51 0b10 	vmov	r0, r1, d0
 8001266:	f7ff f817 	bl	8000298 <__aeabi_dsub>
 800126a:	f7ff fca5 	bl	8000bb8 <__aeabi_d2f>

	/* Calculate velocity */
	driver->velocity = angle_diff/T_samp;
 800126e:	ee07 0a90 	vmov	s15, r0
 8001272:	eec7 7a88 	vdiv.f32	s15, s15, s16
	if(T_samp == 0) driver->velocity = 0;

	driver->prev_timestamp_us = timestamp_us;
 8001276:	f8c4 5178 	str.w	r5, [r4, #376]	; 0x178
	driver->prev_angle = driver->angle;
 800127a:	edc4 8a5c 	vstr	s17, [r4, #368]	; 0x170
}
 800127e:	ecbd 8b02 	vpop	{d8}
	driver->velocity = angle_diff/T_samp;
 8001282:	edc4 7a5f 	vstr	s15, [r4, #380]	; 0x17c
}
 8001286:	bd38      	pop	{r3, r4, r5, pc}
	float angle_diff = fmod(driver->angle - driver->prev_angle + _PI, _2PI) - _PI;
 8001288:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80012f8 <as5048a_getVelocity+0x100>
 800128c:	ed94 7a5c 	vldr	s14, [r4, #368]	; 0x170
 8001290:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8001294:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001298:	ee17 0a90 	vmov	r0, s15
 800129c:	f7ff f95c 	bl	8000558 <__aeabi_f2d>
 80012a0:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80012e0 <as5048a_getVelocity+0xe8>
 80012a4:	ec41 0b10 	vmov	d0, r0, r1
 80012a8:	f008 f8ba 	bl	8009420 <fmod>
 80012ac:	a30e      	add	r3, pc, #56	; (adr r3, 80012e8 <as5048a_getVelocity+0xf0>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	ec51 0b10 	vmov	r0, r1, d0
 80012b6:	f7fe ffef 	bl	8000298 <__aeabi_dsub>
 80012ba:	f7ff fc7d 	bl	8000bb8 <__aeabi_d2f>
	driver->prev_angle = driver->angle;
 80012be:	edc4 8a5c 	vstr	s17, [r4, #368]	; 0x170
}
 80012c2:	ecbd 8b02 	vpop	{d8}
	driver->velocity = angle_diff/T_samp;
 80012c6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80012fc <as5048a_getVelocity+0x104>
	driver->prev_timestamp_us = timestamp_us;
 80012ca:	f8c4 5178 	str.w	r5, [r4, #376]	; 0x178
	driver->velocity = angle_diff/T_samp;
 80012ce:	ee07 0a10 	vmov	s14, r0
 80012d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d6:	edc4 7a5f 	vstr	s15, [r4, #380]	; 0x17c
}
 80012da:	bd38      	pop	{r3, r4, r5, pc}
 80012dc:	f3af 8000 	nop.w
 80012e0:	60000000 	.word	0x60000000
 80012e4:	401921fb 	.word	0x401921fb
 80012e8:	60000000 	.word	0x60000000
 80012ec:	400921fb 	.word	0x400921fb
 80012f0:	358637bd 	.word	0x358637bd
 80012f4:	48f42400 	.word	0x48f42400
 80012f8:	40490fdb 	.word	0x40490fdb
 80012fc:	4479ffff 	.word	0x4479ffff

08001300 <bmi270_spi_init>:
uint16_t factor_zx_div = 512; //2^9

/*
 * @brief Initialization sequence for BMI270 as described on p. 20 in datasheet.
 */
void bmi270_spi_init() {
 8001300:	b570      	push	{r4, r5, r6, lr}
	uint8_t chip_id = 0;

	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
void bmi270_spi_init() {
 8001304:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001306:	4611      	mov	r1, r2
/*
 * @brief Read 8 bits of data from SDO-pin on BMI270.
 * @param Which BMI270-register to perform the read on
 */
uint8_t bmi270_spi_read_8(uint8_t reg) {
	uint8_t dummy = 0x00;
 8001308:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 800130a:	486a      	ldr	r0, [pc, #424]	; (80014b4 <bmi270_spi_init+0x1b4>)
 800130c:	f003 fb2c 	bl	8004968 <HAL_GPIO_WritePin>
	uint8_t data = 0x00;
	uint8_t cmd = reg | 0x80;
 8001310:	2380      	movs	r3, #128	; 0x80

	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001312:	4868      	ldr	r0, [pc, #416]	; (80014b4 <bmi270_spi_init+0x1b4>)
	uint8_t cmd = reg | 0x80;
 8001314:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001318:	4622      	mov	r2, r4
 800131a:	2101      	movs	r1, #1
	uint8_t dummy = 0x00;
 800131c:	f88d 4005 	strb.w	r4, [sp, #5]
	uint8_t data = 0x00;
 8001320:	f88d 4006 	strb.w	r4, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001324:	f003 fb20 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001328:	f10d 0107 	add.w	r1, sp, #7
 800132c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001330:	2201      	movs	r2, #1
 8001332:	4861      	ldr	r0, [pc, #388]	; (80014b8 <bmi270_spi_init+0x1b8>)
 8001334:	f003 feb6 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 8001338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800133c:	2201      	movs	r2, #1
 800133e:	f10d 0105 	add.w	r1, sp, #5
 8001342:	485d      	ldr	r0, [pc, #372]	; (80014b8 <bmi270_spi_init+0x1b8>)
 8001344:	f004 f958 	bl	80055f8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800134c:	f10d 0106 	add.w	r1, sp, #6
 8001350:	2201      	movs	r2, #1
 8001352:	4859      	ldr	r0, [pc, #356]	; (80014b8 <bmi270_spi_init+0x1b8>)
 8001354:	f004 f950 	bl	80055f8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001358:	2201      	movs	r2, #1
 800135a:	4856      	ldr	r0, [pc, #344]	; (80014b4 <bmi270_spi_init+0x1b4>)
 800135c:	4611      	mov	r1, r2
 800135e:	f003 fb03 	bl	8004968 <HAL_GPIO_WritePin>

	return data;
 8001362:	f89d 3006 	ldrb.w	r3, [sp, #6]
	if (chip_id != 0x24) {
 8001366:	2b24      	cmp	r3, #36	; 0x24
 8001368:	d00a      	beq.n	8001380 <bmi270_spi_init+0x80>
void bmi270_print(uint16_t code) {
	if ((uint16_t*) code != NULL) {
		sprintf((char*) buff, "BMI270: %s\r\n", bmi270_codeToStr(code));
	}

	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), 200);
 800136a:	4854      	ldr	r0, [pc, #336]	; (80014bc <bmi270_spi_init+0x1bc>)
 800136c:	f7fe ff38 	bl	80001e0 <strlen>
 8001370:	4952      	ldr	r1, [pc, #328]	; (80014bc <bmi270_spi_init+0x1bc>)
 8001372:	b282      	uxth	r2, r0
 8001374:	23c8      	movs	r3, #200	; 0xc8
 8001376:	4852      	ldr	r0, [pc, #328]	; (80014c0 <bmi270_spi_init+0x1c0>)
 8001378:	f004 fffc 	bl	8006374 <HAL_UART_Transmit>
}
 800137c:	b002      	add	sp, #8
 800137e:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char*) buff, "BMI270: %s\r\n", bmi270_codeToStr(code));
 8001380:	4a50      	ldr	r2, [pc, #320]	; (80014c4 <bmi270_spi_init+0x1c4>)
 8001382:	4951      	ldr	r1, [pc, #324]	; (80014c8 <bmi270_spi_init+0x1c8>)
 8001384:	484d      	ldr	r0, [pc, #308]	; (80014bc <bmi270_spi_init+0x1bc>)
 8001386:	f005 fd3f 	bl	8006e08 <siprintf>
	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), 200);
 800138a:	484c      	ldr	r0, [pc, #304]	; (80014bc <bmi270_spi_init+0x1bc>)
 800138c:	f7fe ff28 	bl	80001e0 <strlen>
 8001390:	494a      	ldr	r1, [pc, #296]	; (80014bc <bmi270_spi_init+0x1bc>)
 8001392:	b282      	uxth	r2, r0
 8001394:	23c8      	movs	r3, #200	; 0xc8
 8001396:	484a      	ldr	r0, [pc, #296]	; (80014c0 <bmi270_spi_init+0x1c0>)
 8001398:	f004 ffec 	bl	8006374 <HAL_UART_Transmit>
	uint8_t cmd = reg | 0x00; //write command
 800139c:	237c      	movs	r3, #124	; 0x7c
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800139e:	4845      	ldr	r0, [pc, #276]	; (80014b4 <bmi270_spi_init+0x1b4>)
	uint8_t cmd = reg | 0x00; //write command
 80013a0:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80013a4:	4622      	mov	r2, r4
 80013a6:	2101      	movs	r1, #1
 80013a8:	f88d 4006 	strb.w	r4, [sp, #6]
 80013ac:	f003 fadc 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80013b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b4:	2201      	movs	r2, #1
 80013b6:	f10d 0107 	add.w	r1, sp, #7
 80013ba:	483f      	ldr	r0, [pc, #252]	; (80014b8 <bmi270_spi_init+0x1b8>)
 80013bc:	f003 fe72 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 80013c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c4:	2201      	movs	r2, #1
 80013c6:	f10d 0106 	add.w	r1, sp, #6
 80013ca:	483b      	ldr	r0, [pc, #236]	; (80014b8 <bmi270_spi_init+0x1b8>)
 80013cc:	f003 fe6a 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	4611      	mov	r1, r2
 80013d4:	4837      	ldr	r0, [pc, #220]	; (80014b4 <bmi270_spi_init+0x1b4>)
 80013d6:	f003 fac7 	bl	8004968 <HAL_GPIO_WritePin>
		HAL_Delay(1);								//wait for 450us
 80013da:	2001      	movs	r0, #1
 80013dc:	f002 fd3e 	bl	8003e5c <HAL_Delay>
	uint8_t cmd = reg | 0x00; //write command
 80013e0:	2359      	movs	r3, #89	; 0x59
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80013e2:	4834      	ldr	r0, [pc, #208]	; (80014b4 <bmi270_spi_init+0x1b4>)
	uint8_t cmd = reg | 0x00; //write command
 80013e4:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80013e8:	4622      	mov	r2, r4
 80013ea:	2101      	movs	r1, #1
 80013ec:	f88d 4006 	strb.w	r4, [sp, #6]
 80013f0:	f003 faba 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80013f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013f8:	2201      	movs	r2, #1
 80013fa:	f10d 0107 	add.w	r1, sp, #7
 80013fe:	482e      	ldr	r0, [pc, #184]	; (80014b8 <bmi270_spi_init+0x1b8>)
 8001400:	f003 fe50 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001408:	2201      	movs	r2, #1
 800140a:	f10d 0106 	add.w	r1, sp, #6
 800140e:	482a      	ldr	r0, [pc, #168]	; (80014b8 <bmi270_spi_init+0x1b8>)
 8001410:	f003 fe48 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	4611      	mov	r1, r2
 8001418:	4826      	ldr	r0, [pc, #152]	; (80014b4 <bmi270_spi_init+0x1b4>)
 800141a:	f003 faa5 	bl	8004968 <HAL_GPIO_WritePin>
		bmi270_spi_write_burst(REG_INIT_DATA, bmi270_config_file, bmi270_config_size); //burst write to reg INIT_DATA. Start with byte 0.
 800141e:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <bmi270_spi_init+0x1cc>)
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001420:	4824      	ldr	r0, [pc, #144]	; (80014b4 <bmi270_spi_init+0x1b4>)
		bmi270_spi_write_burst(REG_INIT_DATA, bmi270_config_file, bmi270_config_size); //burst write to reg INIT_DATA. Start with byte 0.
 8001422:	881d      	ldrh	r5, [r3, #0]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001424:	4622      	mov	r2, r4
	uint8_t cmd = reg | 0x00; //write command
 8001426:	235e      	movs	r3, #94	; 0x5e
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001428:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x00; //write command
 800142a:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800142e:	f003 fa9b 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001432:	4821      	ldr	r0, [pc, #132]	; (80014b8 <bmi270_spi_init+0x1b8>)
 8001434:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001438:	2201      	movs	r2, #1
 800143a:	f10d 0107 	add.w	r1, sp, #7
 800143e:	f003 fe31 	bl	80050a4 <HAL_SPI_Transmit>
	for (i = 0; i < data_size; i++) {
 8001442:	b17d      	cbz	r5, 8001464 <bmi270_spi_init+0x164>
 8001444:	4c22      	ldr	r4, [pc, #136]	; (80014d0 <bmi270_spi_init+0x1d0>)
		HAL_SPI_Transmit(&hspi1, (uint8_t*) &data[i], 1, 0xFFFF);
 8001446:	4e1c      	ldr	r6, [pc, #112]	; (80014b8 <bmi270_spi_init+0x1b8>)
 8001448:	3d01      	subs	r5, #1
 800144a:	1c63      	adds	r3, r4, #1
 800144c:	fa13 f585 	uxtah	r5, r3, r5
 8001450:	2201      	movs	r2, #1
 8001452:	4621      	mov	r1, r4
 8001454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001458:	4414      	add	r4, r2
 800145a:	4630      	mov	r0, r6
 800145c:	f003 fe22 	bl	80050a4 <HAL_SPI_Transmit>
	for (i = 0; i < data_size; i++) {
 8001460:	42a5      	cmp	r5, r4
 8001462:	d1f5      	bne.n	8001450 <bmi270_spi_init+0x150>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001464:	2201      	movs	r2, #1
 8001466:	4614      	mov	r4, r2
 8001468:	4611      	mov	r1, r2
 800146a:	4812      	ldr	r0, [pc, #72]	; (80014b4 <bmi270_spi_init+0x1b4>)
 800146c:	f003 fa7c 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001470:	4621      	mov	r1, r4
	uint8_t cmd = reg | 0x00; //write command
 8001472:	2359      	movs	r3, #89	; 0x59
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001474:	480f      	ldr	r0, [pc, #60]	; (80014b4 <bmi270_spi_init+0x1b4>)
	uint8_t cmd = reg | 0x00; //write command
 8001476:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	f88d 4006 	strb.w	r4, [sp, #6]
 8001480:	f003 fa72 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001484:	f10d 0107 	add.w	r1, sp, #7
 8001488:	4622      	mov	r2, r4
 800148a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800148e:	480a      	ldr	r0, [pc, #40]	; (80014b8 <bmi270_spi_init+0x1b8>)
 8001490:	f003 fe08 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001494:	f10d 0106 	add.w	r1, sp, #6
 8001498:	4622      	mov	r2, r4
 800149a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <bmi270_spi_init+0x1b8>)
 80014a0:	f003 fe00 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80014a4:	4803      	ldr	r0, [pc, #12]	; (80014b4 <bmi270_spi_init+0x1b4>)
 80014a6:	4622      	mov	r2, r4
 80014a8:	4621      	mov	r1, r4
 80014aa:	f003 fa5d 	bl	8004968 <HAL_GPIO_WritePin>
}
 80014ae:	b002      	add	sp, #8
 80014b0:	bd70      	pop	{r4, r5, r6, pc}
 80014b2:	bf00      	nop
 80014b4:	40020400 	.word	0x40020400
 80014b8:	200063fc 	.word	0x200063fc
 80014bc:	2000225c 	.word	0x2000225c
 80014c0:	200064a4 	.word	0x200064a4
 80014c4:	0800b118 	.word	0x0800b118
 80014c8:	0800b128 	.word	0x0800b128
 80014cc:	20002000 	.word	0x20002000
 80014d0:	20000000 	.word	0x20000000

080014d4 <bmi270_spi_init_check>:
void bmi270_spi_init_check() {
 80014d4:	b570      	push	{r4, r5, r6, lr}
	sprintf((char*) buff, "BMI270: initialization sequence complete\r\n");
 80014d6:	4d38      	ldr	r5, [pc, #224]	; (80015b8 <bmi270_spi_init_check+0xe4>)
 80014d8:	4c38      	ldr	r4, [pc, #224]	; (80015bc <bmi270_spi_init_check+0xe8>)
 80014da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014e6:	c403      	stmia	r4!, {r0, r1}
 80014e8:	f824 2b02 	strh.w	r2, [r4], #2
 80014ec:	4621      	mov	r1, r4
 80014ee:	0c12      	lsrs	r2, r2, #16
void bmi270_spi_init_check() {
 80014f0:	b082      	sub	sp, #8
	sprintf((char*) buff, "BMI270: initialization sequence complete\r\n");
 80014f2:	f801 292a 	strb.w	r2, [r1], #-42
	HAL_UART_Transmit(&huart2, buff, strlen(buff), 200);
 80014f6:	23c8      	movs	r3, #200	; 0xc8
 80014f8:	222a      	movs	r2, #42	; 0x2a
 80014fa:	4831      	ldr	r0, [pc, #196]	; (80015c0 <bmi270_spi_init_check+0xec>)
 80014fc:	f004 ff3a 	bl	8006374 <HAL_UART_Transmit>
	HAL_Delay(150); //wait >140 ms
 8001500:	2096      	movs	r0, #150	; 0x96
 8001502:	f002 fcab 	bl	8003e5c <HAL_Delay>
	uint8_t dummy = 0x00;
 8001506:	2200      	movs	r2, #0
	uint8_t cmd = reg | 0x80;
 8001508:	23a1      	movs	r3, #161	; 0xa1
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800150a:	482e      	ldr	r0, [pc, #184]	; (80015c4 <bmi270_spi_init_check+0xf0>)
	uint8_t dummy = 0x00;
 800150c:	f88d 2005 	strb.w	r2, [sp, #5]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001510:	2101      	movs	r1, #1
	uint8_t data = 0x00;
 8001512:	f88d 2006 	strb.w	r2, [sp, #6]
	uint8_t cmd = reg | 0x80;
 8001516:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800151a:	f003 fa25 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 800151e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001522:	2201      	movs	r2, #1
 8001524:	f10d 0107 	add.w	r1, sp, #7
 8001528:	4827      	ldr	r0, [pc, #156]	; (80015c8 <bmi270_spi_init_check+0xf4>)
 800152a:	f003 fdbb 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 800152e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001532:	2201      	movs	r2, #1
 8001534:	f10d 0105 	add.w	r1, sp, #5
 8001538:	4823      	ldr	r0, [pc, #140]	; (80015c8 <bmi270_spi_init_check+0xf4>)
 800153a:	f004 f85d 	bl	80055f8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 800153e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001542:	2201      	movs	r2, #1
 8001544:	f10d 0106 	add.w	r1, sp, #6
 8001548:	481f      	ldr	r0, [pc, #124]	; (80015c8 <bmi270_spi_init_check+0xf4>)
 800154a:	f004 f855 	bl	80055f8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 800154e:	2201      	movs	r2, #1
 8001550:	481c      	ldr	r0, [pc, #112]	; (80015c4 <bmi270_spi_init_check+0xf0>)
 8001552:	4611      	mov	r1, r2
 8001554:	f003 fa08 	bl	8004968 <HAL_GPIO_WritePin>
	return data;
 8001558:	f89d 3006 	ldrb.w	r3, [sp, #6]
	init_status &= 0x0F;
 800155c:	f003 030f 	and.w	r3, r3, #15
}

const char* bmi270_codeToStr(uint16_t code) {

	//error codes
	switch (code) {
 8001560:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001564:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
 8001568:	2b07      	cmp	r3, #7
 800156a:	d806      	bhi.n	800157a <bmi270_spi_init_check+0xa6>
 800156c:	e8df f003 	tbb	[pc, r3]
 8001570:	04211715 	.word	0x04211715
 8001574:	191b1d1f 	.word	0x191b1d1f
	case 0xc001:
		return "REG_INTERNAL_STATUS: init_ok";
	case 0xc002:
		return "REG_INTERNAL_STATUS: init_err";
	case 0xc003:
		return "REG_INTERNAL_STATUS: drv_error";
 8001578:	4e14      	ldr	r6, [pc, #80]	; (80015cc <bmi270_spi_init_check+0xf8>)
		sprintf((char*) buff, "BMI270: %s\r\n", bmi270_codeToStr(code));
 800157a:	4915      	ldr	r1, [pc, #84]	; (80015d0 <bmi270_spi_init_check+0xfc>)
 800157c:	480f      	ldr	r0, [pc, #60]	; (80015bc <bmi270_spi_init_check+0xe8>)
 800157e:	4632      	mov	r2, r6
 8001580:	f005 fc42 	bl	8006e08 <siprintf>
	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), 200);
 8001584:	480d      	ldr	r0, [pc, #52]	; (80015bc <bmi270_spi_init_check+0xe8>)
 8001586:	f7fe fe2b 	bl	80001e0 <strlen>
 800158a:	490c      	ldr	r1, [pc, #48]	; (80015bc <bmi270_spi_init_check+0xe8>)
 800158c:	b282      	uxth	r2, r0
 800158e:	23c8      	movs	r3, #200	; 0xc8
 8001590:	480b      	ldr	r0, [pc, #44]	; (80015c0 <bmi270_spi_init_check+0xec>)
 8001592:	f004 feef 	bl	8006374 <HAL_UART_Transmit>
}
 8001596:	b002      	add	sp, #8
 8001598:	bd70      	pop	{r4, r5, r6, pc}
	init_status |= 0xC000;
 800159a:	4e0e      	ldr	r6, [pc, #56]	; (80015d4 <bmi270_spi_init_check+0x100>)
 800159c:	e7ed      	b.n	800157a <bmi270_spi_init_check+0xa6>
		return "REG_INTERNAL_STATUS: init_ok";
 800159e:	4e0e      	ldr	r6, [pc, #56]	; (80015d8 <bmi270_spi_init_check+0x104>)
 80015a0:	e7eb      	b.n	800157a <bmi270_spi_init_check+0xa6>
	case 0xc005:
		return "REG_INTERNAL_STATUS: nvm_error";
	case 0xc006:
		return "REG_INTERNAL_STATUS: start_up_error";
	case 0xc007:
		return "REG_INTERNAL_STATUS: compat_error";
 80015a2:	4e0e      	ldr	r6, [pc, #56]	; (80015dc <bmi270_spi_init_check+0x108>)
 80015a4:	e7e9      	b.n	800157a <bmi270_spi_init_check+0xa6>
		return "REG_INTERNAL_STATUS: start_up_error";
 80015a6:	4e0e      	ldr	r6, [pc, #56]	; (80015e0 <bmi270_spi_init_check+0x10c>)
 80015a8:	e7e7      	b.n	800157a <bmi270_spi_init_check+0xa6>
		return "REG_INTERNAL_STATUS: nvm_error";
 80015aa:	4e0e      	ldr	r6, [pc, #56]	; (80015e4 <bmi270_spi_init_check+0x110>)
 80015ac:	e7e5      	b.n	800157a <bmi270_spi_init_check+0xa6>
		return "REG_INTERNAL_STATUS: sns_stop";
 80015ae:	4e0e      	ldr	r6, [pc, #56]	; (80015e8 <bmi270_spi_init_check+0x114>)
 80015b0:	e7e3      	b.n	800157a <bmi270_spi_init_check+0xa6>
		return "REG_INTERNAL_STATUS: init_err";
 80015b2:	4e0e      	ldr	r6, [pc, #56]	; (80015ec <bmi270_spi_init_check+0x118>)
 80015b4:	e7e1      	b.n	800157a <bmi270_spi_init_check+0xa6>
 80015b6:	bf00      	nop
 80015b8:	0800b240 	.word	0x0800b240
 80015bc:	2000225c 	.word	0x2000225c
 80015c0:	200064a4 	.word	0x200064a4
 80015c4:	40020400 	.word	0x40020400
 80015c8:	200063fc 	.word	0x200063fc
 80015cc:	0800b158 	.word	0x0800b158
 80015d0:	0800b128 	.word	0x0800b128
 80015d4:	0800b220 	.word	0x0800b220
 80015d8:	0800b198 	.word	0x0800b198
 80015dc:	0800b1b8 	.word	0x0800b1b8
 80015e0:	0800b1dc 	.word	0x0800b1dc
 80015e4:	0800b200 	.word	0x0800b200
 80015e8:	0800b138 	.word	0x0800b138
 80015ec:	0800b178 	.word	0x0800b178

080015f0 <bmi270_pwr_conf>:
void bmi270_pwr_conf(uint8_t pwr_mode) {
 80015f0:	b530      	push	{r4, r5, lr}
	if (pwr_mode == BMI270_PWR_MODE_LOW) {
 80015f2:	4604      	mov	r4, r0
void bmi270_pwr_conf(uint8_t pwr_mode) {
 80015f4:	b083      	sub	sp, #12
	if (pwr_mode == BMI270_PWR_MODE_LOW) {
 80015f6:	b130      	cbz	r0, 8001606 <bmi270_pwr_conf+0x16>
	} else if (pwr_mode == BMI270_PWR_MODE_NORM) {
 80015f8:	2801      	cmp	r0, #1
 80015fa:	f000 80c9 	beq.w	8001790 <bmi270_pwr_conf+0x1a0>
	} else if (pwr_mode == BMI270_PWR_MODE_PERF) {
 80015fe:	2802      	cmp	r0, #2
 8001600:	d063      	beq.n	80016ca <bmi270_pwr_conf+0xda>
}
 8001602:	b003      	add	sp, #12
 8001604:	bd30      	pop	{r4, r5, pc}
	uint8_t cmd = reg | 0x00; //write command
 8001606:	237d      	movs	r3, #125	; 0x7d
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001608:	4602      	mov	r2, r0
 800160a:	2504      	movs	r5, #4
 800160c:	4894      	ldr	r0, [pc, #592]	; (8001860 <bmi270_pwr_conf+0x270>)
 800160e:	f88d 5006 	strb.w	r5, [sp, #6]
 8001612:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x00; //write command
 8001614:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001618:	f003 f9a6 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 800161c:	f10d 0107 	add.w	r1, sp, #7
 8001620:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001624:	2201      	movs	r2, #1
 8001626:	488f      	ldr	r0, [pc, #572]	; (8001864 <bmi270_pwr_conf+0x274>)
 8001628:	f003 fd3c 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 800162c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001630:	f10d 0106 	add.w	r1, sp, #6
 8001634:	2201      	movs	r2, #1
 8001636:	488b      	ldr	r0, [pc, #556]	; (8001864 <bmi270_pwr_conf+0x274>)
 8001638:	f003 fd34 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	4611      	mov	r1, r2
 8001640:	4887      	ldr	r0, [pc, #540]	; (8001860 <bmi270_pwr_conf+0x270>)
 8001642:	f003 f991 	bl	8004968 <HAL_GPIO_WritePin>
		bmi270_spi_write_8(REG_ACC_CONF, 0x17); //disable the acc_filter_perf bit; set acc_bwp to 2 repetitions; set acc_odr to 50 Hz
 8001646:	2517      	movs	r5, #23
	uint8_t cmd = reg | 0x00; //write command
 8001648:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800164a:	4622      	mov	r2, r4
 800164c:	4884      	ldr	r0, [pc, #528]	; (8001860 <bmi270_pwr_conf+0x270>)
	uint8_t cmd = reg | 0x00; //write command
 800164e:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001652:	2101      	movs	r1, #1
 8001654:	f88d 5006 	strb.w	r5, [sp, #6]
 8001658:	f003 f986 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 800165c:	f10d 0107 	add.w	r1, sp, #7
 8001660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001664:	2201      	movs	r2, #1
 8001666:	487f      	ldr	r0, [pc, #508]	; (8001864 <bmi270_pwr_conf+0x274>)
 8001668:	f003 fd1c 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 800166c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001670:	f10d 0106 	add.w	r1, sp, #6
 8001674:	2201      	movs	r2, #1
 8001676:	487b      	ldr	r0, [pc, #492]	; (8001864 <bmi270_pwr_conf+0x274>)
 8001678:	f003 fd14 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	4611      	mov	r1, r2
 8001680:	4877      	ldr	r0, [pc, #476]	; (8001860 <bmi270_pwr_conf+0x270>)
 8001682:	f003 f971 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001686:	4622      	mov	r2, r4
	uint8_t cmd = reg | 0x00; //write command
 8001688:	237c      	movs	r3, #124	; 0x7c
 800168a:	2403      	movs	r4, #3
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800168c:	4874      	ldr	r0, [pc, #464]	; (8001860 <bmi270_pwr_conf+0x270>)
 800168e:	f88d 4006 	strb.w	r4, [sp, #6]
 8001692:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x00; //write command
 8001694:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001698:	f003 f966 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 800169c:	f10d 0107 	add.w	r1, sp, #7
 80016a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016a4:	2201      	movs	r2, #1
 80016a6:	486f      	ldr	r0, [pc, #444]	; (8001864 <bmi270_pwr_conf+0x274>)
 80016a8:	f003 fcfc 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 80016ac:	f10d 0106 	add.w	r1, sp, #6
 80016b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b4:	2201      	movs	r2, #1
 80016b6:	486b      	ldr	r0, [pc, #428]	; (8001864 <bmi270_pwr_conf+0x274>)
 80016b8:	f003 fcf4 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	4868      	ldr	r0, [pc, #416]	; (8001860 <bmi270_pwr_conf+0x270>)
 80016c0:	4611      	mov	r1, r2
 80016c2:	f003 f951 	bl	8004968 <HAL_GPIO_WritePin>
}
 80016c6:	b003      	add	sp, #12
 80016c8:	bd30      	pop	{r4, r5, pc}
	uint8_t cmd = reg | 0x00; //write command
 80016ca:	237d      	movs	r3, #125	; 0x7d
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80016cc:	4864      	ldr	r0, [pc, #400]	; (8001860 <bmi270_pwr_conf+0x270>)
	uint8_t cmd = reg | 0x00; //write command
 80016ce:	f88d 3007 	strb.w	r3, [sp, #7]
 80016d2:	250e      	movs	r5, #14
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2101      	movs	r1, #1
 80016d8:	f88d 5006 	strb.w	r5, [sp, #6]
 80016dc:	f003 f944 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80016e0:	f10d 0107 	add.w	r1, sp, #7
 80016e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e8:	2201      	movs	r2, #1
 80016ea:	485e      	ldr	r0, [pc, #376]	; (8001864 <bmi270_pwr_conf+0x274>)
 80016ec:	f003 fcda 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 80016f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016f4:	f10d 0106 	add.w	r1, sp, #6
 80016f8:	2201      	movs	r2, #1
 80016fa:	485a      	ldr	r0, [pc, #360]	; (8001864 <bmi270_pwr_conf+0x274>)
 80016fc:	f003 fcd2 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	4611      	mov	r1, r2
 8001704:	4856      	ldr	r0, [pc, #344]	; (8001860 <bmi270_pwr_conf+0x270>)
 8001706:	f003 f92f 	bl	8004968 <HAL_GPIO_WritePin>
		bmi270_spi_write_8(REG_ACC_CONF, 0xA8); //enable the acc_filter_perf bit; set acc_bwp to normal mode; set acc_odr to 100 Hz
 800170a:	25a8      	movs	r5, #168	; 0xa8
	uint8_t cmd = reg | 0x00; //write command
 800170c:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800170e:	4854      	ldr	r0, [pc, #336]	; (8001860 <bmi270_pwr_conf+0x270>)
 8001710:	f88d 5006 	strb.w	r5, [sp, #6]
 8001714:	2200      	movs	r2, #0
 8001716:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x00; //write command
 8001718:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800171c:	f003 f924 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001720:	f10d 0107 	add.w	r1, sp, #7
 8001724:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001728:	2201      	movs	r2, #1
 800172a:	484e      	ldr	r0, [pc, #312]	; (8001864 <bmi270_pwr_conf+0x274>)
 800172c:	f003 fcba 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001730:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001734:	f10d 0106 	add.w	r1, sp, #6
 8001738:	2201      	movs	r2, #1
 800173a:	484a      	ldr	r0, [pc, #296]	; (8001864 <bmi270_pwr_conf+0x274>)
 800173c:	f003 fcb2 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001740:	2201      	movs	r2, #1
 8001742:	4611      	mov	r1, r2
 8001744:	4846      	ldr	r0, [pc, #280]	; (8001860 <bmi270_pwr_conf+0x270>)
 8001746:	f003 f90f 	bl	8004968 <HAL_GPIO_WritePin>
		bmi270_spi_write_8(REG_GYR_CONF, 0xE9); //enable the gyr_filter_perf bit; enable gyr_noise_perf bit; set gyr_bwp to normal mode; set gyr_odr to 200 Hz
 800174a:	25e9      	movs	r5, #233	; 0xe9
	uint8_t cmd = reg | 0x00; //write command
 800174c:	2342      	movs	r3, #66	; 0x42
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800174e:	4844      	ldr	r0, [pc, #272]	; (8001860 <bmi270_pwr_conf+0x270>)
	uint8_t cmd = reg | 0x00; //write command
 8001750:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	2101      	movs	r1, #1
 8001758:	f88d 5006 	strb.w	r5, [sp, #6]
 800175c:	f003 f904 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001760:	f10d 0107 	add.w	r1, sp, #7
 8001764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001768:	2201      	movs	r2, #1
 800176a:	483e      	ldr	r0, [pc, #248]	; (8001864 <bmi270_pwr_conf+0x274>)
 800176c:	f003 fc9a 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001770:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001774:	f10d 0106 	add.w	r1, sp, #6
 8001778:	2201      	movs	r2, #1
 800177a:	483a      	ldr	r0, [pc, #232]	; (8001864 <bmi270_pwr_conf+0x274>)
 800177c:	f003 fc92 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001780:	2201      	movs	r2, #1
 8001782:	4611      	mov	r1, r2
 8001784:	4836      	ldr	r0, [pc, #216]	; (8001860 <bmi270_pwr_conf+0x270>)
 8001786:	f003 f8ef 	bl	8004968 <HAL_GPIO_WritePin>
	uint8_t cmd = reg | 0x00; //write command
 800178a:	237c      	movs	r3, #124	; 0x7c
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	e77d      	b.n	800168c <bmi270_pwr_conf+0x9c>
	uint8_t cmd = reg | 0x00; //write command
 8001790:	237d      	movs	r3, #125	; 0x7d
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001792:	4601      	mov	r1, r0
 8001794:	250e      	movs	r5, #14
 8001796:	4832      	ldr	r0, [pc, #200]	; (8001860 <bmi270_pwr_conf+0x270>)
 8001798:	f88d 5006 	strb.w	r5, [sp, #6]
 800179c:	2200      	movs	r2, #0
	uint8_t cmd = reg | 0x00; //write command
 800179e:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80017a2:	f003 f8e1 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80017a6:	f10d 0107 	add.w	r1, sp, #7
 80017aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ae:	4622      	mov	r2, r4
 80017b0:	482c      	ldr	r0, [pc, #176]	; (8001864 <bmi270_pwr_conf+0x274>)
 80017b2:	f003 fc77 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 80017b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ba:	f10d 0106 	add.w	r1, sp, #6
 80017be:	4622      	mov	r2, r4
 80017c0:	4828      	ldr	r0, [pc, #160]	; (8001864 <bmi270_pwr_conf+0x274>)
 80017c2:	f003 fc6f 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80017c6:	4826      	ldr	r0, [pc, #152]	; (8001860 <bmi270_pwr_conf+0x270>)
 80017c8:	4622      	mov	r2, r4
 80017ca:	4621      	mov	r1, r4
 80017cc:	f003 f8cc 	bl	8004968 <HAL_GPIO_WritePin>
		bmi270_spi_write_8(REG_ACC_CONF, 0xA8); //enable the acc_filter_perf bit; set acc_bwp to normal mode; set acc_odr to 100 Hz
 80017d0:	25a8      	movs	r5, #168	; 0xa8
	uint8_t cmd = reg | 0x00; //write command
 80017d2:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80017d4:	4822      	ldr	r0, [pc, #136]	; (8001860 <bmi270_pwr_conf+0x270>)
 80017d6:	f88d 5006 	strb.w	r5, [sp, #6]
 80017da:	2200      	movs	r2, #0
 80017dc:	4621      	mov	r1, r4
	uint8_t cmd = reg | 0x00; //write command
 80017de:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80017e2:	f003 f8c1 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80017e6:	f10d 0107 	add.w	r1, sp, #7
 80017ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ee:	4622      	mov	r2, r4
 80017f0:	481c      	ldr	r0, [pc, #112]	; (8001864 <bmi270_pwr_conf+0x274>)
 80017f2:	f003 fc57 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 80017f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017fa:	f10d 0106 	add.w	r1, sp, #6
 80017fe:	4622      	mov	r2, r4
 8001800:	4818      	ldr	r0, [pc, #96]	; (8001864 <bmi270_pwr_conf+0x274>)
 8001802:	f003 fc4f 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001806:	4816      	ldr	r0, [pc, #88]	; (8001860 <bmi270_pwr_conf+0x270>)
 8001808:	4622      	mov	r2, r4
 800180a:	4621      	mov	r1, r4
 800180c:	f003 f8ac 	bl	8004968 <HAL_GPIO_WritePin>
		bmi270_spi_write_8(REG_GYR_CONF, 0xA9); //enable the gyr_filter_perf bit; set gyr_bwp to normal mode; set gyr_odr to 200 Hz
 8001810:	25a9      	movs	r5, #169	; 0xa9
	uint8_t cmd = reg | 0x00; //write command
 8001812:	2342      	movs	r3, #66	; 0x42
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001814:	4812      	ldr	r0, [pc, #72]	; (8001860 <bmi270_pwr_conf+0x270>)
 8001816:	f88d 5006 	strb.w	r5, [sp, #6]
 800181a:	2200      	movs	r2, #0
 800181c:	4621      	mov	r1, r4
	uint8_t cmd = reg | 0x00; //write command
 800181e:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001822:	f003 f8a1 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001826:	f10d 0107 	add.w	r1, sp, #7
 800182a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800182e:	4622      	mov	r2, r4
 8001830:	480c      	ldr	r0, [pc, #48]	; (8001864 <bmi270_pwr_conf+0x274>)
 8001832:	f003 fc37 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800183a:	f10d 0106 	add.w	r1, sp, #6
 800183e:	4622      	mov	r2, r4
 8001840:	4808      	ldr	r0, [pc, #32]	; (8001864 <bmi270_pwr_conf+0x274>)
 8001842:	f003 fc2f 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001846:	2502      	movs	r5, #2
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <bmi270_pwr_conf+0x270>)
 800184a:	4622      	mov	r2, r4
 800184c:	4621      	mov	r1, r4
 800184e:	f003 f88b 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001852:	4803      	ldr	r0, [pc, #12]	; (8001860 <bmi270_pwr_conf+0x270>)
 8001854:	f88d 5006 	strb.w	r5, [sp, #6]
	uint8_t cmd = reg | 0x00; //write command
 8001858:	237c      	movs	r3, #124	; 0x7c
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	4621      	mov	r1, r4
 800185e:	e719      	b.n	8001694 <bmi270_pwr_conf+0xa4>
 8001860:	40020400 	.word	0x40020400
 8001864:	200063fc 	.word	0x200063fc

08001868 <bmi270_read_gyro>:
uint16_t bmi270_read_gyro(uint8_t axis){
 8001868:	b5f0      	push	{r4, r5, r6, r7, lr}
	data = bmi270_spi_read_8(2 * axis + REG_DATA_14);
 800186a:	f100 0409 	add.w	r4, r0, #9
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800186e:	4f31      	ldr	r7, [pc, #196]	; (8001934 <bmi270_read_gyro+0xcc>)
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001870:	4d31      	ldr	r5, [pc, #196]	; (8001938 <bmi270_read_gyro+0xd0>)
	data = bmi270_spi_read_8(2 * axis + REG_DATA_14);
 8001872:	0064      	lsls	r4, r4, #1
uint16_t bmi270_read_gyro(uint8_t axis){
 8001874:	b083      	sub	sp, #12
	uint8_t dummy = 0x00;
 8001876:	2600      	movs	r6, #0
	data = bmi270_spi_read_8(2 * axis + REG_DATA_14);
 8001878:	b2e4      	uxtb	r4, r4
	uint8_t cmd = reg | 0x80;
 800187a:	f064 037f 	orn	r3, r4, #127	; 0x7f
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800187e:	4638      	mov	r0, r7
 8001880:	4632      	mov	r2, r6
 8001882:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x80;
 8001884:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t dummy = 0x00;
 8001888:	f88d 6005 	strb.w	r6, [sp, #5]
	uint8_t data = 0x00;
 800188c:	f88d 6006 	strb.w	r6, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001890:	f003 f86a 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001894:	f10d 0107 	add.w	r1, sp, #7
 8001898:	4628      	mov	r0, r5
 800189a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800189e:	2201      	movs	r2, #1
 80018a0:	f003 fc00 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 80018a4:	f10d 0105 	add.w	r1, sp, #5
 80018a8:	4628      	mov	r0, r5
 80018aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ae:	2201      	movs	r2, #1
 80018b0:	f003 fea2 	bl	80055f8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 80018b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b8:	f10d 0106 	add.w	r1, sp, #6
 80018bc:	4628      	mov	r0, r5
 80018be:	2201      	movs	r2, #1
 80018c0:	f003 fe9a 	bl	80055f8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80018c4:	2201      	movs	r2, #1
 80018c6:	4638      	mov	r0, r7
 80018c8:	4611      	mov	r1, r2
	data |= bmi270_spi_read_8(2 * axis + REG_DATA_14 + 1)<<8;
 80018ca:	3401      	adds	r4, #1
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80018cc:	f003 f84c 	bl	8004968 <HAL_GPIO_WritePin>
	uint8_t cmd = reg | 0x80;
 80018d0:	f064 047f 	orn	r4, r4, #127	; 0x7f
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80018d4:	4632      	mov	r2, r6
 80018d6:	4638      	mov	r0, r7
 80018d8:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x80;
 80018da:	f88d 4007 	strb.w	r4, [sp, #7]
	uint8_t dummy = 0x00;
 80018de:	f88d 6005 	strb.w	r6, [sp, #5]
	return data;
 80018e2:	f89d 4006 	ldrb.w	r4, [sp, #6]
	uint8_t data = 0x00;
 80018e6:	f88d 6006 	strb.w	r6, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80018ea:	f003 f83d 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80018ee:	f10d 0107 	add.w	r1, sp, #7
 80018f2:	4628      	mov	r0, r5
 80018f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f8:	2201      	movs	r2, #1
 80018fa:	f003 fbd3 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 80018fe:	f10d 0105 	add.w	r1, sp, #5
 8001902:	4628      	mov	r0, r5
 8001904:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001908:	2201      	movs	r2, #1
 800190a:	f003 fe75 	bl	80055f8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 800190e:	f10d 0106 	add.w	r1, sp, #6
 8001912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001916:	4628      	mov	r0, r5
 8001918:	2201      	movs	r2, #1
 800191a:	f003 fe6d 	bl	80055f8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 800191e:	2201      	movs	r2, #1
 8001920:	4638      	mov	r0, r7
 8001922:	4611      	mov	r1, r2
 8001924:	f003 f820 	bl	8004968 <HAL_GPIO_WritePin>
	return data;
 8001928:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 800192c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
 8001930:	b003      	add	sp, #12
 8001932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001934:	40020400 	.word	0x40020400
 8001938:	200063fc 	.word	0x200063fc

0800193c <bmi270_read_accel>:
uint16_t bmi270_read_accel(uint8_t axis){
 800193c:	b5f0      	push	{r4, r5, r6, r7, lr}
	data = bmi270_spi_read_8(2 * axis + REG_DATA_8);
 800193e:	1d84      	adds	r4, r0, #6
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001940:	4f31      	ldr	r7, [pc, #196]	; (8001a08 <bmi270_read_accel+0xcc>)
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001942:	4d32      	ldr	r5, [pc, #200]	; (8001a0c <bmi270_read_accel+0xd0>)
	data = bmi270_spi_read_8(2 * axis + REG_DATA_8);
 8001944:	0064      	lsls	r4, r4, #1
uint16_t bmi270_read_accel(uint8_t axis){
 8001946:	b083      	sub	sp, #12
	uint8_t dummy = 0x00;
 8001948:	2600      	movs	r6, #0
	data = bmi270_spi_read_8(2 * axis + REG_DATA_8);
 800194a:	b2e4      	uxtb	r4, r4
	uint8_t cmd = reg | 0x80;
 800194c:	f064 037f 	orn	r3, r4, #127	; 0x7f
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001950:	4638      	mov	r0, r7
 8001952:	4632      	mov	r2, r6
 8001954:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x80;
 8001956:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t dummy = 0x00;
 800195a:	f88d 6005 	strb.w	r6, [sp, #5]
	uint8_t data = 0x00;
 800195e:	f88d 6006 	strb.w	r6, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001962:	f003 f801 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001966:	f10d 0107 	add.w	r1, sp, #7
 800196a:	4628      	mov	r0, r5
 800196c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001970:	2201      	movs	r2, #1
 8001972:	f003 fb97 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 8001976:	f10d 0105 	add.w	r1, sp, #5
 800197a:	4628      	mov	r0, r5
 800197c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001980:	2201      	movs	r2, #1
 8001982:	f003 fe39 	bl	80055f8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001986:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800198a:	f10d 0106 	add.w	r1, sp, #6
 800198e:	4628      	mov	r0, r5
 8001990:	2201      	movs	r2, #1
 8001992:	f003 fe31 	bl	80055f8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001996:	2201      	movs	r2, #1
 8001998:	4638      	mov	r0, r7
 800199a:	4611      	mov	r1, r2
	data |= (bmi270_spi_read_8(2 * axis + REG_DATA_8 + 1)<<8);
 800199c:	3401      	adds	r4, #1
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 800199e:	f002 ffe3 	bl	8004968 <HAL_GPIO_WritePin>
	uint8_t cmd = reg | 0x80;
 80019a2:	f064 047f 	orn	r4, r4, #127	; 0x7f
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80019a6:	4632      	mov	r2, r6
 80019a8:	4638      	mov	r0, r7
 80019aa:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x80;
 80019ac:	f88d 4007 	strb.w	r4, [sp, #7]
	uint8_t dummy = 0x00;
 80019b0:	f88d 6005 	strb.w	r6, [sp, #5]
	return data;
 80019b4:	f89d 4006 	ldrb.w	r4, [sp, #6]
	uint8_t data = 0x00;
 80019b8:	f88d 6006 	strb.w	r6, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80019bc:	f002 ffd4 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80019c0:	f10d 0107 	add.w	r1, sp, #7
 80019c4:	4628      	mov	r0, r5
 80019c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ca:	2201      	movs	r2, #1
 80019cc:	f003 fb6a 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 80019d0:	f10d 0105 	add.w	r1, sp, #5
 80019d4:	4628      	mov	r0, r5
 80019d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019da:	2201      	movs	r2, #1
 80019dc:	f003 fe0c 	bl	80055f8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 80019e0:	f10d 0106 	add.w	r1, sp, #6
 80019e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019e8:	4628      	mov	r0, r5
 80019ea:	2201      	movs	r2, #1
 80019ec:	f003 fe04 	bl	80055f8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	4638      	mov	r0, r7
 80019f4:	4611      	mov	r1, r2
 80019f6:	f002 ffb7 	bl	8004968 <HAL_GPIO_WritePin>
	return data;
 80019fa:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 80019fe:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
 8001a02:	b003      	add	sp, #12
 8001a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	200063fc 	.word	0x200063fc

08001a10 <bmi270_spi_write_8>:
void bmi270_spi_write_8(uint8_t reg, uint8_t data) {
 8001a10:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001a12:	4c12      	ldr	r4, [pc, #72]	; (8001a5c <bmi270_spi_write_8+0x4c>)
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001a14:	4d12      	ldr	r5, [pc, #72]	; (8001a60 <bmi270_spi_write_8+0x50>)
void bmi270_spi_write_8(uint8_t reg, uint8_t data) {
 8001a16:	b084      	sub	sp, #16
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4606      	mov	r6, r0
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4620      	mov	r0, r4
 8001a20:	2101      	movs	r1, #1
void bmi270_spi_write_8(uint8_t reg, uint8_t data) {
 8001a22:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t cmd = reg | 0x00; //write command
 8001a26:	f88d 600f 	strb.w	r6, [sp, #15]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001a2a:	f002 ff9d 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001a2e:	f10d 010f 	add.w	r1, sp, #15
 8001a32:	4628      	mov	r0, r5
 8001a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f003 fb33 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001a3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a42:	f10d 0107 	add.w	r1, sp, #7
 8001a46:	4628      	mov	r0, r5
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f003 fb2b 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4620      	mov	r0, r4
 8001a52:	4611      	mov	r1, r2
 8001a54:	f002 ff88 	bl	8004968 <HAL_GPIO_WritePin>
}
 8001a58:	b004      	add	sp, #16
 8001a5a:	bd70      	pop	{r4, r5, r6, pc}
 8001a5c:	40020400 	.word	0x40020400
 8001a60:	200063fc 	.word	0x200063fc

08001a64 <bmi270_getGyroConf>:
void bmi270_getGyroConf(IMU *Imu){
 8001a64:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001a66:	4f22      	ldr	r7, [pc, #136]	; (8001af0 <bmi270_getGyroConf+0x8c>)
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001a68:	4e22      	ldr	r6, [pc, #136]	; (8001af4 <bmi270_getGyroConf+0x90>)
void bmi270_getGyroConf(IMU *Imu){
 8001a6a:	b083      	sub	sp, #12
	uint8_t dummy = 0x00;
 8001a6c:	2400      	movs	r4, #0
void bmi270_getGyroConf(IMU *Imu){
 8001a6e:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001a70:	4622      	mov	r2, r4
 8001a72:	4638      	mov	r0, r7
	uint8_t cmd = reg | 0x80;
 8001a74:	23c2      	movs	r3, #194	; 0xc2
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001a76:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x80;
 8001a78:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t dummy = 0x00;
 8001a7c:	f88d 4005 	strb.w	r4, [sp, #5]
	uint8_t data = 0x00;
 8001a80:	f88d 4006 	strb.w	r4, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001a84:	f002 ff70 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001a88:	f10d 0107 	add.w	r1, sp, #7
 8001a8c:	4630      	mov	r0, r6
 8001a8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a92:	2201      	movs	r2, #1
 8001a94:	f003 fb06 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 8001a98:	f10d 0105 	add.w	r1, sp, #5
 8001a9c:	4630      	mov	r0, r6
 8001a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f003 fda8 	bl	80055f8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aac:	f10d 0106 	add.w	r1, sp, #6
 8001ab0:	4630      	mov	r0, r6
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f003 fda0 	bl	80055f8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	4611      	mov	r1, r2
 8001abc:	4638      	mov	r0, r7
 8001abe:	f002 ff53 	bl	8004968 <HAL_GPIO_WritePin>
	return data;
 8001ac2:	f89d 3006 	ldrb.w	r3, [sp, #6]
	Imu->gyr_odr = read_data&0x0F;
 8001ac6:	4622      	mov	r2, r4
 8001ac8:	f003 010f 	and.w	r1, r3, #15
 8001acc:	f361 0207 	bfi	r2, r1, #0, #8
	Imu->gyr_bwp = read_data&0x30;
 8001ad0:	f003 0130 	and.w	r1, r3, #48	; 0x30
	Imu->gyr_odr = read_data&0x0F;
 8001ad4:	f361 220f 	bfi	r2, r1, #8, #8
	Imu->gyr_noise_perf = read_data&0x40;
 8001ad8:	f003 0140 	and.w	r1, r3, #64	; 0x40
	Imu->gyr_odr = read_data&0x0F;
 8001adc:	f361 4217 	bfi	r2, r1, #16, #8
	Imu->gyr_filter_perf = read_data&0x80;
 8001ae0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	Imu->gyr_odr = read_data&0x0F;
 8001ae4:	f363 621f 	bfi	r2, r3, #24, #8
 8001ae8:	f8c5 205a 	str.w	r2, [r5, #90]	; 0x5a
}
 8001aec:	b003      	add	sp, #12
 8001aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af0:	40020400 	.word	0x40020400
 8001af4:	200063fc 	.word	0x200063fc

08001af8 <bmi270_setGyroConf>:
void bmi270_setGyroConf(IMU *Imu){
 8001af8:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001afa:	4c43      	ldr	r4, [pc, #268]	; (8001c08 <bmi270_setGyroConf+0x110>)
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001afc:	4d43      	ldr	r5, [pc, #268]	; (8001c0c <bmi270_setGyroConf+0x114>)
 8001afe:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
void bmi270_setGyroConf(IMU *Imu){
 8001b02:	b083      	sub	sp, #12
 8001b04:	4606      	mov	r6, r0
	uint8_t cmd = reg | 0x00; //write command
 8001b06:	2742      	movs	r7, #66	; 0x42
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001b08:	4620      	mov	r0, r4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t cmd = reg | 0x00; //write command
 8001b12:	f88d 7007 	strb.w	r7, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001b16:	f002 ff27 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001b1a:	f10d 0107 	add.w	r1, sp, #7
 8001b1e:	4628      	mov	r0, r5
 8001b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b24:	2201      	movs	r2, #1
 8001b26:	f003 fabd 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001b2a:	f10d 0106 	add.w	r1, sp, #6
 8001b2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b32:	4628      	mov	r0, r5
 8001b34:	2201      	movs	r2, #1
 8001b36:	f003 fab5 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4611      	mov	r1, r2
 8001b40:	f002 ff12 	bl	8004968 <HAL_GPIO_WritePin>
	bmi270_spi_write_8(REG_GYR_CONF, Imu->gyr_bwp);
 8001b44:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
 8001b48:	f88d 3006 	strb.w	r3, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x00; //write command
 8001b52:	f88d 7007 	strb.w	r7, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001b56:	f002 ff07 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001b5a:	f10d 0107 	add.w	r1, sp, #7
 8001b5e:	4628      	mov	r0, r5
 8001b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b64:	2201      	movs	r2, #1
 8001b66:	f003 fa9d 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001b6a:	f10d 0106 	add.w	r1, sp, #6
 8001b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b72:	4628      	mov	r0, r5
 8001b74:	2201      	movs	r2, #1
 8001b76:	f003 fa95 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	4611      	mov	r1, r2
 8001b80:	f002 fef2 	bl	8004968 <HAL_GPIO_WritePin>
	bmi270_spi_write_8(REG_GYR_CONF, Imu->gyr_noise_perf);
 8001b84:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
 8001b88:	f88d 3006 	strb.w	r3, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x00; //write command
 8001b92:	f88d 7007 	strb.w	r7, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001b96:	f002 fee7 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001b9a:	f10d 0107 	add.w	r1, sp, #7
 8001b9e:	4628      	mov	r0, r5
 8001ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f003 fa7d 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001baa:	f10d 0106 	add.w	r1, sp, #6
 8001bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb2:	4628      	mov	r0, r5
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f003 fa75 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001bba:	2201      	movs	r2, #1
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	f002 fed2 	bl	8004968 <HAL_GPIO_WritePin>
	bmi270_spi_write_8(REG_GYR_CONF, Imu->gyr_filter_perf);
 8001bc4:	f896 305d 	ldrb.w	r3, [r6, #93]	; 0x5d
 8001bc8:	f88d 3006 	strb.w	r3, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001bcc:	4620      	mov	r0, r4
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x00; //write command
 8001bd2:	f88d 7007 	strb.w	r7, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001bd6:	f002 fec7 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001bda:	f10d 0107 	add.w	r1, sp, #7
 8001bde:	4628      	mov	r0, r5
 8001be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be4:	2201      	movs	r2, #1
 8001be6:	f003 fa5d 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001bea:	f10d 0106 	add.w	r1, sp, #6
 8001bee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bf2:	4628      	mov	r0, r5
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f003 fa55 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	4611      	mov	r1, r2
 8001c00:	f002 feb2 	bl	8004968 <HAL_GPIO_WritePin>
}
 8001c04:	b003      	add	sp, #12
 8001c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	200063fc 	.word	0x200063fc

08001c10 <bmi270_getAccConf>:
void bmi270_getAccConf(IMU *Imu){
 8001c10:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001c12:	4e1e      	ldr	r6, [pc, #120]	; (8001c8c <bmi270_getAccConf+0x7c>)
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001c14:	4d1e      	ldr	r5, [pc, #120]	; (8001c90 <bmi270_getAccConf+0x80>)
void bmi270_getAccConf(IMU *Imu){
 8001c16:	b082      	sub	sp, #8
 8001c18:	4604      	mov	r4, r0
	uint8_t dummy = 0x00;
 8001c1a:	2200      	movs	r2, #0
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001c1c:	4630      	mov	r0, r6
	uint8_t cmd = reg | 0x80;
 8001c1e:	23c0      	movs	r3, #192	; 0xc0
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001c20:	2101      	movs	r1, #1
	uint8_t dummy = 0x00;
 8001c22:	f88d 2005 	strb.w	r2, [sp, #5]
	uint8_t data = 0x00;
 8001c26:	f88d 2006 	strb.w	r2, [sp, #6]
	uint8_t cmd = reg | 0x80;
 8001c2a:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001c2e:	f002 fe9b 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001c32:	f10d 0107 	add.w	r1, sp, #7
 8001c36:	4628      	mov	r0, r5
 8001c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f003 fa31 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 8001c42:	f10d 0105 	add.w	r1, sp, #5
 8001c46:	4628      	mov	r0, r5
 8001c48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f003 fcd3 	bl	80055f8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001c52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c56:	f10d 0106 	add.w	r1, sp, #6
 8001c5a:	4628      	mov	r0, r5
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f003 fccb 	bl	80055f8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001c62:	2201      	movs	r2, #1
 8001c64:	4611      	mov	r1, r2
 8001c66:	4630      	mov	r0, r6
 8001c68:	f002 fe7e 	bl	8004968 <HAL_GPIO_WritePin>
	return data;
 8001c6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
	Imu->acc_odr = read_data&0x0F;
 8001c70:	f003 010f 	and.w	r1, r3, #15
	Imu->acc_bwp = read_data&0x70;
 8001c74:	f003 0270 	and.w	r2, r3, #112	; 0x70
	Imu->acc_filter_perf = read_data&0x80;
 8001c78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	Imu->acc_odr = read_data&0x0F;
 8001c7c:	f884 105e 	strb.w	r1, [r4, #94]	; 0x5e
	Imu->acc_bwp = read_data&0x70;
 8001c80:	f884 205f 	strb.w	r2, [r4, #95]	; 0x5f
	Imu->acc_filter_perf = read_data&0x80;
 8001c84:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
}
 8001c88:	b002      	add	sp, #8
 8001c8a:	bd70      	pop	{r4, r5, r6, pc}
 8001c8c:	40020400 	.word	0x40020400
 8001c90:	200063fc 	.word	0x200063fc

08001c94 <bmi270_setAccConf>:
void bmi270_setAccConf(IMU *Imu){
 8001c94:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001c96:	4c33      	ldr	r4, [pc, #204]	; (8001d64 <bmi270_setAccConf+0xd0>)
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001c98:	4d33      	ldr	r5, [pc, #204]	; (8001d68 <bmi270_setAccConf+0xd4>)
 8001c9a:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
void bmi270_setAccConf(IMU *Imu){
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	4606      	mov	r6, r0
	uint8_t cmd = reg | 0x00; //write command
 8001ca2:	2740      	movs	r7, #64	; 0x40
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2101      	movs	r1, #1
 8001caa:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t cmd = reg | 0x00; //write command
 8001cae:	f88d 7007 	strb.w	r7, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001cb2:	f002 fe59 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001cb6:	f10d 0107 	add.w	r1, sp, #7
 8001cba:	4628      	mov	r0, r5
 8001cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f003 f9ef 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001cc6:	f10d 0106 	add.w	r1, sp, #6
 8001cca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cce:	4628      	mov	r0, r5
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f003 f9e7 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4620      	mov	r0, r4
 8001cda:	4611      	mov	r1, r2
 8001cdc:	f002 fe44 	bl	8004968 <HAL_GPIO_WritePin>
	bmi270_spi_write_8(REG_ACC_CONF, Imu->acc_bwp);
 8001ce0:	f896 305f 	ldrb.w	r3, [r6, #95]	; 0x5f
 8001ce4:	f88d 3006 	strb.w	r3, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001ce8:	4620      	mov	r0, r4
 8001cea:	2200      	movs	r2, #0
 8001cec:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x00; //write command
 8001cee:	f88d 7007 	strb.w	r7, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001cf2:	f002 fe39 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001cf6:	f10d 0107 	add.w	r1, sp, #7
 8001cfa:	4628      	mov	r0, r5
 8001cfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d00:	2201      	movs	r2, #1
 8001d02:	f003 f9cf 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001d06:	f10d 0106 	add.w	r1, sp, #6
 8001d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d0e:	4628      	mov	r0, r5
 8001d10:	2201      	movs	r2, #1
 8001d12:	f003 f9c7 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001d16:	2201      	movs	r2, #1
 8001d18:	4620      	mov	r0, r4
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	f002 fe24 	bl	8004968 <HAL_GPIO_WritePin>
	bmi270_spi_write_8(REG_ACC_CONF, Imu->acc_filter_perf);
 8001d20:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
 8001d24:	f88d 3006 	strb.w	r3, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001d28:	4620      	mov	r0, r4
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x00; //write command
 8001d2e:	f88d 7007 	strb.w	r7, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001d32:	f002 fe19 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001d36:	f10d 0107 	add.w	r1, sp, #7
 8001d3a:	4628      	mov	r0, r5
 8001d3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d40:	2201      	movs	r2, #1
 8001d42:	f003 f9af 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001d46:	f10d 0106 	add.w	r1, sp, #6
 8001d4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d4e:	4628      	mov	r0, r5
 8001d50:	2201      	movs	r2, #1
 8001d52:	f003 f9a7 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001d56:	2201      	movs	r2, #1
 8001d58:	4620      	mov	r0, r4
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	f002 fe04 	bl	8004968 <HAL_GPIO_WritePin>
}
 8001d60:	b003      	add	sp, #12
 8001d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d64:	40020400 	.word	0x40020400
 8001d68:	200063fc 	.word	0x200063fc

08001d6c <bmi270_getGyroRange>:
void bmi270_getGyroRange(IMU *Imu){
 8001d6c:	b510      	push	{r4, lr}
 8001d6e:	b082      	sub	sp, #8
	uint8_t dummy = 0x00;
 8001d70:	2200      	movs	r2, #0
	uint8_t cmd = reg | 0x80;
 8001d72:	23c3      	movs	r3, #195	; 0xc3
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001d74:	2101      	movs	r1, #1
void bmi270_getGyroRange(IMU *Imu){
 8001d76:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001d78:	482e      	ldr	r0, [pc, #184]	; (8001e34 <bmi270_getGyroRange+0xc8>)
	uint8_t dummy = 0x00;
 8001d7a:	f88d 2005 	strb.w	r2, [sp, #5]
	uint8_t data = 0x00;
 8001d7e:	f88d 2006 	strb.w	r2, [sp, #6]
	uint8_t cmd = reg | 0x80;
 8001d82:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001d86:	f002 fdef 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001d8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f10d 0107 	add.w	r1, sp, #7
 8001d94:	4828      	ldr	r0, [pc, #160]	; (8001e38 <bmi270_getGyroRange+0xcc>)
 8001d96:	f003 f985 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 8001d9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f10d 0105 	add.w	r1, sp, #5
 8001da4:	4824      	ldr	r0, [pc, #144]	; (8001e38 <bmi270_getGyroRange+0xcc>)
 8001da6:	f003 fc27 	bl	80055f8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001daa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dae:	2201      	movs	r2, #1
 8001db0:	f10d 0106 	add.w	r1, sp, #6
 8001db4:	4820      	ldr	r0, [pc, #128]	; (8001e38 <bmi270_getGyroRange+0xcc>)
 8001db6:	f003 fc1f 	bl	80055f8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	481d      	ldr	r0, [pc, #116]	; (8001e34 <bmi270_getGyroRange+0xc8>)
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	f002 fdd2 	bl	8004968 <HAL_GPIO_WritePin>
	return data;
 8001dc4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d82c      	bhi.n	8001e26 <bmi270_getGyroRange+0xba>
 8001dcc:	e8df f003 	tbb	[pc, r3]
 8001dd0:	231b130b 	.word	0x231b130b
 8001dd4:	03          	.byte	0x03
 8001dd5:	00          	.byte	0x00
		Imu->gyr_range = BMI270_GYRO_125_DPS;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <bmi270_getGyroRange+0xd0>)
		break;
 8001dd8:	eddf 7a19 	vldr	s15, [pc, #100]	; 8001e40 <bmi270_getGyroRange+0xd4>
		Imu->gyr_range = BMI270_GYRO_125_DPS;
 8001ddc:	6023      	str	r3, [r4, #0]
	Imu->inv_gyr_range = 1/Imu->gyr_range;
 8001dde:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8001de2:	b002      	add	sp, #8
 8001de4:	bd10      	pop	{r4, pc}
		Imu->gyr_range = BMI270_GYRO_2000_DPS;
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <bmi270_getGyroRange+0xd8>)
		break;
 8001de8:	eddf 7a17 	vldr	s15, [pc, #92]	; 8001e48 <bmi270_getGyroRange+0xdc>
		Imu->gyr_range = BMI270_GYRO_2000_DPS;
 8001dec:	6023      	str	r3, [r4, #0]
	Imu->inv_gyr_range = 1/Imu->gyr_range;
 8001dee:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8001df2:	b002      	add	sp, #8
 8001df4:	bd10      	pop	{r4, pc}
		Imu->gyr_range = BMI270_GYRO_1000_DPS;
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <bmi270_getGyroRange+0xe0>)
		break;
 8001df8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8001e50 <bmi270_getGyroRange+0xe4>
		Imu->gyr_range = BMI270_GYRO_1000_DPS;
 8001dfc:	6023      	str	r3, [r4, #0]
	Imu->inv_gyr_range = 1/Imu->gyr_range;
 8001dfe:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8001e02:	b002      	add	sp, #8
 8001e04:	bd10      	pop	{r4, pc}
		Imu->gyr_range = BMI270_GYRO_500_DPS;
 8001e06:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <bmi270_getGyroRange+0xe8>)
		break;
 8001e08:	eddf 7a13 	vldr	s15, [pc, #76]	; 8001e58 <bmi270_getGyroRange+0xec>
		Imu->gyr_range = BMI270_GYRO_500_DPS;
 8001e0c:	6023      	str	r3, [r4, #0]
	Imu->inv_gyr_range = 1/Imu->gyr_range;
 8001e0e:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8001e12:	b002      	add	sp, #8
 8001e14:	bd10      	pop	{r4, pc}
		Imu->gyr_range = BMI270_GYRO_250_DPS;
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <bmi270_getGyroRange+0xf0>)
		break;
 8001e18:	eddf 7a11 	vldr	s15, [pc, #68]	; 8001e60 <bmi270_getGyroRange+0xf4>
		Imu->gyr_range = BMI270_GYRO_250_DPS;
 8001e1c:	6023      	str	r3, [r4, #0]
	Imu->inv_gyr_range = 1/Imu->gyr_range;
 8001e1e:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8001e22:	b002      	add	sp, #8
 8001e24:	bd10      	pop	{r4, pc}
 8001e26:	ed94 7a00 	vldr	s14, [r4]
 8001e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e32:	e7d4      	b.n	8001dde <bmi270_getGyroRange+0x72>
 8001e34:	40020400 	.word	0x40020400
 8001e38:	200063fc 	.word	0x200063fc
 8001e3c:	4383126f 	.word	0x4383126f
 8001e40:	3b79ffff 	.word	0x3b79ffff
 8001e44:	4183126f 	.word	0x4183126f
 8001e48:	3d79ffff 	.word	0x3d79ffff
 8001e4c:	4203126f 	.word	0x4203126f
 8001e50:	3cf9ffff 	.word	0x3cf9ffff
 8001e54:	4283126f 	.word	0x4283126f
 8001e58:	3c79ffff 	.word	0x3c79ffff
 8001e5c:	4303126f 	.word	0x4303126f
 8001e60:	3bf9ffff 	.word	0x3bf9ffff

08001e64 <bmi270_getAccelRange>:
void bmi270_getAccelRange(IMU *Imu){
 8001e64:	b510      	push	{r4, lr}
 8001e66:	b082      	sub	sp, #8
	uint8_t dummy = 0x00;
 8001e68:	2200      	movs	r2, #0
	uint8_t cmd = reg | 0x80;
 8001e6a:	23c1      	movs	r3, #193	; 0xc1
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001e6c:	2101      	movs	r1, #1
void bmi270_getAccelRange(IMU *Imu){
 8001e6e:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001e70:	482c      	ldr	r0, [pc, #176]	; (8001f24 <bmi270_getAccelRange+0xc0>)
	uint8_t dummy = 0x00;
 8001e72:	f88d 2005 	strb.w	r2, [sp, #5]
	uint8_t data = 0x00;
 8001e76:	f88d 2006 	strb.w	r2, [sp, #6]
	uint8_t cmd = reg | 0x80;
 8001e7a:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001e7e:	f002 fd73 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001e82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e86:	2201      	movs	r2, #1
 8001e88:	f10d 0107 	add.w	r1, sp, #7
 8001e8c:	4826      	ldr	r0, [pc, #152]	; (8001f28 <bmi270_getAccelRange+0xc4>)
 8001e8e:	f003 f909 	bl	80050a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 8001e92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e96:	2201      	movs	r2, #1
 8001e98:	f10d 0105 	add.w	r1, sp, #5
 8001e9c:	4822      	ldr	r0, [pc, #136]	; (8001f28 <bmi270_getAccelRange+0xc4>)
 8001e9e:	f003 fbab 	bl	80055f8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f10d 0106 	add.w	r1, sp, #6
 8001eac:	481e      	ldr	r0, [pc, #120]	; (8001f28 <bmi270_getAccelRange+0xc4>)
 8001eae:	f003 fba3 	bl	80055f8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	481b      	ldr	r0, [pc, #108]	; (8001f24 <bmi270_getAccelRange+0xc0>)
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	f002 fd56 	bl	8004968 <HAL_GPIO_WritePin>
	return data;
 8001ebc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d827      	bhi.n	8001f14 <bmi270_getAccelRange+0xb0>
 8001ec4:	e8df f003 	tbb	[pc, r3]
 8001ec8:	021d140b 	.word	0x021d140b
		Imu->acc_range = BMI270_ACCEL_16G;
 8001ecc:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
		break;
 8001ed0:	eddf 7a16 	vldr	s15, [pc, #88]	; 8001f2c <bmi270_getAccelRange+0xc8>
		Imu->acc_range = BMI270_ACCEL_16G;
 8001ed4:	6063      	str	r3, [r4, #4]
	Imu->inv_acc_range = 1/Imu->acc_range;
 8001ed6:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8001eda:	b002      	add	sp, #8
 8001edc:	bd10      	pop	{r4, pc}
		break;
 8001ede:	eddf 7a14 	vldr	s15, [pc, #80]	; 8001f30 <bmi270_getAccelRange+0xcc>
		Imu->acc_range = BMI270_ACCEL_2G;
 8001ee2:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8001ee6:	6063      	str	r3, [r4, #4]
	Imu->inv_acc_range = 1/Imu->acc_range;
 8001ee8:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8001eec:	b002      	add	sp, #8
 8001eee:	bd10      	pop	{r4, pc}
		break;
 8001ef0:	eddf 7a10 	vldr	s15, [pc, #64]	; 8001f34 <bmi270_getAccelRange+0xd0>
		Imu->acc_range = BMI270_ACCEL_4G;
 8001ef4:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8001ef8:	6063      	str	r3, [r4, #4]
	Imu->inv_acc_range = 1/Imu->acc_range;
 8001efa:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8001efe:	b002      	add	sp, #8
 8001f00:	bd10      	pop	{r4, pc}
		break;
 8001f02:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8001f38 <bmi270_getAccelRange+0xd4>
		Imu->acc_range = BMI270_ACCEL_8G;
 8001f06:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001f0a:	6063      	str	r3, [r4, #4]
	Imu->inv_acc_range = 1/Imu->acc_range;
 8001f0c:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8001f10:	b002      	add	sp, #8
 8001f12:	bd10      	pop	{r4, pc}
 8001f14:	ed94 7a01 	vldr	s14, [r4, #4]
 8001f18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f20:	e7d9      	b.n	8001ed6 <bmi270_getAccelRange+0x72>
 8001f22:	bf00      	nop
 8001f24:	40020400 	.word	0x40020400
 8001f28:	200063fc 	.word	0x200063fc
 8001f2c:	3a000000 	.word	0x3a000000
 8001f30:	38800000 	.word	0x38800000
 8001f34:	39000000 	.word	0x39000000
 8001f38:	39800000 	.word	0x39800000

08001f3c <bmi270_calibrateInit>:
	Imu->calibration_c = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
	Imu->gyr_lim_min_x = lim;
 8001f42:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
	Imu->gyr_lim_min_y = lim;
 8001f46:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
	Imu->gyr_lim_min_z = lim;
 8001f4a:	ed80 0a12 	vstr	s0, [r0, #72]	; 0x48
	Imu->gyr_lim_max_x = lim;
 8001f4e:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
	Imu->gyr_lim_max_y = lim;
 8001f52:	ed80 0a14 	vstr	s0, [r0, #80]	; 0x50
	Imu->gyr_lim_max_z = lim;
 8001f56:	ed80 0a15 	vstr	s0, [r0, #84]	; 0x54
}
 8001f5a:	4770      	bx	lr

08001f5c <bmi270_calibrateNoise>:
	if(Imu->calibration_c < BMI270_CALIBRATION_TIM){
 8001f5c:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8001f60:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001f64:	d22a      	bcs.n	8001fbc <bmi270_calibrateNoise+0x60>
		if(Imu->gyr_x < 0){
 8001f66:	edd0 7a04 	vldr	s15, [r0, #16]
 8001f6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f72:	d425      	bmi.n	8001fc0 <bmi270_calibrateNoise+0x64>
			Imu->gyr_lim_max_x += Imu->gyr_x;
 8001f74:	ed90 7a13 	vldr	s14, [r0, #76]	; 0x4c
 8001f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7c:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
		if(Imu->gyr_y < 0){
 8001f80:	edd0 7a05 	vldr	s15, [r0, #20]
 8001f84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8c:	d425      	bmi.n	8001fda <bmi270_calibrateNoise+0x7e>
			Imu->gyr_lim_max_y += Imu->gyr_y;
 8001f8e:	ed90 7a14 	vldr	s14, [r0, #80]	; 0x50
 8001f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f96:	edc0 7a14 	vstr	s15, [r0, #80]	; 0x50
		if(Imu->gyr_z < 0){
 8001f9a:	edd0 7a06 	vldr	s15, [r0, #24]
 8001f9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa6:	d425      	bmi.n	8001ff4 <bmi270_calibrateNoise+0x98>
			Imu->gyr_lim_max_z += Imu->gyr_z;
 8001fa8:	ed90 7a15 	vldr	s14, [r0, #84]	; 0x54
 8001fac:	ee77 7a27 	vadd.f32	s15, s14, s15
		Imu->calibration_c++;
 8001fb0:	3301      	adds	r3, #1
			Imu->gyr_lim_max_z += Imu->gyr_z;
 8001fb2:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
		Imu->calibration_c++;
 8001fb6:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
 8001fba:	4770      	bx	lr
	else if(Imu->calibration_c == BMI270_CALIBRATION_TIM){
 8001fbc:	d024      	beq.n	8002008 <bmi270_calibrateNoise+0xac>
}
 8001fbe:	4770      	bx	lr
			Imu->gyr_lim_min_x += Imu->gyr_x;
 8001fc0:	ed90 7a10 	vldr	s14, [r0, #64]	; 0x40
 8001fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc8:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
		if(Imu->gyr_y < 0){
 8001fcc:	edd0 7a05 	vldr	s15, [r0, #20]
 8001fd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd8:	d5d9      	bpl.n	8001f8e <bmi270_calibrateNoise+0x32>
			Imu->gyr_lim_min_y += Imu->gyr_y;
 8001fda:	ed90 7a11 	vldr	s14, [r0, #68]	; 0x44
 8001fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe2:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
		if(Imu->gyr_z < 0){
 8001fe6:	edd0 7a06 	vldr	s15, [r0, #24]
 8001fea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff2:	d5d9      	bpl.n	8001fa8 <bmi270_calibrateNoise+0x4c>
			Imu->gyr_lim_min_z += Imu->gyr_z;
 8001ff4:	ed90 7a12 	vldr	s14, [r0, #72]	; 0x48
 8001ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
		Imu->calibration_c++;
 8001ffc:	3301      	adds	r3, #1
			Imu->gyr_lim_min_z += Imu->gyr_z;
 8001ffe:	edc0 7a12 	vstr	s15, [r0, #72]	; 0x48
		Imu->calibration_c++;
 8002002:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
 8002006:	4770      	bx	lr
		Imu->gyr_lim_min_x /= (float)BMI270_CALIBRATION_TIM;	//set limits from mean
 8002008:	eddf 7a15 	vldr	s15, [pc, #84]	; 8002060 <bmi270_calibrateNoise+0x104>
 800200c:	edd0 4a10 	vldr	s9, [r0, #64]	; 0x40
		Imu->gyr_lim_min_y /= (float)BMI270_CALIBRATION_TIM;
 8002010:	ed90 5a11 	vldr	s10, [r0, #68]	; 0x44
		Imu->gyr_lim_min_z /= (float)BMI270_CALIBRATION_TIM;
 8002014:	edd0 5a12 	vldr	s11, [r0, #72]	; 0x48
		Imu->gyr_lim_max_x /= (float)BMI270_CALIBRATION_TIM;
 8002018:	ed90 6a13 	vldr	s12, [r0, #76]	; 0x4c
		Imu->gyr_lim_max_y /= (float)BMI270_CALIBRATION_TIM;
 800201c:	edd0 6a14 	vldr	s13, [r0, #80]	; 0x50
		Imu->gyr_lim_max_z /= (float)BMI270_CALIBRATION_TIM;
 8002020:	ed90 7a15 	vldr	s14, [r0, #84]	; 0x54
		Imu->gyr_lim_min_x /= (float)BMI270_CALIBRATION_TIM;	//set limits from mean
 8002024:	ee64 4aa7 	vmul.f32	s9, s9, s15
		Imu->gyr_lim_min_y /= (float)BMI270_CALIBRATION_TIM;
 8002028:	ee25 5a27 	vmul.f32	s10, s10, s15
		Imu->gyr_lim_min_z /= (float)BMI270_CALIBRATION_TIM;
 800202c:	ee65 5aa7 	vmul.f32	s11, s11, s15
		Imu->gyr_lim_max_x /= (float)BMI270_CALIBRATION_TIM;
 8002030:	ee26 6a27 	vmul.f32	s12, s12, s15
		Imu->gyr_lim_max_y /= (float)BMI270_CALIBRATION_TIM;
 8002034:	ee66 6aa7 	vmul.f32	s13, s13, s15
		Imu->gyr_lim_max_z /= (float)BMI270_CALIBRATION_TIM;
 8002038:	ee67 7a27 	vmul.f32	s15, s14, s15
		Imu->calibration_c++; 									//calibration lock
 800203c:	f240 132d 	movw	r3, #301	; 0x12d
		Imu->gyr_lim_min_x /= (float)BMI270_CALIBRATION_TIM;	//set limits from mean
 8002040:	edc0 4a10 	vstr	s9, [r0, #64]	; 0x40
		Imu->gyr_lim_min_y /= (float)BMI270_CALIBRATION_TIM;
 8002044:	ed80 5a11 	vstr	s10, [r0, #68]	; 0x44
		Imu->gyr_lim_min_z /= (float)BMI270_CALIBRATION_TIM;
 8002048:	edc0 5a12 	vstr	s11, [r0, #72]	; 0x48
		Imu->gyr_lim_max_x /= (float)BMI270_CALIBRATION_TIM;
 800204c:	ed80 6a13 	vstr	s12, [r0, #76]	; 0x4c
		Imu->gyr_lim_max_y /= (float)BMI270_CALIBRATION_TIM;
 8002050:	edc0 6a14 	vstr	s13, [r0, #80]	; 0x50
		Imu->gyr_lim_max_z /= (float)BMI270_CALIBRATION_TIM;
 8002054:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
		Imu->calibration_c++; 									//calibration lock
 8002058:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	3b5a740e 	.word	0x3b5a740e

08002064 <drv8313_init>:
 * 1: Set nRESET and nSLEEP to inactive HIGH to enable the three phase H-bridge.
 * 2: Read the nFAULT pin. If the pin is active HIGH, the initialization stops. If inactive LOW, the procedure continues.
 * 3: Pass references to timers and timer channels so that the PWM function of each timer may be used.
 * 4: Start PWM.
 */
uint8_t drv8313_init(MotorDriver *driver, TIM_HandleTypeDef *htim) {
 8002064:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(PINBUS_DRV8313, PIN_nSLEEP, GPIO_PIN_SET); /* Enable the unit by setting nRESET + nSLEEP to HIGH*/
 8002066:	2201      	movs	r2, #1
uint8_t drv8313_init(MotorDriver *driver, TIM_HandleTypeDef *htim) {
 8002068:	4604      	mov	r4, r0
 800206a:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(PINBUS_DRV8313, PIN_nSLEEP, GPIO_PIN_SET); /* Enable the unit by setting nRESET + nSLEEP to HIGH*/
 800206c:	4849      	ldr	r0, [pc, #292]	; (8002194 <drv8313_init+0x130>)
 800206e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002072:	f002 fc79 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_Delay(1); //Misread prevention delay.
 8002076:	2001      	movs	r0, #1
 8002078:	f001 fef0 	bl	8003e5c <HAL_Delay>

	/* Check for faults before init */
	if (!HAL_GPIO_ReadPin(PINBUS_DRV8313, driver->PIN_nFAULT)) {
 800207c:	8861      	ldrh	r1, [r4, #2]
 800207e:	4845      	ldr	r0, [pc, #276]	; (8002194 <drv8313_init+0x130>)
 8002080:	f002 fc6c 	bl	800495c <HAL_GPIO_ReadPin>
 8002084:	b900      	cbnz	r0, 8002088 <drv8313_init+0x24>
	/* Calculate PWM period */
	driver->pwm_period = driver->timer->Init.Period + 1;

	return 1;

}
 8002086:	bd70      	pop	{r4, r5, r6, pc}
	driver->pwm_ch1 = TIM_CHANNEL_1;
 8002088:	f44f 6280 	mov.w	r2, #1024	; 0x400
	driver->pwm_ch3 = TIM_CHANNEL_3;
 800208c:	2308      	movs	r3, #8
	driver->pwm_ch1 = TIM_CHANNEL_1;
 800208e:	f8a4 2154 	strh.w	r2, [r4, #340]	; 0x154
	driver->pwm_ch3 = TIM_CHANNEL_3;
 8002092:	f884 3156 	strb.w	r3, [r4, #342]	; 0x156
	driver->timer = htim;
 8002096:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
	PID_Init(&driver->d_reg);
 800209a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800209e:	f001 fb53 	bl	8003748 <PID_Init>
	PID_Init(&driver->q_reg);
 80020a2:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80020a6:	f001 fb4f 	bl	8003748 <PID_Init>
	PID_Init(&driver->speed_reg);
 80020aa:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80020ae:	f001 fb4b 	bl	8003748 <PID_Init>
	PID_Init(&driver->pos_reg);
 80020b2:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 80020b6:	f001 fb47 	bl	8003748 <PID_Init>
	PID_Init(&driver->imu_reg);
 80020ba:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 80020be:	f001 fb43 	bl	8003748 <PID_Init>
	driver->speed_reg.lim_min = -BLDC_MAX_VOLTAGE/BLDC_PHASE_RESISTANCE;
 80020c2:	4d35      	ldr	r5, [pc, #212]	; (8002198 <drv8313_init+0x134>)
	driver->speed_reg.lim_max = BLDC_MAX_VOLTAGE/BLDC_PHASE_RESISTANCE;
 80020c4:	4b35      	ldr	r3, [pc, #212]	; (800219c <drv8313_init+0x138>)
	driver->speed_reg.lim_min = -BLDC_MAX_VOLTAGE/BLDC_PHASE_RESISTANCE;
 80020c6:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
	driver->speed_reg.lim_max = BLDC_MAX_VOLTAGE/BLDC_PHASE_RESISTANCE;
 80020ca:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	driver->pos_reg.lim_min = -52.35f; 		/* rad/s */
 80020ce:	4834      	ldr	r0, [pc, #208]	; (80021a0 <drv8313_init+0x13c>)
	driver->pos_reg.lim_max = 52.35f;		/* rad/s */
 80020d0:	4934      	ldr	r1, [pc, #208]	; (80021a4 <drv8313_init+0x140>)
	driver->imu_reg.lim_min = -100.0f;
 80020d2:	4a35      	ldr	r2, [pc, #212]	; (80021a8 <drv8313_init+0x144>)
	driver->imu_reg.lim_max = 100.0f;
 80020d4:	4d35      	ldr	r5, [pc, #212]	; (80021ac <drv8313_init+0x148>)
	driver->pos_reg.lim_min = -52.35f; 		/* rad/s */
 80020d6:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	driver->d_reg.Ki = 0.0f;
 80020da:	2300      	movs	r3, #0
	driver->d_reg.lim_min = -BLDC_MAX_VOLTAGE;
 80020dc:	4834      	ldr	r0, [pc, #208]	; (80021b0 <drv8313_init+0x14c>)
	driver->pos_reg.lim_max = 52.35f;		/* rad/s */
 80020de:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
	driver->imu_reg.lim_min = -100.0f;
 80020e2:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0
	driver->d_reg.lim_max = BLDC_MAX_VOLTAGE;
 80020e6:	4933      	ldr	r1, [pc, #204]	; (80021b4 <drv8313_init+0x150>)
	driver->imu_reg.lim_max = 100.0f;
 80020e8:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
	driver->d_reg.Kp = 1.0f;
 80020ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	driver->d_reg.Ki = 0.0f;
 80020f0:	62a3      	str	r3, [r4, #40]	; 0x28
	driver->d_reg.Kd = 0.0f;
 80020f2:	62e3      	str	r3, [r4, #44]	; 0x2c
	driver->q_reg.Ki = 0.0f;
 80020f4:	65a3      	str	r3, [r4, #88]	; 0x58
	driver->q_reg.Kd = 0.0f;
 80020f6:	65e3      	str	r3, [r4, #92]	; 0x5c
	driver->speed_reg.Kd = 0.0f; /* NOPE. DON'T. EDIT. */
 80020f8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	driver->pos_reg.Ki = 0.0f;
 80020fc:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	driver->pos_reg.Kd = 0.0f;
 8002100:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	driver->imu_reg.Kd = 0.0f;
 8002104:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
	driver->speed_reg.Ki = 10.0f;
 8002108:	4e2b      	ldr	r6, [pc, #172]	; (80021b8 <drv8313_init+0x154>)
	driver->imu_reg.Ki = 5.0f;
 800210a:	4b2c      	ldr	r3, [pc, #176]	; (80021bc <drv8313_init+0x158>)
	driver->pos_reg.Kp = 15.0f;
 800210c:	4d2c      	ldr	r5, [pc, #176]	; (80021c0 <drv8313_init+0x15c>)
	driver->imu_reg.Ki = 5.0f;
 800210e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	driver->d_reg.Kp = 1.0f;
 8002112:	6262      	str	r2, [r4, #36]	; 0x24
	driver->q_reg.Kp = 1.0f;
 8002114:	6562      	str	r2, [r4, #84]	; 0x54
	driver->speed_reg.Kp = 1.0f;
 8002116:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	driver->imu_reg.Kp = 1.0f;
 800211a:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
	driver->d_reg.lim_max = BLDC_MAX_VOLTAGE;
 800211e:	6361      	str	r1, [r4, #52]	; 0x34
	driver->q_reg.lim_max = BLDC_MAX_VOLTAGE;
 8002120:	6661      	str	r1, [r4, #100]	; 0x64
	driver->d_reg.lim_min = -BLDC_MAX_VOLTAGE;
 8002122:	6320      	str	r0, [r4, #48]	; 0x30
	driver->q_reg.lim_min = -BLDC_MAX_VOLTAGE;
 8002124:	6620      	str	r0, [r4, #96]	; 0x60
	lpf_init(&driver->LPF_current_d, 0.005f);
 8002126:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80021c4 <drv8313_init+0x160>
	driver->speed_reg.Ki = 10.0f;
 800212a:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
	lpf_init(&driver->LPF_current_d, 0.005f);
 800212e:	f504 708a 	add.w	r0, r4, #276	; 0x114
	driver->pos_reg.Kp = 15.0f;
 8002132:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
	lpf_init(&driver->LPF_current_d, 0.005f);
 8002136:	f000 fae9 	bl	800270c <lpf_init>
	lpf_init(&driver->LPF_current_q, 0.005f);
 800213a:	f504 7090 	add.w	r0, r4, #288	; 0x120
 800213e:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80021c4 <drv8313_init+0x160>
 8002142:	f000 fae3 	bl	800270c <lpf_init>
	lpf_init(&driver->LPF_velocity, 0.05f);
 8002146:	f504 7096 	add.w	r0, r4, #300	; 0x12c
 800214a:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80021c8 <drv8313_init+0x164>
 800214e:	f000 fadd 	bl	800270c <lpf_init>
	lpf_init(&driver->LPF_angle, 0.005f);
 8002152:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80021c4 <drv8313_init+0x160>
 8002156:	f504 709c 	add.w	r0, r4, #312	; 0x138
 800215a:	f000 fad7 	bl	800270c <lpf_init>
	HAL_TIM_PWM_Start(driver->timer, driver->pwm_ch1);
 800215e:	f894 1154 	ldrb.w	r1, [r4, #340]	; 0x154
 8002162:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
 8002166:	f003 fd03 	bl	8005b70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(driver->timer, driver->pwm_ch2);
 800216a:	f894 1155 	ldrb.w	r1, [r4, #341]	; 0x155
 800216e:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
 8002172:	f003 fcfd 	bl	8005b70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(driver->timer, driver->pwm_ch3);
 8002176:	f894 1156 	ldrb.w	r1, [r4, #342]	; 0x156
 800217a:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
 800217e:	f003 fcf7 	bl	8005b70 <HAL_TIM_PWM_Start>
	driver->pwm_period = driver->timer->Init.Period + 1;
 8002182:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	3301      	adds	r3, #1
 800218a:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
	return 1;
 800218e:	2001      	movs	r0, #1
}
 8002190:	bd70      	pop	{r4, r5, r6, pc}
 8002192:	bf00      	nop
 8002194:	40020400 	.word	0x40020400
 8002198:	c01197a8 	.word	0xc01197a8
 800219c:	401197a8 	.word	0x401197a8
 80021a0:	c2516666 	.word	0xc2516666
 80021a4:	42516666 	.word	0x42516666
 80021a8:	c2c80000 	.word	0xc2c80000
 80021ac:	42c80000 	.word	0x42c80000
 80021b0:	c1400000 	.word	0xc1400000
 80021b4:	41400000 	.word	0x41400000
 80021b8:	41200000 	.word	0x41200000
 80021bc:	40a00000 	.word	0x40a00000
 80021c0:	41700000 	.word	0x41700000
 80021c4:	3ba3d70a 	.word	0x3ba3d70a
 80021c8:	3d4ccccd 	.word	0x3d4ccccd

080021cc <drv8313_setPWM>:
	/* Wait for PWM period to finish before setting new duty period
	 * Note: May be unnecessary, but used as a safety measure for now */
//	while(tim_instance->CNT != 0){
//	}

	tim_instance->CCR1 = duty_a * driver->pwm_period;
 80021cc:	f8b0 3158 	ldrh.w	r3, [r0, #344]	; 0x158
 80021d0:	ee07 3a90 	vmov	s15, r3
 80021d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d8:	ee27 0a80 	vmul.f32	s0, s15, s0
	tim_instance->CCR2 = duty_b * driver->pwm_period;
 80021dc:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tim_instance->CCR3 = duty_c * driver->pwm_period;
 80021e0:	ee27 1a81 	vmul.f32	s2, s15, s2
	tim_instance->CCR1 = duty_a * driver->pwm_period;
 80021e4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	tim_instance->CCR2 = duty_b * driver->pwm_period;
 80021e8:	eefc 0ae0 	vcvt.u32.f32	s1, s1
	tim_instance->CCR3 = duty_c * driver->pwm_period;
 80021ec:	eebc 1ac1 	vcvt.u32.f32	s2, s2
	tim_instance->CCR1 = duty_a * driver->pwm_period;
 80021f0:	ed81 0a0d 	vstr	s0, [r1, #52]	; 0x34
	tim_instance->CCR2 = duty_b * driver->pwm_period;
 80021f4:	edc1 0a0e 	vstr	s1, [r1, #56]	; 0x38
	tim_instance->CCR3 = duty_c * driver->pwm_period;
 80021f8:	ed81 1a0f 	vstr	s2, [r1, #60]	; 0x3c
}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop

08002200 <foc_pi_control>:
}

/**
 * @brief All PI regulation required to get dq-reference voltages
 */
void foc_pi_control(MotorDriver *driver, float target) {
 8002200:	b510      	push	{r4, lr}



	/* Check which type of regulation should be used */
	if (CONTROL_TYPE == CONTROL_POSITION){
		driver->velocity_target = PID_Update(&driver->pos_reg, target, driver->angle);
 8002202:	edd0 0a5b 	vldr	s1, [r0, #364]	; 0x16c
void foc_pi_control(MotorDriver *driver, float target) {
 8002206:	4604      	mov	r4, r0
 8002208:	ed2d 8b02 	vpush	{d8}
		driver->velocity_target = PID_Update(&driver->pos_reg, target, driver->angle);
 800220c:	30b4      	adds	r0, #180	; 0xb4
 800220e:	f001 faab 	bl	8003768 <PID_Update>
		driver->velocity_target = target;
	}

	/* Velocity regulation --> i_qref
	 * Note: Setpoint should be set by main function later*/
	float i_qref = PID_Update(&driver->speed_reg, driver->velocity_target,
 8002212:	edd4 0a5f 	vldr	s1, [r4, #380]	; 0x17c
		driver->velocity_target = PID_Update(&driver->pos_reg, target, driver->angle);
 8002216:	ed84 0a60 	vstr	s0, [r4, #384]	; 0x180
	float i_qref = PID_Update(&driver->speed_reg, driver->velocity_target,
 800221a:	f104 0084 	add.w	r0, r4, #132	; 0x84
 800221e:	f001 faa3 	bl	8003768 <PID_Update>
			driver->velocity);

	driver->i_d = lpf_exec(&driver->LPF_current_d, driver->i_d);
 8002222:	f504 708a 	add.w	r0, r4, #276	; 0x114
	float i_qref = PID_Update(&driver->speed_reg, driver->velocity_target,
 8002226:	eeb0 8a40 	vmov.f32	s16, s0
	driver->i_d = lpf_exec(&driver->LPF_current_d, driver->i_d);
 800222a:	ed94 0a03 	vldr	s0, [r4, #12]
 800222e:	f000 fa77 	bl	8002720 <lpf_exec>
	driver->i_q = lpf_exec(&driver->LPF_current_q, driver->i_q);
 8002232:	f504 7090 	add.w	r0, r4, #288	; 0x120
	driver->i_d = lpf_exec(&driver->LPF_current_d, driver->i_d);
 8002236:	ed84 0a03 	vstr	s0, [r4, #12]
	driver->i_q = lpf_exec(&driver->LPF_current_q, driver->i_q);
 800223a:	ed94 0a04 	vldr	s0, [r4, #16]
 800223e:	f000 fa6f 	bl	8002720 <lpf_exec>
	/* current PI stuff */
	driver->V_d = PID_Update(&driver->d_reg, 0, driver->i_d);
 8002242:	edd4 0a03 	vldr	s1, [r4, #12]
	driver->i_q = lpf_exec(&driver->LPF_current_q, driver->i_q);
 8002246:	ed84 0a04 	vstr	s0, [r4, #16]
	driver->V_d = PID_Update(&driver->d_reg, 0, driver->i_d);
 800224a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800224e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002274 <foc_pi_control+0x74>
 8002252:	f001 fa89 	bl	8003768 <PID_Update>
	driver->V_q = PID_Update(&driver->q_reg, i_qref, driver->i_q);
 8002256:	edd4 0a04 	vldr	s1, [r4, #16]
	driver->V_d = PID_Update(&driver->d_reg, 0, driver->i_d);
 800225a:	ed84 0a06 	vstr	s0, [r4, #24]
	driver->V_q = PID_Update(&driver->q_reg, i_qref, driver->i_q);
 800225e:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8002262:	eeb0 0a48 	vmov.f32	s0, s16
 8002266:	f001 fa7f 	bl	8003768 <PID_Update>
}
 800226a:	ecbd 8b02 	vpop	{d8}
	driver->V_q = PID_Update(&driver->q_reg, i_qref, driver->i_q);
 800226e:	ed84 0a05 	vstr	s0, [r4, #20]
}
 8002272:	bd10      	pop	{r4, pc}
 8002274:	00000000 	.word	0x00000000

08002278 <foc_setPhaseVoltage>:
 */
void foc_setPhaseVoltage(MotorDriver *driver, float V_d, float V_q) {

	float V_ref, a_duty = 0, b_duty = 0, c_duty = 0;

	V_ref = sqrtApprox(V_d * V_d + V_q * V_q);
 8002278:	ee60 7aa0 	vmul.f32	s15, s1, s1
void foc_setPhaseVoltage(MotorDriver *driver, float V_d, float V_q) {
 800227c:	b5f0      	push	{r4, r5, r6, r7, lr}
	V_ref = sqrtApprox(V_d * V_d + V_q * V_q);
 800227e:	eee0 7a00 	vfma.f32	s15, s0, s0
	i = 0x5f375a86 - (i >> 1);
 8002282:	4bc5      	ldr	r3, [pc, #788]	; (8002598 <foc_setPhaseVoltage+0x320>)
void foc_setPhaseVoltage(MotorDriver *driver, float V_d, float V_q) {
 8002284:	4605      	mov	r5, r0
	i = 0x5f375a86 - (i >> 1);
 8002286:	ee17 2a90 	vmov	r2, s15
 800228a:	eba3 0062 	sub.w	r0, r3, r2, asr #1

	float T1, T2, T0;

	float m = _SQRT3 * V_ref * _1_Vdc;
 800228e:	ee07 0a10 	vmov	s14, r0
void foc_setPhaseVoltage(MotorDriver *driver, float V_d, float V_q) {
 8002292:	ed2d 8b04 	vpush	{d8-d9}
	float m = _SQRT3 * V_ref * _1_Vdc;
 8002296:	ee67 7a87 	vmul.f32	s15, s15, s14
void foc_setPhaseVoltage(MotorDriver *driver, float V_d, float V_q) {
 800229a:	b083      	sub	sp, #12
	float m = _SQRT3 * V_ref * _1_Vdc;
 800229c:	ee17 0a90 	vmov	r0, s15
void foc_setPhaseVoltage(MotorDriver *driver, float V_d, float V_q) {
 80022a0:	eeb0 8a60 	vmov.f32	s16, s1
 80022a4:	eef0 8a40 	vmov.f32	s17, s0
	float m = _SQRT3 * V_ref * _1_Vdc;
 80022a8:	f7fe f956 	bl	8000558 <__aeabi_f2d>
 80022ac:	a3b6      	add	r3, pc, #728	; (adr r3, 8002588 <foc_setPhaseVoltage+0x310>)
 80022ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b2:	f7fe f9a9 	bl	8000608 <__aeabi_dmul>
 80022b6:	f7fe fc7f 	bl	8000bb8 <__aeabi_d2f>
 80022ba:	4604      	mov	r4, r0
//	float theta = fmod(atan2(V_beta, V_alpha) + _2PI, _2PI);

	float theta = _normalizeAngle(driver->angle_electrical + atan2(V_q, V_d));
 80022bc:	ee18 0a90 	vmov	r0, s17
 80022c0:	f7fe f94a 	bl	8000558 <__aeabi_f2d>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	ee18 0a10 	vmov	r0, s16
 80022cc:	ec43 2b18 	vmov	d8, r2, r3
 80022d0:	f7fe f942 	bl	8000558 <__aeabi_f2d>
 80022d4:	eeb0 1a48 	vmov.f32	s2, s16
 80022d8:	eef0 1a68 	vmov.f32	s3, s17
 80022dc:	ec41 0b10 	vmov	d0, r0, r1
 80022e0:	f007 f89c 	bl	800941c <atan2>
 80022e4:	ec57 6b10 	vmov	r6, r7, d0
 80022e8:	f8d5 0174 	ldr.w	r0, [r5, #372]	; 0x174

	/*Sector selection*/
	uint8_t sector = theta * _3_PI + 1;

	/* Duty time calculation */
	T1 = m * sin(sector * _PI_3 - theta);
 80022ec:	eddf 9aab 	vldr	s19, [pc, #684]	; 800259c <foc_setPhaseVoltage+0x324>
	float theta = _normalizeAngle(driver->angle_electrical + atan2(V_q, V_d));
 80022f0:	f7fe f932 	bl	8000558 <__aeabi_f2d>
 80022f4:	4632      	mov	r2, r6
 80022f6:	463b      	mov	r3, r7
 80022f8:	f7fd ffd0 	bl	800029c <__adddf3>
 80022fc:	f7fe fc5c 	bl	8000bb8 <__aeabi_d2f>
	float a = fmod(angle, _2PI);
 8002300:	f7fe f92a 	bl	8000558 <__aeabi_f2d>
 8002304:	ed9f 1ba2 	vldr	d1, [pc, #648]	; 8002590 <foc_setPhaseVoltage+0x318>
 8002308:	ec41 0b10 	vmov	d0, r0, r1
 800230c:	f007 f888 	bl	8009420 <fmod>
 8002310:	ec51 0b10 	vmov	r0, r1, d0
 8002314:	f7fe fc50 	bl	8000bb8 <__aeabi_d2f>
 8002318:	ee08 0a90 	vmov	s17, r0
	return a >= 0 ? a : (a + _2PI);
 800231c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8002320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002324:	bf48      	it	mi
 8002326:	eddf 7a9e 	vldrmi	s15, [pc, #632]	; 80025a0 <foc_setPhaseVoltage+0x328>
	uint8_t sector = theta * _3_PI + 1;
 800232a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	return a >= 0 ? a : (a + _2PI);
 800232e:	bf48      	it	mi
 8002330:	ee78 8aa7 	vaddmi.f32	s17, s17, s15
	uint8_t sector = theta * _3_PI + 1;
 8002334:	eddf 7a9b 	vldr	s15, [pc, #620]	; 80025a4 <foc_setPhaseVoltage+0x32c>
 8002338:	eeb0 7a48 	vmov.f32	s14, s16
 800233c:	eea8 7aa7 	vfma.f32	s14, s17, s15
	T1 = m * sin(sector * _PI_3 - theta);
 8002340:	4620      	mov	r0, r4
	uint8_t sector = theta * _3_PI + 1;
 8002342:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002346:	edcd 7a00 	vstr	s15, [sp]
 800234a:	f89d 4000 	ldrb.w	r4, [sp]
	T1 = m * sin(sector * _PI_3 - theta);
 800234e:	f7fe f903 	bl	8000558 <__aeabi_f2d>
 8002352:	ee07 4a90 	vmov	s15, r4
 8002356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800235a:	eeb0 7a68 	vmov.f32	s14, s17
 800235e:	ee97 7aa9 	vfnms.f32	s14, s15, s19
 8002362:	4606      	mov	r6, r0
 8002364:	460f      	mov	r7, r1
	T2 = m * sin(theta - (sector - 1) * _PI_3);
 8002366:	3c01      	subs	r4, #1
	T1 = m * sin(sector * _PI_3 - theta);
 8002368:	ee17 0a10 	vmov	r0, s14
 800236c:	f7fe f8f4 	bl	8000558 <__aeabi_f2d>
 8002370:	ec41 0b10 	vmov	d0, r0, r1
 8002374:	f006 ffc4 	bl	8009300 <sin>
 8002378:	4630      	mov	r0, r6
 800237a:	ec53 2b10 	vmov	r2, r3, d0
 800237e:	4639      	mov	r1, r7
 8002380:	f7fe f942 	bl	8000608 <__aeabi_dmul>
 8002384:	f7fe fc18 	bl	8000bb8 <__aeabi_d2f>
	T2 = m * sin(theta - (sector - 1) * _PI_3);
 8002388:	ee07 4a90 	vmov	s15, r4
 800238c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	T1 = m * sin(sector * _PI_3 - theta);
 8002390:	ee09 0a10 	vmov	s18, r0
	T2 = m * sin(theta - (sector - 1) * _PI_3);
 8002394:	eee7 8ae9 	vfms.f32	s17, s15, s19
 8002398:	ee18 0a90 	vmov	r0, s17
 800239c:	f7fe f8dc 	bl	8000558 <__aeabi_f2d>
 80023a0:	ec41 0b10 	vmov	d0, r0, r1
 80023a4:	f006 ffac 	bl	8009300 <sin>
 80023a8:	4630      	mov	r0, r6
 80023aa:	ec53 2b10 	vmov	r2, r3, d0
 80023ae:	4639      	mov	r1, r7
 80023b0:	f7fe f92a 	bl	8000608 <__aeabi_dmul>
 80023b4:	f7fe fc00 	bl	8000bb8 <__aeabi_d2f>
 80023b8:	ee08 0a90 	vmov	s17, r0
	T0 = 1 - T1 - T2;
 80023bc:	ee79 9a28 	vadd.f32	s19, s18, s17
 80023c0:	ee38 8a69 	vsub.f32	s16, s16, s19

	switch (sector) {
 80023c4:	2c05      	cmp	r4, #5
 80023c6:	f200 80d7 	bhi.w	8002578 <foc_setPhaseVoltage+0x300>
 80023ca:	e8df f004 	tbb	[pc, r4]
 80023ce:	633a      	.short	0x633a
 80023d0:	03bb9b7b 	.word	0x03bb9b7b
			a_duty = T2 + T0 * 0.5;
			b_duty = T0 * 0.5;
			c_duty = T1 + T2 + T0 * 0.5;
			break;
		case 6:
			a_duty = T1 + T2 + T0 * 0.5;
 80023d4:	ee18 0a10 	vmov	r0, s16
 80023d8:	f7fe f8be 	bl	8000558 <__aeabi_f2d>
 80023dc:	4b72      	ldr	r3, [pc, #456]	; (80025a8 <foc_setPhaseVoltage+0x330>)
 80023de:	2200      	movs	r2, #0
 80023e0:	f7fe f912 	bl	8000608 <__aeabi_dmul>
 80023e4:	4606      	mov	r6, r0
 80023e6:	460f      	mov	r7, r1
 80023e8:	ee19 0a90 	vmov	r0, s19
 80023ec:	f7fe f8b4 	bl	8000558 <__aeabi_f2d>
 80023f0:	463b      	mov	r3, r7
 80023f2:	4632      	mov	r2, r6
 80023f4:	f7fd ff52 	bl	800029c <__adddf3>
 80023f8:	f7fe fbde 	bl	8000bb8 <__aeabi_d2f>
 80023fc:	4603      	mov	r3, r0
			b_duty = T0 * 0.5;
			c_duty = T1 + T0 * 0.5;
 80023fe:	ee19 0a10 	vmov	r0, s18
			b_duty = T0 * 0.5;
 8002402:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002406:	ee68 0a20 	vmul.f32	s1, s16, s1
			a_duty = T1 + T2 + T0 * 0.5;
 800240a:	9301      	str	r3, [sp, #4]
			b_duty = T0 * 0.5;
 800240c:	edcd 0a00 	vstr	s1, [sp]
			c_duty = T1 + T0 * 0.5;
 8002410:	f7fe f8a2 	bl	8000558 <__aeabi_f2d>
 8002414:	4632      	mov	r2, r6
 8002416:	463b      	mov	r3, r7
 8002418:	f7fd ff40 	bl	800029c <__adddf3>
 800241c:	f7fe fbcc 	bl	8000bb8 <__aeabi_d2f>
			break;
 8002420:	eddd 0a00 	vldr	s1, [sp]
 8002424:	ed9d 0a01 	vldr	s0, [sp, #4]
			c_duty = T1 + T0 * 0.5;
 8002428:	ee01 0a10 	vmov	s2, r0
	}

	drv8313_setPWM(driver, driver->timer->Instance, a_duty, b_duty, c_duty);
 800242c:	f8d5 3150 	ldr.w	r3, [r5, #336]	; 0x150
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	4628      	mov	r0, r5
}
 8002434:	b003      	add	sp, #12
 8002436:	ecbd 8b04 	vpop	{d8-d9}
 800243a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	drv8313_setPWM(driver, driver->timer->Instance, a_duty, b_duty, c_duty);
 800243e:	f7ff bec5 	b.w	80021cc <drv8313_setPWM>
			a_duty = T1 + T2 + T0 * 0.5;
 8002442:	ee18 0a10 	vmov	r0, s16
 8002446:	f7fe f887 	bl	8000558 <__aeabi_f2d>
 800244a:	4b57      	ldr	r3, [pc, #348]	; (80025a8 <foc_setPhaseVoltage+0x330>)
 800244c:	2200      	movs	r2, #0
 800244e:	f7fe f8db 	bl	8000608 <__aeabi_dmul>
 8002452:	4606      	mov	r6, r0
 8002454:	460f      	mov	r7, r1
 8002456:	ee19 0a90 	vmov	r0, s19
 800245a:	f7fe f87d 	bl	8000558 <__aeabi_f2d>
 800245e:	463b      	mov	r3, r7
 8002460:	4632      	mov	r2, r6
 8002462:	f7fd ff1b 	bl	800029c <__adddf3>
 8002466:	f7fe fba7 	bl	8000bb8 <__aeabi_d2f>
 800246a:	4603      	mov	r3, r0
			b_duty = T2 + T0 * 0.5;
 800246c:	ee18 0a90 	vmov	r0, s17
			a_duty = T1 + T0 * 0.5;
 8002470:	9300      	str	r3, [sp, #0]
			b_duty = T1 + T2 + T0 * 0.5;
 8002472:	f7fe f871 	bl	8000558 <__aeabi_f2d>
 8002476:	4632      	mov	r2, r6
 8002478:	463b      	mov	r3, r7
 800247a:	f7fd ff0f 	bl	800029c <__adddf3>
 800247e:	f7fe fb9b 	bl	8000bb8 <__aeabi_d2f>
			c_duty = T0 * 0.5;
 8002482:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
			b_duty = T1 + T2 + T0 * 0.5;
 8002486:	ee00 0a90 	vmov	s1, r0
			c_duty = T0 * 0.5;
 800248a:	ee28 1a01 	vmul.f32	s2, s16, s2
			break;
 800248e:	ed9d 0a00 	vldr	s0, [sp]
 8002492:	e7cb      	b.n	800242c <foc_setPhaseVoltage+0x1b4>
			a_duty = T1 + T0 * 0.5;
 8002494:	ee18 0a10 	vmov	r0, s16
 8002498:	f7fe f85e 	bl	8000558 <__aeabi_f2d>
 800249c:	4b42      	ldr	r3, [pc, #264]	; (80025a8 <foc_setPhaseVoltage+0x330>)
 800249e:	2200      	movs	r2, #0
 80024a0:	f7fe f8b2 	bl	8000608 <__aeabi_dmul>
 80024a4:	4606      	mov	r6, r0
 80024a6:	460f      	mov	r7, r1
 80024a8:	ee19 0a10 	vmov	r0, s18
 80024ac:	f7fe f854 	bl	8000558 <__aeabi_f2d>
 80024b0:	463b      	mov	r3, r7
 80024b2:	4632      	mov	r2, r6
 80024b4:	f7fd fef2 	bl	800029c <__adddf3>
 80024b8:	f7fe fb7e 	bl	8000bb8 <__aeabi_d2f>
 80024bc:	4603      	mov	r3, r0
			b_duty = T1 + T2 + T0 * 0.5;
 80024be:	ee19 0a90 	vmov	r0, s19
 80024c2:	e7d5      	b.n	8002470 <foc_setPhaseVoltage+0x1f8>
			a_duty = T0 * 0.5;
 80024c4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80024c8:	ee28 0a00 	vmul.f32	s0, s16, s0
			b_duty = T1 + T2 + T0 * 0.5;
 80024cc:	ee18 0a10 	vmov	r0, s16
			a_duty = T0 * 0.5;
 80024d0:	ed8d 0a01 	vstr	s0, [sp, #4]
			b_duty = T1 + T2 + T0 * 0.5;
 80024d4:	f7fe f840 	bl	8000558 <__aeabi_f2d>
 80024d8:	4b33      	ldr	r3, [pc, #204]	; (80025a8 <foc_setPhaseVoltage+0x330>)
 80024da:	2200      	movs	r2, #0
 80024dc:	f7fe f894 	bl	8000608 <__aeabi_dmul>
 80024e0:	4606      	mov	r6, r0
 80024e2:	460f      	mov	r7, r1
 80024e4:	ee19 0a90 	vmov	r0, s19
 80024e8:	f7fe f836 	bl	8000558 <__aeabi_f2d>
 80024ec:	463b      	mov	r3, r7
 80024ee:	4632      	mov	r2, r6
 80024f0:	f7fd fed4 	bl	800029c <__adddf3>
 80024f4:	f7fe fb60 	bl	8000bb8 <__aeabi_d2f>
 80024f8:	4603      	mov	r3, r0
 80024fa:	ee00 3a90 	vmov	s1, r3
			c_duty = T2 + T0 * 0.5;
 80024fe:	ee18 0a90 	vmov	r0, s17
 8002502:	e783      	b.n	800240c <foc_setPhaseVoltage+0x194>
			a_duty = T0 * 0.5;
 8002504:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002508:	ee28 0a00 	vmul.f32	s0, s16, s0
			b_duty = T1 + T0 * 0.5;
 800250c:	ee18 0a10 	vmov	r0, s16
			a_duty = T0 * 0.5;
 8002510:	ed8d 0a01 	vstr	s0, [sp, #4]
			b_duty = T1 + T0 * 0.5;
 8002514:	f7fe f820 	bl	8000558 <__aeabi_f2d>
 8002518:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <foc_setPhaseVoltage+0x330>)
 800251a:	2200      	movs	r2, #0
 800251c:	f7fe f874 	bl	8000608 <__aeabi_dmul>
 8002520:	4606      	mov	r6, r0
 8002522:	460f      	mov	r7, r1
 8002524:	ee19 0a10 	vmov	r0, s18
 8002528:	f7fe f816 	bl	8000558 <__aeabi_f2d>
 800252c:	463b      	mov	r3, r7
 800252e:	4632      	mov	r2, r6
 8002530:	f7fd feb4 	bl	800029c <__adddf3>
 8002534:	f7fe fb40 	bl	8000bb8 <__aeabi_d2f>
 8002538:	4603      	mov	r3, r0
 800253a:	ee00 3a90 	vmov	s1, r3
			c_duty = T1 + T2 + T0 * 0.5;
 800253e:	ee19 0a90 	vmov	r0, s19
 8002542:	e763      	b.n	800240c <foc_setPhaseVoltage+0x194>
			a_duty = T2 + T0 * 0.5;
 8002544:	ee18 0a10 	vmov	r0, s16
 8002548:	f7fe f806 	bl	8000558 <__aeabi_f2d>
 800254c:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <foc_setPhaseVoltage+0x330>)
 800254e:	2200      	movs	r2, #0
 8002550:	f7fe f85a 	bl	8000608 <__aeabi_dmul>
 8002554:	4606      	mov	r6, r0
 8002556:	460f      	mov	r7, r1
 8002558:	ee18 0a90 	vmov	r0, s17
 800255c:	f7fd fffc 	bl	8000558 <__aeabi_f2d>
 8002560:	463b      	mov	r3, r7
 8002562:	4632      	mov	r2, r6
 8002564:	f7fd fe9a 	bl	800029c <__adddf3>
 8002568:	f7fe fb26 	bl	8000bb8 <__aeabi_d2f>
			b_duty = T0 * 0.5;
 800256c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
			a_duty = T2 + T0 * 0.5;
 8002570:	4603      	mov	r3, r0
			c_duty = T1 + T2 + T0 * 0.5;
 8002572:	ee19 0a90 	vmov	r0, s19
 8002576:	e746      	b.n	8002406 <foc_setPhaseVoltage+0x18e>
	T0 = 1 - T1 - T2;
 8002578:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80025ac <foc_setPhaseVoltage+0x334>
 800257c:	eef0 0a41 	vmov.f32	s1, s2
 8002580:	eeb0 0a41 	vmov.f32	s0, s2
 8002584:	e752      	b.n	800242c <foc_setPhaseVoltage+0x1b4>
 8002586:	bf00      	nop
 8002588:	c6f05b8e 	.word	0xc6f05b8e
 800258c:	3fc279a6 	.word	0x3fc279a6
 8002590:	60000000 	.word	0x60000000
 8002594:	401921fb 	.word	0x401921fb
 8002598:	5f375a86 	.word	0x5f375a86
 800259c:	3f860a92 	.word	0x3f860a92
 80025a0:	40c90fdb 	.word	0x40c90fdb
 80025a4:	3f747645 	.word	0x3f747645
 80025a8:	3fe00000 	.word	0x3fe00000
 80025ac:	00000000 	.word	0x00000000

080025b0 <foc_update>:
void foc_update(MotorDriver *driver, float target) {
 80025b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!move_counter) {
 80025b2:	4d51      	ldr	r5, [pc, #324]	; (80026f8 <foc_update+0x148>)
 80025b4:	882b      	ldrh	r3, [r5, #0]
void foc_update(MotorDriver *driver, float target) {
 80025b6:	ed2d 8b06 	vpush	{d8-d10}
 80025ba:	4604      	mov	r4, r0
	if (!move_counter) {
 80025bc:	b323      	cbz	r3, 8002608 <foc_update+0x58>
 80025be:	4e4f      	ldr	r6, [pc, #316]	; (80026fc <foc_update+0x14c>)
 80025c0:	4f4f      	ldr	r7, [pc, #316]	; (8002700 <foc_update+0x150>)
	driver->V_alpha = cos_val * driver->V_d - sin_val * driver->V_q;
 80025c2:	edd7 6a00 	vldr	s13, [r7]
 80025c6:	edd4 0a05 	vldr	s1, [r4, #20]
 80025ca:	ed96 6a00 	vldr	s12, [r6]
 80025ce:	ed94 0a06 	vldr	s0, [r4, #24]
	move_counter = (move_counter + 1) % move_exec;
 80025d2:	4a4c      	ldr	r2, [pc, #304]	; (8002704 <foc_update+0x154>)
	driver->V_beta = sin_val * driver->V_d + cos_val * driver->V_q;
 80025d4:	ee66 7aa0 	vmul.f32	s15, s13, s1
	driver->V_alpha = cos_val * driver->V_d - sin_val * driver->V_q;
 80025d8:	ee26 7a60 	vnmul.f32	s14, s12, s1
}
 80025dc:	ecbd 8b06 	vpop	{d8-d10}
	driver->V_beta = sin_val * driver->V_d + cos_val * driver->V_q;
 80025e0:	eee0 7a06 	vfma.f32	s15, s0, s12
	move_counter = (move_counter + 1) % move_exec;
 80025e4:	8811      	ldrh	r1, [r2, #0]
	driver->V_alpha = cos_val * driver->V_d - sin_val * driver->V_q;
 80025e6:	eea0 7a26 	vfma.f32	s14, s0, s13
	move_counter = (move_counter + 1) % move_exec;
 80025ea:	3301      	adds	r3, #1
 80025ec:	fbb3 f2f1 	udiv	r2, r3, r1
 80025f0:	fb01 3312 	mls	r3, r1, r2, r3
	foc_setPhaseVoltage(driver, driver->V_d, driver->V_q);
 80025f4:	4620      	mov	r0, r4
	driver->V_alpha = cos_val * driver->V_d - sin_val * driver->V_q;
 80025f6:	ed84 7a07 	vstr	s14, [r4, #28]
	driver->V_beta = sin_val * driver->V_d + cos_val * driver->V_q;
 80025fa:	edc4 7a08 	vstr	s15, [r4, #32]
	move_counter = (move_counter + 1) % move_exec;
 80025fe:	802b      	strh	r3, [r5, #0]
}
 8002600:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	foc_setPhaseVoltage(driver, driver->V_d, driver->V_q);
 8002604:	f7ff be38 	b.w	8002278 <foc_setPhaseVoltage>
		as5048a_getAngle(driver);
 8002608:	eeb0 8a40 	vmov.f32	s16, s0
 800260c:	f7fe fd90 	bl	8001130 <as5048a_getAngle>
			driver->pole_pairs * driver->angle + offset - _PI, _2PI);
 8002610:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
 8002614:	edd4 6a5b 	vldr	s13, [r4, #364]	; 0x16c
 8002618:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002708 <foc_update+0x158>
	sin_val = sin(driver->angle_electrical);
 800261c:	4e37      	ldr	r6, [pc, #220]	; (80026fc <foc_update+0x14c>)
			driver->pole_pairs * driver->angle + offset - _PI, _2PI);
 800261e:	ee07 3a90 	vmov	s15, r3
 8002622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	driver->angle_electrical = fmod(
 8002626:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800262a:	ee17 0a10 	vmov	r0, s14
 800262e:	f7fd ff93 	bl	8000558 <__aeabi_f2d>
 8002632:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 80026e8 <foc_update+0x138>
 8002636:	ec41 0b10 	vmov	d0, r0, r1
 800263a:	f006 fef1 	bl	8009420 <fmod>
 800263e:	ec51 0b10 	vmov	r0, r1, d0
 8002642:	f7fe fab9 	bl	8000bb8 <__aeabi_d2f>
	float i_alpha = driver->i_a;
 8002646:	edd4 9a01 	vldr	s19, [r4, #4]
	float i_beta = (driver->i_a + 2 * driver->i_b) * _1_SQRT3;
 800264a:	ed94 7a02 	vldr	s14, [r4, #8]
	driver->angle_electrical = fmod(
 800264e:	f8c4 0174 	str.w	r0, [r4, #372]	; 0x174
	float i_beta = (driver->i_a + 2 * driver->i_b) * _1_SQRT3;
 8002652:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8002656:	eef0 6a69 	vmov.f32	s13, s19
 800265a:	eee7 6a27 	vfma.f32	s13, s14, s15
	driver->angle_electrical = fmod(
 800265e:	4607      	mov	r7, r0
	float i_beta = (driver->i_a + 2 * driver->i_b) * _1_SQRT3;
 8002660:	ee16 0a90 	vmov	r0, s13
 8002664:	f7fd ff78 	bl	8000558 <__aeabi_f2d>
 8002668:	a321      	add	r3, pc, #132	; (adr r3, 80026f0 <foc_update+0x140>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	f7fd ffcb 	bl	8000608 <__aeabi_dmul>
 8002672:	f7fe faa1 	bl	8000bb8 <__aeabi_d2f>
 8002676:	4603      	mov	r3, r0
	sin_val = sin(driver->angle_electrical);
 8002678:	4638      	mov	r0, r7
	float i_beta = (driver->i_a + 2 * driver->i_b) * _1_SQRT3;
 800267a:	ee09 3a10 	vmov	s18, r3
	sin_val = sin(driver->angle_electrical);
 800267e:	f7fd ff6b 	bl	8000558 <__aeabi_f2d>
 8002682:	ec41 0b10 	vmov	d0, r0, r1
 8002686:	ec41 0b1a 	vmov	d10, r0, r1
 800268a:	f006 fe39 	bl	8009300 <sin>
 800268e:	ec51 0b10 	vmov	r0, r1, d0
 8002692:	f7fe fa91 	bl	8000bb8 <__aeabi_d2f>
	cos_val = cos(driver->angle_electrical);
 8002696:	eeb0 0a4a 	vmov.f32	s0, s20
 800269a:	eef0 0a6a 	vmov.f32	s1, s21
	sin_val = sin(driver->angle_electrical);
 800269e:	ee08 0a90 	vmov	s17, r0
 80026a2:	6030      	str	r0, [r6, #0]
	cos_val = cos(driver->angle_electrical);
 80026a4:	f006 fddc 	bl	8009260 <cos>
 80026a8:	ec51 0b10 	vmov	r0, r1, d0
 80026ac:	f7fe fa84 	bl	8000bb8 <__aeabi_d2f>
	driver->i_d = i_alpha * cos_val + i_beta * sin_val;
 80026b0:	ee29 7a28 	vmul.f32	s14, s18, s17
	cos_val = cos(driver->angle_electrical);
 80026b4:	ee07 0a90 	vmov	s15, r0
	driver->i_q = i_beta * cos_val - i_alpha * sin_val;
 80026b8:	ee68 8ae9 	vnmul.f32	s17, s17, s19
	driver->i_d = i_alpha * cos_val + i_beta * sin_val;
 80026bc:	eea9 7aa7 	vfma.f32	s14, s19, s15
	cos_val = cos(driver->angle_electrical);
 80026c0:	4f0f      	ldr	r7, [pc, #60]	; (8002700 <foc_update+0x150>)
	driver->i_q = i_beta * cos_val - i_alpha * sin_val;
 80026c2:	eee9 8a27 	vfma.f32	s17, s18, s15
		as5048a_getVelocity(driver);
 80026c6:	4620      	mov	r0, r4
	driver->i_d = i_alpha * cos_val + i_beta * sin_val;
 80026c8:	ed84 7a03 	vstr	s14, [r4, #12]
	driver->i_q = i_beta * cos_val - i_alpha * sin_val;
 80026cc:	edc4 8a04 	vstr	s17, [r4, #16]
	cos_val = cos(driver->angle_electrical);
 80026d0:	edc7 7a00 	vstr	s15, [r7]
		as5048a_getVelocity(driver);
 80026d4:	f7fe fd90 	bl	80011f8 <as5048a_getVelocity>
		foc_pi_control(driver, target);
 80026d8:	eeb0 0a48 	vmov.f32	s0, s16
 80026dc:	4620      	mov	r0, r4
 80026de:	f7ff fd8f 	bl	8002200 <foc_pi_control>
 80026e2:	882b      	ldrh	r3, [r5, #0]
 80026e4:	e76d      	b.n	80025c2 <foc_update+0x12>
 80026e6:	bf00      	nop
 80026e8:	60000000 	.word	0x60000000
 80026ec:	401921fb 	.word	0x401921fb
 80026f0:	561abec8 	.word	0x561abec8
 80026f4:	3fe279a7 	.word	0x3fe279a7
 80026f8:	20002218 	.word	0x20002218
 80026fc:	20002248 	.word	0x20002248
 8002700:	20002244 	.word	0x20002244
 8002704:	20002002 	.word	0x20002002
 8002708:	c0490fdb 	.word	0xc0490fdb

0800270c <lpf_init>:
 *      Author: maxborglowe
 */

#include "LowPassFilter.h"

void lpf_init(struct LPF *lpf, float Tf_init){
 800270c:	b510      	push	{r4, lr}
	lpf->Tf = Tf_init;
	lpf->out_prev = 0;
 800270e:	2300      	movs	r3, #0
	lpf->Tf = Tf_init;
 8002710:	ed80 0a02 	vstr	s0, [r0, #8]
	lpf->out_prev = 0;
 8002714:	6043      	str	r3, [r0, #4]
void lpf_init(struct LPF *lpf, float Tf_init){
 8002716:	4604      	mov	r4, r0
	lpf->timestamp_prev = get_us();
 8002718:	f001 fb1e 	bl	8003d58 <get_us>
 800271c:	6020      	str	r0, [r4, #0]
}
 800271e:	bd10      	pop	{r4, pc}

08002720 <lpf_exec>:

float lpf_exec(struct LPF *lpf, float input){
 8002720:	b510      	push	{r4, lr}
 8002722:	4604      	mov	r4, r0
 8002724:	ed2d 8b02 	vpush	{d8}
 8002728:	eeb0 8a40 	vmov.f32	s16, s0
	uint32_t timestamp = get_us();
 800272c:	f001 fb14 	bl	8003d58 <get_us>
	float dt = (timestamp - lpf->timestamp_prev) * 1e-6f;
 8002730:	6823      	ldr	r3, [r4, #0]

	if (dt < 0.0f ) dt = 1e-3f;
	else if(dt > 0.3f) {
 8002732:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002790 <lpf_exec+0x70>
	float dt = (timestamp - lpf->timestamp_prev) * 1e-6f;
 8002736:	1ac3      	subs	r3, r0, r3
 8002738:	ee07 3a90 	vmov	s15, r3
 800273c:	eef8 7a67 	vcvt.f32.u32	s15, s15
	else if(dt > 0.3f) {
 8002740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002748:	dc19      	bgt.n	800277e <lpf_exec+0x5e>
		lpf->out_prev = input;
		lpf->timestamp_prev = timestamp;
		return input;
	}

	float alpha = lpf->Tf/(lpf->Tf + dt);
 800274a:	ed94 7a02 	vldr	s14, [r4, #8]
 800274e:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8002794 <lpf_exec+0x74>
	float out = alpha * lpf->out_prev + (1.0f - alpha) * input;
 8002752:	edd4 6a01 	vldr	s13, [r4, #4]
 8002756:	6020      	str	r0, [r4, #0]
	float alpha = lpf->Tf/(lpf->Tf + dt);
 8002758:	eef0 5a47 	vmov.f32	s11, s14
 800275c:	eee7 5a86 	vfma.f32	s11, s15, s12
	float out = alpha * lpf->out_prev + (1.0f - alpha) * input;
 8002760:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	float alpha = lpf->Tf/(lpf->Tf + dt);
 8002764:	eec7 7a25 	vdiv.f32	s15, s14, s11
	float out = alpha * lpf->out_prev + (1.0f - alpha) * input;
 8002768:	ee30 0a67 	vsub.f32	s0, s0, s15
 800276c:	ee20 0a08 	vmul.f32	s0, s0, s16
	lpf->out_prev = out;
	lpf->timestamp_prev = timestamp;
	return out;
}
 8002770:	ecbd 8b02 	vpop	{d8}
	float out = alpha * lpf->out_prev + (1.0f - alpha) * input;
 8002774:	eea6 0aa7 	vfma.f32	s0, s13, s15
	return out;
 8002778:	ed84 0a01 	vstr	s0, [r4, #4]
}
 800277c:	bd10      	pop	{r4, pc}
		return input;
 800277e:	eeb0 0a48 	vmov.f32	s0, s16
}
 8002782:	ecbd 8b02 	vpop	{d8}
 8002786:	6020      	str	r0, [r4, #0]
 8002788:	ed84 0a01 	vstr	s0, [r4, #4]
 800278c:	bd10      	pop	{r4, pc}
 800278e:	bf00      	nop
 8002790:	48927c00 	.word	0x48927c00
 8002794:	358637bd 	.word	0x358637bd

08002798 <filterUpdate>:
 * @param Current acceleration on x-axis from accelerometer
 * @param Current acceleration on y-axis from accelerometer
 * @param Current acceleration on z-axis from accelerometer
 * @param Time passed since last conversion
 */
void filterUpdate(float gx, float gy, float gz, float ax, float ay, float az, float time) {
 8002798:	b410      	push	{r4}
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1,
			q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800279a:	4ac8      	ldr	r2, [pc, #800]	; (8002abc <filterUpdate+0x324>)
 800279c:	4bc8      	ldr	r3, [pc, #800]	; (8002ac0 <filterUpdate+0x328>)
 800279e:	48c9      	ldr	r0, [pc, #804]	; (8002ac4 <filterUpdate+0x32c>)
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80027a0:	4cc9      	ldr	r4, [pc, #804]	; (8002ac8 <filterUpdate+0x330>)
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80027a2:	ed92 4a00 	vldr	s8, [r2]
void filterUpdate(float gx, float gy, float gz, float ax, float ay, float az, float time) {
 80027a6:	ed2d 8b10 	vpush	{d8-d15}
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80027aa:	edd3 8a00 	vldr	s17, [r3]
 80027ae:	ed90 6a00 	vldr	s12, [r0]
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80027b2:	edd4 3a00 	vldr	s7, [r4]
 80027b6:	edd3 4a00 	vldr	s9, [r3]
 80027ba:	edd0 6a00 	vldr	s13, [r0]
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80027be:	ed94 8a00 	vldr	s16, [r4]
 80027c2:	ed92 7a00 	vldr	s14, [r2]
 80027c6:	ed90 5a00 	vldr	s10, [r0]
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80027ca:	edd4 5a00 	vldr	s11, [r4]
 80027ce:	edd2 7a00 	vldr	s15, [r2]
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80027d2:	ee26 6a01 	vmul.f32	s12, s12, s2
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80027d6:	ee21 7a47 	vnmul.f32	s14, s2, s14
 80027da:	ee60 6ae6 	vnmul.f32	s13, s1, s13
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80027de:	ee67 7aa0 	vmul.f32	s15, s15, s1
 80027e2:	eee3 6a80 	vfma.f32	s13, s7, s0
 80027e6:	eee5 7a81 	vfma.f32	s15, s11, s2
 80027ea:	eea8 6aa0 	vfma.f32	s12, s17, s1
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80027ee:	eea8 7a20 	vfma.f32	s14, s16, s1
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80027f2:	edd3 5a00 	vldr	s11, [r3]
 80027f6:	eea4 6a00 	vfma.f32	s12, s8, s0
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80027fa:	eee4 6a81 	vfma.f32	s13, s9, s2
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80027fe:	eea5 7a00 	vfma.f32	s14, s10, s0
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002802:	eee5 7ac0 	vfms.f32	s15, s11, s0

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002806:	eef5 1a40 	vcmp.f32	s3, #0.0
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800280a:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800280e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002812:	ee66 3a64 	vnmul.f32	s7, s12, s9
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002816:	ee26 1aa4 	vmul.f32	s2, s13, s9
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800281a:	ee27 4a24 	vmul.f32	s8, s14, s9
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800281e:	ee67 4aa4 	vmul.f32	s9, s15, s9
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002822:	d105      	bne.n	8002830 <filterUpdate+0x98>
 8002824:	eeb5 2a40 	vcmp.f32	s4, #0.0
 8002828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282c:	f000 813f 	beq.w	8002aae <filterUpdate+0x316>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002830:	ee22 7aa2 	vmul.f32	s14, s5, s5
 */
float invSqrt(float x) {
	float halfx = 0.5f * x;
	float y = x;
	long i = *(long*) &y;
	i = 0x5f3759df - (i >> 1);
 8002834:	49a5      	ldr	r1, [pc, #660]	; (8002acc <filterUpdate+0x334>)
		_2q0 = 2.0f * q0;
 8002836:	edd4 8a00 	vldr	s17, [r4]
		_2q1 = 2.0f * q1;
 800283a:	edd2 aa00 	vldr	s21, [r2]
		_2q2 = 2.0f * q2;
 800283e:	edd3 7a00 	vldr	s15, [r3]
		_2q3 = 2.0f * q3;
 8002842:	edd0 9a00 	vldr	s19, [r0]
		_4q0 = 4.0f * q0;
 8002846:	ed94 aa00 	vldr	s20, [r4]
		_4q1 = 4.0f * q1;
 800284a:	ed92 ba00 	vldr	s22, [r2]
		_4q2 = 4.0f * q2;
 800284e:	ed93 ca00 	vldr	s24, [r3]
		_8q1 = 8.0f * q1;
 8002852:	edd2 ba00 	vldr	s23, [r2]
		_8q2 = 8.0f * q2;
 8002856:	edd3 da00 	vldr	s27, [r3]
		q0q0 = q0 * q0;
 800285a:	edd4 ca00 	vldr	s25, [r4]
 800285e:	edd4 6a00 	vldr	s13, [r4]
		q1q1 = q1 * q1;
 8002862:	ed92 ea00 	vldr	s28, [r2]
 8002866:	ed92 da00 	vldr	s26, [r2]
		q2q2 = q2 * q2;
 800286a:	ed93 8a00 	vldr	s16, [r3]
 800286e:	ed93 5a00 	vldr	s10, [r3]
		q3q3 = q3 * q3;
 8002872:	ed90 9a00 	vldr	s18, [r0]
 8002876:	edd0 0a00 	vldr	s1, [r0]
 800287a:	eea2 7a02 	vfma.f32	s14, s4, s4
	float halfx = 0.5f * x;
 800287e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002882:	eea1 7aa1 	vfma.f32	s14, s3, s3
	y = *(float*) &i;
	y = y * (1.5f - (halfx * y * y));
 8002886:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
	y = *(float*) &i;
 800288a:	ee17 ca10 	vmov	ip, s14
 800288e:	eba1 0c6c 	sub.w	ip, r1, ip, asr #1
 8002892:	ee05 ca90 	vmov	s11, ip
		q0q0 = q0 * q0;
 8002896:	ee6c caa6 	vmul.f32	s25, s25, s13
	float halfx = 0.5f * x;
 800289a:	ee67 6a00 	vmul.f32	s13, s14, s0
	y = y * (1.5f - (halfx * y * y));
 800289e:	ee25 7ae5 	vnmul.f32	s14, s11, s11
 80028a2:	eef0 ea46 	vmov.f32	s29, s12
 80028a6:	eee7 ea26 	vfma.f32	s29, s14, s13
		q2q2 = q2 * q2;
 80028aa:	ee28 5a05 	vmul.f32	s10, s16, s10
	y = y * (1.5f - (halfx * y * y));
 80028ae:	eeb0 7a6e 	vmov.f32	s14, s29
		_4q1 = 4.0f * q1;
 80028b2:	eeb1 8a00 	vmov.f32	s16, #16	; 0x40800000  4.0
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1
 80028b6:	edd2 ea00 	vldr	s29, [r2]
	y = y * (1.5f - (halfx * y * y));
 80028ba:	ee65 5a87 	vmul.f32	s11, s11, s14
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
 80028be:	ed93 7a00 	vldr	s14, [r3]
		_4q2 = 4.0f * q2;
 80028c2:	ee2c ca08 	vmul.f32	s24, s24, s16
 80028c6:	ee27 7a08 	vmul.f32	s14, s14, s16
	y = y * (1.5f - (halfx * y * y));
 80028ca:	ee25 fae5 	vnmul.f32	s30, s11, s11
		q1q1 = q1 * q1;
 80028ce:	ee2e da0d 	vmul.f32	s26, s28, s26
		q3q3 = q3 * q3;
 80028d2:	ee29 9a20 	vmul.f32	s18, s18, s1
 80028d6:	eeb0 ea4c 	vmov.f32	s28, s24
	y = y * (1.5f - (halfx * y * y));
 80028da:	eef0 0a46 	vmov.f32	s1, s12
 80028de:	eeef 0a26 	vfma.f32	s1, s30, s13
 80028e2:	ee9c ea87 	vfnms.f32	s28, s25, s14
 80028e6:	ee65 5aa0 	vmul.f32	s11, s11, s1
		ax *= recipNorm;
 80028ea:	eeb0 7a4e 	vmov.f32	s14, s28
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80028ee:	ed90 ea00 	vldr	s28, [r0]
 80028f2:	edd0 0a00 	vldr	s1, [r0]
 80028f6:	ee60 0a88 	vmul.f32	s1, s1, s16
 80028fa:	ee2e ea08 	vmul.f32	s28, s28, s16
 80028fe:	ee60 0a85 	vmul.f32	s1, s1, s10
 8002902:	ee3d 5a05 	vadd.f32	s10, s26, s10
 8002906:	eeed 0a0e 	vfma.f32	s1, s26, s28
		_8q1 = 8.0f * q1;
 800290a:	eeb2 da00 	vmov.f32	s26, #32	; 0x41000000  8.0
		_8q2 = 8.0f * q2;
 800290e:	ee6d da8d 	vmul.f32	s27, s27, s26
		_4q1 = 4.0f * q1;
 8002912:	ee2b ba08 	vmul.f32	s22, s22, s16
 8002916:	eead 7a85 	vfma.f32	s14, s27, s10
 800291a:	ee6e 6a88 	vmul.f32	s13, s29, s16
		ax *= recipNorm;
 800291e:	ee61 1aa5 	vmul.f32	s3, s3, s11
		_2q0 = 2.0f * q0;
 8002922:	ee78 8aa8 	vadd.f32	s17, s17, s17
		_2q1 = 2.0f * q1;
 8002926:	eef0 da4b 	vmov.f32	s27, s22
 800292a:	eedc daa6 	vfnms.f32	s27, s25, s13
 800292e:	eea2 9aa5 	vfma.f32	s18, s5, s11
 8002932:	eea1 7aa8 	vfma.f32	s14, s3, s17
 8002936:	ee7a aaaa 	vadd.f32	s21, s21, s21
		_8q1 = 8.0f * q1;
 800293a:	ee6b ba8d 	vmul.f32	s23, s23, s26
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800293e:	eee1 0aea 	vfms.f32	s1, s3, s21
 8002942:	eef0 6a6d 	vmov.f32	s13, s27
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002946:	ee25 2ac2 	vnmul.f32	s4, s11, s4
 800294a:	eeeb 6a85 	vfma.f32	s13, s23, s10
		_2q2 = 2.0f * q2;
 800294e:	ee77 7aa7 	vadd.f32	s15, s15, s15
		_2q3 = 2.0f * q3;
 8002952:	eeac 7a09 	vfma.f32	s14, s24, s18
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002956:	eee2 0a27 	vfma.f32	s1, s4, s15
		_2q3 = 2.0f * q3;
 800295a:	ee79 9aa9 	vadd.f32	s19, s19, s19
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800295e:	ee61 7aa7 	vmul.f32	s15, s3, s15
		_4q0 = 4.0f * q0;
 8002962:	ee2a 8a08 	vmul.f32	s16, s20, s16
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
 8002966:	eea2 7a29 	vfma.f32	s14, s4, s19
 800296a:	eee8 7a05 	vfma.f32	s15, s16, s10
 800296e:	eeeb 6a09 	vfma.f32	s13, s22, s18
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002972:	ee20 5aa0 	vmul.f32	s10, s1, s1
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002976:	eee2 7a2a 	vfma.f32	s15, s4, s21
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1
 800297a:	eee1 6ae9 	vfms.f32	s13, s3, s19
 800297e:	eea7 5a07 	vfma.f32	s10, s14, s14
 8002982:	eee2 6a28 	vfma.f32	s13, s4, s17
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002986:	eea7 5aa7 	vfma.f32	s10, s15, s15
	y = y * (1.5f - (halfx * y * y));
 800298a:	eef0 1a46 	vmov.f32	s3, s12
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800298e:	eea6 5aa6 	vfma.f32	s10, s13, s13
		qDot1 -= beta * s0;
 8002992:	eddf 2a4f 	vldr	s5, [pc, #316]	; 8002ad0 <filterUpdate+0x338>
	y = *(float*) &i;
 8002996:	ee15 ca10 	vmov	ip, s10
 800299a:	eba1 016c 	sub.w	r1, r1, ip, asr #1
 800299e:	ee05 1a90 	vmov	s11, r1
	y = y * (1.5f - (halfx * y * y));
 80029a2:	ee20 5a45 	vnmul.f32	s10, s0, s10
 80029a6:	ee25 2aa5 	vmul.f32	s4, s11, s11
		qDot1 -= beta * s0;
 80029aa:	ee67 7aa2 	vmul.f32	s15, s15, s5
	y = y * (1.5f - (halfx * y * y));
 80029ae:	eee5 1a02 	vfma.f32	s3, s10, s4
		qDot2 -= beta * s1;
 80029b2:	ee66 6aa2 	vmul.f32	s13, s13, s5
	y = y * (1.5f - (halfx * y * y));
 80029b6:	ee65 5aa1 	vmul.f32	s11, s11, s3
		qDot3 -= beta * s2;
 80029ba:	ee27 7a22 	vmul.f32	s14, s14, s5
	y = y * (1.5f - (halfx * y * y));
 80029be:	ee25 2aa5 	vmul.f32	s4, s11, s11
		qDot4 -= beta * s3;
 80029c2:	ee60 2aa2 	vmul.f32	s5, s1, s5
	y = y * (1.5f - (halfx * y * y));
 80029c6:	eea5 6a02 	vfma.f32	s12, s10, s4
		qDot1 -= beta * s0;
 80029ca:	ee26 6a65 	vnmul.f32	s12, s12, s11
 80029ce:	eee6 3a27 	vfma.f32	s7, s12, s15
		qDot2 -= beta * s1;
 80029d2:	eea6 1a26 	vfma.f32	s2, s12, s13
		qDot3 -= beta * s2;
 80029d6:	eea6 4a07 	vfma.f32	s8, s12, s14
		qDot4 -= beta * s3;
 80029da:	eee6 4a22 	vfma.f32	s9, s12, s5
	i = 0x5f3759df - (i >> 1);
 80029de:	493b      	ldr	r1, [pc, #236]	; (8002acc <filterUpdate+0x334>)
	q0 += qDot1 * (1.0f * time);
 80029e0:	edd4 7a00 	vldr	s15, [r4]
 80029e4:	eee3 7a83 	vfma.f32	s15, s7, s6
}
 80029e8:	ecbd 8b10 	vpop	{d8-d15}
	q0 += qDot1 * (1.0f * time);
 80029ec:	edc4 7a00 	vstr	s15, [r4]
	q1 += qDot2 * (1.0f * time);
 80029f0:	ed92 7a00 	vldr	s14, [r2]
 80029f4:	eea1 7a03 	vfma.f32	s14, s2, s6
	float halfx = 0.5f * x;
 80029f8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	q1 += qDot2 * (1.0f * time);
 80029fc:	ed82 7a00 	vstr	s14, [r2]
	q2 += qDot3 * (1.0f * time);
 8002a00:	ed93 7a00 	vldr	s14, [r3]
 8002a04:	eea4 7a03 	vfma.f32	s14, s8, s6
	y = y * (1.5f - (halfx * y * y));
 8002a08:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
	q2 += qDot3 * (1.0f * time);
 8002a0c:	ed83 7a00 	vstr	s14, [r3]
	q3 += qDot4 * (1.0f * time);
 8002a10:	ed90 7a00 	vldr	s14, [r0]
 8002a14:	eea4 7a83 	vfma.f32	s14, s9, s6
 8002a18:	ed80 7a00 	vstr	s14, [r0]
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002a1c:	ed94 3a00 	vldr	s6, [r4]
 8002a20:	edd4 3a00 	vldr	s7, [r4]
 8002a24:	edd2 6a00 	vldr	s13, [r2]
 8002a28:	edd2 2a00 	vldr	s5, [r2]
 8002a2c:	ed93 4a00 	vldr	s8, [r3]
 8002a30:	edd3 4a00 	vldr	s9, [r3]
 8002a34:	ed90 5a00 	vldr	s10, [r0]
 8002a38:	ed90 7a00 	vldr	s14, [r0]
	q0 *= recipNorm;
 8002a3c:	edd4 5a00 	vldr	s11, [r4]
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002a40:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8002a44:	eee3 6a23 	vfma.f32	s13, s6, s7
 8002a48:	eee4 6a24 	vfma.f32	s13, s8, s9
 8002a4c:	eee5 6a07 	vfma.f32	s13, s10, s14
	y = y * (1.5f - (halfx * y * y));
 8002a50:	eeb0 5a67 	vmov.f32	s10, s15
	y = *(float*) &i;
 8002a54:	ee16 ca90 	vmov	ip, s13
 8002a58:	eba1 016c 	sub.w	r1, r1, ip, asr #1
 8002a5c:	ee07 1a10 	vmov	s14, r1
	y = y * (1.5f - (halfx * y * y));
 8002a60:	ee66 6a66 	vnmul.f32	s13, s12, s13
 8002a64:	ee27 6a07 	vmul.f32	s12, s14, s14
 8002a68:	eea6 5a86 	vfma.f32	s10, s13, s12
 8002a6c:	ee27 7a05 	vmul.f32	s14, s14, s10
	y = y * (1.5f - (halfx * y * y));
 8002a70:	ee27 6a07 	vmul.f32	s12, s14, s14
 8002a74:	eee6 7a86 	vfma.f32	s15, s13, s12
 8002a78:	ee67 7a27 	vmul.f32	s15, s14, s15
	q0 *= recipNorm;
 8002a7c:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8002a80:	ed84 7a00 	vstr	s14, [r4]
	q1 *= recipNorm;
 8002a84:	ed92 7a00 	vldr	s14, [r2]
 8002a88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a8c:	ed82 7a00 	vstr	s14, [r2]
	q2 *= recipNorm;
 8002a90:	ed93 7a00 	vldr	s14, [r3]
 8002a94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a98:	ed83 7a00 	vstr	s14, [r3]
	q3 *= recipNorm;
 8002a9c:	ed90 7a00 	vldr	s14, [r0]
 8002aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa4:	edc0 7a00 	vstr	s15, [r0]
}
 8002aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002aac:	4770      	bx	lr
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002aae:	eef5 2a40 	vcmp.f32	s5, #0.0
 8002ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab6:	d092      	beq.n	80029de <filterUpdate+0x246>
 8002ab8:	e6ba      	b.n	8002830 <filterUpdate+0x98>
 8002aba:	bf00      	nop
 8002abc:	20002224 	.word	0x20002224
 8002ac0:	20002228 	.word	0x20002228
 8002ac4:	2000222c 	.word	0x2000222c
 8002ac8:	20002014 	.word	0x20002014
 8002acc:	5f3759df 	.word	0x5f3759df
 8002ad0:	3dcccccd 	.word	0x3dcccccd

08002ad4 <ToEulerAngles>:
struct EulerAngles ToEulerAngles(float _q0, float _q1, float _q2, float _q3) {
 8002ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ad6:	ed2d 8b08 	vpush	{d8-d11}
 8002ada:	ee21 aa41 	vnmul.f32	s20, s2, s2
	angles.x = -atan2(2 * (_q0 * _q1 + _q2 * _q3),
 8002ade:	ee61 aa21 	vmul.f32	s21, s2, s3
 8002ae2:	eef0 7a4a 	vmov.f32	s15, s20
 8002ae6:	eee1 7aa1 	vfma.f32	s15, s3, s3
struct EulerAngles ToEulerAngles(float _q0, float _q1, float _q2, float _q3) {
 8002aea:	b08b      	sub	sp, #44	; 0x2c
	angles.x = -atan2(2 * (_q0 * _q1 + _q2 * _q3),
 8002aec:	eee0 aa20 	vfma.f32	s21, s0, s1
 8002af0:	eee0 7a00 	vfma.f32	s15, s0, s0
struct EulerAngles ToEulerAngles(float _q0, float _q1, float _q2, float _q3) {
 8002af4:	eeb0 9a61 	vmov.f32	s18, s3
	angles.x = -atan2(2 * (_q0 * _q1 + _q2 * _q3),
 8002af8:	eee0 7ae0 	vfms.f32	s15, s1, s1
struct EulerAngles ToEulerAngles(float _q0, float _q1, float _q2, float _q3) {
 8002afc:	eef0 8a40 	vmov.f32	s17, s0
	angles.x = -atan2(2 * (_q0 * _q1 + _q2 * _q3),
 8002b00:	ee17 0a90 	vmov	r0, s15
struct EulerAngles ToEulerAngles(float _q0, float _q1, float _q2, float _q3) {
 8002b04:	eef0 9a41 	vmov.f32	s19, s2
 8002b08:	eeb0 8a60 	vmov.f32	s16, s1
	angles.x = -atan2(2 * (_q0 * _q1 + _q2 * _q3),
 8002b0c:	f7fd fd24 	bl	8000558 <__aeabi_f2d>
 8002b10:	ee7a 7aaa 	vadd.f32	s15, s21, s21
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	ee17 0a90 	vmov	r0, s15
 8002b1c:	ec43 2b1b 	vmov	d11, r2, r3
 8002b20:	f7fd fd1a 	bl	8000558 <__aeabi_f2d>
 8002b24:	eeb0 1a4b 	vmov.f32	s2, s22
 8002b28:	eef0 1a6b 	vmov.f32	s3, s23
 8002b2c:	ec41 0b10 	vmov	d0, r0, r1
 8002b30:	f006 fc74 	bl	800941c <atan2>
	angles.y = -asin(2 * (_q1 * _q3 - _q0 * _q2));
 8002b34:	ee69 7a48 	vnmul.f32	s15, s18, s16
 8002b38:	eea8 aa08 	vfma.f32	s20, s16, s16
 8002b3c:	eee8 7aa9 	vfma.f32	s15, s17, s19
 8002b40:	eea9 aa49 	vfms.f32	s20, s18, s18
 8002b44:	ee77 7aa7 	vadd.f32	s15, s15, s15
	angles.x = -atan2(2 * (_q0 * _q1 + _q2 * _q3),
 8002b48:	ec55 4b10 	vmov	r4, r5, d0
	angles.y = -asin(2 * (_q1 * _q3 - _q0 * _q2));
 8002b4c:	ee17 0a90 	vmov	r0, s15
 8002b50:	f7fd fd02 	bl	8000558 <__aeabi_f2d>
	angles.z = atan2(2 * (_q0 * _q3 + _q1 * _q2),
 8002b54:	eea8 aaa8 	vfma.f32	s20, s17, s17
 8002b58:	ee28 8a29 	vmul.f32	s16, s16, s19
	angles.y = -asin(2 * (_q1 * _q3 - _q0 * _q2));
 8002b5c:	ec41 0b10 	vmov	d0, r0, r1
 8002b60:	f006 fc22 	bl	80093a8 <asin>
	angles.z = atan2(2 * (_q0 * _q3 + _q1 * _q2),
 8002b64:	eea8 8a89 	vfma.f32	s16, s17, s18
 8002b68:	ee1a 0a10 	vmov	r0, s20
	angles.y = -asin(2 * (_q1 * _q3 - _q0 * _q2));
 8002b6c:	ec57 6b10 	vmov	r6, r7, d0
	angles.z = atan2(2 * (_q0 * _q3 + _q1 * _q2),
 8002b70:	f7fd fcf2 	bl	8000558 <__aeabi_f2d>
 8002b74:	ee78 7a08 	vadd.f32	s15, s16, s16
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	ee17 0a90 	vmov	r0, s15
 8002b80:	ec43 2b18 	vmov	d8, r2, r3
 8002b84:	f7fd fce8 	bl	8000558 <__aeabi_f2d>
 8002b88:	eeb0 1a48 	vmov.f32	s2, s16
 8002b8c:	eef0 1a68 	vmov.f32	s3, s17
 8002b90:	ec41 0b10 	vmov	d0, r0, r1
 8002b94:	f006 fc42 	bl	800941c <atan2>
	angles.x = -atan2(2 * (_q0 * _q1 + _q2 * _q3),
 8002b98:	4629      	mov	r1, r5
 8002b9a:	4620      	mov	r0, r4
	angles.z = atan2(2 * (_q0 * _q3 + _q1 * _q2),
 8002b9c:	ec55 4b10 	vmov	r4, r5, d0
	angles.x = -atan2(2 * (_q0 * _q1 + _q2 * _q3),
 8002ba0:	f7fe f80a 	bl	8000bb8 <__aeabi_d2f>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	ee07 3a90 	vmov	s15, r3
	angles.y = -asin(2 * (_q1 * _q3 - _q0 * _q2));
 8002baa:	4639      	mov	r1, r7
	angles.x = -atan2(2 * (_q0 * _q1 + _q2 * _q3),
 8002bac:	eeb1 0a67 	vneg.f32	s0, s15
	angles.y = -asin(2 * (_q1 * _q3 - _q0 * _q2));
 8002bb0:	4630      	mov	r0, r6
	angles.x = -atan2(2 * (_q0 * _q1 + _q2 * _q3),
 8002bb2:	ed8d 0a01 	vstr	s0, [sp, #4]
	angles.y = -asin(2 * (_q1 * _q3 - _q0 * _q2));
 8002bb6:	f7fd ffff 	bl	8000bb8 <__aeabi_d2f>
	angles.z = atan2(2 * (_q0 * _q3 + _q1 * _q2),
 8002bba:	4629      	mov	r1, r5
	angles.y = -asin(2 * (_q1 * _q3 - _q0 * _q2));
 8002bbc:	4603      	mov	r3, r0
	angles.z = atan2(2 * (_q0 * _q3 + _q1 * _q2),
 8002bbe:	4620      	mov	r0, r4
	angles.y = -asin(2 * (_q1 * _q3 - _q0 * _q2));
 8002bc0:	ee08 3a10 	vmov	s16, r3
	angles.z = atan2(2 * (_q0 * _q3 + _q1 * _q2),
 8002bc4:	f7fd fff8 	bl	8000bb8 <__aeabi_d2f>
}
 8002bc8:	ed9d 0a01 	vldr	s0, [sp, #4]
 8002bcc:	ee01 0a10 	vmov	s2, r0
 8002bd0:	eef0 0a48 	vmov.f32	s1, s16
 8002bd4:	b00b      	add	sp, #44	; 0x2c
 8002bd6:	ecbd 8b08 	vpop	{d8-d11}
 8002bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bdc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002bdc:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002bde:	2300      	movs	r3, #0
void SystemClock_Config(void) {
 8002be0:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002be2:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8002be6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002bea:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002bee:	e9cd 3305 	strd	r3, r3, [sp, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	4923      	ldr	r1, [pc, #140]	; (8002c80 <SystemClock_Config+0xa4>)
 8002bf4:	9300      	str	r3, [sp, #0]
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002bf6:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002bf8:	9302      	str	r3, [sp, #8]
	__HAL_RCC_PWR_CLK_ENABLE();
 8002bfa:	6c08      	ldr	r0, [r1, #64]	; 0x40
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bfc:	4a21      	ldr	r2, [pc, #132]	; (8002c84 <SystemClock_Config+0xa8>)
	__HAL_RCC_PWR_CLK_ENABLE();
 8002bfe:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002c02:	6408      	str	r0, [r1, #64]	; 0x40
 8002c04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c06:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8002c0a:	9100      	str	r1, [sp, #0]
 8002c0c:	9900      	ldr	r1, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	6813      	ldr	r3, [r2, #0]
 8002c12:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	6813      	ldr	r3, [r2, #0]
 8002c1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c22:	9301      	str	r3, [sp, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c24:	2301      	movs	r3, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c26:	9a01      	ldr	r2, [sp, #4]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c28:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002c32:	2208      	movs	r2, #8
 8002c34:	2354      	movs	r3, #84	; 0x54
 8002c36:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c3a:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c3c:	2110      	movs	r1, #16
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c3e:	2202      	movs	r2, #2
 8002c40:	2307      	movs	r3, #7
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 84;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002c42:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c44:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c48:	9408      	str	r4, [sp, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c4a:	910c      	str	r1, [sp, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002c4c:	f001 fe90 	bl	8004970 <HAL_RCC_OscConfig>
 8002c50:	b108      	cbz	r0, 8002c56 <SystemClock_Config+0x7a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c52:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c54:	e7fe      	b.n	8002c54 <SystemClock_Config+0x78>
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c56:	4603      	mov	r3, r0
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002c58:	4621      	mov	r1, r4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002c5a:	2502      	movs	r5, #2
 8002c5c:	240f      	movs	r4, #15
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c5e:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002c60:	2200      	movs	r2, #0
 8002c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002c66:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002c68:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002c6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002c70:	f002 f89a 	bl	8004da8 <HAL_RCC_ClockConfig>
 8002c74:	b108      	cbz	r0, 8002c7a <SystemClock_Config+0x9e>
 8002c76:	b672      	cpsid	i
	while (1) {
 8002c78:	e7fe      	b.n	8002c78 <SystemClock_Config+0x9c>
}
 8002c7a:	b015      	add	sp, #84	; 0x54
 8002c7c:	bd30      	pop	{r4, r5, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40007000 	.word	0x40007000

08002c88 <main>:
int main(void) {
 8002c88:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c8c:	2400      	movs	r4, #0
int main(void) {
 8002c8e:	f5ad 7d6b 	sub.w	sp, sp, #940	; 0x3ac
	HAL_Init();
 8002c92:	f001 f8b7 	bl	8003e04 <HAL_Init>
	SystemClock_Config();
 8002c96:	f7ff ffa1 	bl	8002bdc <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c9a:	e9cd 4488 	strd	r4, r4, [sp, #544]	; 0x220
 8002c9e:	e9cd 448a 	strd	r4, r4, [sp, #552]	; 0x228
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002ca2:	4da8      	ldr	r5, [pc, #672]	; (8002f44 <main+0x2bc>)
 8002ca4:	9404      	str	r4, [sp, #16]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002ca6:	948c      	str	r4, [sp, #560]	; 0x230
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002ca8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_GPIO_WritePin(GPIOB,
 8002caa:	48a7      	ldr	r0, [pc, #668]	; (8002f48 <main+0x2c0>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	632b      	str	r3, [r5, #48]	; 0x30
 8002cb2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	9304      	str	r3, [sp, #16]
 8002cba:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002cbc:	9405      	str	r4, [sp, #20]
 8002cbe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc4:	632b      	str	r3, [r5, #48]	; 0x30
 8002cc6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ccc:	9305      	str	r3, [sp, #20]
 8002cce:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd0:	9406      	str	r4, [sp, #24]
 8002cd2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	632b      	str	r3, [r5, #48]	; 0x30
 8002cda:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	9306      	str	r3, [sp, #24]
 8002ce2:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce4:	9407      	str	r4, [sp, #28]
 8002ce6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	632b      	str	r3, [r5, #48]	; 0x30
 8002cee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	9307      	str	r3, [sp, #28]
	HAL_GPIO_WritePin(GPIOB,
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	2171      	movs	r1, #113	; 0x71
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002cfa:	9b07      	ldr	r3, [sp, #28]
	HAL_GPIO_WritePin(GPIOB,
 8002cfc:	f001 fe34 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(nSLEEP_GPIO_Port, nSLEEP_Pin, GPIO_PIN_RESET);
 8002d00:	4891      	ldr	r0, [pc, #580]	; (8002f48 <main+0x2c0>)
 8002d02:	4622      	mov	r2, r4
 8002d04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d08:	f001 fe2e 	bl	8004968 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002d0c:	488f      	ldr	r0, [pc, #572]	; (8002f4c <main+0x2c4>)
 8002d0e:	4622      	mov	r2, r4
 8002d10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d14:	f001 fe28 	bl	8004968 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Reset_program_Pin;
 8002d18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d1c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
	HAL_GPIO_Init(Reset_program_GPIO_Port, &GPIO_InitStruct);
 8002d20:	488b      	ldr	r0, [pc, #556]	; (8002f50 <main+0x2c8>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	948a      	str	r4, [sp, #552]	; 0x228
	HAL_GPIO_Init(Reset_program_GPIO_Port, &GPIO_InitStruct);
 8002d24:	a988      	add	r1, sp, #544	; 0x220
	GPIO_InitStruct.Pin = Reset_program_Pin;
 8002d26:	e9cd 2388 	strd	r2, r3, [sp, #544]	; 0x220
	GPIO_InitStruct.Pin = BMI270_CS_Pin | nSLEEP_Pin | MotorX_encoder_CS_Pin
 8002d2a:	2600      	movs	r6, #0
	HAL_GPIO_Init(Reset_program_GPIO_Port, &GPIO_InitStruct);
 8002d2c:	f001 fd2a 	bl	8004784 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = BMI270_CS_Pin | nSLEEP_Pin | MotorX_encoder_CS_Pin
 8002d30:	2700      	movs	r7, #0
 8002d32:	f242 0271 	movw	r2, #8305	; 0x2071
 8002d36:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d38:	4883      	ldr	r0, [pc, #524]	; (8002f48 <main+0x2c0>)
 8002d3a:	a988      	add	r1, sp, #544	; 0x220
	GPIO_InitStruct.Pin = BMI270_CS_Pin | nSLEEP_Pin | MotorX_encoder_CS_Pin
 8002d3c:	e9cd 2388 	strd	r2, r3, [sp, #544]	; 0x220
 8002d40:	e9cd 678a 	strd	r6, r7, [sp, #552]	; 0x228
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d44:	f001 fd1e 	bl	8004784 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = nFAULT_Z_Pin | nFAULT_X_Pin | nFAULT_Y_Pin;
 8002d48:	f44f 4250 	mov.w	r2, #53248	; 0xd000
 8002d4c:	2300      	movs	r3, #0
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d4e:	487e      	ldr	r0, [pc, #504]	; (8002f48 <main+0x2c0>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	948a      	str	r4, [sp, #552]	; 0x228
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d52:	a988      	add	r1, sp, #544	; 0x220
	GPIO_InitStruct.Pin = nFAULT_Z_Pin | nFAULT_X_Pin | nFAULT_Y_Pin;
 8002d54:	e9cd 2388 	strd	r2, r3, [sp, #544]	; 0x220
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d58:	f001 fd14 	bl	8004784 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d60:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d62:	487a      	ldr	r0, [pc, #488]	; (8002f4c <main+0x2c4>)
 8002d64:	a988      	add	r1, sp, #544	; 0x220
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d66:	e9cd 2388 	strd	r2, r3, [sp, #544]	; 0x220
 8002d6a:	e9cd 678a 	strd	r6, r7, [sp, #552]	; 0x228
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6e:	f001 fd09 	bl	8004784 <HAL_GPIO_Init>
	huart2.Instance = USART2;
 8002d72:	4878      	ldr	r0, [pc, #480]	; (8002f54 <main+0x2cc>)
 8002d74:	4978      	ldr	r1, [pc, #480]	; (8002f58 <main+0x2d0>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d76:	6084      	str	r4, [r0, #8]
	huart2.Init.BaudRate = 115200;
 8002d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002d7c:	230c      	movs	r3, #12
	huart2.Init.Parity = UART_PARITY_NONE;
 8002d7e:	e9c0 4403 	strd	r4, r4, [r0, #12]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d82:	e9c0 4406 	strd	r4, r4, [r0, #24]
	huart2.Init.BaudRate = 115200;
 8002d86:	e9c0 1200 	strd	r1, r2, [r0]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002d8a:	6143      	str	r3, [r0, #20]
	if (HAL_HalfDuplex_Init(&huart2) != HAL_OK) {
 8002d8c:	f003 fa52 	bl	8006234 <HAL_HalfDuplex_Init>
 8002d90:	b108      	cbz	r0, 8002d96 <main+0x10e>
 8002d92:	b672      	cpsid	i
	while (1) {
 8002d94:	e7fe      	b.n	8002d94 <main+0x10c>
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002d96:	9003      	str	r0, [sp, #12]
 8002d98:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	hadc1.Instance = ADC1;
 8002d9a:	4c70      	ldr	r4, [pc, #448]	; (8002f5c <main+0x2d4>)
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002d9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002da0:	632b      	str	r3, [r5, #48]	; 0x30
 8002da2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da8:	4606      	mov	r6, r0
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002daa:	4602      	mov	r2, r0
 8002dac:	4601      	mov	r1, r0
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002dae:	9303      	str	r3, [sp, #12]
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002db0:	2038      	movs	r0, #56	; 0x38
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002db2:	9b03      	ldr	r3, [sp, #12]
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002db4:	f001 fabe 	bl	8004334 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002db8:	2038      	movs	r0, #56	; 0x38
 8002dba:	f001 faf3 	bl	80043a4 <HAL_NVIC_EnableIRQ>
	hadc1.Instance = ADC1;
 8002dbe:	4b68      	ldr	r3, [pc, #416]	; (8002f60 <main+0x2d8>)
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002dc0:	4a68      	ldr	r2, [pc, #416]	; (8002f64 <main+0x2dc>)
	hadc1.Instance = ADC1;
 8002dc2:	6023      	str	r3, [r4, #0]
	hadc1.Init.ScanConvMode = ENABLE;
 8002dc4:	2501      	movs	r5, #1
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002dc6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
	hadc1.Init.NbrOfConversion = 7;
 8002dca:	2307      	movs	r3, #7
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002dcc:	4620      	mov	r0, r4
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002dce:	e9cd 6688 	strd	r6, r6, [sp, #544]	; 0x220
 8002dd2:	e9cd 668a 	strd	r6, r6, [sp, #552]	; 0x228
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002dd6:	60a6      	str	r6, [r4, #8]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002dd8:	f884 6020 	strb.w	r6, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ddc:	62e6      	str	r6, [r4, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002dde:	60e6      	str	r6, [r4, #12]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002de0:	6061      	str	r1, [r4, #4]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002de2:	62a2      	str	r2, [r4, #40]	; 0x28
	hadc1.Init.NbrOfConversion = 7;
 8002de4:	61e3      	str	r3, [r4, #28]
	hadc1.Init.ScanConvMode = ENABLE;
 8002de6:	6125      	str	r5, [r4, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002de8:	7625      	strb	r5, [r4, #24]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8002dea:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002dee:	6165      	str	r5, [r4, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002df0:	f001 f846 	bl	8003e80 <HAL_ADC_Init>
 8002df4:	b108      	cbz	r0, 8002dfa <main+0x172>
 8002df6:	b672      	cpsid	i
	while (1) {
 8002df8:	e7fe      	b.n	8002df8 <main+0x170>
	sConfig.Channel = ADC_CHANNEL_0;
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2301      	movs	r3, #1
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002dfe:	908a      	str	r0, [sp, #552]	; 0x228
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002e00:	a988      	add	r1, sp, #544	; 0x220
 8002e02:	4620      	mov	r0, r4
	sConfig.Channel = ADC_CHANNEL_0;
 8002e04:	e9cd 2388 	strd	r2, r3, [sp, #544]	; 0x220
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002e08:	f001 f9d8 	bl	80041bc <HAL_ADC_ConfigChannel>
 8002e0c:	b108      	cbz	r0, 8002e12 <main+0x18a>
 8002e0e:	b672      	cpsid	i
	while (1) {
 8002e10:	e7fe      	b.n	8002e10 <main+0x188>
	sConfig.Channel = ADC_CHANNEL_4;
 8002e12:	2204      	movs	r2, #4
 8002e14:	2302      	movs	r3, #2
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002e16:	a988      	add	r1, sp, #544	; 0x220
 8002e18:	4620      	mov	r0, r4
	sConfig.Channel = ADC_CHANNEL_4;
 8002e1a:	e9cd 2388 	strd	r2, r3, [sp, #544]	; 0x220
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002e1e:	f001 f9cd 	bl	80041bc <HAL_ADC_ConfigChannel>
 8002e22:	b108      	cbz	r0, 8002e28 <main+0x1a0>
 8002e24:	b672      	cpsid	i
	while (1) {
 8002e26:	e7fe      	b.n	8002e26 <main+0x19e>
	sConfig.Channel = ADC_CHANNEL_9;
 8002e28:	2209      	movs	r2, #9
 8002e2a:	2303      	movs	r3, #3
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002e2c:	a988      	add	r1, sp, #544	; 0x220
 8002e2e:	4620      	mov	r0, r4
	sConfig.Channel = ADC_CHANNEL_9;
 8002e30:	e9cd 2388 	strd	r2, r3, [sp, #544]	; 0x220
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002e34:	f001 f9c2 	bl	80041bc <HAL_ADC_ConfigChannel>
 8002e38:	b108      	cbz	r0, 8002e3e <main+0x1b6>
 8002e3a:	b672      	cpsid	i
	while (1) {
 8002e3c:	e7fe      	b.n	8002e3c <main+0x1b4>
	sConfig.Channel = ADC_CHANNEL_10;
 8002e3e:	220a      	movs	r2, #10
 8002e40:	2304      	movs	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002e42:	a988      	add	r1, sp, #544	; 0x220
 8002e44:	4620      	mov	r0, r4
	sConfig.Channel = ADC_CHANNEL_10;
 8002e46:	e9cd 2388 	strd	r2, r3, [sp, #544]	; 0x220
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002e4a:	f001 f9b7 	bl	80041bc <HAL_ADC_ConfigChannel>
 8002e4e:	b108      	cbz	r0, 8002e54 <main+0x1cc>
 8002e50:	b672      	cpsid	i
	while (1) {
 8002e52:	e7fe      	b.n	8002e52 <main+0x1ca>
	sConfig.Channel = ADC_CHANNEL_11;
 8002e54:	220b      	movs	r2, #11
 8002e56:	2305      	movs	r3, #5
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002e58:	a988      	add	r1, sp, #544	; 0x220
 8002e5a:	4620      	mov	r0, r4
	sConfig.Channel = ADC_CHANNEL_11;
 8002e5c:	e9cd 2388 	strd	r2, r3, [sp, #544]	; 0x220
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002e60:	f001 f9ac 	bl	80041bc <HAL_ADC_ConfigChannel>
 8002e64:	b108      	cbz	r0, 8002e6a <main+0x1e2>
 8002e66:	b672      	cpsid	i
	while (1) {
 8002e68:	e7fe      	b.n	8002e68 <main+0x1e0>
	sConfig.Channel = ADC_CHANNEL_12;
 8002e6a:	220c      	movs	r2, #12
 8002e6c:	2306      	movs	r3, #6
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002e6e:	a988      	add	r1, sp, #544	; 0x220
 8002e70:	4620      	mov	r0, r4
	sConfig.Channel = ADC_CHANNEL_12;
 8002e72:	e9cd 2388 	strd	r2, r3, [sp, #544]	; 0x220
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002e76:	f001 f9a1 	bl	80041bc <HAL_ADC_ConfigChannel>
 8002e7a:	b108      	cbz	r0, 8002e80 <main+0x1f8>
 8002e7c:	b672      	cpsid	i
	while (1) {
 8002e7e:	e7fe      	b.n	8002e7e <main+0x1f6>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002e80:	4620      	mov	r0, r4
	sConfig.Channel = ADC_CHANNEL_13;
 8002e82:	220d      	movs	r2, #13
 8002e84:	2307      	movs	r3, #7
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002e86:	a988      	add	r1, sp, #544	; 0x220
	sConfig.Channel = ADC_CHANNEL_13;
 8002e88:	e9cd 2388 	strd	r2, r3, [sp, #544]	; 0x220
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002e8c:	f001 f996 	bl	80041bc <HAL_ADC_ConfigChannel>
 8002e90:	4604      	mov	r4, r0
 8002e92:	b108      	cbz	r0, 8002e98 <main+0x210>
 8002e94:	b672      	cpsid	i
	while (1) {
 8002e96:	e7fe      	b.n	8002e96 <main+0x20e>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002e98:	2620      	movs	r6, #32
 8002e9a:	4632      	mov	r2, r6
 8002e9c:	4601      	mov	r1, r0
 8002e9e:	a888      	add	r0, sp, #544	; 0x220
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002ea0:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8002ea4:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002ea8:	e9cd 4408 	strd	r4, r4, [sp, #32]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002eac:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
 8002eb0:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
 8002eb4:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 8002eb8:	942c      	str	r4, [sp, #176]	; 0xb0
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002eba:	f003 fb33 	bl	8006524 <memset>
	htim1.Instance = TIM1;
 8002ebe:	482a      	ldr	r0, [pc, #168]	; (8002f68 <main+0x2e0>)
 8002ec0:	4a2a      	ldr	r2, [pc, #168]	; (8002f6c <main+0x2e4>)
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002ec2:	6086      	str	r6, [r0, #8]
	htim1.Init.Period = 1200 - 1;
 8002ec4:	f240 43af 	movw	r3, #1199	; 0x4af
	htim1.Init.RepetitionCounter = 0;
 8002ec8:	e9c0 4404 	strd	r4, r4, [r0, #16]
	htim1.Init.Prescaler = 1;
 8002ecc:	6045      	str	r5, [r0, #4]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ece:	6184      	str	r4, [r0, #24]
	htim1.Instance = TIM1;
 8002ed0:	6002      	str	r2, [r0, #0]
	htim1.Init.Period = 1200 - 1;
 8002ed2:	60c3      	str	r3, [r0, #12]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002ed4:	f002 fca0 	bl	8005818 <HAL_TIM_Base_Init>
 8002ed8:	b108      	cbz	r0, 8002ede <main+0x256>
 8002eda:	b672      	cpsid	i
	while (1) {
 8002edc:	e7fe      	b.n	8002edc <main+0x254>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ede:	f44f 5580 	mov.w	r5, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002ee2:	4821      	ldr	r0, [pc, #132]	; (8002f68 <main+0x2e0>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ee4:	950c      	str	r5, [sp, #48]	; 0x30
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002ee6:	a90c      	add	r1, sp, #48	; 0x30
 8002ee8:	f003 f890 	bl	800600c <HAL_TIM_ConfigClockSource>
 8002eec:	b108      	cbz	r0, 8002ef2 <main+0x26a>
 8002eee:	b672      	cpsid	i
	while (1) {
 8002ef0:	e7fe      	b.n	8002ef0 <main+0x268>
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002ef2:	481d      	ldr	r0, [pc, #116]	; (8002f68 <main+0x2e0>)
 8002ef4:	f002 fdbe 	bl	8005a74 <HAL_TIM_PWM_Init>
 8002ef8:	b108      	cbz	r0, 8002efe <main+0x276>
 8002efa:	b672      	cpsid	i
	while (1) {
 8002efc:	e7fe      	b.n	8002efc <main+0x274>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002efe:	2600      	movs	r6, #0
 8002f00:	2700      	movs	r7, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002f02:	4819      	ldr	r0, [pc, #100]	; (8002f68 <main+0x2e0>)
 8002f04:	a908      	add	r1, sp, #32
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f06:	e9cd 6708 	strd	r6, r7, [sp, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002f0a:	f003 f92f 	bl	800616c <HAL_TIMEx_MasterConfigSynchronization>
 8002f0e:	b108      	cbz	r0, 8002f14 <main+0x28c>
 8002f10:	b672      	cpsid	i
	while (1) {
 8002f12:	e7fe      	b.n	8002f12 <main+0x28a>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f14:	f04f 0860 	mov.w	r8, #96	; 0x60
 8002f18:	f04f 0900 	mov.w	r9, #0
 8002f1c:	e9cd 8926 	strd	r8, r9, [sp, #152]	; 0x98
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8002f20:	4602      	mov	r2, r0
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f22:	902c      	str	r0, [sp, #176]	; 0xb0
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f24:	f04f 0804 	mov.w	r8, #4
 8002f28:	f04f 0900 	mov.w	r9, #0
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8002f2c:	480e      	ldr	r0, [pc, #56]	; (8002f68 <main+0x2e0>)
 8002f2e:	a926      	add	r1, sp, #152	; 0x98
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f30:	e9cd 6728 	strd	r6, r7, [sp, #160]	; 0xa0
 8002f34:	e9cd 892a 	strd	r8, r9, [sp, #168]	; 0xa8
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8002f38:	f002 ff58 	bl	8005dec <HAL_TIM_PWM_ConfigChannel>
 8002f3c:	b1c0      	cbz	r0, 8002f70 <main+0x2e8>
 8002f3e:	b672      	cpsid	i
	while (1) {
 8002f40:	e7fe      	b.n	8002f40 <main+0x2b8>
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40020400 	.word	0x40020400
 8002f4c:	40020000 	.word	0x40020000
 8002f50:	40020800 	.word	0x40020800
 8002f54:	200064a4 	.word	0x200064a4
 8002f58:	40004400 	.word	0x40004400
 8002f5c:	20006300 	.word	0x20006300
 8002f60:	40012000 	.word	0x40012000
 8002f64:	0f000001 	.word	0x0f000001
 8002f68:	200063b4 	.word	0x200063b4
 8002f6c:	40010000 	.word	0x40010000
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8002f70:	4894      	ldr	r0, [pc, #592]	; (80031c4 <main+0x53c>)
 8002f72:	2204      	movs	r2, #4
 8002f74:	a926      	add	r1, sp, #152	; 0x98
 8002f76:	f002 ff39 	bl	8005dec <HAL_TIM_PWM_ConfigChannel>
 8002f7a:	b108      	cbz	r0, 8002f80 <main+0x2f8>
 8002f7c:	b672      	cpsid	i
	while (1) {
 8002f7e:	e7fe      	b.n	8002f7e <main+0x2f6>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8002f80:	4890      	ldr	r0, [pc, #576]	; (80031c4 <main+0x53c>)
 8002f82:	2208      	movs	r2, #8
 8002f84:	a926      	add	r1, sp, #152	; 0x98
 8002f86:	f002 ff31 	bl	8005dec <HAL_TIM_PWM_ConfigChannel>
 8002f8a:	b108      	cbz	r0, 8002f90 <main+0x308>
 8002f8c:	b672      	cpsid	i
	while (1) {
 8002f8e:	e7fe      	b.n	8002f8e <main+0x306>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f90:	2200      	movs	r2, #0
 8002f92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f96:	908f      	str	r0, [sp, #572]	; 0x23c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002f98:	a988      	add	r1, sp, #544	; 0x220
 8002f9a:	488a      	ldr	r0, [pc, #552]	; (80031c4 <main+0x53c>)
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f9c:	e9cd 6788 	strd	r6, r7, [sp, #544]	; 0x220
 8002fa0:	e9cd 678a 	strd	r6, r7, [sp, #552]	; 0x228
 8002fa4:	e9cd 238c 	strd	r2, r3, [sp, #560]	; 0x230
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002fa8:	f003 f91a 	bl	80061e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002fac:	4604      	mov	r4, r0
 8002fae:	b108      	cbz	r0, 8002fb4 <main+0x32c>
 8002fb0:	b672      	cpsid	i
	while (1) {
 8002fb2:	e7fe      	b.n	8002fb2 <main+0x32a>
	HAL_TIM_MspPostInit(&htim1);
 8002fb4:	4883      	ldr	r0, [pc, #524]	; (80031c4 <main+0x53c>)
 8002fb6:	f000 fd97 	bl	8003ae8 <HAL_TIM_MspPostInit>
	hspi1.Instance = SPI1;
 8002fba:	4883      	ldr	r0, [pc, #524]	; (80031c8 <main+0x540>)
 8002fbc:	4a83      	ldr	r2, [pc, #524]	; (80031cc <main+0x544>)
 8002fbe:	6002      	str	r2, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fc0:	f44f 7182 	mov.w	r1, #260	; 0x104
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fc8:	6041      	str	r1, [r0, #4]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002fca:	6182      	str	r2, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002fcc:	2118      	movs	r1, #24
	hspi1.Init.CRCPolynomial = 10;
 8002fce:	220a      	movs	r2, #10
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fd0:	e9c0 4402 	strd	r4, r4, [r0, #8]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fd4:	e9c0 4404 	strd	r4, r4, [r0, #16]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fd8:	e9c0 4408 	strd	r4, r4, [r0, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fdc:	6284      	str	r4, [r0, #40]	; 0x28
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002fde:	61c1      	str	r1, [r0, #28]
	hspi1.Init.CRCPolynomial = 10;
 8002fe0:	62c2      	str	r2, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002fe2:	f001 ffff 	bl	8004fe4 <HAL_SPI_Init>
 8002fe6:	b108      	cbz	r0, 8002fec <main+0x364>
 8002fe8:	b672      	cpsid	i
	while (1) {
 8002fea:	e7fe      	b.n	8002fea <main+0x362>
	htim2.Instance = TIM2;
 8002fec:	4c78      	ldr	r4, [pc, #480]	; (80031d0 <main+0x548>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002fee:	9026      	str	r0, [sp, #152]	; 0x98
	htim2.Instance = TIM2;
 8002ff0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	htim2.Init.Prescaler = 1;
 8002ff4:	2301      	movs	r3, #1
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002ff6:	e9cd 0027 	strd	r0, r0, [sp, #156]	; 0x9c
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002ffa:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002ffe:	e9cd 0088 	strd	r0, r0, [sp, #544]	; 0x220
 8003002:	e9cd 008a 	strd	r0, r0, [sp, #552]	; 0x228
 8003006:	e9cd 008c 	strd	r0, r0, [sp, #560]	; 0x230
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800300a:	9029      	str	r0, [sp, #164]	; 0xa4
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800300c:	908e      	str	r0, [sp, #568]	; 0x238
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800300e:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003010:	61a0      	str	r0, [r4, #24]
	htim2.Instance = TIM2;
 8003012:	6022      	str	r2, [r4, #0]
	htim2.Init.Prescaler = 1;
 8003014:	6063      	str	r3, [r4, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003016:	2220      	movs	r2, #32
	htim2.Init.Period = 1200 - 1;
 8003018:	f240 43af 	movw	r3, #1199	; 0x4af
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800301c:	4620      	mov	r0, r4
	htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800301e:	60a2      	str	r2, [r4, #8]
	htim2.Init.Period = 1200 - 1;
 8003020:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8003022:	f002 fbf9 	bl	8005818 <HAL_TIM_Base_Init>
 8003026:	b108      	cbz	r0, 800302c <main+0x3a4>
 8003028:	b672      	cpsid	i
	while (1) {
 800302a:	e7fe      	b.n	800302a <main+0x3a2>
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800302c:	4620      	mov	r0, r4
 800302e:	a926      	add	r1, sp, #152	; 0x98
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003030:	9526      	str	r5, [sp, #152]	; 0x98
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8003032:	f002 ffeb 	bl	800600c <HAL_TIM_ConfigClockSource>
 8003036:	b108      	cbz	r0, 800303c <main+0x3b4>
 8003038:	b672      	cpsid	i
	while (1) {
 800303a:	e7fe      	b.n	800303a <main+0x3b2>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800303c:	4864      	ldr	r0, [pc, #400]	; (80031d0 <main+0x548>)
 800303e:	f002 fd19 	bl	8005a74 <HAL_TIM_PWM_Init>
 8003042:	b108      	cbz	r0, 8003048 <main+0x3c0>
 8003044:	b672      	cpsid	i
	while (1) {
 8003046:	e7fe      	b.n	8003046 <main+0x3be>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003048:	4861      	ldr	r0, [pc, #388]	; (80031d0 <main+0x548>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800304a:	f04f 0800 	mov.w	r8, #0
 800304e:	f04f 0900 	mov.w	r9, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003052:	a90c      	add	r1, sp, #48	; 0x30
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003054:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003058:	f003 f888 	bl	800616c <HAL_TIMEx_MasterConfigSynchronization>
 800305c:	4602      	mov	r2, r0
 800305e:	b108      	cbz	r0, 8003064 <main+0x3dc>
 8003060:	b672      	cpsid	i
	while (1) {
 8003062:	e7fe      	b.n	8003062 <main+0x3da>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003064:	2660      	movs	r6, #96	; 0x60
 8003066:	2700      	movs	r7, #0
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003068:	f04f 0a04 	mov.w	sl, #4
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800306c:	4858      	ldr	r0, [pc, #352]	; (80031d0 <main+0x548>)
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800306e:	928a      	str	r2, [sp, #552]	; 0x228
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8003070:	a988      	add	r1, sp, #544	; 0x220
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003072:	e9cd 6788 	strd	r6, r7, [sp, #544]	; 0x220
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003076:	f8cd a230 	str.w	sl, [sp, #560]	; 0x230
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800307a:	f002 feb7 	bl	8005dec <HAL_TIM_PWM_ConfigChannel>
 800307e:	b108      	cbz	r0, 8003084 <main+0x3fc>
 8003080:	b672      	cpsid	i
	while (1) {
 8003082:	e7fe      	b.n	8003082 <main+0x3fa>
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8003084:	4852      	ldr	r0, [pc, #328]	; (80031d0 <main+0x548>)
 8003086:	4652      	mov	r2, sl
 8003088:	a988      	add	r1, sp, #544	; 0x220
 800308a:	f002 feaf 	bl	8005dec <HAL_TIM_PWM_ConfigChannel>
 800308e:	b108      	cbz	r0, 8003094 <main+0x40c>
 8003090:	b672      	cpsid	i
	while (1) {
 8003092:	e7fe      	b.n	8003092 <main+0x40a>
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8003094:	484e      	ldr	r0, [pc, #312]	; (80031d0 <main+0x548>)
 8003096:	2208      	movs	r2, #8
 8003098:	a988      	add	r1, sp, #544	; 0x220
 800309a:	f002 fea7 	bl	8005dec <HAL_TIM_PWM_ConfigChannel>
 800309e:	4604      	mov	r4, r0
 80030a0:	b108      	cbz	r0, 80030a6 <main+0x41e>
 80030a2:	b672      	cpsid	i
	while (1) {
 80030a4:	e7fe      	b.n	80030a4 <main+0x41c>
	htim3.Instance = TIM3;
 80030a6:	4d4b      	ldr	r5, [pc, #300]	; (80031d4 <main+0x54c>)
	HAL_TIM_MspPostInit(&htim2);
 80030a8:	4849      	ldr	r0, [pc, #292]	; (80031d0 <main+0x548>)
 80030aa:	f000 fd1d 	bl	8003ae8 <HAL_TIM_MspPostInit>
	htim3.Instance = TIM3;
 80030ae:	4a4a      	ldr	r2, [pc, #296]	; (80031d8 <main+0x550>)
 80030b0:	602a      	str	r2, [r5, #0]
	htim3.Init.Prescaler = 1;
 80030b2:	2301      	movs	r3, #1
	htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80030b4:	2220      	movs	r2, #32
	htim3.Init.Prescaler = 1;
 80030b6:	606b      	str	r3, [r5, #4]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80030b8:	4628      	mov	r0, r5
	htim3.Init.Period = 1200 - 1;
 80030ba:	f240 43af 	movw	r3, #1199	; 0x4af
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80030be:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
 80030c2:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80030c6:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80030ca:	e9cd 4488 	strd	r4, r4, [sp, #544]	; 0x220
 80030ce:	e9cd 448a 	strd	r4, r4, [sp, #552]	; 0x228
 80030d2:	e9cd 448c 	strd	r4, r4, [sp, #560]	; 0x230
 80030d6:	948e      	str	r4, [sp, #568]	; 0x238
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030d8:	612c      	str	r4, [r5, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030da:	61ac      	str	r4, [r5, #24]
	htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80030dc:	60aa      	str	r2, [r5, #8]
	htim3.Init.Period = 1200 - 1;
 80030de:	60eb      	str	r3, [r5, #12]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80030e0:	f002 fb9a 	bl	8005818 <HAL_TIM_Base_Init>
 80030e4:	b108      	cbz	r0, 80030ea <main+0x462>
 80030e6:	b672      	cpsid	i
	while (1) {
 80030e8:	e7fe      	b.n	80030e8 <main+0x460>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80030ee:	a926      	add	r1, sp, #152	; 0x98
 80030f0:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030f2:	9326      	str	r3, [sp, #152]	; 0x98
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80030f4:	f002 ff8a 	bl	800600c <HAL_TIM_ConfigClockSource>
 80030f8:	b108      	cbz	r0, 80030fe <main+0x476>
 80030fa:	b672      	cpsid	i
	while (1) {
 80030fc:	e7fe      	b.n	80030fc <main+0x474>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80030fe:	4628      	mov	r0, r5
 8003100:	f002 fcb8 	bl	8005a74 <HAL_TIM_PWM_Init>
 8003104:	b108      	cbz	r0, 800310a <main+0x482>
 8003106:	b672      	cpsid	i
	while (1) {
 8003108:	e7fe      	b.n	8003108 <main+0x480>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800310a:	a90c      	add	r1, sp, #48	; 0x30
 800310c:	4628      	mov	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800310e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003112:	f003 f82b 	bl	800616c <HAL_TIMEx_MasterConfigSynchronization>
 8003116:	4602      	mov	r2, r0
 8003118:	b108      	cbz	r0, 800311e <main+0x496>
 800311a:	b672      	cpsid	i
	while (1) {
 800311c:	e7fe      	b.n	800311c <main+0x494>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 800311e:	4628      	mov	r0, r5
 8003120:	a988      	add	r1, sp, #544	; 0x220
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003122:	e9cd 6788 	strd	r6, r7, [sp, #544]	; 0x220
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003126:	928a      	str	r2, [sp, #552]	; 0x228
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003128:	f8cd a230 	str.w	sl, [sp, #560]	; 0x230
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 800312c:	f002 fe5e 	bl	8005dec <HAL_TIM_PWM_ConfigChannel>
 8003130:	b108      	cbz	r0, 8003136 <main+0x4ae>
 8003132:	b672      	cpsid	i
	while (1) {
 8003134:	e7fe      	b.n	8003134 <main+0x4ac>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8003136:	4827      	ldr	r0, [pc, #156]	; (80031d4 <main+0x54c>)
 8003138:	2204      	movs	r2, #4
 800313a:	a988      	add	r1, sp, #544	; 0x220
 800313c:	f002 fe56 	bl	8005dec <HAL_TIM_PWM_ConfigChannel>
 8003140:	b108      	cbz	r0, 8003146 <main+0x4be>
 8003142:	b672      	cpsid	i
	while (1) {
 8003144:	e7fe      	b.n	8003144 <main+0x4bc>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8003146:	4823      	ldr	r0, [pc, #140]	; (80031d4 <main+0x54c>)
 8003148:	2208      	movs	r2, #8
 800314a:	a988      	add	r1, sp, #544	; 0x220
 800314c:	f002 fe4e 	bl	8005dec <HAL_TIM_PWM_ConfigChannel>
 8003150:	4605      	mov	r5, r0
 8003152:	b108      	cbz	r0, 8003158 <main+0x4d0>
 8003154:	b672      	cpsid	i
	while (1) {
 8003156:	e7fe      	b.n	8003156 <main+0x4ce>
	htim5.Instance = TIM5;
 8003158:	4c20      	ldr	r4, [pc, #128]	; (80031dc <main+0x554>)
	HAL_TIM_MspPostInit(&htim3);
 800315a:	481e      	ldr	r0, [pc, #120]	; (80031d4 <main+0x54c>)
 800315c:	f000 fcc4 	bl	8003ae8 <HAL_TIM_MspPostInit>
	htim5.Instance = TIM5;
 8003160:	4b1f      	ldr	r3, [pc, #124]	; (80031e0 <main+0x558>)
 8003162:	6023      	str	r3, [r4, #0]
	htim5.Init.Prescaler = 84;
 8003164:	2254      	movs	r2, #84	; 0x54
	htim5.Init.Period = 999999;
 8003166:	4b1f      	ldr	r3, [pc, #124]	; (80031e4 <main+0x55c>)
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003168:	958e      	str	r5, [sp, #568]	; 0x238
	if (HAL_TIM_OC_Init(&htim5) != HAL_OK) {
 800316a:	4620      	mov	r0, r4
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800316c:	e9cd 5526 	strd	r5, r5, [sp, #152]	; 0x98
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003170:	e9cd 5588 	strd	r5, r5, [sp, #544]	; 0x220
 8003174:	e9cd 558a 	strd	r5, r5, [sp, #552]	; 0x228
 8003178:	e9cd 558c 	strd	r5, r5, [sp, #560]	; 0x230
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800317c:	60a5      	str	r5, [r4, #8]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800317e:	6125      	str	r5, [r4, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003180:	61a5      	str	r5, [r4, #24]
	htim5.Init.Prescaler = 84;
 8003182:	6062      	str	r2, [r4, #4]
	htim5.Init.Period = 999999;
 8003184:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_OC_Init(&htim5) != HAL_OK) {
 8003186:	f002 fbf5 	bl	8005974 <HAL_TIM_OC_Init>
 800318a:	b108      	cbz	r0, 8003190 <main+0x508>
 800318c:	b672      	cpsid	i
	while (1) {
 800318e:	e7fe      	b.n	800318e <main+0x506>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003190:	2600      	movs	r6, #0
 8003192:	2700      	movs	r7, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8003194:	a926      	add	r1, sp, #152	; 0x98
 8003196:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003198:	e9cd 6726 	strd	r6, r7, [sp, #152]	; 0x98
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 800319c:	f002 ffe6 	bl	800616c <HAL_TIMEx_MasterConfigSynchronization>
 80031a0:	4603      	mov	r3, r0
 80031a2:	b108      	cbz	r0, 80031a8 <main+0x520>
 80031a4:	b672      	cpsid	i
	while (1) {
 80031a6:	e7fe      	b.n	80031a6 <main+0x51e>
	if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 80031a8:	220c      	movs	r2, #12
 80031aa:	a988      	add	r1, sp, #544	; 0x220
 80031ac:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80031ae:	e9cd 6788 	strd	r6, r7, [sp, #544]	; 0x220
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031b2:	938a      	str	r3, [sp, #552]	; 0x228
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031b4:	938c      	str	r3, [sp, #560]	; 0x230
	if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 80031b6:	f002 fd43 	bl	8005c40 <HAL_TIM_OC_ConfigChannel>
 80031ba:	4680      	mov	r8, r0
 80031bc:	b1a0      	cbz	r0, 80031e8 <main+0x560>
 80031be:	b672      	cpsid	i
	while (1) {
 80031c0:	e7fe      	b.n	80031c0 <main+0x538>
 80031c2:	bf00      	nop
 80031c4:	200063b4 	.word	0x200063b4
 80031c8:	200063fc 	.word	0x200063fc
 80031cc:	40013000 	.word	0x40013000
 80031d0:	20006458 	.word	0x20006458
 80031d4:	200062a8 	.word	0x200062a8
 80031d8:	40000400 	.word	0x40000400
 80031dc:	20006260 	.word	0x20006260
 80031e0:	40000c00 	.word	0x40000c00
 80031e4:	000f423f 	.word	0x000f423f
		sprintf((char*) buff, "\r\n###########################\r\n");
 80031e8:	4ec1      	ldr	r6, [pc, #772]	; (80034f0 <main+0x868>)
 80031ea:	4dc2      	ldr	r5, [pc, #776]	; (80034f4 <main+0x86c>)
		adc_ratio = 1 / (float) adc_max;
 80031ec:	f8df 935c 	ldr.w	r9, [pc, #860]	; 800354c <main+0x8c4>
		sense_ratio = 1 / (float) (sense_resistance * ina181_gain);
 80031f0:	f8df a35c 	ldr.w	sl, [pc, #860]	; 8003550 <main+0x8c8>
 80031f4:	4fc0      	ldr	r7, [pc, #768]	; (80034f8 <main+0x870>)
		sprintf((char*) buff, "\r\n###########################\r\n");
 80031f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80031f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80031fe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart2, (uint8_t*) buff, strlen((char*) buff),
 8003202:	f1a5 0110 	sub.w	r1, r5, #16
 8003206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800320a:	221f      	movs	r2, #31
 800320c:	48bb      	ldr	r0, [pc, #748]	; (80034fc <main+0x874>)
 800320e:	f003 f8b1 	bl	8006374 <HAL_UART_Transmit>
uint32_t get_ms();
uint32_t get_us();

__STATIC_INLINE void DWT_Init(void)
{
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8003212:	49bb      	ldr	r1, [pc, #748]	; (8003500 <main+0x878>)
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8003214:	4abb      	ldr	r2, [pc, #748]	; (8003504 <main+0x87c>)
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8003216:	68cb      	ldr	r3, [r1, #12]
	MotorX.PIN_ENC = PIN_ENC_X;
 8003218:	48bb      	ldr	r0, [pc, #748]	; (8003508 <main+0x880>)
 800321a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800321e:	60cb      	str	r3, [r1, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8003220:	6813      	ldr	r3, [r2, #0]
	MotorY.PIN_ENC = PIN_ENC_Y;
 8003222:	49ba      	ldr	r1, [pc, #744]	; (800350c <main+0x884>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	9188      	str	r1, [sp, #544]	; 0x220
	MotorX.PIN_ENC = PIN_ENC_X;
 800322c:	9026      	str	r0, [sp, #152]	; 0x98
		bmi270_spi_init();
 800322e:	f7fe f867 	bl	8001300 <bmi270_spi_init>
		if (!USE_IMU_VIS) bmi270_spi_init_check();
 8003232:	f7fe f94f 	bl	80014d4 <bmi270_spi_init_check>
		bmi270_pwr_conf(BMI270_PWR_MODE_PERF);
 8003236:	2002      	movs	r0, #2
 8003238:	f7fe f9da 	bl	80015f0 <bmi270_pwr_conf>
		bmi270_spi_write_8(REG_GYR_RANGE, range_2000);
 800323c:	4641      	mov	r1, r8
 800323e:	2043      	movs	r0, #67	; 0x43
 8003240:	f7fe fbe6 	bl	8001a10 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_ACC_RANGE, range_8g);
 8003244:	2102      	movs	r1, #2
 8003246:	2041      	movs	r0, #65	; 0x41
 8003248:	f7fe fbe2 	bl	8001a10 <bmi270_spi_write_8>
		bmi270_getGyroRange(&Imu);
 800324c:	a80c      	add	r0, sp, #48	; 0x30
 800324e:	f7fe fd8d 	bl	8001d6c <bmi270_getGyroRange>
		bmi270_getAccelRange(&Imu);
 8003252:	a80c      	add	r0, sp, #48	; 0x30
 8003254:	f7fe fe06 	bl	8001e64 <bmi270_getAccelRange>
		bmi270_calibrateInit(&Imu, 0);
 8003258:	ed9f 0aad 	vldr	s0, [pc, #692]	; 8003510 <main+0x888>
 800325c:	a80c      	add	r0, sp, #48	; 0x30
 800325e:	f7fe fe6d 	bl	8001f3c <bmi270_calibrateInit>
		Imu.gyr_odr = gyr_odr_25; /* Set gyro 3dB LP-filter cutoff to 50Hz */
 8003262:	f44f 7383 	mov.w	r3, #262	; 0x106
		bmi270_setGyroConf(&Imu);
 8003266:	a80c      	add	r0, sp, #48	; 0x30
		Imu.gyr_odr = gyr_odr_25; /* Set gyro 3dB LP-filter cutoff to 50Hz */
 8003268:	f8cd 308a 	str.w	r3, [sp, #138]	; 0x8a
		bmi270_setGyroConf(&Imu);
 800326c:	f7fe fc44 	bl	8001af8 <bmi270_setGyroConf>
		bmi270_getGyroConf(&Imu);
 8003270:	a80c      	add	r0, sp, #48	; 0x30
 8003272:	f7fe fbf7 	bl	8001a64 <bmi270_getGyroConf>
		Imu.acc_odr = acc_odr_12p5; /* Set accel 3dB LP-filter cutoff to 50Hz */
 8003276:	f240 7305 	movw	r3, #1797	; 0x705
		bmi270_setAccConf(&Imu);
 800327a:	a80c      	add	r0, sp, #48	; 0x30
		Imu.acc_odr = acc_odr_12p5; /* Set accel 3dB LP-filter cutoff to 50Hz */
 800327c:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
		Imu.acc_filter_perf = acc_ulp;
 8003280:	f88d 8090 	strb.w	r8, [sp, #144]	; 0x90
		bmi270_setAccConf(&Imu);
 8003284:	f7fe fd06 	bl	8001c94 <bmi270_setAccConf>
		bmi270_getAccConf(&Imu);
 8003288:	a80c      	add	r0, sp, #48	; 0x30
 800328a:	f7fe fcc1 	bl	8001c10 <bmi270_getAccConf>
		Imu.roll_zero = Imu.roll;
 800328e:	9a16      	ldr	r2, [sp, #88]	; 0x58
		Imu.pitch_zero = Imu.pitch;
 8003290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
		Imu.roll_zero = Imu.roll;
 8003292:	9219      	str	r2, [sp, #100]	; 0x64
		as5048a_init(&MotorX);
 8003294:	a826      	add	r0, sp, #152	; 0x98
		Imu.pitch_zero = Imu.pitch;
 8003296:	931a      	str	r3, [sp, #104]	; 0x68
		as5048a_init(&MotorX);
 8003298:	f7fd fee2 	bl	8001060 <as5048a_init>
		as5048a_init(&MotorY);
 800329c:	a888      	add	r0, sp, #544	; 0x220
 800329e:	f7fd fedf 	bl	8001060 <as5048a_init>
		MotorX.LPF_angle_measure.Tf = 0.001f;
 80032a2:	4b9c      	ldr	r3, [pc, #624]	; (8003514 <main+0x88c>)
		drv8313_init(&MotorX, &htim1);
 80032a4:	499c      	ldr	r1, [pc, #624]	; (8003518 <main+0x890>)
		MotorX.LPF_angle_measure.Tf = 0.001f;
 80032a6:	9379      	str	r3, [sp, #484]	; 0x1e4
		drv8313_init(&MotorX, &htim1);
 80032a8:	a826      	add	r0, sp, #152	; 0x98
		MotorY.LPF_angle_measure.Tf = 0.001f;
 80032aa:	93db      	str	r3, [sp, #876]	; 0x36c
		drv8313_init(&MotorX, &htim1);
 80032ac:	f7fe feda 	bl	8002064 <drv8313_init>
		drv8313_init(&MotorY, &htim2);
 80032b0:	499a      	ldr	r1, [pc, #616]	; (800351c <main+0x894>)
 80032b2:	a888      	add	r0, sp, #544	; 0x220
 80032b4:	f7fe fed6 	bl	8002064 <drv8313_init>
		MotorX.pole_pairs = 11;
 80032b8:	230b      	movs	r3, #11
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_read, 7);
 80032ba:	4999      	ldr	r1, [pc, #612]	; (8003520 <main+0x898>)
 80032bc:	4899      	ldr	r0, [pc, #612]	; (8003524 <main+0x89c>)
		MotorX.pole_pairs = 11;
 80032be:	f8ad 321c 	strh.w	r3, [sp, #540]	; 0x21c
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_read, 7);
 80032c2:	2207      	movs	r2, #7
		MotorY.pole_pairs = 11;
 80032c4:	f8ad 33a4 	strh.w	r3, [sp, #932]	; 0x3a4
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_read, 7);
 80032c8:	f000 fe88 	bl	8003fdc <HAL_ADC_Start_DMA>
		adc_ratio = 1 / (float) adc_max;
 80032cc:	4996      	ldr	r1, [pc, #600]	; (8003528 <main+0x8a0>)
		sense_ratio = 1 / (float) (sense_resistance * ina181_gain);
 80032ce:	4a97      	ldr	r2, [pc, #604]	; (800352c <main+0x8a4>)
 80032d0:	4b97      	ldr	r3, [pc, #604]	; (8003530 <main+0x8a8>)
		adc_ratio = 1 / (float) adc_max;
 80032d2:	8809      	ldrh	r1, [r1, #0]
		sense_ratio = 1 / (float) (sense_resistance * ina181_gain);
 80032d4:	edd3 6a00 	vldr	s13, [r3]
 80032d8:	edd2 7a00 	vldr	s15, [r2]
		adc_ratio = 1 / (float) adc_max;
 80032dc:	ee07 1a10 	vmov	s14, r1
		sense_ratio = 1 / (float) (sense_resistance * ina181_gain);
 80032e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
		adc_ratio = 1 / (float) adc_max;
 80032e4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80032e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ec:	ee86 5a87 	vdiv.f32	s10, s13, s14
		sense_ratio = 1 / (float) (sense_resistance * ina181_gain);
 80032f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
		adc_ratio = 1 / (float) adc_max;
 80032f4:	ed89 5a00 	vstr	s10, [r9]
		sense_ratio = 1 / (float) (sense_resistance * ina181_gain);
 80032f8:	ed8a 7a00 	vstr	s14, [sl]
		while (adcConvComplete == 0) {
 80032fc:	783b      	ldrb	r3, [r7, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0fc      	beq.n	80032fc <main+0x674>
		ina_ref = adc_read[6] * adc_ratio * adc_ref;
 8003302:	4e87      	ldr	r6, [pc, #540]	; (8003520 <main+0x898>)
 8003304:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8003554 <main+0x8cc>
 8003308:	4d8a      	ldr	r5, [pc, #552]	; (8003534 <main+0x8ac>)
 800330a:	ed98 3a00 	vldr	s6, [r8]
	TIM5->PSC = 84;
 800330e:	f8df e248 	ldr.w	lr, [pc, #584]	; 8003558 <main+0x8d0>
	HAL_TIM_Base_Start(&htim5);
 8003312:	4889      	ldr	r0, [pc, #548]	; (8003538 <main+0x8b0>)
			foc_update(&MotorX, PID_Update(&MotorX.imu_reg, 0, Imu.roll*DEG_TO_RAD));
 8003314:	ed9f 9a89 	vldr	s18, [pc, #548]	; 800353c <main+0x8b4>
 8003318:	eddf 8a7d 	vldr	s17, [pc, #500]	; 8003510 <main+0x888>
		if(USE_AS5048A && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 800331c:	f8df b23c 	ldr.w	fp, [pc, #572]	; 800355c <main+0x8d4>
		adcConvComplete = 0;
 8003320:	2200      	movs	r2, #0
 8003322:	703a      	strb	r2, [r7, #0]
		ina_ref = adc_read[6] * adc_ratio * adc_ref;
 8003324:	89b3      	ldrh	r3, [r6, #12]
			adcConvComplete = 0;
 8003326:	9201      	str	r2, [sp, #4]
		ina_ref = adc_read[6] * adc_ratio * adc_ref;
 8003328:	b29b      	uxth	r3, r3
 800332a:	ee07 3a90 	vmov	s15, r3
 800332e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003332:	ee67 7a85 	vmul.f32	s15, s15, s10
 8003336:	ee67 7a83 	vmul.f32	s15, s15, s6
 800333a:	edc5 7a00 	vstr	s15, [r5]
		MotorX.i_a = (adc_read[0] * adc_ratio * adc_ref - ina_ref)
 800333e:	f8b6 c000 	ldrh.w	ip, [r6]
 8003342:	edd5 3a00 	vldr	s7, [r5]
		MotorX.i_b = (adc_read[1] * adc_ratio * adc_ref - ina_ref)
 8003346:	8871      	ldrh	r1, [r6, #2]
 8003348:	ed95 4a00 	vldr	s8, [r5]
		MotorY.i_a = (adc_read[2] * adc_ratio * adc_ref - ina_ref)
 800334c:	88b2      	ldrh	r2, [r6, #4]
 800334e:	edd5 4a00 	vldr	s9, [r5]
		MotorY.i_b = (adc_read[3] * adc_ratio * adc_ref - ina_ref)
 8003352:	88f3      	ldrh	r3, [r6, #6]
 8003354:	edd5 2a00 	vldr	s5, [r5]
 8003358:	b29b      	uxth	r3, r3
		MotorX.i_a = (adc_read[0] * adc_ratio * adc_ref - ina_ref)
 800335a:	fa1f fc8c 	uxth.w	ip, ip
		MotorX.i_b = (adc_read[1] * adc_ratio * adc_ref - ina_ref)
 800335e:	b289      	uxth	r1, r1
		MotorY.i_a = (adc_read[2] * adc_ratio * adc_ref - ina_ref)
 8003360:	b292      	uxth	r2, r2
		MotorY.i_b = (adc_read[3] * adc_ratio * adc_ref - ina_ref)
 8003362:	ee07 3a90 	vmov	s15, r3
		MotorX.i_a = (adc_read[0] * adc_ratio * adc_ref - ina_ref)
 8003366:	ee05 ca90 	vmov	s11, ip
		MotorX.i_b = (adc_read[1] * adc_ratio * adc_ref - ina_ref)
 800336a:	ee06 1a10 	vmov	s12, r1
		MotorY.i_a = (adc_read[2] * adc_ratio * adc_ref - ina_ref)
 800336e:	ee06 2a90 	vmov	s13, r2
		MotorX.i_a = (adc_read[0] * adc_ratio * adc_ref - ina_ref)
 8003372:	eef8 5ae5 	vcvt.f32.s32	s11, s11
		MotorX.i_b = (adc_read[1] * adc_ratio * adc_ref - ina_ref)
 8003376:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
		MotorY.i_a = (adc_read[2] * adc_ratio * adc_ref - ina_ref)
 800337a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		MotorY.i_b = (adc_read[3] * adc_ratio * adc_ref - ina_ref)
 800337e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		MotorX.i_a = (adc_read[0] * adc_ratio * adc_ref - ina_ref)
 8003382:	ee65 5a85 	vmul.f32	s11, s11, s10
		MotorX.i_b = (adc_read[1] * adc_ratio * adc_ref - ina_ref)
 8003386:	ee26 6a05 	vmul.f32	s12, s12, s10
		MotorY.i_b = (adc_read[3] * adc_ratio * adc_ref - ina_ref)
 800338a:	ee67 7a85 	vmul.f32	s15, s15, s10
		MotorY.i_a = (adc_read[2] * adc_ratio * adc_ref - ina_ref)
 800338e:	ee66 6a85 	vmul.f32	s13, s13, s10
		MotorY.i_b = (adc_read[3] * adc_ratio * adc_ref - ina_ref)
 8003392:	eeb0 5a62 	vmov.f32	s10, s5
 8003396:	ee93 5a27 	vfnms.f32	s10, s6, s15
	TIM5->PSC = 84;
 800339a:	2354      	movs	r3, #84	; 0x54
		MotorX.i_a = (adc_read[0] * adc_ratio * adc_ref - ina_ref)
 800339c:	eed3 3a25 	vfnms.f32	s7, s6, s11
		MotorX.i_b = (adc_read[1] * adc_ratio * adc_ref - ina_ref)
 80033a0:	ee93 4a06 	vfnms.f32	s8, s6, s12
		MotorY.i_a = (adc_read[2] * adc_ratio * adc_ref - ina_ref)
 80033a4:	eed3 4a26 	vfnms.f32	s9, s6, s13
				* sense_ratio;
 80033a8:	ee67 5a23 	vmul.f32	s11, s14, s7
				* sense_ratio;
 80033ac:	ee27 6a04 	vmul.f32	s12, s14, s8
				* sense_ratio;
 80033b0:	ee67 7a24 	vmul.f32	s15, s14, s9
				* sense_ratio;
 80033b4:	ee27 7a05 	vmul.f32	s14, s14, s10
		MotorX.i_a = (adc_read[0] * adc_ratio * adc_ref - ina_ref)
 80033b8:	edcd 5a27 	vstr	s11, [sp, #156]	; 0x9c
		MotorX.i_b = (adc_read[1] * adc_ratio * adc_ref - ina_ref)
 80033bc:	ed8d 6a28 	vstr	s12, [sp, #160]	; 0xa0
		MotorY.i_a = (adc_read[2] * adc_ratio * adc_ref - ina_ref)
 80033c0:	edcd 7a89 	vstr	s15, [sp, #548]	; 0x224
		MotorY.i_b = (adc_read[3] * adc_ratio * adc_ref - ina_ref)
 80033c4:	ed8d 7a8a 	vstr	s14, [sp, #552]	; 0x228
	TIM5->PSC = 84;
 80033c8:	f8ce 3028 	str.w	r3, [lr, #40]	; 0x28
	TIM5->ARR = 1000000 - 1;
 80033cc:	4b5c      	ldr	r3, [pc, #368]	; (8003540 <main+0x8b8>)
 80033ce:	f8ce 302c 	str.w	r3, [lr, #44]	; 0x2c
	HAL_TIM_Base_Start(&htim5);
 80033d2:	f002 fa9f 	bl	8005914 <HAL_TIM_Base_Start>
		us_t = __HAL_TIM_GET_COUNTER(&htim5);
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	4a5a      	ldr	r2, [pc, #360]	; (8003544 <main+0x8bc>)
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	6013      	str	r3, [r2, #0]
		t1 = HAL_GetTick();
 80033de:	f000 fd37 	bl	8003e50 <HAL_GetTick>
 80033e2:	4b59      	ldr	r3, [pc, #356]	; (8003548 <main+0x8c0>)
 80033e4:	6018      	str	r0, [r3, #0]
			while (adcConvComplete == 0) {
 80033e6:	783b      	ldrb	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0fc      	beq.n	80033e6 <main+0x75e>
			adcConvComplete = 0;
 80033ec:	9b01      	ldr	r3, [sp, #4]
 80033ee:	703b      	strb	r3, [r7, #0]
			ina_ref = adc_read[6] * adc_ratio * adc_ref;
 80033f0:	89b3      	ldrh	r3, [r6, #12]
 80033f2:	edd8 6a00 	vldr	s13, [r8]
 80033f6:	ed99 7a00 	vldr	s14, [r9]
					* sense_ratio;
 80033fa:	edda 5a00 	vldr	s11, [sl]
			foc_update(&MotorX, PID_Update(&MotorX.imu_reg, 0, Imu.roll*DEG_TO_RAD));
 80033fe:	eddd 0a16 	vldr	s1, [sp, #88]	; 0x58
			ina_ref = adc_read[6] * adc_ratio * adc_ref;
 8003402:	b29b      	uxth	r3, r3
 8003404:	ee07 3a90 	vmov	s15, r3
 8003408:	ee27 7a26 	vmul.f32	s14, s14, s13
 800340c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			foc_update(&MotorX, PID_Update(&MotorX.imu_reg, 0, Imu.roll*DEG_TO_RAD));
 8003410:	ee60 0a89 	vmul.f32	s1, s1, s18
			ina_ref = adc_read[6] * adc_ratio * adc_ref;
 8003414:	ee67 7a87 	vmul.f32	s15, s15, s14
			foc_update(&MotorX, PID_Update(&MotorX.imu_reg, 0, Imu.roll*DEG_TO_RAD));
 8003418:	a85f      	add	r0, sp, #380	; 0x17c
			ina_ref = adc_read[6] * adc_ratio * adc_ref;
 800341a:	edc5 7a00 	vstr	s15, [r5]
			MotorX.i_a = (adc_read[0] * adc_ratio * adc_ref - ina_ref)
 800341e:	8832      	ldrh	r2, [r6, #0]
 8003420:	edd5 7a00 	vldr	s15, [r5]
			MotorX.i_b = (adc_read[1] * adc_ratio * adc_ref - ina_ref)
 8003424:	8873      	ldrh	r3, [r6, #2]
 8003426:	ed95 5a00 	vldr	s10, [r5]
			MotorX.i_a = (adc_read[0] * adc_ratio * adc_ref - ina_ref)
 800342a:	b292      	uxth	r2, r2
 800342c:	ee06 2a90 	vmov	s13, r2
			MotorX.i_b = (adc_read[1] * adc_ratio * adc_ref - ina_ref)
 8003430:	b29b      	uxth	r3, r3
			MotorX.i_a = (adc_read[0] * adc_ratio * adc_ref - ina_ref)
 8003432:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
			MotorX.i_b = (adc_read[1] * adc_ratio * adc_ref - ina_ref)
 8003436:	ee06 3a90 	vmov	s13, r3
 800343a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
			MotorX.i_a = (adc_read[0] * adc_ratio * adc_ref - ina_ref)
 800343e:	eed6 7a07 	vfnms.f32	s15, s12, s14
			MotorX.i_b = (adc_read[1] * adc_ratio * adc_ref - ina_ref)
 8003442:	ee96 5a87 	vfnms.f32	s10, s13, s14
					* sense_ratio;
 8003446:	ee67 7aa5 	vmul.f32	s15, s15, s11
					* sense_ratio;
 800344a:	ee65 5a85 	vmul.f32	s11, s11, s10
			foc_update(&MotorX, PID_Update(&MotorX.imu_reg, 0, Imu.roll*DEG_TO_RAD));
 800344e:	eeb0 0a68 	vmov.f32	s0, s17
			MotorX.i_a = (adc_read[0] * adc_ratio * adc_ref - ina_ref)
 8003452:	edcd 7a27 	vstr	s15, [sp, #156]	; 0x9c
			MotorX.i_b = (adc_read[1] * adc_ratio * adc_ref - ina_ref)
 8003456:	edcd 5a28 	vstr	s11, [sp, #160]	; 0xa0
			foc_update(&MotorX, PID_Update(&MotorX.imu_reg, 0, Imu.roll*DEG_TO_RAD));
 800345a:	f000 f985 	bl	8003768 <PID_Update>
 800345e:	a826      	add	r0, sp, #152	; 0x98
 8003460:	f7ff f8a6 	bl	80025b0 <foc_update>
			MotorY.i_a = (adc_read[2] * adc_ratio * adc_ref - ina_ref)
 8003464:	88b2      	ldrh	r2, [r6, #4]
 8003466:	edd5 7a00 	vldr	s15, [r5]
			MotorY.i_b = (adc_read[3] * adc_ratio * adc_ref - ina_ref)
 800346a:	88f3      	ldrh	r3, [r6, #6]
 800346c:	ed98 7a00 	vldr	s14, [r8]
 8003470:	edd9 5a00 	vldr	s11, [r9]
 8003474:	ed95 5a00 	vldr	s10, [r5]
					* sense_ratio;
 8003478:	ed9a 6a00 	vldr	s12, [sl]
			foc_update(&MotorY, PID_Update(&MotorY.imu_reg, 0, Imu.pitch*DEG_TO_RAD));
 800347c:	eddd 0a17 	vldr	s1, [sp, #92]	; 0x5c
			MotorY.i_a = (adc_read[2] * adc_ratio * adc_ref - ina_ref)
 8003480:	b292      	uxth	r2, r2
			MotorY.i_b = (adc_read[3] * adc_ratio * adc_ref - ina_ref)
 8003482:	b29b      	uxth	r3, r3
 8003484:	ee65 5a87 	vmul.f32	s11, s11, s14
			MotorY.i_a = (adc_read[2] * adc_ratio * adc_ref - ina_ref)
 8003488:	ee06 2a90 	vmov	s13, r2
			MotorY.i_b = (adc_read[3] * adc_ratio * adc_ref - ina_ref)
 800348c:	ee07 3a10 	vmov	s14, r3
			MotorY.i_a = (adc_read[2] * adc_ratio * adc_ref - ina_ref)
 8003490:	eef8 6ae6 	vcvt.f32.s32	s13, s13
			MotorY.i_b = (adc_read[3] * adc_ratio * adc_ref - ina_ref)
 8003494:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			MotorY.i_a = (adc_read[2] * adc_ratio * adc_ref - ina_ref)
 8003498:	eed6 7aa5 	vfnms.f32	s15, s13, s11
			foc_update(&MotorY, PID_Update(&MotorY.imu_reg, 0, Imu.pitch*DEG_TO_RAD));
 800349c:	a8c1      	add	r0, sp, #772	; 0x304
			MotorY.i_b = (adc_read[3] * adc_ratio * adc_ref - ina_ref)
 800349e:	ee97 5a25 	vfnms.f32	s10, s14, s11
					* sense_ratio;
 80034a2:	ee67 7a86 	vmul.f32	s15, s15, s12
					* sense_ratio;
 80034a6:	ee26 6a05 	vmul.f32	s12, s12, s10
			foc_update(&MotorY, PID_Update(&MotorY.imu_reg, 0, Imu.pitch*DEG_TO_RAD));
 80034aa:	ee60 0a89 	vmul.f32	s1, s1, s18
 80034ae:	eeb0 0a68 	vmov.f32	s0, s17
			MotorY.i_a = (adc_read[2] * adc_ratio * adc_ref - ina_ref)
 80034b2:	edcd 7a89 	vstr	s15, [sp, #548]	; 0x224
			MotorY.i_b = (adc_read[3] * adc_ratio * adc_ref - ina_ref)
 80034b6:	ed8d 6a8a 	vstr	s12, [sp, #552]	; 0x228
			foc_update(&MotorY, PID_Update(&MotorY.imu_reg, 0, Imu.pitch*DEG_TO_RAD));
 80034ba:	f000 f955 	bl	8003768 <PID_Update>
 80034be:	a888      	add	r0, sp, #544	; 0x220
 80034c0:	f7ff f876 	bl	80025b0 <foc_update>
		if(USE_AS5048A && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80034c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034c8:	4658      	mov	r0, fp
 80034ca:	f001 fa47 	bl	800495c <HAL_GPIO_ReadPin>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d146      	bne.n	8003560 <main+0x8d8>
			as5048a_setZeroArg(&MotorX, Imu.roll);
 80034d2:	ed9d 0a16 	vldr	s0, [sp, #88]	; 0x58
 80034d6:	a826      	add	r0, sp, #152	; 0x98
 80034d8:	f7fd fe76 	bl	80011c8 <as5048a_setZeroArg>
			as5048a_setZeroArg(&MotorY, Imu.pitch);
 80034dc:	ed9d 0a17 	vldr	s0, [sp, #92]	; 0x5c
 80034e0:	a888      	add	r0, sp, #544	; 0x220
 80034e2:	f7fd fe71 	bl	80011c8 <as5048a_setZeroArg>
			Imu.roll_zero = Imu.roll;
 80034e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
			Imu.pitch_zero = Imu.pitch;
 80034e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
			Imu.roll_zero = Imu.roll;
 80034ea:	9219      	str	r2, [sp, #100]	; 0x64
			Imu.pitch_zero = Imu.pitch;
 80034ec:	931a      	str	r3, [sp, #104]	; 0x68
 80034ee:	e037      	b.n	8003560 <main+0x8d8>
 80034f0:	0800b26c 	.word	0x0800b26c
 80034f4:	2000225c 	.word	0x2000225c
 80034f8:	2000221a 	.word	0x2000221a
 80034fc:	200064a4 	.word	0x200064a4
 8003500:	e000edf0 	.word	0xe000edf0
 8003504:	e0001000 	.word	0xe0001000
 8003508:	40000010 	.word	0x40000010
 800350c:	80000020 	.word	0x80000020
 8003510:	00000000 	.word	0x00000000
 8003514:	3a83126f 	.word	0x3a83126f
 8003518:	200063b4 	.word	0x200063b4
 800351c:	20006458 	.word	0x20006458
 8003520:	200062f0 	.word	0x200062f0
 8003524:	20006300 	.word	0x20006300
 8003528:	20002004 	.word	0x20002004
 800352c:	20002018 	.word	0x20002018
 8003530:	2000200c 	.word	0x2000200c
 8003534:	2000221c 	.word	0x2000221c
 8003538:	20006260 	.word	0x20006260
 800353c:	3c8efa35 	.word	0x3c8efa35
 8003540:	000f423f 	.word	0x000f423f
 8003544:	20002230 	.word	0x20002230
 8003548:	200063b0 	.word	0x200063b0
 800354c:	20006454 	.word	0x20006454
 8003550:	200063ac 	.word	0x200063ac
 8003554:	20002008 	.word	0x20002008
 8003558:	40000c00 	.word	0x40000c00
 800355c:	40020800 	.word	0x40020800
			Imu.gyr_x = (int16_t) bmi270_read_gyro(AXIS_X) * Imu.inv_gyr_range;
 8003560:	2000      	movs	r0, #0
 8003562:	f7fe f981 	bl	8001868 <bmi270_read_gyro>
 8003566:	b200      	sxth	r0, r0
 8003568:	ee07 0a90 	vmov	s15, r0
 800356c:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 8003570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			Imu.gyr_y = (int16_t) bmi270_read_gyro(AXIS_Y) * Imu.inv_gyr_range;
 8003574:	2001      	movs	r0, #1
			Imu.gyr_x = (int16_t) bmi270_read_gyro(AXIS_X) * Imu.inv_gyr_range;
 8003576:	ee67 7a87 	vmul.f32	s15, s15, s14
 800357a:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
			Imu.gyr_y = (int16_t) bmi270_read_gyro(AXIS_Y) * Imu.inv_gyr_range;
 800357e:	f7fe f973 	bl	8001868 <bmi270_read_gyro>
 8003582:	b200      	sxth	r0, r0
 8003584:	ee07 0a90 	vmov	s15, r0
 8003588:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 800358c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			Imu.gyr_z = (int16_t) bmi270_read_gyro(AXIS_Z) * Imu.inv_gyr_range;
 8003590:	2002      	movs	r0, #2
			Imu.gyr_y = (int16_t) bmi270_read_gyro(AXIS_Y) * Imu.inv_gyr_range;
 8003592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003596:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
			Imu.gyr_z = (int16_t) bmi270_read_gyro(AXIS_Z) * Imu.inv_gyr_range;
 800359a:	f7fe f965 	bl	8001868 <bmi270_read_gyro>
 800359e:	b200      	sxth	r0, r0
 80035a0:	ee07 0a90 	vmov	s15, r0
 80035a4:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 80035a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80035ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
			Imu.gyr_z = (int16_t) bmi270_read_gyro(AXIS_Z) * Imu.inv_gyr_range;
 80035b0:	ee67 7a87 	vmul.f32	s15, s15, s14
			if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80035b4:	4658      	mov	r0, fp
			Imu.gyr_z = (int16_t) bmi270_read_gyro(AXIS_Z) * Imu.inv_gyr_range;
 80035b6:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
			if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80035ba:	f001 f9cf 	bl	800495c <HAL_GPIO_ReadPin>
 80035be:	b960      	cbnz	r0, 80035da <main+0x952>
				q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
 80035c0:	4a51      	ldr	r2, [pc, #324]	; (8003708 <main+0xa80>)
 80035c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	4b50      	ldr	r3, [pc, #320]	; (800370c <main+0xa84>)
 80035ca:	edc3 8a00 	vstr	s17, [r3]
 80035ce:	4b50      	ldr	r3, [pc, #320]	; (8003710 <main+0xa88>)
 80035d0:	edc3 8a00 	vstr	s17, [r3]
 80035d4:	4b4f      	ldr	r3, [pc, #316]	; (8003714 <main+0xa8c>)
 80035d6:	edc3 8a00 	vstr	s17, [r3]
			bmi270_calibrateNoise(&Imu);
 80035da:	a80c      	add	r0, sp, #48	; 0x30
 80035dc:	f7fe fcbe 	bl	8001f5c <bmi270_calibrateNoise>
			Imu.acc_x = (int16_t) bmi270_read_accel(AXIS_X) * Imu.inv_acc_range;
 80035e0:	2000      	movs	r0, #0
 80035e2:	f7fe f9ab 	bl	800193c <bmi270_read_accel>
 80035e6:	b200      	sxth	r0, r0
 80035e8:	ee07 0a90 	vmov	s15, r0
 80035ec:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 80035f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			Imu.acc_y = (int16_t) bmi270_read_accel(AXIS_Y) * Imu.inv_acc_range;
 80035f4:	2001      	movs	r0, #1
			Imu.acc_x = (int16_t) bmi270_read_accel(AXIS_X) * Imu.inv_acc_range;
 80035f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035fa:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
			Imu.acc_y = (int16_t) bmi270_read_accel(AXIS_Y) * Imu.inv_acc_range;
 80035fe:	f7fe f99d 	bl	800193c <bmi270_read_accel>
 8003602:	b200      	sxth	r0, r0
 8003604:	ee07 0a90 	vmov	s15, r0
 8003608:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 800360c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			Imu.acc_z = (int16_t) bmi270_read_accel(AXIS_Z) * Imu.inv_acc_range;
 8003610:	2002      	movs	r0, #2
			Imu.acc_y = (int16_t) bmi270_read_accel(AXIS_Y) * Imu.inv_acc_range;
 8003612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003616:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
			Imu.acc_z = (int16_t) bmi270_read_accel(AXIS_Z) * Imu.inv_acc_range;
 800361a:	f7fe f98f 	bl	800193c <bmi270_read_accel>
 800361e:	b200      	sxth	r0, r0
 8003620:	ee07 0a90 	vmov	s15, r0
 8003624:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003628:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
					loop_time * 1e-3);
 800362c:	4b3a      	ldr	r3, [pc, #232]	; (8003718 <main+0xa90>)
			Imu.acc_z = (int16_t) bmi270_read_accel(AXIS_Z) * Imu.inv_acc_range;
 800362e:	ee28 8a27 	vmul.f32	s16, s16, s15
					loop_time * 1e-3);
 8003632:	6818      	ldr	r0, [r3, #0]
			Imu.acc_z = (int16_t) bmi270_read_accel(AXIS_Z) * Imu.inv_acc_range;
 8003634:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
					loop_time * 1e-3);
 8003638:	f7fc ff8e 	bl	8000558 <__aeabi_f2d>
 800363c:	a330      	add	r3, pc, #192	; (adr r3, 8003700 <main+0xa78>)
 800363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003642:	f7fc ffe1 	bl	8000608 <__aeabi_dmul>
			filterUpdate(Imu.gyr_x * DEG_TO_RAD, Imu.gyr_y * DEG_TO_RAD,
 8003646:	f7fd fab7 	bl	8000bb8 <__aeabi_d2f>
 800364a:	ed9d 1a12 	vldr	s2, [sp, #72]	; 0x48
 800364e:	eddd 0a11 	vldr	s1, [sp, #68]	; 0x44
 8003652:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
 8003656:	ed9d 2a14 	vldr	s4, [sp, #80]	; 0x50
 800365a:	eddd 1a13 	vldr	s3, [sp, #76]	; 0x4c
 800365e:	ee03 0a10 	vmov	s6, r0
 8003662:	eef0 2a48 	vmov.f32	s5, s16
 8003666:	ee21 1a09 	vmul.f32	s2, s2, s18
 800366a:	ee60 0a89 	vmul.f32	s1, s1, s18
 800366e:	ee20 0a09 	vmul.f32	s0, s0, s18
 8003672:	f7ff f891 	bl	8002798 <filterUpdate>
			Euler = ToEulerAngles(q0, q1, q2, q3);
 8003676:	4a24      	ldr	r2, [pc, #144]	; (8003708 <main+0xa80>)
 8003678:	ed92 0a00 	vldr	s0, [r2]
 800367c:	4a23      	ldr	r2, [pc, #140]	; (800370c <main+0xa84>)
 800367e:	edd2 0a00 	vldr	s1, [r2]
 8003682:	4a23      	ldr	r2, [pc, #140]	; (8003710 <main+0xa88>)
 8003684:	ed92 1a00 	vldr	s2, [r2]
 8003688:	4a22      	ldr	r2, [pc, #136]	; (8003714 <main+0xa8c>)
 800368a:	edd2 1a00 	vldr	s3, [r2]
 800368e:	f7ff fa21 	bl	8002ad4 <ToEulerAngles>
		loop_cnt++;
 8003692:	4822      	ldr	r0, [pc, #136]	; (800371c <main+0xa94>)
		loop_cnt %= print_flag;
 8003694:	4a22      	ldr	r2, [pc, #136]	; (8003720 <main+0xa98>)
			Imu.roll = Euler.x * RAD_TO_DEG;
 8003696:	eddf 7a23 	vldr	s15, [pc, #140]	; 8003724 <main+0xa9c>
		loop_cnt++;
 800369a:	6803      	ldr	r3, [r0, #0]
		loop_cnt %= print_flag;
 800369c:	6811      	ldr	r1, [r2, #0]
			Euler = ToEulerAngles(q0, q1, q2, q3);
 800369e:	edcd 0a09 	vstr	s1, [sp, #36]	; 0x24
			Imu.yaw = Euler.z * RAD_TO_DEG;
 80036a2:	ee21 7a27 	vmul.f32	s14, s2, s15
			Imu.pitch = Euler.y * RAD_TO_DEG;
 80036a6:	ee60 0aa7 	vmul.f32	s1, s1, s15
		loop_cnt++;
 80036aa:	3301      	adds	r3, #1
			Imu.roll = Euler.x * RAD_TO_DEG;
 80036ac:	ee60 7a27 	vmul.f32	s15, s0, s15
		loop_cnt %= print_flag;
 80036b0:	fbb3 f2f1 	udiv	r2, r3, r1
 80036b4:	fb01 3312 	mls	r3, r1, r2, r3
 80036b8:	6003      	str	r3, [r0, #0]
			Imu.roll = Euler.x * RAD_TO_DEG;
 80036ba:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
			Imu.pitch = Euler.y * RAD_TO_DEG;
 80036be:	edcd 0a17 	vstr	s1, [sp, #92]	; 0x5c
			Euler = ToEulerAngles(q0, q1, q2, q3);
 80036c2:	ed8d 1a0a 	vstr	s2, [sp, #40]	; 0x28
			Imu.yaw = Euler.z * RAD_TO_DEG;
 80036c6:	ed8d 7a18 	vstr	s14, [sp, #96]	; 0x60
			Euler = ToEulerAngles(q0, q1, q2, q3);
 80036ca:	ed8d 0a08 	vstr	s0, [sp, #32]
		t2 = HAL_GetTick() - t1;
 80036ce:	f000 fbbf 	bl	8003e50 <HAL_GetTick>
 80036d2:	4a15      	ldr	r2, [pc, #84]	; (8003728 <main+0xaa0>)
		us_t_prev = __HAL_TIM_GET_COUNTER(&htim5) - us_t;
 80036d4:	6823      	ldr	r3, [r4, #0]
		t2 = HAL_GetTick() - t1;
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	1a80      	subs	r0, r0, r2
 80036da:	4a14      	ldr	r2, [pc, #80]	; (800372c <main+0xaa4>)
 80036dc:	6010      	str	r0, [r2, #0]
		loop_time = t2;
 80036de:	edd2 7a00 	vldr	s15, [r2]
		us_t_prev = __HAL_TIM_GET_COUNTER(&htim5) - us_t;
 80036e2:	4a13      	ldr	r2, [pc, #76]	; (8003730 <main+0xaa8>)
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	4a12      	ldr	r2, [pc, #72]	; (8003734 <main+0xaac>)
		loop_time = t2;
 80036ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
		us_t_prev = __HAL_TIM_GET_COUNTER(&htim5) - us_t;
 80036f0:	6013      	str	r3, [r2, #0]
		loop_time = t2;
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <main+0xa90>)
 80036f4:	edc3 7a00 	vstr	s15, [r3]
		us_t = __HAL_TIM_GET_COUNTER(&htim5);
 80036f8:	e66d      	b.n	80033d6 <main+0x74e>
 80036fa:	bf00      	nop
 80036fc:	f3af 8000 	nop.w
 8003700:	d2f1a9fc 	.word	0xd2f1a9fc
 8003704:	3f50624d 	.word	0x3f50624d
 8003708:	20002014 	.word	0x20002014
 800370c:	20002224 	.word	0x20002224
 8003710:	20002228 	.word	0x20002228
 8003714:	2000222c 	.word	0x2000222c
 8003718:	2000224c 	.word	0x2000224c
 800371c:	20002220 	.word	0x20002220
 8003720:	20002010 	.word	0x20002010
 8003724:	42652ee1 	.word	0x42652ee1
 8003728:	200063b0 	.word	0x200063b0
 800372c:	2000625c 	.word	0x2000625c
 8003730:	20002230 	.word	0x20002230
 8003734:	20002234 	.word	0x20002234

08003738 <HAL_ADC_ConvCpltCallback>:
	adcConvComplete = 1;
 8003738:	4b01      	ldr	r3, [pc, #4]	; (8003740 <HAL_ADC_ConvCpltCallback+0x8>)
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
}
 800373e:	4770      	bx	lr
 8003740:	2000221a 	.word	0x2000221a

08003744 <Error_Handler>:
 8003744:	b672      	cpsid	i
	while (1) {
 8003746:	e7fe      	b.n	8003746 <Error_Handler+0x2>

08003748 <PID_Init>:
 *      Author: maxborglowe
 */

#include "pid.h"

void PID_Init(struct PID *pid) {
 8003748:	b510      	push	{r4, lr}
	pid->integrator = 0.0f;
 800374a:	2300      	movs	r3, #0
 800374c:	61c3      	str	r3, [r0, #28]
	pid->prevErr = 0.0f;
 800374e:	6203      	str	r3, [r0, #32]
	pid->differentiator = 0.0f;
 8003750:	6243      	str	r3, [r0, #36]	; 0x24
	pid->prevMeas = 0.0f;
 8003752:	6283      	str	r3, [r0, #40]	; 0x28
	pid->out = 0.0f;
 8003754:	62c3      	str	r3, [r0, #44]	; 0x2c
	pid->Kp = 0.0f;
 8003756:	6003      	str	r3, [r0, #0]
	pid->Ki = 0.0f;
 8003758:	6043      	str	r3, [r0, #4]
	pid->Kd = 0.0f;
 800375a:	6083      	str	r3, [r0, #8]
void PID_Init(struct PID *pid) {
 800375c:	4604      	mov	r4, r0

	pid->timestamp_prev = get_us();
 800375e:	f000 fafb 	bl	8003d58 <get_us>
 8003762:	6160      	str	r0, [r4, #20]
}
 8003764:	bd10      	pop	{r4, pc}
 8003766:	bf00      	nop

08003768 <PID_Update>:
/**
 * @brief Update the pid output based on error
 * @param The value to be achieved
 * @param Measured value
 */
float PID_Update(struct PID *pid, float setpoint, float meas) {
 8003768:	b510      	push	{r4, lr}
 800376a:	4604      	mov	r4, r0
 800376c:	ed2d 8b02 	vpush	{d8}
 8003770:	eeb0 8a40 	vmov.f32	s16, s0
 8003774:	eef0 8a60 	vmov.f32	s17, s1

	uint32_t timestamp_now = get_us();
 8003778:	f000 faee 	bl	8003d58 <get_us>
	float Ts = (timestamp_now - pid->timestamp_prev) * 1e-6f;
 800377c:	6963      	ldr	r3, [r4, #20]
 800377e:	eddf 6a40 	vldr	s13, [pc, #256]	; 8003880 <PID_Update+0x118>
 8003782:	1ac3      	subs	r3, r0, r3
 8003784:	ee07 3a90 	vmov	s15, r3
 8003788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378c:	ee67 6aa6 	vmul.f32	s13, s15, s13
	/* fix micros overflow */
	if(Ts <= 0.0f || Ts > 0.5f) Ts = 1e-3f;
 8003790:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	d96e      	bls.n	8003878 <PID_Update+0x110>
 800379a:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8003884 <PID_Update+0x11c>
 800379e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003888 <PID_Update+0x120>
 80037a2:	eef4 7a46 	vcmp.f32	s15, s12
 80037a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037aa:	bfc8      	it	gt
 80037ac:	eef0 6a47 	vmovgt.f32	s13, s14

	/* Error output from leftmost summer*/
	float err = setpoint - meas;
 80037b0:	ee38 7a68 	vsub.f32	s14, s16, s17

	/* Proportional */
	float prop = pid->Kp * err;

	/* Integrator */
	pid->integrator = pid->integrator + 0.5f * pid->Ki * Ts * (err + pid->prevErr);
 80037b4:	ed94 6a08 	vldr	s12, [r4, #32]
 80037b8:	edd4 5a01 	vldr	s11, [r4, #4]
	float prop = pid->Kp * err;
 80037bc:	edd4 7a00 	vldr	s15, [r4]
	pid->integrator = pid->integrator + 0.5f * pid->Ki * Ts * (err + pid->prevErr);
 80037c0:	ed94 5a07 	vldr	s10, [r4, #28]

	/* Anti-windup scheme */
	float lim_min_int, lim_max_int;
	if (pid->lim_max > prop) {
 80037c4:	edd4 4a04 	vldr	s9, [r4, #16]
		lim_max_int = pid->lim_max - prop;
	} else {
		lim_max_int = 0.0f;
	}

	if (pid->lim_min < prop) {
 80037c8:	ed94 0a03 	vldr	s0, [r4, #12]
	pid->integrator = pid->integrator + 0.5f * pid->Ki * Ts * (err + pid->prevErr);
 80037cc:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80037d0:	ee36 4a07 	vadd.f32	s8, s12, s14
 80037d4:	ee65 5aa3 	vmul.f32	s11, s11, s7
	float prop = pid->Kp * err;
 80037d8:	ee67 7a27 	vmul.f32	s15, s14, s15
	pid->integrator = pid->integrator + 0.5f * pid->Ki * Ts * (err + pid->prevErr);
 80037dc:	ee65 5a84 	vmul.f32	s11, s11, s8
	if (pid->lim_max > prop) {
 80037e0:	eef4 4ae7 	vcmpe.f32	s9, s15
	pid->integrator = pid->integrator + 0.5f * pid->Ki * Ts * (err + pid->prevErr);
 80037e4:	eea6 5aa5 	vfma.f32	s10, s13, s11
	if (pid->lim_max > prop) {
 80037e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (pid->lim_min < prop) {
 80037ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
		lim_max_int = pid->lim_max - prop;
 80037f0:	bfcc      	ite	gt
 80037f2:	ee34 4ae7 	vsubgt.f32	s8, s9, s15
		lim_max_int = 0.0f;
 80037f6:	ed9f 4a25 	vldrle	s8, [pc, #148]	; 800388c <PID_Update+0x124>
	if (pid->lim_min < prop) {
 80037fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	pid->integrator = pid->integrator + 0.5f * pid->Ki * Ts * (err + pid->prevErr);
 80037fe:	eef0 5a45 	vmov.f32	s11, s10
		lim_min_int = pid->lim_min - prop;
 8003802:	bf4c      	ite	mi
 8003804:	ee30 5a67 	vsubmi.f32	s10, s0, s15
	} else {
		lim_min_int = 0.0f;
 8003808:	ed9f 5a20 	vldrpl	s10, [pc, #128]	; 800388c <PID_Update+0x124>
	}

	/* Clamp integrator -> prevents integrator from growing out of proportions */
	pid->integrator = _constrain(pid->integrator, lim_min_int, lim_max_int);
 800380c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8003810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003814:	db08      	blt.n	8003828 <PID_Update+0xc0>
 8003816:	eef4 5ac4 	vcmpe.f32	s11, s8
 800381a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381e:	bf8c      	ite	hi
 8003820:	eeb0 5a44 	vmovhi.f32	s10, s8
 8003824:	eeb0 5a65 	vmovls.f32	s10, s11
//	} else if (pid->integrator < lim_min_int) {
//		pid->integrator = lim_min_int;
//	}

	/* Derivative: might not be necessary for FOC */
	pid->differentiator = pid->Kd * (err - pid->prevErr)/Ts;
 8003828:	edd4 5a02 	vldr	s11, [r4, #8]
	pid->integrator = _constrain(pid->integrator, lim_min_int, lim_max_int);
 800382c:	ed84 5a07 	vstr	s10, [r4, #28]
	pid->differentiator = pid->Kd * (err - pid->prevErr)/Ts;
 8003830:	ee37 6a46 	vsub.f32	s12, s14, s12
 8003834:	ee26 6a25 	vmul.f32	s12, s12, s11
 8003838:	eec6 5a26 	vdiv.f32	s11, s12, s13

	/* Output */
	pid->out = prop + pid->integrator + pid->differentiator;
 800383c:	ee75 7aa7 	vadd.f32	s15, s11, s15
	pid->differentiator = pid->Kd * (err - pid->prevErr)/Ts;
 8003840:	edc4 5a09 	vstr	s11, [r4, #36]	; 0x24
	pid->out = prop + pid->integrator + pid->differentiator;
 8003844:	ee77 7a85 	vadd.f32	s15, s15, s10

	/* Limiter */
	pid->out = _constrain(pid->out, pid->lim_min, pid->lim_max);
 8003848:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800384c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003850:	dc08      	bgt.n	8003864 <PID_Update+0xfc>
 8003852:	eef4 4ae7 	vcmpe.f32	s9, s15
 8003856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385a:	bf8c      	ite	hi
 800385c:	eeb0 0a67 	vmovhi.f32	s0, s15
 8003860:	eeb0 0a64 	vmovls.f32	s0, s9
//		pid->out = pid->lim_min;
//	}

	/* Store error and measurement in PID struct*/
	pid->prevErr = err;
	pid->prevMeas = meas;
 8003864:	edc4 8a0a 	vstr	s17, [r4, #40]	; 0x28
	pid->timestamp_prev = timestamp_now;

	return pid->out;
}
 8003868:	ecbd 8b02 	vpop	{d8}
	pid->out = _constrain(pid->out, pid->lim_min, pid->lim_max);
 800386c:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
	pid->prevErr = err;
 8003870:	ed84 7a08 	vstr	s14, [r4, #32]
	pid->timestamp_prev = timestamp_now;
 8003874:	6160      	str	r0, [r4, #20]
}
 8003876:	bd10      	pop	{r4, pc}
	if(Ts <= 0.0f || Ts > 0.5f) Ts = 1e-3f;
 8003878:	eddf 6a03 	vldr	s13, [pc, #12]	; 8003888 <PID_Update+0x120>
 800387c:	e798      	b.n	80037b0 <PID_Update+0x48>
 800387e:	bf00      	nop
 8003880:	358637bd 	.word	0x358637bd
 8003884:	48f42400 	.word	0x48f42400
 8003888:	3a83126f 	.word	0x3a83126f
 800388c:	00000000 	.word	0x00000000

08003890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003890:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <HAL_MspInit+0x38>)
 8003894:	2100      	movs	r1, #0
 8003896:	9100      	str	r1, [sp, #0]
 8003898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800389a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800389e:	645a      	str	r2, [r3, #68]	; 0x44
 80038a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038a2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80038a6:	9200      	str	r2, [sp, #0]
 80038a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038aa:	9101      	str	r1, [sp, #4]
 80038ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038b2:	641a      	str	r2, [r3, #64]	; 0x40
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80038be:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038c0:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80038c2:	f000 bd23 	b.w	800430c <HAL_NVIC_SetPriorityGrouping>
 80038c6:	bf00      	nop
 80038c8:	40023800 	.word	0x40023800

080038cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038cc:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80038ce:	6802      	ldr	r2, [r0, #0]
 80038d0:	4b38      	ldr	r3, [pc, #224]	; (80039b4 <HAL_ADC_MspInit+0xe8>)
{
 80038d2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d4:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80038d6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80038dc:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80038e0:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 80038e2:	d001      	beq.n	80038e8 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80038e4:	b00a      	add	sp, #40	; 0x28
 80038e6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038e8:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80038ec:	9400      	str	r4, [sp, #0]
 80038ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 80038f0:	4e31      	ldr	r6, [pc, #196]	; (80039b8 <HAL_ADC_MspInit+0xec>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038f6:	645a      	str	r2, [r3, #68]	; 0x44
 80038f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038fa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80038fe:	9200      	str	r2, [sp, #0]
 8003900:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003902:	9401      	str	r4, [sp, #4]
 8003904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003906:	f042 0204 	orr.w	r2, r2, #4
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
 800390c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800390e:	f002 0204 	and.w	r2, r2, #4
 8003912:	9201      	str	r2, [sp, #4]
 8003914:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003916:	9402      	str	r4, [sp, #8]
 8003918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
 8003920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003922:	f002 0201 	and.w	r2, r2, #1
 8003926:	9202      	str	r2, [sp, #8]
 8003928:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800392a:	9403      	str	r4, [sp, #12]
 800392c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800392e:	f042 0202 	orr.w	r2, r2, #2
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003936:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = MotorY_i_b_Pin|MotorZ_i_a_Pin|MotorZ_i_b_Pin|current_sense_REF_Pin;
 800393e:	220f      	movs	r2, #15
 8003940:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003942:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003944:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003946:	a904      	add	r1, sp, #16
 8003948:	481c      	ldr	r0, [pc, #112]	; (80039bc <HAL_ADC_MspInit+0xf0>)
    GPIO_InitStruct.Pin = MotorY_i_b_Pin|MotorZ_i_a_Pin|MotorZ_i_b_Pin|current_sense_REF_Pin;
 800394a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800394e:	f000 ff19 	bl	8004784 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MotorX_i_a_Pin|MotorX_i_b_Pin;
 8003952:	2211      	movs	r2, #17
 8003954:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003956:	481a      	ldr	r0, [pc, #104]	; (80039c0 <HAL_ADC_MspInit+0xf4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003958:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = MotorX_i_a_Pin|MotorX_i_b_Pin;
 800395c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003960:	f000 ff10 	bl	8004784 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MotorY_i_a_Pin;
 8003964:	2202      	movs	r2, #2
 8003966:	2303      	movs	r3, #3
    HAL_GPIO_Init(MotorY_i_a_GPIO_Port, &GPIO_InitStruct);
 8003968:	4816      	ldr	r0, [pc, #88]	; (80039c4 <HAL_ADC_MspInit+0xf8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(MotorY_i_a_GPIO_Port, &GPIO_InitStruct);
 800396c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = MotorY_i_a_Pin;
 800396e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MotorY_i_a_GPIO_Port, &GPIO_InitStruct);
 8003972:	f000 ff07 	bl	8004784 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8003976:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <HAL_ADC_MspInit+0xfc>)
 8003978:	6033      	str	r3, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800397a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800397e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003986:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800398a:	6130      	str	r0, [r6, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800398c:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800398e:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003992:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003996:	e9c6 1205 	strd	r1, r2, [r6, #20]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800399a:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800399c:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800399e:	f000 fd29 	bl	80043f4 <HAL_DMA_Init>
 80039a2:	b918      	cbnz	r0, 80039ac <HAL_ADC_MspInit+0xe0>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80039a4:	63ae      	str	r6, [r5, #56]	; 0x38
 80039a6:	63b5      	str	r5, [r6, #56]	; 0x38
}
 80039a8:	b00a      	add	sp, #40	; 0x28
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80039ac:	f7ff feca 	bl	8003744 <Error_Handler>
 80039b0:	e7f8      	b.n	80039a4 <HAL_ADC_MspInit+0xd8>
 80039b2:	bf00      	nop
 80039b4:	40012000 	.word	0x40012000
 80039b8:	2000634c 	.word	0x2000634c
 80039bc:	40020800 	.word	0x40020800
 80039c0:	40020000 	.word	0x40020000
 80039c4:	40020400 	.word	0x40020400
 80039c8:	40026410 	.word	0x40026410

080039cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80039cc:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 80039ce:	6801      	ldr	r1, [r0, #0]
 80039d0:	4a18      	ldr	r2, [pc, #96]	; (8003a34 <HAL_SPI_MspInit+0x68>)
{
 80039d2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d4:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 80039d6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80039dc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80039e0:	9306      	str	r3, [sp, #24]
  if(hspi->Instance==SPI1)
 80039e2:	d001      	beq.n	80039e8 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80039e4:	b009      	add	sp, #36	; 0x24
 80039e6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039e8:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f0:	4811      	ldr	r0, [pc, #68]	; (8003a38 <HAL_SPI_MspInit+0x6c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039f2:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80039f6:	6451      	str	r1, [r2, #68]	; 0x44
 80039f8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80039fa:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 80039fe:	9100      	str	r1, [sp, #0]
 8003a00:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a02:	9301      	str	r3, [sp, #4]
 8003a04:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a14:	2305      	movs	r3, #5
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a16:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a18:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a1e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003a20:	24e0      	movs	r4, #224	; 0xe0
 8003a22:	2502      	movs	r5, #2
 8003a24:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003a28:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2c:	f000 feaa 	bl	8004784 <HAL_GPIO_Init>
}
 8003a30:	b009      	add	sp, #36	; 0x24
 8003a32:	bd30      	pop	{r4, r5, pc}
 8003a34:	40013000 	.word	0x40013000
 8003a38:	40020000 	.word	0x40020000

08003a3c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8003a3c:	4a1b      	ldr	r2, [pc, #108]	; (8003aac <HAL_TIM_Base_MspInit+0x70>)
 8003a3e:	6803      	ldr	r3, [r0, #0]
 8003a40:	4293      	cmp	r3, r2
{
 8003a42:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 8003a44:	d016      	beq.n	8003a74 <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8003a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4a:	d004      	beq.n	8003a56 <HAL_TIM_Base_MspInit+0x1a>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003a4c:	4a18      	ldr	r2, [pc, #96]	; (8003ab0 <HAL_TIM_Base_MspInit+0x74>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01e      	beq.n	8003a90 <HAL_TIM_Base_MspInit+0x54>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a52:	b004      	add	sp, #16
 8003a54:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a56:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	9202      	str	r2, [sp, #8]
 8003a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	9302      	str	r3, [sp, #8]
 8003a6e:	9b02      	ldr	r3, [sp, #8]
}
 8003a70:	b004      	add	sp, #16
 8003a72:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a74:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <HAL_TIM_Base_MspInit+0x78>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	9201      	str	r2, [sp, #4]
 8003a7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a7c:	f042 0201 	orr.w	r2, r2, #1
 8003a80:	645a      	str	r2, [r3, #68]	; 0x44
 8003a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	9301      	str	r3, [sp, #4]
 8003a8a:	9b01      	ldr	r3, [sp, #4]
}
 8003a8c:	b004      	add	sp, #16
 8003a8e:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a90:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <HAL_TIM_Base_MspInit+0x78>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	9203      	str	r2, [sp, #12]
 8003a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a98:	f042 0202 	orr.w	r2, r2, #2
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	9303      	str	r3, [sp, #12]
 8003aa6:	9b03      	ldr	r3, [sp, #12]
}
 8003aa8:	b004      	add	sp, #16
 8003aaa:	4770      	bx	lr
 8003aac:	40010000 	.word	0x40010000
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	40023800 	.word	0x40023800

08003ab8 <HAL_TIM_OC_MspInit>:
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
  if(htim_oc->Instance==TIM5)
 8003ab8:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <HAL_TIM_OC_MspInit+0x2c>)
 8003aba:	6802      	ldr	r2, [r0, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d000      	beq.n	8003ac2 <HAL_TIM_OC_MspInit+0xa>
 8003ac0:	4770      	bx	lr
{
 8003ac2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003ac4:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
 8003ac8:	2200      	movs	r2, #0
 8003aca:	9201      	str	r2, [sp, #4]
 8003acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ace:	f042 0208 	orr.w	r2, r2, #8
 8003ad2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003ade:	b002      	add	sp, #8
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40000c00 	.word	0x40000c00

08003ae8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ae8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003aea:	6802      	ldr	r2, [r0, #0]
 8003aec:	4939      	ldr	r1, [pc, #228]	; (8003bd4 <HAL_TIM_MspPostInit+0xec>)
{
 8003aee:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af0:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003af2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003af8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003afc:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 8003afe:	d007      	beq.n	8003b10 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8003b00:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003b04:	d020      	beq.n	8003b48 <HAL_TIM_MspPostInit+0x60>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8003b06:	4934      	ldr	r1, [pc, #208]	; (8003bd8 <HAL_TIM_MspPostInit+0xf0>)
 8003b08:	428a      	cmp	r2, r1
 8003b0a:	d050      	beq.n	8003bae <HAL_TIM_MspPostInit+0xc6>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003b0c:	b00a      	add	sp, #40	; 0x28
 8003b0e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b10:	4a32      	ldr	r2, [pc, #200]	; (8003bdc <HAL_TIM_MspPostInit+0xf4>)
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b16:	4832      	ldr	r0, [pc, #200]	; (8003be0 <HAL_TIM_MspPostInit+0xf8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b28:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = MotorX_pwm1_Pin|MotorX_pwm2_Pin|MotorX_pwm3_Pin;
 8003b2a:	f44f 64e0 	mov.w	r4, #1792	; 0x700
 8003b2e:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b30:	2301      	movs	r3, #1
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b32:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = MotorZ_pwm1_Pin|MotorZ_pwm2_Pin|MotorZ_pwm3_Pin;
 8003b34:	2200      	movs	r2, #0
 8003b36:	2300      	movs	r3, #0
 8003b38:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003b3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b40:	f000 fe20 	bl	8004784 <HAL_GPIO_Init>
}
 8003b44:	b00a      	add	sp, #40	; 0x28
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b48:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b50:	4823      	ldr	r0, [pc, #140]	; (8003be0 <HAL_TIM_MspPostInit+0xf8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b52:	f041 0101 	orr.w	r1, r1, #1
 8003b56:	6311      	str	r1, [r2, #48]	; 0x30
 8003b58:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003b5a:	f001 0101 	and.w	r1, r1, #1
 8003b5e:	9101      	str	r1, [sp, #4]
 8003b60:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b62:	9302      	str	r3, [sp, #8]
 8003b64:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003b66:	f043 0302 	orr.w	r3, r3, #2
 8003b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b6c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	9302      	str	r3, [sp, #8]
 8003b74:	9902      	ldr	r1, [sp, #8]
    GPIO_InitStruct.Pin = MotorY_pwm2_Pin|MotorY_pwm1_Pin;
 8003b76:	f248 0202 	movw	r2, #32770	; 0x8002
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	2400      	movs	r4, #0
 8003b7e:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b80:	2601      	movs	r6, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b82:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = MotorY_pwm2_Pin|MotorY_pwm1_Pin;
 8003b84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003b88:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b8c:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b8e:	f000 fdf9 	bl	8004784 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MotorY_pwm3_Pin;
 8003b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b96:	2302      	movs	r3, #2
    HAL_GPIO_Init(MotorY_pwm3_GPIO_Port, &GPIO_InitStruct);
 8003b98:	4812      	ldr	r0, [pc, #72]	; (8003be4 <HAL_TIM_MspPostInit+0xfc>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b9a:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(MotorY_pwm3_GPIO_Port, &GPIO_InitStruct);
 8003b9c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = MotorY_pwm3_Pin;
 8003b9e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003ba2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MotorY_pwm3_GPIO_Port, &GPIO_InitStruct);
 8003ba6:	f000 fded 	bl	8004784 <HAL_GPIO_Init>
}
 8003baa:	b00a      	add	sp, #40	; 0x28
 8003bac:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bae:	4a0b      	ldr	r2, [pc, #44]	; (8003bdc <HAL_TIM_MspPostInit+0xf4>)
 8003bb0:	9303      	str	r3, [sp, #12]
 8003bb2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bb4:	480c      	ldr	r0, [pc, #48]	; (8003be8 <HAL_TIM_MspPostInit+0x100>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bb6:	f043 0304 	orr.w	r3, r3, #4
 8003bba:	6313      	str	r3, [r2, #48]	; 0x30
 8003bbc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	9303      	str	r3, [sp, #12]
 8003bc4:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bc6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = MotorZ_pwm1_Pin|MotorZ_pwm2_Pin|MotorZ_pwm3_Pin;
 8003bc8:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8003bcc:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e7af      	b.n	8003b32 <HAL_TIM_MspPostInit+0x4a>
 8003bd2:	bf00      	nop
 8003bd4:	40010000 	.word	0x40010000
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40020000 	.word	0x40020000
 8003be4:	40020400 	.word	0x40020400
 8003be8:	40020800 	.word	0x40020800

08003bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bec:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8003bee:	6801      	ldr	r1, [r0, #0]
 8003bf0:	4a18      	ldr	r2, [pc, #96]	; (8003c54 <HAL_UART_MspInit+0x68>)
{
 8003bf2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8003bf6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003bfc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003c00:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 8003c02:	d001      	beq.n	8003c08 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c04:	b009      	add	sp, #36	; 0x24
 8003c06:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c08:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c10:	4811      	ldr	r0, [pc, #68]	; (8003c58 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c12:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003c16:	6411      	str	r1, [r2, #64]	; 0x40
 8003c18:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003c1a:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 8003c1e:	9100      	str	r1, [sp, #0]
 8003c20:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c22:	9301      	str	r3, [sp, #4]
 8003c24:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c34:	2307      	movs	r3, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c36:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c38:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c3e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c40:	2404      	movs	r4, #4
 8003c42:	2512      	movs	r5, #18
 8003c44:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003c48:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4c:	f000 fd9a 	bl	8004784 <HAL_GPIO_Init>
}
 8003c50:	b009      	add	sp, #36	; 0x24
 8003c52:	bd30      	pop	{r4, r5, pc}
 8003c54:	40004400 	.word	0x40004400
 8003c58:	40020000 	.word	0x40020000

08003c5c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003c5c:	e7fe      	b.n	8003c5c <NMI_Handler>
 8003c5e:	bf00      	nop

08003c60 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c60:	e7fe      	b.n	8003c60 <HardFault_Handler>
 8003c62:	bf00      	nop

08003c64 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c64:	e7fe      	b.n	8003c64 <MemManage_Handler>
 8003c66:	bf00      	nop

08003c68 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c68:	e7fe      	b.n	8003c68 <BusFault_Handler>
 8003c6a:	bf00      	nop

08003c6c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c6c:	e7fe      	b.n	8003c6c <UsageFault_Handler>
 8003c6e:	bf00      	nop

08003c70 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop

08003c74 <DebugMon_Handler>:
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop

08003c78 <PendSV_Handler>:
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop

08003c7c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c7c:	f000 b8dc 	b.w	8003e38 <HAL_IncTick>

08003c80 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c80:	4801      	ldr	r0, [pc, #4]	; (8003c88 <DMA2_Stream0_IRQHandler+0x8>)
 8003c82:	f000 bc8f 	b.w	80045a4 <HAL_DMA_IRQHandler>
 8003c86:	bf00      	nop
 8003c88:	2000634c 	.word	0x2000634c

08003c8c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	4770      	bx	lr

08003c90 <_kill>:

int _kill(int pid, int sig)
{
 8003c90:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003c92:	f002 fc1d 	bl	80064d0 <__errno>
 8003c96:	2316      	movs	r3, #22
 8003c98:	6003      	str	r3, [r0, #0]
	return -1;
}
 8003c9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c9e:	bd08      	pop	{r3, pc}

08003ca0 <_exit>:

void _exit (int status)
{
 8003ca0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003ca2:	f002 fc15 	bl	80064d0 <__errno>
 8003ca6:	2316      	movs	r3, #22
 8003ca8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8003caa:	e7fe      	b.n	8003caa <_exit+0xa>

08003cac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cac:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cae:	1e16      	subs	r6, r2, #0
 8003cb0:	dd07      	ble.n	8003cc2 <_read+0x16>
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8003cb6:	f3af 8000 	nop.w
 8003cba:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cbe:	42a5      	cmp	r5, r4
 8003cc0:	d1f9      	bne.n	8003cb6 <_read+0xa>
	}

return len;
}
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	bd70      	pop	{r4, r5, r6, pc}
 8003cc6:	bf00      	nop

08003cc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cc8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cca:	1e16      	subs	r6, r2, #0
 8003ccc:	dd07      	ble.n	8003cde <_write+0x16>
 8003cce:	460c      	mov	r4, r1
 8003cd0:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8003cd2:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003cd6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cda:	42ac      	cmp	r4, r5
 8003cdc:	d1f9      	bne.n	8003cd2 <_write+0xa>
	}
	return len;
}
 8003cde:	4630      	mov	r0, r6
 8003ce0:	bd70      	pop	{r4, r5, r6, pc}
 8003ce2:	bf00      	nop

08003ce4 <_close>:

int _close(int file)
{
	return -1;
}
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop

08003cec <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cf0:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop

08003cf8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	4770      	bx	lr

08003cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	4770      	bx	lr

08003d00 <_sbrk>:
			- (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003d00:	490c      	ldr	r1, [pc, #48]	; (8003d34 <_sbrk+0x34>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003d02:	4a0d      	ldr	r2, [pc, #52]	; (8003d38 <_sbrk+0x38>)
	if (NULL == __sbrk_heap_end) {
 8003d04:	680b      	ldr	r3, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 8003d06:	b510      	push	{r4, lr}
	const uint32_t stack_limit = (uint32_t) &_estack
 8003d08:	4c0c      	ldr	r4, [pc, #48]	; (8003d3c <_sbrk+0x3c>)
 8003d0a:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 8003d0c:	b12b      	cbz	r3, 8003d1a <_sbrk+0x1a>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003d0e:	4418      	add	r0, r3
 8003d10:	4290      	cmp	r0, r2
 8003d12:	d807      	bhi.n	8003d24 <_sbrk+0x24>
		errno = ENOMEM;
		return (void*) -1;
	}

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;
 8003d14:	6008      	str	r0, [r1, #0]

	return (void*) prev_heap_end;
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	bd10      	pop	{r4, pc}
		__sbrk_heap_end = &_end;
 8003d1a:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <_sbrk+0x40>)
 8003d1c:	600b      	str	r3, [r1, #0]
	if (__sbrk_heap_end + incr > max_heap) {
 8003d1e:	4418      	add	r0, r3
 8003d20:	4290      	cmp	r0, r2
 8003d22:	d9f7      	bls.n	8003d14 <_sbrk+0x14>
		errno = ENOMEM;
 8003d24:	f002 fbd4 	bl	80064d0 <__errno>
 8003d28:	230c      	movs	r3, #12
 8003d2a:	6003      	str	r3, [r0, #0]
		return (void*) -1;
 8003d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd10      	pop	{r4, pc}
 8003d34:	20002238 	.word	0x20002238
 8003d38:	20018000 	.word	0x20018000
 8003d3c:	00000400 	.word	0x00000400
 8003d40:	20006508 	.word	0x20006508

08003d44 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8003d44:	4a03      	ldr	r2, [pc, #12]	; (8003d54 <SystemInit+0x10>)
 8003d46:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003d4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d52:	4770      	bx	lr
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <get_us>:
 *      Author: maxborglowe
 */

#include "time_utils.h"

uint32_t get_us(){
 8003d58:	b508      	push	{r3, lr}
	return HAL_GetTick()*1000;
 8003d5a:	f000 f879 	bl	8003e50 <HAL_GetTick>
 8003d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8003d62:	fb03 f000 	mul.w	r0, r3, r0
 8003d66:	bd08      	pop	{r3, pc}

08003d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003da0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d6c:	480d      	ldr	r0, [pc, #52]	; (8003da4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d6e:	490e      	ldr	r1, [pc, #56]	; (8003da8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d70:	4a0e      	ldr	r2, [pc, #56]	; (8003dac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d74:	e002      	b.n	8003d7c <LoopCopyDataInit>

08003d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d7a:	3304      	adds	r3, #4

08003d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d80:	d3f9      	bcc.n	8003d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d82:	4a0b      	ldr	r2, [pc, #44]	; (8003db0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d84:	4c0b      	ldr	r4, [pc, #44]	; (8003db4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d88:	e001      	b.n	8003d8e <LoopFillZerobss>

08003d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d8c:	3204      	adds	r2, #4

08003d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d90:	d3fb      	bcc.n	8003d8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d92:	f7ff ffd7 	bl	8003d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d96:	f002 fba1 	bl	80064dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d9a:	f7fe ff75 	bl	8002c88 <main>
  bx  lr    
 8003d9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003da0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003da8:	200021fc 	.word	0x200021fc
  ldr r2, =_sidata
 8003dac:	0800b8f8 	.word	0x0800b8f8
  ldr r2, =_sbss
 8003db0:	200021fc 	.word	0x200021fc
  ldr r4, =_ebss
 8003db4:	20006504 	.word	0x20006504

08003db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003db8:	e7fe      	b.n	8003db8 <ADC_IRQHandler>
	...

08003dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dbc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dbe:	4a0e      	ldr	r2, [pc, #56]	; (8003df8 <HAL_InitTick+0x3c>)
 8003dc0:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <HAL_InitTick+0x40>)
 8003dc2:	7812      	ldrb	r2, [r2, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
{
 8003dc6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dcc:	fbb0 f0f2 	udiv	r0, r0, r2
 8003dd0:	fbb3 f0f0 	udiv	r0, r3, r0
 8003dd4:	f000 faf4 	bl	80043c0 <HAL_SYSTICK_Config>
 8003dd8:	b908      	cbnz	r0, 8003dde <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dda:	2d0f      	cmp	r5, #15
 8003ddc:	d901      	bls.n	8003de2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8003dde:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003de0:	bd38      	pop	{r3, r4, r5, pc}
 8003de2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003de4:	4602      	mov	r2, r0
 8003de6:	4629      	mov	r1, r5
 8003de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dec:	f000 faa2 	bl	8004334 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003df0:	4b03      	ldr	r3, [pc, #12]	; (8003e00 <HAL_InitTick+0x44>)
 8003df2:	4620      	mov	r0, r4
 8003df4:	601d      	str	r5, [r3, #0]
}
 8003df6:	bd38      	pop	{r3, r4, r5, pc}
 8003df8:	20002020 	.word	0x20002020
 8003dfc:	2000201c 	.word	0x2000201c
 8003e00:	20002024 	.word	0x20002024

08003e04 <HAL_Init>:
{
 8003e04:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e06:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_Init+0x30>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e16:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e1e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e20:	2003      	movs	r0, #3
 8003e22:	f000 fa73 	bl	800430c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e26:	2000      	movs	r0, #0
 8003e28:	f7ff ffc8 	bl	8003dbc <HAL_InitTick>
  HAL_MspInit();
 8003e2c:	f7ff fd30 	bl	8003890 <HAL_MspInit>
}
 8003e30:	2000      	movs	r0, #0
 8003e32:	bd08      	pop	{r3, pc}
 8003e34:	40023c00 	.word	0x40023c00

08003e38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003e38:	4a03      	ldr	r2, [pc, #12]	; (8003e48 <HAL_IncTick+0x10>)
 8003e3a:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <HAL_IncTick+0x14>)
 8003e3c:	6811      	ldr	r1, [r2, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	440b      	add	r3, r1
 8003e42:	6013      	str	r3, [r2, #0]
}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	200064f0 	.word	0x200064f0
 8003e4c:	20002020 	.word	0x20002020

08003e50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003e50:	4b01      	ldr	r3, [pc, #4]	; (8003e58 <HAL_GetTick+0x8>)
 8003e52:	6818      	ldr	r0, [r3, #0]
}
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	200064f0 	.word	0x200064f0

08003e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003e60:	f7ff fff6 	bl	8003e50 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e64:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003e66:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003e68:	d002      	beq.n	8003e70 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e6a:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <HAL_Delay+0x20>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e70:	f7ff ffee 	bl	8003e50 <HAL_GetTick>
 8003e74:	1b43      	subs	r3, r0, r5
 8003e76:	42a3      	cmp	r3, r4
 8003e78:	d3fa      	bcc.n	8003e70 <HAL_Delay+0x14>
  {
  }
}
 8003e7a:	bd38      	pop	{r3, r4, r5, pc}
 8003e7c:	20002020 	.word	0x20002020

08003e80 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e80:	2800      	cmp	r0, #0
 8003e82:	f000 80a0 	beq.w	8003fc6 <HAL_ADC_Init+0x146>
{
 8003e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e88:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	b13d      	cbz	r5, 8003e9e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e90:	06db      	lsls	r3, r3, #27
 8003e92:	d50c      	bpl.n	8003eae <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e94:	2300      	movs	r3, #0
 8003e96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8003e9a:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8003e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8003e9e:	f7ff fd15 	bl	80038cc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003ea2:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ea4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8003ea6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003eaa:	06db      	lsls	r3, r3, #27
 8003eac:	d4f2      	bmi.n	8003e94 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8003eae:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003eb0:	4948      	ldr	r1, [pc, #288]	; (8003fd4 <HAL_ADC_Init+0x154>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003eb2:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003eb4:	4d48      	ldr	r5, [pc, #288]	; (8003fd8 <HAL_ADC_Init+0x158>)
    ADC_STATE_CLR_SET(hadc->State,
 8003eb6:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8003eba:	f022 0202 	bic.w	r2, r2, #2
 8003ebe:	f042 0202 	orr.w	r2, r2, #2
 8003ec2:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ec4:	684a      	ldr	r2, [r1, #4]
 8003ec6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003eca:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ecc:	684a      	ldr	r2, [r1, #4]
 8003ece:	6860      	ldr	r0, [r4, #4]
 8003ed0:	4302      	orrs	r2, r0
 8003ed2:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ed4:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ed6:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ed8:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003eda:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003edc:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8003ee0:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003ee8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003eea:	6858      	ldr	r0, [r3, #4]
 8003eec:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8003ef0:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ef2:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ef4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ef6:	4339      	orrs	r1, r7
 8003ef8:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003efa:	6899      	ldr	r1, [r3, #8]
 8003efc:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8003f00:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f02:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f04:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f06:	ea42 0206 	orr.w	r2, r2, r6
 8003f0a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f0c:	d052      	beq.n	8003fb4 <HAL_ADC_Init+0x134>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f0e:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f10:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f12:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8003f16:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	4310      	orrs	r0, r2
 8003f1c:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f1e:	6899      	ldr	r1, [r3, #8]
 8003f20:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8003f24:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	432a      	orrs	r2, r5
 8003f2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	f022 0202 	bic.w	r2, r2, #2
 8003f32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	7e21      	ldrb	r1, [r4, #24]
 8003f38:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003f3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f3e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003f42:	2a00      	cmp	r2, #0
 8003f44:	d041      	beq.n	8003fca <HAL_ADC_Init+0x14a>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f46:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f48:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	3901      	subs	r1, #1
 8003f5c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003f60:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f64:	69e0      	ldr	r0, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f66:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f68:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f70:	3801      	subs	r0, #1
 8003f72:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
 8003f76:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f78:	6899      	ldr	r1, [r3, #8]
 8003f7a:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003f7e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f80:	6899      	ldr	r1, [r3, #8]
 8003f82:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8003f86:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8003f8a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f8c:	6899      	ldr	r1, [r3, #8]
 8003f8e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003f92:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f94:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003f96:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f98:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8003f9c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003f9e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003fa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fa2:	f023 0303 	bic.w	r3, r3, #3
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003fac:	2300      	movs	r3, #0
 8003fae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	e7b2      	b.n	8003f2c <HAL_ADC_Init+0xac>
    return HAL_ERROR;
 8003fc6:	2001      	movs	r0, #1
}
 8003fc8:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	e7c6      	b.n	8003f62 <HAL_ADC_Init+0xe2>
 8003fd4:	40012300 	.word	0x40012300
 8003fd8:	0f000001 	.word	0x0f000001

08003fdc <HAL_ADC_Start_DMA>:
{
 8003fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fde:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8003fe0:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
{
 8003fe4:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8003fe6:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8003fe8:	2801      	cmp	r0, #1
  __IO uint32_t counter = 0U;
 8003fea:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 8003fec:	f000 8088 	beq.w	8004100 <HAL_ADC_Start_DMA+0x124>
 8003ff0:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ff2:	682e      	ldr	r6, [r5, #0]
  __HAL_LOCK(hadc);
 8003ff4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ff8:	68b3      	ldr	r3, [r6, #8]
 8003ffa:	07dc      	lsls	r4, r3, #31
 8003ffc:	d414      	bmi.n	8004028 <HAL_ADC_Start_DMA+0x4c>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ffe:	4b42      	ldr	r3, [pc, #264]	; (8004108 <HAL_ADC_Start_DMA+0x12c>)
 8004000:	4c42      	ldr	r4, [pc, #264]	; (800410c <HAL_ADC_Start_DMA+0x130>)
 8004002:	6818      	ldr	r0, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8004004:	68b3      	ldr	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004006:	fba4 4000 	umull	r4, r0, r4, r0
 800400a:	0c80      	lsrs	r0, r0, #18
    __HAL_ADC_ENABLE(hadc);
 800400c:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004010:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8004014:	60b3      	str	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004016:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8004018:	9b01      	ldr	r3, [sp, #4]
 800401a:	b12b      	cbz	r3, 8004028 <HAL_ADC_Start_DMA+0x4c>
      counter--;
 800401c:	9c01      	ldr	r4, [sp, #4]
 800401e:	3c01      	subs	r4, #1
 8004020:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8004022:	9801      	ldr	r0, [sp, #4]
 8004024:	2800      	cmp	r0, #0
 8004026:	d1f9      	bne.n	800401c <HAL_ADC_Start_DMA+0x40>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004028:	68b3      	ldr	r3, [r6, #8]
 800402a:	05d8      	lsls	r0, r3, #23
 800402c:	d503      	bpl.n	8004036 <HAL_ADC_Start_DMA+0x5a>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800402e:	68b3      	ldr	r3, [r6, #8]
 8004030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004034:	60b3      	str	r3, [r6, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004036:	68b0      	ldr	r0, [r6, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8004038:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800403a:	f010 0001 	ands.w	r0, r0, #1
 800403e:	d043      	beq.n	80040c8 <HAL_ADC_Start_DMA+0xec>
    ADC_STATE_CLR_SET(hadc->State,
 8004040:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404c:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800404e:	6873      	ldr	r3, [r6, #4]
 8004050:	055b      	lsls	r3, r3, #21
 8004052:	d505      	bpl.n	8004060 <HAL_ADC_Start_DMA+0x84>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004054:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004056:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800405a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800405e:	642b      	str	r3, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004060:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004062:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004064:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8004120 <HAL_ADC_Start_DMA+0x144>
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004068:	4f29      	ldr	r7, [pc, #164]	; (8004110 <HAL_ADC_Start_DMA+0x134>)
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800406a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800406e:	bf1c      	itt	ne
 8004070:	6c6b      	ldrne	r3, [r5, #68]	; 0x44
 8004072:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8004076:	646b      	str	r3, [r5, #68]	; 0x44
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004078:	4b26      	ldr	r3, [pc, #152]	; (8004114 <HAL_ADC_Start_DMA+0x138>)
    __HAL_UNLOCK(hadc);   
 800407a:	2400      	movs	r4, #0
 800407c:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004080:	e9c0 c30f 	strd	ip, r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004084:	f06f 0322 	mvn.w	r3, #34	; 0x22
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004088:	64c7      	str	r7, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800408a:	6033      	str	r3, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800408c:	6873      	ldr	r3, [r6, #4]
 800408e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004092:	6073      	str	r3, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004094:	68b7      	ldr	r7, [r6, #8]
 8004096:	f447 7780 	orr.w	r7, r7, #256	; 0x100
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800409a:	4613      	mov	r3, r2
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800409c:	60b7      	str	r7, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800409e:	460a      	mov	r2, r1
 80040a0:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 80040a4:	f000 fa40 	bl	8004528 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80040a8:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <HAL_ADC_Start_DMA+0x13c>)
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	f012 021f 	ands.w	r2, r2, #31
 80040b0:	d113      	bne.n	80040da <HAL_ADC_Start_DMA+0xfe>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80040b2:	6829      	ldr	r1, [r5, #0]
 80040b4:	6888      	ldr	r0, [r1, #8]
 80040b6:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80040ba:	d115      	bne.n	80040e8 <HAL_ADC_Start_DMA+0x10c>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040bc:	688b      	ldr	r3, [r1, #8]
 80040be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040c2:	608b      	str	r3, [r1, #8]
}
 80040c4:	b003      	add	sp, #12
 80040c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040c8:	f043 0310 	orr.w	r3, r3, #16
 80040cc:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ce:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	646b      	str	r3, [r5, #68]	; 0x44
}
 80040d6:	b003      	add	sp, #12
 80040d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80040da:	682b      	ldr	r3, [r5, #0]
 80040dc:	4a0f      	ldr	r2, [pc, #60]	; (800411c <HAL_ADC_Start_DMA+0x140>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d005      	beq.n	80040ee <HAL_ADC_Start_DMA+0x112>
  return HAL_OK;
 80040e2:	4620      	mov	r0, r4
}
 80040e4:	b003      	add	sp, #12
 80040e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 80040e8:	4610      	mov	r0, r2
}
 80040ea:	b003      	add	sp, #12
 80040ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80040ee:	6898      	ldr	r0, [r3, #8]
 80040f0:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80040f4:	d1f5      	bne.n	80040e2 <HAL_ADC_Start_DMA+0x106>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80040fc:	609a      	str	r2, [r3, #8]
 80040fe:	e7ea      	b.n	80040d6 <HAL_ADC_Start_DMA+0xfa>
  __HAL_LOCK(hadc);
 8004100:	2002      	movs	r0, #2
}
 8004102:	b003      	add	sp, #12
 8004104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004106:	bf00      	nop
 8004108:	2000201c 	.word	0x2000201c
 800410c:	431bde83 	.word	0x431bde83
 8004110:	08004139 	.word	0x08004139
 8004114:	08004129 	.word	0x08004129
 8004118:	40012300 	.word	0x40012300
 800411c:	40012000 	.word	0x40012000
 8004120:	08004151 	.word	0x08004151

08004124 <HAL_ADC_ConvHalfCpltCallback>:
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop

08004128 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004128:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800412a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800412c:	f7ff fffa 	bl	8004124 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004130:	bd08      	pop	{r3, pc}
 8004132:	bf00      	nop

08004134 <HAL_ADC_ErrorCallback>:
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop

08004138 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004138:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800413a:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800413c:	2340      	movs	r3, #64	; 0x40
 800413e:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004140:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004142:	f043 0304 	orr.w	r3, r3, #4
 8004146:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004148:	f7ff fff4 	bl	8004134 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800414c:	bd08      	pop	{r3, pc}
 800414e:	bf00      	nop

08004150 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004150:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004154:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8004158:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800415a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800415c:	d123      	bne.n	80041a6 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800415e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004162:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004164:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004166:	688a      	ldr	r2, [r1, #8]
 8004168:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800416c:	d117      	bne.n	800419e <ADC_DMAConvCplt+0x4e>
 800416e:	7e1a      	ldrb	r2, [r3, #24]
 8004170:	b9aa      	cbnz	r2, 800419e <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004172:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004174:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8004178:	d002      	beq.n	8004180 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800417a:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800417c:	0550      	lsls	r0, r2, #21
 800417e:	d40e      	bmi.n	800419e <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004180:	684a      	ldr	r2, [r1, #4]
 8004182:	f022 0220 	bic.w	r2, r2, #32
 8004186:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800418a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800418e:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004192:	04d1      	lsls	r1, r2, #19
 8004194:	d403      	bmi.n	800419e <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004198:	f042 0201 	orr.w	r2, r2, #1
 800419c:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff faca 	bl	8003738 <HAL_ADC_ConvCpltCallback>
}
 80041a4:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041a6:	06d2      	lsls	r2, r2, #27
 80041a8:	d404      	bmi.n	80041b4 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80041ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b2:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff ffbd 	bl	8004134 <HAL_ADC_ErrorCallback>
}
 80041ba:	bd10      	pop	{r4, pc}

080041bc <HAL_ADC_ConfigChannel>:
{
 80041bc:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 80041be:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80041c2:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80041c4:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80041c6:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80041c8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80041ca:	f000 8094 	beq.w	80042f6 <HAL_ADC_ConfigChannel+0x13a>
 80041ce:	2301      	movs	r3, #1
 80041d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80041d4:	680d      	ldr	r5, [r1, #0]
 80041d6:	2d09      	cmp	r5, #9
 80041d8:	d829      	bhi.n	800422e <HAL_ADC_ConfigChannel+0x72>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80041da:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80041dc:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80041de:	6922      	ldr	r2, [r4, #16]
 80041e0:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80041e4:	2607      	movs	r6, #7
 80041e6:	40be      	lsls	r6, r7
 80041e8:	ea22 0206 	bic.w	r2, r2, r6
 80041ec:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80041ee:	6922      	ldr	r2, [r4, #16]
 80041f0:	40bb      	lsls	r3, r7
 80041f2:	4313      	orrs	r3, r2
 80041f4:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7U)
 80041f6:	684b      	ldr	r3, [r1, #4]
 80041f8:	2b06      	cmp	r3, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80041fa:	462e      	mov	r6, r5
  if (sConfig->Rank < 7U)
 80041fc:	d82c      	bhi.n	8004258 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80041fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004202:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004204:	3b05      	subs	r3, #5
 8004206:	211f      	movs	r1, #31
 8004208:	4099      	lsls	r1, r3
 800420a:	ea22 0201 	bic.w	r2, r2, r1
 800420e:	6362      	str	r2, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004210:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004212:	fa06 f303 	lsl.w	r3, r6, r3
 8004216:	4313      	orrs	r3, r2
 8004218:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800421a:	4b39      	ldr	r3, [pc, #228]	; (8004300 <HAL_ADC_ConfigChannel+0x144>)
 800421c:	429c      	cmp	r4, r3
 800421e:	d02f      	beq.n	8004280 <HAL_ADC_ConfigChannel+0xc4>
  __HAL_UNLOCK(hadc);
 8004220:	2300      	movs	r3, #0
 8004222:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004226:	4618      	mov	r0, r3
}
 8004228:	b002      	add	sp, #8
 800422a:	bcf0      	pop	{r4, r5, r6, r7}
 800422c:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800422e:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004230:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004232:	68e7      	ldr	r7, [r4, #12]
 8004234:	b2ae      	uxth	r6, r5
 8004236:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 800423a:	3a1e      	subs	r2, #30
 800423c:	f04f 0c07 	mov.w	ip, #7
 8004240:	fa0c fc02 	lsl.w	ip, ip, r2
 8004244:	ea27 070c 	bic.w	r7, r7, ip
 8004248:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800424a:	68e7      	ldr	r7, [r4, #12]
 800424c:	4093      	lsls	r3, r2
 800424e:	433b      	orrs	r3, r7
 8004250:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8004252:	684b      	ldr	r3, [r1, #4]
 8004254:	2b06      	cmp	r3, #6
 8004256:	d9d2      	bls.n	80041fe <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8004258:	2b0c      	cmp	r3, #12
 800425a:	d837      	bhi.n	80042cc <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800425c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004260:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8004264:	221f      	movs	r2, #31
 8004266:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004268:	408a      	lsls	r2, r1
 800426a:	ea23 0302 	bic.w	r3, r3, r2
 800426e:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004270:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004272:	fa06 f101 	lsl.w	r1, r6, r1
 8004276:	4319      	orrs	r1, r3
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004278:	4b21      	ldr	r3, [pc, #132]	; (8004300 <HAL_ADC_ConfigChannel+0x144>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800427a:	6321      	str	r1, [r4, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800427c:	429c      	cmp	r4, r3
 800427e:	d1cf      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x64>
 8004280:	2d12      	cmp	r5, #18
 8004282:	d032      	beq.n	80042ea <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004284:	f1a5 0310 	sub.w	r3, r5, #16
 8004288:	2b01      	cmp	r3, #1
 800428a:	d8c9      	bhi.n	8004220 <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800428c:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <HAL_ADC_ConfigChannel+0x148>)
 800428e:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004290:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004292:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004296:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004298:	d1c2      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x64>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_ADC_ConfigChannel+0x14c>)
 800429c:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 80042a6:	f202 3283 	addw	r2, r2, #899	; 0x383
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	0c9b      	lsrs	r3, r3, #18
 80042b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80042b8:	9b01      	ldr	r3, [sp, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0b0      	beq.n	8004220 <HAL_ADC_ConfigChannel+0x64>
        counter--;
 80042be:	9b01      	ldr	r3, [sp, #4]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80042c4:	9b01      	ldr	r3, [sp, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f9      	bne.n	80042be <HAL_ADC_ConfigChannel+0x102>
 80042ca:	e7a9      	b.n	8004220 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80042cc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80042d0:	3a41      	subs	r2, #65	; 0x41
 80042d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80042d4:	211f      	movs	r1, #31
 80042d6:	4091      	lsls	r1, r2
 80042d8:	ea23 0301 	bic.w	r3, r3, r1
 80042dc:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80042de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80042e0:	fa06 f102 	lsl.w	r1, r6, r2
 80042e4:	4319      	orrs	r1, r3
 80042e6:	62e1      	str	r1, [r4, #44]	; 0x2c
 80042e8:	e797      	b.n	800421a <HAL_ADC_ConfigChannel+0x5e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80042ea:	4a06      	ldr	r2, [pc, #24]	; (8004304 <HAL_ADC_ConfigChannel+0x148>)
 80042ec:	6853      	ldr	r3, [r2, #4]
 80042ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042f2:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042f4:	e794      	b.n	8004220 <HAL_ADC_ConfigChannel+0x64>
  __HAL_LOCK(hadc);
 80042f6:	2002      	movs	r0, #2
}
 80042f8:	b002      	add	sp, #8
 80042fa:	bcf0      	pop	{r4, r5, r6, r7}
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40012000 	.word	0x40012000
 8004304:	40012300 	.word	0x40012300
 8004308:	2000201c 	.word	0x2000201c

0800430c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800430c:	4908      	ldr	r1, [pc, #32]	; (8004330 <HAL_NVIC_SetPriorityGrouping+0x24>)
 800430e:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004310:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004312:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004314:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8004318:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800431a:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800431e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004328:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 800432c:	60cb      	str	r3, [r1, #12]
 800432e:	4770      	bx	lr
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004334:	4b19      	ldr	r3, [pc, #100]	; (800439c <HAL_NVIC_SetPriority+0x68>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800433c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800433e:	f1c3 0507 	rsb	r5, r3, #7
 8004342:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004344:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004348:	bf28      	it	cs
 800434a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800434c:	2c06      	cmp	r4, #6
 800434e:	d919      	bls.n	8004384 <HAL_NVIC_SetPriority+0x50>
 8004350:	3b03      	subs	r3, #3
 8004352:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004356:	409c      	lsls	r4, r3
 8004358:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800435c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004360:	40ac      	lsls	r4, r5
 8004362:	ea21 0104 	bic.w	r1, r1, r4
 8004366:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004368:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800436a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800436e:	db0c      	blt.n	800438a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004370:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004374:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004378:	0109      	lsls	r1, r1, #4
 800437a:	b2c9      	uxtb	r1, r1
 800437c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004380:	bc30      	pop	{r4, r5}
 8004382:	4770      	bx	lr
 8004384:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004386:	4613      	mov	r3, r2
 8004388:	e7e8      	b.n	800435c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800438a:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <HAL_NVIC_SetPriority+0x6c>)
 800438c:	f000 000f 	and.w	r0, r0, #15
 8004390:	0109      	lsls	r1, r1, #4
 8004392:	4403      	add	r3, r0
 8004394:	b2c9      	uxtb	r1, r1
 8004396:	7619      	strb	r1, [r3, #24]
 8004398:	bc30      	pop	{r4, r5}
 800439a:	4770      	bx	lr
 800439c:	e000ed00 	.word	0xe000ed00
 80043a0:	e000ecfc 	.word	0xe000ecfc

080043a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80043a4:	2800      	cmp	r0, #0
 80043a6:	db07      	blt.n	80043b8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043a8:	f000 011f 	and.w	r1, r0, #31
 80043ac:	4a03      	ldr	r2, [pc, #12]	; (80043bc <HAL_NVIC_EnableIRQ+0x18>)
 80043ae:	0940      	lsrs	r0, r0, #5
 80043b0:	2301      	movs	r3, #1
 80043b2:	408b      	lsls	r3, r1
 80043b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	e000e100 	.word	0xe000e100

080043c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043c0:	3801      	subs	r0, #1
 80043c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80043c6:	d20e      	bcs.n	80043e6 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043c8:	4b08      	ldr	r3, [pc, #32]	; (80043ec <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043ca:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043cc:	4c08      	ldr	r4, [pc, #32]	; (80043f0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ce:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d0:	20f0      	movs	r0, #240	; 0xf0
 80043d2:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043d6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043d8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043da:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043dc:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 80043de:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043e2:	6019      	str	r1, [r3, #0]
 80043e4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80043e6:	2001      	movs	r0, #1
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	e000e010 	.word	0xe000e010
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f6:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80043f8:	f7ff fd2a 	bl	8003e50 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043fc:	2c00      	cmp	r4, #0
 80043fe:	d054      	beq.n	80044aa <HAL_DMA_Init+0xb6>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004400:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8004402:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8004404:	2102      	movs	r1, #2
 8004406:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800440a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	f022 0201 	bic.w	r2, r2, #1
 8004414:	4605      	mov	r5, r0
 8004416:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004418:	e005      	b.n	8004426 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800441a:	f7ff fd19 	bl	8003e50 <HAL_GetTick>
 800441e:	1b43      	subs	r3, r0, r5
 8004420:	2b05      	cmp	r3, #5
 8004422:	d83b      	bhi.n	800449c <HAL_DMA_Init+0xa8>
 8004424:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	07d1      	lsls	r1, r2, #31
 800442a:	d4f6      	bmi.n	800441a <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800442c:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004430:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004434:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004436:	6961      	ldr	r1, [r4, #20]
  tmp = hdma->Instance->CR;
 8004438:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800443a:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800443c:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004440:	4302      	orrs	r2, r0
 8004442:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8004444:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004446:	4935      	ldr	r1, [pc, #212]	; (800451c <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004448:	4332      	orrs	r2, r6
 800444a:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800444c:	4302      	orrs	r2, r0

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800444e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004450:	4039      	ands	r1, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004452:	2804      	cmp	r0, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004454:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004458:	d029      	beq.n	80044ae <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800445a:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800445c:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800445e:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004462:	4310      	orrs	r0, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004464:	b2da      	uxtb	r2, r3
 8004466:	492e      	ldr	r1, [pc, #184]	; (8004520 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8004468:	6158      	str	r0, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800446a:	3a10      	subs	r2, #16
 800446c:	fba1 0102 	umull	r0, r1, r1, r2
 8004470:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004472:	482c      	ldr	r0, [pc, #176]	; (8004524 <HAL_DMA_Init+0x130>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004474:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004478:	5c41      	ldrb	r1, [r0, r1]
 800447a:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800447c:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8004480:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004482:	bf88      	it	hi
 8004484:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004486:	223f      	movs	r2, #63	; 0x3f
 8004488:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 800448a:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800448c:	2100      	movs	r1, #0
 800448e:	65a3      	str	r3, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004490:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004492:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004494:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 8004498:	4608      	mov	r0, r1
}
 800449a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800449c:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800449e:	2220      	movs	r2, #32
 80044a0:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80044a6:	4618      	mov	r0, r3
}
 80044a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80044aa:	2001      	movs	r0, #1
}
 80044ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044ae:	e9d4 500b 	ldrd	r5, r0, [r4, #44]	; 0x2c
 80044b2:	4328      	orrs	r0, r5
 80044b4:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 80044b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 80044b8:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 80044ba:	6958      	ldr	r0, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044bc:	f020 0007 	bic.w	r0, r0, #7
 80044c0:	4310      	orrs	r0, r2
    tmp |= hdma->Init.FIFOThreshold;
 80044c2:	f040 0004 	orr.w	r0, r0, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044c6:	2d00      	cmp	r5, #0
 80044c8:	d0cc      	beq.n	8004464 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044ca:	b17e      	cbz	r6, 80044ec <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044cc:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80044d0:	d012      	beq.n	80044f8 <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044d2:	2a02      	cmp	r2, #2
 80044d4:	d903      	bls.n	80044de <HAL_DMA_Init+0xea>
 80044d6:	2a03      	cmp	r2, #3
 80044d8:	d1c4      	bne.n	8004464 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044da:	01ea      	lsls	r2, r5, #7
 80044dc:	d5c2      	bpl.n	8004464 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 80044de:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044e0:	2240      	movs	r2, #64	; 0x40
 80044e2:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80044e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80044e8:	4618      	mov	r0, r3
}
 80044ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 80044ec:	2a01      	cmp	r2, #1
 80044ee:	d011      	beq.n	8004514 <HAL_DMA_Init+0x120>
 80044f0:	f032 0202 	bics.w	r2, r2, #2
 80044f4:	d1b6      	bne.n	8004464 <HAL_DMA_Init+0x70>
 80044f6:	e7f0      	b.n	80044da <HAL_DMA_Init+0xe6>
    switch (tmp)
 80044f8:	2a03      	cmp	r2, #3
 80044fa:	d8b3      	bhi.n	8004464 <HAL_DMA_Init+0x70>
 80044fc:	a101      	add	r1, pc, #4	; (adr r1, 8004504 <HAL_DMA_Init+0x110>)
 80044fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004502:	bf00      	nop
 8004504:	080044df 	.word	0x080044df
 8004508:	080044db 	.word	0x080044db
 800450c:	080044df 	.word	0x080044df
 8004510:	08004515 	.word	0x08004515
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004514:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8004518:	d1a4      	bne.n	8004464 <HAL_DMA_Init+0x70>
 800451a:	e7e0      	b.n	80044de <HAL_DMA_Init+0xea>
 800451c:	f010803f 	.word	0xf010803f
 8004520:	aaaaaaab 	.word	0xaaaaaaab
 8004524:	0800b2a4 	.word	0x0800b2a4

08004528 <HAL_DMA_Start_IT>:
{
 8004528:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800452a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800452e:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8004530:	2c01      	cmp	r4, #1
 8004532:	d034      	beq.n	800459e <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 8004534:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8004538:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800453a:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 800453c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004540:	d005      	beq.n	800454e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8004542:	2300      	movs	r3, #0
 8004544:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 8004548:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 800454a:	2002      	movs	r0, #2
}
 800454c:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800454e:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8004550:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004552:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004554:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004558:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800455a:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800455c:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800455e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004562:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004564:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8004566:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 8004568:	bf0a      	itet	eq
 800456a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800456c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800456e:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004570:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 8004572:	bf18      	it	ne
 8004574:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004576:	233f      	movs	r3, #63	; 0x3f
 8004578:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 800457a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800457c:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	f043 0316 	orr.w	r3, r3, #22
 8004584:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8004586:	b11a      	cbz	r2, 8004590 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	f043 0308 	orr.w	r3, r3, #8
 800458e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004598:	2000      	movs	r0, #0
}
 800459a:	bcf0      	pop	{r4, r5, r6, r7}
 800459c:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800459e:	2002      	movs	r0, #2
}
 80045a0:	bcf0      	pop	{r4, r5, r6, r7}
 80045a2:	4770      	bx	lr

080045a4 <HAL_DMA_IRQHandler>:
{
 80045a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80045aa:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045ac:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 80045ae:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045b0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80045b2:	6834      	ldr	r4, [r6, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045b4:	4971      	ldr	r1, [pc, #452]	; (800477c <HAL_DMA_IRQHandler+0x1d8>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045b6:	2208      	movs	r2, #8
 80045b8:	409a      	lsls	r2, r3
 80045ba:	4222      	tst	r2, r4
  uint32_t timeout = SystemCoreClock / 9600U;
 80045bc:	680d      	ldr	r5, [r1, #0]
{
 80045be:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045c0:	d004      	beq.n	80045cc <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045c2:	6801      	ldr	r1, [r0, #0]
 80045c4:	680f      	ldr	r7, [r1, #0]
 80045c6:	0778      	lsls	r0, r7, #29
 80045c8:	f100 808a 	bmi.w	80046e0 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045cc:	2201      	movs	r2, #1
 80045ce:	409a      	lsls	r2, r3
 80045d0:	4222      	tst	r2, r4
 80045d2:	d004      	beq.n	80045de <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045d4:	f8d8 1000 	ldr.w	r1, [r8]
 80045d8:	6949      	ldr	r1, [r1, #20]
 80045da:	0609      	lsls	r1, r1, #24
 80045dc:	d478      	bmi.n	80046d0 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045de:	2204      	movs	r2, #4
 80045e0:	409a      	lsls	r2, r3
 80045e2:	4222      	tst	r2, r4
 80045e4:	d004      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045e6:	f8d8 1000 	ldr.w	r1, [r8]
 80045ea:	6809      	ldr	r1, [r1, #0]
 80045ec:	078f      	lsls	r7, r1, #30
 80045ee:	d467      	bmi.n	80046c0 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045f0:	2210      	movs	r2, #16
 80045f2:	409a      	lsls	r2, r3
 80045f4:	4222      	tst	r2, r4
 80045f6:	d004      	beq.n	8004602 <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80045f8:	f8d8 1000 	ldr.w	r1, [r8]
 80045fc:	680f      	ldr	r7, [r1, #0]
 80045fe:	0738      	lsls	r0, r7, #28
 8004600:	d449      	bmi.n	8004696 <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004602:	2220      	movs	r2, #32
 8004604:	409a      	lsls	r2, r3
 8004606:	4222      	tst	r2, r4
 8004608:	d017      	beq.n	800463a <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800460a:	f8d8 1000 	ldr.w	r1, [r8]
 800460e:	680c      	ldr	r4, [r1, #0]
 8004610:	06e0      	lsls	r0, r4, #27
 8004612:	d512      	bpl.n	800463a <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004614:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004616:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800461a:	2a05      	cmp	r2, #5
 800461c:	d073      	beq.n	8004706 <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800461e:	680b      	ldr	r3, [r1, #0]
 8004620:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004624:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004626:	f000 8090 	beq.w	800474a <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800462a:	0319      	lsls	r1, r3, #12
 800462c:	f140 809b 	bpl.w	8004766 <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 8004630:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8004634:	b10b      	cbz	r3, 800463a <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 8004636:	4640      	mov	r0, r8
 8004638:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800463a:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800463e:	b33b      	cbz	r3, 8004690 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004640:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8004644:	07da      	lsls	r2, r3, #31
 8004646:	d51b      	bpl.n	8004680 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8004648:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800464c:	494c      	ldr	r1, [pc, #304]	; (8004780 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800464e:	2305      	movs	r3, #5
 8004650:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004654:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004656:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 800465a:	f023 0301 	bic.w	r3, r3, #1
 800465e:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004660:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8004662:	e002      	b.n	800466a <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004664:	6813      	ldr	r3, [r2, #0]
 8004666:	07db      	lsls	r3, r3, #31
 8004668:	d504      	bpl.n	8004674 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 800466a:	9b01      	ldr	r3, [sp, #4]
 800466c:	3301      	adds	r3, #1
 800466e:	42ab      	cmp	r3, r5
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	d9f7      	bls.n	8004664 <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 8004674:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8004676:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8004678:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800467c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8004680:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8004684:	b123      	cbz	r3, 8004690 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8004686:	4640      	mov	r0, r8
}
 8004688:	b002      	add	sp, #8
 800468a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 800468e:	4718      	bx	r3
}
 8004690:	b002      	add	sp, #8
 8004692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004696:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004698:	680a      	ldr	r2, [r1, #0]
 800469a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800469e:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046a0:	d12a      	bne.n	80046f8 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046a2:	05d7      	lsls	r7, r2, #23
 80046a4:	d403      	bmi.n	80046ae <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046a6:	680a      	ldr	r2, [r1, #0]
 80046a8:	f022 0208 	bic.w	r2, r2, #8
 80046ac:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80046ae:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80046b2:	2a00      	cmp	r2, #0
 80046b4:	d0a5      	beq.n	8004602 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 80046b6:	4640      	mov	r0, r8
 80046b8:	4790      	blx	r2
 80046ba:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 80046be:	e7a0      	b.n	8004602 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80046c0:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046c2:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80046c6:	f042 0204 	orr.w	r2, r2, #4
 80046ca:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80046ce:	e78f      	b.n	80045f0 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046d0:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046d2:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80046d6:	f042 0202 	orr.w	r2, r2, #2
 80046da:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80046de:	e77e      	b.n	80045de <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046e0:	680f      	ldr	r7, [r1, #0]
 80046e2:	f027 0704 	bic.w	r7, r7, #4
 80046e6:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046e8:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046ea:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80046f6:	e769      	b.n	80045cc <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046f8:	0312      	lsls	r2, r2, #12
 80046fa:	d5d8      	bpl.n	80046ae <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046fc:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8004700:	2a00      	cmp	r2, #0
 8004702:	d1d8      	bne.n	80046b6 <HAL_DMA_IRQHandler+0x112>
 8004704:	e77d      	b.n	8004602 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004706:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004708:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800470c:	f022 0216 	bic.w	r2, r2, #22
 8004710:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004712:	694a      	ldr	r2, [r1, #20]
 8004714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004718:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800471a:	b354      	cbz	r4, 8004772 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800471c:	680a      	ldr	r2, [r1, #0]
 800471e:	f022 0208 	bic.w	r2, r2, #8
 8004722:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004724:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 8004726:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
        hdma->State = HAL_DMA_STATE_READY;
 800472e:	2401      	movs	r4, #1
        __HAL_UNLOCK(hdma);
 8004730:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004732:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8004734:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004738:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 800473c:	2900      	cmp	r1, #0
 800473e:	d0a7      	beq.n	8004690 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8004740:	4640      	mov	r0, r8
}
 8004742:	b002      	add	sp, #8
 8004744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8004748:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800474a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800474e:	f47f af6f 	bne.w	8004630 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004752:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004754:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004756:	f022 0210 	bic.w	r2, r2, #16
 800475a:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800475c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8004760:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8004764:	e764      	b.n	8004630 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8004766:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800476a:	2b00      	cmp	r3, #0
 800476c:	f47f af63 	bne.w	8004636 <HAL_DMA_IRQHandler+0x92>
 8004770:	e763      	b.n	800463a <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004772:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8004776:	2a00      	cmp	r2, #0
 8004778:	d1d0      	bne.n	800471c <HAL_DMA_IRQHandler+0x178>
 800477a:	e7d3      	b.n	8004724 <HAL_DMA_IRQHandler+0x180>
 800477c:	2000201c 	.word	0x2000201c
 8004780:	1b4e81b5 	.word	0x1b4e81b5

08004784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004788:	468b      	mov	fp, r1
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800478a:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 8004958 <HAL_GPIO_Init+0x1d4>
 800478e:	6809      	ldr	r1, [r1, #0]
{
 8004790:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004792:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8004794:	f04f 0a01 	mov.w	sl, #1
 8004798:	46d9      	mov	r9, fp
 800479a:	e002      	b.n	80047a2 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800479c:	3301      	adds	r3, #1
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d079      	beq.n	8004896 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 80047a2:	fa0a f203 	lsl.w	r2, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047a6:	ea02 0b01 	and.w	fp, r2, r1
    if(iocurrent == ioposition)
 80047aa:	438a      	bics	r2, r1
 80047ac:	d1f6      	bne.n	800479c <HAL_GPIO_Init+0x18>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047ae:	f8d9 5004 	ldr.w	r5, [r9, #4]
 80047b2:	f005 0203 	and.w	r2, r5, #3
 80047b6:	1e54      	subs	r4, r2, #1
 80047b8:	2c01      	cmp	r4, #1
 80047ba:	ea4f 0743 	mov.w	r7, r3, lsl #1
 80047be:	d96d      	bls.n	800489c <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047c0:	2a03      	cmp	r2, #3
 80047c2:	f040 80ab 	bne.w	800491c <HAL_GPIO_Init+0x198>
 80047c6:	40ba      	lsls	r2, r7
 80047c8:	43d4      	mvns	r4, r2
 80047ca:	9400      	str	r4, [sp, #0]
      temp = GPIOx->MODER;
 80047cc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047ce:	9c00      	ldr	r4, [sp, #0]
 80047d0:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047d2:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047d4:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80047d8:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047da:	d0df      	beq.n	800479c <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047dc:	4c59      	ldr	r4, [pc, #356]	; (8004944 <HAL_GPIO_Init+0x1c0>)
 80047de:	2200      	movs	r2, #0
 80047e0:	9203      	str	r2, [sp, #12]
 80047e2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80047e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047e8:	6462      	str	r2, [r4, #68]	; 0x44
 80047ea:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80047ec:	f023 0603 	bic.w	r6, r3, #3
 80047f0:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80047f4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80047f8:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 80047fc:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047fe:	f003 0403 	and.w	r4, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004802:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004804:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004806:	00a4      	lsls	r4, r4, #2
 8004808:	220f      	movs	r2, #15
 800480a:	40a2      	lsls	r2, r4
 800480c:	ea27 0202 	bic.w	r2, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004810:	4f4d      	ldr	r7, [pc, #308]	; (8004948 <HAL_GPIO_Init+0x1c4>)
 8004812:	42b8      	cmp	r0, r7
 8004814:	d014      	beq.n	8004840 <HAL_GPIO_Init+0xbc>
 8004816:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800481a:	42b8      	cmp	r0, r7
 800481c:	f000 8083 	beq.w	8004926 <HAL_GPIO_Init+0x1a2>
 8004820:	4f4a      	ldr	r7, [pc, #296]	; (800494c <HAL_GPIO_Init+0x1c8>)
 8004822:	42b8      	cmp	r0, r7
 8004824:	f000 8083 	beq.w	800492e <HAL_GPIO_Init+0x1aa>
 8004828:	4f49      	ldr	r7, [pc, #292]	; (8004950 <HAL_GPIO_Init+0x1cc>)
 800482a:	42b8      	cmp	r0, r7
 800482c:	f000 8084 	beq.w	8004938 <HAL_GPIO_Init+0x1b4>
 8004830:	4f48      	ldr	r7, [pc, #288]	; (8004954 <HAL_GPIO_Init+0x1d0>)
 8004832:	42b8      	cmp	r0, r7
 8004834:	bf0c      	ite	eq
 8004836:	2704      	moveq	r7, #4
 8004838:	2707      	movne	r7, #7
 800483a:	fa07 f404 	lsl.w	r4, r7, r4
 800483e:	4322      	orrs	r2, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004840:	60b2      	str	r2, [r6, #8]
        temp = EXTI->IMR;
 8004842:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
 8004846:	ea6f 060b 	mvn.w	r6, fp
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800484a:	03ec      	lsls	r4, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800484c:	bf54      	ite	pl
 800484e:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8004850:	ea4b 0202 	orrmi.w	r2, fp, r2
        }
        EXTI->IMR = temp;
 8004854:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 8004858:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800485c:	03aa      	lsls	r2, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800485e:	bf54      	ite	pl
 8004860:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004862:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->EMR = temp;
 8004866:	f8cc 4004 	str.w	r4, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800486a:	f8dc 4008 	ldr.w	r4, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800486e:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8004870:	bf54      	ite	pl
 8004872:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004874:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->RTSR = temp;
 8004878:	f8cc 4008 	str.w	r4, [ip, #8]

        temp = EXTI->FTSR;
 800487c:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004880:	02ac      	lsls	r4, r5, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004882:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8004886:	bf54      	ite	pl
 8004888:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800488a:	ea4b 0202 	orrmi.w	r2, fp, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800488e:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8004890:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004894:	d185      	bne.n	80047a2 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8004896:	b005      	add	sp, #20
 8004898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800489c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800489e:	2403      	movs	r4, #3
 80048a0:	40bc      	lsls	r4, r7
 80048a2:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048a6:	f8d9 600c 	ldr.w	r6, [r9, #12]
 80048aa:	40be      	lsls	r6, r7
 80048ac:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 80048b0:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80048b2:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048b6:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048ba:	ea2e 0e0b 	bic.w	lr, lr, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048be:	409e      	lsls	r6, r3
 80048c0:	ea46 060e 	orr.w	r6, r6, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048c4:	43e4      	mvns	r4, r4
 80048c6:	9400      	str	r4, [sp, #0]
        GPIOx->OTYPER = temp;
 80048c8:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80048ca:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048cc:	ea06 0e04 	and.w	lr, r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048d0:	f8d9 6008 	ldr.w	r6, [r9, #8]
 80048d4:	40be      	lsls	r6, r7
 80048d6:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048da:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80048dc:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048de:	d001      	beq.n	80048e4 <HAL_GPIO_Init+0x160>
 80048e0:	40ba      	lsls	r2, r7
 80048e2:	e773      	b.n	80047cc <HAL_GPIO_Init+0x48>
        temp = GPIOx->AFR[position >> 3U];
 80048e4:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 80048e8:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048ec:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80048f0:	f8d8 4020 	ldr.w	r4, [r8, #32]
 80048f4:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048f6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80048fa:	240f      	movs	r4, #15
 80048fc:	fa04 f60e 	lsl.w	r6, r4, lr
 8004900:	9c01      	ldr	r4, [sp, #4]
 8004902:	ea24 0606 	bic.w	r6, r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004906:	f8d9 4010 	ldr.w	r4, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800490a:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800490c:	fa04 f60e 	lsl.w	r6, r4, lr
 8004910:	9c01      	ldr	r4, [sp, #4]
 8004912:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8004914:	40ba      	lsls	r2, r7
 8004916:	f8c8 6020 	str.w	r6, [r8, #32]
 800491a:	e757      	b.n	80047cc <HAL_GPIO_Init+0x48>
 800491c:	2403      	movs	r4, #3
 800491e:	40bc      	lsls	r4, r7
 8004920:	43e4      	mvns	r4, r4
 8004922:	9400      	str	r4, [sp, #0]
 8004924:	e7d1      	b.n	80048ca <HAL_GPIO_Init+0x146>
 8004926:	fa0a f404 	lsl.w	r4, sl, r4
 800492a:	4322      	orrs	r2, r4
 800492c:	e788      	b.n	8004840 <HAL_GPIO_Init+0xbc>
 800492e:	2702      	movs	r7, #2
 8004930:	fa07 f404 	lsl.w	r4, r7, r4
 8004934:	4322      	orrs	r2, r4
 8004936:	e783      	b.n	8004840 <HAL_GPIO_Init+0xbc>
 8004938:	2703      	movs	r7, #3
 800493a:	fa07 f404 	lsl.w	r4, r7, r4
 800493e:	4322      	orrs	r2, r4
 8004940:	e77e      	b.n	8004840 <HAL_GPIO_Init+0xbc>
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800
 8004948:	40020000 	.word	0x40020000
 800494c:	40020800 	.word	0x40020800
 8004950:	40020c00 	.word	0x40020c00
 8004954:	40021000 	.word	0x40021000
 8004958:	40013c00 	.word	0x40013c00

0800495c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800495c:	6903      	ldr	r3, [r0, #16]
 800495e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004960:	bf14      	ite	ne
 8004962:	2001      	movne	r0, #1
 8004964:	2000      	moveq	r0, #0
 8004966:	4770      	bx	lr

08004968 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004968:	b902      	cbnz	r2, 800496c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800496a:	0409      	lsls	r1, r1, #16
 800496c:	6181      	str	r1, [r0, #24]
  }
}
 800496e:	4770      	bx	lr

08004970 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004970:	2800      	cmp	r0, #0
 8004972:	f000 81a5 	beq.w	8004cc0 <HAL_RCC_OscConfig+0x350>
{
 8004976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800497a:	6803      	ldr	r3, [r0, #0]
 800497c:	07dd      	lsls	r5, r3, #31
{
 800497e:	b082      	sub	sp, #8
 8004980:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004982:	d52f      	bpl.n	80049e4 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004984:	49ac      	ldr	r1, [pc, #688]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
 8004986:	688a      	ldr	r2, [r1, #8]
 8004988:	f002 020c 	and.w	r2, r2, #12
 800498c:	2a04      	cmp	r2, #4
 800498e:	f000 80ec 	beq.w	8004b6a <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004992:	688a      	ldr	r2, [r1, #8]
 8004994:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004998:	2a08      	cmp	r2, #8
 800499a:	f000 80e2 	beq.w	8004b62 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800499e:	6863      	ldr	r3, [r4, #4]
 80049a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a4:	f000 80eb 	beq.w	8004b7e <HAL_RCC_OscConfig+0x20e>
 80049a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ac:	f000 8178 	beq.w	8004ca0 <HAL_RCC_OscConfig+0x330>
 80049b0:	4da1      	ldr	r5, [pc, #644]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
 80049b2:	682a      	ldr	r2, [r5, #0]
 80049b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80049b8:	602a      	str	r2, [r5, #0]
 80049ba:	682a      	ldr	r2, [r5, #0]
 80049bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049c0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f040 80e0 	bne.w	8004b88 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c8:	f7ff fa42 	bl	8003e50 <HAL_GetTick>
 80049cc:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ce:	e005      	b.n	80049dc <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049d0:	f7ff fa3e 	bl	8003e50 <HAL_GetTick>
 80049d4:	1b80      	subs	r0, r0, r6
 80049d6:	2864      	cmp	r0, #100	; 0x64
 80049d8:	f200 8100 	bhi.w	8004bdc <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049dc:	682b      	ldr	r3, [r5, #0]
 80049de:	039b      	lsls	r3, r3, #14
 80049e0:	d4f6      	bmi.n	80049d0 <HAL_RCC_OscConfig+0x60>
 80049e2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049e4:	079f      	lsls	r7, r3, #30
 80049e6:	d528      	bpl.n	8004a3a <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049e8:	4a93      	ldr	r2, [pc, #588]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
 80049ea:	6891      	ldr	r1, [r2, #8]
 80049ec:	f011 0f0c 	tst.w	r1, #12
 80049f0:	f000 8090 	beq.w	8004b14 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049f4:	6891      	ldr	r1, [r2, #8]
 80049f6:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049fa:	2908      	cmp	r1, #8
 80049fc:	f000 8086 	beq.w	8004b0c <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a00:	68e3      	ldr	r3, [r4, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8106 	beq.w	8004c14 <HAL_RCC_OscConfig+0x2a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a08:	4b8c      	ldr	r3, [pc, #560]	; (8004c3c <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0a:	4e8b      	ldr	r6, [pc, #556]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004a10:	f7ff fa1e 	bl	8003e50 <HAL_GetTick>
 8004a14:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a16:	e005      	b.n	8004a24 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a18:	f7ff fa1a 	bl	8003e50 <HAL_GetTick>
 8004a1c:	1b40      	subs	r0, r0, r5
 8004a1e:	2802      	cmp	r0, #2
 8004a20:	f200 80dc 	bhi.w	8004bdc <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a24:	6833      	ldr	r3, [r6, #0]
 8004a26:	0798      	lsls	r0, r3, #30
 8004a28:	d5f6      	bpl.n	8004a18 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a2a:	6833      	ldr	r3, [r6, #0]
 8004a2c:	6922      	ldr	r2, [r4, #16]
 8004a2e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004a32:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004a36:	6033      	str	r3, [r6, #0]
 8004a38:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a3a:	071a      	lsls	r2, r3, #28
 8004a3c:	d452      	bmi.n	8004ae4 <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a3e:	0758      	lsls	r0, r3, #29
 8004a40:	d52f      	bpl.n	8004aa2 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a42:	4a7d      	ldr	r2, [pc, #500]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
 8004a44:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004a46:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8004a4a:	d07e      	beq.n	8004b4a <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 8004a4c:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a4e:	4e7c      	ldr	r6, [pc, #496]	; (8004c40 <HAL_RCC_OscConfig+0x2d0>)
 8004a50:	6833      	ldr	r3, [r6, #0]
 8004a52:	05d9      	lsls	r1, r3, #23
 8004a54:	f140 80b2 	bpl.w	8004bbc <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a58:	68a3      	ldr	r3, [r4, #8]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	f000 80c2 	beq.w	8004be4 <HAL_RCC_OscConfig+0x274>
 8004a60:	2b05      	cmp	r3, #5
 8004a62:	f000 812f 	beq.w	8004cc4 <HAL_RCC_OscConfig+0x354>
 8004a66:	4e74      	ldr	r6, [pc, #464]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
 8004a68:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004a6a:	f022 0201 	bic.w	r2, r2, #1
 8004a6e:	6732      	str	r2, [r6, #112]	; 0x70
 8004a70:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004a72:	f022 0204 	bic.w	r2, r2, #4
 8004a76:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f040 80b8 	bne.w	8004bee <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a7e:	f7ff f9e7 	bl	8003e50 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a82:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004a86:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a88:	e005      	b.n	8004a96 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a8a:	f7ff f9e1 	bl	8003e50 <HAL_GetTick>
 8004a8e:	1bc0      	subs	r0, r0, r7
 8004a90:	4540      	cmp	r0, r8
 8004a92:	f200 80a3 	bhi.w	8004bdc <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a96:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004a98:	0798      	lsls	r0, r3, #30
 8004a9a:	d4f6      	bmi.n	8004a8a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a9c:	2d00      	cmp	r5, #0
 8004a9e:	f040 8109 	bne.w	8004cb4 <HAL_RCC_OscConfig+0x344>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aa2:	69a0      	ldr	r0, [r4, #24]
 8004aa4:	b1d0      	cbz	r0, 8004adc <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aa6:	4d64      	ldr	r5, [pc, #400]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
 8004aa8:	68ab      	ldr	r3, [r5, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	f000 80cc 	beq.w	8004c4c <HAL_RCC_OscConfig+0x2dc>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab4:	4b63      	ldr	r3, [pc, #396]	; (8004c44 <HAL_RCC_OscConfig+0x2d4>)
 8004ab6:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ab8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004aba:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004abc:	f000 810c 	beq.w	8004cd8 <HAL_RCC_OscConfig+0x368>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac0:	f7ff f9c6 	bl	8003e50 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac4:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8004ac6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac8:	e005      	b.n	8004ad6 <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aca:	f7ff f9c1 	bl	8003e50 <HAL_GetTick>
 8004ace:	1b40      	subs	r0, r0, r5
 8004ad0:	2802      	cmp	r0, #2
 8004ad2:	f200 8083 	bhi.w	8004bdc <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	019b      	lsls	r3, r3, #6
 8004ada:	d4f6      	bmi.n	8004aca <HAL_RCC_OscConfig+0x15a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004adc:	2000      	movs	r0, #0
}
 8004ade:	b002      	add	sp, #8
 8004ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ae4:	6963      	ldr	r3, [r4, #20]
 8004ae6:	b303      	cbz	r3, 8004b2a <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8004ae8:	4b57      	ldr	r3, [pc, #348]	; (8004c48 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aea:	4e53      	ldr	r6, [pc, #332]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8004aec:	2201      	movs	r2, #1
 8004aee:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004af0:	f7ff f9ae 	bl	8003e50 <HAL_GetTick>
 8004af4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004af6:	e004      	b.n	8004b02 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004af8:	f7ff f9aa 	bl	8003e50 <HAL_GetTick>
 8004afc:	1b40      	subs	r0, r0, r5
 8004afe:	2802      	cmp	r0, #2
 8004b00:	d86c      	bhi.n	8004bdc <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b02:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004b04:	079b      	lsls	r3, r3, #30
 8004b06:	d5f7      	bpl.n	8004af8 <HAL_RCC_OscConfig+0x188>
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	e798      	b.n	8004a3e <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b0c:	6852      	ldr	r2, [r2, #4]
 8004b0e:	0256      	lsls	r6, r2, #9
 8004b10:	f53f af76 	bmi.w	8004a00 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b14:	4a48      	ldr	r2, [pc, #288]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	0795      	lsls	r5, r2, #30
 8004b1a:	d543      	bpl.n	8004ba4 <HAL_RCC_OscConfig+0x234>
 8004b1c:	68e2      	ldr	r2, [r4, #12]
 8004b1e:	2a01      	cmp	r2, #1
 8004b20:	d040      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 8004b22:	2001      	movs	r0, #1
}
 8004b24:	b002      	add	sp, #8
 8004b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004b2a:	4a47      	ldr	r2, [pc, #284]	; (8004c48 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b2c:	4e42      	ldr	r6, [pc, #264]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8004b2e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004b30:	f7ff f98e 	bl	8003e50 <HAL_GetTick>
 8004b34:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b36:	e004      	b.n	8004b42 <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b38:	f7ff f98a 	bl	8003e50 <HAL_GetTick>
 8004b3c:	1b40      	subs	r0, r0, r5
 8004b3e:	2802      	cmp	r0, #2
 8004b40:	d84c      	bhi.n	8004bdc <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b42:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004b44:	079f      	lsls	r7, r3, #30
 8004b46:	d4f7      	bmi.n	8004b38 <HAL_RCC_OscConfig+0x1c8>
 8004b48:	e7de      	b.n	8004b08 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4a:	9301      	str	r3, [sp, #4]
 8004b4c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b52:	6413      	str	r3, [r2, #64]	; 0x40
 8004b54:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	9301      	str	r3, [sp, #4]
 8004b5c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004b5e:	2501      	movs	r5, #1
 8004b60:	e775      	b.n	8004a4e <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b62:	684a      	ldr	r2, [r1, #4]
 8004b64:	0250      	lsls	r0, r2, #9
 8004b66:	f57f af1a 	bpl.w	800499e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6a:	4a33      	ldr	r2, [pc, #204]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	0391      	lsls	r1, r2, #14
 8004b70:	f57f af38 	bpl.w	80049e4 <HAL_RCC_OscConfig+0x74>
 8004b74:	6862      	ldr	r2, [r4, #4]
 8004b76:	2a00      	cmp	r2, #0
 8004b78:	f47f af34 	bne.w	80049e4 <HAL_RCC_OscConfig+0x74>
 8004b7c:	e7d1      	b.n	8004b22 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b7e:	4a2e      	ldr	r2, [pc, #184]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
 8004b80:	6813      	ldr	r3, [r2, #0]
 8004b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b86:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004b88:	f7ff f962 	bl	8003e50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8c:	4e2a      	ldr	r6, [pc, #168]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8004b8e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b90:	e004      	b.n	8004b9c <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b92:	f7ff f95d 	bl	8003e50 <HAL_GetTick>
 8004b96:	1b40      	subs	r0, r0, r5
 8004b98:	2864      	cmp	r0, #100	; 0x64
 8004b9a:	d81f      	bhi.n	8004bdc <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9c:	6833      	ldr	r3, [r6, #0]
 8004b9e:	039a      	lsls	r2, r3, #14
 8004ba0:	d5f7      	bpl.n	8004b92 <HAL_RCC_OscConfig+0x222>
 8004ba2:	e71e      	b.n	80049e2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba4:	4924      	ldr	r1, [pc, #144]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
 8004ba6:	6920      	ldr	r0, [r4, #16]
 8004ba8:	680a      	ldr	r2, [r1, #0]
 8004baa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004bae:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004bb2:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb4:	071a      	lsls	r2, r3, #28
 8004bb6:	f57f af42 	bpl.w	8004a3e <HAL_RCC_OscConfig+0xce>
 8004bba:	e793      	b.n	8004ae4 <HAL_RCC_OscConfig+0x174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bbc:	6833      	ldr	r3, [r6, #0]
 8004bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004bc4:	f7ff f944 	bl	8003e50 <HAL_GetTick>
 8004bc8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bca:	6833      	ldr	r3, [r6, #0]
 8004bcc:	05da      	lsls	r2, r3, #23
 8004bce:	f53f af43 	bmi.w	8004a58 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd2:	f7ff f93d 	bl	8003e50 <HAL_GetTick>
 8004bd6:	1bc0      	subs	r0, r0, r7
 8004bd8:	2802      	cmp	r0, #2
 8004bda:	d9f6      	bls.n	8004bca <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8004bdc:	2003      	movs	r0, #3
}
 8004bde:	b002      	add	sp, #8
 8004be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004be4:	4a14      	ldr	r2, [pc, #80]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
 8004be6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004be8:	f043 0301 	orr.w	r3, r3, #1
 8004bec:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004bee:	f7ff f92f 	bl	8003e50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf2:	4f11      	ldr	r7, [pc, #68]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8004bf4:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bf6:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfa:	e004      	b.n	8004c06 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfc:	f7ff f928 	bl	8003e50 <HAL_GetTick>
 8004c00:	1b80      	subs	r0, r0, r6
 8004c02:	4540      	cmp	r0, r8
 8004c04:	d8ea      	bhi.n	8004bdc <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c08:	079b      	lsls	r3, r3, #30
 8004c0a:	d5f7      	bpl.n	8004bfc <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 8004c0c:	2d00      	cmp	r5, #0
 8004c0e:	f43f af48 	beq.w	8004aa2 <HAL_RCC_OscConfig+0x132>
 8004c12:	e04f      	b.n	8004cb4 <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_HSI_DISABLE();
 8004c14:	4a09      	ldr	r2, [pc, #36]	; (8004c3c <HAL_RCC_OscConfig+0x2cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c16:	4e08      	ldr	r6, [pc, #32]	; (8004c38 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8004c18:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004c1a:	f7ff f919 	bl	8003e50 <HAL_GetTick>
 8004c1e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c20:	e004      	b.n	8004c2c <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c22:	f7ff f915 	bl	8003e50 <HAL_GetTick>
 8004c26:	1b40      	subs	r0, r0, r5
 8004c28:	2802      	cmp	r0, #2
 8004c2a:	d8d7      	bhi.n	8004bdc <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c2c:	6833      	ldr	r3, [r6, #0]
 8004c2e:	0799      	lsls	r1, r3, #30
 8004c30:	d4f7      	bmi.n	8004c22 <HAL_RCC_OscConfig+0x2b2>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	e701      	b.n	8004a3a <HAL_RCC_OscConfig+0xca>
 8004c36:	bf00      	nop
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	42470000 	.word	0x42470000
 8004c40:	40007000 	.word	0x40007000
 8004c44:	42470060 	.word	0x42470060
 8004c48:	42470e80 	.word	0x42470e80
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c4c:	2801      	cmp	r0, #1
 8004c4e:	f43f af46 	beq.w	8004ade <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->PLLCFGR;
 8004c52:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c54:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c56:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c5a:	4291      	cmp	r1, r2
 8004c5c:	f47f af61 	bne.w	8004b22 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c60:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c62:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c66:	4291      	cmp	r1, r2
 8004c68:	f47f af5b 	bne.w	8004b22 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004c6e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004c72:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c74:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004c78:	f47f af53 	bne.w	8004b22 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004c7e:	0852      	lsrs	r2, r2, #1
 8004c80:	3a01      	subs	r2, #1
 8004c82:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c86:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004c8a:	f47f af4a 	bne.w	8004b22 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c90:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c94:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8004c98:	bf14      	ite	ne
 8004c9a:	2001      	movne	r0, #1
 8004c9c:	2000      	moveq	r0, #0
 8004c9e:	e71e      	b.n	8004ade <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ca0:	4b24      	ldr	r3, [pc, #144]	; (8004d34 <HAL_RCC_OscConfig+0x3c4>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004cb0:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cb2:	e769      	b.n	8004b88 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb4:	4a1f      	ldr	r2, [pc, #124]	; (8004d34 <HAL_RCC_OscConfig+0x3c4>)
 8004cb6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8004cbe:	e6f0      	b.n	8004aa2 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8004cc0:	2001      	movs	r0, #1
}
 8004cc2:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc4:	4b1b      	ldr	r3, [pc, #108]	; (8004d34 <HAL_RCC_OscConfig+0x3c4>)
 8004cc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cc8:	f042 0204 	orr.w	r2, r2, #4
 8004ccc:	671a      	str	r2, [r3, #112]	; 0x70
 8004cce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cd0:	f042 0201 	orr.w	r2, r2, #1
 8004cd4:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cd6:	e78a      	b.n	8004bee <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8004cd8:	f7ff f8ba 	bl	8003e50 <HAL_GetTick>
 8004cdc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cde:	e005      	b.n	8004cec <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce0:	f7ff f8b6 	bl	8003e50 <HAL_GetTick>
 8004ce4:	1b80      	subs	r0, r0, r6
 8004ce6:	2802      	cmp	r0, #2
 8004ce8:	f63f af78 	bhi.w	8004bdc <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	0199      	lsls	r1, r3, #6
 8004cf0:	d4f6      	bmi.n	8004ce0 <HAL_RCC_OscConfig+0x370>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cf2:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8004cf6:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8004cfa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004cfc:	4333      	orrs	r3, r6
 8004cfe:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004d02:	0852      	lsrs	r2, r2, #1
 8004d04:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004d08:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8004d0a:	490b      	ldr	r1, [pc, #44]	; (8004d38 <HAL_RCC_OscConfig+0x3c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d0c:	4e09      	ldr	r6, [pc, #36]	; (8004d34 <HAL_RCC_OscConfig+0x3c4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004d12:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d14:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004d16:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8004d18:	f7ff f89a 	bl	8003e50 <HAL_GetTick>
 8004d1c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1e:	e005      	b.n	8004d2c <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d20:	f7ff f896 	bl	8003e50 <HAL_GetTick>
 8004d24:	1b00      	subs	r0, r0, r4
 8004d26:	2802      	cmp	r0, #2
 8004d28:	f63f af58 	bhi.w	8004bdc <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2c:	6833      	ldr	r3, [r6, #0]
 8004d2e:	019a      	lsls	r2, r3, #6
 8004d30:	d5f6      	bpl.n	8004d20 <HAL_RCC_OscConfig+0x3b0>
 8004d32:	e6d3      	b.n	8004adc <HAL_RCC_OscConfig+0x16c>
 8004d34:	40023800 	.word	0x40023800
 8004d38:	42470060 	.word	0x42470060

08004d3c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d3c:	4917      	ldr	r1, [pc, #92]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x60>)
{
 8004d3e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d40:	688b      	ldr	r3, [r1, #8]
 8004d42:	f003 030c 	and.w	r3, r3, #12
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d01b      	beq.n	8004d82 <HAL_RCC_GetSysClockFreq+0x46>
 8004d4a:	2b08      	cmp	r3, #8
 8004d4c:	d117      	bne.n	8004d7e <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d4e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d50:	684b      	ldr	r3, [r1, #4]
 8004d52:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d56:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d5a:	d114      	bne.n	8004d86 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5c:	6849      	ldr	r1, [r1, #4]
 8004d5e:	4810      	ldr	r0, [pc, #64]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x64>)
 8004d60:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004d64:	fba1 0100 	umull	r0, r1, r1, r0
 8004d68:	f7fb ff76 	bl	8000c58 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x60>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004d74:	3301      	adds	r3, #1
 8004d76:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004d78:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004d7c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8004d7e:	4808      	ldr	r0, [pc, #32]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8004d80:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d82:	4808      	ldr	r0, [pc, #32]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8004d84:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d86:	684b      	ldr	r3, [r1, #4]
 8004d88:	4806      	ldr	r0, [pc, #24]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x68>)
 8004d8a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004d8e:	fba3 0100 	umull	r0, r1, r3, r0
 8004d92:	2300      	movs	r3, #0
 8004d94:	f7fb ff60 	bl	8000c58 <__aeabi_uldivmod>
 8004d98:	e7e8      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x30>
 8004d9a:	bf00      	nop
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	00f42400 	.word	0x00f42400
 8004da4:	007a1200 	.word	0x007a1200

08004da8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004da8:	2800      	cmp	r0, #0
 8004daa:	f000 8087 	beq.w	8004ebc <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dae:	4a48      	ldr	r2, [pc, #288]	; (8004ed0 <HAL_RCC_ClockConfig+0x128>)
 8004db0:	6813      	ldr	r3, [r2, #0]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	428b      	cmp	r3, r1
{
 8004db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dbc:	460d      	mov	r5, r1
 8004dbe:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc0:	d209      	bcs.n	8004dd6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc2:	b2cb      	uxtb	r3, r1
 8004dc4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc6:	6813      	ldr	r3, [r2, #0]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	428b      	cmp	r3, r1
 8004dce:	d002      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004dd0:	2001      	movs	r0, #1
}
 8004dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	0798      	lsls	r0, r3, #30
 8004dda:	d514      	bpl.n	8004e06 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ddc:	0759      	lsls	r1, r3, #29
 8004dde:	d504      	bpl.n	8004dea <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004de0:	493c      	ldr	r1, [pc, #240]	; (8004ed4 <HAL_RCC_ClockConfig+0x12c>)
 8004de2:	688a      	ldr	r2, [r1, #8]
 8004de4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8004de8:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dea:	071a      	lsls	r2, r3, #28
 8004dec:	d504      	bpl.n	8004df8 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dee:	4939      	ldr	r1, [pc, #228]	; (8004ed4 <HAL_RCC_ClockConfig+0x12c>)
 8004df0:	688a      	ldr	r2, [r1, #8]
 8004df2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8004df6:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df8:	4936      	ldr	r1, [pc, #216]	; (8004ed4 <HAL_RCC_ClockConfig+0x12c>)
 8004dfa:	68a0      	ldr	r0, [r4, #8]
 8004dfc:	688a      	ldr	r2, [r1, #8]
 8004dfe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004e02:	4302      	orrs	r2, r0
 8004e04:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e06:	07df      	lsls	r7, r3, #31
 8004e08:	d521      	bpl.n	8004e4e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e0a:	6862      	ldr	r2, [r4, #4]
 8004e0c:	2a01      	cmp	r2, #1
 8004e0e:	d057      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e10:	1e93      	subs	r3, r2, #2
 8004e12:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e14:	4b2f      	ldr	r3, [pc, #188]	; (8004ed4 <HAL_RCC_ClockConfig+0x12c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e18:	d94d      	bls.n	8004eb6 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1a:	0799      	lsls	r1, r3, #30
 8004e1c:	d5d8      	bpl.n	8004dd0 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e1e:	4e2d      	ldr	r6, [pc, #180]	; (8004ed4 <HAL_RCC_ClockConfig+0x12c>)
 8004e20:	68b3      	ldr	r3, [r6, #8]
 8004e22:	f023 0303 	bic.w	r3, r3, #3
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004e2a:	f7ff f811 	bl	8003e50 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e2e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004e32:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e34:	e004      	b.n	8004e40 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e36:	f7ff f80b 	bl	8003e50 <HAL_GetTick>
 8004e3a:	1bc0      	subs	r0, r0, r7
 8004e3c:	4540      	cmp	r0, r8
 8004e3e:	d844      	bhi.n	8004eca <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e40:	68b3      	ldr	r3, [r6, #8]
 8004e42:	6862      	ldr	r2, [r4, #4]
 8004e44:	f003 030c 	and.w	r3, r3, #12
 8004e48:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004e4c:	d1f3      	bne.n	8004e36 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e4e:	4a20      	ldr	r2, [pc, #128]	; (8004ed0 <HAL_RCC_ClockConfig+0x128>)
 8004e50:	6813      	ldr	r3, [r2, #0]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	42ab      	cmp	r3, r5
 8004e58:	d906      	bls.n	8004e68 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5a:	b2eb      	uxtb	r3, r5
 8004e5c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5e:	6813      	ldr	r3, [r2, #0]
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	42ab      	cmp	r3, r5
 8004e66:	d1b3      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	075a      	lsls	r2, r3, #29
 8004e6c:	d506      	bpl.n	8004e7c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e6e:	4919      	ldr	r1, [pc, #100]	; (8004ed4 <HAL_RCC_ClockConfig+0x12c>)
 8004e70:	68e0      	ldr	r0, [r4, #12]
 8004e72:	688a      	ldr	r2, [r1, #8]
 8004e74:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004e78:	4302      	orrs	r2, r0
 8004e7a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e7c:	071b      	lsls	r3, r3, #28
 8004e7e:	d507      	bpl.n	8004e90 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e80:	4a14      	ldr	r2, [pc, #80]	; (8004ed4 <HAL_RCC_ClockConfig+0x12c>)
 8004e82:	6921      	ldr	r1, [r4, #16]
 8004e84:	6893      	ldr	r3, [r2, #8]
 8004e86:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004e8e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e90:	f7ff ff54 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 8004e94:	4a0f      	ldr	r2, [pc, #60]	; (8004ed4 <HAL_RCC_ClockConfig+0x12c>)
 8004e96:	4c10      	ldr	r4, [pc, #64]	; (8004ed8 <HAL_RCC_ClockConfig+0x130>)
 8004e98:	6892      	ldr	r2, [r2, #8]
 8004e9a:	4910      	ldr	r1, [pc, #64]	; (8004edc <HAL_RCC_ClockConfig+0x134>)
 8004e9c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8004ea4:	480e      	ldr	r0, [pc, #56]	; (8004ee0 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ea6:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8004ea8:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eaa:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8004eac:	f7fe ff86 	bl	8003dbc <HAL_InitTick>
  return HAL_OK;
 8004eb0:	2000      	movs	r0, #0
}
 8004eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb6:	0198      	lsls	r0, r3, #6
 8004eb8:	d4b1      	bmi.n	8004e1e <HAL_RCC_ClockConfig+0x76>
 8004eba:	e789      	b.n	8004dd0 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004ebc:	2001      	movs	r0, #1
}
 8004ebe:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec0:	4b04      	ldr	r3, [pc, #16]	; (8004ed4 <HAL_RCC_ClockConfig+0x12c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	039e      	lsls	r6, r3, #14
 8004ec6:	d4aa      	bmi.n	8004e1e <HAL_RCC_ClockConfig+0x76>
 8004ec8:	e782      	b.n	8004dd0 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8004eca:	2003      	movs	r0, #3
 8004ecc:	e781      	b.n	8004dd2 <HAL_RCC_ClockConfig+0x2a>
 8004ece:	bf00      	nop
 8004ed0:	40023c00 	.word	0x40023c00
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	0800b28c 	.word	0x0800b28c
 8004edc:	2000201c 	.word	0x2000201c
 8004ee0:	20002024 	.word	0x20002024

08004ee4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ee4:	4b04      	ldr	r3, [pc, #16]	; (8004ef8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004ee6:	4a05      	ldr	r2, [pc, #20]	; (8004efc <HAL_RCC_GetPCLK1Freq+0x18>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004eea:	4905      	ldr	r1, [pc, #20]	; (8004f00 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004eec:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004ef0:	6808      	ldr	r0, [r1, #0]
 8004ef2:	5cd3      	ldrb	r3, [r2, r3]
}
 8004ef4:	40d8      	lsrs	r0, r3
 8004ef6:	4770      	bx	lr
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	0800b29c 	.word	0x0800b29c
 8004f00:	2000201c 	.word	0x2000201c

08004f04 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f04:	4b04      	ldr	r3, [pc, #16]	; (8004f18 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004f06:	4a05      	ldr	r2, [pc, #20]	; (8004f1c <HAL_RCC_GetPCLK2Freq+0x18>)
 8004f08:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004f0a:	4905      	ldr	r1, [pc, #20]	; (8004f20 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f0c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004f10:	6808      	ldr	r0, [r1, #0]
 8004f12:	5cd3      	ldrb	r3, [r2, r3]
}
 8004f14:	40d8      	lsrs	r0, r3
 8004f16:	4770      	bx	lr
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	0800b29c 	.word	0x0800b29c
 8004f20:	2000201c 	.word	0x2000201c

08004f24 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f28:	b082      	sub	sp, #8
 8004f2a:	4698      	mov	r8, r3
 8004f2c:	4616      	mov	r6, r2
 8004f2e:	460c      	mov	r4, r1
 8004f30:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f32:	f7fe ff8d 	bl	8003e50 <HAL_GetTick>
 8004f36:	44b0      	add	r8, r6
 8004f38:	eba8 0500 	sub.w	r5, r8, r0
  tmp_tickstart = HAL_GetTick();
 8004f3c:	f7fe ff88 	bl	8003e50 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f40:	4b27      	ldr	r3, [pc, #156]	; (8004fe0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004f48:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 8004f4c:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f4e:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f50:	1c73      	adds	r3, r6, #1
 8004f52:	6839      	ldr	r1, [r7, #0]
 8004f54:	d107      	bne.n	8004f66 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
 8004f56:	688b      	ldr	r3, [r1, #8]
 8004f58:	ea34 0303 	bics.w	r3, r4, r3
 8004f5c:	d0fb      	beq.n	8004f56 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
      }
      count--;
    }
  }

  return HAL_OK;
 8004f5e:	2000      	movs	r0, #0
}
 8004f60:	b002      	add	sp, #8
 8004f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f66:	688b      	ldr	r3, [r1, #8]
 8004f68:	ea34 0303 	bics.w	r3, r4, r3
 8004f6c:	d1f7      	bne.n	8004f5e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f6e:	f7fe ff6f 	bl	8003e50 <HAL_GetTick>
 8004f72:	eba0 0308 	sub.w	r3, r0, r8
 8004f76:	42ab      	cmp	r3, r5
 8004f78:	d208      	bcs.n	8004f8c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
      if(count == 0U)
 8004f7a:	9a01      	ldr	r2, [sp, #4]
      count--;
 8004f7c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004f7e:	2a00      	cmp	r2, #0
      count--;
 8004f80:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 8004f84:	bf08      	it	eq
 8004f86:	2500      	moveq	r5, #0
      count--;
 8004f88:	9301      	str	r3, [sp, #4]
 8004f8a:	e7e1      	b.n	8004f50 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f8c:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f90:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f92:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f96:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f9a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f9c:	d014      	beq.n	8004fc8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004fa4:	d007      	beq.n	8004fb6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8004fa6:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8004fa8:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8004faa:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004fae:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8004fb2:	2003      	movs	r0, #3
 8004fb4:	e7d4      	b.n	8004f60 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
          SPI_RESET_CRC(hspi);
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	e7ee      	b.n	8004fa6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004fce:	d002      	beq.n	8004fd6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fd0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004fd4:	d1e3      	bne.n	8004f9e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e7de      	b.n	8004f9e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
 8004fe0:	2000201c 	.word	0x2000201c

08004fe4 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	d05b      	beq.n	80050a0 <HAL_SPI_Init+0xbc>
{
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fea:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8004fec:	4604      	mov	r4, r0
 8004fee:	2f00      	cmp	r7, #0
 8004ff0:	d046      	beq.n	8005080 <HAL_SPI_Init+0x9c>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ff2:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ff4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ff8:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ffc:	2000      	movs	r0, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ffe:	f002 01ff 	and.w	r1, r2, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005002:	62a0      	str	r0, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005004:	2a00      	cmp	r2, #0
 8005006:	d041      	beq.n	800508c <HAL_SPI_Init+0xa8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005008:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800500c:	68e1      	ldr	r1, [r4, #12]
 800500e:	69a6      	ldr	r6, [r4, #24]
 8005010:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005014:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 8005018:	6923      	ldr	r3, [r4, #16]
 800501a:	432a      	orrs	r2, r5
 800501c:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8005020:	430a      	orrs	r2, r1
 8005022:	f003 0102 	and.w	r1, r3, #2
 8005026:	6963      	ldr	r3, [r4, #20]
 8005028:	430a      	orrs	r2, r1
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	431a      	orrs	r2, r3
 8005030:	69e3      	ldr	r3, [r4, #28]
  __HAL_SPI_DISABLE(hspi);
 8005032:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005034:	f003 0e38 	and.w	lr, r3, #56	; 0x38
 8005038:	f406 7300 	and.w	r3, r6, #512	; 0x200
 800503c:	4313      	orrs	r3, r2
  hspi->State = HAL_SPI_STATE_BUSY;
 800503e:	2202      	movs	r2, #2
 8005040:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005044:	6a22      	ldr	r2, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005046:	0c35      	lsrs	r5, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005048:	ea43 030e 	orr.w	r3, r3, lr
 800504c:	f002 0680 	and.w	r6, r2, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005050:	f005 0204 	and.w	r2, r5, #4
  __HAL_SPI_DISABLE(hspi);
 8005054:	680d      	ldr	r5, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005056:	f007 0710 	and.w	r7, r7, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800505a:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800505c:	433a      	orrs	r2, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800505e:	4303      	orrs	r3, r0
  __HAL_SPI_DISABLE(hspi);
 8005060:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8005064:	600d      	str	r5, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005066:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005068:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800506a:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800506c:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800506e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8005072:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005074:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005076:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005078:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  return HAL_OK;
 800507c:	4610      	mov	r0, r2
}
 800507e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005080:	6843      	ldr	r3, [r0, #4]
 8005082:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005086:	d0b7      	beq.n	8004ff8 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005088:	61c7      	str	r7, [r0, #28]
 800508a:	e7b5      	b.n	8004ff8 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 800508c:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800508e:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8005092:	f7fe fc9b 	bl	80039cc <HAL_SPI_MspInit>
 8005096:	e9d4 7309 	ldrd	r7, r3, [r4, #36]	; 0x24
 800509a:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 800509e:	e7b3      	b.n	8005008 <HAL_SPI_Init+0x24>
    return HAL_ERROR;
 80050a0:	2001      	movs	r0, #1
}
 80050a2:	4770      	bx	lr

080050a4 <HAL_SPI_Transmit>:
{
 80050a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80050aa:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 80050ae:	2801      	cmp	r0, #1
{
 80050b0:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80050b2:	f000 8086 	beq.w	80051c2 <HAL_SPI_Transmit+0x11e>
 80050b6:	461d      	mov	r5, r3
 80050b8:	2301      	movs	r3, #1
 80050ba:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80050be:	4688      	mov	r8, r1
 80050c0:	4617      	mov	r7, r2
 80050c2:	f7fe fec5 	bl	8003e50 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80050c6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80050ca:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80050cc:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80050ce:	b2d8      	uxtb	r0, r3
 80050d0:	d009      	beq.n	80050e6 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 80050d2:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80050d4:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80050d6:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80050d8:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050dc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80050e0:	b002      	add	sp, #8
 80050e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80050e6:	f1b8 0f00 	cmp.w	r8, #0
 80050ea:	d0f3      	beq.n	80050d4 <HAL_SPI_Transmit+0x30>
 80050ec:	2f00      	cmp	r7, #0
 80050ee:	d0f1      	beq.n	80050d4 <HAL_SPI_Transmit+0x30>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050f0:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80050f2:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050f4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050f8:	2303      	movs	r3, #3
 80050fa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050fe:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8005108:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800510c:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800510e:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005110:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005112:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005114:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005116:	f000 8085 	beq.w	8005224 <HAL_SPI_Transmit+0x180>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800511a:	6802      	ldr	r2, [r0, #0]
 800511c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_DISABLE(hspi);
 800511e:	4603      	mov	r3, r0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005120:	d403      	bmi.n	800512a <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8005122:	6802      	ldr	r2, [r0, #0]
 8005124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005128:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800512a:	68e2      	ldr	r2, [r4, #12]
 800512c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005130:	d04b      	beq.n	80051ca <HAL_SPI_Transmit+0x126>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005132:	6863      	ldr	r3, [r4, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8097 	beq.w	8005268 <HAL_SPI_Transmit+0x1c4>
 800513a:	2f01      	cmp	r7, #1
 800513c:	f000 8094 	beq.w	8005268 <HAL_SPI_Transmit+0x1c4>
    while (hspi->TxXferCount > 0U)
 8005140:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005142:	b29b      	uxth	r3, r3
 8005144:	b1ab      	cbz	r3, 8005172 <HAL_SPI_Transmit+0xce>
 8005146:	1c68      	adds	r0, r5, #1
 8005148:	f040 8083 	bne.w	8005252 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	0791      	lsls	r1, r2, #30
 8005152:	f140 8094 	bpl.w	800527e <HAL_SPI_Transmit+0x1da>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005156:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005158:	7812      	ldrb	r2, [r2, #0]
 800515a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800515c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800515e:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005160:	3a01      	subs	r2, #1
 8005162:	b292      	uxth	r2, r2
 8005164:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8005166:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005168:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 800516a:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800516c:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 800516e:	2a00      	cmp	r2, #0
 8005170:	d1ec      	bne.n	800514c <HAL_SPI_Transmit+0xa8>
 8005172:	6861      	ldr	r1, [r4, #4]
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005174:	4b5b      	ldr	r3, [pc, #364]	; (80052e4 <HAL_SPI_Transmit+0x240>)
 8005176:	4a5c      	ldr	r2, [pc, #368]	; (80052e8 <HAL_SPI_Transmit+0x244>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	0d5b      	lsrs	r3, r3, #21
 8005180:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005184:	fb02 f303 	mul.w	r3, r2, r3
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005188:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800518c:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800518e:	d107      	bne.n	80051a0 <HAL_SPI_Transmit+0xfc>
 8005190:	e098      	b.n	80052c4 <HAL_SPI_Transmit+0x220>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8005192:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005194:	6822      	ldr	r2, [r4, #0]
      count--;
 8005196:	3b01      	subs	r3, #1
 8005198:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800519a:	6893      	ldr	r3, [r2, #8]
 800519c:	061b      	lsls	r3, r3, #24
 800519e:	d502      	bpl.n	80051a6 <HAL_SPI_Transmit+0x102>
      if (count == 0U)
 80051a0:	9b01      	ldr	r3, [sp, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f5      	bne.n	8005192 <HAL_SPI_Transmit+0xee>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051a6:	68a3      	ldr	r3, [r4, #8]
 80051a8:	b933      	cbnz	r3, 80051b8 <HAL_SPI_Transmit+0x114>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051aa:	6822      	ldr	r2, [r4, #0]
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	68d3      	ldr	r3, [r2, #12]
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	6893      	ldr	r3, [r2, #8]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80051ba:	3800      	subs	r0, #0
 80051bc:	bf18      	it	ne
 80051be:	2001      	movne	r0, #1
error:
 80051c0:	e788      	b.n	80050d4 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 80051c2:	2002      	movs	r0, #2
}
 80051c4:	b002      	add	sp, #8
 80051c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ca:	6861      	ldr	r1, [r4, #4]
 80051cc:	2900      	cmp	r1, #0
 80051ce:	d176      	bne.n	80052be <HAL_SPI_Transmit+0x21a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051d0:	4647      	mov	r7, r8
 80051d2:	f837 2b02 	ldrh.w	r2, [r7], #2
 80051d6:	60c2      	str	r2, [r0, #12]
      hspi->TxXferCount--;
 80051d8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051da:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80051dc:	3a01      	subs	r2, #1
 80051de:	b292      	uxth	r2, r2
 80051e0:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80051e2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80051e4:	b292      	uxth	r2, r2
 80051e6:	2a00      	cmp	r2, #0
 80051e8:	d0c4      	beq.n	8005174 <HAL_SPI_Transmit+0xd0>
 80051ea:	1c6a      	adds	r2, r5, #1
 80051ec:	d15e      	bne.n	80052ac <HAL_SPI_Transmit+0x208>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051ee:	6883      	ldr	r3, [r0, #8]
 80051f0:	079f      	lsls	r7, r3, #30
 80051f2:	d50f      	bpl.n	8005214 <HAL_SPI_Transmit+0x170>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80051f6:	f832 3b02 	ldrh.w	r3, [r2], #2
 80051fa:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 80051fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051fe:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005200:	3b01      	subs	r3, #1
 8005202:	b29b      	uxth	r3, r3
 8005204:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8005206:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0b1      	beq.n	8005172 <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800520e:	6883      	ldr	r3, [r0, #8]
 8005210:	079f      	lsls	r7, r3, #30
 8005212:	d4ef      	bmi.n	80051f4 <HAL_SPI_Transmit+0x150>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005214:	f7fe fe1c 	bl	8003e50 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8005218:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800521a:	b29b      	uxth	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0a8      	beq.n	8005172 <HAL_SPI_Transmit+0xce>
 8005220:	6820      	ldr	r0, [r4, #0]
 8005222:	e7e4      	b.n	80051ee <HAL_SPI_Transmit+0x14a>
    __HAL_SPI_DISABLE(hspi);
 8005224:	6803      	ldr	r3, [r0, #0]
 8005226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800522a:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 800522c:	6803      	ldr	r3, [r0, #0]
 800522e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005232:	6003      	str	r3, [r0, #0]
 8005234:	e771      	b.n	800511a <HAL_SPI_Transmit+0x76>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005236:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005238:	7812      	ldrb	r2, [r2, #0]
 800523a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800523c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800523e:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005240:	3b01      	subs	r3, #1
 8005242:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005244:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8005246:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005248:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 800524a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d08f      	beq.n	8005172 <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	0792      	lsls	r2, r2, #30
 8005258:	d4ed      	bmi.n	8005236 <HAL_SPI_Transmit+0x192>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800525a:	f7fe fdf9 	bl	8003e50 <HAL_GetTick>
 800525e:	1b80      	subs	r0, r0, r6
 8005260:	42a8      	cmp	r0, r5
 8005262:	d3f2      	bcc.n	800524a <HAL_SPI_Transmit+0x1a6>
          errorcode = HAL_TIMEOUT;
 8005264:	2003      	movs	r0, #3
 8005266:	e735      	b.n	80050d4 <HAL_SPI_Transmit+0x30>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005268:	f898 3000 	ldrb.w	r3, [r8]
 800526c:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 800526e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005270:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005272:	3b01      	subs	r3, #1
 8005274:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005276:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8005278:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800527a:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800527c:	e760      	b.n	8005140 <HAL_SPI_Transmit+0x9c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800527e:	f7fe fde7 	bl	8003e50 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8005282:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	f47f af60 	bne.w	800514c <HAL_SPI_Transmit+0xa8>
 800528c:	e771      	b.n	8005172 <HAL_SPI_Transmit+0xce>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800528e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005290:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005294:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8005296:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005298:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800529a:	3b01      	subs	r3, #1
 800529c:	b29b      	uxth	r3, r3
 800529e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80052a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f43f af64 	beq.w	8005172 <HAL_SPI_Transmit+0xce>
 80052aa:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	0791      	lsls	r1, r2, #30
 80052b0:	d4ed      	bmi.n	800528e <HAL_SPI_Transmit+0x1ea>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052b2:	f7fe fdcd 	bl	8003e50 <HAL_GetTick>
 80052b6:	1b80      	subs	r0, r0, r6
 80052b8:	42a8      	cmp	r0, r5
 80052ba:	d3f1      	bcc.n	80052a0 <HAL_SPI_Transmit+0x1fc>
 80052bc:	e7d2      	b.n	8005264 <HAL_SPI_Transmit+0x1c0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052be:	2f01      	cmp	r7, #1
 80052c0:	d18f      	bne.n	80051e2 <HAL_SPI_Transmit+0x13e>
 80052c2:	e785      	b.n	80051d0 <HAL_SPI_Transmit+0x12c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052c4:	4633      	mov	r3, r6
 80052c6:	462a      	mov	r2, r5
 80052c8:	2180      	movs	r1, #128	; 0x80
 80052ca:	4620      	mov	r0, r4
 80052cc:	f7ff fe2a 	bl	8004f24 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	f43f af68 	beq.w	80051a6 <HAL_SPI_Transmit+0x102>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052d8:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052da:	4313      	orrs	r3, r2
 80052dc:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052de:	6562      	str	r2, [r4, #84]	; 0x54
 80052e0:	e761      	b.n	80051a6 <HAL_SPI_Transmit+0x102>
 80052e2:	bf00      	nop
 80052e4:	2000201c 	.word	0x2000201c
 80052e8:	165e9f81 	.word	0x165e9f81

080052ec <HAL_SPI_TransmitReceive>:
{
 80052ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052f0:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80052f2:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 80052f6:	2801      	cmp	r0, #1
{
 80052f8:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 80052fa:	f000 80a4 	beq.w	8005446 <HAL_SPI_TransmitReceive+0x15a>
 80052fe:	461f      	mov	r7, r3
 8005300:	2301      	movs	r3, #1
 8005302:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005306:	4691      	mov	r9, r2
 8005308:	4688      	mov	r8, r1
 800530a:	f7fe fda1 	bl	8003e50 <HAL_GetTick>
  tmp_state           = hspi->State;
 800530e:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8005312:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005314:	2e01      	cmp	r6, #1
  tickstart = HAL_GetTick();
 8005316:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8005318:	b2f2      	uxtb	r2, r6
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800531a:	d011      	beq.n	8005340 <HAL_SPI_TransmitReceive+0x54>
 800531c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005320:	d009      	beq.n	8005336 <HAL_SPI_TransmitReceive+0x4a>
    errorcode = HAL_BUSY;
 8005322:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005324:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8005326:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8005328:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800532c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005330:	b003      	add	sp, #12
 8005332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005336:	68a1      	ldr	r1, [r4, #8]
 8005338:	2900      	cmp	r1, #0
 800533a:	d1f2      	bne.n	8005322 <HAL_SPI_TransmitReceive+0x36>
 800533c:	2a04      	cmp	r2, #4
 800533e:	d1f0      	bne.n	8005322 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005340:	f1b8 0f00 	cmp.w	r8, #0
 8005344:	f000 8083 	beq.w	800544e <HAL_SPI_TransmitReceive+0x162>
 8005348:	f1b9 0f00 	cmp.w	r9, #0
 800534c:	d07f      	beq.n	800544e <HAL_SPI_TransmitReceive+0x162>
 800534e:	2f00      	cmp	r7, #0
 8005350:	d07d      	beq.n	800544e <HAL_SPI_TransmitReceive+0x162>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005352:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005356:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005358:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800535c:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800535e:	bf1c      	itt	ne
 8005360:	2205      	movne	r2, #5
 8005362:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005366:	2200      	movs	r2, #0
 8005368:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 800536a:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800536c:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800536e:	6801      	ldr	r1, [r0, #0]
  hspi->RxXferSize  = Size;
 8005370:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 8005372:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005376:	064a      	lsls	r2, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005378:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800537c:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800537e:	d403      	bmi.n	8005388 <HAL_SPI_TransmitReceive+0x9c>
    __HAL_SPI_ENABLE(hspi);
 8005380:	6802      	ldr	r2, [r0, #0]
 8005382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005386:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005388:	68e2      	ldr	r2, [r4, #12]
 800538a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800538e:	f000 80ac 	beq.w	80054ea <HAL_SPI_TransmitReceive+0x1fe>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 809e 	beq.w	80054d4 <HAL_SPI_TransmitReceive+0x1e8>
 8005398:	2f01      	cmp	r7, #1
 800539a:	f000 809b 	beq.w	80054d4 <HAL_SPI_TransmitReceive+0x1e8>
 800539e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053a0:	3301      	adds	r3, #1
        txallowed = 1U;
 80053a2:	f04f 0601 	mov.w	r6, #1
 80053a6:	d028      	beq.n	80053fa <HAL_SPI_TransmitReceive+0x10e>
 80053a8:	e053      	b.n	8005452 <HAL_SPI_TransmitReceive+0x166>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053aa:	6822      	ldr	r2, [r4, #0]
 80053ac:	6893      	ldr	r3, [r2, #8]
 80053ae:	0798      	lsls	r0, r3, #30
 80053b0:	d50f      	bpl.n	80053d2 <HAL_SPI_TransmitReceive+0xe6>
 80053b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	b163      	cbz	r3, 80053d2 <HAL_SPI_TransmitReceive+0xe6>
 80053b8:	b15e      	cbz	r6, 80053d2 <HAL_SPI_TransmitReceive+0xe6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80053c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80053c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80053c4:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 80053c6:	3b01      	subs	r3, #1
 80053c8:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80053ca:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 80053cc:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80053ce:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 80053d0:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053d2:	6893      	ldr	r3, [r2, #8]
 80053d4:	f013 0301 	ands.w	r3, r3, #1
 80053d8:	d00d      	beq.n	80053f6 <HAL_SPI_TransmitReceive+0x10a>
 80053da:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80053dc:	b289      	uxth	r1, r1
 80053de:	b151      	cbz	r1, 80053f6 <HAL_SPI_TransmitReceive+0x10a>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80053e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80053e2:	68d2      	ldr	r2, [r2, #12]
 80053e4:	700a      	strb	r2, [r1, #0]
        hspi->RxXferCount--;
 80053e6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80053e8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80053ea:	3a01      	subs	r2, #1
 80053ec:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr++;
 80053ee:	3101      	adds	r1, #1
        txallowed = 1U;
 80053f0:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 80053f2:	87e2      	strh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80053f4:	63a1      	str	r1, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053f6:	f7fe fd2b 	bl	8003e50 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1d3      	bne.n	80053aa <HAL_SPI_TransmitReceive+0xbe>
 8005402:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1cf      	bne.n	80053aa <HAL_SPI_TransmitReceive+0xbe>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800540a:	4b79      	ldr	r3, [pc, #484]	; (80055f0 <HAL_SPI_TransmitReceive+0x304>)
 800540c:	4a79      	ldr	r2, [pc, #484]	; (80055f4 <HAL_SPI_TransmitReceive+0x308>)
 800540e:	681b      	ldr	r3, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005410:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005412:	fba2 2303 	umull	r2, r3, r2, r3
 8005416:	0d5b      	lsrs	r3, r3, #21
 8005418:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800541c:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005420:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005424:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005426:	d146      	bne.n	80054b6 <HAL_SPI_TransmitReceive+0x1ca>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800542a:	462b      	mov	r3, r5
 800542c:	2180      	movs	r1, #128	; 0x80
 800542e:	4620      	mov	r0, r4
 8005430:	f7ff fd78 	bl	8004f24 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005434:	2800      	cmp	r0, #0
 8005436:	d041      	beq.n	80054bc <HAL_SPI_TransmitReceive+0x1d0>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005438:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800543a:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800543c:	4313      	orrs	r3, r2
 800543e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005440:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005442:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 8005444:	e76e      	b.n	8005324 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8005446:	2002      	movs	r0, #2
}
 8005448:	b003      	add	sp, #12
 800544a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 800544e:	2001      	movs	r0, #1
 8005450:	e768      	b.n	8005324 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005452:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005454:	b29b      	uxth	r3, r3
 8005456:	b91b      	cbnz	r3, 8005460 <HAL_SPI_TransmitReceive+0x174>
 8005458:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800545a:	b29b      	uxth	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0d4      	beq.n	800540a <HAL_SPI_TransmitReceive+0x11e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005460:	6822      	ldr	r2, [r4, #0]
 8005462:	6893      	ldr	r3, [r2, #8]
 8005464:	0799      	lsls	r1, r3, #30
 8005466:	d50f      	bpl.n	8005488 <HAL_SPI_TransmitReceive+0x19c>
 8005468:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800546a:	b29b      	uxth	r3, r3
 800546c:	b163      	cbz	r3, 8005488 <HAL_SPI_TransmitReceive+0x19c>
 800546e:	b15e      	cbz	r6, 8005488 <HAL_SPI_TransmitReceive+0x19c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005470:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8005476:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8005478:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800547a:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 800547c:	3b01      	subs	r3, #1
 800547e:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8005480:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 8005482:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8005484:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 8005486:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005488:	6893      	ldr	r3, [r2, #8]
 800548a:	f013 0301 	ands.w	r3, r3, #1
 800548e:	d003      	beq.n	8005498 <HAL_SPI_TransmitReceive+0x1ac>
 8005490:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8005492:	b289      	uxth	r1, r1
 8005494:	2900      	cmp	r1, #0
 8005496:	d167      	bne.n	8005568 <HAL_SPI_TransmitReceive+0x27c>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005498:	f7fe fcda 	bl	8003e50 <HAL_GetTick>
 800549c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800549e:	1b40      	subs	r0, r0, r5
 80054a0:	4298      	cmp	r0, r3
 80054a2:	d3d6      	bcc.n	8005452 <HAL_SPI_TransmitReceive+0x166>
        errorcode = HAL_TIMEOUT;
 80054a4:	2003      	movs	r0, #3
 80054a6:	e73d      	b.n	8005324 <HAL_SPI_TransmitReceive+0x38>
      count--;
 80054a8:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054aa:	6822      	ldr	r2, [r4, #0]
      count--;
 80054ac:	3b01      	subs	r3, #1
 80054ae:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054b0:	6893      	ldr	r3, [r2, #8]
 80054b2:	061b      	lsls	r3, r3, #24
 80054b4:	d502      	bpl.n	80054bc <HAL_SPI_TransmitReceive+0x1d0>
      if (count == 0U)
 80054b6:	9b01      	ldr	r3, [sp, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1f5      	bne.n	80054a8 <HAL_SPI_TransmitReceive+0x1bc>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054bc:	68a0      	ldr	r0, [r4, #8]
 80054be:	2800      	cmp	r0, #0
 80054c0:	f040 8093 	bne.w	80055ea <HAL_SPI_TransmitReceive+0x2fe>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	9000      	str	r0, [sp, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	9200      	str	r2, [sp, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	9b00      	ldr	r3, [sp, #0]
 80054d2:	e727      	b.n	8005324 <HAL_SPI_TransmitReceive+0x38>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054d4:	f898 3000 	ldrb.w	r3, [r8]
 80054d8:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80054da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054e2:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80054e4:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054e6:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80054e8:	e759      	b.n	800539e <HAL_SPI_TransmitReceive+0xb2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d148      	bne.n	8005580 <HAL_SPI_TransmitReceive+0x294>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ee:	4641      	mov	r1, r8
 80054f0:	f831 3b02 	ldrh.w	r3, [r1], #2
 80054f4:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 80054f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054f8:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005502:	3301      	adds	r3, #1
{
 8005504:	f04f 0601 	mov.w	r6, #1
 8005508:	d025      	beq.n	8005556 <HAL_SPI_TransmitReceive+0x26a>
 800550a:	e03c      	b.n	8005586 <HAL_SPI_TransmitReceive+0x29a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800550c:	6822      	ldr	r2, [r4, #0]
 800550e:	6893      	ldr	r3, [r2, #8]
 8005510:	079b      	lsls	r3, r3, #30
 8005512:	d50d      	bpl.n	8005530 <HAL_SPI_TransmitReceive+0x244>
 8005514:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005516:	b29b      	uxth	r3, r3
 8005518:	b153      	cbz	r3, 8005530 <HAL_SPI_TransmitReceive+0x244>
 800551a:	b14e      	cbz	r6, 8005530 <HAL_SPI_TransmitReceive+0x244>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800551c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800551e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005522:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8005524:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005526:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005528:	3b01      	subs	r3, #1
 800552a:	b29b      	uxth	r3, r3
 800552c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800552e:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005530:	6893      	ldr	r3, [r2, #8]
 8005532:	f013 0301 	ands.w	r3, r3, #1
 8005536:	d00c      	beq.n	8005552 <HAL_SPI_TransmitReceive+0x266>
 8005538:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800553a:	b289      	uxth	r1, r1
 800553c:	b149      	cbz	r1, 8005552 <HAL_SPI_TransmitReceive+0x266>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800553e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005540:	68d2      	ldr	r2, [r2, #12]
 8005542:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8005546:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005548:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800554a:	3a01      	subs	r2, #1
 800554c:	b292      	uxth	r2, r2
        txallowed = 1U;
 800554e:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8005550:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005552:	f7fe fc7d 	bl	8003e50 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005556:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1d6      	bne.n	800550c <HAL_SPI_TransmitReceive+0x220>
 800555e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1d2      	bne.n	800550c <HAL_SPI_TransmitReceive+0x220>
 8005566:	e750      	b.n	800540a <HAL_SPI_TransmitReceive+0x11e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005568:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800556a:	68d2      	ldr	r2, [r2, #12]
 800556c:	700a      	strb	r2, [r1, #0]
        hspi->RxXferCount--;
 800556e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8005570:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005572:	3a01      	subs	r2, #1
 8005574:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr++;
 8005576:	3101      	adds	r1, #1
        txallowed = 1U;
 8005578:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 800557a:	87e2      	strh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800557c:	63a1      	str	r1, [r4, #56]	; 0x38
        txallowed = 1U;
 800557e:	e78b      	b.n	8005498 <HAL_SPI_TransmitReceive+0x1ac>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005580:	2f01      	cmp	r7, #1
 8005582:	d1bd      	bne.n	8005500 <HAL_SPI_TransmitReceive+0x214>
 8005584:	e7b3      	b.n	80054ee <HAL_SPI_TransmitReceive+0x202>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005586:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005588:	b29b      	uxth	r3, r3
 800558a:	b923      	cbnz	r3, 8005596 <HAL_SPI_TransmitReceive+0x2aa>
 800558c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	f43f af3a 	beq.w	800540a <HAL_SPI_TransmitReceive+0x11e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005596:	6822      	ldr	r2, [r4, #0]
 8005598:	6893      	ldr	r3, [r2, #8]
 800559a:	079f      	lsls	r7, r3, #30
 800559c:	d50d      	bpl.n	80055ba <HAL_SPI_TransmitReceive+0x2ce>
 800559e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	b153      	cbz	r3, 80055ba <HAL_SPI_TransmitReceive+0x2ce>
 80055a4:	b14e      	cbz	r6, 80055ba <HAL_SPI_TransmitReceive+0x2ce>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80055a8:	f831 3b02 	ldrh.w	r3, [r1], #2
 80055ac:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80055ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055b0:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80055b8:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055ba:	6893      	ldr	r3, [r2, #8]
 80055bc:	f013 0301 	ands.w	r3, r3, #1
 80055c0:	d00c      	beq.n	80055dc <HAL_SPI_TransmitReceive+0x2f0>
 80055c2:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80055c4:	b289      	uxth	r1, r1
 80055c6:	b149      	cbz	r1, 80055dc <HAL_SPI_TransmitReceive+0x2f0>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80055ca:	68d2      	ldr	r2, [r2, #12]
 80055cc:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 80055d0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055d2:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80055d4:	3a01      	subs	r2, #1
 80055d6:	b292      	uxth	r2, r2
        txallowed = 1U;
 80055d8:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 80055da:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055dc:	f7fe fc38 	bl	8003e50 <HAL_GetTick>
 80055e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e2:	1b40      	subs	r0, r0, r5
 80055e4:	4298      	cmp	r0, r3
 80055e6:	d3ce      	bcc.n	8005586 <HAL_SPI_TransmitReceive+0x29a>
 80055e8:	e75c      	b.n	80054a4 <HAL_SPI_TransmitReceive+0x1b8>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80055ea:	2000      	movs	r0, #0
 80055ec:	e69a      	b.n	8005324 <HAL_SPI_TransmitReceive+0x38>
 80055ee:	bf00      	nop
 80055f0:	2000201c 	.word	0x2000201c
 80055f4:	165e9f81 	.word	0x165e9f81

080055f8 <HAL_SPI_Receive>:
{
 80055f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055fc:	6846      	ldr	r6, [r0, #4]
 80055fe:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
{
 8005602:	b083      	sub	sp, #12
 8005604:	4604      	mov	r4, r0
 8005606:	4691      	mov	r9, r2
 8005608:	461d      	mov	r5, r3
 800560a:	4688      	mov	r8, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800560c:	d06d      	beq.n	80056ea <HAL_SPI_Receive+0xf2>
  __HAL_LOCK(hspi);
 800560e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8005612:	2b01      	cmp	r3, #1
 8005614:	d075      	beq.n	8005702 <HAL_SPI_Receive+0x10a>
 8005616:	2301      	movs	r3, #1
 8005618:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800561c:	f7fe fc18 	bl	8003e50 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005620:	f894 7051 	ldrb.w	r7, [r4, #81]	; 0x51
 8005624:	2f01      	cmp	r7, #1
  tickstart = HAL_GetTick();
 8005626:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005628:	b2f8      	uxtb	r0, r7
 800562a:	d009      	beq.n	8005640 <HAL_SPI_Receive+0x48>
    errorcode = HAL_BUSY;
 800562c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800562e:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8005630:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8005632:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005636:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800563a:	b003      	add	sp, #12
 800563c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 8005640:	f1b8 0f00 	cmp.w	r8, #0
 8005644:	d0f3      	beq.n	800562e <HAL_SPI_Receive+0x36>
 8005646:	f1b9 0f00 	cmp.w	r9, #0
 800564a:	d0f0      	beq.n	800562e <HAL_SPI_Receive+0x36>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800564c:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800564e:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005650:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005654:	2304      	movs	r3, #4
 8005656:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800565a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8005664:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005668:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800566c:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005670:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005672:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005674:	86e3      	strh	r3, [r4, #54]	; 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005676:	d107      	bne.n	8005688 <HAL_SPI_Receive+0x90>
    __HAL_SPI_DISABLE(hspi);
 8005678:	680b      	ldr	r3, [r1, #0]
 800567a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800567e:	600b      	str	r3, [r1, #0]
    SPI_1LINE_RX(hspi);
 8005680:	680b      	ldr	r3, [r1, #0]
 8005682:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005686:	600b      	str	r3, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005688:	680a      	ldr	r2, [r1, #0]
 800568a:	0650      	lsls	r0, r2, #25
    __HAL_SPI_DISABLE(hspi);
 800568c:	460b      	mov	r3, r1
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800568e:	d403      	bmi.n	8005698 <HAL_SPI_Receive+0xa0>
    __HAL_SPI_ENABLE(hspi);
 8005690:	680a      	ldr	r2, [r1, #0]
 8005692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005696:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005698:	68e2      	ldr	r2, [r4, #12]
 800569a:	2a00      	cmp	r2, #0
 800569c:	d055      	beq.n	800574a <HAL_SPI_Receive+0x152>
    while (hspi->RxXferCount > 0U)
 800569e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80056a0:	b292      	uxth	r2, r2
 80056a2:	b18a      	cbz	r2, 80056c8 <HAL_SPI_Receive+0xd0>
 80056a4:	1c6a      	adds	r2, r5, #1
 80056a6:	d13e      	bne.n	8005726 <HAL_SPI_Receive+0x12e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056a8:	688b      	ldr	r3, [r1, #8]
 80056aa:	07db      	lsls	r3, r3, #31
 80056ac:	d545      	bpl.n	800573a <HAL_SPI_Receive+0x142>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056b0:	68ca      	ldr	r2, [r1, #12]
 80056b2:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->RxXferCount--;
 80056b6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056b8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80056ba:	3a01      	subs	r2, #1
 80056bc:	b292      	uxth	r2, r2
 80056be:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 80056c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1ef      	bne.n	80056a8 <HAL_SPI_Receive+0xb0>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c8:	6863      	ldr	r3, [r4, #4]
 80056ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056ce:	d074      	beq.n	80057ba <HAL_SPI_Receive+0x1c2>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80056d0:	4633      	mov	r3, r6
 80056d2:	462a      	mov	r2, r5
 80056d4:	2101      	movs	r1, #1
 80056d6:	4620      	mov	r0, r4
 80056d8:	f7ff fc24 	bl	8004f24 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80056dc:	2800      	cmp	r0, #0
 80056de:	d17b      	bne.n	80057d8 <HAL_SPI_Receive+0x1e0>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80056e2:	3800      	subs	r0, #0
 80056e4:	bf18      	it	ne
 80056e6:	2001      	movne	r0, #1
error :
 80056e8:	e7a1      	b.n	800562e <HAL_SPI_Receive+0x36>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80056ea:	6883      	ldr	r3, [r0, #8]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d18e      	bne.n	800560e <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056f0:	2604      	movs	r6, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80056f2:	9500      	str	r5, [sp, #0]
 80056f4:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056f6:	f880 6051 	strb.w	r6, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80056fa:	460a      	mov	r2, r1
 80056fc:	f7ff fdf6 	bl	80052ec <HAL_SPI_TransmitReceive>
 8005700:	e79b      	b.n	800563a <HAL_SPI_Receive+0x42>
  __HAL_LOCK(hspi);
 8005702:	2002      	movs	r0, #2
}
 8005704:	b003      	add	sp, #12
 8005706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800570a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8005712:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005714:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005716:	3b01      	subs	r3, #1
 8005718:	b29b      	uxth	r3, r3
 800571a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 800571c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0d1      	beq.n	80056c8 <HAL_SPI_Receive+0xd0>
 8005724:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	07d2      	lsls	r2, r2, #31
 800572a:	d4ee      	bmi.n	800570a <HAL_SPI_Receive+0x112>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800572c:	f7fe fb90 	bl	8003e50 <HAL_GetTick>
 8005730:	1b80      	subs	r0, r0, r6
 8005732:	42a8      	cmp	r0, r5
 8005734:	d3f2      	bcc.n	800571c <HAL_SPI_Receive+0x124>
          errorcode = HAL_TIMEOUT;
 8005736:	2003      	movs	r0, #3
 8005738:	e779      	b.n	800562e <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800573a:	f7fe fb89 	bl	8003e50 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 800573e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0c0      	beq.n	80056c8 <HAL_SPI_Receive+0xd0>
 8005746:	6821      	ldr	r1, [r4, #0]
 8005748:	e7ae      	b.n	80056a8 <HAL_SPI_Receive+0xb0>
    while (hspi->RxXferCount > 0U)
 800574a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800574c:	b292      	uxth	r2, r2
 800574e:	2a00      	cmp	r2, #0
 8005750:	d0ba      	beq.n	80056c8 <HAL_SPI_Receive+0xd0>
 8005752:	1c6f      	adds	r7, r5, #1
 8005754:	d00f      	beq.n	8005776 <HAL_SPI_Receive+0x17e>
 8005756:	e027      	b.n	80057a8 <HAL_SPI_Receive+0x1b0>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005758:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800575a:	7b1b      	ldrb	r3, [r3, #12]
 800575c:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800575e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005760:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005762:	3a01      	subs	r2, #1
 8005764:	b292      	uxth	r2, r2
 8005766:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8005768:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800576a:	3101      	adds	r1, #1
    while (hspi->RxXferCount > 0U)
 800576c:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800576e:	63a1      	str	r1, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0a9      	beq.n	80056c8 <HAL_SPI_Receive+0xd0>
 8005774:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	07d0      	lsls	r0, r2, #31
 800577a:	d4ed      	bmi.n	8005758 <HAL_SPI_Receive+0x160>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800577c:	f7fe fb68 	bl	8003e50 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 8005780:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f5      	bne.n	8005774 <HAL_SPI_Receive+0x17c>
 8005788:	e79e      	b.n	80056c8 <HAL_SPI_Receive+0xd0>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800578a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800578c:	7b1b      	ldrb	r3, [r3, #12]
 800578e:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8005790:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005792:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005794:	3b01      	subs	r3, #1
 8005796:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005798:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 800579a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800579c:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 800579e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d090      	beq.n	80056c8 <HAL_SPI_Receive+0xd0>
 80057a6:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	07d1      	lsls	r1, r2, #31
 80057ac:	d4ed      	bmi.n	800578a <HAL_SPI_Receive+0x192>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ae:	f7fe fb4f 	bl	8003e50 <HAL_GetTick>
 80057b2:	1b80      	subs	r0, r0, r6
 80057b4:	42a8      	cmp	r0, r5
 80057b6:	d3f2      	bcc.n	800579e <HAL_SPI_Receive+0x1a6>
 80057b8:	e7bd      	b.n	8005736 <HAL_SPI_Receive+0x13e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057ba:	68a3      	ldr	r3, [r4, #8]
 80057bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c0:	d020      	beq.n	8005804 <HAL_SPI_Receive+0x20c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c6:	d00e      	beq.n	80057e6 <HAL_SPI_Receive+0x1ee>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057c8:	4633      	mov	r3, r6
 80057ca:	462a      	mov	r2, r5
 80057cc:	2180      	movs	r1, #128	; 0x80
 80057ce:	4620      	mov	r0, r4
 80057d0:	f7ff fba8 	bl	8004f24 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d083      	beq.n	80056e0 <HAL_SPI_Receive+0xe8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80057da:	f043 0320 	orr.w	r3, r3, #32
 80057de:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057e0:	2320      	movs	r3, #32
 80057e2:	6563      	str	r3, [r4, #84]	; 0x54
 80057e4:	e77c      	b.n	80056e0 <HAL_SPI_Receive+0xe8>
    __HAL_SPI_DISABLE(hspi);
 80057e6:	6820      	ldr	r0, [r4, #0]
 80057e8:	6801      	ldr	r1, [r0, #0]
 80057ea:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80057ee:	6001      	str	r1, [r0, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80057f0:	4633      	mov	r3, r6
 80057f2:	462a      	mov	r2, r5
 80057f4:	2101      	movs	r1, #1
 80057f6:	4620      	mov	r0, r4
 80057f8:	f7ff fb94 	bl	8004f24 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	f43f af6f 	beq.w	80056e0 <HAL_SPI_Receive+0xe8>
 8005802:	e7e9      	b.n	80057d8 <HAL_SPI_Receive+0x1e0>
    __HAL_SPI_DISABLE(hspi);
 8005804:	6822      	ldr	r2, [r4, #0]
 8005806:	6813      	ldr	r3, [r2, #0]
 8005808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800580c:	6013      	str	r3, [r2, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800580e:	e7db      	b.n	80057c8 <HAL_SPI_Receive+0x1d0>

08005810 <HAL_SPI_GetState>:
  return hspi->State;
 8005810:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop

08005818 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005818:	2800      	cmp	r0, #0
 800581a:	d076      	beq.n	800590a <HAL_TIM_Base_Init+0xf2>
{
 800581c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800581e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005822:	4604      	mov	r4, r0
 8005824:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005828:	2b00      	cmp	r3, #0
 800582a:	d055      	beq.n	80058d8 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800582c:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800582e:	4938      	ldr	r1, [pc, #224]	; (8005910 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005830:	2302      	movs	r3, #2
 8005832:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005836:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005838:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800583a:	d052      	beq.n	80058e2 <HAL_TIM_Base_Init+0xca>
 800583c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005840:	d021      	beq.n	8005886 <HAL_TIM_Base_Init+0x6e>
 8005842:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8005846:	428a      	cmp	r2, r1
 8005848:	d01d      	beq.n	8005886 <HAL_TIM_Base_Init+0x6e>
 800584a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800584e:	428a      	cmp	r2, r1
 8005850:	d019      	beq.n	8005886 <HAL_TIM_Base_Init+0x6e>
 8005852:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005856:	428a      	cmp	r2, r1
 8005858:	d015      	beq.n	8005886 <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800585a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800585e:	428a      	cmp	r2, r1
 8005860:	d015      	beq.n	800588e <HAL_TIM_Base_Init+0x76>
 8005862:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005866:	428a      	cmp	r2, r1
 8005868:	d011      	beq.n	800588e <HAL_TIM_Base_Init+0x76>
 800586a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800586e:	428a      	cmp	r2, r1
 8005870:	d00d      	beq.n	800588e <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005872:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005874:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005876:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800587c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800587e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005880:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005882:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005884:	e010      	b.n	80058a8 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8005886:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800588c:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800588e:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005890:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005892:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005898:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800589a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800589e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80058a0:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80058a2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058a4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80058a6:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058a8:	2301      	movs	r3, #1
 80058aa:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058ac:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80058b4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80058b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80058bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80058cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80058d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80058d4:	2000      	movs	r0, #0
}
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 80058d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80058dc:	f7fe f8ae 	bl	8003a3c <HAL_TIM_Base_MspInit>
 80058e0:	e7a4      	b.n	800582c <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80058e2:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058e4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80058ec:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058f2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80058fa:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058fc:	68e3      	ldr	r3, [r4, #12]
 80058fe:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005900:	6863      	ldr	r3, [r4, #4]
 8005902:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005904:	6963      	ldr	r3, [r4, #20]
 8005906:	6313      	str	r3, [r2, #48]	; 0x30
 8005908:	e7ce      	b.n	80058a8 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 800590a:	2001      	movs	r0, #1
}
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40010000 	.word	0x40010000

08005914 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005914:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005918:	2b01      	cmp	r3, #1
 800591a:	d124      	bne.n	8005966 <HAL_TIM_Base_Start+0x52>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591c:	6803      	ldr	r3, [r0, #0]
 800591e:	4a14      	ldr	r2, [pc, #80]	; (8005970 <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005920:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005922:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8005924:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005928:	d012      	beq.n	8005950 <HAL_TIM_Base_Start+0x3c>
 800592a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592e:	d00f      	beq.n	8005950 <HAL_TIM_Base_Start+0x3c>
 8005930:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005934:	4293      	cmp	r3, r2
 8005936:	d00b      	beq.n	8005950 <HAL_TIM_Base_Start+0x3c>
 8005938:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800593c:	4293      	cmp	r3, r2
 800593e:	d007      	beq.n	8005950 <HAL_TIM_Base_Start+0x3c>
 8005940:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <HAL_TIM_Base_Start+0x3c>
 8005948:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800594c:	4293      	cmp	r3, r2
 800594e:	d104      	bne.n	800595a <HAL_TIM_Base_Start+0x46>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005950:	689a      	ldr	r2, [r3, #8]
 8005952:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005956:	2a06      	cmp	r2, #6
 8005958:	d007      	beq.n	800596a <HAL_TIM_Base_Start+0x56>
    __HAL_TIM_ENABLE(htim);
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	f042 0201 	orr.w	r2, r2, #1
 8005960:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005962:	2000      	movs	r0, #0
 8005964:	4770      	bx	lr
    return HAL_ERROR;
 8005966:	2001      	movs	r0, #1
 8005968:	4770      	bx	lr
  return HAL_OK;
 800596a:	2000      	movs	r0, #0
}
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	40010000 	.word	0x40010000

08005974 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8005974:	2800      	cmp	r0, #0
 8005976:	d076      	beq.n	8005a66 <HAL_TIM_OC_Init+0xf2>
{
 8005978:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800597a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800597e:	4604      	mov	r4, r0
 8005980:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005984:	2b00      	cmp	r3, #0
 8005986:	d055      	beq.n	8005a34 <HAL_TIM_OC_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005988:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800598a:	4938      	ldr	r1, [pc, #224]	; (8005a6c <HAL_TIM_OC_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	2302      	movs	r3, #2
 800598e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005992:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005994:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005996:	d052      	beq.n	8005a3e <HAL_TIM_OC_Init+0xca>
 8005998:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800599c:	d021      	beq.n	80059e2 <HAL_TIM_OC_Init+0x6e>
 800599e:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80059a2:	428a      	cmp	r2, r1
 80059a4:	d01d      	beq.n	80059e2 <HAL_TIM_OC_Init+0x6e>
 80059a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059aa:	428a      	cmp	r2, r1
 80059ac:	d019      	beq.n	80059e2 <HAL_TIM_OC_Init+0x6e>
 80059ae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059b2:	428a      	cmp	r2, r1
 80059b4:	d015      	beq.n	80059e2 <HAL_TIM_OC_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059b6:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80059ba:	428a      	cmp	r2, r1
 80059bc:	d015      	beq.n	80059ea <HAL_TIM_OC_Init+0x76>
 80059be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059c2:	428a      	cmp	r2, r1
 80059c4:	d011      	beq.n	80059ea <HAL_TIM_OC_Init+0x76>
 80059c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059ca:	428a      	cmp	r2, r1
 80059cc:	d00d      	beq.n	80059ea <HAL_TIM_OC_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059ce:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059d0:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80059d2:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059d8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80059da:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059dc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80059de:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059e0:	e010      	b.n	8005a04 <HAL_TIM_OC_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 80059e2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80059e8:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ea:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059ec:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059ee:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80059f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059f4:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059fa:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80059fc:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80059fe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a00:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a02:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005a04:	2301      	movs	r3, #1
 8005a06:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a08:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005a10:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005a14:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005a18:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a24:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005a28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005a2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005a30:	2000      	movs	r0, #0
}
 8005a32:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8005a34:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8005a38:	f7fe f83e 	bl	8003ab8 <HAL_TIM_OC_MspInit>
 8005a3c:	e7a4      	b.n	8005988 <HAL_TIM_OC_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8005a3e:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a40:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a42:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a48:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a4e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a54:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005a56:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a58:	68e3      	ldr	r3, [r4, #12]
 8005a5a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a5c:	6863      	ldr	r3, [r4, #4]
 8005a5e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005a60:	6963      	ldr	r3, [r4, #20]
 8005a62:	6313      	str	r3, [r2, #48]	; 0x30
 8005a64:	e7ce      	b.n	8005a04 <HAL_TIM_OC_Init+0x90>
    return HAL_ERROR;
 8005a66:	2001      	movs	r0, #1
}
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	40010000 	.word	0x40010000

08005a70 <HAL_TIM_PWM_MspInit>:
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop

08005a74 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005a74:	2800      	cmp	r0, #0
 8005a76:	d076      	beq.n	8005b66 <HAL_TIM_PWM_Init+0xf2>
{
 8005a78:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005a7a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005a7e:	4604      	mov	r4, r0
 8005a80:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d055      	beq.n	8005b34 <HAL_TIM_PWM_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a88:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a8a:	4938      	ldr	r1, [pc, #224]	; (8005b6c <HAL_TIM_PWM_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a92:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005a94:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a96:	d052      	beq.n	8005b3e <HAL_TIM_PWM_Init+0xca>
 8005a98:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005a9c:	d021      	beq.n	8005ae2 <HAL_TIM_PWM_Init+0x6e>
 8005a9e:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8005aa2:	428a      	cmp	r2, r1
 8005aa4:	d01d      	beq.n	8005ae2 <HAL_TIM_PWM_Init+0x6e>
 8005aa6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005aaa:	428a      	cmp	r2, r1
 8005aac:	d019      	beq.n	8005ae2 <HAL_TIM_PWM_Init+0x6e>
 8005aae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ab2:	428a      	cmp	r2, r1
 8005ab4:	d015      	beq.n	8005ae2 <HAL_TIM_PWM_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ab6:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8005aba:	428a      	cmp	r2, r1
 8005abc:	d015      	beq.n	8005aea <HAL_TIM_PWM_Init+0x76>
 8005abe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ac2:	428a      	cmp	r2, r1
 8005ac4:	d011      	beq.n	8005aea <HAL_TIM_PWM_Init+0x76>
 8005ac6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005aca:	428a      	cmp	r2, r1
 8005acc:	d00d      	beq.n	8005aea <HAL_TIM_PWM_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ace:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ad0:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005ad2:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ad8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005ada:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005adc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005ade:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ae0:	e010      	b.n	8005b04 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8005ae2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005ae8:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aea:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aec:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aee:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005af4:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005afa:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005afc:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005afe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b00:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b02:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005b04:	2301      	movs	r3, #1
 8005b06:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b08:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005b10:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005b14:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005b18:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b24:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005b28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005b2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005b30:	2000      	movs	r0, #0
}
 8005b32:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8005b34:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005b38:	f7ff ff9a 	bl	8005a70 <HAL_TIM_PWM_MspInit>
 8005b3c:	e7a4      	b.n	8005a88 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8005b3e:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b40:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b42:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005b48:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b4e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b54:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005b56:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b58:	68e3      	ldr	r3, [r4, #12]
 8005b5a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b5c:	6863      	ldr	r3, [r4, #4]
 8005b5e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005b60:	6963      	ldr	r3, [r4, #20]
 8005b62:	6313      	str	r3, [r2, #48]	; 0x30
 8005b64:	e7ce      	b.n	8005b04 <HAL_TIM_PWM_Init+0x90>
    return HAL_ERROR;
 8005b66:	2001      	movs	r0, #1
}
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	40010000 	.word	0x40010000

08005b70 <HAL_TIM_PWM_Start>:
 8005b70:	2900      	cmp	r1, #0
 8005b72:	d136      	bne.n	8005be2 <HAL_TIM_PWM_Start+0x72>
 8005b74:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d13a      	bne.n	8005bf2 <HAL_TIM_PWM_Start+0x82>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8005b82:	6803      	ldr	r3, [r0, #0]
 8005b84:	2201      	movs	r2, #1
 8005b86:	6a18      	ldr	r0, [r3, #32]
 8005b88:	f001 011f 	and.w	r1, r1, #31
 8005b8c:	fa02 f101 	lsl.w	r1, r2, r1
 8005b90:	ea20 0001 	bic.w	r0, r0, r1
 8005b94:	b410      	push	{r4}
 8005b96:	6218      	str	r0, [r3, #32]
 8005b98:	6a1a      	ldr	r2, [r3, #32]
 8005b9a:	4c27      	ldr	r4, [pc, #156]	; (8005c38 <HAL_TIM_PWM_Start+0xc8>)
 8005b9c:	4311      	orrs	r1, r2
 8005b9e:	42a3      	cmp	r3, r4
 8005ba0:	6219      	str	r1, [r3, #32]
 8005ba2:	d02c      	beq.n	8005bfe <HAL_TIM_PWM_Start+0x8e>
 8005ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba8:	d00e      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x58>
 8005baa:	4a24      	ldr	r2, [pc, #144]	; (8005c3c <HAL_TIM_PWM_Start+0xcc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00b      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x58>
 8005bb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d007      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x58>
 8005bb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <HAL_TIM_PWM_Start+0x58>
 8005bc0:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d104      	bne.n	8005bd2 <HAL_TIM_PWM_Start+0x62>
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	f002 0207 	and.w	r2, r2, #7
 8005bce:	2a06      	cmp	r2, #6
 8005bd0:	d01e      	beq.n	8005c10 <HAL_TIM_PWM_Start+0xa0>
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bd8:	f042 0201 	orr.w	r2, r2, #1
 8005bdc:	2000      	movs	r0, #0
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	4770      	bx	lr
 8005be2:	2904      	cmp	r1, #4
 8005be4:	d018      	beq.n	8005c18 <HAL_TIM_PWM_Start+0xa8>
 8005be6:	2908      	cmp	r1, #8
 8005be8:	d01e      	beq.n	8005c28 <HAL_TIM_PWM_Start+0xb8>
 8005bea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d001      	beq.n	8005bf6 <HAL_TIM_PWM_Start+0x86>
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	4770      	bx	lr
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8005bfc:	e7c1      	b.n	8005b82 <HAL_TIM_PWM_Start+0x12>
 8005bfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c04:	645a      	str	r2, [r3, #68]	; 0x44
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	f002 0207 	and.w	r2, r2, #7
 8005c0c:	2a06      	cmp	r2, #6
 8005c0e:	d1e0      	bne.n	8005bd2 <HAL_TIM_PWM_Start+0x62>
 8005c10:	2000      	movs	r0, #0
 8005c12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d1e8      	bne.n	8005bf2 <HAL_TIM_PWM_Start+0x82>
 8005c20:	2302      	movs	r3, #2
 8005c22:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8005c26:	e7ac      	b.n	8005b82 <HAL_TIM_PWM_Start+0x12>
 8005c28:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d1e0      	bne.n	8005bf2 <HAL_TIM_PWM_Start+0x82>
 8005c30:	2302      	movs	r3, #2
 8005c32:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8005c36:	e7a4      	b.n	8005b82 <HAL_TIM_PWM_Start+0x12>
 8005c38:	40010000 	.word	0x40010000
 8005c3c:	40000400 	.word	0x40000400

08005c40 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8005c40:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	f000 809a 	beq.w	8005d7e <HAL_TIM_OC_ConfigChannel+0x13e>
 8005c4a:	2301      	movs	r3, #1
{
 8005c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005c4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005c52:	2a0c      	cmp	r2, #12
 8005c54:	d808      	bhi.n	8005c68 <HAL_TIM_OC_ConfigChannel+0x28>
 8005c56:	e8df f002 	tbb	[pc, r2]
 8005c5a:	072f      	.short	0x072f
 8005c5c:	07500707 	.word	0x07500707
 8005c60:	07710707 	.word	0x07710707
 8005c64:	0707      	.short	0x0707
 8005c66:	0d          	.byte	0x0d
 8005c67:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8005c68:	2200      	movs	r2, #0
  __HAL_LOCK(htim);
 8005c6a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005c6c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c74:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c76:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c7a:	6a13      	ldr	r3, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c7c:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c7e:	4e5a      	ldr	r6, [pc, #360]	; (8005de8 <HAL_TIM_OC_ConfigChannel+0x1a8>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c84:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 8005c86:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005c88:	6853      	ldr	r3, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8005c8a:	69d5      	ldr	r5, [r2, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8005c8c:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c90:	f425 45e6 	bic.w	r5, r5, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c94:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c96:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c9a:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9e:	f000 808e 	beq.w	8005dbe <HAL_TIM_OC_ConfigChannel+0x17e>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ca2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005ca4:	6053      	str	r3, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005ca6:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005ca8:	6411      	str	r1, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005caa:	6214      	str	r4, [r2, #32]
  __HAL_UNLOCK(htim);
 8005cac:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005cae:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005cb0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cb8:	6802      	ldr	r2, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8005cba:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cbe:	6a13      	ldr	r3, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005cc0:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cc2:	4e49      	ldr	r6, [pc, #292]	; (8005de8 <HAL_TIM_OC_ConfigChannel+0x1a8>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cc4:	f023 0301 	bic.w	r3, r3, #1
 8005cc8:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 8005cca:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005ccc:	6853      	ldr	r3, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8005cce:	6995      	ldr	r5, [r2, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8005cd0:	f024 0402 	bic.w	r4, r4, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cd4:	f025 0573 	bic.w	r5, r5, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cd8:	42b2      	cmp	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 8005cda:	ea44 040e 	orr.w	r4, r4, lr
  tmpccmrx |= OC_Config->OCMode;
 8005cde:	ea45 0507 	orr.w	r5, r5, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ce2:	d04f      	beq.n	8005d84 <HAL_TIM_OC_ConfigChannel+0x144>
  TIMx->CCR1 = OC_Config->Pulse;
 8005ce4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005ce6:	6053      	str	r3, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005ce8:	6195      	str	r5, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005cea:	6351      	str	r1, [r2, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8005cec:	6214      	str	r4, [r2, #32]
  __HAL_UNLOCK(htim);
 8005cee:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005cf0:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005cf2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cfa:	6802      	ldr	r2, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cfc:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d00:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d02:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d04:	4e38      	ldr	r6, [pc, #224]	; (8005de8 <HAL_TIM_OC_ConfigChannel+0x1a8>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d06:	f025 0510 	bic.w	r5, r5, #16
 8005d0a:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 8005d0c:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005d0e:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8005d10:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8005d12:	f024 0420 	bic.w	r4, r4, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d16:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d1a:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d1c:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d20:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d24:	d03c      	beq.n	8005da0 <HAL_TIM_OC_ConfigChannel+0x160>
  TIMx->CCR2 = OC_Config->Pulse;
 8005d26:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005d28:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005d2a:	6197      	str	r7, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005d2c:	6391      	str	r1, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005d2e:	6214      	str	r4, [r2, #32]
  __HAL_UNLOCK(htim);
 8005d30:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005d32:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005d34:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d3c:	6802      	ldr	r2, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d3e:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d42:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005d44:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d46:	4e28      	ldr	r6, [pc, #160]	; (8005de8 <HAL_TIM_OC_ConfigChannel+0x1a8>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d48:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8005d4c:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 8005d4e:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005d50:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8005d52:	69d3      	ldr	r3, [r2, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8005d54:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d58:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d5c:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d5e:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8005d62:	ea47 0703 	orr.w	r7, r7, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d66:	d030      	beq.n	8005dca <HAL_TIM_OC_ConfigChannel+0x18a>
  TIMx->CCR3 = OC_Config->Pulse;
 8005d68:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005d6a:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005d6c:	61d7      	str	r7, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005d6e:	63d1      	str	r1, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005d70:	6214      	str	r4, [r2, #32]
  __HAL_UNLOCK(htim);
 8005d72:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005d74:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005d76:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8005d7e:	2302      	movs	r3, #2
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d84:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8005d88:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d8a:	698e      	ldr	r6, [r1, #24]
 8005d8c:	694b      	ldr	r3, [r1, #20]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d8e:	f024 0408 	bic.w	r4, r4, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005d92:	433c      	orrs	r4, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d94:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d96:	f024 0404 	bic.w	r4, r4, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d9a:	ea43 030c 	orr.w	r3, r3, ip
 8005d9e:	e7a1      	b.n	8005ce4 <HAL_TIM_OC_ConfigChannel+0xa4>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005da0:	e9d1 3605 	ldrd	r3, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005da4:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005da8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005daa:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dae:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005db2:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8005db4:	f024 0440 	bic.w	r4, r4, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005db8:	ea4c 0583 	orr.w	r5, ip, r3, lsl #2
 8005dbc:	e7b3      	b.n	8005d26 <HAL_TIM_OC_ConfigChannel+0xe6>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dbe:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dc4:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8005dc8:	e76b      	b.n	8005ca2 <HAL_TIM_OC_ConfigChannel+0x62>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dca:	e9d1 3605 	ldrd	r3, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dce:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dd2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dd4:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dd8:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ddc:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dde:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005de2:	ea4c 1503 	orr.w	r5, ip, r3, lsl #4
 8005de6:	e7bf      	b.n	8005d68 <HAL_TIM_OC_ConfigChannel+0x128>
 8005de8:	40010000 	.word	0x40010000

08005dec <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8005dec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	f000 80d4 	beq.w	8005f9e <HAL_TIM_PWM_ConfigChannel+0x1b2>
 8005df6:	2301      	movs	r3, #1
{
 8005df8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005dfa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005dfe:	2a0c      	cmp	r2, #12
 8005e00:	d808      	bhi.n	8005e14 <HAL_TIM_PWM_ConfigChannel+0x28>
 8005e02:	e8df f002 	tbb	[pc, r2]
 8005e06:	073e      	.short	0x073e
 8005e08:	076d0707 	.word	0x076d0707
 8005e0c:	079d0707 	.word	0x079d0707
 8005e10:	0707      	.short	0x0707
 8005e12:	0d          	.byte	0x0d
 8005e13:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8005e14:	2200      	movs	r2, #0
  __HAL_LOCK(htim);
 8005e16:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005e18:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e20:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e22:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e24:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e26:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e28:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8006008 <HAL_TIM_PWM_ConfigChannel+0x21c>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e2c:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8005e30:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005e32:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005e34:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005e38:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8005e3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e3e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e42:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e44:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e48:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e4c:	f000 80c7 	beq.w	8005fde <HAL_TIM_PWM_ConfigChannel+0x1f2>
  TIMx->CCR4 = OC_Config->Pulse;
 8005e50:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005e52:	f8c3 e004 	str.w	lr, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005e56:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005e58:	641d      	str	r5, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8005e5a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e5c:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e5e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e60:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8005e64:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e66:	69d9      	ldr	r1, [r3, #28]
 8005e68:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005e6c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e6e:	69da      	ldr	r2, [r3, #28]
 8005e70:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005e74:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005e76:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005e78:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005e7a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e82:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8005e84:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e88:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005e8a:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e8c:	4e5e      	ldr	r6, [pc, #376]	; (8006008 <HAL_TIM_PWM_ConfigChannel+0x21c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e8e:	f025 0501 	bic.w	r5, r5, #1
 8005e92:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005e94:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005e96:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005e9a:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8005e9c:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ea0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ea4:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8005ea6:	ea42 020e 	orr.w	r2, r2, lr
  tmpccmrx |= OC_Config->OCMode;
 8005eaa:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005eae:	d079      	beq.n	8005fa4 <HAL_TIM_PWM_ConfigChannel+0x1b8>
  TIMx->CCR1 = OC_Config->Pulse;
 8005eb0:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005eb2:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005eb6:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005eb8:	635d      	str	r5, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8005eba:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ebc:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ebe:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ec0:	f044 0408 	orr.w	r4, r4, #8
 8005ec4:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ec6:	6999      	ldr	r1, [r3, #24]
 8005ec8:	f021 0104 	bic.w	r1, r1, #4
 8005ecc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ece:	699a      	ldr	r2, [r3, #24]
 8005ed0:	432a      	orrs	r2, r5
 8005ed2:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005ed4:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005ed6:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005ed8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ee0:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ee2:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ee4:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ee6:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ee8:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8006008 <HAL_TIM_PWM_ConfigChannel+0x21c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eec:	f025 0510 	bic.w	r5, r5, #16
 8005ef0:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005ef2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005ef4:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005ef8:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8005efa:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005efe:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f02:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f04:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f08:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f0c:	d058      	beq.n	8005fc0 <HAL_TIM_PWM_ConfigChannel+0x1d4>
  TIMx->CCR2 = OC_Config->Pulse;
 8005f0e:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005f10:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005f14:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005f16:	639d      	str	r5, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005f18:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f1a:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f1c:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f1e:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8005f22:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f24:	6999      	ldr	r1, [r3, #24]
 8005f26:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005f2a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005f32:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005f34:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005f36:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005f38:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f40:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f42:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f44:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005f46:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f48:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 8006008 <HAL_TIM_PWM_ConfigChannel+0x21c>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f4c:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8005f50:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005f52:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005f54:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005f58:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8005f5a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f5e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f62:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f64:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8005f68:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f6c:	d03d      	beq.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x1fe>
  TIMx->CCR3 = OC_Config->Pulse;
 8005f6e:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005f70:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005f74:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005f76:	63dd      	str	r5, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005f78:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f7a:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f7c:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f7e:	f044 0408 	orr.w	r4, r4, #8
 8005f82:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f84:	69d9      	ldr	r1, [r3, #28]
 8005f86:	f021 0104 	bic.w	r1, r1, #4
 8005f8a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f8c:	69da      	ldr	r2, [r3, #28]
 8005f8e:	432a      	orrs	r2, r5
 8005f90:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005f92:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005f94:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005f96:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8005f9e:	2302      	movs	r3, #2
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	4770      	bx	lr
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fa4:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpccer |= OC_Config->OCNPolarity;
 8005fa8:	68cf      	ldr	r7, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005faa:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fae:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8005fb2:	433a      	orrs	r2, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fb4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fb6:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fba:	ea45 0c0c 	orr.w	ip, r5, ip
 8005fbe:	e777      	b.n	8005eb0 <HAL_TIM_PWM_ConfigChannel+0xc4>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fc0:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fc4:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fca:	f42c 6c40 	bic.w	ip, ip, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fce:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fd2:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fd8:	ea4c 0c85 	orr.w	ip, ip, r5, lsl #2
 8005fdc:	e797      	b.n	8005f0e <HAL_TIM_PWM_ConfigChannel+0x122>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fde:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fe0:	f42e 4e80 	bic.w	lr, lr, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fe4:	ea4e 1e85 	orr.w	lr, lr, r5, lsl #6
 8005fe8:	e732      	b.n	8005e50 <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fea:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fee:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ff0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ff4:	f42c 5c40 	bic.w	ip, ip, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ff8:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ffc:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006002:	ea4c 1c05 	orr.w	ip, ip, r5, lsl #4
 8006006:	e7b2      	b.n	8005f6e <HAL_TIM_PWM_ConfigChannel+0x182>
 8006008:	40010000 	.word	0x40010000

0800600c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800600c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006010:	2b01      	cmp	r3, #1
 8006012:	d075      	beq.n	8006100 <HAL_TIM_ConfigClockSource+0xf4>
 8006014:	4602      	mov	r2, r0
{
 8006016:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8006018:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 800601a:	6814      	ldr	r4, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800601c:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8006020:	2001      	movs	r0, #1
 8006022:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006026:	68a5      	ldr	r5, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8006028:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800602a:	f425 457f 	bic.w	r5, r5, #65280	; 0xff00
 800602e:	f025 0577 	bic.w	r5, r5, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8006032:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8006034:	60a5      	str	r5, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8006036:	d065      	beq.n	8006104 <HAL_TIM_ConfigClockSource+0xf8>
 8006038:	d824      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x78>
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d07c      	beq.n	8006138 <HAL_TIM_ConfigClockSource+0x12c>
 800603e:	d94b      	bls.n	80060d8 <HAL_TIM_ConfigClockSource+0xcc>
 8006040:	2b50      	cmp	r3, #80	; 0x50
 8006042:	d117      	bne.n	8006074 <HAL_TIM_ConfigClockSource+0x68>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006044:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006046:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006048:	6848      	ldr	r0, [r1, #4]
 800604a:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800604c:	f026 0601 	bic.w	r6, r6, #1
 8006050:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006052:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006054:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800605c:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800605e:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006062:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006064:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006066:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800606c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006070:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006072:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006074:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8006076:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006078:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800607c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8006080:	bcf0      	pop	{r4, r5, r6, r7}
 8006082:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8006084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006088:	d038      	beq.n	80060fc <HAL_TIM_ConfigClockSource+0xf0>
 800608a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800608e:	d110      	bne.n	80060b2 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006090:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8006094:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8006096:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006098:	432b      	orrs	r3, r5
 800609a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800609e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060a2:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060a4:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060a6:	68a3      	ldr	r3, [r4, #8]
 80060a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060ac:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80060ae:	2000      	movs	r0, #0
      break;
 80060b0:	e7e0      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80060b2:	2b70      	cmp	r3, #112	; 0x70
 80060b4:	d1de      	bne.n	8006074 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060b6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80060ba:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80060bc:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060be:	432b      	orrs	r3, r5
 80060c0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060c8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80060ca:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80060cc:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80060d2:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80060d4:	2000      	movs	r0, #0
      break;
 80060d6:	e7cd      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80060d8:	2b20      	cmp	r3, #32
 80060da:	d002      	beq.n	80060e2 <HAL_TIM_ConfigClockSource+0xd6>
 80060dc:	d90a      	bls.n	80060f4 <HAL_TIM_ConfigClockSource+0xe8>
 80060de:	2b30      	cmp	r3, #48	; 0x30
 80060e0:	d1c8      	bne.n	8006074 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80060e2:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80060e4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060e8:	430b      	orrs	r3, r1
 80060ea:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80060ee:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80060f0:	2000      	movs	r0, #0
}
 80060f2:	e7bf      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80060f4:	f033 0110 	bics.w	r1, r3, #16
 80060f8:	d1bc      	bne.n	8006074 <HAL_TIM_ConfigClockSource+0x68>
 80060fa:	e7f2      	b.n	80060e2 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 80060fc:	2000      	movs	r0, #0
 80060fe:	e7b9      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8006100:	2002      	movs	r0, #2
}
 8006102:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006104:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006106:	684d      	ldr	r5, [r1, #4]
 8006108:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800610a:	f020 0010 	bic.w	r0, r0, #16
 800610e:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006110:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8006112:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006114:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006118:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800611c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006120:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006124:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8006126:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006128:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800612a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800612e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8006132:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006134:	2000      	movs	r0, #0
}
 8006136:	e79d      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x68>
  tmpccer = TIMx->CCER;
 8006138:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800613a:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800613c:	6848      	ldr	r0, [r1, #4]
 800613e:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006140:	f026 0601 	bic.w	r6, r6, #1
 8006144:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006146:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006148:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800614c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8006150:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006152:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006156:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006158:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800615a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800615c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006160:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8006164:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006166:	2000      	movs	r0, #0
}
 8006168:	e784      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x68>
 800616a:	bf00      	nop

0800616c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800616c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006170:	2b01      	cmp	r3, #1
 8006172:	d02e      	beq.n	80061d2 <HAL_TIMEx_MasterConfigSynchronization+0x66>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006174:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006176:	2202      	movs	r2, #2
{
 8006178:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800617a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800617e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006180:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006182:	4d15      	ldr	r5, [pc, #84]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8006184:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006188:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800618a:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 800618c:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 800618e:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006190:	d011      	beq.n	80061b6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8006192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006196:	d00e      	beq.n	80061b6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8006198:	4a10      	ldr	r2, [pc, #64]	; (80061dc <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d00b      	beq.n	80061b6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800619e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d007      	beq.n	80061b6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80061a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d003      	beq.n	80061b6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80061ae:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d104      	bne.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061b6:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061b8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061bc:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061be:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80061c0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80061c2:	2201      	movs	r2, #1
 80061c4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80061c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80061cc:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80061ce:	4618      	mov	r0, r3
}
 80061d0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80061d2:	2002      	movs	r0, #2
}
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	40010000 	.word	0x40010000
 80061dc:	40000400 	.word	0x40000400

080061e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d022      	beq.n	800622e <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
{
 80061e8:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061ea:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 80061ee:	4604      	mov	r4, r0
 80061f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061f4:	e9d1 2000 	ldrd	r2, r0, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061f8:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061fe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006204:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006208:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800620a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800620e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006210:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006214:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006216:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006218:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800621a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800621e:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 8006220:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8006222:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8006224:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c

  return HAL_OK;
 8006228:	4608      	mov	r0, r1
}
 800622a:	bc30      	pop	{r4, r5}
 800622c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800622e:	2002      	movs	r0, #2
}
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop

08006234 <HAL_HalfDuplex_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006234:	2800      	cmp	r0, #0
 8006236:	f000 8094 	beq.w	8006362 <HAL_HalfDuplex_Init+0x12e>
{
 800623a:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800623c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006240:	4604      	mov	r4, r0
 8006242:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 8086 	beq.w	8006358 <HAL_HalfDuplex_Init+0x124>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800624c:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800624e:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8006250:	2224      	movs	r2, #36	; 0x24
 8006252:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8006256:	68d8      	ldr	r0, [r3, #12]
 8006258:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800625c:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8006260:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006262:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006264:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006266:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800626a:	4329      	orrs	r1, r5
 800626c:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800626e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006270:	6965      	ldr	r5, [r4, #20]
 8006272:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8006274:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006278:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800627a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800627e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8006280:	430a      	orrs	r2, r1
 8006282:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006284:	695a      	ldr	r2, [r3, #20]
 8006286:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006288:	4937      	ldr	r1, [pc, #220]	; (8006368 <HAL_HalfDuplex_Init+0x134>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800628a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800628e:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006290:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006292:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006294:	d039      	beq.n	800630a <HAL_HalfDuplex_Init+0xd6>
 8006296:	4a35      	ldr	r2, [pc, #212]	; (800636c <HAL_HalfDuplex_Init+0x138>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d036      	beq.n	800630a <HAL_HalfDuplex_Init+0xd6>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800629c:	f7fe fe22 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062a0:	69e3      	ldr	r3, [r4, #28]
 80062a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a6:	d036      	beq.n	8006316 <HAL_HalfDuplex_Init+0xe2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062a8:	6863      	ldr	r3, [r4, #4]
 80062aa:	4e31      	ldr	r6, [pc, #196]	; (8006370 <HAL_HalfDuplex_Init+0x13c>)
 80062ac:	2119      	movs	r1, #25
 80062ae:	009a      	lsls	r2, r3, #2
 80062b0:	fba0 0101 	umull	r0, r1, r0, r1
 80062b4:	0f9b      	lsrs	r3, r3, #30
 80062b6:	f7fa fccf 	bl	8000c58 <__aeabi_uldivmod>
 80062ba:	fba6 2500 	umull	r2, r5, r6, r0
 80062be:	096d      	lsrs	r5, r5, #5
 80062c0:	2164      	movs	r1, #100	; 0x64
 80062c2:	fb01 0215 	mls	r2, r1, r5, r0
 80062c6:	0112      	lsls	r2, r2, #4
 80062c8:	3232      	adds	r2, #50	; 0x32
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	fba6 1202 	umull	r1, r2, r6, r2
 80062d0:	012d      	lsls	r5, r5, #4
 80062d2:	eb05 1252 	add.w	r2, r5, r2, lsr #5
 80062d6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062d8:	691a      	ldr	r2, [r3, #16]
 80062da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80062e0:	695a      	ldr	r2, [r3, #20]
 80062e2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80062e6:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80062e8:	695a      	ldr	r2, [r3, #20]
 80062ea:	f042 0208 	orr.w	r2, r2, #8
 80062ee:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80062f0:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f2:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80062f4:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80062f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062fa:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fc:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062fe:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006302:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8006306:	4628      	mov	r0, r5
}
 8006308:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 800630a:	f7fe fdfb 	bl	8004f04 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800630e:	69e3      	ldr	r3, [r4, #28]
 8006310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006314:	d1c8      	bne.n	80062a8 <HAL_HalfDuplex_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006316:	6862      	ldr	r2, [r4, #4]
 8006318:	4e15      	ldr	r6, [pc, #84]	; (8006370 <HAL_HalfDuplex_Init+0x13c>)
 800631a:	1892      	adds	r2, r2, r2
 800631c:	f04f 0300 	mov.w	r3, #0
 8006320:	f04f 0119 	mov.w	r1, #25
 8006324:	415b      	adcs	r3, r3
 8006326:	fba0 0101 	umull	r0, r1, r0, r1
 800632a:	f7fa fc95 	bl	8000c58 <__aeabi_uldivmod>
 800632e:	fba6 2100 	umull	r2, r1, r6, r0
 8006332:	094d      	lsrs	r5, r1, #5
 8006334:	2164      	movs	r1, #100	; 0x64
 8006336:	fb01 0215 	mls	r2, r1, r5, r0
 800633a:	00d2      	lsls	r2, r2, #3
 800633c:	3232      	adds	r2, #50	; 0x32
 800633e:	fba6 1202 	umull	r1, r2, r6, r2
 8006342:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8006346:	0912      	lsrs	r2, r2, #4
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800634e:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8006352:	440a      	add	r2, r1
 8006354:	609a      	str	r2, [r3, #8]
 8006356:	e7bf      	b.n	80062d8 <HAL_HalfDuplex_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8006358:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800635c:	f7fd fc46 	bl	8003bec <HAL_UART_MspInit>
 8006360:	e774      	b.n	800624c <HAL_HalfDuplex_Init+0x18>
    return HAL_ERROR;
 8006362:	2001      	movs	r0, #1
}
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40011000 	.word	0x40011000
 800636c:	40011400 	.word	0x40011400
 8006370:	51eb851f 	.word	0x51eb851f

08006374 <HAL_UART_Transmit>:
{
 8006374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006378:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800637a:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800637e:	2820      	cmp	r0, #32
 8006380:	d177      	bne.n	8006472 <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 8006382:	4688      	mov	r8, r1
 8006384:	2900      	cmp	r1, #0
 8006386:	d040      	beq.n	800640a <HAL_UART_Transmit+0x96>
 8006388:	4617      	mov	r7, r2
 800638a:	2a00      	cmp	r2, #0
 800638c:	d03d      	beq.n	800640a <HAL_UART_Transmit+0x96>
 800638e:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8006390:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006394:	2b01      	cmp	r3, #1
 8006396:	d06c      	beq.n	8006472 <HAL_UART_Transmit+0xfe>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006398:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800639a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639c:	f04f 0900 	mov.w	r9, #0
 80063a0:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    __HAL_LOCK(huart);
 80063a4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80063ac:	f7fd fd50 	bl	8003e50 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b0:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 80063b2:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80063b8:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80063ba:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063bc:	d05c      	beq.n	8006478 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 80063be:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80063c0:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80063c2:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80063c4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d07e      	beq.n	80064ca <HAL_UART_Transmit+0x156>
 80063cc:	6822      	ldr	r2, [r4, #0]
 80063ce:	1c69      	adds	r1, r5, #1
 80063d0:	d11e      	bne.n	8006410 <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d2:	6813      	ldr	r3, [r2, #0]
 80063d4:	061b      	lsls	r3, r3, #24
 80063d6:	d5fc      	bpl.n	80063d2 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 80063d8:	f1b8 0f00 	cmp.w	r8, #0
 80063dc:	d044      	beq.n	8006468 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063de:	f818 3b01 	ldrb.w	r3, [r8], #1
 80063e2:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80063e4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	84e3      	strh	r3, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80063ec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1ec      	bne.n	80063ce <HAL_UART_Transmit+0x5a>
 80063f4:	1c68      	adds	r0, r5, #1
 80063f6:	d145      	bne.n	8006484 <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f8:	6813      	ldr	r3, [r2, #0]
 80063fa:	0659      	lsls	r1, r3, #25
 80063fc:	d5fc      	bpl.n	80063f8 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80063fe:	2320      	movs	r3, #32
 8006400:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8006404:	2000      	movs	r0, #0
}
 8006406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800640a:	2001      	movs	r0, #1
}
 800640c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006410:	6813      	ldr	r3, [r2, #0]
 8006412:	061f      	lsls	r7, r3, #24
 8006414:	d4e0      	bmi.n	80063d8 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006416:	b12d      	cbz	r5, 8006424 <HAL_UART_Transmit+0xb0>
 8006418:	f7fd fd1a 	bl	8003e50 <HAL_GetTick>
 800641c:	1b80      	subs	r0, r0, r6
 800641e:	4285      	cmp	r5, r0
 8006420:	6822      	ldr	r2, [r4, #0]
 8006422:	d2d4      	bcs.n	80063ce <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006424:	f102 030c 	add.w	r3, r2, #12
 8006428:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800642c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	f102 000c 	add.w	r0, r2, #12
 8006434:	e840 3100 	strex	r1, r3, [r0]
 8006438:	2900      	cmp	r1, #0
 800643a:	d1f3      	bne.n	8006424 <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	f102 0314 	add.w	r3, r2, #20
 8006440:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006444:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006448:	f102 0014 	add.w	r0, r2, #20
 800644c:	e840 3100 	strex	r1, r3, [r0]
 8006450:	2900      	cmp	r1, #0
 8006452:	d1f3      	bne.n	800643c <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 8006454:	2320      	movs	r3, #32
 8006456:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 800645a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 800645e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      return HAL_TIMEOUT;
 8006462:	2003      	movs	r0, #3
}
 8006464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006468:	f839 3b02 	ldrh.w	r3, [r9], #2
 800646c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006470:	e7b7      	b.n	80063e2 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8006472:	2002      	movs	r0, #2
}
 8006474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006478:	6923      	ldr	r3, [r4, #16]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d19f      	bne.n	80063be <HAL_UART_Transmit+0x4a>
 800647e:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8006480:	4698      	mov	r8, r3
 8006482:	e79c      	b.n	80063be <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006484:	6813      	ldr	r3, [r2, #0]
 8006486:	065b      	lsls	r3, r3, #25
 8006488:	d4b9      	bmi.n	80063fe <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800648a:	b12d      	cbz	r5, 8006498 <HAL_UART_Transmit+0x124>
 800648c:	f7fd fce0 	bl	8003e50 <HAL_GetTick>
 8006490:	1b80      	subs	r0, r0, r6
 8006492:	4285      	cmp	r5, r0
 8006494:	6822      	ldr	r2, [r4, #0]
 8006496:	d2ad      	bcs.n	80063f4 <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	f102 030c 	add.w	r3, r2, #12
 800649c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	f102 000c 	add.w	r0, r2, #12
 80064a8:	e840 3100 	strex	r1, r3, [r0]
 80064ac:	2900      	cmp	r1, #0
 80064ae:	d1f3      	bne.n	8006498 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	f102 0314 	add.w	r3, r2, #20
 80064b4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	f102 0014 	add.w	r0, r2, #20
 80064c0:	e840 3100 	strex	r1, r3, [r0]
 80064c4:	2900      	cmp	r1, #0
 80064c6:	d1f3      	bne.n	80064b0 <HAL_UART_Transmit+0x13c>
 80064c8:	e7c4      	b.n	8006454 <HAL_UART_Transmit+0xe0>
 80064ca:	6822      	ldr	r2, [r4, #0]
 80064cc:	e792      	b.n	80063f4 <HAL_UART_Transmit+0x80>
 80064ce:	bf00      	nop

080064d0 <__errno>:
 80064d0:	4b01      	ldr	r3, [pc, #4]	; (80064d8 <__errno+0x8>)
 80064d2:	6818      	ldr	r0, [r3, #0]
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	20002028 	.word	0x20002028

080064dc <__libc_init_array>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	4d0d      	ldr	r5, [pc, #52]	; (8006514 <__libc_init_array+0x38>)
 80064e0:	4c0d      	ldr	r4, [pc, #52]	; (8006518 <__libc_init_array+0x3c>)
 80064e2:	1b64      	subs	r4, r4, r5
 80064e4:	10a4      	asrs	r4, r4, #2
 80064e6:	2600      	movs	r6, #0
 80064e8:	42a6      	cmp	r6, r4
 80064ea:	d109      	bne.n	8006500 <__libc_init_array+0x24>
 80064ec:	4d0b      	ldr	r5, [pc, #44]	; (800651c <__libc_init_array+0x40>)
 80064ee:	4c0c      	ldr	r4, [pc, #48]	; (8006520 <__libc_init_array+0x44>)
 80064f0:	f004 fe04 	bl	800b0fc <_init>
 80064f4:	1b64      	subs	r4, r4, r5
 80064f6:	10a4      	asrs	r4, r4, #2
 80064f8:	2600      	movs	r6, #0
 80064fa:	42a6      	cmp	r6, r4
 80064fc:	d105      	bne.n	800650a <__libc_init_array+0x2e>
 80064fe:	bd70      	pop	{r4, r5, r6, pc}
 8006500:	f855 3b04 	ldr.w	r3, [r5], #4
 8006504:	4798      	blx	r3
 8006506:	3601      	adds	r6, #1
 8006508:	e7ee      	b.n	80064e8 <__libc_init_array+0xc>
 800650a:	f855 3b04 	ldr.w	r3, [r5], #4
 800650e:	4798      	blx	r3
 8006510:	3601      	adds	r6, #1
 8006512:	e7f2      	b.n	80064fa <__libc_init_array+0x1e>
 8006514:	0800b8f0 	.word	0x0800b8f0
 8006518:	0800b8f0 	.word	0x0800b8f0
 800651c:	0800b8f0 	.word	0x0800b8f0
 8006520:	0800b8f4 	.word	0x0800b8f4

08006524 <memset>:
 8006524:	4402      	add	r2, r0
 8006526:	4603      	mov	r3, r0
 8006528:	4293      	cmp	r3, r2
 800652a:	d100      	bne.n	800652e <memset+0xa>
 800652c:	4770      	bx	lr
 800652e:	f803 1b01 	strb.w	r1, [r3], #1
 8006532:	e7f9      	b.n	8006528 <memset+0x4>

08006534 <__cvt>:
 8006534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006538:	ec55 4b10 	vmov	r4, r5, d0
 800653c:	2d00      	cmp	r5, #0
 800653e:	460e      	mov	r6, r1
 8006540:	4619      	mov	r1, r3
 8006542:	462b      	mov	r3, r5
 8006544:	bfbb      	ittet	lt
 8006546:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800654a:	461d      	movlt	r5, r3
 800654c:	2300      	movge	r3, #0
 800654e:	232d      	movlt	r3, #45	; 0x2d
 8006550:	700b      	strb	r3, [r1, #0]
 8006552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006554:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006558:	4691      	mov	r9, r2
 800655a:	f023 0820 	bic.w	r8, r3, #32
 800655e:	bfbc      	itt	lt
 8006560:	4622      	movlt	r2, r4
 8006562:	4614      	movlt	r4, r2
 8006564:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006568:	d005      	beq.n	8006576 <__cvt+0x42>
 800656a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800656e:	d100      	bne.n	8006572 <__cvt+0x3e>
 8006570:	3601      	adds	r6, #1
 8006572:	2102      	movs	r1, #2
 8006574:	e000      	b.n	8006578 <__cvt+0x44>
 8006576:	2103      	movs	r1, #3
 8006578:	ab03      	add	r3, sp, #12
 800657a:	9301      	str	r3, [sp, #4]
 800657c:	ab02      	add	r3, sp, #8
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	ec45 4b10 	vmov	d0, r4, r5
 8006584:	4653      	mov	r3, sl
 8006586:	4632      	mov	r2, r6
 8006588:	f000 fcea 	bl	8006f60 <_dtoa_r>
 800658c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006590:	4607      	mov	r7, r0
 8006592:	d102      	bne.n	800659a <__cvt+0x66>
 8006594:	f019 0f01 	tst.w	r9, #1
 8006598:	d022      	beq.n	80065e0 <__cvt+0xac>
 800659a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800659e:	eb07 0906 	add.w	r9, r7, r6
 80065a2:	d110      	bne.n	80065c6 <__cvt+0x92>
 80065a4:	783b      	ldrb	r3, [r7, #0]
 80065a6:	2b30      	cmp	r3, #48	; 0x30
 80065a8:	d10a      	bne.n	80065c0 <__cvt+0x8c>
 80065aa:	2200      	movs	r2, #0
 80065ac:	2300      	movs	r3, #0
 80065ae:	4620      	mov	r0, r4
 80065b0:	4629      	mov	r1, r5
 80065b2:	f7fa fa91 	bl	8000ad8 <__aeabi_dcmpeq>
 80065b6:	b918      	cbnz	r0, 80065c0 <__cvt+0x8c>
 80065b8:	f1c6 0601 	rsb	r6, r6, #1
 80065bc:	f8ca 6000 	str.w	r6, [sl]
 80065c0:	f8da 3000 	ldr.w	r3, [sl]
 80065c4:	4499      	add	r9, r3
 80065c6:	2200      	movs	r2, #0
 80065c8:	2300      	movs	r3, #0
 80065ca:	4620      	mov	r0, r4
 80065cc:	4629      	mov	r1, r5
 80065ce:	f7fa fa83 	bl	8000ad8 <__aeabi_dcmpeq>
 80065d2:	b108      	cbz	r0, 80065d8 <__cvt+0xa4>
 80065d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80065d8:	2230      	movs	r2, #48	; 0x30
 80065da:	9b03      	ldr	r3, [sp, #12]
 80065dc:	454b      	cmp	r3, r9
 80065de:	d307      	bcc.n	80065f0 <__cvt+0xbc>
 80065e0:	9b03      	ldr	r3, [sp, #12]
 80065e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065e4:	1bdb      	subs	r3, r3, r7
 80065e6:	4638      	mov	r0, r7
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	b004      	add	sp, #16
 80065ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f0:	1c59      	adds	r1, r3, #1
 80065f2:	9103      	str	r1, [sp, #12]
 80065f4:	701a      	strb	r2, [r3, #0]
 80065f6:	e7f0      	b.n	80065da <__cvt+0xa6>

080065f8 <__exponent>:
 80065f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065fa:	4603      	mov	r3, r0
 80065fc:	2900      	cmp	r1, #0
 80065fe:	bfb8      	it	lt
 8006600:	4249      	neglt	r1, r1
 8006602:	f803 2b02 	strb.w	r2, [r3], #2
 8006606:	bfb4      	ite	lt
 8006608:	222d      	movlt	r2, #45	; 0x2d
 800660a:	222b      	movge	r2, #43	; 0x2b
 800660c:	2909      	cmp	r1, #9
 800660e:	7042      	strb	r2, [r0, #1]
 8006610:	dd2a      	ble.n	8006668 <__exponent+0x70>
 8006612:	f10d 0407 	add.w	r4, sp, #7
 8006616:	46a4      	mov	ip, r4
 8006618:	270a      	movs	r7, #10
 800661a:	46a6      	mov	lr, r4
 800661c:	460a      	mov	r2, r1
 800661e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006622:	fb07 1516 	mls	r5, r7, r6, r1
 8006626:	3530      	adds	r5, #48	; 0x30
 8006628:	2a63      	cmp	r2, #99	; 0x63
 800662a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800662e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006632:	4631      	mov	r1, r6
 8006634:	dcf1      	bgt.n	800661a <__exponent+0x22>
 8006636:	3130      	adds	r1, #48	; 0x30
 8006638:	f1ae 0502 	sub.w	r5, lr, #2
 800663c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006640:	1c44      	adds	r4, r0, #1
 8006642:	4629      	mov	r1, r5
 8006644:	4561      	cmp	r1, ip
 8006646:	d30a      	bcc.n	800665e <__exponent+0x66>
 8006648:	f10d 0209 	add.w	r2, sp, #9
 800664c:	eba2 020e 	sub.w	r2, r2, lr
 8006650:	4565      	cmp	r5, ip
 8006652:	bf88      	it	hi
 8006654:	2200      	movhi	r2, #0
 8006656:	4413      	add	r3, r2
 8006658:	1a18      	subs	r0, r3, r0
 800665a:	b003      	add	sp, #12
 800665c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800665e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006662:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006666:	e7ed      	b.n	8006644 <__exponent+0x4c>
 8006668:	2330      	movs	r3, #48	; 0x30
 800666a:	3130      	adds	r1, #48	; 0x30
 800666c:	7083      	strb	r3, [r0, #2]
 800666e:	70c1      	strb	r1, [r0, #3]
 8006670:	1d03      	adds	r3, r0, #4
 8006672:	e7f1      	b.n	8006658 <__exponent+0x60>

08006674 <_printf_float>:
 8006674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006678:	ed2d 8b02 	vpush	{d8}
 800667c:	b08d      	sub	sp, #52	; 0x34
 800667e:	460c      	mov	r4, r1
 8006680:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006684:	4616      	mov	r6, r2
 8006686:	461f      	mov	r7, r3
 8006688:	4605      	mov	r5, r0
 800668a:	f001 fa55 	bl	8007b38 <_localeconv_r>
 800668e:	f8d0 a000 	ldr.w	sl, [r0]
 8006692:	4650      	mov	r0, sl
 8006694:	f7f9 fda4 	bl	80001e0 <strlen>
 8006698:	2300      	movs	r3, #0
 800669a:	930a      	str	r3, [sp, #40]	; 0x28
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	9305      	str	r3, [sp, #20]
 80066a0:	f8d8 3000 	ldr.w	r3, [r8]
 80066a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80066a8:	3307      	adds	r3, #7
 80066aa:	f023 0307 	bic.w	r3, r3, #7
 80066ae:	f103 0208 	add.w	r2, r3, #8
 80066b2:	f8c8 2000 	str.w	r2, [r8]
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066c6:	9307      	str	r3, [sp, #28]
 80066c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80066cc:	ee08 0a10 	vmov	s16, r0
 80066d0:	4b9f      	ldr	r3, [pc, #636]	; (8006950 <_printf_float+0x2dc>)
 80066d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066da:	f7fa fa2f 	bl	8000b3c <__aeabi_dcmpun>
 80066de:	bb88      	cbnz	r0, 8006744 <_printf_float+0xd0>
 80066e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066e4:	4b9a      	ldr	r3, [pc, #616]	; (8006950 <_printf_float+0x2dc>)
 80066e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066ea:	f7fa fa09 	bl	8000b00 <__aeabi_dcmple>
 80066ee:	bb48      	cbnz	r0, 8006744 <_printf_float+0xd0>
 80066f0:	2200      	movs	r2, #0
 80066f2:	2300      	movs	r3, #0
 80066f4:	4640      	mov	r0, r8
 80066f6:	4649      	mov	r1, r9
 80066f8:	f7fa f9f8 	bl	8000aec <__aeabi_dcmplt>
 80066fc:	b110      	cbz	r0, 8006704 <_printf_float+0x90>
 80066fe:	232d      	movs	r3, #45	; 0x2d
 8006700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006704:	4b93      	ldr	r3, [pc, #588]	; (8006954 <_printf_float+0x2e0>)
 8006706:	4894      	ldr	r0, [pc, #592]	; (8006958 <_printf_float+0x2e4>)
 8006708:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800670c:	bf94      	ite	ls
 800670e:	4698      	movls	r8, r3
 8006710:	4680      	movhi	r8, r0
 8006712:	2303      	movs	r3, #3
 8006714:	6123      	str	r3, [r4, #16]
 8006716:	9b05      	ldr	r3, [sp, #20]
 8006718:	f023 0204 	bic.w	r2, r3, #4
 800671c:	6022      	str	r2, [r4, #0]
 800671e:	f04f 0900 	mov.w	r9, #0
 8006722:	9700      	str	r7, [sp, #0]
 8006724:	4633      	mov	r3, r6
 8006726:	aa0b      	add	r2, sp, #44	; 0x2c
 8006728:	4621      	mov	r1, r4
 800672a:	4628      	mov	r0, r5
 800672c:	f000 f9d8 	bl	8006ae0 <_printf_common>
 8006730:	3001      	adds	r0, #1
 8006732:	f040 8090 	bne.w	8006856 <_printf_float+0x1e2>
 8006736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800673a:	b00d      	add	sp, #52	; 0x34
 800673c:	ecbd 8b02 	vpop	{d8}
 8006740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006744:	4642      	mov	r2, r8
 8006746:	464b      	mov	r3, r9
 8006748:	4640      	mov	r0, r8
 800674a:	4649      	mov	r1, r9
 800674c:	f7fa f9f6 	bl	8000b3c <__aeabi_dcmpun>
 8006750:	b140      	cbz	r0, 8006764 <_printf_float+0xf0>
 8006752:	464b      	mov	r3, r9
 8006754:	2b00      	cmp	r3, #0
 8006756:	bfbc      	itt	lt
 8006758:	232d      	movlt	r3, #45	; 0x2d
 800675a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800675e:	487f      	ldr	r0, [pc, #508]	; (800695c <_printf_float+0x2e8>)
 8006760:	4b7f      	ldr	r3, [pc, #508]	; (8006960 <_printf_float+0x2ec>)
 8006762:	e7d1      	b.n	8006708 <_printf_float+0x94>
 8006764:	6863      	ldr	r3, [r4, #4]
 8006766:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800676a:	9206      	str	r2, [sp, #24]
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	d13f      	bne.n	80067f0 <_printf_float+0x17c>
 8006770:	2306      	movs	r3, #6
 8006772:	6063      	str	r3, [r4, #4]
 8006774:	9b05      	ldr	r3, [sp, #20]
 8006776:	6861      	ldr	r1, [r4, #4]
 8006778:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800677c:	2300      	movs	r3, #0
 800677e:	9303      	str	r3, [sp, #12]
 8006780:	ab0a      	add	r3, sp, #40	; 0x28
 8006782:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006786:	ab09      	add	r3, sp, #36	; 0x24
 8006788:	ec49 8b10 	vmov	d0, r8, r9
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	6022      	str	r2, [r4, #0]
 8006790:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006794:	4628      	mov	r0, r5
 8006796:	f7ff fecd 	bl	8006534 <__cvt>
 800679a:	9b06      	ldr	r3, [sp, #24]
 800679c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800679e:	2b47      	cmp	r3, #71	; 0x47
 80067a0:	4680      	mov	r8, r0
 80067a2:	d108      	bne.n	80067b6 <_printf_float+0x142>
 80067a4:	1cc8      	adds	r0, r1, #3
 80067a6:	db02      	blt.n	80067ae <_printf_float+0x13a>
 80067a8:	6863      	ldr	r3, [r4, #4]
 80067aa:	4299      	cmp	r1, r3
 80067ac:	dd41      	ble.n	8006832 <_printf_float+0x1be>
 80067ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80067b2:	fa5f fb8b 	uxtb.w	fp, fp
 80067b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067ba:	d820      	bhi.n	80067fe <_printf_float+0x18a>
 80067bc:	3901      	subs	r1, #1
 80067be:	465a      	mov	r2, fp
 80067c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067c4:	9109      	str	r1, [sp, #36]	; 0x24
 80067c6:	f7ff ff17 	bl	80065f8 <__exponent>
 80067ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067cc:	1813      	adds	r3, r2, r0
 80067ce:	2a01      	cmp	r2, #1
 80067d0:	4681      	mov	r9, r0
 80067d2:	6123      	str	r3, [r4, #16]
 80067d4:	dc02      	bgt.n	80067dc <_printf_float+0x168>
 80067d6:	6822      	ldr	r2, [r4, #0]
 80067d8:	07d2      	lsls	r2, r2, #31
 80067da:	d501      	bpl.n	80067e0 <_printf_float+0x16c>
 80067dc:	3301      	adds	r3, #1
 80067de:	6123      	str	r3, [r4, #16]
 80067e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d09c      	beq.n	8006722 <_printf_float+0xae>
 80067e8:	232d      	movs	r3, #45	; 0x2d
 80067ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067ee:	e798      	b.n	8006722 <_printf_float+0xae>
 80067f0:	9a06      	ldr	r2, [sp, #24]
 80067f2:	2a47      	cmp	r2, #71	; 0x47
 80067f4:	d1be      	bne.n	8006774 <_printf_float+0x100>
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1bc      	bne.n	8006774 <_printf_float+0x100>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e7b9      	b.n	8006772 <_printf_float+0xfe>
 80067fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006802:	d118      	bne.n	8006836 <_printf_float+0x1c2>
 8006804:	2900      	cmp	r1, #0
 8006806:	6863      	ldr	r3, [r4, #4]
 8006808:	dd0b      	ble.n	8006822 <_printf_float+0x1ae>
 800680a:	6121      	str	r1, [r4, #16]
 800680c:	b913      	cbnz	r3, 8006814 <_printf_float+0x1a0>
 800680e:	6822      	ldr	r2, [r4, #0]
 8006810:	07d0      	lsls	r0, r2, #31
 8006812:	d502      	bpl.n	800681a <_printf_float+0x1a6>
 8006814:	3301      	adds	r3, #1
 8006816:	440b      	add	r3, r1
 8006818:	6123      	str	r3, [r4, #16]
 800681a:	65a1      	str	r1, [r4, #88]	; 0x58
 800681c:	f04f 0900 	mov.w	r9, #0
 8006820:	e7de      	b.n	80067e0 <_printf_float+0x16c>
 8006822:	b913      	cbnz	r3, 800682a <_printf_float+0x1b6>
 8006824:	6822      	ldr	r2, [r4, #0]
 8006826:	07d2      	lsls	r2, r2, #31
 8006828:	d501      	bpl.n	800682e <_printf_float+0x1ba>
 800682a:	3302      	adds	r3, #2
 800682c:	e7f4      	b.n	8006818 <_printf_float+0x1a4>
 800682e:	2301      	movs	r3, #1
 8006830:	e7f2      	b.n	8006818 <_printf_float+0x1a4>
 8006832:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006838:	4299      	cmp	r1, r3
 800683a:	db05      	blt.n	8006848 <_printf_float+0x1d4>
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	6121      	str	r1, [r4, #16]
 8006840:	07d8      	lsls	r0, r3, #31
 8006842:	d5ea      	bpl.n	800681a <_printf_float+0x1a6>
 8006844:	1c4b      	adds	r3, r1, #1
 8006846:	e7e7      	b.n	8006818 <_printf_float+0x1a4>
 8006848:	2900      	cmp	r1, #0
 800684a:	bfd4      	ite	le
 800684c:	f1c1 0202 	rsble	r2, r1, #2
 8006850:	2201      	movgt	r2, #1
 8006852:	4413      	add	r3, r2
 8006854:	e7e0      	b.n	8006818 <_printf_float+0x1a4>
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	055a      	lsls	r2, r3, #21
 800685a:	d407      	bmi.n	800686c <_printf_float+0x1f8>
 800685c:	6923      	ldr	r3, [r4, #16]
 800685e:	4642      	mov	r2, r8
 8006860:	4631      	mov	r1, r6
 8006862:	4628      	mov	r0, r5
 8006864:	47b8      	blx	r7
 8006866:	3001      	adds	r0, #1
 8006868:	d12c      	bne.n	80068c4 <_printf_float+0x250>
 800686a:	e764      	b.n	8006736 <_printf_float+0xc2>
 800686c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006870:	f240 80e0 	bls.w	8006a34 <_printf_float+0x3c0>
 8006874:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006878:	2200      	movs	r2, #0
 800687a:	2300      	movs	r3, #0
 800687c:	f7fa f92c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006880:	2800      	cmp	r0, #0
 8006882:	d034      	beq.n	80068ee <_printf_float+0x27a>
 8006884:	4a37      	ldr	r2, [pc, #220]	; (8006964 <_printf_float+0x2f0>)
 8006886:	2301      	movs	r3, #1
 8006888:	4631      	mov	r1, r6
 800688a:	4628      	mov	r0, r5
 800688c:	47b8      	blx	r7
 800688e:	3001      	adds	r0, #1
 8006890:	f43f af51 	beq.w	8006736 <_printf_float+0xc2>
 8006894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006898:	429a      	cmp	r2, r3
 800689a:	db02      	blt.n	80068a2 <_printf_float+0x22e>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	07d8      	lsls	r0, r3, #31
 80068a0:	d510      	bpl.n	80068c4 <_printf_float+0x250>
 80068a2:	ee18 3a10 	vmov	r3, s16
 80068a6:	4652      	mov	r2, sl
 80068a8:	4631      	mov	r1, r6
 80068aa:	4628      	mov	r0, r5
 80068ac:	47b8      	blx	r7
 80068ae:	3001      	adds	r0, #1
 80068b0:	f43f af41 	beq.w	8006736 <_printf_float+0xc2>
 80068b4:	f04f 0800 	mov.w	r8, #0
 80068b8:	f104 091a 	add.w	r9, r4, #26
 80068bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068be:	3b01      	subs	r3, #1
 80068c0:	4543      	cmp	r3, r8
 80068c2:	dc09      	bgt.n	80068d8 <_printf_float+0x264>
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	079b      	lsls	r3, r3, #30
 80068c8:	f100 8105 	bmi.w	8006ad6 <_printf_float+0x462>
 80068cc:	68e0      	ldr	r0, [r4, #12]
 80068ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068d0:	4298      	cmp	r0, r3
 80068d2:	bfb8      	it	lt
 80068d4:	4618      	movlt	r0, r3
 80068d6:	e730      	b.n	800673a <_printf_float+0xc6>
 80068d8:	2301      	movs	r3, #1
 80068da:	464a      	mov	r2, r9
 80068dc:	4631      	mov	r1, r6
 80068de:	4628      	mov	r0, r5
 80068e0:	47b8      	blx	r7
 80068e2:	3001      	adds	r0, #1
 80068e4:	f43f af27 	beq.w	8006736 <_printf_float+0xc2>
 80068e8:	f108 0801 	add.w	r8, r8, #1
 80068ec:	e7e6      	b.n	80068bc <_printf_float+0x248>
 80068ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	dc39      	bgt.n	8006968 <_printf_float+0x2f4>
 80068f4:	4a1b      	ldr	r2, [pc, #108]	; (8006964 <_printf_float+0x2f0>)
 80068f6:	2301      	movs	r3, #1
 80068f8:	4631      	mov	r1, r6
 80068fa:	4628      	mov	r0, r5
 80068fc:	47b8      	blx	r7
 80068fe:	3001      	adds	r0, #1
 8006900:	f43f af19 	beq.w	8006736 <_printf_float+0xc2>
 8006904:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006908:	4313      	orrs	r3, r2
 800690a:	d102      	bne.n	8006912 <_printf_float+0x29e>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	07d9      	lsls	r1, r3, #31
 8006910:	d5d8      	bpl.n	80068c4 <_printf_float+0x250>
 8006912:	ee18 3a10 	vmov	r3, s16
 8006916:	4652      	mov	r2, sl
 8006918:	4631      	mov	r1, r6
 800691a:	4628      	mov	r0, r5
 800691c:	47b8      	blx	r7
 800691e:	3001      	adds	r0, #1
 8006920:	f43f af09 	beq.w	8006736 <_printf_float+0xc2>
 8006924:	f04f 0900 	mov.w	r9, #0
 8006928:	f104 0a1a 	add.w	sl, r4, #26
 800692c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692e:	425b      	negs	r3, r3
 8006930:	454b      	cmp	r3, r9
 8006932:	dc01      	bgt.n	8006938 <_printf_float+0x2c4>
 8006934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006936:	e792      	b.n	800685e <_printf_float+0x1ea>
 8006938:	2301      	movs	r3, #1
 800693a:	4652      	mov	r2, sl
 800693c:	4631      	mov	r1, r6
 800693e:	4628      	mov	r0, r5
 8006940:	47b8      	blx	r7
 8006942:	3001      	adds	r0, #1
 8006944:	f43f aef7 	beq.w	8006736 <_printf_float+0xc2>
 8006948:	f109 0901 	add.w	r9, r9, #1
 800694c:	e7ee      	b.n	800692c <_printf_float+0x2b8>
 800694e:	bf00      	nop
 8006950:	7fefffff 	.word	0x7fefffff
 8006954:	0800b2b0 	.word	0x0800b2b0
 8006958:	0800b2b4 	.word	0x0800b2b4
 800695c:	0800b2bc 	.word	0x0800b2bc
 8006960:	0800b2b8 	.word	0x0800b2b8
 8006964:	0800b2c0 	.word	0x0800b2c0
 8006968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800696a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800696c:	429a      	cmp	r2, r3
 800696e:	bfa8      	it	ge
 8006970:	461a      	movge	r2, r3
 8006972:	2a00      	cmp	r2, #0
 8006974:	4691      	mov	r9, r2
 8006976:	dc37      	bgt.n	80069e8 <_printf_float+0x374>
 8006978:	f04f 0b00 	mov.w	fp, #0
 800697c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006980:	f104 021a 	add.w	r2, r4, #26
 8006984:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006986:	9305      	str	r3, [sp, #20]
 8006988:	eba3 0309 	sub.w	r3, r3, r9
 800698c:	455b      	cmp	r3, fp
 800698e:	dc33      	bgt.n	80069f8 <_printf_float+0x384>
 8006990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006994:	429a      	cmp	r2, r3
 8006996:	db3b      	blt.n	8006a10 <_printf_float+0x39c>
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	07da      	lsls	r2, r3, #31
 800699c:	d438      	bmi.n	8006a10 <_printf_float+0x39c>
 800699e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069a0:	9b05      	ldr	r3, [sp, #20]
 80069a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	eba2 0901 	sub.w	r9, r2, r1
 80069aa:	4599      	cmp	r9, r3
 80069ac:	bfa8      	it	ge
 80069ae:	4699      	movge	r9, r3
 80069b0:	f1b9 0f00 	cmp.w	r9, #0
 80069b4:	dc35      	bgt.n	8006a22 <_printf_float+0x3ae>
 80069b6:	f04f 0800 	mov.w	r8, #0
 80069ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069be:	f104 0a1a 	add.w	sl, r4, #26
 80069c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069c6:	1a9b      	subs	r3, r3, r2
 80069c8:	eba3 0309 	sub.w	r3, r3, r9
 80069cc:	4543      	cmp	r3, r8
 80069ce:	f77f af79 	ble.w	80068c4 <_printf_float+0x250>
 80069d2:	2301      	movs	r3, #1
 80069d4:	4652      	mov	r2, sl
 80069d6:	4631      	mov	r1, r6
 80069d8:	4628      	mov	r0, r5
 80069da:	47b8      	blx	r7
 80069dc:	3001      	adds	r0, #1
 80069de:	f43f aeaa 	beq.w	8006736 <_printf_float+0xc2>
 80069e2:	f108 0801 	add.w	r8, r8, #1
 80069e6:	e7ec      	b.n	80069c2 <_printf_float+0x34e>
 80069e8:	4613      	mov	r3, r2
 80069ea:	4631      	mov	r1, r6
 80069ec:	4642      	mov	r2, r8
 80069ee:	4628      	mov	r0, r5
 80069f0:	47b8      	blx	r7
 80069f2:	3001      	adds	r0, #1
 80069f4:	d1c0      	bne.n	8006978 <_printf_float+0x304>
 80069f6:	e69e      	b.n	8006736 <_printf_float+0xc2>
 80069f8:	2301      	movs	r3, #1
 80069fa:	4631      	mov	r1, r6
 80069fc:	4628      	mov	r0, r5
 80069fe:	9205      	str	r2, [sp, #20]
 8006a00:	47b8      	blx	r7
 8006a02:	3001      	adds	r0, #1
 8006a04:	f43f ae97 	beq.w	8006736 <_printf_float+0xc2>
 8006a08:	9a05      	ldr	r2, [sp, #20]
 8006a0a:	f10b 0b01 	add.w	fp, fp, #1
 8006a0e:	e7b9      	b.n	8006984 <_printf_float+0x310>
 8006a10:	ee18 3a10 	vmov	r3, s16
 8006a14:	4652      	mov	r2, sl
 8006a16:	4631      	mov	r1, r6
 8006a18:	4628      	mov	r0, r5
 8006a1a:	47b8      	blx	r7
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	d1be      	bne.n	800699e <_printf_float+0x32a>
 8006a20:	e689      	b.n	8006736 <_printf_float+0xc2>
 8006a22:	9a05      	ldr	r2, [sp, #20]
 8006a24:	464b      	mov	r3, r9
 8006a26:	4442      	add	r2, r8
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	47b8      	blx	r7
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d1c1      	bne.n	80069b6 <_printf_float+0x342>
 8006a32:	e680      	b.n	8006736 <_printf_float+0xc2>
 8006a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a36:	2a01      	cmp	r2, #1
 8006a38:	dc01      	bgt.n	8006a3e <_printf_float+0x3ca>
 8006a3a:	07db      	lsls	r3, r3, #31
 8006a3c:	d538      	bpl.n	8006ab0 <_printf_float+0x43c>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	4642      	mov	r2, r8
 8006a42:	4631      	mov	r1, r6
 8006a44:	4628      	mov	r0, r5
 8006a46:	47b8      	blx	r7
 8006a48:	3001      	adds	r0, #1
 8006a4a:	f43f ae74 	beq.w	8006736 <_printf_float+0xc2>
 8006a4e:	ee18 3a10 	vmov	r3, s16
 8006a52:	4652      	mov	r2, sl
 8006a54:	4631      	mov	r1, r6
 8006a56:	4628      	mov	r0, r5
 8006a58:	47b8      	blx	r7
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	f43f ae6b 	beq.w	8006736 <_printf_float+0xc2>
 8006a60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a64:	2200      	movs	r2, #0
 8006a66:	2300      	movs	r3, #0
 8006a68:	f7fa f836 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a6c:	b9d8      	cbnz	r0, 8006aa6 <_printf_float+0x432>
 8006a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a70:	f108 0201 	add.w	r2, r8, #1
 8006a74:	3b01      	subs	r3, #1
 8006a76:	4631      	mov	r1, r6
 8006a78:	4628      	mov	r0, r5
 8006a7a:	47b8      	blx	r7
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	d10e      	bne.n	8006a9e <_printf_float+0x42a>
 8006a80:	e659      	b.n	8006736 <_printf_float+0xc2>
 8006a82:	2301      	movs	r3, #1
 8006a84:	4652      	mov	r2, sl
 8006a86:	4631      	mov	r1, r6
 8006a88:	4628      	mov	r0, r5
 8006a8a:	47b8      	blx	r7
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	f43f ae52 	beq.w	8006736 <_printf_float+0xc2>
 8006a92:	f108 0801 	add.w	r8, r8, #1
 8006a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	4543      	cmp	r3, r8
 8006a9c:	dcf1      	bgt.n	8006a82 <_printf_float+0x40e>
 8006a9e:	464b      	mov	r3, r9
 8006aa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006aa4:	e6dc      	b.n	8006860 <_printf_float+0x1ec>
 8006aa6:	f04f 0800 	mov.w	r8, #0
 8006aaa:	f104 0a1a 	add.w	sl, r4, #26
 8006aae:	e7f2      	b.n	8006a96 <_printf_float+0x422>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	4642      	mov	r2, r8
 8006ab4:	e7df      	b.n	8006a76 <_printf_float+0x402>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	464a      	mov	r2, r9
 8006aba:	4631      	mov	r1, r6
 8006abc:	4628      	mov	r0, r5
 8006abe:	47b8      	blx	r7
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	f43f ae38 	beq.w	8006736 <_printf_float+0xc2>
 8006ac6:	f108 0801 	add.w	r8, r8, #1
 8006aca:	68e3      	ldr	r3, [r4, #12]
 8006acc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ace:	1a5b      	subs	r3, r3, r1
 8006ad0:	4543      	cmp	r3, r8
 8006ad2:	dcf0      	bgt.n	8006ab6 <_printf_float+0x442>
 8006ad4:	e6fa      	b.n	80068cc <_printf_float+0x258>
 8006ad6:	f04f 0800 	mov.w	r8, #0
 8006ada:	f104 0919 	add.w	r9, r4, #25
 8006ade:	e7f4      	b.n	8006aca <_printf_float+0x456>

08006ae0 <_printf_common>:
 8006ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae4:	4616      	mov	r6, r2
 8006ae6:	4699      	mov	r9, r3
 8006ae8:	688a      	ldr	r2, [r1, #8]
 8006aea:	690b      	ldr	r3, [r1, #16]
 8006aec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006af0:	4293      	cmp	r3, r2
 8006af2:	bfb8      	it	lt
 8006af4:	4613      	movlt	r3, r2
 8006af6:	6033      	str	r3, [r6, #0]
 8006af8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006afc:	4607      	mov	r7, r0
 8006afe:	460c      	mov	r4, r1
 8006b00:	b10a      	cbz	r2, 8006b06 <_printf_common+0x26>
 8006b02:	3301      	adds	r3, #1
 8006b04:	6033      	str	r3, [r6, #0]
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	0699      	lsls	r1, r3, #26
 8006b0a:	bf42      	ittt	mi
 8006b0c:	6833      	ldrmi	r3, [r6, #0]
 8006b0e:	3302      	addmi	r3, #2
 8006b10:	6033      	strmi	r3, [r6, #0]
 8006b12:	6825      	ldr	r5, [r4, #0]
 8006b14:	f015 0506 	ands.w	r5, r5, #6
 8006b18:	d106      	bne.n	8006b28 <_printf_common+0x48>
 8006b1a:	f104 0a19 	add.w	sl, r4, #25
 8006b1e:	68e3      	ldr	r3, [r4, #12]
 8006b20:	6832      	ldr	r2, [r6, #0]
 8006b22:	1a9b      	subs	r3, r3, r2
 8006b24:	42ab      	cmp	r3, r5
 8006b26:	dc26      	bgt.n	8006b76 <_printf_common+0x96>
 8006b28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b2c:	1e13      	subs	r3, r2, #0
 8006b2e:	6822      	ldr	r2, [r4, #0]
 8006b30:	bf18      	it	ne
 8006b32:	2301      	movne	r3, #1
 8006b34:	0692      	lsls	r2, r2, #26
 8006b36:	d42b      	bmi.n	8006b90 <_printf_common+0xb0>
 8006b38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	4638      	mov	r0, r7
 8006b40:	47c0      	blx	r8
 8006b42:	3001      	adds	r0, #1
 8006b44:	d01e      	beq.n	8006b84 <_printf_common+0xa4>
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	68e5      	ldr	r5, [r4, #12]
 8006b4a:	6832      	ldr	r2, [r6, #0]
 8006b4c:	f003 0306 	and.w	r3, r3, #6
 8006b50:	2b04      	cmp	r3, #4
 8006b52:	bf08      	it	eq
 8006b54:	1aad      	subeq	r5, r5, r2
 8006b56:	68a3      	ldr	r3, [r4, #8]
 8006b58:	6922      	ldr	r2, [r4, #16]
 8006b5a:	bf0c      	ite	eq
 8006b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b60:	2500      	movne	r5, #0
 8006b62:	4293      	cmp	r3, r2
 8006b64:	bfc4      	itt	gt
 8006b66:	1a9b      	subgt	r3, r3, r2
 8006b68:	18ed      	addgt	r5, r5, r3
 8006b6a:	2600      	movs	r6, #0
 8006b6c:	341a      	adds	r4, #26
 8006b6e:	42b5      	cmp	r5, r6
 8006b70:	d11a      	bne.n	8006ba8 <_printf_common+0xc8>
 8006b72:	2000      	movs	r0, #0
 8006b74:	e008      	b.n	8006b88 <_printf_common+0xa8>
 8006b76:	2301      	movs	r3, #1
 8006b78:	4652      	mov	r2, sl
 8006b7a:	4649      	mov	r1, r9
 8006b7c:	4638      	mov	r0, r7
 8006b7e:	47c0      	blx	r8
 8006b80:	3001      	adds	r0, #1
 8006b82:	d103      	bne.n	8006b8c <_printf_common+0xac>
 8006b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b8c:	3501      	adds	r5, #1
 8006b8e:	e7c6      	b.n	8006b1e <_printf_common+0x3e>
 8006b90:	18e1      	adds	r1, r4, r3
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	2030      	movs	r0, #48	; 0x30
 8006b96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b9a:	4422      	add	r2, r4
 8006b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ba0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ba4:	3302      	adds	r3, #2
 8006ba6:	e7c7      	b.n	8006b38 <_printf_common+0x58>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	4622      	mov	r2, r4
 8006bac:	4649      	mov	r1, r9
 8006bae:	4638      	mov	r0, r7
 8006bb0:	47c0      	blx	r8
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	d0e6      	beq.n	8006b84 <_printf_common+0xa4>
 8006bb6:	3601      	adds	r6, #1
 8006bb8:	e7d9      	b.n	8006b6e <_printf_common+0x8e>
	...

08006bbc <_printf_i>:
 8006bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	4691      	mov	r9, r2
 8006bc4:	7e27      	ldrb	r7, [r4, #24]
 8006bc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006bc8:	2f78      	cmp	r7, #120	; 0x78
 8006bca:	4680      	mov	r8, r0
 8006bcc:	469a      	mov	sl, r3
 8006bce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bd2:	d807      	bhi.n	8006be4 <_printf_i+0x28>
 8006bd4:	2f62      	cmp	r7, #98	; 0x62
 8006bd6:	d80a      	bhi.n	8006bee <_printf_i+0x32>
 8006bd8:	2f00      	cmp	r7, #0
 8006bda:	f000 80d8 	beq.w	8006d8e <_printf_i+0x1d2>
 8006bde:	2f58      	cmp	r7, #88	; 0x58
 8006be0:	f000 80a3 	beq.w	8006d2a <_printf_i+0x16e>
 8006be4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006be8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bec:	e03a      	b.n	8006c64 <_printf_i+0xa8>
 8006bee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bf2:	2b15      	cmp	r3, #21
 8006bf4:	d8f6      	bhi.n	8006be4 <_printf_i+0x28>
 8006bf6:	a001      	add	r0, pc, #4	; (adr r0, 8006bfc <_printf_i+0x40>)
 8006bf8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006bfc:	08006c55 	.word	0x08006c55
 8006c00:	08006c69 	.word	0x08006c69
 8006c04:	08006be5 	.word	0x08006be5
 8006c08:	08006be5 	.word	0x08006be5
 8006c0c:	08006be5 	.word	0x08006be5
 8006c10:	08006be5 	.word	0x08006be5
 8006c14:	08006c69 	.word	0x08006c69
 8006c18:	08006be5 	.word	0x08006be5
 8006c1c:	08006be5 	.word	0x08006be5
 8006c20:	08006be5 	.word	0x08006be5
 8006c24:	08006be5 	.word	0x08006be5
 8006c28:	08006d75 	.word	0x08006d75
 8006c2c:	08006c99 	.word	0x08006c99
 8006c30:	08006d57 	.word	0x08006d57
 8006c34:	08006be5 	.word	0x08006be5
 8006c38:	08006be5 	.word	0x08006be5
 8006c3c:	08006d97 	.word	0x08006d97
 8006c40:	08006be5 	.word	0x08006be5
 8006c44:	08006c99 	.word	0x08006c99
 8006c48:	08006be5 	.word	0x08006be5
 8006c4c:	08006be5 	.word	0x08006be5
 8006c50:	08006d5f 	.word	0x08006d5f
 8006c54:	680b      	ldr	r3, [r1, #0]
 8006c56:	1d1a      	adds	r2, r3, #4
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	600a      	str	r2, [r1, #0]
 8006c5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c64:	2301      	movs	r3, #1
 8006c66:	e0a3      	b.n	8006db0 <_printf_i+0x1f4>
 8006c68:	6825      	ldr	r5, [r4, #0]
 8006c6a:	6808      	ldr	r0, [r1, #0]
 8006c6c:	062e      	lsls	r6, r5, #24
 8006c6e:	f100 0304 	add.w	r3, r0, #4
 8006c72:	d50a      	bpl.n	8006c8a <_printf_i+0xce>
 8006c74:	6805      	ldr	r5, [r0, #0]
 8006c76:	600b      	str	r3, [r1, #0]
 8006c78:	2d00      	cmp	r5, #0
 8006c7a:	da03      	bge.n	8006c84 <_printf_i+0xc8>
 8006c7c:	232d      	movs	r3, #45	; 0x2d
 8006c7e:	426d      	negs	r5, r5
 8006c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c84:	485e      	ldr	r0, [pc, #376]	; (8006e00 <_printf_i+0x244>)
 8006c86:	230a      	movs	r3, #10
 8006c88:	e019      	b.n	8006cbe <_printf_i+0x102>
 8006c8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006c8e:	6805      	ldr	r5, [r0, #0]
 8006c90:	600b      	str	r3, [r1, #0]
 8006c92:	bf18      	it	ne
 8006c94:	b22d      	sxthne	r5, r5
 8006c96:	e7ef      	b.n	8006c78 <_printf_i+0xbc>
 8006c98:	680b      	ldr	r3, [r1, #0]
 8006c9a:	6825      	ldr	r5, [r4, #0]
 8006c9c:	1d18      	adds	r0, r3, #4
 8006c9e:	6008      	str	r0, [r1, #0]
 8006ca0:	0628      	lsls	r0, r5, #24
 8006ca2:	d501      	bpl.n	8006ca8 <_printf_i+0xec>
 8006ca4:	681d      	ldr	r5, [r3, #0]
 8006ca6:	e002      	b.n	8006cae <_printf_i+0xf2>
 8006ca8:	0669      	lsls	r1, r5, #25
 8006caa:	d5fb      	bpl.n	8006ca4 <_printf_i+0xe8>
 8006cac:	881d      	ldrh	r5, [r3, #0]
 8006cae:	4854      	ldr	r0, [pc, #336]	; (8006e00 <_printf_i+0x244>)
 8006cb0:	2f6f      	cmp	r7, #111	; 0x6f
 8006cb2:	bf0c      	ite	eq
 8006cb4:	2308      	moveq	r3, #8
 8006cb6:	230a      	movne	r3, #10
 8006cb8:	2100      	movs	r1, #0
 8006cba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cbe:	6866      	ldr	r6, [r4, #4]
 8006cc0:	60a6      	str	r6, [r4, #8]
 8006cc2:	2e00      	cmp	r6, #0
 8006cc4:	bfa2      	ittt	ge
 8006cc6:	6821      	ldrge	r1, [r4, #0]
 8006cc8:	f021 0104 	bicge.w	r1, r1, #4
 8006ccc:	6021      	strge	r1, [r4, #0]
 8006cce:	b90d      	cbnz	r5, 8006cd4 <_printf_i+0x118>
 8006cd0:	2e00      	cmp	r6, #0
 8006cd2:	d04d      	beq.n	8006d70 <_printf_i+0x1b4>
 8006cd4:	4616      	mov	r6, r2
 8006cd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cda:	fb03 5711 	mls	r7, r3, r1, r5
 8006cde:	5dc7      	ldrb	r7, [r0, r7]
 8006ce0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ce4:	462f      	mov	r7, r5
 8006ce6:	42bb      	cmp	r3, r7
 8006ce8:	460d      	mov	r5, r1
 8006cea:	d9f4      	bls.n	8006cd6 <_printf_i+0x11a>
 8006cec:	2b08      	cmp	r3, #8
 8006cee:	d10b      	bne.n	8006d08 <_printf_i+0x14c>
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	07df      	lsls	r7, r3, #31
 8006cf4:	d508      	bpl.n	8006d08 <_printf_i+0x14c>
 8006cf6:	6923      	ldr	r3, [r4, #16]
 8006cf8:	6861      	ldr	r1, [r4, #4]
 8006cfa:	4299      	cmp	r1, r3
 8006cfc:	bfde      	ittt	le
 8006cfe:	2330      	movle	r3, #48	; 0x30
 8006d00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d04:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006d08:	1b92      	subs	r2, r2, r6
 8006d0a:	6122      	str	r2, [r4, #16]
 8006d0c:	f8cd a000 	str.w	sl, [sp]
 8006d10:	464b      	mov	r3, r9
 8006d12:	aa03      	add	r2, sp, #12
 8006d14:	4621      	mov	r1, r4
 8006d16:	4640      	mov	r0, r8
 8006d18:	f7ff fee2 	bl	8006ae0 <_printf_common>
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	d14c      	bne.n	8006dba <_printf_i+0x1fe>
 8006d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d24:	b004      	add	sp, #16
 8006d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d2a:	4835      	ldr	r0, [pc, #212]	; (8006e00 <_printf_i+0x244>)
 8006d2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	680e      	ldr	r6, [r1, #0]
 8006d34:	061f      	lsls	r7, r3, #24
 8006d36:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d3a:	600e      	str	r6, [r1, #0]
 8006d3c:	d514      	bpl.n	8006d68 <_printf_i+0x1ac>
 8006d3e:	07d9      	lsls	r1, r3, #31
 8006d40:	bf44      	itt	mi
 8006d42:	f043 0320 	orrmi.w	r3, r3, #32
 8006d46:	6023      	strmi	r3, [r4, #0]
 8006d48:	b91d      	cbnz	r5, 8006d52 <_printf_i+0x196>
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	f023 0320 	bic.w	r3, r3, #32
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	2310      	movs	r3, #16
 8006d54:	e7b0      	b.n	8006cb8 <_printf_i+0xfc>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	f043 0320 	orr.w	r3, r3, #32
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	2378      	movs	r3, #120	; 0x78
 8006d60:	4828      	ldr	r0, [pc, #160]	; (8006e04 <_printf_i+0x248>)
 8006d62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d66:	e7e3      	b.n	8006d30 <_printf_i+0x174>
 8006d68:	065e      	lsls	r6, r3, #25
 8006d6a:	bf48      	it	mi
 8006d6c:	b2ad      	uxthmi	r5, r5
 8006d6e:	e7e6      	b.n	8006d3e <_printf_i+0x182>
 8006d70:	4616      	mov	r6, r2
 8006d72:	e7bb      	b.n	8006cec <_printf_i+0x130>
 8006d74:	680b      	ldr	r3, [r1, #0]
 8006d76:	6826      	ldr	r6, [r4, #0]
 8006d78:	6960      	ldr	r0, [r4, #20]
 8006d7a:	1d1d      	adds	r5, r3, #4
 8006d7c:	600d      	str	r5, [r1, #0]
 8006d7e:	0635      	lsls	r5, r6, #24
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	d501      	bpl.n	8006d88 <_printf_i+0x1cc>
 8006d84:	6018      	str	r0, [r3, #0]
 8006d86:	e002      	b.n	8006d8e <_printf_i+0x1d2>
 8006d88:	0671      	lsls	r1, r6, #25
 8006d8a:	d5fb      	bpl.n	8006d84 <_printf_i+0x1c8>
 8006d8c:	8018      	strh	r0, [r3, #0]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	6123      	str	r3, [r4, #16]
 8006d92:	4616      	mov	r6, r2
 8006d94:	e7ba      	b.n	8006d0c <_printf_i+0x150>
 8006d96:	680b      	ldr	r3, [r1, #0]
 8006d98:	1d1a      	adds	r2, r3, #4
 8006d9a:	600a      	str	r2, [r1, #0]
 8006d9c:	681e      	ldr	r6, [r3, #0]
 8006d9e:	6862      	ldr	r2, [r4, #4]
 8006da0:	2100      	movs	r1, #0
 8006da2:	4630      	mov	r0, r6
 8006da4:	f7f9 fa24 	bl	80001f0 <memchr>
 8006da8:	b108      	cbz	r0, 8006dae <_printf_i+0x1f2>
 8006daa:	1b80      	subs	r0, r0, r6
 8006dac:	6060      	str	r0, [r4, #4]
 8006dae:	6863      	ldr	r3, [r4, #4]
 8006db0:	6123      	str	r3, [r4, #16]
 8006db2:	2300      	movs	r3, #0
 8006db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006db8:	e7a8      	b.n	8006d0c <_printf_i+0x150>
 8006dba:	6923      	ldr	r3, [r4, #16]
 8006dbc:	4632      	mov	r2, r6
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	4640      	mov	r0, r8
 8006dc2:	47d0      	blx	sl
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d0ab      	beq.n	8006d20 <_printf_i+0x164>
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	079b      	lsls	r3, r3, #30
 8006dcc:	d413      	bmi.n	8006df6 <_printf_i+0x23a>
 8006dce:	68e0      	ldr	r0, [r4, #12]
 8006dd0:	9b03      	ldr	r3, [sp, #12]
 8006dd2:	4298      	cmp	r0, r3
 8006dd4:	bfb8      	it	lt
 8006dd6:	4618      	movlt	r0, r3
 8006dd8:	e7a4      	b.n	8006d24 <_printf_i+0x168>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	4632      	mov	r2, r6
 8006dde:	4649      	mov	r1, r9
 8006de0:	4640      	mov	r0, r8
 8006de2:	47d0      	blx	sl
 8006de4:	3001      	adds	r0, #1
 8006de6:	d09b      	beq.n	8006d20 <_printf_i+0x164>
 8006de8:	3501      	adds	r5, #1
 8006dea:	68e3      	ldr	r3, [r4, #12]
 8006dec:	9903      	ldr	r1, [sp, #12]
 8006dee:	1a5b      	subs	r3, r3, r1
 8006df0:	42ab      	cmp	r3, r5
 8006df2:	dcf2      	bgt.n	8006dda <_printf_i+0x21e>
 8006df4:	e7eb      	b.n	8006dce <_printf_i+0x212>
 8006df6:	2500      	movs	r5, #0
 8006df8:	f104 0619 	add.w	r6, r4, #25
 8006dfc:	e7f5      	b.n	8006dea <_printf_i+0x22e>
 8006dfe:	bf00      	nop
 8006e00:	0800b2c2 	.word	0x0800b2c2
 8006e04:	0800b2d3 	.word	0x0800b2d3

08006e08 <siprintf>:
 8006e08:	b40e      	push	{r1, r2, r3}
 8006e0a:	b500      	push	{lr}
 8006e0c:	b09c      	sub	sp, #112	; 0x70
 8006e0e:	ab1d      	add	r3, sp, #116	; 0x74
 8006e10:	9002      	str	r0, [sp, #8]
 8006e12:	9006      	str	r0, [sp, #24]
 8006e14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e18:	4809      	ldr	r0, [pc, #36]	; (8006e40 <siprintf+0x38>)
 8006e1a:	9107      	str	r1, [sp, #28]
 8006e1c:	9104      	str	r1, [sp, #16]
 8006e1e:	4909      	ldr	r1, [pc, #36]	; (8006e44 <siprintf+0x3c>)
 8006e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e24:	9105      	str	r1, [sp, #20]
 8006e26:	6800      	ldr	r0, [r0, #0]
 8006e28:	9301      	str	r3, [sp, #4]
 8006e2a:	a902      	add	r1, sp, #8
 8006e2c:	f001 fb32 	bl	8008494 <_svfiprintf_r>
 8006e30:	9b02      	ldr	r3, [sp, #8]
 8006e32:	2200      	movs	r2, #0
 8006e34:	701a      	strb	r2, [r3, #0]
 8006e36:	b01c      	add	sp, #112	; 0x70
 8006e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e3c:	b003      	add	sp, #12
 8006e3e:	4770      	bx	lr
 8006e40:	20002028 	.word	0x20002028
 8006e44:	ffff0208 	.word	0xffff0208

08006e48 <quorem>:
 8006e48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	6903      	ldr	r3, [r0, #16]
 8006e4e:	690c      	ldr	r4, [r1, #16]
 8006e50:	42a3      	cmp	r3, r4
 8006e52:	4607      	mov	r7, r0
 8006e54:	f2c0 8081 	blt.w	8006f5a <quorem+0x112>
 8006e58:	3c01      	subs	r4, #1
 8006e5a:	f101 0814 	add.w	r8, r1, #20
 8006e5e:	f100 0514 	add.w	r5, r0, #20
 8006e62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e66:	9301      	str	r3, [sp, #4]
 8006e68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e70:	3301      	adds	r3, #1
 8006e72:	429a      	cmp	r2, r3
 8006e74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006e78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e80:	d331      	bcc.n	8006ee6 <quorem+0x9e>
 8006e82:	f04f 0e00 	mov.w	lr, #0
 8006e86:	4640      	mov	r0, r8
 8006e88:	46ac      	mov	ip, r5
 8006e8a:	46f2      	mov	sl, lr
 8006e8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e90:	b293      	uxth	r3, r2
 8006e92:	fb06 e303 	mla	r3, r6, r3, lr
 8006e96:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	ebaa 0303 	sub.w	r3, sl, r3
 8006ea0:	0c12      	lsrs	r2, r2, #16
 8006ea2:	f8dc a000 	ldr.w	sl, [ip]
 8006ea6:	fb06 e202 	mla	r2, r6, r2, lr
 8006eaa:	fa13 f38a 	uxtah	r3, r3, sl
 8006eae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006eb2:	fa1f fa82 	uxth.w	sl, r2
 8006eb6:	f8dc 2000 	ldr.w	r2, [ip]
 8006eba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006ebe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ec8:	4581      	cmp	r9, r0
 8006eca:	f84c 3b04 	str.w	r3, [ip], #4
 8006ece:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ed2:	d2db      	bcs.n	8006e8c <quorem+0x44>
 8006ed4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ed8:	b92b      	cbnz	r3, 8006ee6 <quorem+0x9e>
 8006eda:	9b01      	ldr	r3, [sp, #4]
 8006edc:	3b04      	subs	r3, #4
 8006ede:	429d      	cmp	r5, r3
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	d32e      	bcc.n	8006f42 <quorem+0xfa>
 8006ee4:	613c      	str	r4, [r7, #16]
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	f001 f8be 	bl	8008068 <__mcmp>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	db24      	blt.n	8006f3a <quorem+0xf2>
 8006ef0:	3601      	adds	r6, #1
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f04f 0c00 	mov.w	ip, #0
 8006ef8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006efc:	f8d0 e000 	ldr.w	lr, [r0]
 8006f00:	b293      	uxth	r3, r2
 8006f02:	ebac 0303 	sub.w	r3, ip, r3
 8006f06:	0c12      	lsrs	r2, r2, #16
 8006f08:	fa13 f38e 	uxtah	r3, r3, lr
 8006f0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f1a:	45c1      	cmp	r9, r8
 8006f1c:	f840 3b04 	str.w	r3, [r0], #4
 8006f20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f24:	d2e8      	bcs.n	8006ef8 <quorem+0xb0>
 8006f26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f2e:	b922      	cbnz	r2, 8006f3a <quorem+0xf2>
 8006f30:	3b04      	subs	r3, #4
 8006f32:	429d      	cmp	r5, r3
 8006f34:	461a      	mov	r2, r3
 8006f36:	d30a      	bcc.n	8006f4e <quorem+0x106>
 8006f38:	613c      	str	r4, [r7, #16]
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	b003      	add	sp, #12
 8006f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f42:	6812      	ldr	r2, [r2, #0]
 8006f44:	3b04      	subs	r3, #4
 8006f46:	2a00      	cmp	r2, #0
 8006f48:	d1cc      	bne.n	8006ee4 <quorem+0x9c>
 8006f4a:	3c01      	subs	r4, #1
 8006f4c:	e7c7      	b.n	8006ede <quorem+0x96>
 8006f4e:	6812      	ldr	r2, [r2, #0]
 8006f50:	3b04      	subs	r3, #4
 8006f52:	2a00      	cmp	r2, #0
 8006f54:	d1f0      	bne.n	8006f38 <quorem+0xf0>
 8006f56:	3c01      	subs	r4, #1
 8006f58:	e7eb      	b.n	8006f32 <quorem+0xea>
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	e7ee      	b.n	8006f3c <quorem+0xf4>
	...

08006f60 <_dtoa_r>:
 8006f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f64:	ed2d 8b02 	vpush	{d8}
 8006f68:	ec57 6b10 	vmov	r6, r7, d0
 8006f6c:	b095      	sub	sp, #84	; 0x54
 8006f6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006f74:	9105      	str	r1, [sp, #20]
 8006f76:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f80:	b975      	cbnz	r5, 8006fa0 <_dtoa_r+0x40>
 8006f82:	2010      	movs	r0, #16
 8006f84:	f000 fddc 	bl	8007b40 <malloc>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	6260      	str	r0, [r4, #36]	; 0x24
 8006f8c:	b920      	cbnz	r0, 8006f98 <_dtoa_r+0x38>
 8006f8e:	4bb2      	ldr	r3, [pc, #712]	; (8007258 <_dtoa_r+0x2f8>)
 8006f90:	21ea      	movs	r1, #234	; 0xea
 8006f92:	48b2      	ldr	r0, [pc, #712]	; (800725c <_dtoa_r+0x2fc>)
 8006f94:	f001 fb8e 	bl	80086b4 <__assert_func>
 8006f98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f9c:	6005      	str	r5, [r0, #0]
 8006f9e:	60c5      	str	r5, [r0, #12]
 8006fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fa2:	6819      	ldr	r1, [r3, #0]
 8006fa4:	b151      	cbz	r1, 8006fbc <_dtoa_r+0x5c>
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	604a      	str	r2, [r1, #4]
 8006faa:	2301      	movs	r3, #1
 8006fac:	4093      	lsls	r3, r2
 8006fae:	608b      	str	r3, [r1, #8]
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f000 fe1b 	bl	8007bec <_Bfree>
 8006fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	1e3b      	subs	r3, r7, #0
 8006fbe:	bfb9      	ittee	lt
 8006fc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006fc4:	9303      	strlt	r3, [sp, #12]
 8006fc6:	2300      	movge	r3, #0
 8006fc8:	f8c8 3000 	strge.w	r3, [r8]
 8006fcc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006fd0:	4ba3      	ldr	r3, [pc, #652]	; (8007260 <_dtoa_r+0x300>)
 8006fd2:	bfbc      	itt	lt
 8006fd4:	2201      	movlt	r2, #1
 8006fd6:	f8c8 2000 	strlt.w	r2, [r8]
 8006fda:	ea33 0309 	bics.w	r3, r3, r9
 8006fde:	d11b      	bne.n	8007018 <_dtoa_r+0xb8>
 8006fe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006fe2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fec:	4333      	orrs	r3, r6
 8006fee:	f000 857a 	beq.w	8007ae6 <_dtoa_r+0xb86>
 8006ff2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ff4:	b963      	cbnz	r3, 8007010 <_dtoa_r+0xb0>
 8006ff6:	4b9b      	ldr	r3, [pc, #620]	; (8007264 <_dtoa_r+0x304>)
 8006ff8:	e024      	b.n	8007044 <_dtoa_r+0xe4>
 8006ffa:	4b9b      	ldr	r3, [pc, #620]	; (8007268 <_dtoa_r+0x308>)
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	3308      	adds	r3, #8
 8007000:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	9800      	ldr	r0, [sp, #0]
 8007006:	b015      	add	sp, #84	; 0x54
 8007008:	ecbd 8b02 	vpop	{d8}
 800700c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007010:	4b94      	ldr	r3, [pc, #592]	; (8007264 <_dtoa_r+0x304>)
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	3303      	adds	r3, #3
 8007016:	e7f3      	b.n	8007000 <_dtoa_r+0xa0>
 8007018:	ed9d 7b02 	vldr	d7, [sp, #8]
 800701c:	2200      	movs	r2, #0
 800701e:	ec51 0b17 	vmov	r0, r1, d7
 8007022:	2300      	movs	r3, #0
 8007024:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007028:	f7f9 fd56 	bl	8000ad8 <__aeabi_dcmpeq>
 800702c:	4680      	mov	r8, r0
 800702e:	b158      	cbz	r0, 8007048 <_dtoa_r+0xe8>
 8007030:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007032:	2301      	movs	r3, #1
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 8551 	beq.w	8007ae0 <_dtoa_r+0xb80>
 800703e:	488b      	ldr	r0, [pc, #556]	; (800726c <_dtoa_r+0x30c>)
 8007040:	6018      	str	r0, [r3, #0]
 8007042:	1e43      	subs	r3, r0, #1
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	e7dd      	b.n	8007004 <_dtoa_r+0xa4>
 8007048:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800704c:	aa12      	add	r2, sp, #72	; 0x48
 800704e:	a913      	add	r1, sp, #76	; 0x4c
 8007050:	4620      	mov	r0, r4
 8007052:	f001 f8ad 	bl	80081b0 <__d2b>
 8007056:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800705a:	4683      	mov	fp, r0
 800705c:	2d00      	cmp	r5, #0
 800705e:	d07c      	beq.n	800715a <_dtoa_r+0x1fa>
 8007060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007062:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007066:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800706a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800706e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007072:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007076:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800707a:	4b7d      	ldr	r3, [pc, #500]	; (8007270 <_dtoa_r+0x310>)
 800707c:	2200      	movs	r2, #0
 800707e:	4630      	mov	r0, r6
 8007080:	4639      	mov	r1, r7
 8007082:	f7f9 f909 	bl	8000298 <__aeabi_dsub>
 8007086:	a36e      	add	r3, pc, #440	; (adr r3, 8007240 <_dtoa_r+0x2e0>)
 8007088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708c:	f7f9 fabc 	bl	8000608 <__aeabi_dmul>
 8007090:	a36d      	add	r3, pc, #436	; (adr r3, 8007248 <_dtoa_r+0x2e8>)
 8007092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007096:	f7f9 f901 	bl	800029c <__adddf3>
 800709a:	4606      	mov	r6, r0
 800709c:	4628      	mov	r0, r5
 800709e:	460f      	mov	r7, r1
 80070a0:	f7f9 fa48 	bl	8000534 <__aeabi_i2d>
 80070a4:	a36a      	add	r3, pc, #424	; (adr r3, 8007250 <_dtoa_r+0x2f0>)
 80070a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070aa:	f7f9 faad 	bl	8000608 <__aeabi_dmul>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4630      	mov	r0, r6
 80070b4:	4639      	mov	r1, r7
 80070b6:	f7f9 f8f1 	bl	800029c <__adddf3>
 80070ba:	4606      	mov	r6, r0
 80070bc:	460f      	mov	r7, r1
 80070be:	f7f9 fd53 	bl	8000b68 <__aeabi_d2iz>
 80070c2:	2200      	movs	r2, #0
 80070c4:	4682      	mov	sl, r0
 80070c6:	2300      	movs	r3, #0
 80070c8:	4630      	mov	r0, r6
 80070ca:	4639      	mov	r1, r7
 80070cc:	f7f9 fd0e 	bl	8000aec <__aeabi_dcmplt>
 80070d0:	b148      	cbz	r0, 80070e6 <_dtoa_r+0x186>
 80070d2:	4650      	mov	r0, sl
 80070d4:	f7f9 fa2e 	bl	8000534 <__aeabi_i2d>
 80070d8:	4632      	mov	r2, r6
 80070da:	463b      	mov	r3, r7
 80070dc:	f7f9 fcfc 	bl	8000ad8 <__aeabi_dcmpeq>
 80070e0:	b908      	cbnz	r0, 80070e6 <_dtoa_r+0x186>
 80070e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80070e6:	f1ba 0f16 	cmp.w	sl, #22
 80070ea:	d854      	bhi.n	8007196 <_dtoa_r+0x236>
 80070ec:	4b61      	ldr	r3, [pc, #388]	; (8007274 <_dtoa_r+0x314>)
 80070ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80070f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80070fa:	f7f9 fcf7 	bl	8000aec <__aeabi_dcmplt>
 80070fe:	2800      	cmp	r0, #0
 8007100:	d04b      	beq.n	800719a <_dtoa_r+0x23a>
 8007102:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007106:	2300      	movs	r3, #0
 8007108:	930e      	str	r3, [sp, #56]	; 0x38
 800710a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800710c:	1b5d      	subs	r5, r3, r5
 800710e:	1e6b      	subs	r3, r5, #1
 8007110:	9304      	str	r3, [sp, #16]
 8007112:	bf43      	ittte	mi
 8007114:	2300      	movmi	r3, #0
 8007116:	f1c5 0801 	rsbmi	r8, r5, #1
 800711a:	9304      	strmi	r3, [sp, #16]
 800711c:	f04f 0800 	movpl.w	r8, #0
 8007120:	f1ba 0f00 	cmp.w	sl, #0
 8007124:	db3b      	blt.n	800719e <_dtoa_r+0x23e>
 8007126:	9b04      	ldr	r3, [sp, #16]
 8007128:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800712c:	4453      	add	r3, sl
 800712e:	9304      	str	r3, [sp, #16]
 8007130:	2300      	movs	r3, #0
 8007132:	9306      	str	r3, [sp, #24]
 8007134:	9b05      	ldr	r3, [sp, #20]
 8007136:	2b09      	cmp	r3, #9
 8007138:	d869      	bhi.n	800720e <_dtoa_r+0x2ae>
 800713a:	2b05      	cmp	r3, #5
 800713c:	bfc4      	itt	gt
 800713e:	3b04      	subgt	r3, #4
 8007140:	9305      	strgt	r3, [sp, #20]
 8007142:	9b05      	ldr	r3, [sp, #20]
 8007144:	f1a3 0302 	sub.w	r3, r3, #2
 8007148:	bfcc      	ite	gt
 800714a:	2500      	movgt	r5, #0
 800714c:	2501      	movle	r5, #1
 800714e:	2b03      	cmp	r3, #3
 8007150:	d869      	bhi.n	8007226 <_dtoa_r+0x2c6>
 8007152:	e8df f003 	tbb	[pc, r3]
 8007156:	4e2c      	.short	0x4e2c
 8007158:	5a4c      	.short	0x5a4c
 800715a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800715e:	441d      	add	r5, r3
 8007160:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007164:	2b20      	cmp	r3, #32
 8007166:	bfc1      	itttt	gt
 8007168:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800716c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007170:	fa09 f303 	lslgt.w	r3, r9, r3
 8007174:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007178:	bfda      	itte	le
 800717a:	f1c3 0320 	rsble	r3, r3, #32
 800717e:	fa06 f003 	lslle.w	r0, r6, r3
 8007182:	4318      	orrgt	r0, r3
 8007184:	f7f9 f9c6 	bl	8000514 <__aeabi_ui2d>
 8007188:	2301      	movs	r3, #1
 800718a:	4606      	mov	r6, r0
 800718c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007190:	3d01      	subs	r5, #1
 8007192:	9310      	str	r3, [sp, #64]	; 0x40
 8007194:	e771      	b.n	800707a <_dtoa_r+0x11a>
 8007196:	2301      	movs	r3, #1
 8007198:	e7b6      	b.n	8007108 <_dtoa_r+0x1a8>
 800719a:	900e      	str	r0, [sp, #56]	; 0x38
 800719c:	e7b5      	b.n	800710a <_dtoa_r+0x1aa>
 800719e:	f1ca 0300 	rsb	r3, sl, #0
 80071a2:	9306      	str	r3, [sp, #24]
 80071a4:	2300      	movs	r3, #0
 80071a6:	eba8 080a 	sub.w	r8, r8, sl
 80071aa:	930d      	str	r3, [sp, #52]	; 0x34
 80071ac:	e7c2      	b.n	8007134 <_dtoa_r+0x1d4>
 80071ae:	2300      	movs	r3, #0
 80071b0:	9308      	str	r3, [sp, #32]
 80071b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	dc39      	bgt.n	800722c <_dtoa_r+0x2cc>
 80071b8:	f04f 0901 	mov.w	r9, #1
 80071bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80071c0:	464b      	mov	r3, r9
 80071c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80071c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80071c8:	2200      	movs	r2, #0
 80071ca:	6042      	str	r2, [r0, #4]
 80071cc:	2204      	movs	r2, #4
 80071ce:	f102 0614 	add.w	r6, r2, #20
 80071d2:	429e      	cmp	r6, r3
 80071d4:	6841      	ldr	r1, [r0, #4]
 80071d6:	d92f      	bls.n	8007238 <_dtoa_r+0x2d8>
 80071d8:	4620      	mov	r0, r4
 80071da:	f000 fcc7 	bl	8007b6c <_Balloc>
 80071de:	9000      	str	r0, [sp, #0]
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d14b      	bne.n	800727c <_dtoa_r+0x31c>
 80071e4:	4b24      	ldr	r3, [pc, #144]	; (8007278 <_dtoa_r+0x318>)
 80071e6:	4602      	mov	r2, r0
 80071e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80071ec:	e6d1      	b.n	8006f92 <_dtoa_r+0x32>
 80071ee:	2301      	movs	r3, #1
 80071f0:	e7de      	b.n	80071b0 <_dtoa_r+0x250>
 80071f2:	2300      	movs	r3, #0
 80071f4:	9308      	str	r3, [sp, #32]
 80071f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f8:	eb0a 0903 	add.w	r9, sl, r3
 80071fc:	f109 0301 	add.w	r3, r9, #1
 8007200:	2b01      	cmp	r3, #1
 8007202:	9301      	str	r3, [sp, #4]
 8007204:	bfb8      	it	lt
 8007206:	2301      	movlt	r3, #1
 8007208:	e7dd      	b.n	80071c6 <_dtoa_r+0x266>
 800720a:	2301      	movs	r3, #1
 800720c:	e7f2      	b.n	80071f4 <_dtoa_r+0x294>
 800720e:	2501      	movs	r5, #1
 8007210:	2300      	movs	r3, #0
 8007212:	9305      	str	r3, [sp, #20]
 8007214:	9508      	str	r5, [sp, #32]
 8007216:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800721a:	2200      	movs	r2, #0
 800721c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007220:	2312      	movs	r3, #18
 8007222:	9209      	str	r2, [sp, #36]	; 0x24
 8007224:	e7cf      	b.n	80071c6 <_dtoa_r+0x266>
 8007226:	2301      	movs	r3, #1
 8007228:	9308      	str	r3, [sp, #32]
 800722a:	e7f4      	b.n	8007216 <_dtoa_r+0x2b6>
 800722c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007230:	f8cd 9004 	str.w	r9, [sp, #4]
 8007234:	464b      	mov	r3, r9
 8007236:	e7c6      	b.n	80071c6 <_dtoa_r+0x266>
 8007238:	3101      	adds	r1, #1
 800723a:	6041      	str	r1, [r0, #4]
 800723c:	0052      	lsls	r2, r2, #1
 800723e:	e7c6      	b.n	80071ce <_dtoa_r+0x26e>
 8007240:	636f4361 	.word	0x636f4361
 8007244:	3fd287a7 	.word	0x3fd287a7
 8007248:	8b60c8b3 	.word	0x8b60c8b3
 800724c:	3fc68a28 	.word	0x3fc68a28
 8007250:	509f79fb 	.word	0x509f79fb
 8007254:	3fd34413 	.word	0x3fd34413
 8007258:	0800b2f1 	.word	0x0800b2f1
 800725c:	0800b308 	.word	0x0800b308
 8007260:	7ff00000 	.word	0x7ff00000
 8007264:	0800b2ed 	.word	0x0800b2ed
 8007268:	0800b2e4 	.word	0x0800b2e4
 800726c:	0800b2c1 	.word	0x0800b2c1
 8007270:	3ff80000 	.word	0x3ff80000
 8007274:	0800b400 	.word	0x0800b400
 8007278:	0800b367 	.word	0x0800b367
 800727c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800727e:	9a00      	ldr	r2, [sp, #0]
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	9b01      	ldr	r3, [sp, #4]
 8007284:	2b0e      	cmp	r3, #14
 8007286:	f200 80ad 	bhi.w	80073e4 <_dtoa_r+0x484>
 800728a:	2d00      	cmp	r5, #0
 800728c:	f000 80aa 	beq.w	80073e4 <_dtoa_r+0x484>
 8007290:	f1ba 0f00 	cmp.w	sl, #0
 8007294:	dd36      	ble.n	8007304 <_dtoa_r+0x3a4>
 8007296:	4ac3      	ldr	r2, [pc, #780]	; (80075a4 <_dtoa_r+0x644>)
 8007298:	f00a 030f 	and.w	r3, sl, #15
 800729c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072a0:	ed93 7b00 	vldr	d7, [r3]
 80072a4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80072a8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80072ac:	eeb0 8a47 	vmov.f32	s16, s14
 80072b0:	eef0 8a67 	vmov.f32	s17, s15
 80072b4:	d016      	beq.n	80072e4 <_dtoa_r+0x384>
 80072b6:	4bbc      	ldr	r3, [pc, #752]	; (80075a8 <_dtoa_r+0x648>)
 80072b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072c0:	f7f9 facc 	bl	800085c <__aeabi_ddiv>
 80072c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072c8:	f007 070f 	and.w	r7, r7, #15
 80072cc:	2503      	movs	r5, #3
 80072ce:	4eb6      	ldr	r6, [pc, #728]	; (80075a8 <_dtoa_r+0x648>)
 80072d0:	b957      	cbnz	r7, 80072e8 <_dtoa_r+0x388>
 80072d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072d6:	ec53 2b18 	vmov	r2, r3, d8
 80072da:	f7f9 fabf 	bl	800085c <__aeabi_ddiv>
 80072de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072e2:	e029      	b.n	8007338 <_dtoa_r+0x3d8>
 80072e4:	2502      	movs	r5, #2
 80072e6:	e7f2      	b.n	80072ce <_dtoa_r+0x36e>
 80072e8:	07f9      	lsls	r1, r7, #31
 80072ea:	d508      	bpl.n	80072fe <_dtoa_r+0x39e>
 80072ec:	ec51 0b18 	vmov	r0, r1, d8
 80072f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072f4:	f7f9 f988 	bl	8000608 <__aeabi_dmul>
 80072f8:	ec41 0b18 	vmov	d8, r0, r1
 80072fc:	3501      	adds	r5, #1
 80072fe:	107f      	asrs	r7, r7, #1
 8007300:	3608      	adds	r6, #8
 8007302:	e7e5      	b.n	80072d0 <_dtoa_r+0x370>
 8007304:	f000 80a6 	beq.w	8007454 <_dtoa_r+0x4f4>
 8007308:	f1ca 0600 	rsb	r6, sl, #0
 800730c:	4ba5      	ldr	r3, [pc, #660]	; (80075a4 <_dtoa_r+0x644>)
 800730e:	4fa6      	ldr	r7, [pc, #664]	; (80075a8 <_dtoa_r+0x648>)
 8007310:	f006 020f 	and.w	r2, r6, #15
 8007314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007320:	f7f9 f972 	bl	8000608 <__aeabi_dmul>
 8007324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007328:	1136      	asrs	r6, r6, #4
 800732a:	2300      	movs	r3, #0
 800732c:	2502      	movs	r5, #2
 800732e:	2e00      	cmp	r6, #0
 8007330:	f040 8085 	bne.w	800743e <_dtoa_r+0x4de>
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1d2      	bne.n	80072de <_dtoa_r+0x37e>
 8007338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 808c 	beq.w	8007458 <_dtoa_r+0x4f8>
 8007340:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007344:	4b99      	ldr	r3, [pc, #612]	; (80075ac <_dtoa_r+0x64c>)
 8007346:	2200      	movs	r2, #0
 8007348:	4630      	mov	r0, r6
 800734a:	4639      	mov	r1, r7
 800734c:	f7f9 fbce 	bl	8000aec <__aeabi_dcmplt>
 8007350:	2800      	cmp	r0, #0
 8007352:	f000 8081 	beq.w	8007458 <_dtoa_r+0x4f8>
 8007356:	9b01      	ldr	r3, [sp, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d07d      	beq.n	8007458 <_dtoa_r+0x4f8>
 800735c:	f1b9 0f00 	cmp.w	r9, #0
 8007360:	dd3c      	ble.n	80073dc <_dtoa_r+0x47c>
 8007362:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007366:	9307      	str	r3, [sp, #28]
 8007368:	2200      	movs	r2, #0
 800736a:	4b91      	ldr	r3, [pc, #580]	; (80075b0 <_dtoa_r+0x650>)
 800736c:	4630      	mov	r0, r6
 800736e:	4639      	mov	r1, r7
 8007370:	f7f9 f94a 	bl	8000608 <__aeabi_dmul>
 8007374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007378:	3501      	adds	r5, #1
 800737a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800737e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007382:	4628      	mov	r0, r5
 8007384:	f7f9 f8d6 	bl	8000534 <__aeabi_i2d>
 8007388:	4632      	mov	r2, r6
 800738a:	463b      	mov	r3, r7
 800738c:	f7f9 f93c 	bl	8000608 <__aeabi_dmul>
 8007390:	4b88      	ldr	r3, [pc, #544]	; (80075b4 <_dtoa_r+0x654>)
 8007392:	2200      	movs	r2, #0
 8007394:	f7f8 ff82 	bl	800029c <__adddf3>
 8007398:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800739c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073a0:	9303      	str	r3, [sp, #12]
 80073a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d15c      	bne.n	8007462 <_dtoa_r+0x502>
 80073a8:	4b83      	ldr	r3, [pc, #524]	; (80075b8 <_dtoa_r+0x658>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	4630      	mov	r0, r6
 80073ae:	4639      	mov	r1, r7
 80073b0:	f7f8 ff72 	bl	8000298 <__aeabi_dsub>
 80073b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073b8:	4606      	mov	r6, r0
 80073ba:	460f      	mov	r7, r1
 80073bc:	f7f9 fbb4 	bl	8000b28 <__aeabi_dcmpgt>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	f040 8296 	bne.w	80078f2 <_dtoa_r+0x992>
 80073c6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80073ca:	4630      	mov	r0, r6
 80073cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073d0:	4639      	mov	r1, r7
 80073d2:	f7f9 fb8b 	bl	8000aec <__aeabi_dcmplt>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	f040 8288 	bne.w	80078ec <_dtoa_r+0x98c>
 80073dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80073e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f2c0 8158 	blt.w	800769c <_dtoa_r+0x73c>
 80073ec:	f1ba 0f0e 	cmp.w	sl, #14
 80073f0:	f300 8154 	bgt.w	800769c <_dtoa_r+0x73c>
 80073f4:	4b6b      	ldr	r3, [pc, #428]	; (80075a4 <_dtoa_r+0x644>)
 80073f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007400:	2b00      	cmp	r3, #0
 8007402:	f280 80e3 	bge.w	80075cc <_dtoa_r+0x66c>
 8007406:	9b01      	ldr	r3, [sp, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	f300 80df 	bgt.w	80075cc <_dtoa_r+0x66c>
 800740e:	f040 826d 	bne.w	80078ec <_dtoa_r+0x98c>
 8007412:	4b69      	ldr	r3, [pc, #420]	; (80075b8 <_dtoa_r+0x658>)
 8007414:	2200      	movs	r2, #0
 8007416:	4640      	mov	r0, r8
 8007418:	4649      	mov	r1, r9
 800741a:	f7f9 f8f5 	bl	8000608 <__aeabi_dmul>
 800741e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007422:	f7f9 fb77 	bl	8000b14 <__aeabi_dcmpge>
 8007426:	9e01      	ldr	r6, [sp, #4]
 8007428:	4637      	mov	r7, r6
 800742a:	2800      	cmp	r0, #0
 800742c:	f040 8243 	bne.w	80078b6 <_dtoa_r+0x956>
 8007430:	9d00      	ldr	r5, [sp, #0]
 8007432:	2331      	movs	r3, #49	; 0x31
 8007434:	f805 3b01 	strb.w	r3, [r5], #1
 8007438:	f10a 0a01 	add.w	sl, sl, #1
 800743c:	e23f      	b.n	80078be <_dtoa_r+0x95e>
 800743e:	07f2      	lsls	r2, r6, #31
 8007440:	d505      	bpl.n	800744e <_dtoa_r+0x4ee>
 8007442:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007446:	f7f9 f8df 	bl	8000608 <__aeabi_dmul>
 800744a:	3501      	adds	r5, #1
 800744c:	2301      	movs	r3, #1
 800744e:	1076      	asrs	r6, r6, #1
 8007450:	3708      	adds	r7, #8
 8007452:	e76c      	b.n	800732e <_dtoa_r+0x3ce>
 8007454:	2502      	movs	r5, #2
 8007456:	e76f      	b.n	8007338 <_dtoa_r+0x3d8>
 8007458:	9b01      	ldr	r3, [sp, #4]
 800745a:	f8cd a01c 	str.w	sl, [sp, #28]
 800745e:	930c      	str	r3, [sp, #48]	; 0x30
 8007460:	e78d      	b.n	800737e <_dtoa_r+0x41e>
 8007462:	9900      	ldr	r1, [sp, #0]
 8007464:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007468:	4b4e      	ldr	r3, [pc, #312]	; (80075a4 <_dtoa_r+0x644>)
 800746a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800746e:	4401      	add	r1, r0
 8007470:	9102      	str	r1, [sp, #8]
 8007472:	9908      	ldr	r1, [sp, #32]
 8007474:	eeb0 8a47 	vmov.f32	s16, s14
 8007478:	eef0 8a67 	vmov.f32	s17, s15
 800747c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007480:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007484:	2900      	cmp	r1, #0
 8007486:	d045      	beq.n	8007514 <_dtoa_r+0x5b4>
 8007488:	494c      	ldr	r1, [pc, #304]	; (80075bc <_dtoa_r+0x65c>)
 800748a:	2000      	movs	r0, #0
 800748c:	f7f9 f9e6 	bl	800085c <__aeabi_ddiv>
 8007490:	ec53 2b18 	vmov	r2, r3, d8
 8007494:	f7f8 ff00 	bl	8000298 <__aeabi_dsub>
 8007498:	9d00      	ldr	r5, [sp, #0]
 800749a:	ec41 0b18 	vmov	d8, r0, r1
 800749e:	4639      	mov	r1, r7
 80074a0:	4630      	mov	r0, r6
 80074a2:	f7f9 fb61 	bl	8000b68 <__aeabi_d2iz>
 80074a6:	900c      	str	r0, [sp, #48]	; 0x30
 80074a8:	f7f9 f844 	bl	8000534 <__aeabi_i2d>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	4630      	mov	r0, r6
 80074b2:	4639      	mov	r1, r7
 80074b4:	f7f8 fef0 	bl	8000298 <__aeabi_dsub>
 80074b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074ba:	3330      	adds	r3, #48	; 0x30
 80074bc:	f805 3b01 	strb.w	r3, [r5], #1
 80074c0:	ec53 2b18 	vmov	r2, r3, d8
 80074c4:	4606      	mov	r6, r0
 80074c6:	460f      	mov	r7, r1
 80074c8:	f7f9 fb10 	bl	8000aec <__aeabi_dcmplt>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d165      	bne.n	800759c <_dtoa_r+0x63c>
 80074d0:	4632      	mov	r2, r6
 80074d2:	463b      	mov	r3, r7
 80074d4:	4935      	ldr	r1, [pc, #212]	; (80075ac <_dtoa_r+0x64c>)
 80074d6:	2000      	movs	r0, #0
 80074d8:	f7f8 fede 	bl	8000298 <__aeabi_dsub>
 80074dc:	ec53 2b18 	vmov	r2, r3, d8
 80074e0:	f7f9 fb04 	bl	8000aec <__aeabi_dcmplt>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	f040 80b9 	bne.w	800765c <_dtoa_r+0x6fc>
 80074ea:	9b02      	ldr	r3, [sp, #8]
 80074ec:	429d      	cmp	r5, r3
 80074ee:	f43f af75 	beq.w	80073dc <_dtoa_r+0x47c>
 80074f2:	4b2f      	ldr	r3, [pc, #188]	; (80075b0 <_dtoa_r+0x650>)
 80074f4:	ec51 0b18 	vmov	r0, r1, d8
 80074f8:	2200      	movs	r2, #0
 80074fa:	f7f9 f885 	bl	8000608 <__aeabi_dmul>
 80074fe:	4b2c      	ldr	r3, [pc, #176]	; (80075b0 <_dtoa_r+0x650>)
 8007500:	ec41 0b18 	vmov	d8, r0, r1
 8007504:	2200      	movs	r2, #0
 8007506:	4630      	mov	r0, r6
 8007508:	4639      	mov	r1, r7
 800750a:	f7f9 f87d 	bl	8000608 <__aeabi_dmul>
 800750e:	4606      	mov	r6, r0
 8007510:	460f      	mov	r7, r1
 8007512:	e7c4      	b.n	800749e <_dtoa_r+0x53e>
 8007514:	ec51 0b17 	vmov	r0, r1, d7
 8007518:	f7f9 f876 	bl	8000608 <__aeabi_dmul>
 800751c:	9b02      	ldr	r3, [sp, #8]
 800751e:	9d00      	ldr	r5, [sp, #0]
 8007520:	930c      	str	r3, [sp, #48]	; 0x30
 8007522:	ec41 0b18 	vmov	d8, r0, r1
 8007526:	4639      	mov	r1, r7
 8007528:	4630      	mov	r0, r6
 800752a:	f7f9 fb1d 	bl	8000b68 <__aeabi_d2iz>
 800752e:	9011      	str	r0, [sp, #68]	; 0x44
 8007530:	f7f9 f800 	bl	8000534 <__aeabi_i2d>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	4630      	mov	r0, r6
 800753a:	4639      	mov	r1, r7
 800753c:	f7f8 feac 	bl	8000298 <__aeabi_dsub>
 8007540:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007542:	3330      	adds	r3, #48	; 0x30
 8007544:	f805 3b01 	strb.w	r3, [r5], #1
 8007548:	9b02      	ldr	r3, [sp, #8]
 800754a:	429d      	cmp	r5, r3
 800754c:	4606      	mov	r6, r0
 800754e:	460f      	mov	r7, r1
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	d134      	bne.n	80075c0 <_dtoa_r+0x660>
 8007556:	4b19      	ldr	r3, [pc, #100]	; (80075bc <_dtoa_r+0x65c>)
 8007558:	ec51 0b18 	vmov	r0, r1, d8
 800755c:	f7f8 fe9e 	bl	800029c <__adddf3>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4630      	mov	r0, r6
 8007566:	4639      	mov	r1, r7
 8007568:	f7f9 fade 	bl	8000b28 <__aeabi_dcmpgt>
 800756c:	2800      	cmp	r0, #0
 800756e:	d175      	bne.n	800765c <_dtoa_r+0x6fc>
 8007570:	ec53 2b18 	vmov	r2, r3, d8
 8007574:	4911      	ldr	r1, [pc, #68]	; (80075bc <_dtoa_r+0x65c>)
 8007576:	2000      	movs	r0, #0
 8007578:	f7f8 fe8e 	bl	8000298 <__aeabi_dsub>
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	4630      	mov	r0, r6
 8007582:	4639      	mov	r1, r7
 8007584:	f7f9 fab2 	bl	8000aec <__aeabi_dcmplt>
 8007588:	2800      	cmp	r0, #0
 800758a:	f43f af27 	beq.w	80073dc <_dtoa_r+0x47c>
 800758e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007590:	1e6b      	subs	r3, r5, #1
 8007592:	930c      	str	r3, [sp, #48]	; 0x30
 8007594:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007598:	2b30      	cmp	r3, #48	; 0x30
 800759a:	d0f8      	beq.n	800758e <_dtoa_r+0x62e>
 800759c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80075a0:	e04a      	b.n	8007638 <_dtoa_r+0x6d8>
 80075a2:	bf00      	nop
 80075a4:	0800b400 	.word	0x0800b400
 80075a8:	0800b3d8 	.word	0x0800b3d8
 80075ac:	3ff00000 	.word	0x3ff00000
 80075b0:	40240000 	.word	0x40240000
 80075b4:	401c0000 	.word	0x401c0000
 80075b8:	40140000 	.word	0x40140000
 80075bc:	3fe00000 	.word	0x3fe00000
 80075c0:	4baf      	ldr	r3, [pc, #700]	; (8007880 <_dtoa_r+0x920>)
 80075c2:	f7f9 f821 	bl	8000608 <__aeabi_dmul>
 80075c6:	4606      	mov	r6, r0
 80075c8:	460f      	mov	r7, r1
 80075ca:	e7ac      	b.n	8007526 <_dtoa_r+0x5c6>
 80075cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075d0:	9d00      	ldr	r5, [sp, #0]
 80075d2:	4642      	mov	r2, r8
 80075d4:	464b      	mov	r3, r9
 80075d6:	4630      	mov	r0, r6
 80075d8:	4639      	mov	r1, r7
 80075da:	f7f9 f93f 	bl	800085c <__aeabi_ddiv>
 80075de:	f7f9 fac3 	bl	8000b68 <__aeabi_d2iz>
 80075e2:	9002      	str	r0, [sp, #8]
 80075e4:	f7f8 ffa6 	bl	8000534 <__aeabi_i2d>
 80075e8:	4642      	mov	r2, r8
 80075ea:	464b      	mov	r3, r9
 80075ec:	f7f9 f80c 	bl	8000608 <__aeabi_dmul>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4630      	mov	r0, r6
 80075f6:	4639      	mov	r1, r7
 80075f8:	f7f8 fe4e 	bl	8000298 <__aeabi_dsub>
 80075fc:	9e02      	ldr	r6, [sp, #8]
 80075fe:	9f01      	ldr	r7, [sp, #4]
 8007600:	3630      	adds	r6, #48	; 0x30
 8007602:	f805 6b01 	strb.w	r6, [r5], #1
 8007606:	9e00      	ldr	r6, [sp, #0]
 8007608:	1bae      	subs	r6, r5, r6
 800760a:	42b7      	cmp	r7, r6
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	d137      	bne.n	8007682 <_dtoa_r+0x722>
 8007612:	f7f8 fe43 	bl	800029c <__adddf3>
 8007616:	4642      	mov	r2, r8
 8007618:	464b      	mov	r3, r9
 800761a:	4606      	mov	r6, r0
 800761c:	460f      	mov	r7, r1
 800761e:	f7f9 fa83 	bl	8000b28 <__aeabi_dcmpgt>
 8007622:	b9c8      	cbnz	r0, 8007658 <_dtoa_r+0x6f8>
 8007624:	4642      	mov	r2, r8
 8007626:	464b      	mov	r3, r9
 8007628:	4630      	mov	r0, r6
 800762a:	4639      	mov	r1, r7
 800762c:	f7f9 fa54 	bl	8000ad8 <__aeabi_dcmpeq>
 8007630:	b110      	cbz	r0, 8007638 <_dtoa_r+0x6d8>
 8007632:	9b02      	ldr	r3, [sp, #8]
 8007634:	07d9      	lsls	r1, r3, #31
 8007636:	d40f      	bmi.n	8007658 <_dtoa_r+0x6f8>
 8007638:	4620      	mov	r0, r4
 800763a:	4659      	mov	r1, fp
 800763c:	f000 fad6 	bl	8007bec <_Bfree>
 8007640:	2300      	movs	r3, #0
 8007642:	702b      	strb	r3, [r5, #0]
 8007644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007646:	f10a 0001 	add.w	r0, sl, #1
 800764a:	6018      	str	r0, [r3, #0]
 800764c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800764e:	2b00      	cmp	r3, #0
 8007650:	f43f acd8 	beq.w	8007004 <_dtoa_r+0xa4>
 8007654:	601d      	str	r5, [r3, #0]
 8007656:	e4d5      	b.n	8007004 <_dtoa_r+0xa4>
 8007658:	f8cd a01c 	str.w	sl, [sp, #28]
 800765c:	462b      	mov	r3, r5
 800765e:	461d      	mov	r5, r3
 8007660:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007664:	2a39      	cmp	r2, #57	; 0x39
 8007666:	d108      	bne.n	800767a <_dtoa_r+0x71a>
 8007668:	9a00      	ldr	r2, [sp, #0]
 800766a:	429a      	cmp	r2, r3
 800766c:	d1f7      	bne.n	800765e <_dtoa_r+0x6fe>
 800766e:	9a07      	ldr	r2, [sp, #28]
 8007670:	9900      	ldr	r1, [sp, #0]
 8007672:	3201      	adds	r2, #1
 8007674:	9207      	str	r2, [sp, #28]
 8007676:	2230      	movs	r2, #48	; 0x30
 8007678:	700a      	strb	r2, [r1, #0]
 800767a:	781a      	ldrb	r2, [r3, #0]
 800767c:	3201      	adds	r2, #1
 800767e:	701a      	strb	r2, [r3, #0]
 8007680:	e78c      	b.n	800759c <_dtoa_r+0x63c>
 8007682:	4b7f      	ldr	r3, [pc, #508]	; (8007880 <_dtoa_r+0x920>)
 8007684:	2200      	movs	r2, #0
 8007686:	f7f8 ffbf 	bl	8000608 <__aeabi_dmul>
 800768a:	2200      	movs	r2, #0
 800768c:	2300      	movs	r3, #0
 800768e:	4606      	mov	r6, r0
 8007690:	460f      	mov	r7, r1
 8007692:	f7f9 fa21 	bl	8000ad8 <__aeabi_dcmpeq>
 8007696:	2800      	cmp	r0, #0
 8007698:	d09b      	beq.n	80075d2 <_dtoa_r+0x672>
 800769a:	e7cd      	b.n	8007638 <_dtoa_r+0x6d8>
 800769c:	9a08      	ldr	r2, [sp, #32]
 800769e:	2a00      	cmp	r2, #0
 80076a0:	f000 80c4 	beq.w	800782c <_dtoa_r+0x8cc>
 80076a4:	9a05      	ldr	r2, [sp, #20]
 80076a6:	2a01      	cmp	r2, #1
 80076a8:	f300 80a8 	bgt.w	80077fc <_dtoa_r+0x89c>
 80076ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076ae:	2a00      	cmp	r2, #0
 80076b0:	f000 80a0 	beq.w	80077f4 <_dtoa_r+0x894>
 80076b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076b8:	9e06      	ldr	r6, [sp, #24]
 80076ba:	4645      	mov	r5, r8
 80076bc:	9a04      	ldr	r2, [sp, #16]
 80076be:	2101      	movs	r1, #1
 80076c0:	441a      	add	r2, r3
 80076c2:	4620      	mov	r0, r4
 80076c4:	4498      	add	r8, r3
 80076c6:	9204      	str	r2, [sp, #16]
 80076c8:	f000 fb4c 	bl	8007d64 <__i2b>
 80076cc:	4607      	mov	r7, r0
 80076ce:	2d00      	cmp	r5, #0
 80076d0:	dd0b      	ble.n	80076ea <_dtoa_r+0x78a>
 80076d2:	9b04      	ldr	r3, [sp, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	dd08      	ble.n	80076ea <_dtoa_r+0x78a>
 80076d8:	42ab      	cmp	r3, r5
 80076da:	9a04      	ldr	r2, [sp, #16]
 80076dc:	bfa8      	it	ge
 80076de:	462b      	movge	r3, r5
 80076e0:	eba8 0803 	sub.w	r8, r8, r3
 80076e4:	1aed      	subs	r5, r5, r3
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	9304      	str	r3, [sp, #16]
 80076ea:	9b06      	ldr	r3, [sp, #24]
 80076ec:	b1fb      	cbz	r3, 800772e <_dtoa_r+0x7ce>
 80076ee:	9b08      	ldr	r3, [sp, #32]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 809f 	beq.w	8007834 <_dtoa_r+0x8d4>
 80076f6:	2e00      	cmp	r6, #0
 80076f8:	dd11      	ble.n	800771e <_dtoa_r+0x7be>
 80076fa:	4639      	mov	r1, r7
 80076fc:	4632      	mov	r2, r6
 80076fe:	4620      	mov	r0, r4
 8007700:	f000 fbec 	bl	8007edc <__pow5mult>
 8007704:	465a      	mov	r2, fp
 8007706:	4601      	mov	r1, r0
 8007708:	4607      	mov	r7, r0
 800770a:	4620      	mov	r0, r4
 800770c:	f000 fb40 	bl	8007d90 <__multiply>
 8007710:	4659      	mov	r1, fp
 8007712:	9007      	str	r0, [sp, #28]
 8007714:	4620      	mov	r0, r4
 8007716:	f000 fa69 	bl	8007bec <_Bfree>
 800771a:	9b07      	ldr	r3, [sp, #28]
 800771c:	469b      	mov	fp, r3
 800771e:	9b06      	ldr	r3, [sp, #24]
 8007720:	1b9a      	subs	r2, r3, r6
 8007722:	d004      	beq.n	800772e <_dtoa_r+0x7ce>
 8007724:	4659      	mov	r1, fp
 8007726:	4620      	mov	r0, r4
 8007728:	f000 fbd8 	bl	8007edc <__pow5mult>
 800772c:	4683      	mov	fp, r0
 800772e:	2101      	movs	r1, #1
 8007730:	4620      	mov	r0, r4
 8007732:	f000 fb17 	bl	8007d64 <__i2b>
 8007736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007738:	2b00      	cmp	r3, #0
 800773a:	4606      	mov	r6, r0
 800773c:	dd7c      	ble.n	8007838 <_dtoa_r+0x8d8>
 800773e:	461a      	mov	r2, r3
 8007740:	4601      	mov	r1, r0
 8007742:	4620      	mov	r0, r4
 8007744:	f000 fbca 	bl	8007edc <__pow5mult>
 8007748:	9b05      	ldr	r3, [sp, #20]
 800774a:	2b01      	cmp	r3, #1
 800774c:	4606      	mov	r6, r0
 800774e:	dd76      	ble.n	800783e <_dtoa_r+0x8de>
 8007750:	2300      	movs	r3, #0
 8007752:	9306      	str	r3, [sp, #24]
 8007754:	6933      	ldr	r3, [r6, #16]
 8007756:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800775a:	6918      	ldr	r0, [r3, #16]
 800775c:	f000 fab2 	bl	8007cc4 <__hi0bits>
 8007760:	f1c0 0020 	rsb	r0, r0, #32
 8007764:	9b04      	ldr	r3, [sp, #16]
 8007766:	4418      	add	r0, r3
 8007768:	f010 001f 	ands.w	r0, r0, #31
 800776c:	f000 8086 	beq.w	800787c <_dtoa_r+0x91c>
 8007770:	f1c0 0320 	rsb	r3, r0, #32
 8007774:	2b04      	cmp	r3, #4
 8007776:	dd7f      	ble.n	8007878 <_dtoa_r+0x918>
 8007778:	f1c0 001c 	rsb	r0, r0, #28
 800777c:	9b04      	ldr	r3, [sp, #16]
 800777e:	4403      	add	r3, r0
 8007780:	4480      	add	r8, r0
 8007782:	4405      	add	r5, r0
 8007784:	9304      	str	r3, [sp, #16]
 8007786:	f1b8 0f00 	cmp.w	r8, #0
 800778a:	dd05      	ble.n	8007798 <_dtoa_r+0x838>
 800778c:	4659      	mov	r1, fp
 800778e:	4642      	mov	r2, r8
 8007790:	4620      	mov	r0, r4
 8007792:	f000 fbfd 	bl	8007f90 <__lshift>
 8007796:	4683      	mov	fp, r0
 8007798:	9b04      	ldr	r3, [sp, #16]
 800779a:	2b00      	cmp	r3, #0
 800779c:	dd05      	ble.n	80077aa <_dtoa_r+0x84a>
 800779e:	4631      	mov	r1, r6
 80077a0:	461a      	mov	r2, r3
 80077a2:	4620      	mov	r0, r4
 80077a4:	f000 fbf4 	bl	8007f90 <__lshift>
 80077a8:	4606      	mov	r6, r0
 80077aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d069      	beq.n	8007884 <_dtoa_r+0x924>
 80077b0:	4631      	mov	r1, r6
 80077b2:	4658      	mov	r0, fp
 80077b4:	f000 fc58 	bl	8008068 <__mcmp>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	da63      	bge.n	8007884 <_dtoa_r+0x924>
 80077bc:	2300      	movs	r3, #0
 80077be:	4659      	mov	r1, fp
 80077c0:	220a      	movs	r2, #10
 80077c2:	4620      	mov	r0, r4
 80077c4:	f000 fa34 	bl	8007c30 <__multadd>
 80077c8:	9b08      	ldr	r3, [sp, #32]
 80077ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80077ce:	4683      	mov	fp, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 818f 	beq.w	8007af4 <_dtoa_r+0xb94>
 80077d6:	4639      	mov	r1, r7
 80077d8:	2300      	movs	r3, #0
 80077da:	220a      	movs	r2, #10
 80077dc:	4620      	mov	r0, r4
 80077de:	f000 fa27 	bl	8007c30 <__multadd>
 80077e2:	f1b9 0f00 	cmp.w	r9, #0
 80077e6:	4607      	mov	r7, r0
 80077e8:	f300 808e 	bgt.w	8007908 <_dtoa_r+0x9a8>
 80077ec:	9b05      	ldr	r3, [sp, #20]
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	dc50      	bgt.n	8007894 <_dtoa_r+0x934>
 80077f2:	e089      	b.n	8007908 <_dtoa_r+0x9a8>
 80077f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80077fa:	e75d      	b.n	80076b8 <_dtoa_r+0x758>
 80077fc:	9b01      	ldr	r3, [sp, #4]
 80077fe:	1e5e      	subs	r6, r3, #1
 8007800:	9b06      	ldr	r3, [sp, #24]
 8007802:	42b3      	cmp	r3, r6
 8007804:	bfbf      	itttt	lt
 8007806:	9b06      	ldrlt	r3, [sp, #24]
 8007808:	9606      	strlt	r6, [sp, #24]
 800780a:	1af2      	sublt	r2, r6, r3
 800780c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800780e:	bfb6      	itet	lt
 8007810:	189b      	addlt	r3, r3, r2
 8007812:	1b9e      	subge	r6, r3, r6
 8007814:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007816:	9b01      	ldr	r3, [sp, #4]
 8007818:	bfb8      	it	lt
 800781a:	2600      	movlt	r6, #0
 800781c:	2b00      	cmp	r3, #0
 800781e:	bfb5      	itete	lt
 8007820:	eba8 0503 	sublt.w	r5, r8, r3
 8007824:	9b01      	ldrge	r3, [sp, #4]
 8007826:	2300      	movlt	r3, #0
 8007828:	4645      	movge	r5, r8
 800782a:	e747      	b.n	80076bc <_dtoa_r+0x75c>
 800782c:	9e06      	ldr	r6, [sp, #24]
 800782e:	9f08      	ldr	r7, [sp, #32]
 8007830:	4645      	mov	r5, r8
 8007832:	e74c      	b.n	80076ce <_dtoa_r+0x76e>
 8007834:	9a06      	ldr	r2, [sp, #24]
 8007836:	e775      	b.n	8007724 <_dtoa_r+0x7c4>
 8007838:	9b05      	ldr	r3, [sp, #20]
 800783a:	2b01      	cmp	r3, #1
 800783c:	dc18      	bgt.n	8007870 <_dtoa_r+0x910>
 800783e:	9b02      	ldr	r3, [sp, #8]
 8007840:	b9b3      	cbnz	r3, 8007870 <_dtoa_r+0x910>
 8007842:	9b03      	ldr	r3, [sp, #12]
 8007844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007848:	b9a3      	cbnz	r3, 8007874 <_dtoa_r+0x914>
 800784a:	9b03      	ldr	r3, [sp, #12]
 800784c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007850:	0d1b      	lsrs	r3, r3, #20
 8007852:	051b      	lsls	r3, r3, #20
 8007854:	b12b      	cbz	r3, 8007862 <_dtoa_r+0x902>
 8007856:	9b04      	ldr	r3, [sp, #16]
 8007858:	3301      	adds	r3, #1
 800785a:	9304      	str	r3, [sp, #16]
 800785c:	f108 0801 	add.w	r8, r8, #1
 8007860:	2301      	movs	r3, #1
 8007862:	9306      	str	r3, [sp, #24]
 8007864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007866:	2b00      	cmp	r3, #0
 8007868:	f47f af74 	bne.w	8007754 <_dtoa_r+0x7f4>
 800786c:	2001      	movs	r0, #1
 800786e:	e779      	b.n	8007764 <_dtoa_r+0x804>
 8007870:	2300      	movs	r3, #0
 8007872:	e7f6      	b.n	8007862 <_dtoa_r+0x902>
 8007874:	9b02      	ldr	r3, [sp, #8]
 8007876:	e7f4      	b.n	8007862 <_dtoa_r+0x902>
 8007878:	d085      	beq.n	8007786 <_dtoa_r+0x826>
 800787a:	4618      	mov	r0, r3
 800787c:	301c      	adds	r0, #28
 800787e:	e77d      	b.n	800777c <_dtoa_r+0x81c>
 8007880:	40240000 	.word	0x40240000
 8007884:	9b01      	ldr	r3, [sp, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	dc38      	bgt.n	80078fc <_dtoa_r+0x99c>
 800788a:	9b05      	ldr	r3, [sp, #20]
 800788c:	2b02      	cmp	r3, #2
 800788e:	dd35      	ble.n	80078fc <_dtoa_r+0x99c>
 8007890:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007894:	f1b9 0f00 	cmp.w	r9, #0
 8007898:	d10d      	bne.n	80078b6 <_dtoa_r+0x956>
 800789a:	4631      	mov	r1, r6
 800789c:	464b      	mov	r3, r9
 800789e:	2205      	movs	r2, #5
 80078a0:	4620      	mov	r0, r4
 80078a2:	f000 f9c5 	bl	8007c30 <__multadd>
 80078a6:	4601      	mov	r1, r0
 80078a8:	4606      	mov	r6, r0
 80078aa:	4658      	mov	r0, fp
 80078ac:	f000 fbdc 	bl	8008068 <__mcmp>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	f73f adbd 	bgt.w	8007430 <_dtoa_r+0x4d0>
 80078b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b8:	9d00      	ldr	r5, [sp, #0]
 80078ba:	ea6f 0a03 	mvn.w	sl, r3
 80078be:	f04f 0800 	mov.w	r8, #0
 80078c2:	4631      	mov	r1, r6
 80078c4:	4620      	mov	r0, r4
 80078c6:	f000 f991 	bl	8007bec <_Bfree>
 80078ca:	2f00      	cmp	r7, #0
 80078cc:	f43f aeb4 	beq.w	8007638 <_dtoa_r+0x6d8>
 80078d0:	f1b8 0f00 	cmp.w	r8, #0
 80078d4:	d005      	beq.n	80078e2 <_dtoa_r+0x982>
 80078d6:	45b8      	cmp	r8, r7
 80078d8:	d003      	beq.n	80078e2 <_dtoa_r+0x982>
 80078da:	4641      	mov	r1, r8
 80078dc:	4620      	mov	r0, r4
 80078de:	f000 f985 	bl	8007bec <_Bfree>
 80078e2:	4639      	mov	r1, r7
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 f981 	bl	8007bec <_Bfree>
 80078ea:	e6a5      	b.n	8007638 <_dtoa_r+0x6d8>
 80078ec:	2600      	movs	r6, #0
 80078ee:	4637      	mov	r7, r6
 80078f0:	e7e1      	b.n	80078b6 <_dtoa_r+0x956>
 80078f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80078f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80078f8:	4637      	mov	r7, r6
 80078fa:	e599      	b.n	8007430 <_dtoa_r+0x4d0>
 80078fc:	9b08      	ldr	r3, [sp, #32]
 80078fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 80fd 	beq.w	8007b02 <_dtoa_r+0xba2>
 8007908:	2d00      	cmp	r5, #0
 800790a:	dd05      	ble.n	8007918 <_dtoa_r+0x9b8>
 800790c:	4639      	mov	r1, r7
 800790e:	462a      	mov	r2, r5
 8007910:	4620      	mov	r0, r4
 8007912:	f000 fb3d 	bl	8007f90 <__lshift>
 8007916:	4607      	mov	r7, r0
 8007918:	9b06      	ldr	r3, [sp, #24]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d05c      	beq.n	80079d8 <_dtoa_r+0xa78>
 800791e:	6879      	ldr	r1, [r7, #4]
 8007920:	4620      	mov	r0, r4
 8007922:	f000 f923 	bl	8007b6c <_Balloc>
 8007926:	4605      	mov	r5, r0
 8007928:	b928      	cbnz	r0, 8007936 <_dtoa_r+0x9d6>
 800792a:	4b80      	ldr	r3, [pc, #512]	; (8007b2c <_dtoa_r+0xbcc>)
 800792c:	4602      	mov	r2, r0
 800792e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007932:	f7ff bb2e 	b.w	8006f92 <_dtoa_r+0x32>
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	3202      	adds	r2, #2
 800793a:	0092      	lsls	r2, r2, #2
 800793c:	f107 010c 	add.w	r1, r7, #12
 8007940:	300c      	adds	r0, #12
 8007942:	f000 f905 	bl	8007b50 <memcpy>
 8007946:	2201      	movs	r2, #1
 8007948:	4629      	mov	r1, r5
 800794a:	4620      	mov	r0, r4
 800794c:	f000 fb20 	bl	8007f90 <__lshift>
 8007950:	9b00      	ldr	r3, [sp, #0]
 8007952:	3301      	adds	r3, #1
 8007954:	9301      	str	r3, [sp, #4]
 8007956:	9b00      	ldr	r3, [sp, #0]
 8007958:	444b      	add	r3, r9
 800795a:	9307      	str	r3, [sp, #28]
 800795c:	9b02      	ldr	r3, [sp, #8]
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	46b8      	mov	r8, r7
 8007964:	9306      	str	r3, [sp, #24]
 8007966:	4607      	mov	r7, r0
 8007968:	9b01      	ldr	r3, [sp, #4]
 800796a:	4631      	mov	r1, r6
 800796c:	3b01      	subs	r3, #1
 800796e:	4658      	mov	r0, fp
 8007970:	9302      	str	r3, [sp, #8]
 8007972:	f7ff fa69 	bl	8006e48 <quorem>
 8007976:	4603      	mov	r3, r0
 8007978:	3330      	adds	r3, #48	; 0x30
 800797a:	9004      	str	r0, [sp, #16]
 800797c:	4641      	mov	r1, r8
 800797e:	4658      	mov	r0, fp
 8007980:	9308      	str	r3, [sp, #32]
 8007982:	f000 fb71 	bl	8008068 <__mcmp>
 8007986:	463a      	mov	r2, r7
 8007988:	4681      	mov	r9, r0
 800798a:	4631      	mov	r1, r6
 800798c:	4620      	mov	r0, r4
 800798e:	f000 fb87 	bl	80080a0 <__mdiff>
 8007992:	68c2      	ldr	r2, [r0, #12]
 8007994:	9b08      	ldr	r3, [sp, #32]
 8007996:	4605      	mov	r5, r0
 8007998:	bb02      	cbnz	r2, 80079dc <_dtoa_r+0xa7c>
 800799a:	4601      	mov	r1, r0
 800799c:	4658      	mov	r0, fp
 800799e:	f000 fb63 	bl	8008068 <__mcmp>
 80079a2:	9b08      	ldr	r3, [sp, #32]
 80079a4:	4602      	mov	r2, r0
 80079a6:	4629      	mov	r1, r5
 80079a8:	4620      	mov	r0, r4
 80079aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80079ae:	f000 f91d 	bl	8007bec <_Bfree>
 80079b2:	9b05      	ldr	r3, [sp, #20]
 80079b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079b6:	9d01      	ldr	r5, [sp, #4]
 80079b8:	ea43 0102 	orr.w	r1, r3, r2
 80079bc:	9b06      	ldr	r3, [sp, #24]
 80079be:	430b      	orrs	r3, r1
 80079c0:	9b08      	ldr	r3, [sp, #32]
 80079c2:	d10d      	bne.n	80079e0 <_dtoa_r+0xa80>
 80079c4:	2b39      	cmp	r3, #57	; 0x39
 80079c6:	d029      	beq.n	8007a1c <_dtoa_r+0xabc>
 80079c8:	f1b9 0f00 	cmp.w	r9, #0
 80079cc:	dd01      	ble.n	80079d2 <_dtoa_r+0xa72>
 80079ce:	9b04      	ldr	r3, [sp, #16]
 80079d0:	3331      	adds	r3, #49	; 0x31
 80079d2:	9a02      	ldr	r2, [sp, #8]
 80079d4:	7013      	strb	r3, [r2, #0]
 80079d6:	e774      	b.n	80078c2 <_dtoa_r+0x962>
 80079d8:	4638      	mov	r0, r7
 80079da:	e7b9      	b.n	8007950 <_dtoa_r+0x9f0>
 80079dc:	2201      	movs	r2, #1
 80079de:	e7e2      	b.n	80079a6 <_dtoa_r+0xa46>
 80079e0:	f1b9 0f00 	cmp.w	r9, #0
 80079e4:	db06      	blt.n	80079f4 <_dtoa_r+0xa94>
 80079e6:	9905      	ldr	r1, [sp, #20]
 80079e8:	ea41 0909 	orr.w	r9, r1, r9
 80079ec:	9906      	ldr	r1, [sp, #24]
 80079ee:	ea59 0101 	orrs.w	r1, r9, r1
 80079f2:	d120      	bne.n	8007a36 <_dtoa_r+0xad6>
 80079f4:	2a00      	cmp	r2, #0
 80079f6:	ddec      	ble.n	80079d2 <_dtoa_r+0xa72>
 80079f8:	4659      	mov	r1, fp
 80079fa:	2201      	movs	r2, #1
 80079fc:	4620      	mov	r0, r4
 80079fe:	9301      	str	r3, [sp, #4]
 8007a00:	f000 fac6 	bl	8007f90 <__lshift>
 8007a04:	4631      	mov	r1, r6
 8007a06:	4683      	mov	fp, r0
 8007a08:	f000 fb2e 	bl	8008068 <__mcmp>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	9b01      	ldr	r3, [sp, #4]
 8007a10:	dc02      	bgt.n	8007a18 <_dtoa_r+0xab8>
 8007a12:	d1de      	bne.n	80079d2 <_dtoa_r+0xa72>
 8007a14:	07da      	lsls	r2, r3, #31
 8007a16:	d5dc      	bpl.n	80079d2 <_dtoa_r+0xa72>
 8007a18:	2b39      	cmp	r3, #57	; 0x39
 8007a1a:	d1d8      	bne.n	80079ce <_dtoa_r+0xa6e>
 8007a1c:	9a02      	ldr	r2, [sp, #8]
 8007a1e:	2339      	movs	r3, #57	; 0x39
 8007a20:	7013      	strb	r3, [r2, #0]
 8007a22:	462b      	mov	r3, r5
 8007a24:	461d      	mov	r5, r3
 8007a26:	3b01      	subs	r3, #1
 8007a28:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a2c:	2a39      	cmp	r2, #57	; 0x39
 8007a2e:	d050      	beq.n	8007ad2 <_dtoa_r+0xb72>
 8007a30:	3201      	adds	r2, #1
 8007a32:	701a      	strb	r2, [r3, #0]
 8007a34:	e745      	b.n	80078c2 <_dtoa_r+0x962>
 8007a36:	2a00      	cmp	r2, #0
 8007a38:	dd03      	ble.n	8007a42 <_dtoa_r+0xae2>
 8007a3a:	2b39      	cmp	r3, #57	; 0x39
 8007a3c:	d0ee      	beq.n	8007a1c <_dtoa_r+0xabc>
 8007a3e:	3301      	adds	r3, #1
 8007a40:	e7c7      	b.n	80079d2 <_dtoa_r+0xa72>
 8007a42:	9a01      	ldr	r2, [sp, #4]
 8007a44:	9907      	ldr	r1, [sp, #28]
 8007a46:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007a4a:	428a      	cmp	r2, r1
 8007a4c:	d02a      	beq.n	8007aa4 <_dtoa_r+0xb44>
 8007a4e:	4659      	mov	r1, fp
 8007a50:	2300      	movs	r3, #0
 8007a52:	220a      	movs	r2, #10
 8007a54:	4620      	mov	r0, r4
 8007a56:	f000 f8eb 	bl	8007c30 <__multadd>
 8007a5a:	45b8      	cmp	r8, r7
 8007a5c:	4683      	mov	fp, r0
 8007a5e:	f04f 0300 	mov.w	r3, #0
 8007a62:	f04f 020a 	mov.w	r2, #10
 8007a66:	4641      	mov	r1, r8
 8007a68:	4620      	mov	r0, r4
 8007a6a:	d107      	bne.n	8007a7c <_dtoa_r+0xb1c>
 8007a6c:	f000 f8e0 	bl	8007c30 <__multadd>
 8007a70:	4680      	mov	r8, r0
 8007a72:	4607      	mov	r7, r0
 8007a74:	9b01      	ldr	r3, [sp, #4]
 8007a76:	3301      	adds	r3, #1
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	e775      	b.n	8007968 <_dtoa_r+0xa08>
 8007a7c:	f000 f8d8 	bl	8007c30 <__multadd>
 8007a80:	4639      	mov	r1, r7
 8007a82:	4680      	mov	r8, r0
 8007a84:	2300      	movs	r3, #0
 8007a86:	220a      	movs	r2, #10
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 f8d1 	bl	8007c30 <__multadd>
 8007a8e:	4607      	mov	r7, r0
 8007a90:	e7f0      	b.n	8007a74 <_dtoa_r+0xb14>
 8007a92:	f1b9 0f00 	cmp.w	r9, #0
 8007a96:	9a00      	ldr	r2, [sp, #0]
 8007a98:	bfcc      	ite	gt
 8007a9a:	464d      	movgt	r5, r9
 8007a9c:	2501      	movle	r5, #1
 8007a9e:	4415      	add	r5, r2
 8007aa0:	f04f 0800 	mov.w	r8, #0
 8007aa4:	4659      	mov	r1, fp
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	9301      	str	r3, [sp, #4]
 8007aac:	f000 fa70 	bl	8007f90 <__lshift>
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	4683      	mov	fp, r0
 8007ab4:	f000 fad8 	bl	8008068 <__mcmp>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	dcb2      	bgt.n	8007a22 <_dtoa_r+0xac2>
 8007abc:	d102      	bne.n	8007ac4 <_dtoa_r+0xb64>
 8007abe:	9b01      	ldr	r3, [sp, #4]
 8007ac0:	07db      	lsls	r3, r3, #31
 8007ac2:	d4ae      	bmi.n	8007a22 <_dtoa_r+0xac2>
 8007ac4:	462b      	mov	r3, r5
 8007ac6:	461d      	mov	r5, r3
 8007ac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007acc:	2a30      	cmp	r2, #48	; 0x30
 8007ace:	d0fa      	beq.n	8007ac6 <_dtoa_r+0xb66>
 8007ad0:	e6f7      	b.n	80078c2 <_dtoa_r+0x962>
 8007ad2:	9a00      	ldr	r2, [sp, #0]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d1a5      	bne.n	8007a24 <_dtoa_r+0xac4>
 8007ad8:	f10a 0a01 	add.w	sl, sl, #1
 8007adc:	2331      	movs	r3, #49	; 0x31
 8007ade:	e779      	b.n	80079d4 <_dtoa_r+0xa74>
 8007ae0:	4b13      	ldr	r3, [pc, #76]	; (8007b30 <_dtoa_r+0xbd0>)
 8007ae2:	f7ff baaf 	b.w	8007044 <_dtoa_r+0xe4>
 8007ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f47f aa86 	bne.w	8006ffa <_dtoa_r+0x9a>
 8007aee:	4b11      	ldr	r3, [pc, #68]	; (8007b34 <_dtoa_r+0xbd4>)
 8007af0:	f7ff baa8 	b.w	8007044 <_dtoa_r+0xe4>
 8007af4:	f1b9 0f00 	cmp.w	r9, #0
 8007af8:	dc03      	bgt.n	8007b02 <_dtoa_r+0xba2>
 8007afa:	9b05      	ldr	r3, [sp, #20]
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	f73f aec9 	bgt.w	8007894 <_dtoa_r+0x934>
 8007b02:	9d00      	ldr	r5, [sp, #0]
 8007b04:	4631      	mov	r1, r6
 8007b06:	4658      	mov	r0, fp
 8007b08:	f7ff f99e 	bl	8006e48 <quorem>
 8007b0c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007b10:	f805 3b01 	strb.w	r3, [r5], #1
 8007b14:	9a00      	ldr	r2, [sp, #0]
 8007b16:	1aaa      	subs	r2, r5, r2
 8007b18:	4591      	cmp	r9, r2
 8007b1a:	ddba      	ble.n	8007a92 <_dtoa_r+0xb32>
 8007b1c:	4659      	mov	r1, fp
 8007b1e:	2300      	movs	r3, #0
 8007b20:	220a      	movs	r2, #10
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 f884 	bl	8007c30 <__multadd>
 8007b28:	4683      	mov	fp, r0
 8007b2a:	e7eb      	b.n	8007b04 <_dtoa_r+0xba4>
 8007b2c:	0800b367 	.word	0x0800b367
 8007b30:	0800b2c0 	.word	0x0800b2c0
 8007b34:	0800b2e4 	.word	0x0800b2e4

08007b38 <_localeconv_r>:
 8007b38:	4800      	ldr	r0, [pc, #0]	; (8007b3c <_localeconv_r+0x4>)
 8007b3a:	4770      	bx	lr
 8007b3c:	2000217c 	.word	0x2000217c

08007b40 <malloc>:
 8007b40:	4b02      	ldr	r3, [pc, #8]	; (8007b4c <malloc+0xc>)
 8007b42:	4601      	mov	r1, r0
 8007b44:	6818      	ldr	r0, [r3, #0]
 8007b46:	f000 bbef 	b.w	8008328 <_malloc_r>
 8007b4a:	bf00      	nop
 8007b4c:	20002028 	.word	0x20002028

08007b50 <memcpy>:
 8007b50:	440a      	add	r2, r1
 8007b52:	4291      	cmp	r1, r2
 8007b54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007b58:	d100      	bne.n	8007b5c <memcpy+0xc>
 8007b5a:	4770      	bx	lr
 8007b5c:	b510      	push	{r4, lr}
 8007b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b66:	4291      	cmp	r1, r2
 8007b68:	d1f9      	bne.n	8007b5e <memcpy+0xe>
 8007b6a:	bd10      	pop	{r4, pc}

08007b6c <_Balloc>:
 8007b6c:	b570      	push	{r4, r5, r6, lr}
 8007b6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b70:	4604      	mov	r4, r0
 8007b72:	460d      	mov	r5, r1
 8007b74:	b976      	cbnz	r6, 8007b94 <_Balloc+0x28>
 8007b76:	2010      	movs	r0, #16
 8007b78:	f7ff ffe2 	bl	8007b40 <malloc>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	6260      	str	r0, [r4, #36]	; 0x24
 8007b80:	b920      	cbnz	r0, 8007b8c <_Balloc+0x20>
 8007b82:	4b18      	ldr	r3, [pc, #96]	; (8007be4 <_Balloc+0x78>)
 8007b84:	4818      	ldr	r0, [pc, #96]	; (8007be8 <_Balloc+0x7c>)
 8007b86:	2166      	movs	r1, #102	; 0x66
 8007b88:	f000 fd94 	bl	80086b4 <__assert_func>
 8007b8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b90:	6006      	str	r6, [r0, #0]
 8007b92:	60c6      	str	r6, [r0, #12]
 8007b94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b96:	68f3      	ldr	r3, [r6, #12]
 8007b98:	b183      	cbz	r3, 8007bbc <_Balloc+0x50>
 8007b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ba2:	b9b8      	cbnz	r0, 8007bd4 <_Balloc+0x68>
 8007ba4:	2101      	movs	r1, #1
 8007ba6:	fa01 f605 	lsl.w	r6, r1, r5
 8007baa:	1d72      	adds	r2, r6, #5
 8007bac:	0092      	lsls	r2, r2, #2
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f000 fb5a 	bl	8008268 <_calloc_r>
 8007bb4:	b160      	cbz	r0, 8007bd0 <_Balloc+0x64>
 8007bb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007bba:	e00e      	b.n	8007bda <_Balloc+0x6e>
 8007bbc:	2221      	movs	r2, #33	; 0x21
 8007bbe:	2104      	movs	r1, #4
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f000 fb51 	bl	8008268 <_calloc_r>
 8007bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bc8:	60f0      	str	r0, [r6, #12]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e4      	bne.n	8007b9a <_Balloc+0x2e>
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	bd70      	pop	{r4, r5, r6, pc}
 8007bd4:	6802      	ldr	r2, [r0, #0]
 8007bd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007bda:	2300      	movs	r3, #0
 8007bdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007be0:	e7f7      	b.n	8007bd2 <_Balloc+0x66>
 8007be2:	bf00      	nop
 8007be4:	0800b2f1 	.word	0x0800b2f1
 8007be8:	0800b378 	.word	0x0800b378

08007bec <_Bfree>:
 8007bec:	b570      	push	{r4, r5, r6, lr}
 8007bee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	b976      	cbnz	r6, 8007c14 <_Bfree+0x28>
 8007bf6:	2010      	movs	r0, #16
 8007bf8:	f7ff ffa2 	bl	8007b40 <malloc>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	6268      	str	r0, [r5, #36]	; 0x24
 8007c00:	b920      	cbnz	r0, 8007c0c <_Bfree+0x20>
 8007c02:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <_Bfree+0x3c>)
 8007c04:	4809      	ldr	r0, [pc, #36]	; (8007c2c <_Bfree+0x40>)
 8007c06:	218a      	movs	r1, #138	; 0x8a
 8007c08:	f000 fd54 	bl	80086b4 <__assert_func>
 8007c0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c10:	6006      	str	r6, [r0, #0]
 8007c12:	60c6      	str	r6, [r0, #12]
 8007c14:	b13c      	cbz	r4, 8007c26 <_Bfree+0x3a>
 8007c16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c18:	6862      	ldr	r2, [r4, #4]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c20:	6021      	str	r1, [r4, #0]
 8007c22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c26:	bd70      	pop	{r4, r5, r6, pc}
 8007c28:	0800b2f1 	.word	0x0800b2f1
 8007c2c:	0800b378 	.word	0x0800b378

08007c30 <__multadd>:
 8007c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c34:	690e      	ldr	r6, [r1, #16]
 8007c36:	4607      	mov	r7, r0
 8007c38:	4698      	mov	r8, r3
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	f101 0014 	add.w	r0, r1, #20
 8007c40:	2300      	movs	r3, #0
 8007c42:	6805      	ldr	r5, [r0, #0]
 8007c44:	b2a9      	uxth	r1, r5
 8007c46:	fb02 8101 	mla	r1, r2, r1, r8
 8007c4a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007c4e:	0c2d      	lsrs	r5, r5, #16
 8007c50:	fb02 c505 	mla	r5, r2, r5, ip
 8007c54:	b289      	uxth	r1, r1
 8007c56:	3301      	adds	r3, #1
 8007c58:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007c5c:	429e      	cmp	r6, r3
 8007c5e:	f840 1b04 	str.w	r1, [r0], #4
 8007c62:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007c66:	dcec      	bgt.n	8007c42 <__multadd+0x12>
 8007c68:	f1b8 0f00 	cmp.w	r8, #0
 8007c6c:	d022      	beq.n	8007cb4 <__multadd+0x84>
 8007c6e:	68a3      	ldr	r3, [r4, #8]
 8007c70:	42b3      	cmp	r3, r6
 8007c72:	dc19      	bgt.n	8007ca8 <__multadd+0x78>
 8007c74:	6861      	ldr	r1, [r4, #4]
 8007c76:	4638      	mov	r0, r7
 8007c78:	3101      	adds	r1, #1
 8007c7a:	f7ff ff77 	bl	8007b6c <_Balloc>
 8007c7e:	4605      	mov	r5, r0
 8007c80:	b928      	cbnz	r0, 8007c8e <__multadd+0x5e>
 8007c82:	4602      	mov	r2, r0
 8007c84:	4b0d      	ldr	r3, [pc, #52]	; (8007cbc <__multadd+0x8c>)
 8007c86:	480e      	ldr	r0, [pc, #56]	; (8007cc0 <__multadd+0x90>)
 8007c88:	21b5      	movs	r1, #181	; 0xb5
 8007c8a:	f000 fd13 	bl	80086b4 <__assert_func>
 8007c8e:	6922      	ldr	r2, [r4, #16]
 8007c90:	3202      	adds	r2, #2
 8007c92:	f104 010c 	add.w	r1, r4, #12
 8007c96:	0092      	lsls	r2, r2, #2
 8007c98:	300c      	adds	r0, #12
 8007c9a:	f7ff ff59 	bl	8007b50 <memcpy>
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	f7ff ffa3 	bl	8007bec <_Bfree>
 8007ca6:	462c      	mov	r4, r5
 8007ca8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007cac:	3601      	adds	r6, #1
 8007cae:	f8c3 8014 	str.w	r8, [r3, #20]
 8007cb2:	6126      	str	r6, [r4, #16]
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cba:	bf00      	nop
 8007cbc:	0800b367 	.word	0x0800b367
 8007cc0:	0800b378 	.word	0x0800b378

08007cc4 <__hi0bits>:
 8007cc4:	0c03      	lsrs	r3, r0, #16
 8007cc6:	041b      	lsls	r3, r3, #16
 8007cc8:	b9d3      	cbnz	r3, 8007d00 <__hi0bits+0x3c>
 8007cca:	0400      	lsls	r0, r0, #16
 8007ccc:	2310      	movs	r3, #16
 8007cce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007cd2:	bf04      	itt	eq
 8007cd4:	0200      	lsleq	r0, r0, #8
 8007cd6:	3308      	addeq	r3, #8
 8007cd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007cdc:	bf04      	itt	eq
 8007cde:	0100      	lsleq	r0, r0, #4
 8007ce0:	3304      	addeq	r3, #4
 8007ce2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ce6:	bf04      	itt	eq
 8007ce8:	0080      	lsleq	r0, r0, #2
 8007cea:	3302      	addeq	r3, #2
 8007cec:	2800      	cmp	r0, #0
 8007cee:	db05      	blt.n	8007cfc <__hi0bits+0x38>
 8007cf0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007cf4:	f103 0301 	add.w	r3, r3, #1
 8007cf8:	bf08      	it	eq
 8007cfa:	2320      	moveq	r3, #32
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	4770      	bx	lr
 8007d00:	2300      	movs	r3, #0
 8007d02:	e7e4      	b.n	8007cce <__hi0bits+0xa>

08007d04 <__lo0bits>:
 8007d04:	6803      	ldr	r3, [r0, #0]
 8007d06:	f013 0207 	ands.w	r2, r3, #7
 8007d0a:	4601      	mov	r1, r0
 8007d0c:	d00b      	beq.n	8007d26 <__lo0bits+0x22>
 8007d0e:	07da      	lsls	r2, r3, #31
 8007d10:	d424      	bmi.n	8007d5c <__lo0bits+0x58>
 8007d12:	0798      	lsls	r0, r3, #30
 8007d14:	bf49      	itett	mi
 8007d16:	085b      	lsrmi	r3, r3, #1
 8007d18:	089b      	lsrpl	r3, r3, #2
 8007d1a:	2001      	movmi	r0, #1
 8007d1c:	600b      	strmi	r3, [r1, #0]
 8007d1e:	bf5c      	itt	pl
 8007d20:	600b      	strpl	r3, [r1, #0]
 8007d22:	2002      	movpl	r0, #2
 8007d24:	4770      	bx	lr
 8007d26:	b298      	uxth	r0, r3
 8007d28:	b9b0      	cbnz	r0, 8007d58 <__lo0bits+0x54>
 8007d2a:	0c1b      	lsrs	r3, r3, #16
 8007d2c:	2010      	movs	r0, #16
 8007d2e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007d32:	bf04      	itt	eq
 8007d34:	0a1b      	lsreq	r3, r3, #8
 8007d36:	3008      	addeq	r0, #8
 8007d38:	071a      	lsls	r2, r3, #28
 8007d3a:	bf04      	itt	eq
 8007d3c:	091b      	lsreq	r3, r3, #4
 8007d3e:	3004      	addeq	r0, #4
 8007d40:	079a      	lsls	r2, r3, #30
 8007d42:	bf04      	itt	eq
 8007d44:	089b      	lsreq	r3, r3, #2
 8007d46:	3002      	addeq	r0, #2
 8007d48:	07da      	lsls	r2, r3, #31
 8007d4a:	d403      	bmi.n	8007d54 <__lo0bits+0x50>
 8007d4c:	085b      	lsrs	r3, r3, #1
 8007d4e:	f100 0001 	add.w	r0, r0, #1
 8007d52:	d005      	beq.n	8007d60 <__lo0bits+0x5c>
 8007d54:	600b      	str	r3, [r1, #0]
 8007d56:	4770      	bx	lr
 8007d58:	4610      	mov	r0, r2
 8007d5a:	e7e8      	b.n	8007d2e <__lo0bits+0x2a>
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	4770      	bx	lr
 8007d60:	2020      	movs	r0, #32
 8007d62:	4770      	bx	lr

08007d64 <__i2b>:
 8007d64:	b510      	push	{r4, lr}
 8007d66:	460c      	mov	r4, r1
 8007d68:	2101      	movs	r1, #1
 8007d6a:	f7ff feff 	bl	8007b6c <_Balloc>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	b928      	cbnz	r0, 8007d7e <__i2b+0x1a>
 8007d72:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <__i2b+0x24>)
 8007d74:	4805      	ldr	r0, [pc, #20]	; (8007d8c <__i2b+0x28>)
 8007d76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007d7a:	f000 fc9b 	bl	80086b4 <__assert_func>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	6144      	str	r4, [r0, #20]
 8007d82:	6103      	str	r3, [r0, #16]
 8007d84:	bd10      	pop	{r4, pc}
 8007d86:	bf00      	nop
 8007d88:	0800b367 	.word	0x0800b367
 8007d8c:	0800b378 	.word	0x0800b378

08007d90 <__multiply>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	4614      	mov	r4, r2
 8007d96:	690a      	ldr	r2, [r1, #16]
 8007d98:	6923      	ldr	r3, [r4, #16]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	bfb8      	it	lt
 8007d9e:	460b      	movlt	r3, r1
 8007da0:	460d      	mov	r5, r1
 8007da2:	bfbc      	itt	lt
 8007da4:	4625      	movlt	r5, r4
 8007da6:	461c      	movlt	r4, r3
 8007da8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007dac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007db0:	68ab      	ldr	r3, [r5, #8]
 8007db2:	6869      	ldr	r1, [r5, #4]
 8007db4:	eb0a 0709 	add.w	r7, sl, r9
 8007db8:	42bb      	cmp	r3, r7
 8007dba:	b085      	sub	sp, #20
 8007dbc:	bfb8      	it	lt
 8007dbe:	3101      	addlt	r1, #1
 8007dc0:	f7ff fed4 	bl	8007b6c <_Balloc>
 8007dc4:	b930      	cbnz	r0, 8007dd4 <__multiply+0x44>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	4b42      	ldr	r3, [pc, #264]	; (8007ed4 <__multiply+0x144>)
 8007dca:	4843      	ldr	r0, [pc, #268]	; (8007ed8 <__multiply+0x148>)
 8007dcc:	f240 115d 	movw	r1, #349	; 0x15d
 8007dd0:	f000 fc70 	bl	80086b4 <__assert_func>
 8007dd4:	f100 0614 	add.w	r6, r0, #20
 8007dd8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007ddc:	4633      	mov	r3, r6
 8007dde:	2200      	movs	r2, #0
 8007de0:	4543      	cmp	r3, r8
 8007de2:	d31e      	bcc.n	8007e22 <__multiply+0x92>
 8007de4:	f105 0c14 	add.w	ip, r5, #20
 8007de8:	f104 0314 	add.w	r3, r4, #20
 8007dec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007df0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007df4:	9202      	str	r2, [sp, #8]
 8007df6:	ebac 0205 	sub.w	r2, ip, r5
 8007dfa:	3a15      	subs	r2, #21
 8007dfc:	f022 0203 	bic.w	r2, r2, #3
 8007e00:	3204      	adds	r2, #4
 8007e02:	f105 0115 	add.w	r1, r5, #21
 8007e06:	458c      	cmp	ip, r1
 8007e08:	bf38      	it	cc
 8007e0a:	2204      	movcc	r2, #4
 8007e0c:	9201      	str	r2, [sp, #4]
 8007e0e:	9a02      	ldr	r2, [sp, #8]
 8007e10:	9303      	str	r3, [sp, #12]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d808      	bhi.n	8007e28 <__multiply+0x98>
 8007e16:	2f00      	cmp	r7, #0
 8007e18:	dc55      	bgt.n	8007ec6 <__multiply+0x136>
 8007e1a:	6107      	str	r7, [r0, #16]
 8007e1c:	b005      	add	sp, #20
 8007e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e22:	f843 2b04 	str.w	r2, [r3], #4
 8007e26:	e7db      	b.n	8007de0 <__multiply+0x50>
 8007e28:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e2c:	f1ba 0f00 	cmp.w	sl, #0
 8007e30:	d020      	beq.n	8007e74 <__multiply+0xe4>
 8007e32:	f105 0e14 	add.w	lr, r5, #20
 8007e36:	46b1      	mov	r9, r6
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007e3e:	f8d9 b000 	ldr.w	fp, [r9]
 8007e42:	b2a1      	uxth	r1, r4
 8007e44:	fa1f fb8b 	uxth.w	fp, fp
 8007e48:	fb0a b101 	mla	r1, sl, r1, fp
 8007e4c:	4411      	add	r1, r2
 8007e4e:	f8d9 2000 	ldr.w	r2, [r9]
 8007e52:	0c24      	lsrs	r4, r4, #16
 8007e54:	0c12      	lsrs	r2, r2, #16
 8007e56:	fb0a 2404 	mla	r4, sl, r4, r2
 8007e5a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007e5e:	b289      	uxth	r1, r1
 8007e60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007e64:	45f4      	cmp	ip, lr
 8007e66:	f849 1b04 	str.w	r1, [r9], #4
 8007e6a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007e6e:	d8e4      	bhi.n	8007e3a <__multiply+0xaa>
 8007e70:	9901      	ldr	r1, [sp, #4]
 8007e72:	5072      	str	r2, [r6, r1]
 8007e74:	9a03      	ldr	r2, [sp, #12]
 8007e76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	f1b9 0f00 	cmp.w	r9, #0
 8007e80:	d01f      	beq.n	8007ec2 <__multiply+0x132>
 8007e82:	6834      	ldr	r4, [r6, #0]
 8007e84:	f105 0114 	add.w	r1, r5, #20
 8007e88:	46b6      	mov	lr, r6
 8007e8a:	f04f 0a00 	mov.w	sl, #0
 8007e8e:	880a      	ldrh	r2, [r1, #0]
 8007e90:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007e94:	fb09 b202 	mla	r2, r9, r2, fp
 8007e98:	4492      	add	sl, r2
 8007e9a:	b2a4      	uxth	r4, r4
 8007e9c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007ea0:	f84e 4b04 	str.w	r4, [lr], #4
 8007ea4:	f851 4b04 	ldr.w	r4, [r1], #4
 8007ea8:	f8be 2000 	ldrh.w	r2, [lr]
 8007eac:	0c24      	lsrs	r4, r4, #16
 8007eae:	fb09 2404 	mla	r4, r9, r4, r2
 8007eb2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007eb6:	458c      	cmp	ip, r1
 8007eb8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007ebc:	d8e7      	bhi.n	8007e8e <__multiply+0xfe>
 8007ebe:	9a01      	ldr	r2, [sp, #4]
 8007ec0:	50b4      	str	r4, [r6, r2]
 8007ec2:	3604      	adds	r6, #4
 8007ec4:	e7a3      	b.n	8007e0e <__multiply+0x7e>
 8007ec6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1a5      	bne.n	8007e1a <__multiply+0x8a>
 8007ece:	3f01      	subs	r7, #1
 8007ed0:	e7a1      	b.n	8007e16 <__multiply+0x86>
 8007ed2:	bf00      	nop
 8007ed4:	0800b367 	.word	0x0800b367
 8007ed8:	0800b378 	.word	0x0800b378

08007edc <__pow5mult>:
 8007edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ee0:	4615      	mov	r5, r2
 8007ee2:	f012 0203 	ands.w	r2, r2, #3
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	460f      	mov	r7, r1
 8007eea:	d007      	beq.n	8007efc <__pow5mult+0x20>
 8007eec:	4c25      	ldr	r4, [pc, #148]	; (8007f84 <__pow5mult+0xa8>)
 8007eee:	3a01      	subs	r2, #1
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ef6:	f7ff fe9b 	bl	8007c30 <__multadd>
 8007efa:	4607      	mov	r7, r0
 8007efc:	10ad      	asrs	r5, r5, #2
 8007efe:	d03d      	beq.n	8007f7c <__pow5mult+0xa0>
 8007f00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f02:	b97c      	cbnz	r4, 8007f24 <__pow5mult+0x48>
 8007f04:	2010      	movs	r0, #16
 8007f06:	f7ff fe1b 	bl	8007b40 <malloc>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	6270      	str	r0, [r6, #36]	; 0x24
 8007f0e:	b928      	cbnz	r0, 8007f1c <__pow5mult+0x40>
 8007f10:	4b1d      	ldr	r3, [pc, #116]	; (8007f88 <__pow5mult+0xac>)
 8007f12:	481e      	ldr	r0, [pc, #120]	; (8007f8c <__pow5mult+0xb0>)
 8007f14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007f18:	f000 fbcc 	bl	80086b4 <__assert_func>
 8007f1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f20:	6004      	str	r4, [r0, #0]
 8007f22:	60c4      	str	r4, [r0, #12]
 8007f24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f2c:	b94c      	cbnz	r4, 8007f42 <__pow5mult+0x66>
 8007f2e:	f240 2171 	movw	r1, #625	; 0x271
 8007f32:	4630      	mov	r0, r6
 8007f34:	f7ff ff16 	bl	8007d64 <__i2b>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f3e:	4604      	mov	r4, r0
 8007f40:	6003      	str	r3, [r0, #0]
 8007f42:	f04f 0900 	mov.w	r9, #0
 8007f46:	07eb      	lsls	r3, r5, #31
 8007f48:	d50a      	bpl.n	8007f60 <__pow5mult+0x84>
 8007f4a:	4639      	mov	r1, r7
 8007f4c:	4622      	mov	r2, r4
 8007f4e:	4630      	mov	r0, r6
 8007f50:	f7ff ff1e 	bl	8007d90 <__multiply>
 8007f54:	4639      	mov	r1, r7
 8007f56:	4680      	mov	r8, r0
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f7ff fe47 	bl	8007bec <_Bfree>
 8007f5e:	4647      	mov	r7, r8
 8007f60:	106d      	asrs	r5, r5, #1
 8007f62:	d00b      	beq.n	8007f7c <__pow5mult+0xa0>
 8007f64:	6820      	ldr	r0, [r4, #0]
 8007f66:	b938      	cbnz	r0, 8007f78 <__pow5mult+0x9c>
 8007f68:	4622      	mov	r2, r4
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f7ff ff0f 	bl	8007d90 <__multiply>
 8007f72:	6020      	str	r0, [r4, #0]
 8007f74:	f8c0 9000 	str.w	r9, [r0]
 8007f78:	4604      	mov	r4, r0
 8007f7a:	e7e4      	b.n	8007f46 <__pow5mult+0x6a>
 8007f7c:	4638      	mov	r0, r7
 8007f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f82:	bf00      	nop
 8007f84:	0800b4c8 	.word	0x0800b4c8
 8007f88:	0800b2f1 	.word	0x0800b2f1
 8007f8c:	0800b378 	.word	0x0800b378

08007f90 <__lshift>:
 8007f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f94:	460c      	mov	r4, r1
 8007f96:	6849      	ldr	r1, [r1, #4]
 8007f98:	6923      	ldr	r3, [r4, #16]
 8007f9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f9e:	68a3      	ldr	r3, [r4, #8]
 8007fa0:	4607      	mov	r7, r0
 8007fa2:	4691      	mov	r9, r2
 8007fa4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fa8:	f108 0601 	add.w	r6, r8, #1
 8007fac:	42b3      	cmp	r3, r6
 8007fae:	db0b      	blt.n	8007fc8 <__lshift+0x38>
 8007fb0:	4638      	mov	r0, r7
 8007fb2:	f7ff fddb 	bl	8007b6c <_Balloc>
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	b948      	cbnz	r0, 8007fce <__lshift+0x3e>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	4b28      	ldr	r3, [pc, #160]	; (8008060 <__lshift+0xd0>)
 8007fbe:	4829      	ldr	r0, [pc, #164]	; (8008064 <__lshift+0xd4>)
 8007fc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007fc4:	f000 fb76 	bl	80086b4 <__assert_func>
 8007fc8:	3101      	adds	r1, #1
 8007fca:	005b      	lsls	r3, r3, #1
 8007fcc:	e7ee      	b.n	8007fac <__lshift+0x1c>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f100 0114 	add.w	r1, r0, #20
 8007fd4:	f100 0210 	add.w	r2, r0, #16
 8007fd8:	4618      	mov	r0, r3
 8007fda:	4553      	cmp	r3, sl
 8007fdc:	db33      	blt.n	8008046 <__lshift+0xb6>
 8007fde:	6920      	ldr	r0, [r4, #16]
 8007fe0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fe4:	f104 0314 	add.w	r3, r4, #20
 8007fe8:	f019 091f 	ands.w	r9, r9, #31
 8007fec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ff0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ff4:	d02b      	beq.n	800804e <__lshift+0xbe>
 8007ff6:	f1c9 0e20 	rsb	lr, r9, #32
 8007ffa:	468a      	mov	sl, r1
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	6818      	ldr	r0, [r3, #0]
 8008000:	fa00 f009 	lsl.w	r0, r0, r9
 8008004:	4302      	orrs	r2, r0
 8008006:	f84a 2b04 	str.w	r2, [sl], #4
 800800a:	f853 2b04 	ldr.w	r2, [r3], #4
 800800e:	459c      	cmp	ip, r3
 8008010:	fa22 f20e 	lsr.w	r2, r2, lr
 8008014:	d8f3      	bhi.n	8007ffe <__lshift+0x6e>
 8008016:	ebac 0304 	sub.w	r3, ip, r4
 800801a:	3b15      	subs	r3, #21
 800801c:	f023 0303 	bic.w	r3, r3, #3
 8008020:	3304      	adds	r3, #4
 8008022:	f104 0015 	add.w	r0, r4, #21
 8008026:	4584      	cmp	ip, r0
 8008028:	bf38      	it	cc
 800802a:	2304      	movcc	r3, #4
 800802c:	50ca      	str	r2, [r1, r3]
 800802e:	b10a      	cbz	r2, 8008034 <__lshift+0xa4>
 8008030:	f108 0602 	add.w	r6, r8, #2
 8008034:	3e01      	subs	r6, #1
 8008036:	4638      	mov	r0, r7
 8008038:	612e      	str	r6, [r5, #16]
 800803a:	4621      	mov	r1, r4
 800803c:	f7ff fdd6 	bl	8007bec <_Bfree>
 8008040:	4628      	mov	r0, r5
 8008042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008046:	f842 0f04 	str.w	r0, [r2, #4]!
 800804a:	3301      	adds	r3, #1
 800804c:	e7c5      	b.n	8007fda <__lshift+0x4a>
 800804e:	3904      	subs	r1, #4
 8008050:	f853 2b04 	ldr.w	r2, [r3], #4
 8008054:	f841 2f04 	str.w	r2, [r1, #4]!
 8008058:	459c      	cmp	ip, r3
 800805a:	d8f9      	bhi.n	8008050 <__lshift+0xc0>
 800805c:	e7ea      	b.n	8008034 <__lshift+0xa4>
 800805e:	bf00      	nop
 8008060:	0800b367 	.word	0x0800b367
 8008064:	0800b378 	.word	0x0800b378

08008068 <__mcmp>:
 8008068:	b530      	push	{r4, r5, lr}
 800806a:	6902      	ldr	r2, [r0, #16]
 800806c:	690c      	ldr	r4, [r1, #16]
 800806e:	1b12      	subs	r2, r2, r4
 8008070:	d10e      	bne.n	8008090 <__mcmp+0x28>
 8008072:	f100 0314 	add.w	r3, r0, #20
 8008076:	3114      	adds	r1, #20
 8008078:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800807c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008080:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008084:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008088:	42a5      	cmp	r5, r4
 800808a:	d003      	beq.n	8008094 <__mcmp+0x2c>
 800808c:	d305      	bcc.n	800809a <__mcmp+0x32>
 800808e:	2201      	movs	r2, #1
 8008090:	4610      	mov	r0, r2
 8008092:	bd30      	pop	{r4, r5, pc}
 8008094:	4283      	cmp	r3, r0
 8008096:	d3f3      	bcc.n	8008080 <__mcmp+0x18>
 8008098:	e7fa      	b.n	8008090 <__mcmp+0x28>
 800809a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800809e:	e7f7      	b.n	8008090 <__mcmp+0x28>

080080a0 <__mdiff>:
 80080a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a4:	460c      	mov	r4, r1
 80080a6:	4606      	mov	r6, r0
 80080a8:	4611      	mov	r1, r2
 80080aa:	4620      	mov	r0, r4
 80080ac:	4617      	mov	r7, r2
 80080ae:	f7ff ffdb 	bl	8008068 <__mcmp>
 80080b2:	1e05      	subs	r5, r0, #0
 80080b4:	d110      	bne.n	80080d8 <__mdiff+0x38>
 80080b6:	4629      	mov	r1, r5
 80080b8:	4630      	mov	r0, r6
 80080ba:	f7ff fd57 	bl	8007b6c <_Balloc>
 80080be:	b930      	cbnz	r0, 80080ce <__mdiff+0x2e>
 80080c0:	4b39      	ldr	r3, [pc, #228]	; (80081a8 <__mdiff+0x108>)
 80080c2:	4602      	mov	r2, r0
 80080c4:	f240 2132 	movw	r1, #562	; 0x232
 80080c8:	4838      	ldr	r0, [pc, #224]	; (80081ac <__mdiff+0x10c>)
 80080ca:	f000 faf3 	bl	80086b4 <__assert_func>
 80080ce:	2301      	movs	r3, #1
 80080d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d8:	bfa4      	itt	ge
 80080da:	463b      	movge	r3, r7
 80080dc:	4627      	movge	r7, r4
 80080de:	4630      	mov	r0, r6
 80080e0:	6879      	ldr	r1, [r7, #4]
 80080e2:	bfa6      	itte	ge
 80080e4:	461c      	movge	r4, r3
 80080e6:	2500      	movge	r5, #0
 80080e8:	2501      	movlt	r5, #1
 80080ea:	f7ff fd3f 	bl	8007b6c <_Balloc>
 80080ee:	b920      	cbnz	r0, 80080fa <__mdiff+0x5a>
 80080f0:	4b2d      	ldr	r3, [pc, #180]	; (80081a8 <__mdiff+0x108>)
 80080f2:	4602      	mov	r2, r0
 80080f4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80080f8:	e7e6      	b.n	80080c8 <__mdiff+0x28>
 80080fa:	693e      	ldr	r6, [r7, #16]
 80080fc:	60c5      	str	r5, [r0, #12]
 80080fe:	6925      	ldr	r5, [r4, #16]
 8008100:	f107 0114 	add.w	r1, r7, #20
 8008104:	f104 0914 	add.w	r9, r4, #20
 8008108:	f100 0e14 	add.w	lr, r0, #20
 800810c:	f107 0210 	add.w	r2, r7, #16
 8008110:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008114:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008118:	46f2      	mov	sl, lr
 800811a:	2700      	movs	r7, #0
 800811c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008120:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008124:	fa1f f883 	uxth.w	r8, r3
 8008128:	fa17 f78b 	uxtah	r7, r7, fp
 800812c:	0c1b      	lsrs	r3, r3, #16
 800812e:	eba7 0808 	sub.w	r8, r7, r8
 8008132:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008136:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800813a:	fa1f f888 	uxth.w	r8, r8
 800813e:	141f      	asrs	r7, r3, #16
 8008140:	454d      	cmp	r5, r9
 8008142:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008146:	f84a 3b04 	str.w	r3, [sl], #4
 800814a:	d8e7      	bhi.n	800811c <__mdiff+0x7c>
 800814c:	1b2b      	subs	r3, r5, r4
 800814e:	3b15      	subs	r3, #21
 8008150:	f023 0303 	bic.w	r3, r3, #3
 8008154:	3304      	adds	r3, #4
 8008156:	3415      	adds	r4, #21
 8008158:	42a5      	cmp	r5, r4
 800815a:	bf38      	it	cc
 800815c:	2304      	movcc	r3, #4
 800815e:	4419      	add	r1, r3
 8008160:	4473      	add	r3, lr
 8008162:	469e      	mov	lr, r3
 8008164:	460d      	mov	r5, r1
 8008166:	4565      	cmp	r5, ip
 8008168:	d30e      	bcc.n	8008188 <__mdiff+0xe8>
 800816a:	f10c 0203 	add.w	r2, ip, #3
 800816e:	1a52      	subs	r2, r2, r1
 8008170:	f022 0203 	bic.w	r2, r2, #3
 8008174:	3903      	subs	r1, #3
 8008176:	458c      	cmp	ip, r1
 8008178:	bf38      	it	cc
 800817a:	2200      	movcc	r2, #0
 800817c:	441a      	add	r2, r3
 800817e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008182:	b17b      	cbz	r3, 80081a4 <__mdiff+0x104>
 8008184:	6106      	str	r6, [r0, #16]
 8008186:	e7a5      	b.n	80080d4 <__mdiff+0x34>
 8008188:	f855 8b04 	ldr.w	r8, [r5], #4
 800818c:	fa17 f488 	uxtah	r4, r7, r8
 8008190:	1422      	asrs	r2, r4, #16
 8008192:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008196:	b2a4      	uxth	r4, r4
 8008198:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800819c:	f84e 4b04 	str.w	r4, [lr], #4
 80081a0:	1417      	asrs	r7, r2, #16
 80081a2:	e7e0      	b.n	8008166 <__mdiff+0xc6>
 80081a4:	3e01      	subs	r6, #1
 80081a6:	e7ea      	b.n	800817e <__mdiff+0xde>
 80081a8:	0800b367 	.word	0x0800b367
 80081ac:	0800b378 	.word	0x0800b378

080081b0 <__d2b>:
 80081b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081b4:	4689      	mov	r9, r1
 80081b6:	2101      	movs	r1, #1
 80081b8:	ec57 6b10 	vmov	r6, r7, d0
 80081bc:	4690      	mov	r8, r2
 80081be:	f7ff fcd5 	bl	8007b6c <_Balloc>
 80081c2:	4604      	mov	r4, r0
 80081c4:	b930      	cbnz	r0, 80081d4 <__d2b+0x24>
 80081c6:	4602      	mov	r2, r0
 80081c8:	4b25      	ldr	r3, [pc, #148]	; (8008260 <__d2b+0xb0>)
 80081ca:	4826      	ldr	r0, [pc, #152]	; (8008264 <__d2b+0xb4>)
 80081cc:	f240 310a 	movw	r1, #778	; 0x30a
 80081d0:	f000 fa70 	bl	80086b4 <__assert_func>
 80081d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80081d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80081dc:	bb35      	cbnz	r5, 800822c <__d2b+0x7c>
 80081de:	2e00      	cmp	r6, #0
 80081e0:	9301      	str	r3, [sp, #4]
 80081e2:	d028      	beq.n	8008236 <__d2b+0x86>
 80081e4:	4668      	mov	r0, sp
 80081e6:	9600      	str	r6, [sp, #0]
 80081e8:	f7ff fd8c 	bl	8007d04 <__lo0bits>
 80081ec:	9900      	ldr	r1, [sp, #0]
 80081ee:	b300      	cbz	r0, 8008232 <__d2b+0x82>
 80081f0:	9a01      	ldr	r2, [sp, #4]
 80081f2:	f1c0 0320 	rsb	r3, r0, #32
 80081f6:	fa02 f303 	lsl.w	r3, r2, r3
 80081fa:	430b      	orrs	r3, r1
 80081fc:	40c2      	lsrs	r2, r0
 80081fe:	6163      	str	r3, [r4, #20]
 8008200:	9201      	str	r2, [sp, #4]
 8008202:	9b01      	ldr	r3, [sp, #4]
 8008204:	61a3      	str	r3, [r4, #24]
 8008206:	2b00      	cmp	r3, #0
 8008208:	bf14      	ite	ne
 800820a:	2202      	movne	r2, #2
 800820c:	2201      	moveq	r2, #1
 800820e:	6122      	str	r2, [r4, #16]
 8008210:	b1d5      	cbz	r5, 8008248 <__d2b+0x98>
 8008212:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008216:	4405      	add	r5, r0
 8008218:	f8c9 5000 	str.w	r5, [r9]
 800821c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008220:	f8c8 0000 	str.w	r0, [r8]
 8008224:	4620      	mov	r0, r4
 8008226:	b003      	add	sp, #12
 8008228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800822c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008230:	e7d5      	b.n	80081de <__d2b+0x2e>
 8008232:	6161      	str	r1, [r4, #20]
 8008234:	e7e5      	b.n	8008202 <__d2b+0x52>
 8008236:	a801      	add	r0, sp, #4
 8008238:	f7ff fd64 	bl	8007d04 <__lo0bits>
 800823c:	9b01      	ldr	r3, [sp, #4]
 800823e:	6163      	str	r3, [r4, #20]
 8008240:	2201      	movs	r2, #1
 8008242:	6122      	str	r2, [r4, #16]
 8008244:	3020      	adds	r0, #32
 8008246:	e7e3      	b.n	8008210 <__d2b+0x60>
 8008248:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800824c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008250:	f8c9 0000 	str.w	r0, [r9]
 8008254:	6918      	ldr	r0, [r3, #16]
 8008256:	f7ff fd35 	bl	8007cc4 <__hi0bits>
 800825a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800825e:	e7df      	b.n	8008220 <__d2b+0x70>
 8008260:	0800b367 	.word	0x0800b367
 8008264:	0800b378 	.word	0x0800b378

08008268 <_calloc_r>:
 8008268:	b513      	push	{r0, r1, r4, lr}
 800826a:	434a      	muls	r2, r1
 800826c:	4611      	mov	r1, r2
 800826e:	9201      	str	r2, [sp, #4]
 8008270:	f000 f85a 	bl	8008328 <_malloc_r>
 8008274:	4604      	mov	r4, r0
 8008276:	b118      	cbz	r0, 8008280 <_calloc_r+0x18>
 8008278:	9a01      	ldr	r2, [sp, #4]
 800827a:	2100      	movs	r1, #0
 800827c:	f7fe f952 	bl	8006524 <memset>
 8008280:	4620      	mov	r0, r4
 8008282:	b002      	add	sp, #8
 8008284:	bd10      	pop	{r4, pc}
	...

08008288 <_free_r>:
 8008288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800828a:	2900      	cmp	r1, #0
 800828c:	d048      	beq.n	8008320 <_free_r+0x98>
 800828e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008292:	9001      	str	r0, [sp, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	f1a1 0404 	sub.w	r4, r1, #4
 800829a:	bfb8      	it	lt
 800829c:	18e4      	addlt	r4, r4, r3
 800829e:	f000 fa65 	bl	800876c <__malloc_lock>
 80082a2:	4a20      	ldr	r2, [pc, #128]	; (8008324 <_free_r+0x9c>)
 80082a4:	9801      	ldr	r0, [sp, #4]
 80082a6:	6813      	ldr	r3, [r2, #0]
 80082a8:	4615      	mov	r5, r2
 80082aa:	b933      	cbnz	r3, 80082ba <_free_r+0x32>
 80082ac:	6063      	str	r3, [r4, #4]
 80082ae:	6014      	str	r4, [r2, #0]
 80082b0:	b003      	add	sp, #12
 80082b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082b6:	f000 ba5f 	b.w	8008778 <__malloc_unlock>
 80082ba:	42a3      	cmp	r3, r4
 80082bc:	d90b      	bls.n	80082d6 <_free_r+0x4e>
 80082be:	6821      	ldr	r1, [r4, #0]
 80082c0:	1862      	adds	r2, r4, r1
 80082c2:	4293      	cmp	r3, r2
 80082c4:	bf04      	itt	eq
 80082c6:	681a      	ldreq	r2, [r3, #0]
 80082c8:	685b      	ldreq	r3, [r3, #4]
 80082ca:	6063      	str	r3, [r4, #4]
 80082cc:	bf04      	itt	eq
 80082ce:	1852      	addeq	r2, r2, r1
 80082d0:	6022      	streq	r2, [r4, #0]
 80082d2:	602c      	str	r4, [r5, #0]
 80082d4:	e7ec      	b.n	80082b0 <_free_r+0x28>
 80082d6:	461a      	mov	r2, r3
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	b10b      	cbz	r3, 80082e0 <_free_r+0x58>
 80082dc:	42a3      	cmp	r3, r4
 80082de:	d9fa      	bls.n	80082d6 <_free_r+0x4e>
 80082e0:	6811      	ldr	r1, [r2, #0]
 80082e2:	1855      	adds	r5, r2, r1
 80082e4:	42a5      	cmp	r5, r4
 80082e6:	d10b      	bne.n	8008300 <_free_r+0x78>
 80082e8:	6824      	ldr	r4, [r4, #0]
 80082ea:	4421      	add	r1, r4
 80082ec:	1854      	adds	r4, r2, r1
 80082ee:	42a3      	cmp	r3, r4
 80082f0:	6011      	str	r1, [r2, #0]
 80082f2:	d1dd      	bne.n	80082b0 <_free_r+0x28>
 80082f4:	681c      	ldr	r4, [r3, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	6053      	str	r3, [r2, #4]
 80082fa:	4421      	add	r1, r4
 80082fc:	6011      	str	r1, [r2, #0]
 80082fe:	e7d7      	b.n	80082b0 <_free_r+0x28>
 8008300:	d902      	bls.n	8008308 <_free_r+0x80>
 8008302:	230c      	movs	r3, #12
 8008304:	6003      	str	r3, [r0, #0]
 8008306:	e7d3      	b.n	80082b0 <_free_r+0x28>
 8008308:	6825      	ldr	r5, [r4, #0]
 800830a:	1961      	adds	r1, r4, r5
 800830c:	428b      	cmp	r3, r1
 800830e:	bf04      	itt	eq
 8008310:	6819      	ldreq	r1, [r3, #0]
 8008312:	685b      	ldreq	r3, [r3, #4]
 8008314:	6063      	str	r3, [r4, #4]
 8008316:	bf04      	itt	eq
 8008318:	1949      	addeq	r1, r1, r5
 800831a:	6021      	streq	r1, [r4, #0]
 800831c:	6054      	str	r4, [r2, #4]
 800831e:	e7c7      	b.n	80082b0 <_free_r+0x28>
 8008320:	b003      	add	sp, #12
 8008322:	bd30      	pop	{r4, r5, pc}
 8008324:	2000223c 	.word	0x2000223c

08008328 <_malloc_r>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	1ccd      	adds	r5, r1, #3
 800832c:	f025 0503 	bic.w	r5, r5, #3
 8008330:	3508      	adds	r5, #8
 8008332:	2d0c      	cmp	r5, #12
 8008334:	bf38      	it	cc
 8008336:	250c      	movcc	r5, #12
 8008338:	2d00      	cmp	r5, #0
 800833a:	4606      	mov	r6, r0
 800833c:	db01      	blt.n	8008342 <_malloc_r+0x1a>
 800833e:	42a9      	cmp	r1, r5
 8008340:	d903      	bls.n	800834a <_malloc_r+0x22>
 8008342:	230c      	movs	r3, #12
 8008344:	6033      	str	r3, [r6, #0]
 8008346:	2000      	movs	r0, #0
 8008348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800834a:	f000 fa0f 	bl	800876c <__malloc_lock>
 800834e:	4921      	ldr	r1, [pc, #132]	; (80083d4 <_malloc_r+0xac>)
 8008350:	680a      	ldr	r2, [r1, #0]
 8008352:	4614      	mov	r4, r2
 8008354:	b99c      	cbnz	r4, 800837e <_malloc_r+0x56>
 8008356:	4f20      	ldr	r7, [pc, #128]	; (80083d8 <_malloc_r+0xb0>)
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	b923      	cbnz	r3, 8008366 <_malloc_r+0x3e>
 800835c:	4621      	mov	r1, r4
 800835e:	4630      	mov	r0, r6
 8008360:	f000 f998 	bl	8008694 <_sbrk_r>
 8008364:	6038      	str	r0, [r7, #0]
 8008366:	4629      	mov	r1, r5
 8008368:	4630      	mov	r0, r6
 800836a:	f000 f993 	bl	8008694 <_sbrk_r>
 800836e:	1c43      	adds	r3, r0, #1
 8008370:	d123      	bne.n	80083ba <_malloc_r+0x92>
 8008372:	230c      	movs	r3, #12
 8008374:	6033      	str	r3, [r6, #0]
 8008376:	4630      	mov	r0, r6
 8008378:	f000 f9fe 	bl	8008778 <__malloc_unlock>
 800837c:	e7e3      	b.n	8008346 <_malloc_r+0x1e>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	1b5b      	subs	r3, r3, r5
 8008382:	d417      	bmi.n	80083b4 <_malloc_r+0x8c>
 8008384:	2b0b      	cmp	r3, #11
 8008386:	d903      	bls.n	8008390 <_malloc_r+0x68>
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	441c      	add	r4, r3
 800838c:	6025      	str	r5, [r4, #0]
 800838e:	e004      	b.n	800839a <_malloc_r+0x72>
 8008390:	6863      	ldr	r3, [r4, #4]
 8008392:	42a2      	cmp	r2, r4
 8008394:	bf0c      	ite	eq
 8008396:	600b      	streq	r3, [r1, #0]
 8008398:	6053      	strne	r3, [r2, #4]
 800839a:	4630      	mov	r0, r6
 800839c:	f000 f9ec 	bl	8008778 <__malloc_unlock>
 80083a0:	f104 000b 	add.w	r0, r4, #11
 80083a4:	1d23      	adds	r3, r4, #4
 80083a6:	f020 0007 	bic.w	r0, r0, #7
 80083aa:	1ac2      	subs	r2, r0, r3
 80083ac:	d0cc      	beq.n	8008348 <_malloc_r+0x20>
 80083ae:	1a1b      	subs	r3, r3, r0
 80083b0:	50a3      	str	r3, [r4, r2]
 80083b2:	e7c9      	b.n	8008348 <_malloc_r+0x20>
 80083b4:	4622      	mov	r2, r4
 80083b6:	6864      	ldr	r4, [r4, #4]
 80083b8:	e7cc      	b.n	8008354 <_malloc_r+0x2c>
 80083ba:	1cc4      	adds	r4, r0, #3
 80083bc:	f024 0403 	bic.w	r4, r4, #3
 80083c0:	42a0      	cmp	r0, r4
 80083c2:	d0e3      	beq.n	800838c <_malloc_r+0x64>
 80083c4:	1a21      	subs	r1, r4, r0
 80083c6:	4630      	mov	r0, r6
 80083c8:	f000 f964 	bl	8008694 <_sbrk_r>
 80083cc:	3001      	adds	r0, #1
 80083ce:	d1dd      	bne.n	800838c <_malloc_r+0x64>
 80083d0:	e7cf      	b.n	8008372 <_malloc_r+0x4a>
 80083d2:	bf00      	nop
 80083d4:	2000223c 	.word	0x2000223c
 80083d8:	20002240 	.word	0x20002240

080083dc <__ssputs_r>:
 80083dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083e0:	688e      	ldr	r6, [r1, #8]
 80083e2:	429e      	cmp	r6, r3
 80083e4:	4682      	mov	sl, r0
 80083e6:	460c      	mov	r4, r1
 80083e8:	4690      	mov	r8, r2
 80083ea:	461f      	mov	r7, r3
 80083ec:	d838      	bhi.n	8008460 <__ssputs_r+0x84>
 80083ee:	898a      	ldrh	r2, [r1, #12]
 80083f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083f4:	d032      	beq.n	800845c <__ssputs_r+0x80>
 80083f6:	6825      	ldr	r5, [r4, #0]
 80083f8:	6909      	ldr	r1, [r1, #16]
 80083fa:	eba5 0901 	sub.w	r9, r5, r1
 80083fe:	6965      	ldr	r5, [r4, #20]
 8008400:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008404:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008408:	3301      	adds	r3, #1
 800840a:	444b      	add	r3, r9
 800840c:	106d      	asrs	r5, r5, #1
 800840e:	429d      	cmp	r5, r3
 8008410:	bf38      	it	cc
 8008412:	461d      	movcc	r5, r3
 8008414:	0553      	lsls	r3, r2, #21
 8008416:	d531      	bpl.n	800847c <__ssputs_r+0xa0>
 8008418:	4629      	mov	r1, r5
 800841a:	f7ff ff85 	bl	8008328 <_malloc_r>
 800841e:	4606      	mov	r6, r0
 8008420:	b950      	cbnz	r0, 8008438 <__ssputs_r+0x5c>
 8008422:	230c      	movs	r3, #12
 8008424:	f8ca 3000 	str.w	r3, [sl]
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800842e:	81a3      	strh	r3, [r4, #12]
 8008430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008438:	6921      	ldr	r1, [r4, #16]
 800843a:	464a      	mov	r2, r9
 800843c:	f7ff fb88 	bl	8007b50 <memcpy>
 8008440:	89a3      	ldrh	r3, [r4, #12]
 8008442:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800844a:	81a3      	strh	r3, [r4, #12]
 800844c:	6126      	str	r6, [r4, #16]
 800844e:	6165      	str	r5, [r4, #20]
 8008450:	444e      	add	r6, r9
 8008452:	eba5 0509 	sub.w	r5, r5, r9
 8008456:	6026      	str	r6, [r4, #0]
 8008458:	60a5      	str	r5, [r4, #8]
 800845a:	463e      	mov	r6, r7
 800845c:	42be      	cmp	r6, r7
 800845e:	d900      	bls.n	8008462 <__ssputs_r+0x86>
 8008460:	463e      	mov	r6, r7
 8008462:	4632      	mov	r2, r6
 8008464:	6820      	ldr	r0, [r4, #0]
 8008466:	4641      	mov	r1, r8
 8008468:	f000 f966 	bl	8008738 <memmove>
 800846c:	68a3      	ldr	r3, [r4, #8]
 800846e:	6822      	ldr	r2, [r4, #0]
 8008470:	1b9b      	subs	r3, r3, r6
 8008472:	4432      	add	r2, r6
 8008474:	60a3      	str	r3, [r4, #8]
 8008476:	6022      	str	r2, [r4, #0]
 8008478:	2000      	movs	r0, #0
 800847a:	e7db      	b.n	8008434 <__ssputs_r+0x58>
 800847c:	462a      	mov	r2, r5
 800847e:	f000 f981 	bl	8008784 <_realloc_r>
 8008482:	4606      	mov	r6, r0
 8008484:	2800      	cmp	r0, #0
 8008486:	d1e1      	bne.n	800844c <__ssputs_r+0x70>
 8008488:	6921      	ldr	r1, [r4, #16]
 800848a:	4650      	mov	r0, sl
 800848c:	f7ff fefc 	bl	8008288 <_free_r>
 8008490:	e7c7      	b.n	8008422 <__ssputs_r+0x46>
	...

08008494 <_svfiprintf_r>:
 8008494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008498:	4698      	mov	r8, r3
 800849a:	898b      	ldrh	r3, [r1, #12]
 800849c:	061b      	lsls	r3, r3, #24
 800849e:	b09d      	sub	sp, #116	; 0x74
 80084a0:	4607      	mov	r7, r0
 80084a2:	460d      	mov	r5, r1
 80084a4:	4614      	mov	r4, r2
 80084a6:	d50e      	bpl.n	80084c6 <_svfiprintf_r+0x32>
 80084a8:	690b      	ldr	r3, [r1, #16]
 80084aa:	b963      	cbnz	r3, 80084c6 <_svfiprintf_r+0x32>
 80084ac:	2140      	movs	r1, #64	; 0x40
 80084ae:	f7ff ff3b 	bl	8008328 <_malloc_r>
 80084b2:	6028      	str	r0, [r5, #0]
 80084b4:	6128      	str	r0, [r5, #16]
 80084b6:	b920      	cbnz	r0, 80084c2 <_svfiprintf_r+0x2e>
 80084b8:	230c      	movs	r3, #12
 80084ba:	603b      	str	r3, [r7, #0]
 80084bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084c0:	e0d1      	b.n	8008666 <_svfiprintf_r+0x1d2>
 80084c2:	2340      	movs	r3, #64	; 0x40
 80084c4:	616b      	str	r3, [r5, #20]
 80084c6:	2300      	movs	r3, #0
 80084c8:	9309      	str	r3, [sp, #36]	; 0x24
 80084ca:	2320      	movs	r3, #32
 80084cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80084d4:	2330      	movs	r3, #48	; 0x30
 80084d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008680 <_svfiprintf_r+0x1ec>
 80084da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084de:	f04f 0901 	mov.w	r9, #1
 80084e2:	4623      	mov	r3, r4
 80084e4:	469a      	mov	sl, r3
 80084e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084ea:	b10a      	cbz	r2, 80084f0 <_svfiprintf_r+0x5c>
 80084ec:	2a25      	cmp	r2, #37	; 0x25
 80084ee:	d1f9      	bne.n	80084e4 <_svfiprintf_r+0x50>
 80084f0:	ebba 0b04 	subs.w	fp, sl, r4
 80084f4:	d00b      	beq.n	800850e <_svfiprintf_r+0x7a>
 80084f6:	465b      	mov	r3, fp
 80084f8:	4622      	mov	r2, r4
 80084fa:	4629      	mov	r1, r5
 80084fc:	4638      	mov	r0, r7
 80084fe:	f7ff ff6d 	bl	80083dc <__ssputs_r>
 8008502:	3001      	adds	r0, #1
 8008504:	f000 80aa 	beq.w	800865c <_svfiprintf_r+0x1c8>
 8008508:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800850a:	445a      	add	r2, fp
 800850c:	9209      	str	r2, [sp, #36]	; 0x24
 800850e:	f89a 3000 	ldrb.w	r3, [sl]
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 80a2 	beq.w	800865c <_svfiprintf_r+0x1c8>
 8008518:	2300      	movs	r3, #0
 800851a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800851e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008522:	f10a 0a01 	add.w	sl, sl, #1
 8008526:	9304      	str	r3, [sp, #16]
 8008528:	9307      	str	r3, [sp, #28]
 800852a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800852e:	931a      	str	r3, [sp, #104]	; 0x68
 8008530:	4654      	mov	r4, sl
 8008532:	2205      	movs	r2, #5
 8008534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008538:	4851      	ldr	r0, [pc, #324]	; (8008680 <_svfiprintf_r+0x1ec>)
 800853a:	f7f7 fe59 	bl	80001f0 <memchr>
 800853e:	9a04      	ldr	r2, [sp, #16]
 8008540:	b9d8      	cbnz	r0, 800857a <_svfiprintf_r+0xe6>
 8008542:	06d0      	lsls	r0, r2, #27
 8008544:	bf44      	itt	mi
 8008546:	2320      	movmi	r3, #32
 8008548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800854c:	0711      	lsls	r1, r2, #28
 800854e:	bf44      	itt	mi
 8008550:	232b      	movmi	r3, #43	; 0x2b
 8008552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008556:	f89a 3000 	ldrb.w	r3, [sl]
 800855a:	2b2a      	cmp	r3, #42	; 0x2a
 800855c:	d015      	beq.n	800858a <_svfiprintf_r+0xf6>
 800855e:	9a07      	ldr	r2, [sp, #28]
 8008560:	4654      	mov	r4, sl
 8008562:	2000      	movs	r0, #0
 8008564:	f04f 0c0a 	mov.w	ip, #10
 8008568:	4621      	mov	r1, r4
 800856a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800856e:	3b30      	subs	r3, #48	; 0x30
 8008570:	2b09      	cmp	r3, #9
 8008572:	d94e      	bls.n	8008612 <_svfiprintf_r+0x17e>
 8008574:	b1b0      	cbz	r0, 80085a4 <_svfiprintf_r+0x110>
 8008576:	9207      	str	r2, [sp, #28]
 8008578:	e014      	b.n	80085a4 <_svfiprintf_r+0x110>
 800857a:	eba0 0308 	sub.w	r3, r0, r8
 800857e:	fa09 f303 	lsl.w	r3, r9, r3
 8008582:	4313      	orrs	r3, r2
 8008584:	9304      	str	r3, [sp, #16]
 8008586:	46a2      	mov	sl, r4
 8008588:	e7d2      	b.n	8008530 <_svfiprintf_r+0x9c>
 800858a:	9b03      	ldr	r3, [sp, #12]
 800858c:	1d19      	adds	r1, r3, #4
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	9103      	str	r1, [sp, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	bfbb      	ittet	lt
 8008596:	425b      	neglt	r3, r3
 8008598:	f042 0202 	orrlt.w	r2, r2, #2
 800859c:	9307      	strge	r3, [sp, #28]
 800859e:	9307      	strlt	r3, [sp, #28]
 80085a0:	bfb8      	it	lt
 80085a2:	9204      	strlt	r2, [sp, #16]
 80085a4:	7823      	ldrb	r3, [r4, #0]
 80085a6:	2b2e      	cmp	r3, #46	; 0x2e
 80085a8:	d10c      	bne.n	80085c4 <_svfiprintf_r+0x130>
 80085aa:	7863      	ldrb	r3, [r4, #1]
 80085ac:	2b2a      	cmp	r3, #42	; 0x2a
 80085ae:	d135      	bne.n	800861c <_svfiprintf_r+0x188>
 80085b0:	9b03      	ldr	r3, [sp, #12]
 80085b2:	1d1a      	adds	r2, r3, #4
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	9203      	str	r2, [sp, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	bfb8      	it	lt
 80085bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80085c0:	3402      	adds	r4, #2
 80085c2:	9305      	str	r3, [sp, #20]
 80085c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008690 <_svfiprintf_r+0x1fc>
 80085c8:	7821      	ldrb	r1, [r4, #0]
 80085ca:	2203      	movs	r2, #3
 80085cc:	4650      	mov	r0, sl
 80085ce:	f7f7 fe0f 	bl	80001f0 <memchr>
 80085d2:	b140      	cbz	r0, 80085e6 <_svfiprintf_r+0x152>
 80085d4:	2340      	movs	r3, #64	; 0x40
 80085d6:	eba0 000a 	sub.w	r0, r0, sl
 80085da:	fa03 f000 	lsl.w	r0, r3, r0
 80085de:	9b04      	ldr	r3, [sp, #16]
 80085e0:	4303      	orrs	r3, r0
 80085e2:	3401      	adds	r4, #1
 80085e4:	9304      	str	r3, [sp, #16]
 80085e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ea:	4826      	ldr	r0, [pc, #152]	; (8008684 <_svfiprintf_r+0x1f0>)
 80085ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085f0:	2206      	movs	r2, #6
 80085f2:	f7f7 fdfd 	bl	80001f0 <memchr>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d038      	beq.n	800866c <_svfiprintf_r+0x1d8>
 80085fa:	4b23      	ldr	r3, [pc, #140]	; (8008688 <_svfiprintf_r+0x1f4>)
 80085fc:	bb1b      	cbnz	r3, 8008646 <_svfiprintf_r+0x1b2>
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	3307      	adds	r3, #7
 8008602:	f023 0307 	bic.w	r3, r3, #7
 8008606:	3308      	adds	r3, #8
 8008608:	9303      	str	r3, [sp, #12]
 800860a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800860c:	4433      	add	r3, r6
 800860e:	9309      	str	r3, [sp, #36]	; 0x24
 8008610:	e767      	b.n	80084e2 <_svfiprintf_r+0x4e>
 8008612:	fb0c 3202 	mla	r2, ip, r2, r3
 8008616:	460c      	mov	r4, r1
 8008618:	2001      	movs	r0, #1
 800861a:	e7a5      	b.n	8008568 <_svfiprintf_r+0xd4>
 800861c:	2300      	movs	r3, #0
 800861e:	3401      	adds	r4, #1
 8008620:	9305      	str	r3, [sp, #20]
 8008622:	4619      	mov	r1, r3
 8008624:	f04f 0c0a 	mov.w	ip, #10
 8008628:	4620      	mov	r0, r4
 800862a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800862e:	3a30      	subs	r2, #48	; 0x30
 8008630:	2a09      	cmp	r2, #9
 8008632:	d903      	bls.n	800863c <_svfiprintf_r+0x1a8>
 8008634:	2b00      	cmp	r3, #0
 8008636:	d0c5      	beq.n	80085c4 <_svfiprintf_r+0x130>
 8008638:	9105      	str	r1, [sp, #20]
 800863a:	e7c3      	b.n	80085c4 <_svfiprintf_r+0x130>
 800863c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008640:	4604      	mov	r4, r0
 8008642:	2301      	movs	r3, #1
 8008644:	e7f0      	b.n	8008628 <_svfiprintf_r+0x194>
 8008646:	ab03      	add	r3, sp, #12
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	462a      	mov	r2, r5
 800864c:	4b0f      	ldr	r3, [pc, #60]	; (800868c <_svfiprintf_r+0x1f8>)
 800864e:	a904      	add	r1, sp, #16
 8008650:	4638      	mov	r0, r7
 8008652:	f7fe f80f 	bl	8006674 <_printf_float>
 8008656:	1c42      	adds	r2, r0, #1
 8008658:	4606      	mov	r6, r0
 800865a:	d1d6      	bne.n	800860a <_svfiprintf_r+0x176>
 800865c:	89ab      	ldrh	r3, [r5, #12]
 800865e:	065b      	lsls	r3, r3, #25
 8008660:	f53f af2c 	bmi.w	80084bc <_svfiprintf_r+0x28>
 8008664:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008666:	b01d      	add	sp, #116	; 0x74
 8008668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800866c:	ab03      	add	r3, sp, #12
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	462a      	mov	r2, r5
 8008672:	4b06      	ldr	r3, [pc, #24]	; (800868c <_svfiprintf_r+0x1f8>)
 8008674:	a904      	add	r1, sp, #16
 8008676:	4638      	mov	r0, r7
 8008678:	f7fe faa0 	bl	8006bbc <_printf_i>
 800867c:	e7eb      	b.n	8008656 <_svfiprintf_r+0x1c2>
 800867e:	bf00      	nop
 8008680:	0800b4d4 	.word	0x0800b4d4
 8008684:	0800b4de 	.word	0x0800b4de
 8008688:	08006675 	.word	0x08006675
 800868c:	080083dd 	.word	0x080083dd
 8008690:	0800b4da 	.word	0x0800b4da

08008694 <_sbrk_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	4d06      	ldr	r5, [pc, #24]	; (80086b0 <_sbrk_r+0x1c>)
 8008698:	2300      	movs	r3, #0
 800869a:	4604      	mov	r4, r0
 800869c:	4608      	mov	r0, r1
 800869e:	602b      	str	r3, [r5, #0]
 80086a0:	f7fb fb2e 	bl	8003d00 <_sbrk>
 80086a4:	1c43      	adds	r3, r0, #1
 80086a6:	d102      	bne.n	80086ae <_sbrk_r+0x1a>
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	b103      	cbz	r3, 80086ae <_sbrk_r+0x1a>
 80086ac:	6023      	str	r3, [r4, #0]
 80086ae:	bd38      	pop	{r3, r4, r5, pc}
 80086b0:	200064f4 	.word	0x200064f4

080086b4 <__assert_func>:
 80086b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086b6:	4614      	mov	r4, r2
 80086b8:	461a      	mov	r2, r3
 80086ba:	4b09      	ldr	r3, [pc, #36]	; (80086e0 <__assert_func+0x2c>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4605      	mov	r5, r0
 80086c0:	68d8      	ldr	r0, [r3, #12]
 80086c2:	b14c      	cbz	r4, 80086d8 <__assert_func+0x24>
 80086c4:	4b07      	ldr	r3, [pc, #28]	; (80086e4 <__assert_func+0x30>)
 80086c6:	9100      	str	r1, [sp, #0]
 80086c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086cc:	4906      	ldr	r1, [pc, #24]	; (80086e8 <__assert_func+0x34>)
 80086ce:	462b      	mov	r3, r5
 80086d0:	f000 f80e 	bl	80086f0 <fiprintf>
 80086d4:	f000 faa4 	bl	8008c20 <abort>
 80086d8:	4b04      	ldr	r3, [pc, #16]	; (80086ec <__assert_func+0x38>)
 80086da:	461c      	mov	r4, r3
 80086dc:	e7f3      	b.n	80086c6 <__assert_func+0x12>
 80086de:	bf00      	nop
 80086e0:	20002028 	.word	0x20002028
 80086e4:	0800b4e5 	.word	0x0800b4e5
 80086e8:	0800b4f2 	.word	0x0800b4f2
 80086ec:	0800b520 	.word	0x0800b520

080086f0 <fiprintf>:
 80086f0:	b40e      	push	{r1, r2, r3}
 80086f2:	b503      	push	{r0, r1, lr}
 80086f4:	4601      	mov	r1, r0
 80086f6:	ab03      	add	r3, sp, #12
 80086f8:	4805      	ldr	r0, [pc, #20]	; (8008710 <fiprintf+0x20>)
 80086fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80086fe:	6800      	ldr	r0, [r0, #0]
 8008700:	9301      	str	r3, [sp, #4]
 8008702:	f000 f88f 	bl	8008824 <_vfiprintf_r>
 8008706:	b002      	add	sp, #8
 8008708:	f85d eb04 	ldr.w	lr, [sp], #4
 800870c:	b003      	add	sp, #12
 800870e:	4770      	bx	lr
 8008710:	20002028 	.word	0x20002028

08008714 <__ascii_mbtowc>:
 8008714:	b082      	sub	sp, #8
 8008716:	b901      	cbnz	r1, 800871a <__ascii_mbtowc+0x6>
 8008718:	a901      	add	r1, sp, #4
 800871a:	b142      	cbz	r2, 800872e <__ascii_mbtowc+0x1a>
 800871c:	b14b      	cbz	r3, 8008732 <__ascii_mbtowc+0x1e>
 800871e:	7813      	ldrb	r3, [r2, #0]
 8008720:	600b      	str	r3, [r1, #0]
 8008722:	7812      	ldrb	r2, [r2, #0]
 8008724:	1e10      	subs	r0, r2, #0
 8008726:	bf18      	it	ne
 8008728:	2001      	movne	r0, #1
 800872a:	b002      	add	sp, #8
 800872c:	4770      	bx	lr
 800872e:	4610      	mov	r0, r2
 8008730:	e7fb      	b.n	800872a <__ascii_mbtowc+0x16>
 8008732:	f06f 0001 	mvn.w	r0, #1
 8008736:	e7f8      	b.n	800872a <__ascii_mbtowc+0x16>

08008738 <memmove>:
 8008738:	4288      	cmp	r0, r1
 800873a:	b510      	push	{r4, lr}
 800873c:	eb01 0402 	add.w	r4, r1, r2
 8008740:	d902      	bls.n	8008748 <memmove+0x10>
 8008742:	4284      	cmp	r4, r0
 8008744:	4623      	mov	r3, r4
 8008746:	d807      	bhi.n	8008758 <memmove+0x20>
 8008748:	1e43      	subs	r3, r0, #1
 800874a:	42a1      	cmp	r1, r4
 800874c:	d008      	beq.n	8008760 <memmove+0x28>
 800874e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008752:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008756:	e7f8      	b.n	800874a <memmove+0x12>
 8008758:	4402      	add	r2, r0
 800875a:	4601      	mov	r1, r0
 800875c:	428a      	cmp	r2, r1
 800875e:	d100      	bne.n	8008762 <memmove+0x2a>
 8008760:	bd10      	pop	{r4, pc}
 8008762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800876a:	e7f7      	b.n	800875c <memmove+0x24>

0800876c <__malloc_lock>:
 800876c:	4801      	ldr	r0, [pc, #4]	; (8008774 <__malloc_lock+0x8>)
 800876e:	f000 bc17 	b.w	8008fa0 <__retarget_lock_acquire_recursive>
 8008772:	bf00      	nop
 8008774:	200064fc 	.word	0x200064fc

08008778 <__malloc_unlock>:
 8008778:	4801      	ldr	r0, [pc, #4]	; (8008780 <__malloc_unlock+0x8>)
 800877a:	f000 bc12 	b.w	8008fa2 <__retarget_lock_release_recursive>
 800877e:	bf00      	nop
 8008780:	200064fc 	.word	0x200064fc

08008784 <_realloc_r>:
 8008784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008786:	4607      	mov	r7, r0
 8008788:	4614      	mov	r4, r2
 800878a:	460e      	mov	r6, r1
 800878c:	b921      	cbnz	r1, 8008798 <_realloc_r+0x14>
 800878e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008792:	4611      	mov	r1, r2
 8008794:	f7ff bdc8 	b.w	8008328 <_malloc_r>
 8008798:	b922      	cbnz	r2, 80087a4 <_realloc_r+0x20>
 800879a:	f7ff fd75 	bl	8008288 <_free_r>
 800879e:	4625      	mov	r5, r4
 80087a0:	4628      	mov	r0, r5
 80087a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087a4:	f000 fc62 	bl	800906c <_malloc_usable_size_r>
 80087a8:	42a0      	cmp	r0, r4
 80087aa:	d20f      	bcs.n	80087cc <_realloc_r+0x48>
 80087ac:	4621      	mov	r1, r4
 80087ae:	4638      	mov	r0, r7
 80087b0:	f7ff fdba 	bl	8008328 <_malloc_r>
 80087b4:	4605      	mov	r5, r0
 80087b6:	2800      	cmp	r0, #0
 80087b8:	d0f2      	beq.n	80087a0 <_realloc_r+0x1c>
 80087ba:	4631      	mov	r1, r6
 80087bc:	4622      	mov	r2, r4
 80087be:	f7ff f9c7 	bl	8007b50 <memcpy>
 80087c2:	4631      	mov	r1, r6
 80087c4:	4638      	mov	r0, r7
 80087c6:	f7ff fd5f 	bl	8008288 <_free_r>
 80087ca:	e7e9      	b.n	80087a0 <_realloc_r+0x1c>
 80087cc:	4635      	mov	r5, r6
 80087ce:	e7e7      	b.n	80087a0 <_realloc_r+0x1c>

080087d0 <__sfputc_r>:
 80087d0:	6893      	ldr	r3, [r2, #8]
 80087d2:	3b01      	subs	r3, #1
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	b410      	push	{r4}
 80087d8:	6093      	str	r3, [r2, #8]
 80087da:	da08      	bge.n	80087ee <__sfputc_r+0x1e>
 80087dc:	6994      	ldr	r4, [r2, #24]
 80087de:	42a3      	cmp	r3, r4
 80087e0:	db01      	blt.n	80087e6 <__sfputc_r+0x16>
 80087e2:	290a      	cmp	r1, #10
 80087e4:	d103      	bne.n	80087ee <__sfputc_r+0x1e>
 80087e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087ea:	f000 b94b 	b.w	8008a84 <__swbuf_r>
 80087ee:	6813      	ldr	r3, [r2, #0]
 80087f0:	1c58      	adds	r0, r3, #1
 80087f2:	6010      	str	r0, [r2, #0]
 80087f4:	7019      	strb	r1, [r3, #0]
 80087f6:	4608      	mov	r0, r1
 80087f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <__sfputs_r>:
 80087fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008800:	4606      	mov	r6, r0
 8008802:	460f      	mov	r7, r1
 8008804:	4614      	mov	r4, r2
 8008806:	18d5      	adds	r5, r2, r3
 8008808:	42ac      	cmp	r4, r5
 800880a:	d101      	bne.n	8008810 <__sfputs_r+0x12>
 800880c:	2000      	movs	r0, #0
 800880e:	e007      	b.n	8008820 <__sfputs_r+0x22>
 8008810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008814:	463a      	mov	r2, r7
 8008816:	4630      	mov	r0, r6
 8008818:	f7ff ffda 	bl	80087d0 <__sfputc_r>
 800881c:	1c43      	adds	r3, r0, #1
 800881e:	d1f3      	bne.n	8008808 <__sfputs_r+0xa>
 8008820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008824 <_vfiprintf_r>:
 8008824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008828:	460d      	mov	r5, r1
 800882a:	b09d      	sub	sp, #116	; 0x74
 800882c:	4614      	mov	r4, r2
 800882e:	4698      	mov	r8, r3
 8008830:	4606      	mov	r6, r0
 8008832:	b118      	cbz	r0, 800883c <_vfiprintf_r+0x18>
 8008834:	6983      	ldr	r3, [r0, #24]
 8008836:	b90b      	cbnz	r3, 800883c <_vfiprintf_r+0x18>
 8008838:	f000 fb14 	bl	8008e64 <__sinit>
 800883c:	4b89      	ldr	r3, [pc, #548]	; (8008a64 <_vfiprintf_r+0x240>)
 800883e:	429d      	cmp	r5, r3
 8008840:	d11b      	bne.n	800887a <_vfiprintf_r+0x56>
 8008842:	6875      	ldr	r5, [r6, #4]
 8008844:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008846:	07d9      	lsls	r1, r3, #31
 8008848:	d405      	bmi.n	8008856 <_vfiprintf_r+0x32>
 800884a:	89ab      	ldrh	r3, [r5, #12]
 800884c:	059a      	lsls	r2, r3, #22
 800884e:	d402      	bmi.n	8008856 <_vfiprintf_r+0x32>
 8008850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008852:	f000 fba5 	bl	8008fa0 <__retarget_lock_acquire_recursive>
 8008856:	89ab      	ldrh	r3, [r5, #12]
 8008858:	071b      	lsls	r3, r3, #28
 800885a:	d501      	bpl.n	8008860 <_vfiprintf_r+0x3c>
 800885c:	692b      	ldr	r3, [r5, #16]
 800885e:	b9eb      	cbnz	r3, 800889c <_vfiprintf_r+0x78>
 8008860:	4629      	mov	r1, r5
 8008862:	4630      	mov	r0, r6
 8008864:	f000 f96e 	bl	8008b44 <__swsetup_r>
 8008868:	b1c0      	cbz	r0, 800889c <_vfiprintf_r+0x78>
 800886a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800886c:	07dc      	lsls	r4, r3, #31
 800886e:	d50e      	bpl.n	800888e <_vfiprintf_r+0x6a>
 8008870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008874:	b01d      	add	sp, #116	; 0x74
 8008876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887a:	4b7b      	ldr	r3, [pc, #492]	; (8008a68 <_vfiprintf_r+0x244>)
 800887c:	429d      	cmp	r5, r3
 800887e:	d101      	bne.n	8008884 <_vfiprintf_r+0x60>
 8008880:	68b5      	ldr	r5, [r6, #8]
 8008882:	e7df      	b.n	8008844 <_vfiprintf_r+0x20>
 8008884:	4b79      	ldr	r3, [pc, #484]	; (8008a6c <_vfiprintf_r+0x248>)
 8008886:	429d      	cmp	r5, r3
 8008888:	bf08      	it	eq
 800888a:	68f5      	ldreq	r5, [r6, #12]
 800888c:	e7da      	b.n	8008844 <_vfiprintf_r+0x20>
 800888e:	89ab      	ldrh	r3, [r5, #12]
 8008890:	0598      	lsls	r0, r3, #22
 8008892:	d4ed      	bmi.n	8008870 <_vfiprintf_r+0x4c>
 8008894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008896:	f000 fb84 	bl	8008fa2 <__retarget_lock_release_recursive>
 800889a:	e7e9      	b.n	8008870 <_vfiprintf_r+0x4c>
 800889c:	2300      	movs	r3, #0
 800889e:	9309      	str	r3, [sp, #36]	; 0x24
 80088a0:	2320      	movs	r3, #32
 80088a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80088aa:	2330      	movs	r3, #48	; 0x30
 80088ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a70 <_vfiprintf_r+0x24c>
 80088b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088b4:	f04f 0901 	mov.w	r9, #1
 80088b8:	4623      	mov	r3, r4
 80088ba:	469a      	mov	sl, r3
 80088bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088c0:	b10a      	cbz	r2, 80088c6 <_vfiprintf_r+0xa2>
 80088c2:	2a25      	cmp	r2, #37	; 0x25
 80088c4:	d1f9      	bne.n	80088ba <_vfiprintf_r+0x96>
 80088c6:	ebba 0b04 	subs.w	fp, sl, r4
 80088ca:	d00b      	beq.n	80088e4 <_vfiprintf_r+0xc0>
 80088cc:	465b      	mov	r3, fp
 80088ce:	4622      	mov	r2, r4
 80088d0:	4629      	mov	r1, r5
 80088d2:	4630      	mov	r0, r6
 80088d4:	f7ff ff93 	bl	80087fe <__sfputs_r>
 80088d8:	3001      	adds	r0, #1
 80088da:	f000 80aa 	beq.w	8008a32 <_vfiprintf_r+0x20e>
 80088de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088e0:	445a      	add	r2, fp
 80088e2:	9209      	str	r2, [sp, #36]	; 0x24
 80088e4:	f89a 3000 	ldrb.w	r3, [sl]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 80a2 	beq.w	8008a32 <_vfiprintf_r+0x20e>
 80088ee:	2300      	movs	r3, #0
 80088f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088f8:	f10a 0a01 	add.w	sl, sl, #1
 80088fc:	9304      	str	r3, [sp, #16]
 80088fe:	9307      	str	r3, [sp, #28]
 8008900:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008904:	931a      	str	r3, [sp, #104]	; 0x68
 8008906:	4654      	mov	r4, sl
 8008908:	2205      	movs	r2, #5
 800890a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800890e:	4858      	ldr	r0, [pc, #352]	; (8008a70 <_vfiprintf_r+0x24c>)
 8008910:	f7f7 fc6e 	bl	80001f0 <memchr>
 8008914:	9a04      	ldr	r2, [sp, #16]
 8008916:	b9d8      	cbnz	r0, 8008950 <_vfiprintf_r+0x12c>
 8008918:	06d1      	lsls	r1, r2, #27
 800891a:	bf44      	itt	mi
 800891c:	2320      	movmi	r3, #32
 800891e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008922:	0713      	lsls	r3, r2, #28
 8008924:	bf44      	itt	mi
 8008926:	232b      	movmi	r3, #43	; 0x2b
 8008928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800892c:	f89a 3000 	ldrb.w	r3, [sl]
 8008930:	2b2a      	cmp	r3, #42	; 0x2a
 8008932:	d015      	beq.n	8008960 <_vfiprintf_r+0x13c>
 8008934:	9a07      	ldr	r2, [sp, #28]
 8008936:	4654      	mov	r4, sl
 8008938:	2000      	movs	r0, #0
 800893a:	f04f 0c0a 	mov.w	ip, #10
 800893e:	4621      	mov	r1, r4
 8008940:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008944:	3b30      	subs	r3, #48	; 0x30
 8008946:	2b09      	cmp	r3, #9
 8008948:	d94e      	bls.n	80089e8 <_vfiprintf_r+0x1c4>
 800894a:	b1b0      	cbz	r0, 800897a <_vfiprintf_r+0x156>
 800894c:	9207      	str	r2, [sp, #28]
 800894e:	e014      	b.n	800897a <_vfiprintf_r+0x156>
 8008950:	eba0 0308 	sub.w	r3, r0, r8
 8008954:	fa09 f303 	lsl.w	r3, r9, r3
 8008958:	4313      	orrs	r3, r2
 800895a:	9304      	str	r3, [sp, #16]
 800895c:	46a2      	mov	sl, r4
 800895e:	e7d2      	b.n	8008906 <_vfiprintf_r+0xe2>
 8008960:	9b03      	ldr	r3, [sp, #12]
 8008962:	1d19      	adds	r1, r3, #4
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	9103      	str	r1, [sp, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	bfbb      	ittet	lt
 800896c:	425b      	neglt	r3, r3
 800896e:	f042 0202 	orrlt.w	r2, r2, #2
 8008972:	9307      	strge	r3, [sp, #28]
 8008974:	9307      	strlt	r3, [sp, #28]
 8008976:	bfb8      	it	lt
 8008978:	9204      	strlt	r2, [sp, #16]
 800897a:	7823      	ldrb	r3, [r4, #0]
 800897c:	2b2e      	cmp	r3, #46	; 0x2e
 800897e:	d10c      	bne.n	800899a <_vfiprintf_r+0x176>
 8008980:	7863      	ldrb	r3, [r4, #1]
 8008982:	2b2a      	cmp	r3, #42	; 0x2a
 8008984:	d135      	bne.n	80089f2 <_vfiprintf_r+0x1ce>
 8008986:	9b03      	ldr	r3, [sp, #12]
 8008988:	1d1a      	adds	r2, r3, #4
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	9203      	str	r2, [sp, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	bfb8      	it	lt
 8008992:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008996:	3402      	adds	r4, #2
 8008998:	9305      	str	r3, [sp, #20]
 800899a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a80 <_vfiprintf_r+0x25c>
 800899e:	7821      	ldrb	r1, [r4, #0]
 80089a0:	2203      	movs	r2, #3
 80089a2:	4650      	mov	r0, sl
 80089a4:	f7f7 fc24 	bl	80001f0 <memchr>
 80089a8:	b140      	cbz	r0, 80089bc <_vfiprintf_r+0x198>
 80089aa:	2340      	movs	r3, #64	; 0x40
 80089ac:	eba0 000a 	sub.w	r0, r0, sl
 80089b0:	fa03 f000 	lsl.w	r0, r3, r0
 80089b4:	9b04      	ldr	r3, [sp, #16]
 80089b6:	4303      	orrs	r3, r0
 80089b8:	3401      	adds	r4, #1
 80089ba:	9304      	str	r3, [sp, #16]
 80089bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c0:	482c      	ldr	r0, [pc, #176]	; (8008a74 <_vfiprintf_r+0x250>)
 80089c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089c6:	2206      	movs	r2, #6
 80089c8:	f7f7 fc12 	bl	80001f0 <memchr>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d03f      	beq.n	8008a50 <_vfiprintf_r+0x22c>
 80089d0:	4b29      	ldr	r3, [pc, #164]	; (8008a78 <_vfiprintf_r+0x254>)
 80089d2:	bb1b      	cbnz	r3, 8008a1c <_vfiprintf_r+0x1f8>
 80089d4:	9b03      	ldr	r3, [sp, #12]
 80089d6:	3307      	adds	r3, #7
 80089d8:	f023 0307 	bic.w	r3, r3, #7
 80089dc:	3308      	adds	r3, #8
 80089de:	9303      	str	r3, [sp, #12]
 80089e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e2:	443b      	add	r3, r7
 80089e4:	9309      	str	r3, [sp, #36]	; 0x24
 80089e6:	e767      	b.n	80088b8 <_vfiprintf_r+0x94>
 80089e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80089ec:	460c      	mov	r4, r1
 80089ee:	2001      	movs	r0, #1
 80089f0:	e7a5      	b.n	800893e <_vfiprintf_r+0x11a>
 80089f2:	2300      	movs	r3, #0
 80089f4:	3401      	adds	r4, #1
 80089f6:	9305      	str	r3, [sp, #20]
 80089f8:	4619      	mov	r1, r3
 80089fa:	f04f 0c0a 	mov.w	ip, #10
 80089fe:	4620      	mov	r0, r4
 8008a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a04:	3a30      	subs	r2, #48	; 0x30
 8008a06:	2a09      	cmp	r2, #9
 8008a08:	d903      	bls.n	8008a12 <_vfiprintf_r+0x1ee>
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d0c5      	beq.n	800899a <_vfiprintf_r+0x176>
 8008a0e:	9105      	str	r1, [sp, #20]
 8008a10:	e7c3      	b.n	800899a <_vfiprintf_r+0x176>
 8008a12:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a16:	4604      	mov	r4, r0
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e7f0      	b.n	80089fe <_vfiprintf_r+0x1da>
 8008a1c:	ab03      	add	r3, sp, #12
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	462a      	mov	r2, r5
 8008a22:	4b16      	ldr	r3, [pc, #88]	; (8008a7c <_vfiprintf_r+0x258>)
 8008a24:	a904      	add	r1, sp, #16
 8008a26:	4630      	mov	r0, r6
 8008a28:	f7fd fe24 	bl	8006674 <_printf_float>
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	1c78      	adds	r0, r7, #1
 8008a30:	d1d6      	bne.n	80089e0 <_vfiprintf_r+0x1bc>
 8008a32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a34:	07d9      	lsls	r1, r3, #31
 8008a36:	d405      	bmi.n	8008a44 <_vfiprintf_r+0x220>
 8008a38:	89ab      	ldrh	r3, [r5, #12]
 8008a3a:	059a      	lsls	r2, r3, #22
 8008a3c:	d402      	bmi.n	8008a44 <_vfiprintf_r+0x220>
 8008a3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a40:	f000 faaf 	bl	8008fa2 <__retarget_lock_release_recursive>
 8008a44:	89ab      	ldrh	r3, [r5, #12]
 8008a46:	065b      	lsls	r3, r3, #25
 8008a48:	f53f af12 	bmi.w	8008870 <_vfiprintf_r+0x4c>
 8008a4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a4e:	e711      	b.n	8008874 <_vfiprintf_r+0x50>
 8008a50:	ab03      	add	r3, sp, #12
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	462a      	mov	r2, r5
 8008a56:	4b09      	ldr	r3, [pc, #36]	; (8008a7c <_vfiprintf_r+0x258>)
 8008a58:	a904      	add	r1, sp, #16
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f7fe f8ae 	bl	8006bbc <_printf_i>
 8008a60:	e7e4      	b.n	8008a2c <_vfiprintf_r+0x208>
 8008a62:	bf00      	nop
 8008a64:	0800b64c 	.word	0x0800b64c
 8008a68:	0800b66c 	.word	0x0800b66c
 8008a6c:	0800b62c 	.word	0x0800b62c
 8008a70:	0800b4d4 	.word	0x0800b4d4
 8008a74:	0800b4de 	.word	0x0800b4de
 8008a78:	08006675 	.word	0x08006675
 8008a7c:	080087ff 	.word	0x080087ff
 8008a80:	0800b4da 	.word	0x0800b4da

08008a84 <__swbuf_r>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	460e      	mov	r6, r1
 8008a88:	4614      	mov	r4, r2
 8008a8a:	4605      	mov	r5, r0
 8008a8c:	b118      	cbz	r0, 8008a96 <__swbuf_r+0x12>
 8008a8e:	6983      	ldr	r3, [r0, #24]
 8008a90:	b90b      	cbnz	r3, 8008a96 <__swbuf_r+0x12>
 8008a92:	f000 f9e7 	bl	8008e64 <__sinit>
 8008a96:	4b21      	ldr	r3, [pc, #132]	; (8008b1c <__swbuf_r+0x98>)
 8008a98:	429c      	cmp	r4, r3
 8008a9a:	d12b      	bne.n	8008af4 <__swbuf_r+0x70>
 8008a9c:	686c      	ldr	r4, [r5, #4]
 8008a9e:	69a3      	ldr	r3, [r4, #24]
 8008aa0:	60a3      	str	r3, [r4, #8]
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	071a      	lsls	r2, r3, #28
 8008aa6:	d52f      	bpl.n	8008b08 <__swbuf_r+0x84>
 8008aa8:	6923      	ldr	r3, [r4, #16]
 8008aaa:	b36b      	cbz	r3, 8008b08 <__swbuf_r+0x84>
 8008aac:	6923      	ldr	r3, [r4, #16]
 8008aae:	6820      	ldr	r0, [r4, #0]
 8008ab0:	1ac0      	subs	r0, r0, r3
 8008ab2:	6963      	ldr	r3, [r4, #20]
 8008ab4:	b2f6      	uxtb	r6, r6
 8008ab6:	4283      	cmp	r3, r0
 8008ab8:	4637      	mov	r7, r6
 8008aba:	dc04      	bgt.n	8008ac6 <__swbuf_r+0x42>
 8008abc:	4621      	mov	r1, r4
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f000 f93c 	bl	8008d3c <_fflush_r>
 8008ac4:	bb30      	cbnz	r0, 8008b14 <__swbuf_r+0x90>
 8008ac6:	68a3      	ldr	r3, [r4, #8]
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	60a3      	str	r3, [r4, #8]
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	6022      	str	r2, [r4, #0]
 8008ad2:	701e      	strb	r6, [r3, #0]
 8008ad4:	6963      	ldr	r3, [r4, #20]
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	4283      	cmp	r3, r0
 8008ada:	d004      	beq.n	8008ae6 <__swbuf_r+0x62>
 8008adc:	89a3      	ldrh	r3, [r4, #12]
 8008ade:	07db      	lsls	r3, r3, #31
 8008ae0:	d506      	bpl.n	8008af0 <__swbuf_r+0x6c>
 8008ae2:	2e0a      	cmp	r6, #10
 8008ae4:	d104      	bne.n	8008af0 <__swbuf_r+0x6c>
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4628      	mov	r0, r5
 8008aea:	f000 f927 	bl	8008d3c <_fflush_r>
 8008aee:	b988      	cbnz	r0, 8008b14 <__swbuf_r+0x90>
 8008af0:	4638      	mov	r0, r7
 8008af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008af4:	4b0a      	ldr	r3, [pc, #40]	; (8008b20 <__swbuf_r+0x9c>)
 8008af6:	429c      	cmp	r4, r3
 8008af8:	d101      	bne.n	8008afe <__swbuf_r+0x7a>
 8008afa:	68ac      	ldr	r4, [r5, #8]
 8008afc:	e7cf      	b.n	8008a9e <__swbuf_r+0x1a>
 8008afe:	4b09      	ldr	r3, [pc, #36]	; (8008b24 <__swbuf_r+0xa0>)
 8008b00:	429c      	cmp	r4, r3
 8008b02:	bf08      	it	eq
 8008b04:	68ec      	ldreq	r4, [r5, #12]
 8008b06:	e7ca      	b.n	8008a9e <__swbuf_r+0x1a>
 8008b08:	4621      	mov	r1, r4
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	f000 f81a 	bl	8008b44 <__swsetup_r>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	d0cb      	beq.n	8008aac <__swbuf_r+0x28>
 8008b14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008b18:	e7ea      	b.n	8008af0 <__swbuf_r+0x6c>
 8008b1a:	bf00      	nop
 8008b1c:	0800b64c 	.word	0x0800b64c
 8008b20:	0800b66c 	.word	0x0800b66c
 8008b24:	0800b62c 	.word	0x0800b62c

08008b28 <__ascii_wctomb>:
 8008b28:	b149      	cbz	r1, 8008b3e <__ascii_wctomb+0x16>
 8008b2a:	2aff      	cmp	r2, #255	; 0xff
 8008b2c:	bf85      	ittet	hi
 8008b2e:	238a      	movhi	r3, #138	; 0x8a
 8008b30:	6003      	strhi	r3, [r0, #0]
 8008b32:	700a      	strbls	r2, [r1, #0]
 8008b34:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008b38:	bf98      	it	ls
 8008b3a:	2001      	movls	r0, #1
 8008b3c:	4770      	bx	lr
 8008b3e:	4608      	mov	r0, r1
 8008b40:	4770      	bx	lr
	...

08008b44 <__swsetup_r>:
 8008b44:	4b32      	ldr	r3, [pc, #200]	; (8008c10 <__swsetup_r+0xcc>)
 8008b46:	b570      	push	{r4, r5, r6, lr}
 8008b48:	681d      	ldr	r5, [r3, #0]
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	b125      	cbz	r5, 8008b5a <__swsetup_r+0x16>
 8008b50:	69ab      	ldr	r3, [r5, #24]
 8008b52:	b913      	cbnz	r3, 8008b5a <__swsetup_r+0x16>
 8008b54:	4628      	mov	r0, r5
 8008b56:	f000 f985 	bl	8008e64 <__sinit>
 8008b5a:	4b2e      	ldr	r3, [pc, #184]	; (8008c14 <__swsetup_r+0xd0>)
 8008b5c:	429c      	cmp	r4, r3
 8008b5e:	d10f      	bne.n	8008b80 <__swsetup_r+0x3c>
 8008b60:	686c      	ldr	r4, [r5, #4]
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b68:	0719      	lsls	r1, r3, #28
 8008b6a:	d42c      	bmi.n	8008bc6 <__swsetup_r+0x82>
 8008b6c:	06dd      	lsls	r5, r3, #27
 8008b6e:	d411      	bmi.n	8008b94 <__swsetup_r+0x50>
 8008b70:	2309      	movs	r3, #9
 8008b72:	6033      	str	r3, [r6, #0]
 8008b74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b78:	81a3      	strh	r3, [r4, #12]
 8008b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b7e:	e03e      	b.n	8008bfe <__swsetup_r+0xba>
 8008b80:	4b25      	ldr	r3, [pc, #148]	; (8008c18 <__swsetup_r+0xd4>)
 8008b82:	429c      	cmp	r4, r3
 8008b84:	d101      	bne.n	8008b8a <__swsetup_r+0x46>
 8008b86:	68ac      	ldr	r4, [r5, #8]
 8008b88:	e7eb      	b.n	8008b62 <__swsetup_r+0x1e>
 8008b8a:	4b24      	ldr	r3, [pc, #144]	; (8008c1c <__swsetup_r+0xd8>)
 8008b8c:	429c      	cmp	r4, r3
 8008b8e:	bf08      	it	eq
 8008b90:	68ec      	ldreq	r4, [r5, #12]
 8008b92:	e7e6      	b.n	8008b62 <__swsetup_r+0x1e>
 8008b94:	0758      	lsls	r0, r3, #29
 8008b96:	d512      	bpl.n	8008bbe <__swsetup_r+0x7a>
 8008b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b9a:	b141      	cbz	r1, 8008bae <__swsetup_r+0x6a>
 8008b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ba0:	4299      	cmp	r1, r3
 8008ba2:	d002      	beq.n	8008baa <__swsetup_r+0x66>
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f7ff fb6f 	bl	8008288 <_free_r>
 8008baa:	2300      	movs	r3, #0
 8008bac:	6363      	str	r3, [r4, #52]	; 0x34
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	6063      	str	r3, [r4, #4]
 8008bba:	6923      	ldr	r3, [r4, #16]
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	89a3      	ldrh	r3, [r4, #12]
 8008bc0:	f043 0308 	orr.w	r3, r3, #8
 8008bc4:	81a3      	strh	r3, [r4, #12]
 8008bc6:	6923      	ldr	r3, [r4, #16]
 8008bc8:	b94b      	cbnz	r3, 8008bde <__swsetup_r+0x9a>
 8008bca:	89a3      	ldrh	r3, [r4, #12]
 8008bcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bd4:	d003      	beq.n	8008bde <__swsetup_r+0x9a>
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f000 fa07 	bl	8008fec <__smakebuf_r>
 8008bde:	89a0      	ldrh	r0, [r4, #12]
 8008be0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008be4:	f010 0301 	ands.w	r3, r0, #1
 8008be8:	d00a      	beq.n	8008c00 <__swsetup_r+0xbc>
 8008bea:	2300      	movs	r3, #0
 8008bec:	60a3      	str	r3, [r4, #8]
 8008bee:	6963      	ldr	r3, [r4, #20]
 8008bf0:	425b      	negs	r3, r3
 8008bf2:	61a3      	str	r3, [r4, #24]
 8008bf4:	6923      	ldr	r3, [r4, #16]
 8008bf6:	b943      	cbnz	r3, 8008c0a <__swsetup_r+0xc6>
 8008bf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008bfc:	d1ba      	bne.n	8008b74 <__swsetup_r+0x30>
 8008bfe:	bd70      	pop	{r4, r5, r6, pc}
 8008c00:	0781      	lsls	r1, r0, #30
 8008c02:	bf58      	it	pl
 8008c04:	6963      	ldrpl	r3, [r4, #20]
 8008c06:	60a3      	str	r3, [r4, #8]
 8008c08:	e7f4      	b.n	8008bf4 <__swsetup_r+0xb0>
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	e7f7      	b.n	8008bfe <__swsetup_r+0xba>
 8008c0e:	bf00      	nop
 8008c10:	20002028 	.word	0x20002028
 8008c14:	0800b64c 	.word	0x0800b64c
 8008c18:	0800b66c 	.word	0x0800b66c
 8008c1c:	0800b62c 	.word	0x0800b62c

08008c20 <abort>:
 8008c20:	b508      	push	{r3, lr}
 8008c22:	2006      	movs	r0, #6
 8008c24:	f000 fa52 	bl	80090cc <raise>
 8008c28:	2001      	movs	r0, #1
 8008c2a:	f7fb f839 	bl	8003ca0 <_exit>
	...

08008c30 <__sflush_r>:
 8008c30:	898a      	ldrh	r2, [r1, #12]
 8008c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c36:	4605      	mov	r5, r0
 8008c38:	0710      	lsls	r0, r2, #28
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	d458      	bmi.n	8008cf0 <__sflush_r+0xc0>
 8008c3e:	684b      	ldr	r3, [r1, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	dc05      	bgt.n	8008c50 <__sflush_r+0x20>
 8008c44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	dc02      	bgt.n	8008c50 <__sflush_r+0x20>
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c52:	2e00      	cmp	r6, #0
 8008c54:	d0f9      	beq.n	8008c4a <__sflush_r+0x1a>
 8008c56:	2300      	movs	r3, #0
 8008c58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c5c:	682f      	ldr	r7, [r5, #0]
 8008c5e:	602b      	str	r3, [r5, #0]
 8008c60:	d032      	beq.n	8008cc8 <__sflush_r+0x98>
 8008c62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	075a      	lsls	r2, r3, #29
 8008c68:	d505      	bpl.n	8008c76 <__sflush_r+0x46>
 8008c6a:	6863      	ldr	r3, [r4, #4]
 8008c6c:	1ac0      	subs	r0, r0, r3
 8008c6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c70:	b10b      	cbz	r3, 8008c76 <__sflush_r+0x46>
 8008c72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c74:	1ac0      	subs	r0, r0, r3
 8008c76:	2300      	movs	r3, #0
 8008c78:	4602      	mov	r2, r0
 8008c7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c7c:	6a21      	ldr	r1, [r4, #32]
 8008c7e:	4628      	mov	r0, r5
 8008c80:	47b0      	blx	r6
 8008c82:	1c43      	adds	r3, r0, #1
 8008c84:	89a3      	ldrh	r3, [r4, #12]
 8008c86:	d106      	bne.n	8008c96 <__sflush_r+0x66>
 8008c88:	6829      	ldr	r1, [r5, #0]
 8008c8a:	291d      	cmp	r1, #29
 8008c8c:	d82c      	bhi.n	8008ce8 <__sflush_r+0xb8>
 8008c8e:	4a2a      	ldr	r2, [pc, #168]	; (8008d38 <__sflush_r+0x108>)
 8008c90:	40ca      	lsrs	r2, r1
 8008c92:	07d6      	lsls	r6, r2, #31
 8008c94:	d528      	bpl.n	8008ce8 <__sflush_r+0xb8>
 8008c96:	2200      	movs	r2, #0
 8008c98:	6062      	str	r2, [r4, #4]
 8008c9a:	04d9      	lsls	r1, r3, #19
 8008c9c:	6922      	ldr	r2, [r4, #16]
 8008c9e:	6022      	str	r2, [r4, #0]
 8008ca0:	d504      	bpl.n	8008cac <__sflush_r+0x7c>
 8008ca2:	1c42      	adds	r2, r0, #1
 8008ca4:	d101      	bne.n	8008caa <__sflush_r+0x7a>
 8008ca6:	682b      	ldr	r3, [r5, #0]
 8008ca8:	b903      	cbnz	r3, 8008cac <__sflush_r+0x7c>
 8008caa:	6560      	str	r0, [r4, #84]	; 0x54
 8008cac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cae:	602f      	str	r7, [r5, #0]
 8008cb0:	2900      	cmp	r1, #0
 8008cb2:	d0ca      	beq.n	8008c4a <__sflush_r+0x1a>
 8008cb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cb8:	4299      	cmp	r1, r3
 8008cba:	d002      	beq.n	8008cc2 <__sflush_r+0x92>
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	f7ff fae3 	bl	8008288 <_free_r>
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	6360      	str	r0, [r4, #52]	; 0x34
 8008cc6:	e7c1      	b.n	8008c4c <__sflush_r+0x1c>
 8008cc8:	6a21      	ldr	r1, [r4, #32]
 8008cca:	2301      	movs	r3, #1
 8008ccc:	4628      	mov	r0, r5
 8008cce:	47b0      	blx	r6
 8008cd0:	1c41      	adds	r1, r0, #1
 8008cd2:	d1c7      	bne.n	8008c64 <__sflush_r+0x34>
 8008cd4:	682b      	ldr	r3, [r5, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0c4      	beq.n	8008c64 <__sflush_r+0x34>
 8008cda:	2b1d      	cmp	r3, #29
 8008cdc:	d001      	beq.n	8008ce2 <__sflush_r+0xb2>
 8008cde:	2b16      	cmp	r3, #22
 8008ce0:	d101      	bne.n	8008ce6 <__sflush_r+0xb6>
 8008ce2:	602f      	str	r7, [r5, #0]
 8008ce4:	e7b1      	b.n	8008c4a <__sflush_r+0x1a>
 8008ce6:	89a3      	ldrh	r3, [r4, #12]
 8008ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cec:	81a3      	strh	r3, [r4, #12]
 8008cee:	e7ad      	b.n	8008c4c <__sflush_r+0x1c>
 8008cf0:	690f      	ldr	r7, [r1, #16]
 8008cf2:	2f00      	cmp	r7, #0
 8008cf4:	d0a9      	beq.n	8008c4a <__sflush_r+0x1a>
 8008cf6:	0793      	lsls	r3, r2, #30
 8008cf8:	680e      	ldr	r6, [r1, #0]
 8008cfa:	bf08      	it	eq
 8008cfc:	694b      	ldreq	r3, [r1, #20]
 8008cfe:	600f      	str	r7, [r1, #0]
 8008d00:	bf18      	it	ne
 8008d02:	2300      	movne	r3, #0
 8008d04:	eba6 0807 	sub.w	r8, r6, r7
 8008d08:	608b      	str	r3, [r1, #8]
 8008d0a:	f1b8 0f00 	cmp.w	r8, #0
 8008d0e:	dd9c      	ble.n	8008c4a <__sflush_r+0x1a>
 8008d10:	6a21      	ldr	r1, [r4, #32]
 8008d12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d14:	4643      	mov	r3, r8
 8008d16:	463a      	mov	r2, r7
 8008d18:	4628      	mov	r0, r5
 8008d1a:	47b0      	blx	r6
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	dc06      	bgt.n	8008d2e <__sflush_r+0xfe>
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d26:	81a3      	strh	r3, [r4, #12]
 8008d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d2c:	e78e      	b.n	8008c4c <__sflush_r+0x1c>
 8008d2e:	4407      	add	r7, r0
 8008d30:	eba8 0800 	sub.w	r8, r8, r0
 8008d34:	e7e9      	b.n	8008d0a <__sflush_r+0xda>
 8008d36:	bf00      	nop
 8008d38:	20400001 	.word	0x20400001

08008d3c <_fflush_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	690b      	ldr	r3, [r1, #16]
 8008d40:	4605      	mov	r5, r0
 8008d42:	460c      	mov	r4, r1
 8008d44:	b913      	cbnz	r3, 8008d4c <_fflush_r+0x10>
 8008d46:	2500      	movs	r5, #0
 8008d48:	4628      	mov	r0, r5
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	b118      	cbz	r0, 8008d56 <_fflush_r+0x1a>
 8008d4e:	6983      	ldr	r3, [r0, #24]
 8008d50:	b90b      	cbnz	r3, 8008d56 <_fflush_r+0x1a>
 8008d52:	f000 f887 	bl	8008e64 <__sinit>
 8008d56:	4b14      	ldr	r3, [pc, #80]	; (8008da8 <_fflush_r+0x6c>)
 8008d58:	429c      	cmp	r4, r3
 8008d5a:	d11b      	bne.n	8008d94 <_fflush_r+0x58>
 8008d5c:	686c      	ldr	r4, [r5, #4]
 8008d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0ef      	beq.n	8008d46 <_fflush_r+0xa>
 8008d66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d68:	07d0      	lsls	r0, r2, #31
 8008d6a:	d404      	bmi.n	8008d76 <_fflush_r+0x3a>
 8008d6c:	0599      	lsls	r1, r3, #22
 8008d6e:	d402      	bmi.n	8008d76 <_fflush_r+0x3a>
 8008d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d72:	f000 f915 	bl	8008fa0 <__retarget_lock_acquire_recursive>
 8008d76:	4628      	mov	r0, r5
 8008d78:	4621      	mov	r1, r4
 8008d7a:	f7ff ff59 	bl	8008c30 <__sflush_r>
 8008d7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d80:	07da      	lsls	r2, r3, #31
 8008d82:	4605      	mov	r5, r0
 8008d84:	d4e0      	bmi.n	8008d48 <_fflush_r+0xc>
 8008d86:	89a3      	ldrh	r3, [r4, #12]
 8008d88:	059b      	lsls	r3, r3, #22
 8008d8a:	d4dd      	bmi.n	8008d48 <_fflush_r+0xc>
 8008d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d8e:	f000 f908 	bl	8008fa2 <__retarget_lock_release_recursive>
 8008d92:	e7d9      	b.n	8008d48 <_fflush_r+0xc>
 8008d94:	4b05      	ldr	r3, [pc, #20]	; (8008dac <_fflush_r+0x70>)
 8008d96:	429c      	cmp	r4, r3
 8008d98:	d101      	bne.n	8008d9e <_fflush_r+0x62>
 8008d9a:	68ac      	ldr	r4, [r5, #8]
 8008d9c:	e7df      	b.n	8008d5e <_fflush_r+0x22>
 8008d9e:	4b04      	ldr	r3, [pc, #16]	; (8008db0 <_fflush_r+0x74>)
 8008da0:	429c      	cmp	r4, r3
 8008da2:	bf08      	it	eq
 8008da4:	68ec      	ldreq	r4, [r5, #12]
 8008da6:	e7da      	b.n	8008d5e <_fflush_r+0x22>
 8008da8:	0800b64c 	.word	0x0800b64c
 8008dac:	0800b66c 	.word	0x0800b66c
 8008db0:	0800b62c 	.word	0x0800b62c

08008db4 <std>:
 8008db4:	2300      	movs	r3, #0
 8008db6:	b510      	push	{r4, lr}
 8008db8:	4604      	mov	r4, r0
 8008dba:	e9c0 3300 	strd	r3, r3, [r0]
 8008dbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dc2:	6083      	str	r3, [r0, #8]
 8008dc4:	8181      	strh	r1, [r0, #12]
 8008dc6:	6643      	str	r3, [r0, #100]	; 0x64
 8008dc8:	81c2      	strh	r2, [r0, #14]
 8008dca:	6183      	str	r3, [r0, #24]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	2208      	movs	r2, #8
 8008dd0:	305c      	adds	r0, #92	; 0x5c
 8008dd2:	f7fd fba7 	bl	8006524 <memset>
 8008dd6:	4b05      	ldr	r3, [pc, #20]	; (8008dec <std+0x38>)
 8008dd8:	6263      	str	r3, [r4, #36]	; 0x24
 8008dda:	4b05      	ldr	r3, [pc, #20]	; (8008df0 <std+0x3c>)
 8008ddc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008dde:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <std+0x40>)
 8008de0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008de2:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <std+0x44>)
 8008de4:	6224      	str	r4, [r4, #32]
 8008de6:	6323      	str	r3, [r4, #48]	; 0x30
 8008de8:	bd10      	pop	{r4, pc}
 8008dea:	bf00      	nop
 8008dec:	08009105 	.word	0x08009105
 8008df0:	08009127 	.word	0x08009127
 8008df4:	0800915f 	.word	0x0800915f
 8008df8:	08009183 	.word	0x08009183

08008dfc <_cleanup_r>:
 8008dfc:	4901      	ldr	r1, [pc, #4]	; (8008e04 <_cleanup_r+0x8>)
 8008dfe:	f000 b8af 	b.w	8008f60 <_fwalk_reent>
 8008e02:	bf00      	nop
 8008e04:	08008d3d 	.word	0x08008d3d

08008e08 <__sfmoreglue>:
 8008e08:	b570      	push	{r4, r5, r6, lr}
 8008e0a:	1e4a      	subs	r2, r1, #1
 8008e0c:	2568      	movs	r5, #104	; 0x68
 8008e0e:	4355      	muls	r5, r2
 8008e10:	460e      	mov	r6, r1
 8008e12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e16:	f7ff fa87 	bl	8008328 <_malloc_r>
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	b140      	cbz	r0, 8008e30 <__sfmoreglue+0x28>
 8008e1e:	2100      	movs	r1, #0
 8008e20:	e9c0 1600 	strd	r1, r6, [r0]
 8008e24:	300c      	adds	r0, #12
 8008e26:	60a0      	str	r0, [r4, #8]
 8008e28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e2c:	f7fd fb7a 	bl	8006524 <memset>
 8008e30:	4620      	mov	r0, r4
 8008e32:	bd70      	pop	{r4, r5, r6, pc}

08008e34 <__sfp_lock_acquire>:
 8008e34:	4801      	ldr	r0, [pc, #4]	; (8008e3c <__sfp_lock_acquire+0x8>)
 8008e36:	f000 b8b3 	b.w	8008fa0 <__retarget_lock_acquire_recursive>
 8008e3a:	bf00      	nop
 8008e3c:	20006500 	.word	0x20006500

08008e40 <__sfp_lock_release>:
 8008e40:	4801      	ldr	r0, [pc, #4]	; (8008e48 <__sfp_lock_release+0x8>)
 8008e42:	f000 b8ae 	b.w	8008fa2 <__retarget_lock_release_recursive>
 8008e46:	bf00      	nop
 8008e48:	20006500 	.word	0x20006500

08008e4c <__sinit_lock_acquire>:
 8008e4c:	4801      	ldr	r0, [pc, #4]	; (8008e54 <__sinit_lock_acquire+0x8>)
 8008e4e:	f000 b8a7 	b.w	8008fa0 <__retarget_lock_acquire_recursive>
 8008e52:	bf00      	nop
 8008e54:	200064fb 	.word	0x200064fb

08008e58 <__sinit_lock_release>:
 8008e58:	4801      	ldr	r0, [pc, #4]	; (8008e60 <__sinit_lock_release+0x8>)
 8008e5a:	f000 b8a2 	b.w	8008fa2 <__retarget_lock_release_recursive>
 8008e5e:	bf00      	nop
 8008e60:	200064fb 	.word	0x200064fb

08008e64 <__sinit>:
 8008e64:	b510      	push	{r4, lr}
 8008e66:	4604      	mov	r4, r0
 8008e68:	f7ff fff0 	bl	8008e4c <__sinit_lock_acquire>
 8008e6c:	69a3      	ldr	r3, [r4, #24]
 8008e6e:	b11b      	cbz	r3, 8008e78 <__sinit+0x14>
 8008e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e74:	f7ff bff0 	b.w	8008e58 <__sinit_lock_release>
 8008e78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e7c:	6523      	str	r3, [r4, #80]	; 0x50
 8008e7e:	4b13      	ldr	r3, [pc, #76]	; (8008ecc <__sinit+0x68>)
 8008e80:	4a13      	ldr	r2, [pc, #76]	; (8008ed0 <__sinit+0x6c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e86:	42a3      	cmp	r3, r4
 8008e88:	bf04      	itt	eq
 8008e8a:	2301      	moveq	r3, #1
 8008e8c:	61a3      	streq	r3, [r4, #24]
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 f820 	bl	8008ed4 <__sfp>
 8008e94:	6060      	str	r0, [r4, #4]
 8008e96:	4620      	mov	r0, r4
 8008e98:	f000 f81c 	bl	8008ed4 <__sfp>
 8008e9c:	60a0      	str	r0, [r4, #8]
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f000 f818 	bl	8008ed4 <__sfp>
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	60e0      	str	r0, [r4, #12]
 8008ea8:	2104      	movs	r1, #4
 8008eaa:	6860      	ldr	r0, [r4, #4]
 8008eac:	f7ff ff82 	bl	8008db4 <std>
 8008eb0:	68a0      	ldr	r0, [r4, #8]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	2109      	movs	r1, #9
 8008eb6:	f7ff ff7d 	bl	8008db4 <std>
 8008eba:	68e0      	ldr	r0, [r4, #12]
 8008ebc:	2202      	movs	r2, #2
 8008ebe:	2112      	movs	r1, #18
 8008ec0:	f7ff ff78 	bl	8008db4 <std>
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	61a3      	str	r3, [r4, #24]
 8008ec8:	e7d2      	b.n	8008e70 <__sinit+0xc>
 8008eca:	bf00      	nop
 8008ecc:	0800b2ac 	.word	0x0800b2ac
 8008ed0:	08008dfd 	.word	0x08008dfd

08008ed4 <__sfp>:
 8008ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed6:	4607      	mov	r7, r0
 8008ed8:	f7ff ffac 	bl	8008e34 <__sfp_lock_acquire>
 8008edc:	4b1e      	ldr	r3, [pc, #120]	; (8008f58 <__sfp+0x84>)
 8008ede:	681e      	ldr	r6, [r3, #0]
 8008ee0:	69b3      	ldr	r3, [r6, #24]
 8008ee2:	b913      	cbnz	r3, 8008eea <__sfp+0x16>
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f7ff ffbd 	bl	8008e64 <__sinit>
 8008eea:	3648      	adds	r6, #72	; 0x48
 8008eec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	d503      	bpl.n	8008efc <__sfp+0x28>
 8008ef4:	6833      	ldr	r3, [r6, #0]
 8008ef6:	b30b      	cbz	r3, 8008f3c <__sfp+0x68>
 8008ef8:	6836      	ldr	r6, [r6, #0]
 8008efa:	e7f7      	b.n	8008eec <__sfp+0x18>
 8008efc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f00:	b9d5      	cbnz	r5, 8008f38 <__sfp+0x64>
 8008f02:	4b16      	ldr	r3, [pc, #88]	; (8008f5c <__sfp+0x88>)
 8008f04:	60e3      	str	r3, [r4, #12]
 8008f06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f0a:	6665      	str	r5, [r4, #100]	; 0x64
 8008f0c:	f000 f847 	bl	8008f9e <__retarget_lock_init_recursive>
 8008f10:	f7ff ff96 	bl	8008e40 <__sfp_lock_release>
 8008f14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f1c:	6025      	str	r5, [r4, #0]
 8008f1e:	61a5      	str	r5, [r4, #24]
 8008f20:	2208      	movs	r2, #8
 8008f22:	4629      	mov	r1, r5
 8008f24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f28:	f7fd fafc 	bl	8006524 <memset>
 8008f2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f34:	4620      	mov	r0, r4
 8008f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f38:	3468      	adds	r4, #104	; 0x68
 8008f3a:	e7d9      	b.n	8008ef0 <__sfp+0x1c>
 8008f3c:	2104      	movs	r1, #4
 8008f3e:	4638      	mov	r0, r7
 8008f40:	f7ff ff62 	bl	8008e08 <__sfmoreglue>
 8008f44:	4604      	mov	r4, r0
 8008f46:	6030      	str	r0, [r6, #0]
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	d1d5      	bne.n	8008ef8 <__sfp+0x24>
 8008f4c:	f7ff ff78 	bl	8008e40 <__sfp_lock_release>
 8008f50:	230c      	movs	r3, #12
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	e7ee      	b.n	8008f34 <__sfp+0x60>
 8008f56:	bf00      	nop
 8008f58:	0800b2ac 	.word	0x0800b2ac
 8008f5c:	ffff0001 	.word	0xffff0001

08008f60 <_fwalk_reent>:
 8008f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f64:	4606      	mov	r6, r0
 8008f66:	4688      	mov	r8, r1
 8008f68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f6c:	2700      	movs	r7, #0
 8008f6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f72:	f1b9 0901 	subs.w	r9, r9, #1
 8008f76:	d505      	bpl.n	8008f84 <_fwalk_reent+0x24>
 8008f78:	6824      	ldr	r4, [r4, #0]
 8008f7a:	2c00      	cmp	r4, #0
 8008f7c:	d1f7      	bne.n	8008f6e <_fwalk_reent+0xe>
 8008f7e:	4638      	mov	r0, r7
 8008f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f84:	89ab      	ldrh	r3, [r5, #12]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d907      	bls.n	8008f9a <_fwalk_reent+0x3a>
 8008f8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	d003      	beq.n	8008f9a <_fwalk_reent+0x3a>
 8008f92:	4629      	mov	r1, r5
 8008f94:	4630      	mov	r0, r6
 8008f96:	47c0      	blx	r8
 8008f98:	4307      	orrs	r7, r0
 8008f9a:	3568      	adds	r5, #104	; 0x68
 8008f9c:	e7e9      	b.n	8008f72 <_fwalk_reent+0x12>

08008f9e <__retarget_lock_init_recursive>:
 8008f9e:	4770      	bx	lr

08008fa0 <__retarget_lock_acquire_recursive>:
 8008fa0:	4770      	bx	lr

08008fa2 <__retarget_lock_release_recursive>:
 8008fa2:	4770      	bx	lr

08008fa4 <__swhatbuf_r>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	460e      	mov	r6, r1
 8008fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fac:	2900      	cmp	r1, #0
 8008fae:	b096      	sub	sp, #88	; 0x58
 8008fb0:	4614      	mov	r4, r2
 8008fb2:	461d      	mov	r5, r3
 8008fb4:	da07      	bge.n	8008fc6 <__swhatbuf_r+0x22>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	602b      	str	r3, [r5, #0]
 8008fba:	89b3      	ldrh	r3, [r6, #12]
 8008fbc:	061a      	lsls	r2, r3, #24
 8008fbe:	d410      	bmi.n	8008fe2 <__swhatbuf_r+0x3e>
 8008fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fc4:	e00e      	b.n	8008fe4 <__swhatbuf_r+0x40>
 8008fc6:	466a      	mov	r2, sp
 8008fc8:	f000 f902 	bl	80091d0 <_fstat_r>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	dbf2      	blt.n	8008fb6 <__swhatbuf_r+0x12>
 8008fd0:	9a01      	ldr	r2, [sp, #4]
 8008fd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008fd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008fda:	425a      	negs	r2, r3
 8008fdc:	415a      	adcs	r2, r3
 8008fde:	602a      	str	r2, [r5, #0]
 8008fe0:	e7ee      	b.n	8008fc0 <__swhatbuf_r+0x1c>
 8008fe2:	2340      	movs	r3, #64	; 0x40
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	6023      	str	r3, [r4, #0]
 8008fe8:	b016      	add	sp, #88	; 0x58
 8008fea:	bd70      	pop	{r4, r5, r6, pc}

08008fec <__smakebuf_r>:
 8008fec:	898b      	ldrh	r3, [r1, #12]
 8008fee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ff0:	079d      	lsls	r5, r3, #30
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	d507      	bpl.n	8009008 <__smakebuf_r+0x1c>
 8008ff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	6123      	str	r3, [r4, #16]
 8009000:	2301      	movs	r3, #1
 8009002:	6163      	str	r3, [r4, #20]
 8009004:	b002      	add	sp, #8
 8009006:	bd70      	pop	{r4, r5, r6, pc}
 8009008:	ab01      	add	r3, sp, #4
 800900a:	466a      	mov	r2, sp
 800900c:	f7ff ffca 	bl	8008fa4 <__swhatbuf_r>
 8009010:	9900      	ldr	r1, [sp, #0]
 8009012:	4605      	mov	r5, r0
 8009014:	4630      	mov	r0, r6
 8009016:	f7ff f987 	bl	8008328 <_malloc_r>
 800901a:	b948      	cbnz	r0, 8009030 <__smakebuf_r+0x44>
 800901c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009020:	059a      	lsls	r2, r3, #22
 8009022:	d4ef      	bmi.n	8009004 <__smakebuf_r+0x18>
 8009024:	f023 0303 	bic.w	r3, r3, #3
 8009028:	f043 0302 	orr.w	r3, r3, #2
 800902c:	81a3      	strh	r3, [r4, #12]
 800902e:	e7e3      	b.n	8008ff8 <__smakebuf_r+0xc>
 8009030:	4b0d      	ldr	r3, [pc, #52]	; (8009068 <__smakebuf_r+0x7c>)
 8009032:	62b3      	str	r3, [r6, #40]	; 0x28
 8009034:	89a3      	ldrh	r3, [r4, #12]
 8009036:	6020      	str	r0, [r4, #0]
 8009038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800903c:	81a3      	strh	r3, [r4, #12]
 800903e:	9b00      	ldr	r3, [sp, #0]
 8009040:	6163      	str	r3, [r4, #20]
 8009042:	9b01      	ldr	r3, [sp, #4]
 8009044:	6120      	str	r0, [r4, #16]
 8009046:	b15b      	cbz	r3, 8009060 <__smakebuf_r+0x74>
 8009048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800904c:	4630      	mov	r0, r6
 800904e:	f000 f8d1 	bl	80091f4 <_isatty_r>
 8009052:	b128      	cbz	r0, 8009060 <__smakebuf_r+0x74>
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	f023 0303 	bic.w	r3, r3, #3
 800905a:	f043 0301 	orr.w	r3, r3, #1
 800905e:	81a3      	strh	r3, [r4, #12]
 8009060:	89a0      	ldrh	r0, [r4, #12]
 8009062:	4305      	orrs	r5, r0
 8009064:	81a5      	strh	r5, [r4, #12]
 8009066:	e7cd      	b.n	8009004 <__smakebuf_r+0x18>
 8009068:	08008dfd 	.word	0x08008dfd

0800906c <_malloc_usable_size_r>:
 800906c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009070:	1f18      	subs	r0, r3, #4
 8009072:	2b00      	cmp	r3, #0
 8009074:	bfbc      	itt	lt
 8009076:	580b      	ldrlt	r3, [r1, r0]
 8009078:	18c0      	addlt	r0, r0, r3
 800907a:	4770      	bx	lr

0800907c <_raise_r>:
 800907c:	291f      	cmp	r1, #31
 800907e:	b538      	push	{r3, r4, r5, lr}
 8009080:	4604      	mov	r4, r0
 8009082:	460d      	mov	r5, r1
 8009084:	d904      	bls.n	8009090 <_raise_r+0x14>
 8009086:	2316      	movs	r3, #22
 8009088:	6003      	str	r3, [r0, #0]
 800908a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009092:	b112      	cbz	r2, 800909a <_raise_r+0x1e>
 8009094:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009098:	b94b      	cbnz	r3, 80090ae <_raise_r+0x32>
 800909a:	4620      	mov	r0, r4
 800909c:	f000 f830 	bl	8009100 <_getpid_r>
 80090a0:	462a      	mov	r2, r5
 80090a2:	4601      	mov	r1, r0
 80090a4:	4620      	mov	r0, r4
 80090a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090aa:	f000 b817 	b.w	80090dc <_kill_r>
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d00a      	beq.n	80090c8 <_raise_r+0x4c>
 80090b2:	1c59      	adds	r1, r3, #1
 80090b4:	d103      	bne.n	80090be <_raise_r+0x42>
 80090b6:	2316      	movs	r3, #22
 80090b8:	6003      	str	r3, [r0, #0]
 80090ba:	2001      	movs	r0, #1
 80090bc:	e7e7      	b.n	800908e <_raise_r+0x12>
 80090be:	2400      	movs	r4, #0
 80090c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090c4:	4628      	mov	r0, r5
 80090c6:	4798      	blx	r3
 80090c8:	2000      	movs	r0, #0
 80090ca:	e7e0      	b.n	800908e <_raise_r+0x12>

080090cc <raise>:
 80090cc:	4b02      	ldr	r3, [pc, #8]	; (80090d8 <raise+0xc>)
 80090ce:	4601      	mov	r1, r0
 80090d0:	6818      	ldr	r0, [r3, #0]
 80090d2:	f7ff bfd3 	b.w	800907c <_raise_r>
 80090d6:	bf00      	nop
 80090d8:	20002028 	.word	0x20002028

080090dc <_kill_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4d07      	ldr	r5, [pc, #28]	; (80090fc <_kill_r+0x20>)
 80090e0:	2300      	movs	r3, #0
 80090e2:	4604      	mov	r4, r0
 80090e4:	4608      	mov	r0, r1
 80090e6:	4611      	mov	r1, r2
 80090e8:	602b      	str	r3, [r5, #0]
 80090ea:	f7fa fdd1 	bl	8003c90 <_kill>
 80090ee:	1c43      	adds	r3, r0, #1
 80090f0:	d102      	bne.n	80090f8 <_kill_r+0x1c>
 80090f2:	682b      	ldr	r3, [r5, #0]
 80090f4:	b103      	cbz	r3, 80090f8 <_kill_r+0x1c>
 80090f6:	6023      	str	r3, [r4, #0]
 80090f8:	bd38      	pop	{r3, r4, r5, pc}
 80090fa:	bf00      	nop
 80090fc:	200064f4 	.word	0x200064f4

08009100 <_getpid_r>:
 8009100:	f7fa bdc4 	b.w	8003c8c <_getpid>

08009104 <__sread>:
 8009104:	b510      	push	{r4, lr}
 8009106:	460c      	mov	r4, r1
 8009108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800910c:	f000 f894 	bl	8009238 <_read_r>
 8009110:	2800      	cmp	r0, #0
 8009112:	bfab      	itete	ge
 8009114:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009116:	89a3      	ldrhlt	r3, [r4, #12]
 8009118:	181b      	addge	r3, r3, r0
 800911a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800911e:	bfac      	ite	ge
 8009120:	6563      	strge	r3, [r4, #84]	; 0x54
 8009122:	81a3      	strhlt	r3, [r4, #12]
 8009124:	bd10      	pop	{r4, pc}

08009126 <__swrite>:
 8009126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800912a:	461f      	mov	r7, r3
 800912c:	898b      	ldrh	r3, [r1, #12]
 800912e:	05db      	lsls	r3, r3, #23
 8009130:	4605      	mov	r5, r0
 8009132:	460c      	mov	r4, r1
 8009134:	4616      	mov	r6, r2
 8009136:	d505      	bpl.n	8009144 <__swrite+0x1e>
 8009138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800913c:	2302      	movs	r3, #2
 800913e:	2200      	movs	r2, #0
 8009140:	f000 f868 	bl	8009214 <_lseek_r>
 8009144:	89a3      	ldrh	r3, [r4, #12]
 8009146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800914a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800914e:	81a3      	strh	r3, [r4, #12]
 8009150:	4632      	mov	r2, r6
 8009152:	463b      	mov	r3, r7
 8009154:	4628      	mov	r0, r5
 8009156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800915a:	f000 b817 	b.w	800918c <_write_r>

0800915e <__sseek>:
 800915e:	b510      	push	{r4, lr}
 8009160:	460c      	mov	r4, r1
 8009162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009166:	f000 f855 	bl	8009214 <_lseek_r>
 800916a:	1c43      	adds	r3, r0, #1
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	bf15      	itete	ne
 8009170:	6560      	strne	r0, [r4, #84]	; 0x54
 8009172:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009176:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800917a:	81a3      	strheq	r3, [r4, #12]
 800917c:	bf18      	it	ne
 800917e:	81a3      	strhne	r3, [r4, #12]
 8009180:	bd10      	pop	{r4, pc}

08009182 <__sclose>:
 8009182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009186:	f000 b813 	b.w	80091b0 <_close_r>
	...

0800918c <_write_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4d07      	ldr	r5, [pc, #28]	; (80091ac <_write_r+0x20>)
 8009190:	4604      	mov	r4, r0
 8009192:	4608      	mov	r0, r1
 8009194:	4611      	mov	r1, r2
 8009196:	2200      	movs	r2, #0
 8009198:	602a      	str	r2, [r5, #0]
 800919a:	461a      	mov	r2, r3
 800919c:	f7fa fd94 	bl	8003cc8 <_write>
 80091a0:	1c43      	adds	r3, r0, #1
 80091a2:	d102      	bne.n	80091aa <_write_r+0x1e>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	b103      	cbz	r3, 80091aa <_write_r+0x1e>
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	bd38      	pop	{r3, r4, r5, pc}
 80091ac:	200064f4 	.word	0x200064f4

080091b0 <_close_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	4d06      	ldr	r5, [pc, #24]	; (80091cc <_close_r+0x1c>)
 80091b4:	2300      	movs	r3, #0
 80091b6:	4604      	mov	r4, r0
 80091b8:	4608      	mov	r0, r1
 80091ba:	602b      	str	r3, [r5, #0]
 80091bc:	f7fa fd92 	bl	8003ce4 <_close>
 80091c0:	1c43      	adds	r3, r0, #1
 80091c2:	d102      	bne.n	80091ca <_close_r+0x1a>
 80091c4:	682b      	ldr	r3, [r5, #0]
 80091c6:	b103      	cbz	r3, 80091ca <_close_r+0x1a>
 80091c8:	6023      	str	r3, [r4, #0]
 80091ca:	bd38      	pop	{r3, r4, r5, pc}
 80091cc:	200064f4 	.word	0x200064f4

080091d0 <_fstat_r>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	4d07      	ldr	r5, [pc, #28]	; (80091f0 <_fstat_r+0x20>)
 80091d4:	2300      	movs	r3, #0
 80091d6:	4604      	mov	r4, r0
 80091d8:	4608      	mov	r0, r1
 80091da:	4611      	mov	r1, r2
 80091dc:	602b      	str	r3, [r5, #0]
 80091de:	f7fa fd85 	bl	8003cec <_fstat>
 80091e2:	1c43      	adds	r3, r0, #1
 80091e4:	d102      	bne.n	80091ec <_fstat_r+0x1c>
 80091e6:	682b      	ldr	r3, [r5, #0]
 80091e8:	b103      	cbz	r3, 80091ec <_fstat_r+0x1c>
 80091ea:	6023      	str	r3, [r4, #0]
 80091ec:	bd38      	pop	{r3, r4, r5, pc}
 80091ee:	bf00      	nop
 80091f0:	200064f4 	.word	0x200064f4

080091f4 <_isatty_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d06      	ldr	r5, [pc, #24]	; (8009210 <_isatty_r+0x1c>)
 80091f8:	2300      	movs	r3, #0
 80091fa:	4604      	mov	r4, r0
 80091fc:	4608      	mov	r0, r1
 80091fe:	602b      	str	r3, [r5, #0]
 8009200:	f7fa fd7a 	bl	8003cf8 <_isatty>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	d102      	bne.n	800920e <_isatty_r+0x1a>
 8009208:	682b      	ldr	r3, [r5, #0]
 800920a:	b103      	cbz	r3, 800920e <_isatty_r+0x1a>
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	200064f4 	.word	0x200064f4

08009214 <_lseek_r>:
 8009214:	b538      	push	{r3, r4, r5, lr}
 8009216:	4d07      	ldr	r5, [pc, #28]	; (8009234 <_lseek_r+0x20>)
 8009218:	4604      	mov	r4, r0
 800921a:	4608      	mov	r0, r1
 800921c:	4611      	mov	r1, r2
 800921e:	2200      	movs	r2, #0
 8009220:	602a      	str	r2, [r5, #0]
 8009222:	461a      	mov	r2, r3
 8009224:	f7fa fd6a 	bl	8003cfc <_lseek>
 8009228:	1c43      	adds	r3, r0, #1
 800922a:	d102      	bne.n	8009232 <_lseek_r+0x1e>
 800922c:	682b      	ldr	r3, [r5, #0]
 800922e:	b103      	cbz	r3, 8009232 <_lseek_r+0x1e>
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	bd38      	pop	{r3, r4, r5, pc}
 8009234:	200064f4 	.word	0x200064f4

08009238 <_read_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	4d07      	ldr	r5, [pc, #28]	; (8009258 <_read_r+0x20>)
 800923c:	4604      	mov	r4, r0
 800923e:	4608      	mov	r0, r1
 8009240:	4611      	mov	r1, r2
 8009242:	2200      	movs	r2, #0
 8009244:	602a      	str	r2, [r5, #0]
 8009246:	461a      	mov	r2, r3
 8009248:	f7fa fd30 	bl	8003cac <_read>
 800924c:	1c43      	adds	r3, r0, #1
 800924e:	d102      	bne.n	8009256 <_read_r+0x1e>
 8009250:	682b      	ldr	r3, [r5, #0]
 8009252:	b103      	cbz	r3, 8009256 <_read_r+0x1e>
 8009254:	6023      	str	r3, [r4, #0]
 8009256:	bd38      	pop	{r3, r4, r5, pc}
 8009258:	200064f4 	.word	0x200064f4
 800925c:	00000000 	.word	0x00000000

08009260 <cos>:
 8009260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009262:	ec53 2b10 	vmov	r2, r3, d0
 8009266:	4824      	ldr	r0, [pc, #144]	; (80092f8 <cos+0x98>)
 8009268:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800926c:	4281      	cmp	r1, r0
 800926e:	dc06      	bgt.n	800927e <cos+0x1e>
 8009270:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80092f0 <cos+0x90>
 8009274:	f000 ffc0 	bl	800a1f8 <__kernel_cos>
 8009278:	ec51 0b10 	vmov	r0, r1, d0
 800927c:	e007      	b.n	800928e <cos+0x2e>
 800927e:	481f      	ldr	r0, [pc, #124]	; (80092fc <cos+0x9c>)
 8009280:	4281      	cmp	r1, r0
 8009282:	dd09      	ble.n	8009298 <cos+0x38>
 8009284:	ee10 0a10 	vmov	r0, s0
 8009288:	4619      	mov	r1, r3
 800928a:	f7f7 f805 	bl	8000298 <__aeabi_dsub>
 800928e:	ec41 0b10 	vmov	d0, r0, r1
 8009292:	b005      	add	sp, #20
 8009294:	f85d fb04 	ldr.w	pc, [sp], #4
 8009298:	4668      	mov	r0, sp
 800929a:	f000 fced 	bl	8009c78 <__ieee754_rem_pio2>
 800929e:	f000 0003 	and.w	r0, r0, #3
 80092a2:	2801      	cmp	r0, #1
 80092a4:	d007      	beq.n	80092b6 <cos+0x56>
 80092a6:	2802      	cmp	r0, #2
 80092a8:	d012      	beq.n	80092d0 <cos+0x70>
 80092aa:	b9c0      	cbnz	r0, 80092de <cos+0x7e>
 80092ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092b0:	ed9d 0b00 	vldr	d0, [sp]
 80092b4:	e7de      	b.n	8009274 <cos+0x14>
 80092b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092ba:	ed9d 0b00 	vldr	d0, [sp]
 80092be:	f001 fba3 	bl	800aa08 <__kernel_sin>
 80092c2:	ec53 2b10 	vmov	r2, r3, d0
 80092c6:	ee10 0a10 	vmov	r0, s0
 80092ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80092ce:	e7de      	b.n	800928e <cos+0x2e>
 80092d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092d4:	ed9d 0b00 	vldr	d0, [sp]
 80092d8:	f000 ff8e 	bl	800a1f8 <__kernel_cos>
 80092dc:	e7f1      	b.n	80092c2 <cos+0x62>
 80092de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092e2:	ed9d 0b00 	vldr	d0, [sp]
 80092e6:	2001      	movs	r0, #1
 80092e8:	f001 fb8e 	bl	800aa08 <__kernel_sin>
 80092ec:	e7c4      	b.n	8009278 <cos+0x18>
 80092ee:	bf00      	nop
	...
 80092f8:	3fe921fb 	.word	0x3fe921fb
 80092fc:	7fefffff 	.word	0x7fefffff

08009300 <sin>:
 8009300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009302:	ec53 2b10 	vmov	r2, r3, d0
 8009306:	4826      	ldr	r0, [pc, #152]	; (80093a0 <sin+0xa0>)
 8009308:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800930c:	4281      	cmp	r1, r0
 800930e:	dc07      	bgt.n	8009320 <sin+0x20>
 8009310:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009398 <sin+0x98>
 8009314:	2000      	movs	r0, #0
 8009316:	f001 fb77 	bl	800aa08 <__kernel_sin>
 800931a:	ec51 0b10 	vmov	r0, r1, d0
 800931e:	e007      	b.n	8009330 <sin+0x30>
 8009320:	4820      	ldr	r0, [pc, #128]	; (80093a4 <sin+0xa4>)
 8009322:	4281      	cmp	r1, r0
 8009324:	dd09      	ble.n	800933a <sin+0x3a>
 8009326:	ee10 0a10 	vmov	r0, s0
 800932a:	4619      	mov	r1, r3
 800932c:	f7f6 ffb4 	bl	8000298 <__aeabi_dsub>
 8009330:	ec41 0b10 	vmov	d0, r0, r1
 8009334:	b005      	add	sp, #20
 8009336:	f85d fb04 	ldr.w	pc, [sp], #4
 800933a:	4668      	mov	r0, sp
 800933c:	f000 fc9c 	bl	8009c78 <__ieee754_rem_pio2>
 8009340:	f000 0003 	and.w	r0, r0, #3
 8009344:	2801      	cmp	r0, #1
 8009346:	d008      	beq.n	800935a <sin+0x5a>
 8009348:	2802      	cmp	r0, #2
 800934a:	d00d      	beq.n	8009368 <sin+0x68>
 800934c:	b9d0      	cbnz	r0, 8009384 <sin+0x84>
 800934e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009352:	ed9d 0b00 	vldr	d0, [sp]
 8009356:	2001      	movs	r0, #1
 8009358:	e7dd      	b.n	8009316 <sin+0x16>
 800935a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800935e:	ed9d 0b00 	vldr	d0, [sp]
 8009362:	f000 ff49 	bl	800a1f8 <__kernel_cos>
 8009366:	e7d8      	b.n	800931a <sin+0x1a>
 8009368:	ed9d 1b02 	vldr	d1, [sp, #8]
 800936c:	ed9d 0b00 	vldr	d0, [sp]
 8009370:	2001      	movs	r0, #1
 8009372:	f001 fb49 	bl	800aa08 <__kernel_sin>
 8009376:	ec53 2b10 	vmov	r2, r3, d0
 800937a:	ee10 0a10 	vmov	r0, s0
 800937e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009382:	e7d5      	b.n	8009330 <sin+0x30>
 8009384:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009388:	ed9d 0b00 	vldr	d0, [sp]
 800938c:	f000 ff34 	bl	800a1f8 <__kernel_cos>
 8009390:	e7f1      	b.n	8009376 <sin+0x76>
 8009392:	bf00      	nop
 8009394:	f3af 8000 	nop.w
	...
 80093a0:	3fe921fb 	.word	0x3fe921fb
 80093a4:	7fefffff 	.word	0x7fefffff

080093a8 <asin>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	ed2d 8b02 	vpush	{d8}
 80093ae:	ec55 4b10 	vmov	r4, r5, d0
 80093b2:	f000 f871 	bl	8009498 <__ieee754_asin>
 80093b6:	4b16      	ldr	r3, [pc, #88]	; (8009410 <asin+0x68>)
 80093b8:	eeb0 8a40 	vmov.f32	s16, s0
 80093bc:	eef0 8a60 	vmov.f32	s17, s1
 80093c0:	f993 3000 	ldrsb.w	r3, [r3]
 80093c4:	3301      	adds	r3, #1
 80093c6:	d01c      	beq.n	8009402 <asin+0x5a>
 80093c8:	4622      	mov	r2, r4
 80093ca:	462b      	mov	r3, r5
 80093cc:	4620      	mov	r0, r4
 80093ce:	4629      	mov	r1, r5
 80093d0:	f7f7 fbb4 	bl	8000b3c <__aeabi_dcmpun>
 80093d4:	b9a8      	cbnz	r0, 8009402 <asin+0x5a>
 80093d6:	ec45 4b10 	vmov	d0, r4, r5
 80093da:	f001 fd75 	bl	800aec8 <fabs>
 80093de:	4b0d      	ldr	r3, [pc, #52]	; (8009414 <asin+0x6c>)
 80093e0:	ec51 0b10 	vmov	r0, r1, d0
 80093e4:	2200      	movs	r2, #0
 80093e6:	f7f7 fb9f 	bl	8000b28 <__aeabi_dcmpgt>
 80093ea:	b150      	cbz	r0, 8009402 <asin+0x5a>
 80093ec:	f7fd f870 	bl	80064d0 <__errno>
 80093f0:	ecbd 8b02 	vpop	{d8}
 80093f4:	2321      	movs	r3, #33	; 0x21
 80093f6:	6003      	str	r3, [r0, #0]
 80093f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093fc:	4806      	ldr	r0, [pc, #24]	; (8009418 <asin+0x70>)
 80093fe:	f001 bdef 	b.w	800afe0 <nan>
 8009402:	eeb0 0a48 	vmov.f32	s0, s16
 8009406:	eef0 0a68 	vmov.f32	s1, s17
 800940a:	ecbd 8b02 	vpop	{d8}
 800940e:	bd38      	pop	{r3, r4, r5, pc}
 8009410:	200021f8 	.word	0x200021f8
 8009414:	3ff00000 	.word	0x3ff00000
 8009418:	0800b520 	.word	0x0800b520

0800941c <atan2>:
 800941c:	f000 ba50 	b.w	80098c0 <__ieee754_atan2>

08009420 <fmod>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	ed2d 8b02 	vpush	{d8}
 8009426:	ec57 6b10 	vmov	r6, r7, d0
 800942a:	ec55 4b11 	vmov	r4, r5, d1
 800942e:	f000 fb11 	bl	8009a54 <__ieee754_fmod>
 8009432:	4b18      	ldr	r3, [pc, #96]	; (8009494 <fmod+0x74>)
 8009434:	eeb0 8a40 	vmov.f32	s16, s0
 8009438:	eef0 8a60 	vmov.f32	s17, s1
 800943c:	f993 3000 	ldrsb.w	r3, [r3]
 8009440:	3301      	adds	r3, #1
 8009442:	d020      	beq.n	8009486 <fmod+0x66>
 8009444:	4622      	mov	r2, r4
 8009446:	462b      	mov	r3, r5
 8009448:	4620      	mov	r0, r4
 800944a:	4629      	mov	r1, r5
 800944c:	f7f7 fb76 	bl	8000b3c <__aeabi_dcmpun>
 8009450:	b9c8      	cbnz	r0, 8009486 <fmod+0x66>
 8009452:	4632      	mov	r2, r6
 8009454:	463b      	mov	r3, r7
 8009456:	4630      	mov	r0, r6
 8009458:	4639      	mov	r1, r7
 800945a:	f7f7 fb6f 	bl	8000b3c <__aeabi_dcmpun>
 800945e:	b990      	cbnz	r0, 8009486 <fmod+0x66>
 8009460:	2200      	movs	r2, #0
 8009462:	2300      	movs	r3, #0
 8009464:	4620      	mov	r0, r4
 8009466:	4629      	mov	r1, r5
 8009468:	f7f7 fb36 	bl	8000ad8 <__aeabi_dcmpeq>
 800946c:	b158      	cbz	r0, 8009486 <fmod+0x66>
 800946e:	f7fd f82f 	bl	80064d0 <__errno>
 8009472:	2321      	movs	r3, #33	; 0x21
 8009474:	6003      	str	r3, [r0, #0]
 8009476:	2200      	movs	r2, #0
 8009478:	2300      	movs	r3, #0
 800947a:	4610      	mov	r0, r2
 800947c:	4619      	mov	r1, r3
 800947e:	f7f7 f9ed 	bl	800085c <__aeabi_ddiv>
 8009482:	ec41 0b18 	vmov	d8, r0, r1
 8009486:	eeb0 0a48 	vmov.f32	s0, s16
 800948a:	eef0 0a68 	vmov.f32	s1, s17
 800948e:	ecbd 8b02 	vpop	{d8}
 8009492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009494:	200021f8 	.word	0x200021f8

08009498 <__ieee754_asin>:
 8009498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949c:	ed2d 8b04 	vpush	{d8-d9}
 80094a0:	ec55 4b10 	vmov	r4, r5, d0
 80094a4:	4bcc      	ldr	r3, [pc, #816]	; (80097d8 <__ieee754_asin+0x340>)
 80094a6:	b083      	sub	sp, #12
 80094a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80094ac:	4598      	cmp	r8, r3
 80094ae:	9501      	str	r5, [sp, #4]
 80094b0:	dd35      	ble.n	800951e <__ieee754_asin+0x86>
 80094b2:	ee10 3a10 	vmov	r3, s0
 80094b6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80094ba:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80094be:	ea58 0303 	orrs.w	r3, r8, r3
 80094c2:	d117      	bne.n	80094f4 <__ieee754_asin+0x5c>
 80094c4:	a3aa      	add	r3, pc, #680	; (adr r3, 8009770 <__ieee754_asin+0x2d8>)
 80094c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ca:	ee10 0a10 	vmov	r0, s0
 80094ce:	4629      	mov	r1, r5
 80094d0:	f7f7 f89a 	bl	8000608 <__aeabi_dmul>
 80094d4:	a3a8      	add	r3, pc, #672	; (adr r3, 8009778 <__ieee754_asin+0x2e0>)
 80094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094da:	4606      	mov	r6, r0
 80094dc:	460f      	mov	r7, r1
 80094de:	4620      	mov	r0, r4
 80094e0:	4629      	mov	r1, r5
 80094e2:	f7f7 f891 	bl	8000608 <__aeabi_dmul>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	4630      	mov	r0, r6
 80094ec:	4639      	mov	r1, r7
 80094ee:	f7f6 fed5 	bl	800029c <__adddf3>
 80094f2:	e00b      	b.n	800950c <__ieee754_asin+0x74>
 80094f4:	ee10 2a10 	vmov	r2, s0
 80094f8:	462b      	mov	r3, r5
 80094fa:	ee10 0a10 	vmov	r0, s0
 80094fe:	4629      	mov	r1, r5
 8009500:	f7f6 feca 	bl	8000298 <__aeabi_dsub>
 8009504:	4602      	mov	r2, r0
 8009506:	460b      	mov	r3, r1
 8009508:	f7f7 f9a8 	bl	800085c <__aeabi_ddiv>
 800950c:	4604      	mov	r4, r0
 800950e:	460d      	mov	r5, r1
 8009510:	ec45 4b10 	vmov	d0, r4, r5
 8009514:	b003      	add	sp, #12
 8009516:	ecbd 8b04 	vpop	{d8-d9}
 800951a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951e:	4baf      	ldr	r3, [pc, #700]	; (80097dc <__ieee754_asin+0x344>)
 8009520:	4598      	cmp	r8, r3
 8009522:	dc11      	bgt.n	8009548 <__ieee754_asin+0xb0>
 8009524:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009528:	f280 80ae 	bge.w	8009688 <__ieee754_asin+0x1f0>
 800952c:	a394      	add	r3, pc, #592	; (adr r3, 8009780 <__ieee754_asin+0x2e8>)
 800952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009532:	ee10 0a10 	vmov	r0, s0
 8009536:	4629      	mov	r1, r5
 8009538:	f7f6 feb0 	bl	800029c <__adddf3>
 800953c:	4ba8      	ldr	r3, [pc, #672]	; (80097e0 <__ieee754_asin+0x348>)
 800953e:	2200      	movs	r2, #0
 8009540:	f7f7 faf2 	bl	8000b28 <__aeabi_dcmpgt>
 8009544:	2800      	cmp	r0, #0
 8009546:	d1e3      	bne.n	8009510 <__ieee754_asin+0x78>
 8009548:	ec45 4b10 	vmov	d0, r4, r5
 800954c:	f001 fcbc 	bl	800aec8 <fabs>
 8009550:	49a3      	ldr	r1, [pc, #652]	; (80097e0 <__ieee754_asin+0x348>)
 8009552:	ec53 2b10 	vmov	r2, r3, d0
 8009556:	2000      	movs	r0, #0
 8009558:	f7f6 fe9e 	bl	8000298 <__aeabi_dsub>
 800955c:	4ba1      	ldr	r3, [pc, #644]	; (80097e4 <__ieee754_asin+0x34c>)
 800955e:	2200      	movs	r2, #0
 8009560:	f7f7 f852 	bl	8000608 <__aeabi_dmul>
 8009564:	a388      	add	r3, pc, #544	; (adr r3, 8009788 <__ieee754_asin+0x2f0>)
 8009566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956a:	4604      	mov	r4, r0
 800956c:	460d      	mov	r5, r1
 800956e:	f7f7 f84b 	bl	8000608 <__aeabi_dmul>
 8009572:	a387      	add	r3, pc, #540	; (adr r3, 8009790 <__ieee754_asin+0x2f8>)
 8009574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009578:	f7f6 fe90 	bl	800029c <__adddf3>
 800957c:	4622      	mov	r2, r4
 800957e:	462b      	mov	r3, r5
 8009580:	f7f7 f842 	bl	8000608 <__aeabi_dmul>
 8009584:	a384      	add	r3, pc, #528	; (adr r3, 8009798 <__ieee754_asin+0x300>)
 8009586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958a:	f7f6 fe85 	bl	8000298 <__aeabi_dsub>
 800958e:	4622      	mov	r2, r4
 8009590:	462b      	mov	r3, r5
 8009592:	f7f7 f839 	bl	8000608 <__aeabi_dmul>
 8009596:	a382      	add	r3, pc, #520	; (adr r3, 80097a0 <__ieee754_asin+0x308>)
 8009598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959c:	f7f6 fe7e 	bl	800029c <__adddf3>
 80095a0:	4622      	mov	r2, r4
 80095a2:	462b      	mov	r3, r5
 80095a4:	f7f7 f830 	bl	8000608 <__aeabi_dmul>
 80095a8:	a37f      	add	r3, pc, #508	; (adr r3, 80097a8 <__ieee754_asin+0x310>)
 80095aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ae:	f7f6 fe73 	bl	8000298 <__aeabi_dsub>
 80095b2:	4622      	mov	r2, r4
 80095b4:	462b      	mov	r3, r5
 80095b6:	f7f7 f827 	bl	8000608 <__aeabi_dmul>
 80095ba:	a37d      	add	r3, pc, #500	; (adr r3, 80097b0 <__ieee754_asin+0x318>)
 80095bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c0:	f7f6 fe6c 	bl	800029c <__adddf3>
 80095c4:	4622      	mov	r2, r4
 80095c6:	462b      	mov	r3, r5
 80095c8:	f7f7 f81e 	bl	8000608 <__aeabi_dmul>
 80095cc:	a37a      	add	r3, pc, #488	; (adr r3, 80097b8 <__ieee754_asin+0x320>)
 80095ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d2:	ec41 0b18 	vmov	d8, r0, r1
 80095d6:	4620      	mov	r0, r4
 80095d8:	4629      	mov	r1, r5
 80095da:	f7f7 f815 	bl	8000608 <__aeabi_dmul>
 80095de:	a378      	add	r3, pc, #480	; (adr r3, 80097c0 <__ieee754_asin+0x328>)
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	f7f6 fe58 	bl	8000298 <__aeabi_dsub>
 80095e8:	4622      	mov	r2, r4
 80095ea:	462b      	mov	r3, r5
 80095ec:	f7f7 f80c 	bl	8000608 <__aeabi_dmul>
 80095f0:	a375      	add	r3, pc, #468	; (adr r3, 80097c8 <__ieee754_asin+0x330>)
 80095f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f6:	f7f6 fe51 	bl	800029c <__adddf3>
 80095fa:	4622      	mov	r2, r4
 80095fc:	462b      	mov	r3, r5
 80095fe:	f7f7 f803 	bl	8000608 <__aeabi_dmul>
 8009602:	a373      	add	r3, pc, #460	; (adr r3, 80097d0 <__ieee754_asin+0x338>)
 8009604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009608:	f7f6 fe46 	bl	8000298 <__aeabi_dsub>
 800960c:	4622      	mov	r2, r4
 800960e:	462b      	mov	r3, r5
 8009610:	f7f6 fffa 	bl	8000608 <__aeabi_dmul>
 8009614:	4b72      	ldr	r3, [pc, #456]	; (80097e0 <__ieee754_asin+0x348>)
 8009616:	2200      	movs	r2, #0
 8009618:	f7f6 fe40 	bl	800029c <__adddf3>
 800961c:	ec45 4b10 	vmov	d0, r4, r5
 8009620:	4606      	mov	r6, r0
 8009622:	460f      	mov	r7, r1
 8009624:	f000 fd32 	bl	800a08c <__ieee754_sqrt>
 8009628:	4b6f      	ldr	r3, [pc, #444]	; (80097e8 <__ieee754_asin+0x350>)
 800962a:	4598      	cmp	r8, r3
 800962c:	ec5b ab10 	vmov	sl, fp, d0
 8009630:	f340 80dc 	ble.w	80097ec <__ieee754_asin+0x354>
 8009634:	4632      	mov	r2, r6
 8009636:	463b      	mov	r3, r7
 8009638:	ec51 0b18 	vmov	r0, r1, d8
 800963c:	f7f7 f90e 	bl	800085c <__aeabi_ddiv>
 8009640:	4652      	mov	r2, sl
 8009642:	465b      	mov	r3, fp
 8009644:	f7f6 ffe0 	bl	8000608 <__aeabi_dmul>
 8009648:	4652      	mov	r2, sl
 800964a:	465b      	mov	r3, fp
 800964c:	f7f6 fe26 	bl	800029c <__adddf3>
 8009650:	4602      	mov	r2, r0
 8009652:	460b      	mov	r3, r1
 8009654:	f7f6 fe22 	bl	800029c <__adddf3>
 8009658:	a347      	add	r3, pc, #284	; (adr r3, 8009778 <__ieee754_asin+0x2e0>)
 800965a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965e:	f7f6 fe1b 	bl	8000298 <__aeabi_dsub>
 8009662:	4602      	mov	r2, r0
 8009664:	460b      	mov	r3, r1
 8009666:	a142      	add	r1, pc, #264	; (adr r1, 8009770 <__ieee754_asin+0x2d8>)
 8009668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800966c:	f7f6 fe14 	bl	8000298 <__aeabi_dsub>
 8009670:	9b01      	ldr	r3, [sp, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	bfdc      	itt	le
 8009676:	4602      	movle	r2, r0
 8009678:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800967c:	4604      	mov	r4, r0
 800967e:	460d      	mov	r5, r1
 8009680:	bfdc      	itt	le
 8009682:	4614      	movle	r4, r2
 8009684:	461d      	movle	r5, r3
 8009686:	e743      	b.n	8009510 <__ieee754_asin+0x78>
 8009688:	ee10 2a10 	vmov	r2, s0
 800968c:	ee10 0a10 	vmov	r0, s0
 8009690:	462b      	mov	r3, r5
 8009692:	4629      	mov	r1, r5
 8009694:	f7f6 ffb8 	bl	8000608 <__aeabi_dmul>
 8009698:	a33b      	add	r3, pc, #236	; (adr r3, 8009788 <__ieee754_asin+0x2f0>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	4606      	mov	r6, r0
 80096a0:	460f      	mov	r7, r1
 80096a2:	f7f6 ffb1 	bl	8000608 <__aeabi_dmul>
 80096a6:	a33a      	add	r3, pc, #232	; (adr r3, 8009790 <__ieee754_asin+0x2f8>)
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	f7f6 fdf6 	bl	800029c <__adddf3>
 80096b0:	4632      	mov	r2, r6
 80096b2:	463b      	mov	r3, r7
 80096b4:	f7f6 ffa8 	bl	8000608 <__aeabi_dmul>
 80096b8:	a337      	add	r3, pc, #220	; (adr r3, 8009798 <__ieee754_asin+0x300>)
 80096ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096be:	f7f6 fdeb 	bl	8000298 <__aeabi_dsub>
 80096c2:	4632      	mov	r2, r6
 80096c4:	463b      	mov	r3, r7
 80096c6:	f7f6 ff9f 	bl	8000608 <__aeabi_dmul>
 80096ca:	a335      	add	r3, pc, #212	; (adr r3, 80097a0 <__ieee754_asin+0x308>)
 80096cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d0:	f7f6 fde4 	bl	800029c <__adddf3>
 80096d4:	4632      	mov	r2, r6
 80096d6:	463b      	mov	r3, r7
 80096d8:	f7f6 ff96 	bl	8000608 <__aeabi_dmul>
 80096dc:	a332      	add	r3, pc, #200	; (adr r3, 80097a8 <__ieee754_asin+0x310>)
 80096de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e2:	f7f6 fdd9 	bl	8000298 <__aeabi_dsub>
 80096e6:	4632      	mov	r2, r6
 80096e8:	463b      	mov	r3, r7
 80096ea:	f7f6 ff8d 	bl	8000608 <__aeabi_dmul>
 80096ee:	a330      	add	r3, pc, #192	; (adr r3, 80097b0 <__ieee754_asin+0x318>)
 80096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f4:	f7f6 fdd2 	bl	800029c <__adddf3>
 80096f8:	4632      	mov	r2, r6
 80096fa:	463b      	mov	r3, r7
 80096fc:	f7f6 ff84 	bl	8000608 <__aeabi_dmul>
 8009700:	a32d      	add	r3, pc, #180	; (adr r3, 80097b8 <__ieee754_asin+0x320>)
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	4680      	mov	r8, r0
 8009708:	4689      	mov	r9, r1
 800970a:	4630      	mov	r0, r6
 800970c:	4639      	mov	r1, r7
 800970e:	f7f6 ff7b 	bl	8000608 <__aeabi_dmul>
 8009712:	a32b      	add	r3, pc, #172	; (adr r3, 80097c0 <__ieee754_asin+0x328>)
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	f7f6 fdbe 	bl	8000298 <__aeabi_dsub>
 800971c:	4632      	mov	r2, r6
 800971e:	463b      	mov	r3, r7
 8009720:	f7f6 ff72 	bl	8000608 <__aeabi_dmul>
 8009724:	a328      	add	r3, pc, #160	; (adr r3, 80097c8 <__ieee754_asin+0x330>)
 8009726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972a:	f7f6 fdb7 	bl	800029c <__adddf3>
 800972e:	4632      	mov	r2, r6
 8009730:	463b      	mov	r3, r7
 8009732:	f7f6 ff69 	bl	8000608 <__aeabi_dmul>
 8009736:	a326      	add	r3, pc, #152	; (adr r3, 80097d0 <__ieee754_asin+0x338>)
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	f7f6 fdac 	bl	8000298 <__aeabi_dsub>
 8009740:	4632      	mov	r2, r6
 8009742:	463b      	mov	r3, r7
 8009744:	f7f6 ff60 	bl	8000608 <__aeabi_dmul>
 8009748:	4b25      	ldr	r3, [pc, #148]	; (80097e0 <__ieee754_asin+0x348>)
 800974a:	2200      	movs	r2, #0
 800974c:	f7f6 fda6 	bl	800029c <__adddf3>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	4640      	mov	r0, r8
 8009756:	4649      	mov	r1, r9
 8009758:	f7f7 f880 	bl	800085c <__aeabi_ddiv>
 800975c:	4622      	mov	r2, r4
 800975e:	462b      	mov	r3, r5
 8009760:	f7f6 ff52 	bl	8000608 <__aeabi_dmul>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	4620      	mov	r0, r4
 800976a:	4629      	mov	r1, r5
 800976c:	e6bf      	b.n	80094ee <__ieee754_asin+0x56>
 800976e:	bf00      	nop
 8009770:	54442d18 	.word	0x54442d18
 8009774:	3ff921fb 	.word	0x3ff921fb
 8009778:	33145c07 	.word	0x33145c07
 800977c:	3c91a626 	.word	0x3c91a626
 8009780:	8800759c 	.word	0x8800759c
 8009784:	7e37e43c 	.word	0x7e37e43c
 8009788:	0dfdf709 	.word	0x0dfdf709
 800978c:	3f023de1 	.word	0x3f023de1
 8009790:	7501b288 	.word	0x7501b288
 8009794:	3f49efe0 	.word	0x3f49efe0
 8009798:	b5688f3b 	.word	0xb5688f3b
 800979c:	3fa48228 	.word	0x3fa48228
 80097a0:	0e884455 	.word	0x0e884455
 80097a4:	3fc9c155 	.word	0x3fc9c155
 80097a8:	03eb6f7d 	.word	0x03eb6f7d
 80097ac:	3fd4d612 	.word	0x3fd4d612
 80097b0:	55555555 	.word	0x55555555
 80097b4:	3fc55555 	.word	0x3fc55555
 80097b8:	b12e9282 	.word	0xb12e9282
 80097bc:	3fb3b8c5 	.word	0x3fb3b8c5
 80097c0:	1b8d0159 	.word	0x1b8d0159
 80097c4:	3fe6066c 	.word	0x3fe6066c
 80097c8:	9c598ac8 	.word	0x9c598ac8
 80097cc:	40002ae5 	.word	0x40002ae5
 80097d0:	1c8a2d4b 	.word	0x1c8a2d4b
 80097d4:	40033a27 	.word	0x40033a27
 80097d8:	3fefffff 	.word	0x3fefffff
 80097dc:	3fdfffff 	.word	0x3fdfffff
 80097e0:	3ff00000 	.word	0x3ff00000
 80097e4:	3fe00000 	.word	0x3fe00000
 80097e8:	3fef3332 	.word	0x3fef3332
 80097ec:	ee10 2a10 	vmov	r2, s0
 80097f0:	ee10 0a10 	vmov	r0, s0
 80097f4:	465b      	mov	r3, fp
 80097f6:	4659      	mov	r1, fp
 80097f8:	f7f6 fd50 	bl	800029c <__adddf3>
 80097fc:	4632      	mov	r2, r6
 80097fe:	463b      	mov	r3, r7
 8009800:	ec41 0b19 	vmov	d9, r0, r1
 8009804:	ec51 0b18 	vmov	r0, r1, d8
 8009808:	f7f7 f828 	bl	800085c <__aeabi_ddiv>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	ec51 0b19 	vmov	r0, r1, d9
 8009814:	f7f6 fef8 	bl	8000608 <__aeabi_dmul>
 8009818:	f04f 0800 	mov.w	r8, #0
 800981c:	4606      	mov	r6, r0
 800981e:	460f      	mov	r7, r1
 8009820:	4642      	mov	r2, r8
 8009822:	465b      	mov	r3, fp
 8009824:	4640      	mov	r0, r8
 8009826:	4659      	mov	r1, fp
 8009828:	f7f6 feee 	bl	8000608 <__aeabi_dmul>
 800982c:	4602      	mov	r2, r0
 800982e:	460b      	mov	r3, r1
 8009830:	4620      	mov	r0, r4
 8009832:	4629      	mov	r1, r5
 8009834:	f7f6 fd30 	bl	8000298 <__aeabi_dsub>
 8009838:	4642      	mov	r2, r8
 800983a:	4604      	mov	r4, r0
 800983c:	460d      	mov	r5, r1
 800983e:	465b      	mov	r3, fp
 8009840:	4650      	mov	r0, sl
 8009842:	4659      	mov	r1, fp
 8009844:	f7f6 fd2a 	bl	800029c <__adddf3>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	4620      	mov	r0, r4
 800984e:	4629      	mov	r1, r5
 8009850:	f7f7 f804 	bl	800085c <__aeabi_ddiv>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	f7f6 fd20 	bl	800029c <__adddf3>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	a113      	add	r1, pc, #76	; (adr r1, 80098b0 <__ieee754_asin+0x418>)
 8009862:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009866:	f7f6 fd17 	bl	8000298 <__aeabi_dsub>
 800986a:	4602      	mov	r2, r0
 800986c:	460b      	mov	r3, r1
 800986e:	4630      	mov	r0, r6
 8009870:	4639      	mov	r1, r7
 8009872:	f7f6 fd11 	bl	8000298 <__aeabi_dsub>
 8009876:	4642      	mov	r2, r8
 8009878:	4604      	mov	r4, r0
 800987a:	460d      	mov	r5, r1
 800987c:	465b      	mov	r3, fp
 800987e:	4640      	mov	r0, r8
 8009880:	4659      	mov	r1, fp
 8009882:	f7f6 fd0b 	bl	800029c <__adddf3>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	a10b      	add	r1, pc, #44	; (adr r1, 80098b8 <__ieee754_asin+0x420>)
 800988c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009890:	f7f6 fd02 	bl	8000298 <__aeabi_dsub>
 8009894:	4602      	mov	r2, r0
 8009896:	460b      	mov	r3, r1
 8009898:	4620      	mov	r0, r4
 800989a:	4629      	mov	r1, r5
 800989c:	f7f6 fcfc 	bl	8000298 <__aeabi_dsub>
 80098a0:	4602      	mov	r2, r0
 80098a2:	460b      	mov	r3, r1
 80098a4:	a104      	add	r1, pc, #16	; (adr r1, 80098b8 <__ieee754_asin+0x420>)
 80098a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098aa:	e6df      	b.n	800966c <__ieee754_asin+0x1d4>
 80098ac:	f3af 8000 	nop.w
 80098b0:	33145c07 	.word	0x33145c07
 80098b4:	3c91a626 	.word	0x3c91a626
 80098b8:	54442d18 	.word	0x54442d18
 80098bc:	3fe921fb 	.word	0x3fe921fb

080098c0 <__ieee754_atan2>:
 80098c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c4:	ec57 6b11 	vmov	r6, r7, d1
 80098c8:	4273      	negs	r3, r6
 80098ca:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009a50 <__ieee754_atan2+0x190>
 80098ce:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80098d2:	4333      	orrs	r3, r6
 80098d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80098d8:	4573      	cmp	r3, lr
 80098da:	ec51 0b10 	vmov	r0, r1, d0
 80098de:	ee11 8a10 	vmov	r8, s2
 80098e2:	d80a      	bhi.n	80098fa <__ieee754_atan2+0x3a>
 80098e4:	4244      	negs	r4, r0
 80098e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80098ea:	4304      	orrs	r4, r0
 80098ec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80098f0:	4574      	cmp	r4, lr
 80098f2:	ee10 9a10 	vmov	r9, s0
 80098f6:	468c      	mov	ip, r1
 80098f8:	d907      	bls.n	800990a <__ieee754_atan2+0x4a>
 80098fa:	4632      	mov	r2, r6
 80098fc:	463b      	mov	r3, r7
 80098fe:	f7f6 fccd 	bl	800029c <__adddf3>
 8009902:	ec41 0b10 	vmov	d0, r0, r1
 8009906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800990a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800990e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009912:	4334      	orrs	r4, r6
 8009914:	d103      	bne.n	800991e <__ieee754_atan2+0x5e>
 8009916:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800991a:	f001 b935 	b.w	800ab88 <atan>
 800991e:	17bc      	asrs	r4, r7, #30
 8009920:	f004 0402 	and.w	r4, r4, #2
 8009924:	ea53 0909 	orrs.w	r9, r3, r9
 8009928:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800992c:	d107      	bne.n	800993e <__ieee754_atan2+0x7e>
 800992e:	2c02      	cmp	r4, #2
 8009930:	d060      	beq.n	80099f4 <__ieee754_atan2+0x134>
 8009932:	2c03      	cmp	r4, #3
 8009934:	d1e5      	bne.n	8009902 <__ieee754_atan2+0x42>
 8009936:	a142      	add	r1, pc, #264	; (adr r1, 8009a40 <__ieee754_atan2+0x180>)
 8009938:	e9d1 0100 	ldrd	r0, r1, [r1]
 800993c:	e7e1      	b.n	8009902 <__ieee754_atan2+0x42>
 800993e:	ea52 0808 	orrs.w	r8, r2, r8
 8009942:	d106      	bne.n	8009952 <__ieee754_atan2+0x92>
 8009944:	f1bc 0f00 	cmp.w	ip, #0
 8009948:	da5f      	bge.n	8009a0a <__ieee754_atan2+0x14a>
 800994a:	a13f      	add	r1, pc, #252	; (adr r1, 8009a48 <__ieee754_atan2+0x188>)
 800994c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009950:	e7d7      	b.n	8009902 <__ieee754_atan2+0x42>
 8009952:	4572      	cmp	r2, lr
 8009954:	d10f      	bne.n	8009976 <__ieee754_atan2+0xb6>
 8009956:	4293      	cmp	r3, r2
 8009958:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800995c:	d107      	bne.n	800996e <__ieee754_atan2+0xae>
 800995e:	2c02      	cmp	r4, #2
 8009960:	d84c      	bhi.n	80099fc <__ieee754_atan2+0x13c>
 8009962:	4b35      	ldr	r3, [pc, #212]	; (8009a38 <__ieee754_atan2+0x178>)
 8009964:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009968:	e9d4 0100 	ldrd	r0, r1, [r4]
 800996c:	e7c9      	b.n	8009902 <__ieee754_atan2+0x42>
 800996e:	2c02      	cmp	r4, #2
 8009970:	d848      	bhi.n	8009a04 <__ieee754_atan2+0x144>
 8009972:	4b32      	ldr	r3, [pc, #200]	; (8009a3c <__ieee754_atan2+0x17c>)
 8009974:	e7f6      	b.n	8009964 <__ieee754_atan2+0xa4>
 8009976:	4573      	cmp	r3, lr
 8009978:	d0e4      	beq.n	8009944 <__ieee754_atan2+0x84>
 800997a:	1a9b      	subs	r3, r3, r2
 800997c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009980:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009984:	da1e      	bge.n	80099c4 <__ieee754_atan2+0x104>
 8009986:	2f00      	cmp	r7, #0
 8009988:	da01      	bge.n	800998e <__ieee754_atan2+0xce>
 800998a:	323c      	adds	r2, #60	; 0x3c
 800998c:	db1e      	blt.n	80099cc <__ieee754_atan2+0x10c>
 800998e:	4632      	mov	r2, r6
 8009990:	463b      	mov	r3, r7
 8009992:	f7f6 ff63 	bl	800085c <__aeabi_ddiv>
 8009996:	ec41 0b10 	vmov	d0, r0, r1
 800999a:	f001 fa95 	bl	800aec8 <fabs>
 800999e:	f001 f8f3 	bl	800ab88 <atan>
 80099a2:	ec51 0b10 	vmov	r0, r1, d0
 80099a6:	2c01      	cmp	r4, #1
 80099a8:	d013      	beq.n	80099d2 <__ieee754_atan2+0x112>
 80099aa:	2c02      	cmp	r4, #2
 80099ac:	d015      	beq.n	80099da <__ieee754_atan2+0x11a>
 80099ae:	2c00      	cmp	r4, #0
 80099b0:	d0a7      	beq.n	8009902 <__ieee754_atan2+0x42>
 80099b2:	a319      	add	r3, pc, #100	; (adr r3, 8009a18 <__ieee754_atan2+0x158>)
 80099b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b8:	f7f6 fc6e 	bl	8000298 <__aeabi_dsub>
 80099bc:	a318      	add	r3, pc, #96	; (adr r3, 8009a20 <__ieee754_atan2+0x160>)
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	e014      	b.n	80099ee <__ieee754_atan2+0x12e>
 80099c4:	a118      	add	r1, pc, #96	; (adr r1, 8009a28 <__ieee754_atan2+0x168>)
 80099c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099ca:	e7ec      	b.n	80099a6 <__ieee754_atan2+0xe6>
 80099cc:	2000      	movs	r0, #0
 80099ce:	2100      	movs	r1, #0
 80099d0:	e7e9      	b.n	80099a6 <__ieee754_atan2+0xe6>
 80099d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099d6:	4619      	mov	r1, r3
 80099d8:	e793      	b.n	8009902 <__ieee754_atan2+0x42>
 80099da:	a30f      	add	r3, pc, #60	; (adr r3, 8009a18 <__ieee754_atan2+0x158>)
 80099dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e0:	f7f6 fc5a 	bl	8000298 <__aeabi_dsub>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	a10d      	add	r1, pc, #52	; (adr r1, 8009a20 <__ieee754_atan2+0x160>)
 80099ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099ee:	f7f6 fc53 	bl	8000298 <__aeabi_dsub>
 80099f2:	e786      	b.n	8009902 <__ieee754_atan2+0x42>
 80099f4:	a10a      	add	r1, pc, #40	; (adr r1, 8009a20 <__ieee754_atan2+0x160>)
 80099f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099fa:	e782      	b.n	8009902 <__ieee754_atan2+0x42>
 80099fc:	a10c      	add	r1, pc, #48	; (adr r1, 8009a30 <__ieee754_atan2+0x170>)
 80099fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a02:	e77e      	b.n	8009902 <__ieee754_atan2+0x42>
 8009a04:	2000      	movs	r0, #0
 8009a06:	2100      	movs	r1, #0
 8009a08:	e77b      	b.n	8009902 <__ieee754_atan2+0x42>
 8009a0a:	a107      	add	r1, pc, #28	; (adr r1, 8009a28 <__ieee754_atan2+0x168>)
 8009a0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a10:	e777      	b.n	8009902 <__ieee754_atan2+0x42>
 8009a12:	bf00      	nop
 8009a14:	f3af 8000 	nop.w
 8009a18:	33145c07 	.word	0x33145c07
 8009a1c:	3ca1a626 	.word	0x3ca1a626
 8009a20:	54442d18 	.word	0x54442d18
 8009a24:	400921fb 	.word	0x400921fb
 8009a28:	54442d18 	.word	0x54442d18
 8009a2c:	3ff921fb 	.word	0x3ff921fb
 8009a30:	54442d18 	.word	0x54442d18
 8009a34:	3fe921fb 	.word	0x3fe921fb
 8009a38:	0800b690 	.word	0x0800b690
 8009a3c:	0800b6a8 	.word	0x0800b6a8
 8009a40:	54442d18 	.word	0x54442d18
 8009a44:	c00921fb 	.word	0xc00921fb
 8009a48:	54442d18 	.word	0x54442d18
 8009a4c:	bff921fb 	.word	0xbff921fb
 8009a50:	7ff00000 	.word	0x7ff00000

08009a54 <__ieee754_fmod>:
 8009a54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a58:	ec53 2b11 	vmov	r2, r3, d1
 8009a5c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8009a60:	ea5e 0402 	orrs.w	r4, lr, r2
 8009a64:	ec51 0b10 	vmov	r0, r1, d0
 8009a68:	ee11 7a10 	vmov	r7, s2
 8009a6c:	ee11 ca10 	vmov	ip, s2
 8009a70:	461e      	mov	r6, r3
 8009a72:	d00d      	beq.n	8009a90 <__ieee754_fmod+0x3c>
 8009a74:	4c7a      	ldr	r4, [pc, #488]	; (8009c60 <__ieee754_fmod+0x20c>)
 8009a76:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8009a7a:	45a0      	cmp	r8, r4
 8009a7c:	4689      	mov	r9, r1
 8009a7e:	dc07      	bgt.n	8009a90 <__ieee754_fmod+0x3c>
 8009a80:	4254      	negs	r4, r2
 8009a82:	4d78      	ldr	r5, [pc, #480]	; (8009c64 <__ieee754_fmod+0x210>)
 8009a84:	4314      	orrs	r4, r2
 8009a86:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8009a8a:	42ac      	cmp	r4, r5
 8009a8c:	46ab      	mov	fp, r5
 8009a8e:	d909      	bls.n	8009aa4 <__ieee754_fmod+0x50>
 8009a90:	f7f6 fdba 	bl	8000608 <__aeabi_dmul>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	f7f6 fee0 	bl	800085c <__aeabi_ddiv>
 8009a9c:	ec41 0b10 	vmov	d0, r0, r1
 8009aa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa4:	45f0      	cmp	r8, lr
 8009aa6:	ee10 aa10 	vmov	sl, s0
 8009aaa:	ee10 4a10 	vmov	r4, s0
 8009aae:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8009ab2:	dc0a      	bgt.n	8009aca <__ieee754_fmod+0x76>
 8009ab4:	dbf2      	blt.n	8009a9c <__ieee754_fmod+0x48>
 8009ab6:	4290      	cmp	r0, r2
 8009ab8:	d3f0      	bcc.n	8009a9c <__ieee754_fmod+0x48>
 8009aba:	d106      	bne.n	8009aca <__ieee754_fmod+0x76>
 8009abc:	4a6a      	ldr	r2, [pc, #424]	; (8009c68 <__ieee754_fmod+0x214>)
 8009abe:	0fed      	lsrs	r5, r5, #31
 8009ac0:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009ac4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009ac8:	e7e8      	b.n	8009a9c <__ieee754_fmod+0x48>
 8009aca:	ea19 0f0b 	tst.w	r9, fp
 8009ace:	d14a      	bne.n	8009b66 <__ieee754_fmod+0x112>
 8009ad0:	f1b8 0f00 	cmp.w	r8, #0
 8009ad4:	d13f      	bne.n	8009b56 <__ieee754_fmod+0x102>
 8009ad6:	4965      	ldr	r1, [pc, #404]	; (8009c6c <__ieee754_fmod+0x218>)
 8009ad8:	4653      	mov	r3, sl
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	dc38      	bgt.n	8009b50 <__ieee754_fmod+0xfc>
 8009ade:	4b61      	ldr	r3, [pc, #388]	; (8009c64 <__ieee754_fmod+0x210>)
 8009ae0:	4033      	ands	r3, r6
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d14f      	bne.n	8009b86 <__ieee754_fmod+0x132>
 8009ae6:	f1be 0f00 	cmp.w	lr, #0
 8009aea:	d144      	bne.n	8009b76 <__ieee754_fmod+0x122>
 8009aec:	4a5f      	ldr	r2, [pc, #380]	; (8009c6c <__ieee754_fmod+0x218>)
 8009aee:	463b      	mov	r3, r7
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	dc3d      	bgt.n	8009b70 <__ieee754_fmod+0x11c>
 8009af4:	4b5e      	ldr	r3, [pc, #376]	; (8009c70 <__ieee754_fmod+0x21c>)
 8009af6:	4299      	cmp	r1, r3
 8009af8:	db4a      	blt.n	8009b90 <__ieee754_fmod+0x13c>
 8009afa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b02:	485b      	ldr	r0, [pc, #364]	; (8009c70 <__ieee754_fmod+0x21c>)
 8009b04:	4282      	cmp	r2, r0
 8009b06:	db57      	blt.n	8009bb8 <__ieee754_fmod+0x164>
 8009b08:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8009b0c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8009b10:	1a89      	subs	r1, r1, r2
 8009b12:	1b98      	subs	r0, r3, r6
 8009b14:	eba4 070c 	sub.w	r7, r4, ip
 8009b18:	2900      	cmp	r1, #0
 8009b1a:	d164      	bne.n	8009be6 <__ieee754_fmod+0x192>
 8009b1c:	4564      	cmp	r4, ip
 8009b1e:	bf38      	it	cc
 8009b20:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 8009b24:	2800      	cmp	r0, #0
 8009b26:	bfa4      	itt	ge
 8009b28:	463c      	movge	r4, r7
 8009b2a:	4603      	movge	r3, r0
 8009b2c:	ea53 0104 	orrs.w	r1, r3, r4
 8009b30:	d0c4      	beq.n	8009abc <__ieee754_fmod+0x68>
 8009b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b36:	db6b      	blt.n	8009c10 <__ieee754_fmod+0x1bc>
 8009b38:	494d      	ldr	r1, [pc, #308]	; (8009c70 <__ieee754_fmod+0x21c>)
 8009b3a:	428a      	cmp	r2, r1
 8009b3c:	db6e      	blt.n	8009c1c <__ieee754_fmod+0x1c8>
 8009b3e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009b42:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8009b46:	431d      	orrs	r5, r3
 8009b48:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	e7a5      	b.n	8009a9c <__ieee754_fmod+0x48>
 8009b50:	3901      	subs	r1, #1
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	e7c1      	b.n	8009ada <__ieee754_fmod+0x86>
 8009b56:	4946      	ldr	r1, [pc, #280]	; (8009c70 <__ieee754_fmod+0x21c>)
 8009b58:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	ddbe      	ble.n	8009ade <__ieee754_fmod+0x8a>
 8009b60:	3901      	subs	r1, #1
 8009b62:	005b      	lsls	r3, r3, #1
 8009b64:	e7fa      	b.n	8009b5c <__ieee754_fmod+0x108>
 8009b66:	ea4f 5128 	mov.w	r1, r8, asr #20
 8009b6a:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009b6e:	e7b6      	b.n	8009ade <__ieee754_fmod+0x8a>
 8009b70:	3a01      	subs	r2, #1
 8009b72:	005b      	lsls	r3, r3, #1
 8009b74:	e7bc      	b.n	8009af0 <__ieee754_fmod+0x9c>
 8009b76:	4a3e      	ldr	r2, [pc, #248]	; (8009c70 <__ieee754_fmod+0x21c>)
 8009b78:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	ddb9      	ble.n	8009af4 <__ieee754_fmod+0xa0>
 8009b80:	3a01      	subs	r2, #1
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	e7fa      	b.n	8009b7c <__ieee754_fmod+0x128>
 8009b86:	ea4f 522e 	mov.w	r2, lr, asr #20
 8009b8a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009b8e:	e7b1      	b.n	8009af4 <__ieee754_fmod+0xa0>
 8009b90:	1a5c      	subs	r4, r3, r1
 8009b92:	2c1f      	cmp	r4, #31
 8009b94:	dc0a      	bgt.n	8009bac <__ieee754_fmod+0x158>
 8009b96:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8009b9a:	fa08 f804 	lsl.w	r8, r8, r4
 8009b9e:	fa2a f303 	lsr.w	r3, sl, r3
 8009ba2:	ea43 0308 	orr.w	r3, r3, r8
 8009ba6:	fa0a f404 	lsl.w	r4, sl, r4
 8009baa:	e7aa      	b.n	8009b02 <__ieee754_fmod+0xae>
 8009bac:	4b31      	ldr	r3, [pc, #196]	; (8009c74 <__ieee754_fmod+0x220>)
 8009bae:	1a5b      	subs	r3, r3, r1
 8009bb0:	fa0a f303 	lsl.w	r3, sl, r3
 8009bb4:	2400      	movs	r4, #0
 8009bb6:	e7a4      	b.n	8009b02 <__ieee754_fmod+0xae>
 8009bb8:	eba0 0c02 	sub.w	ip, r0, r2
 8009bbc:	f1bc 0f1f 	cmp.w	ip, #31
 8009bc0:	dc0a      	bgt.n	8009bd8 <__ieee754_fmod+0x184>
 8009bc2:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8009bc6:	fa0e fe0c 	lsl.w	lr, lr, ip
 8009bca:	fa27 f606 	lsr.w	r6, r7, r6
 8009bce:	ea46 060e 	orr.w	r6, r6, lr
 8009bd2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8009bd6:	e79b      	b.n	8009b10 <__ieee754_fmod+0xbc>
 8009bd8:	4e26      	ldr	r6, [pc, #152]	; (8009c74 <__ieee754_fmod+0x220>)
 8009bda:	1ab6      	subs	r6, r6, r2
 8009bdc:	fa07 f606 	lsl.w	r6, r7, r6
 8009be0:	f04f 0c00 	mov.w	ip, #0
 8009be4:	e794      	b.n	8009b10 <__ieee754_fmod+0xbc>
 8009be6:	4564      	cmp	r4, ip
 8009be8:	bf38      	it	cc
 8009bea:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	da05      	bge.n	8009bfe <__ieee754_fmod+0x1aa>
 8009bf2:	0fe0      	lsrs	r0, r4, #31
 8009bf4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009bf8:	0064      	lsls	r4, r4, #1
 8009bfa:	3901      	subs	r1, #1
 8009bfc:	e789      	b.n	8009b12 <__ieee754_fmod+0xbe>
 8009bfe:	ea50 0307 	orrs.w	r3, r0, r7
 8009c02:	f43f af5b 	beq.w	8009abc <__ieee754_fmod+0x68>
 8009c06:	0ffb      	lsrs	r3, r7, #31
 8009c08:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8009c0c:	007c      	lsls	r4, r7, #1
 8009c0e:	e7f4      	b.n	8009bfa <__ieee754_fmod+0x1a6>
 8009c10:	0fe1      	lsrs	r1, r4, #31
 8009c12:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8009c16:	0064      	lsls	r4, r4, #1
 8009c18:	3a01      	subs	r2, #1
 8009c1a:	e78a      	b.n	8009b32 <__ieee754_fmod+0xde>
 8009c1c:	1a89      	subs	r1, r1, r2
 8009c1e:	2914      	cmp	r1, #20
 8009c20:	dc0a      	bgt.n	8009c38 <__ieee754_fmod+0x1e4>
 8009c22:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8009c26:	fa03 f202 	lsl.w	r2, r3, r2
 8009c2a:	40cc      	lsrs	r4, r1
 8009c2c:	4322      	orrs	r2, r4
 8009c2e:	410b      	asrs	r3, r1
 8009c30:	ea43 0105 	orr.w	r1, r3, r5
 8009c34:	4610      	mov	r0, r2
 8009c36:	e731      	b.n	8009a9c <__ieee754_fmod+0x48>
 8009c38:	291f      	cmp	r1, #31
 8009c3a:	dc07      	bgt.n	8009c4c <__ieee754_fmod+0x1f8>
 8009c3c:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8009c40:	40cc      	lsrs	r4, r1
 8009c42:	fa03 f202 	lsl.w	r2, r3, r2
 8009c46:	4322      	orrs	r2, r4
 8009c48:	462b      	mov	r3, r5
 8009c4a:	e7f1      	b.n	8009c30 <__ieee754_fmod+0x1dc>
 8009c4c:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8009c50:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009c54:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8009c58:	32e2      	adds	r2, #226	; 0xe2
 8009c5a:	fa43 f202 	asr.w	r2, r3, r2
 8009c5e:	e7f3      	b.n	8009c48 <__ieee754_fmod+0x1f4>
 8009c60:	7fefffff 	.word	0x7fefffff
 8009c64:	7ff00000 	.word	0x7ff00000
 8009c68:	0800b6c0 	.word	0x0800b6c0
 8009c6c:	fffffbed 	.word	0xfffffbed
 8009c70:	fffffc02 	.word	0xfffffc02
 8009c74:	fffffbe2 	.word	0xfffffbe2

08009c78 <__ieee754_rem_pio2>:
 8009c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	ed2d 8b02 	vpush	{d8}
 8009c80:	ec55 4b10 	vmov	r4, r5, d0
 8009c84:	4bca      	ldr	r3, [pc, #808]	; (8009fb0 <__ieee754_rem_pio2+0x338>)
 8009c86:	b08b      	sub	sp, #44	; 0x2c
 8009c88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009c8c:	4598      	cmp	r8, r3
 8009c8e:	4682      	mov	sl, r0
 8009c90:	9502      	str	r5, [sp, #8]
 8009c92:	dc08      	bgt.n	8009ca6 <__ieee754_rem_pio2+0x2e>
 8009c94:	2200      	movs	r2, #0
 8009c96:	2300      	movs	r3, #0
 8009c98:	ed80 0b00 	vstr	d0, [r0]
 8009c9c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009ca0:	f04f 0b00 	mov.w	fp, #0
 8009ca4:	e028      	b.n	8009cf8 <__ieee754_rem_pio2+0x80>
 8009ca6:	4bc3      	ldr	r3, [pc, #780]	; (8009fb4 <__ieee754_rem_pio2+0x33c>)
 8009ca8:	4598      	cmp	r8, r3
 8009caa:	dc78      	bgt.n	8009d9e <__ieee754_rem_pio2+0x126>
 8009cac:	9b02      	ldr	r3, [sp, #8]
 8009cae:	4ec2      	ldr	r6, [pc, #776]	; (8009fb8 <__ieee754_rem_pio2+0x340>)
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	ee10 0a10 	vmov	r0, s0
 8009cb6:	a3b0      	add	r3, pc, #704	; (adr r3, 8009f78 <__ieee754_rem_pio2+0x300>)
 8009cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	dd39      	ble.n	8009d34 <__ieee754_rem_pio2+0xbc>
 8009cc0:	f7f6 faea 	bl	8000298 <__aeabi_dsub>
 8009cc4:	45b0      	cmp	r8, r6
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	460d      	mov	r5, r1
 8009cca:	d01b      	beq.n	8009d04 <__ieee754_rem_pio2+0x8c>
 8009ccc:	a3ac      	add	r3, pc, #688	; (adr r3, 8009f80 <__ieee754_rem_pio2+0x308>)
 8009cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd2:	f7f6 fae1 	bl	8000298 <__aeabi_dsub>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	460b      	mov	r3, r1
 8009cda:	e9ca 2300 	strd	r2, r3, [sl]
 8009cde:	4620      	mov	r0, r4
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	f7f6 fad9 	bl	8000298 <__aeabi_dsub>
 8009ce6:	a3a6      	add	r3, pc, #664	; (adr r3, 8009f80 <__ieee754_rem_pio2+0x308>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f7f6 fad4 	bl	8000298 <__aeabi_dsub>
 8009cf0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009cf4:	f04f 0b01 	mov.w	fp, #1
 8009cf8:	4658      	mov	r0, fp
 8009cfa:	b00b      	add	sp, #44	; 0x2c
 8009cfc:	ecbd 8b02 	vpop	{d8}
 8009d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d04:	a3a0      	add	r3, pc, #640	; (adr r3, 8009f88 <__ieee754_rem_pio2+0x310>)
 8009d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0a:	f7f6 fac5 	bl	8000298 <__aeabi_dsub>
 8009d0e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009f90 <__ieee754_rem_pio2+0x318>)
 8009d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d14:	4604      	mov	r4, r0
 8009d16:	460d      	mov	r5, r1
 8009d18:	f7f6 fabe 	bl	8000298 <__aeabi_dsub>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	e9ca 2300 	strd	r2, r3, [sl]
 8009d24:	4620      	mov	r0, r4
 8009d26:	4629      	mov	r1, r5
 8009d28:	f7f6 fab6 	bl	8000298 <__aeabi_dsub>
 8009d2c:	a398      	add	r3, pc, #608	; (adr r3, 8009f90 <__ieee754_rem_pio2+0x318>)
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	e7db      	b.n	8009cec <__ieee754_rem_pio2+0x74>
 8009d34:	f7f6 fab2 	bl	800029c <__adddf3>
 8009d38:	45b0      	cmp	r8, r6
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	460d      	mov	r5, r1
 8009d3e:	d016      	beq.n	8009d6e <__ieee754_rem_pio2+0xf6>
 8009d40:	a38f      	add	r3, pc, #572	; (adr r3, 8009f80 <__ieee754_rem_pio2+0x308>)
 8009d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d46:	f7f6 faa9 	bl	800029c <__adddf3>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	e9ca 2300 	strd	r2, r3, [sl]
 8009d52:	4620      	mov	r0, r4
 8009d54:	4629      	mov	r1, r5
 8009d56:	f7f6 fa9f 	bl	8000298 <__aeabi_dsub>
 8009d5a:	a389      	add	r3, pc, #548	; (adr r3, 8009f80 <__ieee754_rem_pio2+0x308>)
 8009d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d60:	f7f6 fa9c 	bl	800029c <__adddf3>
 8009d64:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009d68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009d6c:	e7c4      	b.n	8009cf8 <__ieee754_rem_pio2+0x80>
 8009d6e:	a386      	add	r3, pc, #536	; (adr r3, 8009f88 <__ieee754_rem_pio2+0x310>)
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	f7f6 fa92 	bl	800029c <__adddf3>
 8009d78:	a385      	add	r3, pc, #532	; (adr r3, 8009f90 <__ieee754_rem_pio2+0x318>)
 8009d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7e:	4604      	mov	r4, r0
 8009d80:	460d      	mov	r5, r1
 8009d82:	f7f6 fa8b 	bl	800029c <__adddf3>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	e9ca 2300 	strd	r2, r3, [sl]
 8009d8e:	4620      	mov	r0, r4
 8009d90:	4629      	mov	r1, r5
 8009d92:	f7f6 fa81 	bl	8000298 <__aeabi_dsub>
 8009d96:	a37e      	add	r3, pc, #504	; (adr r3, 8009f90 <__ieee754_rem_pio2+0x318>)
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	e7e0      	b.n	8009d60 <__ieee754_rem_pio2+0xe8>
 8009d9e:	4b87      	ldr	r3, [pc, #540]	; (8009fbc <__ieee754_rem_pio2+0x344>)
 8009da0:	4598      	cmp	r8, r3
 8009da2:	f300 80d9 	bgt.w	8009f58 <__ieee754_rem_pio2+0x2e0>
 8009da6:	f001 f88f 	bl	800aec8 <fabs>
 8009daa:	ec55 4b10 	vmov	r4, r5, d0
 8009dae:	ee10 0a10 	vmov	r0, s0
 8009db2:	a379      	add	r3, pc, #484	; (adr r3, 8009f98 <__ieee754_rem_pio2+0x320>)
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	4629      	mov	r1, r5
 8009dba:	f7f6 fc25 	bl	8000608 <__aeabi_dmul>
 8009dbe:	4b80      	ldr	r3, [pc, #512]	; (8009fc0 <__ieee754_rem_pio2+0x348>)
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f7f6 fa6b 	bl	800029c <__adddf3>
 8009dc6:	f7f6 fecf 	bl	8000b68 <__aeabi_d2iz>
 8009dca:	4683      	mov	fp, r0
 8009dcc:	f7f6 fbb2 	bl	8000534 <__aeabi_i2d>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	ec43 2b18 	vmov	d8, r2, r3
 8009dd8:	a367      	add	r3, pc, #412	; (adr r3, 8009f78 <__ieee754_rem_pio2+0x300>)
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	f7f6 fc13 	bl	8000608 <__aeabi_dmul>
 8009de2:	4602      	mov	r2, r0
 8009de4:	460b      	mov	r3, r1
 8009de6:	4620      	mov	r0, r4
 8009de8:	4629      	mov	r1, r5
 8009dea:	f7f6 fa55 	bl	8000298 <__aeabi_dsub>
 8009dee:	a364      	add	r3, pc, #400	; (adr r3, 8009f80 <__ieee754_rem_pio2+0x308>)
 8009df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df4:	4606      	mov	r6, r0
 8009df6:	460f      	mov	r7, r1
 8009df8:	ec51 0b18 	vmov	r0, r1, d8
 8009dfc:	f7f6 fc04 	bl	8000608 <__aeabi_dmul>
 8009e00:	f1bb 0f1f 	cmp.w	fp, #31
 8009e04:	4604      	mov	r4, r0
 8009e06:	460d      	mov	r5, r1
 8009e08:	dc0d      	bgt.n	8009e26 <__ieee754_rem_pio2+0x1ae>
 8009e0a:	4b6e      	ldr	r3, [pc, #440]	; (8009fc4 <__ieee754_rem_pio2+0x34c>)
 8009e0c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8009e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e14:	4543      	cmp	r3, r8
 8009e16:	d006      	beq.n	8009e26 <__ieee754_rem_pio2+0x1ae>
 8009e18:	4622      	mov	r2, r4
 8009e1a:	462b      	mov	r3, r5
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	4639      	mov	r1, r7
 8009e20:	f7f6 fa3a 	bl	8000298 <__aeabi_dsub>
 8009e24:	e00f      	b.n	8009e46 <__ieee754_rem_pio2+0x1ce>
 8009e26:	462b      	mov	r3, r5
 8009e28:	4622      	mov	r2, r4
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	4639      	mov	r1, r7
 8009e2e:	f7f6 fa33 	bl	8000298 <__aeabi_dsub>
 8009e32:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009e36:	9303      	str	r3, [sp, #12]
 8009e38:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009e3c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009e40:	f1b8 0f10 	cmp.w	r8, #16
 8009e44:	dc02      	bgt.n	8009e4c <__ieee754_rem_pio2+0x1d4>
 8009e46:	e9ca 0100 	strd	r0, r1, [sl]
 8009e4a:	e039      	b.n	8009ec0 <__ieee754_rem_pio2+0x248>
 8009e4c:	a34e      	add	r3, pc, #312	; (adr r3, 8009f88 <__ieee754_rem_pio2+0x310>)
 8009e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e52:	ec51 0b18 	vmov	r0, r1, d8
 8009e56:	f7f6 fbd7 	bl	8000608 <__aeabi_dmul>
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	460d      	mov	r5, r1
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	4630      	mov	r0, r6
 8009e64:	4639      	mov	r1, r7
 8009e66:	f7f6 fa17 	bl	8000298 <__aeabi_dsub>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	4680      	mov	r8, r0
 8009e70:	4689      	mov	r9, r1
 8009e72:	4630      	mov	r0, r6
 8009e74:	4639      	mov	r1, r7
 8009e76:	f7f6 fa0f 	bl	8000298 <__aeabi_dsub>
 8009e7a:	4622      	mov	r2, r4
 8009e7c:	462b      	mov	r3, r5
 8009e7e:	f7f6 fa0b 	bl	8000298 <__aeabi_dsub>
 8009e82:	a343      	add	r3, pc, #268	; (adr r3, 8009f90 <__ieee754_rem_pio2+0x318>)
 8009e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e88:	4604      	mov	r4, r0
 8009e8a:	460d      	mov	r5, r1
 8009e8c:	ec51 0b18 	vmov	r0, r1, d8
 8009e90:	f7f6 fbba 	bl	8000608 <__aeabi_dmul>
 8009e94:	4622      	mov	r2, r4
 8009e96:	462b      	mov	r3, r5
 8009e98:	f7f6 f9fe 	bl	8000298 <__aeabi_dsub>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	460d      	mov	r5, r1
 8009ea4:	4640      	mov	r0, r8
 8009ea6:	4649      	mov	r1, r9
 8009ea8:	f7f6 f9f6 	bl	8000298 <__aeabi_dsub>
 8009eac:	9a03      	ldr	r2, [sp, #12]
 8009eae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	2b31      	cmp	r3, #49	; 0x31
 8009eb6:	dc24      	bgt.n	8009f02 <__ieee754_rem_pio2+0x28a>
 8009eb8:	e9ca 0100 	strd	r0, r1, [sl]
 8009ebc:	4646      	mov	r6, r8
 8009ebe:	464f      	mov	r7, r9
 8009ec0:	e9da 8900 	ldrd	r8, r9, [sl]
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	4642      	mov	r2, r8
 8009ec8:	464b      	mov	r3, r9
 8009eca:	4639      	mov	r1, r7
 8009ecc:	f7f6 f9e4 	bl	8000298 <__aeabi_dsub>
 8009ed0:	462b      	mov	r3, r5
 8009ed2:	4622      	mov	r2, r4
 8009ed4:	f7f6 f9e0 	bl	8000298 <__aeabi_dsub>
 8009ed8:	9b02      	ldr	r3, [sp, #8]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009ee0:	f6bf af0a 	bge.w	8009cf8 <__ieee754_rem_pio2+0x80>
 8009ee4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009ee8:	f8ca 3004 	str.w	r3, [sl, #4]
 8009eec:	f8ca 8000 	str.w	r8, [sl]
 8009ef0:	f8ca 0008 	str.w	r0, [sl, #8]
 8009ef4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ef8:	f8ca 300c 	str.w	r3, [sl, #12]
 8009efc:	f1cb 0b00 	rsb	fp, fp, #0
 8009f00:	e6fa      	b.n	8009cf8 <__ieee754_rem_pio2+0x80>
 8009f02:	a327      	add	r3, pc, #156	; (adr r3, 8009fa0 <__ieee754_rem_pio2+0x328>)
 8009f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f08:	ec51 0b18 	vmov	r0, r1, d8
 8009f0c:	f7f6 fb7c 	bl	8000608 <__aeabi_dmul>
 8009f10:	4604      	mov	r4, r0
 8009f12:	460d      	mov	r5, r1
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	4640      	mov	r0, r8
 8009f1a:	4649      	mov	r1, r9
 8009f1c:	f7f6 f9bc 	bl	8000298 <__aeabi_dsub>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	4606      	mov	r6, r0
 8009f26:	460f      	mov	r7, r1
 8009f28:	4640      	mov	r0, r8
 8009f2a:	4649      	mov	r1, r9
 8009f2c:	f7f6 f9b4 	bl	8000298 <__aeabi_dsub>
 8009f30:	4622      	mov	r2, r4
 8009f32:	462b      	mov	r3, r5
 8009f34:	f7f6 f9b0 	bl	8000298 <__aeabi_dsub>
 8009f38:	a31b      	add	r3, pc, #108	; (adr r3, 8009fa8 <__ieee754_rem_pio2+0x330>)
 8009f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3e:	4604      	mov	r4, r0
 8009f40:	460d      	mov	r5, r1
 8009f42:	ec51 0b18 	vmov	r0, r1, d8
 8009f46:	f7f6 fb5f 	bl	8000608 <__aeabi_dmul>
 8009f4a:	4622      	mov	r2, r4
 8009f4c:	462b      	mov	r3, r5
 8009f4e:	f7f6 f9a3 	bl	8000298 <__aeabi_dsub>
 8009f52:	4604      	mov	r4, r0
 8009f54:	460d      	mov	r5, r1
 8009f56:	e75f      	b.n	8009e18 <__ieee754_rem_pio2+0x1a0>
 8009f58:	4b1b      	ldr	r3, [pc, #108]	; (8009fc8 <__ieee754_rem_pio2+0x350>)
 8009f5a:	4598      	cmp	r8, r3
 8009f5c:	dd36      	ble.n	8009fcc <__ieee754_rem_pio2+0x354>
 8009f5e:	ee10 2a10 	vmov	r2, s0
 8009f62:	462b      	mov	r3, r5
 8009f64:	4620      	mov	r0, r4
 8009f66:	4629      	mov	r1, r5
 8009f68:	f7f6 f996 	bl	8000298 <__aeabi_dsub>
 8009f6c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f70:	e9ca 0100 	strd	r0, r1, [sl]
 8009f74:	e694      	b.n	8009ca0 <__ieee754_rem_pio2+0x28>
 8009f76:	bf00      	nop
 8009f78:	54400000 	.word	0x54400000
 8009f7c:	3ff921fb 	.word	0x3ff921fb
 8009f80:	1a626331 	.word	0x1a626331
 8009f84:	3dd0b461 	.word	0x3dd0b461
 8009f88:	1a600000 	.word	0x1a600000
 8009f8c:	3dd0b461 	.word	0x3dd0b461
 8009f90:	2e037073 	.word	0x2e037073
 8009f94:	3ba3198a 	.word	0x3ba3198a
 8009f98:	6dc9c883 	.word	0x6dc9c883
 8009f9c:	3fe45f30 	.word	0x3fe45f30
 8009fa0:	2e000000 	.word	0x2e000000
 8009fa4:	3ba3198a 	.word	0x3ba3198a
 8009fa8:	252049c1 	.word	0x252049c1
 8009fac:	397b839a 	.word	0x397b839a
 8009fb0:	3fe921fb 	.word	0x3fe921fb
 8009fb4:	4002d97b 	.word	0x4002d97b
 8009fb8:	3ff921fb 	.word	0x3ff921fb
 8009fbc:	413921fb 	.word	0x413921fb
 8009fc0:	3fe00000 	.word	0x3fe00000
 8009fc4:	0800b6d0 	.word	0x0800b6d0
 8009fc8:	7fefffff 	.word	0x7fefffff
 8009fcc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009fd0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009fd4:	ee10 0a10 	vmov	r0, s0
 8009fd8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009fdc:	ee10 6a10 	vmov	r6, s0
 8009fe0:	460f      	mov	r7, r1
 8009fe2:	f7f6 fdc1 	bl	8000b68 <__aeabi_d2iz>
 8009fe6:	f7f6 faa5 	bl	8000534 <__aeabi_i2d>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	4630      	mov	r0, r6
 8009ff0:	4639      	mov	r1, r7
 8009ff2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ff6:	f7f6 f94f 	bl	8000298 <__aeabi_dsub>
 8009ffa:	4b22      	ldr	r3, [pc, #136]	; (800a084 <__ieee754_rem_pio2+0x40c>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f7f6 fb03 	bl	8000608 <__aeabi_dmul>
 800a002:	460f      	mov	r7, r1
 800a004:	4606      	mov	r6, r0
 800a006:	f7f6 fdaf 	bl	8000b68 <__aeabi_d2iz>
 800a00a:	f7f6 fa93 	bl	8000534 <__aeabi_i2d>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	4630      	mov	r0, r6
 800a014:	4639      	mov	r1, r7
 800a016:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a01a:	f7f6 f93d 	bl	8000298 <__aeabi_dsub>
 800a01e:	4b19      	ldr	r3, [pc, #100]	; (800a084 <__ieee754_rem_pio2+0x40c>)
 800a020:	2200      	movs	r2, #0
 800a022:	f7f6 faf1 	bl	8000608 <__aeabi_dmul>
 800a026:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a02a:	ad04      	add	r5, sp, #16
 800a02c:	f04f 0803 	mov.w	r8, #3
 800a030:	46a9      	mov	r9, r5
 800a032:	2600      	movs	r6, #0
 800a034:	2700      	movs	r7, #0
 800a036:	4632      	mov	r2, r6
 800a038:	463b      	mov	r3, r7
 800a03a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a03e:	46c3      	mov	fp, r8
 800a040:	3d08      	subs	r5, #8
 800a042:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a046:	f7f6 fd47 	bl	8000ad8 <__aeabi_dcmpeq>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	d1f3      	bne.n	800a036 <__ieee754_rem_pio2+0x3be>
 800a04e:	4b0e      	ldr	r3, [pc, #56]	; (800a088 <__ieee754_rem_pio2+0x410>)
 800a050:	9301      	str	r3, [sp, #4]
 800a052:	2302      	movs	r3, #2
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	4622      	mov	r2, r4
 800a058:	465b      	mov	r3, fp
 800a05a:	4651      	mov	r1, sl
 800a05c:	4648      	mov	r0, r9
 800a05e:	f000 f993 	bl	800a388 <__kernel_rem_pio2>
 800a062:	9b02      	ldr	r3, [sp, #8]
 800a064:	2b00      	cmp	r3, #0
 800a066:	4683      	mov	fp, r0
 800a068:	f6bf ae46 	bge.w	8009cf8 <__ieee754_rem_pio2+0x80>
 800a06c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a070:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a074:	f8ca 3004 	str.w	r3, [sl, #4]
 800a078:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a07c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a080:	e73a      	b.n	8009ef8 <__ieee754_rem_pio2+0x280>
 800a082:	bf00      	nop
 800a084:	41700000 	.word	0x41700000
 800a088:	0800b750 	.word	0x0800b750

0800a08c <__ieee754_sqrt>:
 800a08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a090:	ec55 4b10 	vmov	r4, r5, d0
 800a094:	4e56      	ldr	r6, [pc, #344]	; (800a1f0 <__ieee754_sqrt+0x164>)
 800a096:	43ae      	bics	r6, r5
 800a098:	ee10 0a10 	vmov	r0, s0
 800a09c:	ee10 3a10 	vmov	r3, s0
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	462a      	mov	r2, r5
 800a0a4:	d110      	bne.n	800a0c8 <__ieee754_sqrt+0x3c>
 800a0a6:	ee10 2a10 	vmov	r2, s0
 800a0aa:	462b      	mov	r3, r5
 800a0ac:	f7f6 faac 	bl	8000608 <__aeabi_dmul>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	f7f6 f8f0 	bl	800029c <__adddf3>
 800a0bc:	4604      	mov	r4, r0
 800a0be:	460d      	mov	r5, r1
 800a0c0:	ec45 4b10 	vmov	d0, r4, r5
 800a0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c8:	2d00      	cmp	r5, #0
 800a0ca:	dc10      	bgt.n	800a0ee <__ieee754_sqrt+0x62>
 800a0cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a0d0:	4330      	orrs	r0, r6
 800a0d2:	d0f5      	beq.n	800a0c0 <__ieee754_sqrt+0x34>
 800a0d4:	b15d      	cbz	r5, 800a0ee <__ieee754_sqrt+0x62>
 800a0d6:	ee10 2a10 	vmov	r2, s0
 800a0da:	462b      	mov	r3, r5
 800a0dc:	ee10 0a10 	vmov	r0, s0
 800a0e0:	f7f6 f8da 	bl	8000298 <__aeabi_dsub>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	f7f6 fbb8 	bl	800085c <__aeabi_ddiv>
 800a0ec:	e7e6      	b.n	800a0bc <__ieee754_sqrt+0x30>
 800a0ee:	1509      	asrs	r1, r1, #20
 800a0f0:	d076      	beq.n	800a1e0 <__ieee754_sqrt+0x154>
 800a0f2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a0f6:	07ce      	lsls	r6, r1, #31
 800a0f8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a0fc:	bf5e      	ittt	pl
 800a0fe:	0fda      	lsrpl	r2, r3, #31
 800a100:	005b      	lslpl	r3, r3, #1
 800a102:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a106:	0fda      	lsrs	r2, r3, #31
 800a108:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a10c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a110:	2000      	movs	r0, #0
 800a112:	106d      	asrs	r5, r5, #1
 800a114:	005b      	lsls	r3, r3, #1
 800a116:	f04f 0e16 	mov.w	lr, #22
 800a11a:	4684      	mov	ip, r0
 800a11c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a120:	eb0c 0401 	add.w	r4, ip, r1
 800a124:	4294      	cmp	r4, r2
 800a126:	bfde      	ittt	le
 800a128:	1b12      	suble	r2, r2, r4
 800a12a:	eb04 0c01 	addle.w	ip, r4, r1
 800a12e:	1840      	addle	r0, r0, r1
 800a130:	0052      	lsls	r2, r2, #1
 800a132:	f1be 0e01 	subs.w	lr, lr, #1
 800a136:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a13a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a13e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a142:	d1ed      	bne.n	800a120 <__ieee754_sqrt+0x94>
 800a144:	4671      	mov	r1, lr
 800a146:	2720      	movs	r7, #32
 800a148:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a14c:	4562      	cmp	r2, ip
 800a14e:	eb04 060e 	add.w	r6, r4, lr
 800a152:	dc02      	bgt.n	800a15a <__ieee754_sqrt+0xce>
 800a154:	d113      	bne.n	800a17e <__ieee754_sqrt+0xf2>
 800a156:	429e      	cmp	r6, r3
 800a158:	d811      	bhi.n	800a17e <__ieee754_sqrt+0xf2>
 800a15a:	2e00      	cmp	r6, #0
 800a15c:	eb06 0e04 	add.w	lr, r6, r4
 800a160:	da43      	bge.n	800a1ea <__ieee754_sqrt+0x15e>
 800a162:	f1be 0f00 	cmp.w	lr, #0
 800a166:	db40      	blt.n	800a1ea <__ieee754_sqrt+0x15e>
 800a168:	f10c 0801 	add.w	r8, ip, #1
 800a16c:	eba2 020c 	sub.w	r2, r2, ip
 800a170:	429e      	cmp	r6, r3
 800a172:	bf88      	it	hi
 800a174:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a178:	1b9b      	subs	r3, r3, r6
 800a17a:	4421      	add	r1, r4
 800a17c:	46c4      	mov	ip, r8
 800a17e:	0052      	lsls	r2, r2, #1
 800a180:	3f01      	subs	r7, #1
 800a182:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a186:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a18a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a18e:	d1dd      	bne.n	800a14c <__ieee754_sqrt+0xc0>
 800a190:	4313      	orrs	r3, r2
 800a192:	d006      	beq.n	800a1a2 <__ieee754_sqrt+0x116>
 800a194:	1c4c      	adds	r4, r1, #1
 800a196:	bf13      	iteet	ne
 800a198:	3101      	addne	r1, #1
 800a19a:	3001      	addeq	r0, #1
 800a19c:	4639      	moveq	r1, r7
 800a19e:	f021 0101 	bicne.w	r1, r1, #1
 800a1a2:	1043      	asrs	r3, r0, #1
 800a1a4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a1a8:	0849      	lsrs	r1, r1, #1
 800a1aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a1ae:	07c2      	lsls	r2, r0, #31
 800a1b0:	bf48      	it	mi
 800a1b2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a1b6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a1ba:	460c      	mov	r4, r1
 800a1bc:	463d      	mov	r5, r7
 800a1be:	e77f      	b.n	800a0c0 <__ieee754_sqrt+0x34>
 800a1c0:	0ada      	lsrs	r2, r3, #11
 800a1c2:	3815      	subs	r0, #21
 800a1c4:	055b      	lsls	r3, r3, #21
 800a1c6:	2a00      	cmp	r2, #0
 800a1c8:	d0fa      	beq.n	800a1c0 <__ieee754_sqrt+0x134>
 800a1ca:	02d7      	lsls	r7, r2, #11
 800a1cc:	d50a      	bpl.n	800a1e4 <__ieee754_sqrt+0x158>
 800a1ce:	f1c1 0420 	rsb	r4, r1, #32
 800a1d2:	fa23 f404 	lsr.w	r4, r3, r4
 800a1d6:	1e4d      	subs	r5, r1, #1
 800a1d8:	408b      	lsls	r3, r1
 800a1da:	4322      	orrs	r2, r4
 800a1dc:	1b41      	subs	r1, r0, r5
 800a1de:	e788      	b.n	800a0f2 <__ieee754_sqrt+0x66>
 800a1e0:	4608      	mov	r0, r1
 800a1e2:	e7f0      	b.n	800a1c6 <__ieee754_sqrt+0x13a>
 800a1e4:	0052      	lsls	r2, r2, #1
 800a1e6:	3101      	adds	r1, #1
 800a1e8:	e7ef      	b.n	800a1ca <__ieee754_sqrt+0x13e>
 800a1ea:	46e0      	mov	r8, ip
 800a1ec:	e7be      	b.n	800a16c <__ieee754_sqrt+0xe0>
 800a1ee:	bf00      	nop
 800a1f0:	7ff00000 	.word	0x7ff00000
 800a1f4:	00000000 	.word	0x00000000

0800a1f8 <__kernel_cos>:
 800a1f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fc:	ec57 6b10 	vmov	r6, r7, d0
 800a200:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a204:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a208:	ed8d 1b00 	vstr	d1, [sp]
 800a20c:	da07      	bge.n	800a21e <__kernel_cos+0x26>
 800a20e:	ee10 0a10 	vmov	r0, s0
 800a212:	4639      	mov	r1, r7
 800a214:	f7f6 fca8 	bl	8000b68 <__aeabi_d2iz>
 800a218:	2800      	cmp	r0, #0
 800a21a:	f000 8088 	beq.w	800a32e <__kernel_cos+0x136>
 800a21e:	4632      	mov	r2, r6
 800a220:	463b      	mov	r3, r7
 800a222:	4630      	mov	r0, r6
 800a224:	4639      	mov	r1, r7
 800a226:	f7f6 f9ef 	bl	8000608 <__aeabi_dmul>
 800a22a:	4b51      	ldr	r3, [pc, #324]	; (800a370 <__kernel_cos+0x178>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	4604      	mov	r4, r0
 800a230:	460d      	mov	r5, r1
 800a232:	f7f6 f9e9 	bl	8000608 <__aeabi_dmul>
 800a236:	a340      	add	r3, pc, #256	; (adr r3, 800a338 <__kernel_cos+0x140>)
 800a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23c:	4682      	mov	sl, r0
 800a23e:	468b      	mov	fp, r1
 800a240:	4620      	mov	r0, r4
 800a242:	4629      	mov	r1, r5
 800a244:	f7f6 f9e0 	bl	8000608 <__aeabi_dmul>
 800a248:	a33d      	add	r3, pc, #244	; (adr r3, 800a340 <__kernel_cos+0x148>)
 800a24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24e:	f7f6 f825 	bl	800029c <__adddf3>
 800a252:	4622      	mov	r2, r4
 800a254:	462b      	mov	r3, r5
 800a256:	f7f6 f9d7 	bl	8000608 <__aeabi_dmul>
 800a25a:	a33b      	add	r3, pc, #236	; (adr r3, 800a348 <__kernel_cos+0x150>)
 800a25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a260:	f7f6 f81a 	bl	8000298 <__aeabi_dsub>
 800a264:	4622      	mov	r2, r4
 800a266:	462b      	mov	r3, r5
 800a268:	f7f6 f9ce 	bl	8000608 <__aeabi_dmul>
 800a26c:	a338      	add	r3, pc, #224	; (adr r3, 800a350 <__kernel_cos+0x158>)
 800a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a272:	f7f6 f813 	bl	800029c <__adddf3>
 800a276:	4622      	mov	r2, r4
 800a278:	462b      	mov	r3, r5
 800a27a:	f7f6 f9c5 	bl	8000608 <__aeabi_dmul>
 800a27e:	a336      	add	r3, pc, #216	; (adr r3, 800a358 <__kernel_cos+0x160>)
 800a280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a284:	f7f6 f808 	bl	8000298 <__aeabi_dsub>
 800a288:	4622      	mov	r2, r4
 800a28a:	462b      	mov	r3, r5
 800a28c:	f7f6 f9bc 	bl	8000608 <__aeabi_dmul>
 800a290:	a333      	add	r3, pc, #204	; (adr r3, 800a360 <__kernel_cos+0x168>)
 800a292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a296:	f7f6 f801 	bl	800029c <__adddf3>
 800a29a:	4622      	mov	r2, r4
 800a29c:	462b      	mov	r3, r5
 800a29e:	f7f6 f9b3 	bl	8000608 <__aeabi_dmul>
 800a2a2:	4622      	mov	r2, r4
 800a2a4:	462b      	mov	r3, r5
 800a2a6:	f7f6 f9af 	bl	8000608 <__aeabi_dmul>
 800a2aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	460d      	mov	r5, r1
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	4639      	mov	r1, r7
 800a2b6:	f7f6 f9a7 	bl	8000608 <__aeabi_dmul>
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	4602      	mov	r2, r0
 800a2be:	4629      	mov	r1, r5
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	f7f5 ffe9 	bl	8000298 <__aeabi_dsub>
 800a2c6:	4b2b      	ldr	r3, [pc, #172]	; (800a374 <__kernel_cos+0x17c>)
 800a2c8:	4598      	cmp	r8, r3
 800a2ca:	4606      	mov	r6, r0
 800a2cc:	460f      	mov	r7, r1
 800a2ce:	dc10      	bgt.n	800a2f2 <__kernel_cos+0xfa>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4650      	mov	r0, sl
 800a2d6:	4659      	mov	r1, fp
 800a2d8:	f7f5 ffde 	bl	8000298 <__aeabi_dsub>
 800a2dc:	460b      	mov	r3, r1
 800a2de:	4926      	ldr	r1, [pc, #152]	; (800a378 <__kernel_cos+0x180>)
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	f7f5 ffd8 	bl	8000298 <__aeabi_dsub>
 800a2e8:	ec41 0b10 	vmov	d0, r0, r1
 800a2ec:	b003      	add	sp, #12
 800a2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f2:	4b22      	ldr	r3, [pc, #136]	; (800a37c <__kernel_cos+0x184>)
 800a2f4:	4920      	ldr	r1, [pc, #128]	; (800a378 <__kernel_cos+0x180>)
 800a2f6:	4598      	cmp	r8, r3
 800a2f8:	bfcc      	ite	gt
 800a2fa:	4d21      	ldrgt	r5, [pc, #132]	; (800a380 <__kernel_cos+0x188>)
 800a2fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a300:	2400      	movs	r4, #0
 800a302:	4622      	mov	r2, r4
 800a304:	462b      	mov	r3, r5
 800a306:	2000      	movs	r0, #0
 800a308:	f7f5 ffc6 	bl	8000298 <__aeabi_dsub>
 800a30c:	4622      	mov	r2, r4
 800a30e:	4680      	mov	r8, r0
 800a310:	4689      	mov	r9, r1
 800a312:	462b      	mov	r3, r5
 800a314:	4650      	mov	r0, sl
 800a316:	4659      	mov	r1, fp
 800a318:	f7f5 ffbe 	bl	8000298 <__aeabi_dsub>
 800a31c:	4632      	mov	r2, r6
 800a31e:	463b      	mov	r3, r7
 800a320:	f7f5 ffba 	bl	8000298 <__aeabi_dsub>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	4640      	mov	r0, r8
 800a32a:	4649      	mov	r1, r9
 800a32c:	e7da      	b.n	800a2e4 <__kernel_cos+0xec>
 800a32e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a368 <__kernel_cos+0x170>
 800a332:	e7db      	b.n	800a2ec <__kernel_cos+0xf4>
 800a334:	f3af 8000 	nop.w
 800a338:	be8838d4 	.word	0xbe8838d4
 800a33c:	bda8fae9 	.word	0xbda8fae9
 800a340:	bdb4b1c4 	.word	0xbdb4b1c4
 800a344:	3e21ee9e 	.word	0x3e21ee9e
 800a348:	809c52ad 	.word	0x809c52ad
 800a34c:	3e927e4f 	.word	0x3e927e4f
 800a350:	19cb1590 	.word	0x19cb1590
 800a354:	3efa01a0 	.word	0x3efa01a0
 800a358:	16c15177 	.word	0x16c15177
 800a35c:	3f56c16c 	.word	0x3f56c16c
 800a360:	5555554c 	.word	0x5555554c
 800a364:	3fa55555 	.word	0x3fa55555
 800a368:	00000000 	.word	0x00000000
 800a36c:	3ff00000 	.word	0x3ff00000
 800a370:	3fe00000 	.word	0x3fe00000
 800a374:	3fd33332 	.word	0x3fd33332
 800a378:	3ff00000 	.word	0x3ff00000
 800a37c:	3fe90000 	.word	0x3fe90000
 800a380:	3fd20000 	.word	0x3fd20000
 800a384:	00000000 	.word	0x00000000

0800a388 <__kernel_rem_pio2>:
 800a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38c:	ed2d 8b02 	vpush	{d8}
 800a390:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a394:	f112 0f14 	cmn.w	r2, #20
 800a398:	9308      	str	r3, [sp, #32]
 800a39a:	9101      	str	r1, [sp, #4]
 800a39c:	4bc6      	ldr	r3, [pc, #792]	; (800a6b8 <__kernel_rem_pio2+0x330>)
 800a39e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a3a0:	9009      	str	r0, [sp, #36]	; 0x24
 800a3a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a3a6:	9304      	str	r3, [sp, #16]
 800a3a8:	9b08      	ldr	r3, [sp, #32]
 800a3aa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a3ae:	bfa8      	it	ge
 800a3b0:	1ed4      	subge	r4, r2, #3
 800a3b2:	9306      	str	r3, [sp, #24]
 800a3b4:	bfb2      	itee	lt
 800a3b6:	2400      	movlt	r4, #0
 800a3b8:	2318      	movge	r3, #24
 800a3ba:	fb94 f4f3 	sdivge	r4, r4, r3
 800a3be:	f06f 0317 	mvn.w	r3, #23
 800a3c2:	fb04 3303 	mla	r3, r4, r3, r3
 800a3c6:	eb03 0a02 	add.w	sl, r3, r2
 800a3ca:	9b04      	ldr	r3, [sp, #16]
 800a3cc:	9a06      	ldr	r2, [sp, #24]
 800a3ce:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a6a8 <__kernel_rem_pio2+0x320>
 800a3d2:	eb03 0802 	add.w	r8, r3, r2
 800a3d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a3d8:	1aa7      	subs	r7, r4, r2
 800a3da:	ae20      	add	r6, sp, #128	; 0x80
 800a3dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a3e0:	2500      	movs	r5, #0
 800a3e2:	4545      	cmp	r5, r8
 800a3e4:	dd18      	ble.n	800a418 <__kernel_rem_pio2+0x90>
 800a3e6:	9b08      	ldr	r3, [sp, #32]
 800a3e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a3ec:	aa20      	add	r2, sp, #128	; 0x80
 800a3ee:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800a6a8 <__kernel_rem_pio2+0x320>
 800a3f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a3f6:	f1c3 0301 	rsb	r3, r3, #1
 800a3fa:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a3fe:	9307      	str	r3, [sp, #28]
 800a400:	9b07      	ldr	r3, [sp, #28]
 800a402:	9a04      	ldr	r2, [sp, #16]
 800a404:	4443      	add	r3, r8
 800a406:	429a      	cmp	r2, r3
 800a408:	db2f      	blt.n	800a46a <__kernel_rem_pio2+0xe2>
 800a40a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a40e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a412:	462f      	mov	r7, r5
 800a414:	2600      	movs	r6, #0
 800a416:	e01b      	b.n	800a450 <__kernel_rem_pio2+0xc8>
 800a418:	42ef      	cmn	r7, r5
 800a41a:	d407      	bmi.n	800a42c <__kernel_rem_pio2+0xa4>
 800a41c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a420:	f7f6 f888 	bl	8000534 <__aeabi_i2d>
 800a424:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a428:	3501      	adds	r5, #1
 800a42a:	e7da      	b.n	800a3e2 <__kernel_rem_pio2+0x5a>
 800a42c:	ec51 0b18 	vmov	r0, r1, d8
 800a430:	e7f8      	b.n	800a424 <__kernel_rem_pio2+0x9c>
 800a432:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a436:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a43a:	f7f6 f8e5 	bl	8000608 <__aeabi_dmul>
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a446:	f7f5 ff29 	bl	800029c <__adddf3>
 800a44a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a44e:	3601      	adds	r6, #1
 800a450:	9b06      	ldr	r3, [sp, #24]
 800a452:	429e      	cmp	r6, r3
 800a454:	f1a7 0708 	sub.w	r7, r7, #8
 800a458:	ddeb      	ble.n	800a432 <__kernel_rem_pio2+0xaa>
 800a45a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a45e:	3508      	adds	r5, #8
 800a460:	ecab 7b02 	vstmia	fp!, {d7}
 800a464:	f108 0801 	add.w	r8, r8, #1
 800a468:	e7ca      	b.n	800a400 <__kernel_rem_pio2+0x78>
 800a46a:	9b04      	ldr	r3, [sp, #16]
 800a46c:	aa0c      	add	r2, sp, #48	; 0x30
 800a46e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a472:	930b      	str	r3, [sp, #44]	; 0x2c
 800a474:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a476:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a47a:	9c04      	ldr	r4, [sp, #16]
 800a47c:	930a      	str	r3, [sp, #40]	; 0x28
 800a47e:	ab98      	add	r3, sp, #608	; 0x260
 800a480:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a484:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a488:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800a48c:	f8cd b008 	str.w	fp, [sp, #8]
 800a490:	4625      	mov	r5, r4
 800a492:	2d00      	cmp	r5, #0
 800a494:	dc78      	bgt.n	800a588 <__kernel_rem_pio2+0x200>
 800a496:	ec47 6b10 	vmov	d0, r6, r7
 800a49a:	4650      	mov	r0, sl
 800a49c:	f000 fda8 	bl	800aff0 <scalbn>
 800a4a0:	ec57 6b10 	vmov	r6, r7, d0
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a4aa:	ee10 0a10 	vmov	r0, s0
 800a4ae:	4639      	mov	r1, r7
 800a4b0:	f7f6 f8aa 	bl	8000608 <__aeabi_dmul>
 800a4b4:	ec41 0b10 	vmov	d0, r0, r1
 800a4b8:	f000 fd12 	bl	800aee0 <floor>
 800a4bc:	4b7f      	ldr	r3, [pc, #508]	; (800a6bc <__kernel_rem_pio2+0x334>)
 800a4be:	ec51 0b10 	vmov	r0, r1, d0
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f7f6 f8a0 	bl	8000608 <__aeabi_dmul>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	4639      	mov	r1, r7
 800a4d0:	f7f5 fee2 	bl	8000298 <__aeabi_dsub>
 800a4d4:	460f      	mov	r7, r1
 800a4d6:	4606      	mov	r6, r0
 800a4d8:	f7f6 fb46 	bl	8000b68 <__aeabi_d2iz>
 800a4dc:	9007      	str	r0, [sp, #28]
 800a4de:	f7f6 f829 	bl	8000534 <__aeabi_i2d>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	4630      	mov	r0, r6
 800a4e8:	4639      	mov	r1, r7
 800a4ea:	f7f5 fed5 	bl	8000298 <__aeabi_dsub>
 800a4ee:	f1ba 0f00 	cmp.w	sl, #0
 800a4f2:	4606      	mov	r6, r0
 800a4f4:	460f      	mov	r7, r1
 800a4f6:	dd70      	ble.n	800a5da <__kernel_rem_pio2+0x252>
 800a4f8:	1e62      	subs	r2, r4, #1
 800a4fa:	ab0c      	add	r3, sp, #48	; 0x30
 800a4fc:	9d07      	ldr	r5, [sp, #28]
 800a4fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a502:	f1ca 0118 	rsb	r1, sl, #24
 800a506:	fa40 f301 	asr.w	r3, r0, r1
 800a50a:	441d      	add	r5, r3
 800a50c:	408b      	lsls	r3, r1
 800a50e:	1ac0      	subs	r0, r0, r3
 800a510:	ab0c      	add	r3, sp, #48	; 0x30
 800a512:	9507      	str	r5, [sp, #28]
 800a514:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a518:	f1ca 0317 	rsb	r3, sl, #23
 800a51c:	fa40 f303 	asr.w	r3, r0, r3
 800a520:	9302      	str	r3, [sp, #8]
 800a522:	9b02      	ldr	r3, [sp, #8]
 800a524:	2b00      	cmp	r3, #0
 800a526:	dd66      	ble.n	800a5f6 <__kernel_rem_pio2+0x26e>
 800a528:	9b07      	ldr	r3, [sp, #28]
 800a52a:	2200      	movs	r2, #0
 800a52c:	3301      	adds	r3, #1
 800a52e:	9307      	str	r3, [sp, #28]
 800a530:	4615      	mov	r5, r2
 800a532:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a536:	4294      	cmp	r4, r2
 800a538:	f300 8099 	bgt.w	800a66e <__kernel_rem_pio2+0x2e6>
 800a53c:	f1ba 0f00 	cmp.w	sl, #0
 800a540:	dd07      	ble.n	800a552 <__kernel_rem_pio2+0x1ca>
 800a542:	f1ba 0f01 	cmp.w	sl, #1
 800a546:	f000 80a5 	beq.w	800a694 <__kernel_rem_pio2+0x30c>
 800a54a:	f1ba 0f02 	cmp.w	sl, #2
 800a54e:	f000 80c1 	beq.w	800a6d4 <__kernel_rem_pio2+0x34c>
 800a552:	9b02      	ldr	r3, [sp, #8]
 800a554:	2b02      	cmp	r3, #2
 800a556:	d14e      	bne.n	800a5f6 <__kernel_rem_pio2+0x26e>
 800a558:	4632      	mov	r2, r6
 800a55a:	463b      	mov	r3, r7
 800a55c:	4958      	ldr	r1, [pc, #352]	; (800a6c0 <__kernel_rem_pio2+0x338>)
 800a55e:	2000      	movs	r0, #0
 800a560:	f7f5 fe9a 	bl	8000298 <__aeabi_dsub>
 800a564:	4606      	mov	r6, r0
 800a566:	460f      	mov	r7, r1
 800a568:	2d00      	cmp	r5, #0
 800a56a:	d044      	beq.n	800a5f6 <__kernel_rem_pio2+0x26e>
 800a56c:	4650      	mov	r0, sl
 800a56e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a6b0 <__kernel_rem_pio2+0x328>
 800a572:	f000 fd3d 	bl	800aff0 <scalbn>
 800a576:	4630      	mov	r0, r6
 800a578:	4639      	mov	r1, r7
 800a57a:	ec53 2b10 	vmov	r2, r3, d0
 800a57e:	f7f5 fe8b 	bl	8000298 <__aeabi_dsub>
 800a582:	4606      	mov	r6, r0
 800a584:	460f      	mov	r7, r1
 800a586:	e036      	b.n	800a5f6 <__kernel_rem_pio2+0x26e>
 800a588:	4b4e      	ldr	r3, [pc, #312]	; (800a6c4 <__kernel_rem_pio2+0x33c>)
 800a58a:	2200      	movs	r2, #0
 800a58c:	4630      	mov	r0, r6
 800a58e:	4639      	mov	r1, r7
 800a590:	f7f6 f83a 	bl	8000608 <__aeabi_dmul>
 800a594:	f7f6 fae8 	bl	8000b68 <__aeabi_d2iz>
 800a598:	f7f5 ffcc 	bl	8000534 <__aeabi_i2d>
 800a59c:	4b4a      	ldr	r3, [pc, #296]	; (800a6c8 <__kernel_rem_pio2+0x340>)
 800a59e:	2200      	movs	r2, #0
 800a5a0:	4680      	mov	r8, r0
 800a5a2:	4689      	mov	r9, r1
 800a5a4:	f7f6 f830 	bl	8000608 <__aeabi_dmul>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	4639      	mov	r1, r7
 800a5b0:	f7f5 fe72 	bl	8000298 <__aeabi_dsub>
 800a5b4:	f7f6 fad8 	bl	8000b68 <__aeabi_d2iz>
 800a5b8:	9b02      	ldr	r3, [sp, #8]
 800a5ba:	f843 0b04 	str.w	r0, [r3], #4
 800a5be:	3d01      	subs	r5, #1
 800a5c0:	9302      	str	r3, [sp, #8]
 800a5c2:	ab70      	add	r3, sp, #448	; 0x1c0
 800a5c4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5cc:	4640      	mov	r0, r8
 800a5ce:	4649      	mov	r1, r9
 800a5d0:	f7f5 fe64 	bl	800029c <__adddf3>
 800a5d4:	4606      	mov	r6, r0
 800a5d6:	460f      	mov	r7, r1
 800a5d8:	e75b      	b.n	800a492 <__kernel_rem_pio2+0x10a>
 800a5da:	d105      	bne.n	800a5e8 <__kernel_rem_pio2+0x260>
 800a5dc:	1e63      	subs	r3, r4, #1
 800a5de:	aa0c      	add	r2, sp, #48	; 0x30
 800a5e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a5e4:	15c3      	asrs	r3, r0, #23
 800a5e6:	e79b      	b.n	800a520 <__kernel_rem_pio2+0x198>
 800a5e8:	4b38      	ldr	r3, [pc, #224]	; (800a6cc <__kernel_rem_pio2+0x344>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f7f6 fa92 	bl	8000b14 <__aeabi_dcmpge>
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	d139      	bne.n	800a668 <__kernel_rem_pio2+0x2e0>
 800a5f4:	9002      	str	r0, [sp, #8]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	4639      	mov	r1, r7
 800a5fe:	f7f6 fa6b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a602:	2800      	cmp	r0, #0
 800a604:	f000 80b4 	beq.w	800a770 <__kernel_rem_pio2+0x3e8>
 800a608:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800a60c:	465b      	mov	r3, fp
 800a60e:	2200      	movs	r2, #0
 800a610:	9904      	ldr	r1, [sp, #16]
 800a612:	428b      	cmp	r3, r1
 800a614:	da65      	bge.n	800a6e2 <__kernel_rem_pio2+0x35a>
 800a616:	2a00      	cmp	r2, #0
 800a618:	d07b      	beq.n	800a712 <__kernel_rem_pio2+0x38a>
 800a61a:	ab0c      	add	r3, sp, #48	; 0x30
 800a61c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a620:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 80a0 	beq.w	800a76a <__kernel_rem_pio2+0x3e2>
 800a62a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800a6b0 <__kernel_rem_pio2+0x328>
 800a62e:	4650      	mov	r0, sl
 800a630:	f000 fcde 	bl	800aff0 <scalbn>
 800a634:	4f23      	ldr	r7, [pc, #140]	; (800a6c4 <__kernel_rem_pio2+0x33c>)
 800a636:	ec55 4b10 	vmov	r4, r5, d0
 800a63a:	46d8      	mov	r8, fp
 800a63c:	2600      	movs	r6, #0
 800a63e:	f1b8 0f00 	cmp.w	r8, #0
 800a642:	f280 80cf 	bge.w	800a7e4 <__kernel_rem_pio2+0x45c>
 800a646:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800a6a8 <__kernel_rem_pio2+0x320>
 800a64a:	465f      	mov	r7, fp
 800a64c:	f04f 0800 	mov.w	r8, #0
 800a650:	2f00      	cmp	r7, #0
 800a652:	f2c0 80fd 	blt.w	800a850 <__kernel_rem_pio2+0x4c8>
 800a656:	ab70      	add	r3, sp, #448	; 0x1c0
 800a658:	f8df a074 	ldr.w	sl, [pc, #116]	; 800a6d0 <__kernel_rem_pio2+0x348>
 800a65c:	ec55 4b18 	vmov	r4, r5, d8
 800a660:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800a664:	2600      	movs	r6, #0
 800a666:	e0e5      	b.n	800a834 <__kernel_rem_pio2+0x4ac>
 800a668:	2302      	movs	r3, #2
 800a66a:	9302      	str	r3, [sp, #8]
 800a66c:	e75c      	b.n	800a528 <__kernel_rem_pio2+0x1a0>
 800a66e:	f8db 3000 	ldr.w	r3, [fp]
 800a672:	b955      	cbnz	r5, 800a68a <__kernel_rem_pio2+0x302>
 800a674:	b123      	cbz	r3, 800a680 <__kernel_rem_pio2+0x2f8>
 800a676:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a67a:	f8cb 3000 	str.w	r3, [fp]
 800a67e:	2301      	movs	r3, #1
 800a680:	3201      	adds	r2, #1
 800a682:	f10b 0b04 	add.w	fp, fp, #4
 800a686:	461d      	mov	r5, r3
 800a688:	e755      	b.n	800a536 <__kernel_rem_pio2+0x1ae>
 800a68a:	1acb      	subs	r3, r1, r3
 800a68c:	f8cb 3000 	str.w	r3, [fp]
 800a690:	462b      	mov	r3, r5
 800a692:	e7f5      	b.n	800a680 <__kernel_rem_pio2+0x2f8>
 800a694:	1e62      	subs	r2, r4, #1
 800a696:	ab0c      	add	r3, sp, #48	; 0x30
 800a698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a69c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a6a0:	a90c      	add	r1, sp, #48	; 0x30
 800a6a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a6a6:	e754      	b.n	800a552 <__kernel_rem_pio2+0x1ca>
	...
 800a6b4:	3ff00000 	.word	0x3ff00000
 800a6b8:	0800b898 	.word	0x0800b898
 800a6bc:	40200000 	.word	0x40200000
 800a6c0:	3ff00000 	.word	0x3ff00000
 800a6c4:	3e700000 	.word	0x3e700000
 800a6c8:	41700000 	.word	0x41700000
 800a6cc:	3fe00000 	.word	0x3fe00000
 800a6d0:	0800b858 	.word	0x0800b858
 800a6d4:	1e62      	subs	r2, r4, #1
 800a6d6:	ab0c      	add	r3, sp, #48	; 0x30
 800a6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6dc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a6e0:	e7de      	b.n	800a6a0 <__kernel_rem_pio2+0x318>
 800a6e2:	a90c      	add	r1, sp, #48	; 0x30
 800a6e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	430a      	orrs	r2, r1
 800a6ec:	e790      	b.n	800a610 <__kernel_rem_pio2+0x288>
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a6f4:	2900      	cmp	r1, #0
 800a6f6:	d0fa      	beq.n	800a6ee <__kernel_rem_pio2+0x366>
 800a6f8:	9a08      	ldr	r2, [sp, #32]
 800a6fa:	18e3      	adds	r3, r4, r3
 800a6fc:	18a6      	adds	r6, r4, r2
 800a6fe:	aa20      	add	r2, sp, #128	; 0x80
 800a700:	1c65      	adds	r5, r4, #1
 800a702:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a706:	9302      	str	r3, [sp, #8]
 800a708:	9b02      	ldr	r3, [sp, #8]
 800a70a:	42ab      	cmp	r3, r5
 800a70c:	da04      	bge.n	800a718 <__kernel_rem_pio2+0x390>
 800a70e:	461c      	mov	r4, r3
 800a710:	e6b5      	b.n	800a47e <__kernel_rem_pio2+0xf6>
 800a712:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a714:	2301      	movs	r3, #1
 800a716:	e7eb      	b.n	800a6f0 <__kernel_rem_pio2+0x368>
 800a718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a71a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a71e:	f7f5 ff09 	bl	8000534 <__aeabi_i2d>
 800a722:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a728:	46b3      	mov	fp, r6
 800a72a:	461c      	mov	r4, r3
 800a72c:	2700      	movs	r7, #0
 800a72e:	f04f 0800 	mov.w	r8, #0
 800a732:	f04f 0900 	mov.w	r9, #0
 800a736:	9b06      	ldr	r3, [sp, #24]
 800a738:	429f      	cmp	r7, r3
 800a73a:	dd06      	ble.n	800a74a <__kernel_rem_pio2+0x3c2>
 800a73c:	ab70      	add	r3, sp, #448	; 0x1c0
 800a73e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a742:	e9c3 8900 	strd	r8, r9, [r3]
 800a746:	3501      	adds	r5, #1
 800a748:	e7de      	b.n	800a708 <__kernel_rem_pio2+0x380>
 800a74a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a74e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a752:	f7f5 ff59 	bl	8000608 <__aeabi_dmul>
 800a756:	4602      	mov	r2, r0
 800a758:	460b      	mov	r3, r1
 800a75a:	4640      	mov	r0, r8
 800a75c:	4649      	mov	r1, r9
 800a75e:	f7f5 fd9d 	bl	800029c <__adddf3>
 800a762:	3701      	adds	r7, #1
 800a764:	4680      	mov	r8, r0
 800a766:	4689      	mov	r9, r1
 800a768:	e7e5      	b.n	800a736 <__kernel_rem_pio2+0x3ae>
 800a76a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a76e:	e754      	b.n	800a61a <__kernel_rem_pio2+0x292>
 800a770:	ec47 6b10 	vmov	d0, r6, r7
 800a774:	f1ca 0000 	rsb	r0, sl, #0
 800a778:	f000 fc3a 	bl	800aff0 <scalbn>
 800a77c:	ec57 6b10 	vmov	r6, r7, d0
 800a780:	4b9f      	ldr	r3, [pc, #636]	; (800aa00 <__kernel_rem_pio2+0x678>)
 800a782:	ee10 0a10 	vmov	r0, s0
 800a786:	2200      	movs	r2, #0
 800a788:	4639      	mov	r1, r7
 800a78a:	f7f6 f9c3 	bl	8000b14 <__aeabi_dcmpge>
 800a78e:	b300      	cbz	r0, 800a7d2 <__kernel_rem_pio2+0x44a>
 800a790:	4b9c      	ldr	r3, [pc, #624]	; (800aa04 <__kernel_rem_pio2+0x67c>)
 800a792:	2200      	movs	r2, #0
 800a794:	4630      	mov	r0, r6
 800a796:	4639      	mov	r1, r7
 800a798:	f7f5 ff36 	bl	8000608 <__aeabi_dmul>
 800a79c:	f7f6 f9e4 	bl	8000b68 <__aeabi_d2iz>
 800a7a0:	4605      	mov	r5, r0
 800a7a2:	f7f5 fec7 	bl	8000534 <__aeabi_i2d>
 800a7a6:	4b96      	ldr	r3, [pc, #600]	; (800aa00 <__kernel_rem_pio2+0x678>)
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f7f5 ff2d 	bl	8000608 <__aeabi_dmul>
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	4639      	mov	r1, r7
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	f7f5 fd6f 	bl	8000298 <__aeabi_dsub>
 800a7ba:	f7f6 f9d5 	bl	8000b68 <__aeabi_d2iz>
 800a7be:	f104 0b01 	add.w	fp, r4, #1
 800a7c2:	ab0c      	add	r3, sp, #48	; 0x30
 800a7c4:	f10a 0a18 	add.w	sl, sl, #24
 800a7c8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a7cc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800a7d0:	e72b      	b.n	800a62a <__kernel_rem_pio2+0x2a2>
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	f7f6 f9c7 	bl	8000b68 <__aeabi_d2iz>
 800a7da:	ab0c      	add	r3, sp, #48	; 0x30
 800a7dc:	46a3      	mov	fp, r4
 800a7de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a7e2:	e722      	b.n	800a62a <__kernel_rem_pio2+0x2a2>
 800a7e4:	ab70      	add	r3, sp, #448	; 0x1c0
 800a7e6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800a7ea:	ab0c      	add	r3, sp, #48	; 0x30
 800a7ec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a7f0:	f7f5 fea0 	bl	8000534 <__aeabi_i2d>
 800a7f4:	4622      	mov	r2, r4
 800a7f6:	462b      	mov	r3, r5
 800a7f8:	f7f5 ff06 	bl	8000608 <__aeabi_dmul>
 800a7fc:	4632      	mov	r2, r6
 800a7fe:	e9c9 0100 	strd	r0, r1, [r9]
 800a802:	463b      	mov	r3, r7
 800a804:	4620      	mov	r0, r4
 800a806:	4629      	mov	r1, r5
 800a808:	f7f5 fefe 	bl	8000608 <__aeabi_dmul>
 800a80c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a810:	4604      	mov	r4, r0
 800a812:	460d      	mov	r5, r1
 800a814:	e713      	b.n	800a63e <__kernel_rem_pio2+0x2b6>
 800a816:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a81a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a81e:	f7f5 fef3 	bl	8000608 <__aeabi_dmul>
 800a822:	4602      	mov	r2, r0
 800a824:	460b      	mov	r3, r1
 800a826:	4620      	mov	r0, r4
 800a828:	4629      	mov	r1, r5
 800a82a:	f7f5 fd37 	bl	800029c <__adddf3>
 800a82e:	3601      	adds	r6, #1
 800a830:	4604      	mov	r4, r0
 800a832:	460d      	mov	r5, r1
 800a834:	9b04      	ldr	r3, [sp, #16]
 800a836:	429e      	cmp	r6, r3
 800a838:	dc01      	bgt.n	800a83e <__kernel_rem_pio2+0x4b6>
 800a83a:	45b0      	cmp	r8, r6
 800a83c:	daeb      	bge.n	800a816 <__kernel_rem_pio2+0x48e>
 800a83e:	ab48      	add	r3, sp, #288	; 0x120
 800a840:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a844:	e9c3 4500 	strd	r4, r5, [r3]
 800a848:	3f01      	subs	r7, #1
 800a84a:	f108 0801 	add.w	r8, r8, #1
 800a84e:	e6ff      	b.n	800a650 <__kernel_rem_pio2+0x2c8>
 800a850:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a852:	2b02      	cmp	r3, #2
 800a854:	dc0b      	bgt.n	800a86e <__kernel_rem_pio2+0x4e6>
 800a856:	2b00      	cmp	r3, #0
 800a858:	dc6e      	bgt.n	800a938 <__kernel_rem_pio2+0x5b0>
 800a85a:	d045      	beq.n	800a8e8 <__kernel_rem_pio2+0x560>
 800a85c:	9b07      	ldr	r3, [sp, #28]
 800a85e:	f003 0007 	and.w	r0, r3, #7
 800a862:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a866:	ecbd 8b02 	vpop	{d8}
 800a86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a86e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a870:	2b03      	cmp	r3, #3
 800a872:	d1f3      	bne.n	800a85c <__kernel_rem_pio2+0x4d4>
 800a874:	ab48      	add	r3, sp, #288	; 0x120
 800a876:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800a87a:	46d0      	mov	r8, sl
 800a87c:	46d9      	mov	r9, fp
 800a87e:	f1b9 0f00 	cmp.w	r9, #0
 800a882:	f1a8 0808 	sub.w	r8, r8, #8
 800a886:	dc64      	bgt.n	800a952 <__kernel_rem_pio2+0x5ca>
 800a888:	465c      	mov	r4, fp
 800a88a:	2c01      	cmp	r4, #1
 800a88c:	f1aa 0a08 	sub.w	sl, sl, #8
 800a890:	dc7e      	bgt.n	800a990 <__kernel_rem_pio2+0x608>
 800a892:	2000      	movs	r0, #0
 800a894:	2100      	movs	r1, #0
 800a896:	f1bb 0f01 	cmp.w	fp, #1
 800a89a:	f300 8097 	bgt.w	800a9cc <__kernel_rem_pio2+0x644>
 800a89e:	9b02      	ldr	r3, [sp, #8]
 800a8a0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800a8a4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f040 8099 	bne.w	800a9e0 <__kernel_rem_pio2+0x658>
 800a8ae:	9b01      	ldr	r3, [sp, #4]
 800a8b0:	e9c3 5600 	strd	r5, r6, [r3]
 800a8b4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a8b8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a8bc:	e7ce      	b.n	800a85c <__kernel_rem_pio2+0x4d4>
 800a8be:	ab48      	add	r3, sp, #288	; 0x120
 800a8c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	f7f5 fce8 	bl	800029c <__adddf3>
 800a8cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a8d0:	f1bb 0f00 	cmp.w	fp, #0
 800a8d4:	daf3      	bge.n	800a8be <__kernel_rem_pio2+0x536>
 800a8d6:	9b02      	ldr	r3, [sp, #8]
 800a8d8:	b113      	cbz	r3, 800a8e0 <__kernel_rem_pio2+0x558>
 800a8da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8de:	4619      	mov	r1, r3
 800a8e0:	9b01      	ldr	r3, [sp, #4]
 800a8e2:	e9c3 0100 	strd	r0, r1, [r3]
 800a8e6:	e7b9      	b.n	800a85c <__kernel_rem_pio2+0x4d4>
 800a8e8:	2000      	movs	r0, #0
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	e7f0      	b.n	800a8d0 <__kernel_rem_pio2+0x548>
 800a8ee:	ab48      	add	r3, sp, #288	; 0x120
 800a8f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f8:	f7f5 fcd0 	bl	800029c <__adddf3>
 800a8fc:	3c01      	subs	r4, #1
 800a8fe:	2c00      	cmp	r4, #0
 800a900:	daf5      	bge.n	800a8ee <__kernel_rem_pio2+0x566>
 800a902:	9b02      	ldr	r3, [sp, #8]
 800a904:	b1e3      	cbz	r3, 800a940 <__kernel_rem_pio2+0x5b8>
 800a906:	4602      	mov	r2, r0
 800a908:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a90c:	9c01      	ldr	r4, [sp, #4]
 800a90e:	e9c4 2300 	strd	r2, r3, [r4]
 800a912:	4602      	mov	r2, r0
 800a914:	460b      	mov	r3, r1
 800a916:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800a91a:	f7f5 fcbd 	bl	8000298 <__aeabi_dsub>
 800a91e:	ad4a      	add	r5, sp, #296	; 0x128
 800a920:	2401      	movs	r4, #1
 800a922:	45a3      	cmp	fp, r4
 800a924:	da0f      	bge.n	800a946 <__kernel_rem_pio2+0x5be>
 800a926:	9b02      	ldr	r3, [sp, #8]
 800a928:	b113      	cbz	r3, 800a930 <__kernel_rem_pio2+0x5a8>
 800a92a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a92e:	4619      	mov	r1, r3
 800a930:	9b01      	ldr	r3, [sp, #4]
 800a932:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a936:	e791      	b.n	800a85c <__kernel_rem_pio2+0x4d4>
 800a938:	465c      	mov	r4, fp
 800a93a:	2000      	movs	r0, #0
 800a93c:	2100      	movs	r1, #0
 800a93e:	e7de      	b.n	800a8fe <__kernel_rem_pio2+0x576>
 800a940:	4602      	mov	r2, r0
 800a942:	460b      	mov	r3, r1
 800a944:	e7e2      	b.n	800a90c <__kernel_rem_pio2+0x584>
 800a946:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a94a:	f7f5 fca7 	bl	800029c <__adddf3>
 800a94e:	3401      	adds	r4, #1
 800a950:	e7e7      	b.n	800a922 <__kernel_rem_pio2+0x59a>
 800a952:	e9d8 4500 	ldrd	r4, r5, [r8]
 800a956:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800a95a:	4620      	mov	r0, r4
 800a95c:	4632      	mov	r2, r6
 800a95e:	463b      	mov	r3, r7
 800a960:	4629      	mov	r1, r5
 800a962:	f7f5 fc9b 	bl	800029c <__adddf3>
 800a966:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a96a:	4602      	mov	r2, r0
 800a96c:	460b      	mov	r3, r1
 800a96e:	4620      	mov	r0, r4
 800a970:	4629      	mov	r1, r5
 800a972:	f7f5 fc91 	bl	8000298 <__aeabi_dsub>
 800a976:	4632      	mov	r2, r6
 800a978:	463b      	mov	r3, r7
 800a97a:	f7f5 fc8f 	bl	800029c <__adddf3>
 800a97e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a982:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800a986:	ed88 7b00 	vstr	d7, [r8]
 800a98a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a98e:	e776      	b.n	800a87e <__kernel_rem_pio2+0x4f6>
 800a990:	e9da 8900 	ldrd	r8, r9, [sl]
 800a994:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a998:	4640      	mov	r0, r8
 800a99a:	4632      	mov	r2, r6
 800a99c:	463b      	mov	r3, r7
 800a99e:	4649      	mov	r1, r9
 800a9a0:	f7f5 fc7c 	bl	800029c <__adddf3>
 800a9a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	4640      	mov	r0, r8
 800a9ae:	4649      	mov	r1, r9
 800a9b0:	f7f5 fc72 	bl	8000298 <__aeabi_dsub>
 800a9b4:	4632      	mov	r2, r6
 800a9b6:	463b      	mov	r3, r7
 800a9b8:	f7f5 fc70 	bl	800029c <__adddf3>
 800a9bc:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a9c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a9c4:	ed8a 7b00 	vstr	d7, [sl]
 800a9c8:	3c01      	subs	r4, #1
 800a9ca:	e75e      	b.n	800a88a <__kernel_rem_pio2+0x502>
 800a9cc:	ab48      	add	r3, sp, #288	; 0x120
 800a9ce:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	f7f5 fc61 	bl	800029c <__adddf3>
 800a9da:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a9de:	e75a      	b.n	800a896 <__kernel_rem_pio2+0x50e>
 800a9e0:	9b01      	ldr	r3, [sp, #4]
 800a9e2:	9a01      	ldr	r2, [sp, #4]
 800a9e4:	601d      	str	r5, [r3, #0]
 800a9e6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a9ea:	605c      	str	r4, [r3, #4]
 800a9ec:	609f      	str	r7, [r3, #8]
 800a9ee:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a9f2:	60d3      	str	r3, [r2, #12]
 800a9f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9f8:	6110      	str	r0, [r2, #16]
 800a9fa:	6153      	str	r3, [r2, #20]
 800a9fc:	e72e      	b.n	800a85c <__kernel_rem_pio2+0x4d4>
 800a9fe:	bf00      	nop
 800aa00:	41700000 	.word	0x41700000
 800aa04:	3e700000 	.word	0x3e700000

0800aa08 <__kernel_sin>:
 800aa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0c:	ed2d 8b04 	vpush	{d8-d9}
 800aa10:	eeb0 8a41 	vmov.f32	s16, s2
 800aa14:	eef0 8a61 	vmov.f32	s17, s3
 800aa18:	ec55 4b10 	vmov	r4, r5, d0
 800aa1c:	b083      	sub	sp, #12
 800aa1e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aa22:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800aa26:	9001      	str	r0, [sp, #4]
 800aa28:	da06      	bge.n	800aa38 <__kernel_sin+0x30>
 800aa2a:	ee10 0a10 	vmov	r0, s0
 800aa2e:	4629      	mov	r1, r5
 800aa30:	f7f6 f89a 	bl	8000b68 <__aeabi_d2iz>
 800aa34:	2800      	cmp	r0, #0
 800aa36:	d051      	beq.n	800aadc <__kernel_sin+0xd4>
 800aa38:	4622      	mov	r2, r4
 800aa3a:	462b      	mov	r3, r5
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	4629      	mov	r1, r5
 800aa40:	f7f5 fde2 	bl	8000608 <__aeabi_dmul>
 800aa44:	4682      	mov	sl, r0
 800aa46:	468b      	mov	fp, r1
 800aa48:	4602      	mov	r2, r0
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	4629      	mov	r1, r5
 800aa50:	f7f5 fdda 	bl	8000608 <__aeabi_dmul>
 800aa54:	a341      	add	r3, pc, #260	; (adr r3, 800ab5c <__kernel_sin+0x154>)
 800aa56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5a:	4680      	mov	r8, r0
 800aa5c:	4689      	mov	r9, r1
 800aa5e:	4650      	mov	r0, sl
 800aa60:	4659      	mov	r1, fp
 800aa62:	f7f5 fdd1 	bl	8000608 <__aeabi_dmul>
 800aa66:	a33f      	add	r3, pc, #252	; (adr r3, 800ab64 <__kernel_sin+0x15c>)
 800aa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6c:	f7f5 fc14 	bl	8000298 <__aeabi_dsub>
 800aa70:	4652      	mov	r2, sl
 800aa72:	465b      	mov	r3, fp
 800aa74:	f7f5 fdc8 	bl	8000608 <__aeabi_dmul>
 800aa78:	a33c      	add	r3, pc, #240	; (adr r3, 800ab6c <__kernel_sin+0x164>)
 800aa7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7e:	f7f5 fc0d 	bl	800029c <__adddf3>
 800aa82:	4652      	mov	r2, sl
 800aa84:	465b      	mov	r3, fp
 800aa86:	f7f5 fdbf 	bl	8000608 <__aeabi_dmul>
 800aa8a:	a33a      	add	r3, pc, #232	; (adr r3, 800ab74 <__kernel_sin+0x16c>)
 800aa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa90:	f7f5 fc02 	bl	8000298 <__aeabi_dsub>
 800aa94:	4652      	mov	r2, sl
 800aa96:	465b      	mov	r3, fp
 800aa98:	f7f5 fdb6 	bl	8000608 <__aeabi_dmul>
 800aa9c:	a337      	add	r3, pc, #220	; (adr r3, 800ab7c <__kernel_sin+0x174>)
 800aa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa2:	f7f5 fbfb 	bl	800029c <__adddf3>
 800aaa6:	9b01      	ldr	r3, [sp, #4]
 800aaa8:	4606      	mov	r6, r0
 800aaaa:	460f      	mov	r7, r1
 800aaac:	b9eb      	cbnz	r3, 800aaea <__kernel_sin+0xe2>
 800aaae:	4602      	mov	r2, r0
 800aab0:	460b      	mov	r3, r1
 800aab2:	4650      	mov	r0, sl
 800aab4:	4659      	mov	r1, fp
 800aab6:	f7f5 fda7 	bl	8000608 <__aeabi_dmul>
 800aaba:	a325      	add	r3, pc, #148	; (adr r3, 800ab50 <__kernel_sin+0x148>)
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	f7f5 fbea 	bl	8000298 <__aeabi_dsub>
 800aac4:	4642      	mov	r2, r8
 800aac6:	464b      	mov	r3, r9
 800aac8:	f7f5 fd9e 	bl	8000608 <__aeabi_dmul>
 800aacc:	4602      	mov	r2, r0
 800aace:	460b      	mov	r3, r1
 800aad0:	4620      	mov	r0, r4
 800aad2:	4629      	mov	r1, r5
 800aad4:	f7f5 fbe2 	bl	800029c <__adddf3>
 800aad8:	4604      	mov	r4, r0
 800aada:	460d      	mov	r5, r1
 800aadc:	ec45 4b10 	vmov	d0, r4, r5
 800aae0:	b003      	add	sp, #12
 800aae2:	ecbd 8b04 	vpop	{d8-d9}
 800aae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaea:	4b1b      	ldr	r3, [pc, #108]	; (800ab58 <__kernel_sin+0x150>)
 800aaec:	ec51 0b18 	vmov	r0, r1, d8
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f7f5 fd89 	bl	8000608 <__aeabi_dmul>
 800aaf6:	4632      	mov	r2, r6
 800aaf8:	ec41 0b19 	vmov	d9, r0, r1
 800aafc:	463b      	mov	r3, r7
 800aafe:	4640      	mov	r0, r8
 800ab00:	4649      	mov	r1, r9
 800ab02:	f7f5 fd81 	bl	8000608 <__aeabi_dmul>
 800ab06:	4602      	mov	r2, r0
 800ab08:	460b      	mov	r3, r1
 800ab0a:	ec51 0b19 	vmov	r0, r1, d9
 800ab0e:	f7f5 fbc3 	bl	8000298 <__aeabi_dsub>
 800ab12:	4652      	mov	r2, sl
 800ab14:	465b      	mov	r3, fp
 800ab16:	f7f5 fd77 	bl	8000608 <__aeabi_dmul>
 800ab1a:	ec53 2b18 	vmov	r2, r3, d8
 800ab1e:	f7f5 fbbb 	bl	8000298 <__aeabi_dsub>
 800ab22:	a30b      	add	r3, pc, #44	; (adr r3, 800ab50 <__kernel_sin+0x148>)
 800ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab28:	4606      	mov	r6, r0
 800ab2a:	460f      	mov	r7, r1
 800ab2c:	4640      	mov	r0, r8
 800ab2e:	4649      	mov	r1, r9
 800ab30:	f7f5 fd6a 	bl	8000608 <__aeabi_dmul>
 800ab34:	4602      	mov	r2, r0
 800ab36:	460b      	mov	r3, r1
 800ab38:	4630      	mov	r0, r6
 800ab3a:	4639      	mov	r1, r7
 800ab3c:	f7f5 fbae 	bl	800029c <__adddf3>
 800ab40:	4602      	mov	r2, r0
 800ab42:	460b      	mov	r3, r1
 800ab44:	4620      	mov	r0, r4
 800ab46:	4629      	mov	r1, r5
 800ab48:	f7f5 fba6 	bl	8000298 <__aeabi_dsub>
 800ab4c:	e7c4      	b.n	800aad8 <__kernel_sin+0xd0>
 800ab4e:	bf00      	nop
 800ab50:	55555549 	.word	0x55555549
 800ab54:	3fc55555 	.word	0x3fc55555
 800ab58:	3fe00000 	.word	0x3fe00000
 800ab5c:	5acfd57c 	.word	0x5acfd57c
 800ab60:	3de5d93a 	.word	0x3de5d93a
 800ab64:	8a2b9ceb 	.word	0x8a2b9ceb
 800ab68:	3e5ae5e6 	.word	0x3e5ae5e6
 800ab6c:	57b1fe7d 	.word	0x57b1fe7d
 800ab70:	3ec71de3 	.word	0x3ec71de3
 800ab74:	19c161d5 	.word	0x19c161d5
 800ab78:	3f2a01a0 	.word	0x3f2a01a0
 800ab7c:	1110f8a6 	.word	0x1110f8a6
 800ab80:	3f811111 	.word	0x3f811111
 800ab84:	00000000 	.word	0x00000000

0800ab88 <atan>:
 800ab88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8c:	ec55 4b10 	vmov	r4, r5, d0
 800ab90:	4bc3      	ldr	r3, [pc, #780]	; (800aea0 <atan+0x318>)
 800ab92:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ab96:	429e      	cmp	r6, r3
 800ab98:	46ab      	mov	fp, r5
 800ab9a:	dd18      	ble.n	800abce <atan+0x46>
 800ab9c:	4bc1      	ldr	r3, [pc, #772]	; (800aea4 <atan+0x31c>)
 800ab9e:	429e      	cmp	r6, r3
 800aba0:	dc01      	bgt.n	800aba6 <atan+0x1e>
 800aba2:	d109      	bne.n	800abb8 <atan+0x30>
 800aba4:	b144      	cbz	r4, 800abb8 <atan+0x30>
 800aba6:	4622      	mov	r2, r4
 800aba8:	462b      	mov	r3, r5
 800abaa:	4620      	mov	r0, r4
 800abac:	4629      	mov	r1, r5
 800abae:	f7f5 fb75 	bl	800029c <__adddf3>
 800abb2:	4604      	mov	r4, r0
 800abb4:	460d      	mov	r5, r1
 800abb6:	e006      	b.n	800abc6 <atan+0x3e>
 800abb8:	f1bb 0f00 	cmp.w	fp, #0
 800abbc:	f300 8131 	bgt.w	800ae22 <atan+0x29a>
 800abc0:	a59b      	add	r5, pc, #620	; (adr r5, 800ae30 <atan+0x2a8>)
 800abc2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800abc6:	ec45 4b10 	vmov	d0, r4, r5
 800abca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abce:	4bb6      	ldr	r3, [pc, #728]	; (800aea8 <atan+0x320>)
 800abd0:	429e      	cmp	r6, r3
 800abd2:	dc14      	bgt.n	800abfe <atan+0x76>
 800abd4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800abd8:	429e      	cmp	r6, r3
 800abda:	dc0d      	bgt.n	800abf8 <atan+0x70>
 800abdc:	a396      	add	r3, pc, #600	; (adr r3, 800ae38 <atan+0x2b0>)
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	ee10 0a10 	vmov	r0, s0
 800abe6:	4629      	mov	r1, r5
 800abe8:	f7f5 fb58 	bl	800029c <__adddf3>
 800abec:	4baf      	ldr	r3, [pc, #700]	; (800aeac <atan+0x324>)
 800abee:	2200      	movs	r2, #0
 800abf0:	f7f5 ff9a 	bl	8000b28 <__aeabi_dcmpgt>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d1e6      	bne.n	800abc6 <atan+0x3e>
 800abf8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800abfc:	e02b      	b.n	800ac56 <atan+0xce>
 800abfe:	f000 f963 	bl	800aec8 <fabs>
 800ac02:	4bab      	ldr	r3, [pc, #684]	; (800aeb0 <atan+0x328>)
 800ac04:	429e      	cmp	r6, r3
 800ac06:	ec55 4b10 	vmov	r4, r5, d0
 800ac0a:	f300 80bf 	bgt.w	800ad8c <atan+0x204>
 800ac0e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ac12:	429e      	cmp	r6, r3
 800ac14:	f300 80a0 	bgt.w	800ad58 <atan+0x1d0>
 800ac18:	ee10 2a10 	vmov	r2, s0
 800ac1c:	ee10 0a10 	vmov	r0, s0
 800ac20:	462b      	mov	r3, r5
 800ac22:	4629      	mov	r1, r5
 800ac24:	f7f5 fb3a 	bl	800029c <__adddf3>
 800ac28:	4ba0      	ldr	r3, [pc, #640]	; (800aeac <atan+0x324>)
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f7f5 fb34 	bl	8000298 <__aeabi_dsub>
 800ac30:	2200      	movs	r2, #0
 800ac32:	4606      	mov	r6, r0
 800ac34:	460f      	mov	r7, r1
 800ac36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	4629      	mov	r1, r5
 800ac3e:	f7f5 fb2d 	bl	800029c <__adddf3>
 800ac42:	4602      	mov	r2, r0
 800ac44:	460b      	mov	r3, r1
 800ac46:	4630      	mov	r0, r6
 800ac48:	4639      	mov	r1, r7
 800ac4a:	f7f5 fe07 	bl	800085c <__aeabi_ddiv>
 800ac4e:	f04f 0a00 	mov.w	sl, #0
 800ac52:	4604      	mov	r4, r0
 800ac54:	460d      	mov	r5, r1
 800ac56:	4622      	mov	r2, r4
 800ac58:	462b      	mov	r3, r5
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	4629      	mov	r1, r5
 800ac5e:	f7f5 fcd3 	bl	8000608 <__aeabi_dmul>
 800ac62:	4602      	mov	r2, r0
 800ac64:	460b      	mov	r3, r1
 800ac66:	4680      	mov	r8, r0
 800ac68:	4689      	mov	r9, r1
 800ac6a:	f7f5 fccd 	bl	8000608 <__aeabi_dmul>
 800ac6e:	a374      	add	r3, pc, #464	; (adr r3, 800ae40 <atan+0x2b8>)
 800ac70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac74:	4606      	mov	r6, r0
 800ac76:	460f      	mov	r7, r1
 800ac78:	f7f5 fcc6 	bl	8000608 <__aeabi_dmul>
 800ac7c:	a372      	add	r3, pc, #456	; (adr r3, 800ae48 <atan+0x2c0>)
 800ac7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac82:	f7f5 fb0b 	bl	800029c <__adddf3>
 800ac86:	4632      	mov	r2, r6
 800ac88:	463b      	mov	r3, r7
 800ac8a:	f7f5 fcbd 	bl	8000608 <__aeabi_dmul>
 800ac8e:	a370      	add	r3, pc, #448	; (adr r3, 800ae50 <atan+0x2c8>)
 800ac90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac94:	f7f5 fb02 	bl	800029c <__adddf3>
 800ac98:	4632      	mov	r2, r6
 800ac9a:	463b      	mov	r3, r7
 800ac9c:	f7f5 fcb4 	bl	8000608 <__aeabi_dmul>
 800aca0:	a36d      	add	r3, pc, #436	; (adr r3, 800ae58 <atan+0x2d0>)
 800aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca6:	f7f5 faf9 	bl	800029c <__adddf3>
 800acaa:	4632      	mov	r2, r6
 800acac:	463b      	mov	r3, r7
 800acae:	f7f5 fcab 	bl	8000608 <__aeabi_dmul>
 800acb2:	a36b      	add	r3, pc, #428	; (adr r3, 800ae60 <atan+0x2d8>)
 800acb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb8:	f7f5 faf0 	bl	800029c <__adddf3>
 800acbc:	4632      	mov	r2, r6
 800acbe:	463b      	mov	r3, r7
 800acc0:	f7f5 fca2 	bl	8000608 <__aeabi_dmul>
 800acc4:	a368      	add	r3, pc, #416	; (adr r3, 800ae68 <atan+0x2e0>)
 800acc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acca:	f7f5 fae7 	bl	800029c <__adddf3>
 800acce:	4642      	mov	r2, r8
 800acd0:	464b      	mov	r3, r9
 800acd2:	f7f5 fc99 	bl	8000608 <__aeabi_dmul>
 800acd6:	a366      	add	r3, pc, #408	; (adr r3, 800ae70 <atan+0x2e8>)
 800acd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acdc:	4680      	mov	r8, r0
 800acde:	4689      	mov	r9, r1
 800ace0:	4630      	mov	r0, r6
 800ace2:	4639      	mov	r1, r7
 800ace4:	f7f5 fc90 	bl	8000608 <__aeabi_dmul>
 800ace8:	a363      	add	r3, pc, #396	; (adr r3, 800ae78 <atan+0x2f0>)
 800acea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acee:	f7f5 fad3 	bl	8000298 <__aeabi_dsub>
 800acf2:	4632      	mov	r2, r6
 800acf4:	463b      	mov	r3, r7
 800acf6:	f7f5 fc87 	bl	8000608 <__aeabi_dmul>
 800acfa:	a361      	add	r3, pc, #388	; (adr r3, 800ae80 <atan+0x2f8>)
 800acfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad00:	f7f5 faca 	bl	8000298 <__aeabi_dsub>
 800ad04:	4632      	mov	r2, r6
 800ad06:	463b      	mov	r3, r7
 800ad08:	f7f5 fc7e 	bl	8000608 <__aeabi_dmul>
 800ad0c:	a35e      	add	r3, pc, #376	; (adr r3, 800ae88 <atan+0x300>)
 800ad0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad12:	f7f5 fac1 	bl	8000298 <__aeabi_dsub>
 800ad16:	4632      	mov	r2, r6
 800ad18:	463b      	mov	r3, r7
 800ad1a:	f7f5 fc75 	bl	8000608 <__aeabi_dmul>
 800ad1e:	a35c      	add	r3, pc, #368	; (adr r3, 800ae90 <atan+0x308>)
 800ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad24:	f7f5 fab8 	bl	8000298 <__aeabi_dsub>
 800ad28:	4632      	mov	r2, r6
 800ad2a:	463b      	mov	r3, r7
 800ad2c:	f7f5 fc6c 	bl	8000608 <__aeabi_dmul>
 800ad30:	4602      	mov	r2, r0
 800ad32:	460b      	mov	r3, r1
 800ad34:	4640      	mov	r0, r8
 800ad36:	4649      	mov	r1, r9
 800ad38:	f7f5 fab0 	bl	800029c <__adddf3>
 800ad3c:	4622      	mov	r2, r4
 800ad3e:	462b      	mov	r3, r5
 800ad40:	f7f5 fc62 	bl	8000608 <__aeabi_dmul>
 800ad44:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800ad48:	4602      	mov	r2, r0
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	d14b      	bne.n	800ade6 <atan+0x25e>
 800ad4e:	4620      	mov	r0, r4
 800ad50:	4629      	mov	r1, r5
 800ad52:	f7f5 faa1 	bl	8000298 <__aeabi_dsub>
 800ad56:	e72c      	b.n	800abb2 <atan+0x2a>
 800ad58:	ee10 0a10 	vmov	r0, s0
 800ad5c:	4b53      	ldr	r3, [pc, #332]	; (800aeac <atan+0x324>)
 800ad5e:	2200      	movs	r2, #0
 800ad60:	4629      	mov	r1, r5
 800ad62:	f7f5 fa99 	bl	8000298 <__aeabi_dsub>
 800ad66:	4b51      	ldr	r3, [pc, #324]	; (800aeac <atan+0x324>)
 800ad68:	4606      	mov	r6, r0
 800ad6a:	460f      	mov	r7, r1
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	4620      	mov	r0, r4
 800ad70:	4629      	mov	r1, r5
 800ad72:	f7f5 fa93 	bl	800029c <__adddf3>
 800ad76:	4602      	mov	r2, r0
 800ad78:	460b      	mov	r3, r1
 800ad7a:	4630      	mov	r0, r6
 800ad7c:	4639      	mov	r1, r7
 800ad7e:	f7f5 fd6d 	bl	800085c <__aeabi_ddiv>
 800ad82:	f04f 0a01 	mov.w	sl, #1
 800ad86:	4604      	mov	r4, r0
 800ad88:	460d      	mov	r5, r1
 800ad8a:	e764      	b.n	800ac56 <atan+0xce>
 800ad8c:	4b49      	ldr	r3, [pc, #292]	; (800aeb4 <atan+0x32c>)
 800ad8e:	429e      	cmp	r6, r3
 800ad90:	da1d      	bge.n	800adce <atan+0x246>
 800ad92:	ee10 0a10 	vmov	r0, s0
 800ad96:	4b48      	ldr	r3, [pc, #288]	; (800aeb8 <atan+0x330>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	4629      	mov	r1, r5
 800ad9c:	f7f5 fa7c 	bl	8000298 <__aeabi_dsub>
 800ada0:	4b45      	ldr	r3, [pc, #276]	; (800aeb8 <atan+0x330>)
 800ada2:	4606      	mov	r6, r0
 800ada4:	460f      	mov	r7, r1
 800ada6:	2200      	movs	r2, #0
 800ada8:	4620      	mov	r0, r4
 800adaa:	4629      	mov	r1, r5
 800adac:	f7f5 fc2c 	bl	8000608 <__aeabi_dmul>
 800adb0:	4b3e      	ldr	r3, [pc, #248]	; (800aeac <atan+0x324>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	f7f5 fa72 	bl	800029c <__adddf3>
 800adb8:	4602      	mov	r2, r0
 800adba:	460b      	mov	r3, r1
 800adbc:	4630      	mov	r0, r6
 800adbe:	4639      	mov	r1, r7
 800adc0:	f7f5 fd4c 	bl	800085c <__aeabi_ddiv>
 800adc4:	f04f 0a02 	mov.w	sl, #2
 800adc8:	4604      	mov	r4, r0
 800adca:	460d      	mov	r5, r1
 800adcc:	e743      	b.n	800ac56 <atan+0xce>
 800adce:	462b      	mov	r3, r5
 800add0:	ee10 2a10 	vmov	r2, s0
 800add4:	4939      	ldr	r1, [pc, #228]	; (800aebc <atan+0x334>)
 800add6:	2000      	movs	r0, #0
 800add8:	f7f5 fd40 	bl	800085c <__aeabi_ddiv>
 800addc:	f04f 0a03 	mov.w	sl, #3
 800ade0:	4604      	mov	r4, r0
 800ade2:	460d      	mov	r5, r1
 800ade4:	e737      	b.n	800ac56 <atan+0xce>
 800ade6:	4b36      	ldr	r3, [pc, #216]	; (800aec0 <atan+0x338>)
 800ade8:	4e36      	ldr	r6, [pc, #216]	; (800aec4 <atan+0x33c>)
 800adea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800adee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800adf2:	e9da 2300 	ldrd	r2, r3, [sl]
 800adf6:	f7f5 fa4f 	bl	8000298 <__aeabi_dsub>
 800adfa:	4622      	mov	r2, r4
 800adfc:	462b      	mov	r3, r5
 800adfe:	f7f5 fa4b 	bl	8000298 <__aeabi_dsub>
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ae0a:	f7f5 fa45 	bl	8000298 <__aeabi_dsub>
 800ae0e:	f1bb 0f00 	cmp.w	fp, #0
 800ae12:	4604      	mov	r4, r0
 800ae14:	460d      	mov	r5, r1
 800ae16:	f6bf aed6 	bge.w	800abc6 <atan+0x3e>
 800ae1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae1e:	461d      	mov	r5, r3
 800ae20:	e6d1      	b.n	800abc6 <atan+0x3e>
 800ae22:	a51d      	add	r5, pc, #116	; (adr r5, 800ae98 <atan+0x310>)
 800ae24:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae28:	e6cd      	b.n	800abc6 <atan+0x3e>
 800ae2a:	bf00      	nop
 800ae2c:	f3af 8000 	nop.w
 800ae30:	54442d18 	.word	0x54442d18
 800ae34:	bff921fb 	.word	0xbff921fb
 800ae38:	8800759c 	.word	0x8800759c
 800ae3c:	7e37e43c 	.word	0x7e37e43c
 800ae40:	e322da11 	.word	0xe322da11
 800ae44:	3f90ad3a 	.word	0x3f90ad3a
 800ae48:	24760deb 	.word	0x24760deb
 800ae4c:	3fa97b4b 	.word	0x3fa97b4b
 800ae50:	a0d03d51 	.word	0xa0d03d51
 800ae54:	3fb10d66 	.word	0x3fb10d66
 800ae58:	c54c206e 	.word	0xc54c206e
 800ae5c:	3fb745cd 	.word	0x3fb745cd
 800ae60:	920083ff 	.word	0x920083ff
 800ae64:	3fc24924 	.word	0x3fc24924
 800ae68:	5555550d 	.word	0x5555550d
 800ae6c:	3fd55555 	.word	0x3fd55555
 800ae70:	2c6a6c2f 	.word	0x2c6a6c2f
 800ae74:	bfa2b444 	.word	0xbfa2b444
 800ae78:	52defd9a 	.word	0x52defd9a
 800ae7c:	3fadde2d 	.word	0x3fadde2d
 800ae80:	af749a6d 	.word	0xaf749a6d
 800ae84:	3fb3b0f2 	.word	0x3fb3b0f2
 800ae88:	fe231671 	.word	0xfe231671
 800ae8c:	3fbc71c6 	.word	0x3fbc71c6
 800ae90:	9998ebc4 	.word	0x9998ebc4
 800ae94:	3fc99999 	.word	0x3fc99999
 800ae98:	54442d18 	.word	0x54442d18
 800ae9c:	3ff921fb 	.word	0x3ff921fb
 800aea0:	440fffff 	.word	0x440fffff
 800aea4:	7ff00000 	.word	0x7ff00000
 800aea8:	3fdbffff 	.word	0x3fdbffff
 800aeac:	3ff00000 	.word	0x3ff00000
 800aeb0:	3ff2ffff 	.word	0x3ff2ffff
 800aeb4:	40038000 	.word	0x40038000
 800aeb8:	3ff80000 	.word	0x3ff80000
 800aebc:	bff00000 	.word	0xbff00000
 800aec0:	0800b8c8 	.word	0x0800b8c8
 800aec4:	0800b8a8 	.word	0x0800b8a8

0800aec8 <fabs>:
 800aec8:	ec51 0b10 	vmov	r0, r1, d0
 800aecc:	ee10 2a10 	vmov	r2, s0
 800aed0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aed4:	ec43 2b10 	vmov	d0, r2, r3
 800aed8:	4770      	bx	lr
 800aeda:	0000      	movs	r0, r0
 800aedc:	0000      	movs	r0, r0
	...

0800aee0 <floor>:
 800aee0:	ec51 0b10 	vmov	r0, r1, d0
 800aee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aee8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800aeec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800aef0:	2e13      	cmp	r6, #19
 800aef2:	ee10 5a10 	vmov	r5, s0
 800aef6:	ee10 8a10 	vmov	r8, s0
 800aefa:	460c      	mov	r4, r1
 800aefc:	dc32      	bgt.n	800af64 <floor+0x84>
 800aefe:	2e00      	cmp	r6, #0
 800af00:	da14      	bge.n	800af2c <floor+0x4c>
 800af02:	a333      	add	r3, pc, #204	; (adr r3, 800afd0 <floor+0xf0>)
 800af04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af08:	f7f5 f9c8 	bl	800029c <__adddf3>
 800af0c:	2200      	movs	r2, #0
 800af0e:	2300      	movs	r3, #0
 800af10:	f7f5 fe0a 	bl	8000b28 <__aeabi_dcmpgt>
 800af14:	b138      	cbz	r0, 800af26 <floor+0x46>
 800af16:	2c00      	cmp	r4, #0
 800af18:	da57      	bge.n	800afca <floor+0xea>
 800af1a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800af1e:	431d      	orrs	r5, r3
 800af20:	d001      	beq.n	800af26 <floor+0x46>
 800af22:	4c2d      	ldr	r4, [pc, #180]	; (800afd8 <floor+0xf8>)
 800af24:	2500      	movs	r5, #0
 800af26:	4621      	mov	r1, r4
 800af28:	4628      	mov	r0, r5
 800af2a:	e025      	b.n	800af78 <floor+0x98>
 800af2c:	4f2b      	ldr	r7, [pc, #172]	; (800afdc <floor+0xfc>)
 800af2e:	4137      	asrs	r7, r6
 800af30:	ea01 0307 	and.w	r3, r1, r7
 800af34:	4303      	orrs	r3, r0
 800af36:	d01f      	beq.n	800af78 <floor+0x98>
 800af38:	a325      	add	r3, pc, #148	; (adr r3, 800afd0 <floor+0xf0>)
 800af3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3e:	f7f5 f9ad 	bl	800029c <__adddf3>
 800af42:	2200      	movs	r2, #0
 800af44:	2300      	movs	r3, #0
 800af46:	f7f5 fdef 	bl	8000b28 <__aeabi_dcmpgt>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d0eb      	beq.n	800af26 <floor+0x46>
 800af4e:	2c00      	cmp	r4, #0
 800af50:	bfbe      	ittt	lt
 800af52:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800af56:	fa43 f606 	asrlt.w	r6, r3, r6
 800af5a:	19a4      	addlt	r4, r4, r6
 800af5c:	ea24 0407 	bic.w	r4, r4, r7
 800af60:	2500      	movs	r5, #0
 800af62:	e7e0      	b.n	800af26 <floor+0x46>
 800af64:	2e33      	cmp	r6, #51	; 0x33
 800af66:	dd0b      	ble.n	800af80 <floor+0xa0>
 800af68:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800af6c:	d104      	bne.n	800af78 <floor+0x98>
 800af6e:	ee10 2a10 	vmov	r2, s0
 800af72:	460b      	mov	r3, r1
 800af74:	f7f5 f992 	bl	800029c <__adddf3>
 800af78:	ec41 0b10 	vmov	d0, r0, r1
 800af7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af80:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800af84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af88:	fa23 f707 	lsr.w	r7, r3, r7
 800af8c:	4207      	tst	r7, r0
 800af8e:	d0f3      	beq.n	800af78 <floor+0x98>
 800af90:	a30f      	add	r3, pc, #60	; (adr r3, 800afd0 <floor+0xf0>)
 800af92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af96:	f7f5 f981 	bl	800029c <__adddf3>
 800af9a:	2200      	movs	r2, #0
 800af9c:	2300      	movs	r3, #0
 800af9e:	f7f5 fdc3 	bl	8000b28 <__aeabi_dcmpgt>
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d0bf      	beq.n	800af26 <floor+0x46>
 800afa6:	2c00      	cmp	r4, #0
 800afa8:	da02      	bge.n	800afb0 <floor+0xd0>
 800afaa:	2e14      	cmp	r6, #20
 800afac:	d103      	bne.n	800afb6 <floor+0xd6>
 800afae:	3401      	adds	r4, #1
 800afb0:	ea25 0507 	bic.w	r5, r5, r7
 800afb4:	e7b7      	b.n	800af26 <floor+0x46>
 800afb6:	2301      	movs	r3, #1
 800afb8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800afbc:	fa03 f606 	lsl.w	r6, r3, r6
 800afc0:	4435      	add	r5, r6
 800afc2:	4545      	cmp	r5, r8
 800afc4:	bf38      	it	cc
 800afc6:	18e4      	addcc	r4, r4, r3
 800afc8:	e7f2      	b.n	800afb0 <floor+0xd0>
 800afca:	2500      	movs	r5, #0
 800afcc:	462c      	mov	r4, r5
 800afce:	e7aa      	b.n	800af26 <floor+0x46>
 800afd0:	8800759c 	.word	0x8800759c
 800afd4:	7e37e43c 	.word	0x7e37e43c
 800afd8:	bff00000 	.word	0xbff00000
 800afdc:	000fffff 	.word	0x000fffff

0800afe0 <nan>:
 800afe0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800afe8 <nan+0x8>
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	00000000 	.word	0x00000000
 800afec:	7ff80000 	.word	0x7ff80000

0800aff0 <scalbn>:
 800aff0:	b570      	push	{r4, r5, r6, lr}
 800aff2:	ec55 4b10 	vmov	r4, r5, d0
 800aff6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800affa:	4606      	mov	r6, r0
 800affc:	462b      	mov	r3, r5
 800affe:	b99a      	cbnz	r2, 800b028 <scalbn+0x38>
 800b000:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b004:	4323      	orrs	r3, r4
 800b006:	d036      	beq.n	800b076 <scalbn+0x86>
 800b008:	4b39      	ldr	r3, [pc, #228]	; (800b0f0 <scalbn+0x100>)
 800b00a:	4629      	mov	r1, r5
 800b00c:	ee10 0a10 	vmov	r0, s0
 800b010:	2200      	movs	r2, #0
 800b012:	f7f5 faf9 	bl	8000608 <__aeabi_dmul>
 800b016:	4b37      	ldr	r3, [pc, #220]	; (800b0f4 <scalbn+0x104>)
 800b018:	429e      	cmp	r6, r3
 800b01a:	4604      	mov	r4, r0
 800b01c:	460d      	mov	r5, r1
 800b01e:	da10      	bge.n	800b042 <scalbn+0x52>
 800b020:	a32b      	add	r3, pc, #172	; (adr r3, 800b0d0 <scalbn+0xe0>)
 800b022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b026:	e03a      	b.n	800b09e <scalbn+0xae>
 800b028:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b02c:	428a      	cmp	r2, r1
 800b02e:	d10c      	bne.n	800b04a <scalbn+0x5a>
 800b030:	ee10 2a10 	vmov	r2, s0
 800b034:	4620      	mov	r0, r4
 800b036:	4629      	mov	r1, r5
 800b038:	f7f5 f930 	bl	800029c <__adddf3>
 800b03c:	4604      	mov	r4, r0
 800b03e:	460d      	mov	r5, r1
 800b040:	e019      	b.n	800b076 <scalbn+0x86>
 800b042:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b046:	460b      	mov	r3, r1
 800b048:	3a36      	subs	r2, #54	; 0x36
 800b04a:	4432      	add	r2, r6
 800b04c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b050:	428a      	cmp	r2, r1
 800b052:	dd08      	ble.n	800b066 <scalbn+0x76>
 800b054:	2d00      	cmp	r5, #0
 800b056:	a120      	add	r1, pc, #128	; (adr r1, 800b0d8 <scalbn+0xe8>)
 800b058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b05c:	da1c      	bge.n	800b098 <scalbn+0xa8>
 800b05e:	a120      	add	r1, pc, #128	; (adr r1, 800b0e0 <scalbn+0xf0>)
 800b060:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b064:	e018      	b.n	800b098 <scalbn+0xa8>
 800b066:	2a00      	cmp	r2, #0
 800b068:	dd08      	ble.n	800b07c <scalbn+0x8c>
 800b06a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b06e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b072:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b076:	ec45 4b10 	vmov	d0, r4, r5
 800b07a:	bd70      	pop	{r4, r5, r6, pc}
 800b07c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b080:	da19      	bge.n	800b0b6 <scalbn+0xc6>
 800b082:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b086:	429e      	cmp	r6, r3
 800b088:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b08c:	dd0a      	ble.n	800b0a4 <scalbn+0xb4>
 800b08e:	a112      	add	r1, pc, #72	; (adr r1, 800b0d8 <scalbn+0xe8>)
 800b090:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1e2      	bne.n	800b05e <scalbn+0x6e>
 800b098:	a30f      	add	r3, pc, #60	; (adr r3, 800b0d8 <scalbn+0xe8>)
 800b09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09e:	f7f5 fab3 	bl	8000608 <__aeabi_dmul>
 800b0a2:	e7cb      	b.n	800b03c <scalbn+0x4c>
 800b0a4:	a10a      	add	r1, pc, #40	; (adr r1, 800b0d0 <scalbn+0xe0>)
 800b0a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d0b8      	beq.n	800b020 <scalbn+0x30>
 800b0ae:	a10e      	add	r1, pc, #56	; (adr r1, 800b0e8 <scalbn+0xf8>)
 800b0b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0b4:	e7b4      	b.n	800b020 <scalbn+0x30>
 800b0b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b0ba:	3236      	adds	r2, #54	; 0x36
 800b0bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b0c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	4b0c      	ldr	r3, [pc, #48]	; (800b0f8 <scalbn+0x108>)
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	e7e8      	b.n	800b09e <scalbn+0xae>
 800b0cc:	f3af 8000 	nop.w
 800b0d0:	c2f8f359 	.word	0xc2f8f359
 800b0d4:	01a56e1f 	.word	0x01a56e1f
 800b0d8:	8800759c 	.word	0x8800759c
 800b0dc:	7e37e43c 	.word	0x7e37e43c
 800b0e0:	8800759c 	.word	0x8800759c
 800b0e4:	fe37e43c 	.word	0xfe37e43c
 800b0e8:	c2f8f359 	.word	0xc2f8f359
 800b0ec:	81a56e1f 	.word	0x81a56e1f
 800b0f0:	43500000 	.word	0x43500000
 800b0f4:	ffff3cb0 	.word	0xffff3cb0
 800b0f8:	3c900000 	.word	0x3c900000

0800b0fc <_init>:
 800b0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fe:	bf00      	nop
 800b100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b102:	bc08      	pop	{r3}
 800b104:	469e      	mov	lr, r3
 800b106:	4770      	bx	lr

0800b108 <_fini>:
 800b108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b10a:	bf00      	nop
 800b10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b10e:	bc08      	pop	{r3}
 800b110:	469e      	mov	lr, r3
 800b112:	4770      	bx	lr
