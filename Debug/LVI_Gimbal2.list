
LVI_Gimbal2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  0800bda8  0800bda8  0001bda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c428  0800c428  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800c428  0800c428  0001c428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c430  0800c430  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c430  0800c430  0001c430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c434  0800c434  0001c434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800c438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042f8  20000200  0800c638  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044f8  0800c638  000244f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ca4  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003178  00000000  00000000  00039ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0003d050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  0003e188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a094  00000000  00000000  0003f198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015043  00000000  00000000  0005922c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009de63  00000000  00000000  0006e26f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010c0d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d3c  00000000  00000000  0010c128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bd8c 	.word	0x0800bd8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0800bd8c 	.word	0x0800bd8c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <as5048a_read>:
/*
 * @brief Read 16-bit data at selected register.
 * @param SPI slave select pin.
 * @param AS5048A register
 */
uint16_t as5048a_read(uint16_t ss, uint16_t reg) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	460a      	mov	r2, r1
 8000f5a:	80fb      	strh	r3, [r7, #6]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	80bb      	strh	r3, [r7, #4]
	uint8_t data[2];

	uint16_t cmd = CMD_READ | reg;
 8000f60:	88bb      	ldrh	r3, [r7, #4]
 8000f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f66:	81fb      	strh	r3, [r7, #14]
	cmd |= ((uint16_t) calcEvenParity(cmd) << 15);
 8000f68:	89fb      	ldrh	r3, [r7, #14]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f8ee 	bl	800114c <calcEvenParity>
 8000f70:	4603      	mov	r3, r0
 8000f72:	03db      	lsls	r3, r3, #15
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	81fb      	strh	r3, [r7, #14]

	data[1] = cmd & 0xFF;
 8000f80:	89fb      	ldrh	r3, [r7, #14]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	737b      	strb	r3, [r7, #13]
	data[0] = (cmd >> 8) & 0xFF;
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_RESET);
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	2200      	movs	r2, #0
 8000f94:	4619      	mov	r1, r3
 8000f96:	4821      	ldr	r0, [pc, #132]	; (800101c <as5048a_read+0xcc>)
 8000f98:	f003 fe36 	bl	8004c08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 2, 0xFFFF);
 8000f9c:	f107 010c 	add.w	r1, r7, #12
 8000fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	481e      	ldr	r0, [pc, #120]	; (8001020 <as5048a_read+0xd0>)
 8000fa8:	f004 fb45 	bl	8005636 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8000fac:	bf00      	nop
 8000fae:	481c      	ldr	r0, [pc, #112]	; (8001020 <as5048a_read+0xd0>)
 8000fb0:	f004 ff30 	bl	8005e14 <HAL_SPI_GetState>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d1f9      	bne.n	8000fae <as5048a_read+0x5e>
	}
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_SET);
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4816      	ldr	r0, [pc, #88]	; (800101c <as5048a_read+0xcc>)
 8000fc2:	f003 fe21 	bl	8004c08 <HAL_GPIO_WritePin>

	//HAL_Delay(1);

	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_RESET);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4813      	ldr	r0, [pc, #76]	; (800101c <as5048a_read+0xcc>)
 8000fce:	f003 fe1b 	bl	8004c08 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 2, 0xFFFF);
 8000fd2:	f107 010c 	add.w	r1, r7, #12
 8000fd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fda:	2202      	movs	r2, #2
 8000fdc:	4810      	ldr	r0, [pc, #64]	; (8001020 <as5048a_read+0xd0>)
 8000fde:	f004 fc66 	bl	80058ae <HAL_SPI_Receive>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8000fe2:	bf00      	nop
 8000fe4:	480e      	ldr	r0, [pc, #56]	; (8001020 <as5048a_read+0xd0>)
 8000fe6:	f004 ff15 	bl	8005e14 <HAL_SPI_GetState>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d1f9      	bne.n	8000fe4 <as5048a_read+0x94>
	}
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_SET);
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4809      	ldr	r0, [pc, #36]	; (800101c <as5048a_read+0xcc>)
 8000ff8:	f003 fe06 	bl	8004c08 <HAL_GPIO_WritePin>

	return (((data[0] & 0xFF) << 8) | (data[1] & 0xFF)) & ~0xC000; //wat
 8000ffc:	7b3b      	ldrb	r3, [r7, #12]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	b21a      	sxth	r2, r3
 8001002:	7b7b      	ldrb	r3, [r7, #13]
 8001004:	b21b      	sxth	r3, r3
 8001006:	4313      	orrs	r3, r2
 8001008:	b21b      	sxth	r3, r3
 800100a:	b29b      	uxth	r3, r3
 800100c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001010:	b29b      	uxth	r3, r3
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40020400 	.word	0x40020400
 8001020:	200043f0 	.word	0x200043f0

08001024 <as5048a_getRawRotation>:

/*
 * @brief Get raw rotation as 16-bit value.
 * @param SPI slave select pin.
 */
uint16_t as5048a_getRawRotation(uint16_t ss) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
	return as5048a_read(ss, REG_ANGLE);
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff8b 	bl	8000f50 <as5048a_read>
 800103a:	4603      	mov	r3, r0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <as5048a_init>:

/*
 * @brief Initialize the SPI by setting all encoder pins high.
 */
void as5048a_init(MotorDriver *driver) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PINBUS_ENC, driver->PIN_ENC, GPIO_PIN_SET);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	2201      	movs	r2, #1
 8001052:	4619      	mov	r1, r3
 8001054:	4810      	ldr	r0, [pc, #64]	; (8001098 <as5048a_init+0x54>)
 8001056:	f003 fdd7 	bl	8004c08 <HAL_GPIO_WritePin>

	driver->zero_pos = as5048a_getRawRotation(driver->PIN_ENC);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ffe0 	bl	8001024 <as5048a_getRawRotation>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
	driver->zero_pos_map = as5048a_readToAngle(driver->zero_pos);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8001074:	4618      	mov	r0, r3
 8001076:	f000 f849 	bl	800110c <as5048a_readToAngle>
 800107a:	eef0 7a40 	vmov.f32	s15, s0
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0

	as5048a_getAngle(driver);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f886 	bl	8001196 <as5048a_getAngle>

	HAL_Delay(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f002 fb92 	bl	80037b4 <HAL_Delay>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40020400 	.word	0x40020400
 800109c:	00000000 	.word	0x00000000

080010a0 <as5048a_normalize>:

/*
 * @brief Normalized the input angle, meaning that the angle starts at 0˙ and ends at 360˙
 * @param unnormalized input angle
 */
float as5048a_normalize(float angle) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	ed87 0a01 	vstr	s0, [r7, #4]
	//angle += 180;
	angle = fmod(angle, 360);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fa54 	bl	8000558 <__aeabi_f2d>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001100 <as5048a_normalize+0x60>
 80010b8:	ec43 2b10 	vmov	d0, r2, r3
 80010bc:	f009 f9de 	bl	800a47c <fmod>
 80010c0:	ec53 2b10 	vmov	r2, r3, d0
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fd76 	bl	8000bb8 <__aeabi_d2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	607b      	str	r3, [r7, #4]
	if (angle < 0) {
 80010d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	d507      	bpl.n	80010ee <as5048a_normalize+0x4e>
		angle += 360;
 80010de:	edd7 7a01 	vldr	s15, [r7, #4]
 80010e2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001108 <as5048a_normalize+0x68>
 80010e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010ea:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	//angle -= 180;
	return angle;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	ee07 3a90 	vmov	s15, r3
}
 80010f4:	eeb0 0a67 	vmov.f32	s0, s15
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	00000000 	.word	0x00000000
 8001104:	40768000 	.word	0x40768000
 8001108:	43b40000 	.word	0x43b40000

0800110c <as5048a_readToAngle>:

/*
 * @brief Convert raw data from getRawRotation to angles in degrees.
 * @param Raw angular data input.
 */
float as5048a_readToAngle(uint16_t angle) {
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	80fb      	strh	r3, [r7, #6]
	return 2 * ((float) angle * ((float) 360 / 16383) - 180);
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	ee07 3a90 	vmov	s15, r3
 800111c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001120:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001144 <as5048a_readToAngle+0x38>
 8001124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001128:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001148 <as5048a_readToAngle+0x3c>
 800112c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001130:	ee77 7aa7 	vadd.f32	s15, s15, s15
}
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	3cb402d0 	.word	0x3cb402d0
 8001148:	43340000 	.word	0x43340000

0800114c <calcEvenParity>:

uint8_t calcEvenParity(uint16_t value) {
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 16; i++) {
 800115a:	2300      	movs	r3, #0
 800115c:	73bb      	strb	r3, [r7, #14]
 800115e:	e00d      	b.n	800117c <calcEvenParity+0x30>
		if (value & 0x1) {
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d002      	beq.n	8001170 <calcEvenParity+0x24>
			cnt++;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	3301      	adds	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
		}

		value >>= 1;
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	085b      	lsrs	r3, r3, #1
 8001174:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 16; i++) {
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	3301      	adds	r3, #1
 800117a:	73bb      	strb	r3, [r7, #14]
 800117c:	7bbb      	ldrb	r3, [r7, #14]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	d9ee      	bls.n	8001160 <calcEvenParity+0x14>
	}
	return cnt & 0x1;
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	b2db      	uxtb	r3, r3
}
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <as5048a_getAngle>:

/** @brief Get angle from encoder on selected motor.
 *
 */
void as5048a_getAngle(MotorDriver *driver) {
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	driver->prev_angle = driver->angle;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	driver->curr_angle = as5048a_getRawRotation(driver->PIN_ENC);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff38 	bl	8001024 <as5048a_getRawRotation>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
	driver->curr_angle_map = as5048a_readToAngle(driver->curr_angle);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ffa1 	bl	800110c <as5048a_readToAngle>
 80011ca:	eef0 7a40 	vmov.f32	s15, s0
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

	driver->angle = driver->curr_angle_map - driver->zero_pos_map;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 80011e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
	driver->angle = as5048a_normalize(driver->angle);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 80011f0:	eeb0 0a67 	vmov.f32	s0, s15
 80011f4:	f7ff ff54 	bl	80010a0 <as5048a_normalize>
 80011f8:	eef0 7a40 	vmov.f32	s15, s0
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	0000      	movs	r0, r0
 800120c:	0000      	movs	r0, r0
	...

08001210 <as5048a_calcSpeed>:

/**@brief Calculate speed in RPM using angular values and input time
 *@param motordriver containing angle values
 *@param time in us
 */
void as5048a_calcSpeed(MotorDriver *driver, float t){
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	ed87 0a00 	vstr	s0, [r7]
	/* Divide angular difference by 360˚ and multiply by 60 sec to get RPM */
		driver->speed_rpm = (driver->prev_angle - driver->angle)/t*0.166666667;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8001228:	ee37 7a67 	vsub.f32	s14, s14, s15
 800122c:	edd7 7a00 	vldr	s15, [r7]
 8001230:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001234:	ee16 0a90 	vmov	r0, s13
 8001238:	f7ff f98e 	bl	8000558 <__aeabi_f2d>
 800123c:	a30a      	add	r3, pc, #40	; (adr r3, 8001268 <as5048a_calcSpeed+0x58>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff f9e1 	bl	8000608 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fcb3 	bl	8000bb8 <__aeabi_d2f>
 8001252:	4602      	mov	r2, r0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	f3af 8000 	nop.w
 8001268:	560c95d4 	.word	0x560c95d4
 800126c:	3fc55555 	.word	0x3fc55555

08001270 <drv8313_init>:
 * 1: Set nRESET and nSLEEP to inactive HIGH to enable the three phase H-bridge.
 * 2: Read the nFAULT pin. If the pin is active HIGH, the initialization stops. If inactive LOW, the procedure continues.
 * 3: Pass references to timers and timer channels so that the PWM function of each timer may be used.
 * 4: Start PWM.
 */
uint8_t drv8313_init(MotorDriver *driver, TIM_HandleTypeDef *htim) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(PINBUS_DRV8313, PIN_nSLEEP, GPIO_PIN_SET); /* Enable the unit by setting nRESET + nSLEEP to HIGH*/
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001280:	4834      	ldr	r0, [pc, #208]	; (8001354 <drv8313_init+0xe4>)
 8001282:	f003 fcc1 	bl	8004c08 <HAL_GPIO_WritePin>
	HAL_Delay(1); //Misread prevention delay.
 8001286:	2001      	movs	r0, #1
 8001288:	f002 fa94 	bl	80037b4 <HAL_Delay>
	if (!HAL_GPIO_ReadPin(PINBUS_DRV8313, PIN_nFAULT)) {
 800128c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001290:	4830      	ldr	r0, [pc, #192]	; (8001354 <drv8313_init+0xe4>)
 8001292:	f003 fca1 	bl	8004bd8 <HAL_GPIO_ReadPin>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <drv8313_init+0x30>
		return 0;
 800129c:	2300      	movs	r3, #0
 800129e:	e054      	b.n	800134a <drv8313_init+0xda>
	}

	driver->timer = htim;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	driver->pwm_ch1 = TIM_CHANNEL_1;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	driver->pwm_ch2 = TIM_CHANNEL_2;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2204      	movs	r2, #4
 80012b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	driver->pwm_ch3 = TIM_CHANNEL_3;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2208      	movs	r2, #8
 80012bc:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6

	PID_Init(&driver->d_reg);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3314      	adds	r3, #20
 80012c4:	4618      	mov	r0, r3
 80012c6:	f001 fd58 	bl	8002d7a <PID_Init>
	PID_Init(&driver->q_reg);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3344      	adds	r3, #68	; 0x44
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 fd53 	bl	8002d7a <PID_Init>
	PID_Init(&driver->speed_reg);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3374      	adds	r3, #116	; 0x74
 80012d8:	4618      	mov	r0, r3
 80012da:	f001 fd4e 	bl	8002d7a <PID_Init>

	driver->d_reg.lim_min = BLDC_MIN_VOLTAGE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24
	driver->d_reg.lim_max = BLDC_MAX_VOLTAGE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <drv8313_init+0xe8>)
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28
	driver->q_reg.lim_min = BLDC_MIN_VOLTAGE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	655a      	str	r2, [r3, #84]	; 0x54
	driver->q_reg.lim_max = BLDC_MAX_VOLTAGE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a18      	ldr	r2, [pc, #96]	; (8001358 <drv8313_init+0xe8>)
 80012f8:	659a      	str	r2, [r3, #88]	; 0x58
	driver->speed_reg.lim_min = 0;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	driver->speed_reg.lim_max = 2000;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <drv8313_init+0xec>)
 8001308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	HAL_TIM_PWM_Start(driver->timer, driver->pwm_ch1);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8001318:	4619      	mov	r1, r3
 800131a:	4610      	mov	r0, r2
 800131c:	f005 f800 	bl	8006320 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(driver->timer, driver->pwm_ch2);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800132c:	4619      	mov	r1, r3
 800132e:	4610      	mov	r0, r2
 8001330:	f004 fff6 	bl	8006320 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(driver->timer, driver->pwm_ch3);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8001340:	4619      	mov	r1, r3
 8001342:	4610      	mov	r0, r2
 8001344:	f004 ffec 	bl	8006320 <HAL_TIM_PWM_Start>

	return 1;
 8001348:	2301      	movs	r3, #1

}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40020400 	.word	0x40020400
 8001358:	41400000 	.word	0x41400000
 800135c:	44fa0000 	.word	0x44fa0000

08001360 <drv8313_setPWM>:
 * @param BLDC pointer
 * @param duty cycle on phase a
 * @param duty cycle on phase b
 * @param duty cycle on phase c
 */
void drv8313_setPWM(MotorDriver *driver, float duty_a, float duty_b, float duty_c) {
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	ed87 0a02 	vstr	s0, [r7, #8]
 800136c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001370:	ed87 1a00 	vstr	s2, [r7]
	uint16_t period = driver->timer->Init.Period + 1;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	b29b      	uxth	r3, r3
 800137e:	3301      	adds	r3, #1
 8001380:	82fb      	strh	r3, [r7, #22]

	/* Wait for PWM period to finish before setting new duty period
	 * Note: May be unnecessary, but used as a safety measure for now */
	while(driver->timer->Instance->CNT != 0){
 8001382:	bf00      	nop
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f8      	bne.n	8001384 <drv8313_setPWM+0x24>
	}

	driver->timer->Instance->CCR1 = duty_a * period;
 8001392:	8afb      	ldrh	r3, [r7, #22]
 8001394:	ee07 3a90 	vmov	s15, r3
 8001398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800139c:	edd7 7a02 	vldr	s15, [r7, #8]
 80013a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b0:	ee17 2a90 	vmov	r2, s15
 80013b4:	635a      	str	r2, [r3, #52]	; 0x34
	driver->timer->Instance->CCR2 = duty_b * period;
 80013b6:	8afb      	ldrh	r3, [r7, #22]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d4:	ee17 2a90 	vmov	r2, s15
 80013d8:	639a      	str	r2, [r3, #56]	; 0x38
	driver->timer->Instance->CCR3 = duty_c * period;
 80013da:	8afb      	ldrh	r3, [r7, #22]
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e4:	edd7 7a00 	vldr	s15, [r7]
 80013e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f8:	ee17 2a90 	vmov	r2, s15
 80013fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80013fe:	bf00      	nop
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	0000      	movs	r0, r0
 800140c:	0000      	movs	r0, r0
	...

08001410 <foc_ClarkePark>:

#include "FOC.h"



void foc_ClarkePark(MotorDriver *driver) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	/* Clarke-transform */
	/* Note: i_c not required, since KCL can be used --> i_a + i_b + i_c = 0*/
	float i_alpha = driver->i_a;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	617b      	str	r3, [r7, #20]
	float i_beta = (driver->i_a + 2*driver->i_b)*_1_SQRT3;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	ed93 7a01 	vldr	s14, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	edd3 7a02 	vldr	s15, [r3, #8]
 800142a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800142e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001432:	ee17 0a90 	vmov	r0, s15
 8001436:	f7ff f88f 	bl	8000558 <__aeabi_f2d>
 800143a:	a334      	add	r3, pc, #208	; (adr r3, 800150c <foc_ClarkePark+0xfc>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7ff f8e2 	bl	8000608 <__aeabi_dmul>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fbb4 	bl	8000bb8 <__aeabi_d2f>
 8001450:	4603      	mov	r3, r0
 8001452:	613b      	str	r3, [r7, #16]

	float cos_val = cos(driver->angle_electrical*DEG_TO_RAD), sin_val = sin(driver->angle_electrical*DEG_TO_RAD);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 800145a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001508 <foc_ClarkePark+0xf8>
 800145e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001462:	ee17 0a90 	vmov	r0, s15
 8001466:	f7ff f877 	bl	8000558 <__aeabi_f2d>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	ec43 2b10 	vmov	d0, r2, r3
 8001472:	f008 ff5d 	bl	800a330 <cos>
 8001476:	ec53 2b10 	vmov	r2, r3, d0
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	f7ff fb9b 	bl	8000bb8 <__aeabi_d2f>
 8001482:	4603      	mov	r3, r0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 800148c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001508 <foc_ClarkePark+0xf8>
 8001490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001494:	ee17 0a90 	vmov	r0, s15
 8001498:	f7ff f85e 	bl	8000558 <__aeabi_f2d>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	ec43 2b10 	vmov	d0, r2, r3
 80014a4:	f008 ff94 	bl	800a3d0 <sin>
 80014a8:	ec53 2b10 	vmov	r2, r3, d0
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff fb82 	bl	8000bb8 <__aeabi_d2f>
 80014b4:	4603      	mov	r3, r0
 80014b6:	60bb      	str	r3, [r7, #8]

	/* Park-transform */
	driver->i_d = i_alpha*cos_val + i_beta*sin_val;
 80014b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80014bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	edd7 6a04 	vldr	s13, [r7, #16]
 80014c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80014cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	edc3 7a03 	vstr	s15, [r3, #12]
	driver->i_q = i_beta*cos_val - i_alpha*sin_val;
 80014da:	ed97 7a04 	vldr	s14, [r7, #16]
 80014de:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e6:	edd7 6a05 	vldr	s13, [r7, #20]
 80014ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80014ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80014fc:	bf00      	nop
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	f3af 8000 	nop.w
 8001508:	3c8efa35 	.word	0x3c8efa35
 800150c:	561abec8 	.word	0x561abec8
 8001510:	3fe279a7 	.word	0x3fe279a7

08001514 <foc_alignToRotor>:

void foc_alignToRotor(MotorDriver *driver){
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

	for (int i = 0; i <=500; i++ ) {
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	e01e      	b.n	8001560 <foc_alignToRotor+0x4c>
			  float angle = _3PI_2 + _2PI * i / 500.0f;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	ee07 3a90 	vmov	s15, r3
 8001528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001624 <foc_alignToRotor+0x110>
 8001530:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001534:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001628 <foc_alignToRotor+0x114>
 8001538:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800162c <foc_alignToRotor+0x118>
 8001540:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001544:	edc7 7a02 	vstr	s15, [r7, #8]
			  foc_setPhaseVoltage(driver, V_dc, 0, angle);
 8001548:	ed97 1a02 	vldr	s2, [r7, #8]
 800154c:	eddf 0a38 	vldr	s1, [pc, #224]	; 8001630 <foc_alignToRotor+0x11c>
 8001550:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f933 	bl	80017c0 <foc_setPhaseVoltage>
	for (int i = 0; i <=500; i++ ) {
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3301      	adds	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001566:	dddc      	ble.n	8001522 <foc_alignToRotor+0xe>
			}

	HAL_Delay(2);
 8001568:	2002      	movs	r0, #2
 800156a:	f002 f923 	bl	80037b4 <HAL_Delay>

	as5048a_getAngle(driver);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fe11 	bl	8001196 <as5048a_getAngle>
	float mid_angle = driver->angle;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800157a:	617b      	str	r3, [r7, #20]

	for (int i = 500; i >=0; i-- ) {
 800157c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	e01e      	b.n	80015c2 <foc_alignToRotor+0xae>
		  float angle = _3PI_2 + _2PI * i / 500.0f ;
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001624 <foc_alignToRotor+0x110>
 8001592:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001596:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001628 <foc_alignToRotor+0x114>
 800159a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800159e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800162c <foc_alignToRotor+0x118>
 80015a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015a6:	edc7 7a03 	vstr	s15, [r7, #12]
		  foc_setPhaseVoltage(driver, V_dc, 0, angle);
 80015aa:	ed97 1a03 	vldr	s2, [r7, #12]
 80015ae:	eddf 0a20 	vldr	s1, [pc, #128]	; 8001630 <foc_alignToRotor+0x11c>
 80015b2:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f902 	bl	80017c0 <foc_setPhaseVoltage>
	for (int i = 500; i >=0; i-- ) {
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	3b01      	subs	r3, #1
 80015c0:	61bb      	str	r3, [r7, #24]
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	dadd      	bge.n	8001584 <foc_alignToRotor+0x70>
	}

	HAL_Delay(2);
 80015c8:	2002      	movs	r0, #2
 80015ca:	f002 f8f3 	bl	80037b4 <HAL_Delay>
	as5048a_getAngle(driver);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fde1 	bl	8001196 <as5048a_getAngle>
	float end_angle = driver->angle;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80015da:	613b      	str	r3, [r7, #16]
//	else{
//		driver->direction = CW;
//	}

	/* Set zero electric angle*/
	foc_setPhaseVoltage(driver, V_dc, 0, _3PI_2);
 80015dc:	ed9f 1a13 	vldr	s2, [pc, #76]	; 800162c <foc_alignToRotor+0x118>
 80015e0:	eddf 0a13 	vldr	s1, [pc, #76]	; 8001630 <foc_alignToRotor+0x11c>
 80015e4:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f8e9 	bl	80017c0 <foc_setPhaseVoltage>
	HAL_Delay(500);
 80015ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015f2:	f002 f8df 	bl	80037b4 <HAL_Delay>

	driver->zero_angle_electrical = 0;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	as5048a_getAngle(driver);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff fdc8 	bl	8001196 <as5048a_getAngle>
	driver->zero_angle_electrical = foc_getElectricalAngle(driver);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f816 	bl	8001638 <foc_getElectricalAngle>
 800160c:	eef0 7a40 	vmov.f32	s15, s0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4

	HAL_Delay(200);
 8001616:	20c8      	movs	r0, #200	; 0xc8
 8001618:	f002 f8cc 	bl	80037b4 <HAL_Delay>
}
 800161c:	bf00      	nop
 800161e:	3720      	adds	r7, #32
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40c90fdb 	.word	0x40c90fdb
 8001628:	43fa0000 	.word	0x43fa0000
 800162c:	4096cbe4 	.word	0x4096cbe4
	...

08001638 <foc_getElectricalAngle>:

float foc_getElectricalAngle(MotorDriver *driver){
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	return fmod((float)(driver->direction * driver->pole_pairs) * driver->angle - driver->zero_angle_electrical + 360, 360);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f993 30da 	ldrsb.w	r3, [r3, #218]	; 0xda
 8001646:	461a      	mov	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 800164e:	fb03 f302 	mul.w	r3, r3, r2
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8001660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 800166a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800166e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80016b8 <foc_getElectricalAngle+0x80>
 8001672:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001676:	ee17 0a90 	vmov	r0, s15
 800167a:	f7fe ff6d 	bl	8000558 <__aeabi_f2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 80016b0 <foc_getElectricalAngle+0x78>
 8001686:	ec43 2b10 	vmov	d0, r2, r3
 800168a:	f008 fef7 	bl	800a47c <fmod>
 800168e:	ec53 2b10 	vmov	r2, r3, d0
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff fa8f 	bl	8000bb8 <__aeabi_d2f>
 800169a:	4603      	mov	r3, r0
 800169c:	ee07 3a90 	vmov	s15, r3
}
 80016a0:	eeb0 0a67 	vmov.f32	s0, s15
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	f3af 8000 	nop.w
 80016b0:	00000000 	.word	0x00000000
 80016b4:	40768000 	.word	0x40768000
 80016b8:	43b40000 	.word	0x43b40000

080016bc <foc_update>:
}

/**
 * @brief
 */
void foc_update(MotorDriver *driver){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	foc_motion(driver, 1200);
 80016c4:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8001764 <foc_update+0xa8>
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f84f 	bl	800176c <foc_motion>

	/* Get the electrical angle*/
	as5048a_getAngle(driver);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fd61 	bl	8001196 <as5048a_getAngle>
	driver->angle_electrical = foc_getElectricalAngle(driver);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ffaf 	bl	8001638 <foc_getElectricalAngle>
 80016da:	eef0 7a40 	vmov.f32	s15, s0
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	foc_ClarkePark(driver);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fe93 	bl	8001410 <foc_ClarkePark>

	/* PI stuff */
	driver->V_d = PID_Update(&driver->d_reg, 0, driver->i_d);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f103 0214 	add.w	r2, r3, #20
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80016f6:	eef0 0a67 	vmov.f32	s1, s15
 80016fa:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8001768 <foc_update+0xac>
 80016fe:	4610      	mov	r0, r2
 8001700:	f001 fb65 	bl	8002dce <PID_Update>
 8001704:	eef0 7a40 	vmov.f32	s15, s0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	driver->V_q = PID_Update(&driver->q_reg, driver->current_setpoint, driver->i_q);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001720:	eef0 0a47 	vmov.f32	s1, s14
 8001724:	eeb0 0a67 	vmov.f32	s0, s15
 8001728:	4610      	mov	r0, r2
 800172a:	f001 fb50 	bl	8002dce <PID_Update>
 800172e:	eef0 7a40 	vmov.f32	s15, s0
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

	foc_setPhaseVoltage(driver, driver->V_q, driver->V_d, driver->angle_electrical);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 800174a:	eeb0 1a66 	vmov.f32	s2, s13
 800174e:	eef0 0a47 	vmov.f32	s1, s14
 8001752:	eeb0 0a67 	vmov.f32	s0, s15
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f832 	bl	80017c0 <foc_setPhaseVoltage>
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	44960000 	.word	0x44960000
 8001768:	00000000 	.word	0x00000000

0800176c <foc_motion>:

void foc_motion(MotorDriver *driver, float target){
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	ed87 0a00 	vstr	s0, [r7]
	driver->current_setpoint = PID_Update(&driver->speed_reg, target, driver->speed_rpm);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8001784:	eef0 0a67 	vmov.f32	s1, s15
 8001788:	ed97 0a00 	vldr	s0, [r7]
 800178c:	4610      	mov	r0, r2
 800178e:	f001 fb1e 	bl	8002dce <PID_Update>
 8001792:	eef0 7a40 	vmov.f32	s15, s0
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	driver->V_q = driver->current_setpoint;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	driver->V_d = 0;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	0000      	movs	r0, r0
 80017bc:	0000      	movs	r0, r0
	...

080017c0 <foc_setPhaseVoltage>:

void foc_setPhaseVoltage(MotorDriver *driver, float V_qref, float V_dref, float angle_el){
 80017c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017c4:	b090      	sub	sp, #64	; 0x40
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6178      	str	r0, [r7, #20]
 80017ca:	ed87 0a04 	vstr	s0, [r7, #16]
 80017ce:	edc7 0a03 	vstr	s1, [r7, #12]
 80017d2:	ed87 1a02 	vstr	s2, [r7, #8]
	float V_ref, a_duty, b_duty, c_duty;


	V_ref = sqrt(V_dref*V_dref + V_qref*V_qref);
 80017d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017da:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017de:	edd7 7a04 	vldr	s15, [r7, #16]
 80017e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ea:	ee17 0a90 	vmov	r0, s15
 80017ee:	f7fe feb3 	bl	8000558 <__aeabi_f2d>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	ec43 2b10 	vmov	d0, r2, r3
 80017fa:	f008 fe7b 	bl	800a4f4 <sqrt>
 80017fe:	ec53 2b10 	vmov	r2, r3, d0
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff f9d7 	bl	8000bb8 <__aeabi_d2f>
 800180a:	4603      	mov	r3, r0
 800180c:	633b      	str	r3, [r7, #48]	; 0x30


	float T1, T2, T0;

	float m = _1_SQRT3*V_ref/V_dc;
 800180e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001810:	f7fe fea2 	bl	8000558 <__aeabi_f2d>
 8001814:	a3db      	add	r3, pc, #876	; (adr r3, 8001b84 <foc_setPhaseVoltage+0x3c4>)
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	f7fe fef5 	bl	8000608 <__aeabi_dmul>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4bd1      	ldr	r3, [pc, #836]	; (8001b70 <foc_setPhaseVoltage+0x3b0>)
 800182c:	f7ff f816 	bl	800085c <__aeabi_ddiv>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff f9be 	bl	8000bb8 <__aeabi_d2f>
 800183c:	4603      	mov	r3, r0
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float theta = fmod((atan2(V_qref, V_dref) + angle_el)*RAD_TO_DEG + 360, 360); //RAD_TO_DEG*_normalizeAngle(angle_el + atan2(V_qref, V_dref));
 8001840:	6938      	ldr	r0, [r7, #16]
 8001842:	f7fe fe89 	bl	8000558 <__aeabi_f2d>
 8001846:	4604      	mov	r4, r0
 8001848:	460d      	mov	r5, r1
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f7fe fe84 	bl	8000558 <__aeabi_f2d>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	ec43 2b11 	vmov	d1, r2, r3
 8001858:	ec45 4b10 	vmov	d0, r4, r5
 800185c:	f008 fe0c 	bl	800a478 <atan2>
 8001860:	ec55 4b10 	vmov	r4, r5, d0
 8001864:	68b8      	ldr	r0, [r7, #8]
 8001866:	f7fe fe77 	bl	8000558 <__aeabi_f2d>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4620      	mov	r0, r4
 8001870:	4629      	mov	r1, r5
 8001872:	f7fe fd13 	bl	800029c <__adddf3>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	a3b4      	add	r3, pc, #720	; (adr r3, 8001b50 <foc_setPhaseVoltage+0x390>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fec0 	bl	8000608 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	4bb7      	ldr	r3, [pc, #732]	; (8001b74 <foc_setPhaseVoltage+0x3b4>)
 8001896:	f7fe fd01 	bl	800029c <__adddf3>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	ec43 2b17 	vmov	d7, r2, r3
 80018a2:	ed9f 1bad 	vldr	d1, [pc, #692]	; 8001b58 <foc_setPhaseVoltage+0x398>
 80018a6:	eeb0 0a47 	vmov.f32	s0, s14
 80018aa:	eef0 0a67 	vmov.f32	s1, s15
 80018ae:	f008 fde5 	bl	800a47c <fmod>
 80018b2:	ec53 2b10 	vmov	r2, r3, d0
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f97d 	bl	8000bb8 <__aeabi_d2f>
 80018be:	4603      	mov	r3, r0
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28


	/*Sector selection*/
	uint8_t sector = theta/60 + 1;
 80018c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80018c6:	eddf 6aac 	vldr	s13, [pc, #688]	; 8001b78 <foc_setPhaseVoltage+0x3b8>
 80018ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018da:	edc7 7a01 	vstr	s15, [r7, #4]
 80018de:	793b      	ldrb	r3, [r7, #4]
 80018e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	//theta = fmod(theta, 60);

	/* Duty time calculation */
	T1 = m*sin(sector*_1PI_3 - theta*DEG_TO_RAD);
 80018e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018e6:	f7fe fe37 	bl	8000558 <__aeabi_f2d>
 80018ea:	4604      	mov	r4, r0
 80018ec:	460d      	mov	r5, r1
 80018ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe1e 	bl	8000534 <__aeabi_i2d>
 80018f8:	a399      	add	r3, pc, #612	; (adr r3, 8001b60 <foc_setPhaseVoltage+0x3a0>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fe83 	bl	8000608 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	a397      	add	r3, pc, #604	; (adr r3, 8001b68 <foc_setPhaseVoltage+0x3a8>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7fe fe7a 	bl	8000608 <__aeabi_dmul>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4690      	mov	r8, r2
 800191a:	4699      	mov	r9, r3
 800191c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001920:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8001b7c <foc_setPhaseVoltage+0x3bc>
 8001924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001928:	ee17 0a90 	vmov	r0, s15
 800192c:	f7fe fe14 	bl	8000558 <__aeabi_f2d>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4640      	mov	r0, r8
 8001936:	4649      	mov	r1, r9
 8001938:	f7fe fcae 	bl	8000298 <__aeabi_dsub>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	ec43 2b17 	vmov	d7, r2, r3
 8001944:	eeb0 0a47 	vmov.f32	s0, s14
 8001948:	eef0 0a67 	vmov.f32	s1, s15
 800194c:	f008 fd40 	bl	800a3d0 <sin>
 8001950:	ec53 2b10 	vmov	r2, r3, d0
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fe56 	bl	8000608 <__aeabi_dmul>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	f7ff f928 	bl	8000bb8 <__aeabi_d2f>
 8001968:	4603      	mov	r3, r0
 800196a:	623b      	str	r3, [r7, #32]
	T2 = m*sin(theta*DEG_TO_RAD - (sector - 1) * _1PI_3);
 800196c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800196e:	f7fe fdf3 	bl	8000558 <__aeabi_f2d>
 8001972:	4604      	mov	r4, r0
 8001974:	460d      	mov	r5, r1
 8001976:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800197a:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001b7c <foc_setPhaseVoltage+0x3bc>
 800197e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001982:	ee17 0a90 	vmov	r0, s15
 8001986:	f7fe fde7 	bl	8000558 <__aeabi_f2d>
 800198a:	4680      	mov	r8, r0
 800198c:	4689      	mov	r9, r1
 800198e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001992:	3b01      	subs	r3, #1
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fdcd 	bl	8000534 <__aeabi_i2d>
 800199a:	a371      	add	r3, pc, #452	; (adr r3, 8001b60 <foc_setPhaseVoltage+0x3a0>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f7fe fe32 	bl	8000608 <__aeabi_dmul>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	a36e      	add	r3, pc, #440	; (adr r3, 8001b68 <foc_setPhaseVoltage+0x3a8>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7fe fe29 	bl	8000608 <__aeabi_dmul>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4640      	mov	r0, r8
 80019bc:	4649      	mov	r1, r9
 80019be:	f7fe fc6b 	bl	8000298 <__aeabi_dsub>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ec43 2b17 	vmov	d7, r2, r3
 80019ca:	eeb0 0a47 	vmov.f32	s0, s14
 80019ce:	eef0 0a67 	vmov.f32	s1, s15
 80019d2:	f008 fcfd 	bl	800a3d0 <sin>
 80019d6:	ec53 2b10 	vmov	r2, r3, d0
 80019da:	4620      	mov	r0, r4
 80019dc:	4629      	mov	r1, r5
 80019de:	f7fe fe13 	bl	8000608 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7ff f8e5 	bl	8000bb8 <__aeabi_d2f>
 80019ee:	4603      	mov	r3, r0
 80019f0:	61fb      	str	r3, [r7, #28]
	T0 = 1 - T1 - T2;
 80019f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80019fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a06:	edc7 7a06 	vstr	s15, [r7, #24]

		switch (sector) {
 8001a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	f200 81d3 	bhi.w	8001dbc <foc_setPhaseVoltage+0x5fc>
 8001a16:	a201      	add	r2, pc, #4	; (adr r2, 8001a1c <foc_setPhaseVoltage+0x25c>)
 8001a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1c:	08001a35 	.word	0x08001a35
 8001a20:	08001ac1 	.word	0x08001ac1
 8001a24:	08001b8d 	.word	0x08001b8d
 8001a28:	08001c19 	.word	0x08001c19
 8001a2c:	08001ca5 	.word	0x08001ca5
 8001a30:	08001d31 	.word	0x08001d31
			case 1:
				a_duty = T1 + T2 + T0*0.5;
 8001a34:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a38:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a40:	ee17 0a90 	vmov	r0, s15
 8001a44:	f7fe fd88 	bl	8000558 <__aeabi_f2d>
 8001a48:	4604      	mov	r4, r0
 8001a4a:	460d      	mov	r5, r1
 8001a4c:	69b8      	ldr	r0, [r7, #24]
 8001a4e:	f7fe fd83 	bl	8000558 <__aeabi_f2d>
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	4b4a      	ldr	r3, [pc, #296]	; (8001b80 <foc_setPhaseVoltage+0x3c0>)
 8001a58:	f7fe fdd6 	bl	8000608 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4620      	mov	r0, r4
 8001a62:	4629      	mov	r1, r5
 8001a64:	f7fe fc1a 	bl	800029c <__adddf3>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f7ff f8a2 	bl	8000bb8 <__aeabi_d2f>
 8001a74:	4603      	mov	r3, r0
 8001a76:	63fb      	str	r3, [r7, #60]	; 0x3c
				b_duty = T2 + T0*0.5;
 8001a78:	69f8      	ldr	r0, [r7, #28]
 8001a7a:	f7fe fd6d 	bl	8000558 <__aeabi_f2d>
 8001a7e:	4604      	mov	r4, r0
 8001a80:	460d      	mov	r5, r1
 8001a82:	69b8      	ldr	r0, [r7, #24]
 8001a84:	f7fe fd68 	bl	8000558 <__aeabi_f2d>
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	4b3c      	ldr	r3, [pc, #240]	; (8001b80 <foc_setPhaseVoltage+0x3c0>)
 8001a8e:	f7fe fdbb 	bl	8000608 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4620      	mov	r0, r4
 8001a98:	4629      	mov	r1, r5
 8001a9a:	f7fe fbff 	bl	800029c <__adddf3>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7ff f887 	bl	8000bb8 <__aeabi_d2f>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	63bb      	str	r3, [r7, #56]	; 0x38
				c_duty = T0*0.5;
 8001aae:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ab2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aba:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				break;
 8001abe:	e17d      	b.n	8001dbc <foc_setPhaseVoltage+0x5fc>
			case 2:
				a_duty = T1 + T0*0.5;
 8001ac0:	6a38      	ldr	r0, [r7, #32]
 8001ac2:	f7fe fd49 	bl	8000558 <__aeabi_f2d>
 8001ac6:	4604      	mov	r4, r0
 8001ac8:	460d      	mov	r5, r1
 8001aca:	69b8      	ldr	r0, [r7, #24]
 8001acc:	f7fe fd44 	bl	8000558 <__aeabi_f2d>
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <foc_setPhaseVoltage+0x3c0>)
 8001ad6:	f7fe fd97 	bl	8000608 <__aeabi_dmul>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4620      	mov	r0, r4
 8001ae0:	4629      	mov	r1, r5
 8001ae2:	f7fe fbdb 	bl	800029c <__adddf3>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	f7ff f863 	bl	8000bb8 <__aeabi_d2f>
 8001af2:	4603      	mov	r3, r0
 8001af4:	63fb      	str	r3, [r7, #60]	; 0x3c
				b_duty = T1 + T2 + T0*0.5;
 8001af6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001afa:	edd7 7a07 	vldr	s15, [r7, #28]
 8001afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b02:	ee17 0a90 	vmov	r0, s15
 8001b06:	f7fe fd27 	bl	8000558 <__aeabi_f2d>
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	460d      	mov	r5, r1
 8001b0e:	69b8      	ldr	r0, [r7, #24]
 8001b10:	f7fe fd22 	bl	8000558 <__aeabi_f2d>
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <foc_setPhaseVoltage+0x3c0>)
 8001b1a:	f7fe fd75 	bl	8000608 <__aeabi_dmul>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4620      	mov	r0, r4
 8001b24:	4629      	mov	r1, r5
 8001b26:	f7fe fbb9 	bl	800029c <__adddf3>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7ff f841 	bl	8000bb8 <__aeabi_d2f>
 8001b36:	4603      	mov	r3, r0
 8001b38:	63bb      	str	r3, [r7, #56]	; 0x38
				c_duty = T0*0.5;
 8001b3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b46:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				break;
 8001b4a:	e137      	b.n	8001dbc <foc_setPhaseVoltage+0x5fc>
 8001b4c:	f3af 8000 	nop.w
 8001b50:	20000000 	.word	0x20000000
 8001b54:	404ca5dc 	.word	0x404ca5dc
 8001b58:	00000000 	.word	0x00000000
 8001b5c:	40768000 	.word	0x40768000
 8001b60:	54442d18 	.word	0x54442d18
 8001b64:	400921fb 	.word	0x400921fb
 8001b68:	60000000 	.word	0x60000000
 8001b6c:	3fd55555 	.word	0x3fd55555
 8001b70:	40280000 	.word	0x40280000
 8001b74:	40768000 	.word	0x40768000
 8001b78:	42700000 	.word	0x42700000
 8001b7c:	3c8efa35 	.word	0x3c8efa35
 8001b80:	3fe00000 	.word	0x3fe00000
 8001b84:	561abec8 	.word	0x561abec8
 8001b88:	3fe279a7 	.word	0x3fe279a7
			case 3:
				a_duty = T0*0.5;
 8001b8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b98:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				b_duty = T1 + T2 + T0*0.5;
 8001b9c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ba0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba8:	ee17 0a90 	vmov	r0, s15
 8001bac:	f7fe fcd4 	bl	8000558 <__aeabi_f2d>
 8001bb0:	4604      	mov	r4, r0
 8001bb2:	460d      	mov	r5, r1
 8001bb4:	69b8      	ldr	r0, [r7, #24]
 8001bb6:	f7fe fccf 	bl	8000558 <__aeabi_f2d>
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	4b86      	ldr	r3, [pc, #536]	; (8001dd8 <foc_setPhaseVoltage+0x618>)
 8001bc0:	f7fe fd22 	bl	8000608 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4620      	mov	r0, r4
 8001bca:	4629      	mov	r1, r5
 8001bcc:	f7fe fb66 	bl	800029c <__adddf3>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f7fe ffee 	bl	8000bb8 <__aeabi_d2f>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	63bb      	str	r3, [r7, #56]	; 0x38
				c_duty = T2 + T0*0.5;
 8001be0:	69f8      	ldr	r0, [r7, #28]
 8001be2:	f7fe fcb9 	bl	8000558 <__aeabi_f2d>
 8001be6:	4604      	mov	r4, r0
 8001be8:	460d      	mov	r5, r1
 8001bea:	69b8      	ldr	r0, [r7, #24]
 8001bec:	f7fe fcb4 	bl	8000558 <__aeabi_f2d>
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	4b78      	ldr	r3, [pc, #480]	; (8001dd8 <foc_setPhaseVoltage+0x618>)
 8001bf6:	f7fe fd07 	bl	8000608 <__aeabi_dmul>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4620      	mov	r0, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	f7fe fb4b 	bl	800029c <__adddf3>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7fe ffd3 	bl	8000bb8 <__aeabi_d2f>
 8001c12:	4603      	mov	r3, r0
 8001c14:	637b      	str	r3, [r7, #52]	; 0x34
				break;
 8001c16:	e0d1      	b.n	8001dbc <foc_setPhaseVoltage+0x5fc>
			case 4:
				a_duty = T0*0.5;
 8001c18:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c1c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c24:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				b_duty = T1 + T0*0.5;
 8001c28:	6a38      	ldr	r0, [r7, #32]
 8001c2a:	f7fe fc95 	bl	8000558 <__aeabi_f2d>
 8001c2e:	4604      	mov	r4, r0
 8001c30:	460d      	mov	r5, r1
 8001c32:	69b8      	ldr	r0, [r7, #24]
 8001c34:	f7fe fc90 	bl	8000558 <__aeabi_f2d>
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	4b66      	ldr	r3, [pc, #408]	; (8001dd8 <foc_setPhaseVoltage+0x618>)
 8001c3e:	f7fe fce3 	bl	8000608 <__aeabi_dmul>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4620      	mov	r0, r4
 8001c48:	4629      	mov	r1, r5
 8001c4a:	f7fe fb27 	bl	800029c <__adddf3>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	f7fe ffaf 	bl	8000bb8 <__aeabi_d2f>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	63bb      	str	r3, [r7, #56]	; 0x38
				c_duty = T1 + T2 + T0*0.5;
 8001c5e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c62:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6a:	ee17 0a90 	vmov	r0, s15
 8001c6e:	f7fe fc73 	bl	8000558 <__aeabi_f2d>
 8001c72:	4604      	mov	r4, r0
 8001c74:	460d      	mov	r5, r1
 8001c76:	69b8      	ldr	r0, [r7, #24]
 8001c78:	f7fe fc6e 	bl	8000558 <__aeabi_f2d>
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	4b55      	ldr	r3, [pc, #340]	; (8001dd8 <foc_setPhaseVoltage+0x618>)
 8001c82:	f7fe fcc1 	bl	8000608 <__aeabi_dmul>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	f7fe fb05 	bl	800029c <__adddf3>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f7fe ff8d 	bl	8000bb8 <__aeabi_d2f>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	637b      	str	r3, [r7, #52]	; 0x34
				break;
 8001ca2:	e08b      	b.n	8001dbc <foc_setPhaseVoltage+0x5fc>
			case 5:
				a_duty = T2 + T0*0.5;
 8001ca4:	69f8      	ldr	r0, [r7, #28]
 8001ca6:	f7fe fc57 	bl	8000558 <__aeabi_f2d>
 8001caa:	4604      	mov	r4, r0
 8001cac:	460d      	mov	r5, r1
 8001cae:	69b8      	ldr	r0, [r7, #24]
 8001cb0:	f7fe fc52 	bl	8000558 <__aeabi_f2d>
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <foc_setPhaseVoltage+0x618>)
 8001cba:	f7fe fca5 	bl	8000608 <__aeabi_dmul>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	f7fe fae9 	bl	800029c <__adddf3>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f7fe ff71 	bl	8000bb8 <__aeabi_d2f>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
				b_duty = T0*0.5;
 8001cda:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cde:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				c_duty = T1 + T2 + T0*0.5;
 8001cea:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cee:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf6:	ee17 0a90 	vmov	r0, s15
 8001cfa:	f7fe fc2d 	bl	8000558 <__aeabi_f2d>
 8001cfe:	4604      	mov	r4, r0
 8001d00:	460d      	mov	r5, r1
 8001d02:	69b8      	ldr	r0, [r7, #24]
 8001d04:	f7fe fc28 	bl	8000558 <__aeabi_f2d>
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <foc_setPhaseVoltage+0x618>)
 8001d0e:	f7fe fc7b 	bl	8000608 <__aeabi_dmul>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4620      	mov	r0, r4
 8001d18:	4629      	mov	r1, r5
 8001d1a:	f7fe fabf 	bl	800029c <__adddf3>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7fe ff47 	bl	8000bb8 <__aeabi_d2f>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
 8001d2e:	e045      	b.n	8001dbc <foc_setPhaseVoltage+0x5fc>
			case 6:
				a_duty = T1 + T2 + T0*0.5;
 8001d30:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d34:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3c:	ee17 0a90 	vmov	r0, s15
 8001d40:	f7fe fc0a 	bl	8000558 <__aeabi_f2d>
 8001d44:	4604      	mov	r4, r0
 8001d46:	460d      	mov	r5, r1
 8001d48:	69b8      	ldr	r0, [r7, #24]
 8001d4a:	f7fe fc05 	bl	8000558 <__aeabi_f2d>
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <foc_setPhaseVoltage+0x618>)
 8001d54:	f7fe fc58 	bl	8000608 <__aeabi_dmul>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	4629      	mov	r1, r5
 8001d60:	f7fe fa9c 	bl	800029c <__adddf3>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f7fe ff24 	bl	8000bb8 <__aeabi_d2f>
 8001d70:	4603      	mov	r3, r0
 8001d72:	63fb      	str	r3, [r7, #60]	; 0x3c
				b_duty = T0*0.5;
 8001d74:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d78:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d80:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				c_duty = T1 + T0*0.5;
 8001d84:	6a38      	ldr	r0, [r7, #32]
 8001d86:	f7fe fbe7 	bl	8000558 <__aeabi_f2d>
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	460d      	mov	r5, r1
 8001d8e:	69b8      	ldr	r0, [r7, #24]
 8001d90:	f7fe fbe2 	bl	8000558 <__aeabi_f2d>
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <foc_setPhaseVoltage+0x618>)
 8001d9a:	f7fe fc35 	bl	8000608 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4620      	mov	r0, r4
 8001da4:	4629      	mov	r1, r5
 8001da6:	f7fe fa79 	bl	800029c <__adddf3>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	f7fe ff01 	bl	8000bb8 <__aeabi_d2f>
 8001db6:	4603      	mov	r3, r0
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
				break;
 8001dba:	bf00      	nop
		}

	drv8313_setPWM(driver, a_duty, b_duty, c_duty);
 8001dbc:	ed97 1a0d 	vldr	s2, [r7, #52]	; 0x34
 8001dc0:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8001dc4:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001dc8:	6978      	ldr	r0, [r7, #20]
 8001dca:	f7ff fac9 	bl	8001360 <drv8313_setPWM>
}
 8001dce:	bf00      	nop
 8001dd0:	3740      	adds	r7, #64	; 0x40
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dd8:	3fe00000 	.word	0x3fe00000
 8001ddc:	00000000 	.word	0x00000000

08001de0 <setSampleFreq_ms>:
#include "Quaternions.h"

/*
 * @brief Set the sample frequency based on the while loop cycle time (in milliseconds)
 */
void setSampleFreq_ms() {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	sampleFreq = 1 / (0.001 * while_t);
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <setSampleFreq_ms+0x48>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fbb5 	bl	8000558 <__aeabi_f2d>
 8001dee:	a30c      	add	r3, pc, #48	; (adr r3, 8001e20 <setSampleFreq_ms+0x40>)
 8001df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df4:	f7fe fc08 	bl	8000608 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	f04f 0000 	mov.w	r0, #0
 8001e00:	490a      	ldr	r1, [pc, #40]	; (8001e2c <setSampleFreq_ms+0x4c>)
 8001e02:	f7fe fd2b 	bl	800085c <__aeabi_ddiv>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7fe fed3 	bl	8000bb8 <__aeabi_d2f>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a06      	ldr	r2, [pc, #24]	; (8001e30 <setSampleFreq_ms+0x50>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	f3af 8000 	nop.w
 8001e20:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e24:	3f50624d 	.word	0x3f50624d
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	3ff00000 	.word	0x3ff00000
 8001e30:	20000244 	.word	0x20000244
 8001e34:	00000000 	.word	0x00000000

08001e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e40:	f001 fc46 	bl	80036d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e44:	f000 fb6c 	bl	8002520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e48:	f000 ff04 	bl	8002c54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e4c:	f000 feb8 	bl	8002bc0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001e50:	f000 fee0 	bl	8002c14 <MX_DMA_Init>
  MX_ADC1_Init();
 8001e54:	f000 fbce 	bl	80025f4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001e58:	f000 fcc4 	bl	80027e4 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001e5c:	f000 fc8c 	bl	8002778 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001e60:	f000 fd78 	bl	8002954 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e64:	f000 fde4 	bl	8002a30 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001e68:	f000 fe52 	bl	8002b10 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

	if (!USE_IMU_VIS) {
		sprintf((char*) buff, "\r\n###########################\r\n");
 8001e6c:	49cb      	ldr	r1, [pc, #812]	; (800219c <main+0x364>)
 8001e6e:	48cc      	ldr	r0, [pc, #816]	; (80021a0 <main+0x368>)
 8001e70:	f006 f832 	bl	8007ed8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) buff, strlen((char*) buff),
 8001e74:	48ca      	ldr	r0, [pc, #808]	; (80021a0 <main+0x368>)
 8001e76:	f7fe f9b3 	bl	80001e0 <strlen>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e82:	49c7      	ldr	r1, [pc, #796]	; (80021a0 <main+0x368>)
 8001e84:	48c7      	ldr	r0, [pc, #796]	; (80021a4 <main+0x36c>)
 8001e86:	f005 f8c2 	bl	800700e <HAL_UART_Transmit>

	MotorDriver MotorX;
	MotorDriver MotorY;
	MotorDriver MotorZ;

	MotorX.PIN_ENC = PIN_ENC_X;
 8001e8a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001e8e:	2210      	movs	r2, #16
 8001e90:	801a      	strh	r2, [r3, #0]
	MotorY.PIN_ENC = PIN_ENC_Y;
 8001e92:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e96:	2220      	movs	r2, #32
 8001e98:	801a      	strh	r2, [r3, #0]
	MotorZ.PIN_ENC = PIN_ENC_Z;
 8001e9a:	463b      	mov	r3, r7
 8001e9c:	2240      	movs	r2, #64	; 0x40
 8001e9e:	801a      	strh	r2, [r3, #0]

	if (USE_AS5048A) {
		/* Initialize encoders for each motor*/
		as5048a_init(&MotorX);
 8001ea0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff f8cd 	bl	8001044 <as5048a_init>
		as5048a_init(&MotorY);
 8001eaa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f8c8 	bl	8001044 <as5048a_init>
		as5048a_init(&MotorZ);
 8001eb4:	463b      	mov	r3, r7
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f8c4 	bl	8001044 <as5048a_init>
	}

	if (USE_DRV8313) {

		/* Initialize motor structs and start PWM*/
		drv8313_init(&MotorX, &htim1);
 8001ebc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001ec0:	49b9      	ldr	r1, [pc, #740]	; (80021a8 <main+0x370>)
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f9d4 	bl	8001270 <drv8313_init>
		drv8313_init(&MotorY, &htim2);
 8001ec8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ecc:	49b7      	ldr	r1, [pc, #732]	; (80021ac <main+0x374>)
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f9ce 	bl	8001270 <drv8313_init>
		drv8313_init(&MotorZ, &htim3);
 8001ed4:	463b      	mov	r3, r7
 8001ed6:	49b6      	ldr	r1, [pc, #728]	; (80021b0 <main+0x378>)
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff f9c9 	bl	8001270 <drv8313_init>

		MotorX.pole_pairs = 22/2;
 8001ede:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001ee2:	220b      	movs	r2, #11
 8001ee4:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		MotorY.pole_pairs = 22/2;
 8001ee8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001eec:	220b      	movs	r2, #11
 8001eee:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		MotorZ.pole_pairs = 22/2;
 8001ef2:	463b      	mov	r3, r7
 8001ef4:	220b      	movs	r2, #11
 8001ef6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8

		MotorX.direction = CCW;
 8001efa:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001efe:	22ff      	movs	r2, #255	; 0xff
 8001f00:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda

		foc_alignToRotor(&MotorX);
 8001f04:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fb03 	bl	8001514 <foc_alignToRotor>
		//foc_alignToRotor(&MotorY);
		//foc_alignToRotor(&MotorZ);

		/*Initialize ADC */
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_read, ADC_CHANNELS);
 8001f0e:	2209      	movs	r2, #9
 8001f10:	49a8      	ldr	r1, [pc, #672]	; (80021b4 <main+0x37c>)
 8001f12:	48a9      	ldr	r0, [pc, #676]	; (80021b8 <main+0x380>)
 8001f14:	f001 fcb6 	bl	8003884 <HAL_ADC_Start_DMA>

		adc_ratio = 1/(float)adc_max;
 8001f18:	4ba8      	ldr	r3, [pc, #672]	; (80021bc <main+0x384>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	ee07 3a90 	vmov	s15, r3
 8001f20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f2c:	4ba4      	ldr	r3, [pc, #656]	; (80021c0 <main+0x388>)
 8001f2e:	edc3 7a00 	vstr	s15, [r3]
		sense_ratio = 1/(float)(sense_resistance*ina181_gain);
 8001f32:	4ba4      	ldr	r3, [pc, #656]	; (80021c4 <main+0x38c>)
 8001f34:	ed93 7a00 	vldr	s14, [r3]
 8001f38:	4ba3      	ldr	r3, [pc, #652]	; (80021c8 <main+0x390>)
 8001f3a:	edd3 7a00 	vldr	s15, [r3]
 8001f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f4a:	4ba0      	ldr	r3, [pc, #640]	; (80021cc <main+0x394>)
 8001f4c:	edc3 7a00 	vstr	s15, [r3]

		/* ADC interrupt wait */
		while (adcConvComplete == 0) {
 8001f50:	bf00      	nop
 8001f52:	4b9f      	ldr	r3, [pc, #636]	; (80021d0 <main+0x398>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0fa      	beq.n	8001f52 <main+0x11a>
		}
		adcConvComplete = 0;
 8001f5c:	4b9c      	ldr	r3, [pc, #624]	; (80021d0 <main+0x398>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]

		/* get reference voltage on INA2181 */
		ina_ref = adc_read[2]*adc_ratio*adc_ref;
 8001f62:	4b94      	ldr	r3, [pc, #592]	; (80021b4 <main+0x37c>)
 8001f64:	889b      	ldrh	r3, [r3, #4]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f70:	4b93      	ldr	r3, [pc, #588]	; (80021c0 <main+0x388>)
 8001f72:	edd3 7a00 	vldr	s15, [r3]
 8001f76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f7a:	4b96      	ldr	r3, [pc, #600]	; (80021d4 <main+0x39c>)
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f84:	4b94      	ldr	r3, [pc, #592]	; (80021d8 <main+0x3a0>)
 8001f86:	edc3 7a00 	vstr	s15, [r3]

		/* get phase currents on each motor */
		MotorX.i_a = (adc_read[0]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8001f8a:	4b8a      	ldr	r3, [pc, #552]	; (80021b4 <main+0x37c>)
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	ee07 3a90 	vmov	s15, r3
 8001f94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f98:	4b89      	ldr	r3, [pc, #548]	; (80021c0 <main+0x388>)
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa2:	4b8c      	ldr	r3, [pc, #560]	; (80021d4 <main+0x39c>)
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fac:	4b8a      	ldr	r3, [pc, #552]	; (80021d8 <main+0x3a0>)
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fb6:	4b85      	ldr	r3, [pc, #532]	; (80021cc <main+0x394>)
 8001fb8:	edd3 7a00 	vldr	s15, [r3]
 8001fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001fc4:	edc3 7a01 	vstr	s15, [r3, #4]
		MotorX.i_b = (adc_read[1]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8001fc8:	4b7a      	ldr	r3, [pc, #488]	; (80021b4 <main+0x37c>)
 8001fca:	885b      	ldrh	r3, [r3, #2]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	ee07 3a90 	vmov	s15, r3
 8001fd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd6:	4b7a      	ldr	r3, [pc, #488]	; (80021c0 <main+0x388>)
 8001fd8:	edd3 7a00 	vldr	s15, [r3]
 8001fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fe0:	4b7c      	ldr	r3, [pc, #496]	; (80021d4 <main+0x39c>)
 8001fe2:	edd3 7a00 	vldr	s15, [r3]
 8001fe6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fea:	4b7b      	ldr	r3, [pc, #492]	; (80021d8 <main+0x3a0>)
 8001fec:	edd3 7a00 	vldr	s15, [r3]
 8001ff0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ff4:	4b75      	ldr	r3, [pc, #468]	; (80021cc <main+0x394>)
 8001ff6:	edd3 7a00 	vldr	s15, [r3]
 8001ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffe:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002002:	edc3 7a02 	vstr	s15, [r3, #8]

		MotorY.i_a = (adc_read[3]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002006:	4b6b      	ldr	r3, [pc, #428]	; (80021b4 <main+0x37c>)
 8002008:	88db      	ldrh	r3, [r3, #6]
 800200a:	b29b      	uxth	r3, r3
 800200c:	ee07 3a90 	vmov	s15, r3
 8002010:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002014:	4b6a      	ldr	r3, [pc, #424]	; (80021c0 <main+0x388>)
 8002016:	edd3 7a00 	vldr	s15, [r3]
 800201a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800201e:	4b6d      	ldr	r3, [pc, #436]	; (80021d4 <main+0x39c>)
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002028:	4b6b      	ldr	r3, [pc, #428]	; (80021d8 <main+0x3a0>)
 800202a:	edd3 7a00 	vldr	s15, [r3]
 800202e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002032:	4b66      	ldr	r3, [pc, #408]	; (80021cc <main+0x394>)
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002040:	edc3 7a01 	vstr	s15, [r3, #4]
		MotorY.i_b = (adc_read[4]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002044:	4b5b      	ldr	r3, [pc, #364]	; (80021b4 <main+0x37c>)
 8002046:	891b      	ldrh	r3, [r3, #8]
 8002048:	b29b      	uxth	r3, r3
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002052:	4b5b      	ldr	r3, [pc, #364]	; (80021c0 <main+0x388>)
 8002054:	edd3 7a00 	vldr	s15, [r3]
 8002058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800205c:	4b5d      	ldr	r3, [pc, #372]	; (80021d4 <main+0x39c>)
 800205e:	edd3 7a00 	vldr	s15, [r3]
 8002062:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002066:	4b5c      	ldr	r3, [pc, #368]	; (80021d8 <main+0x3a0>)
 8002068:	edd3 7a00 	vldr	s15, [r3]
 800206c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002070:	4b56      	ldr	r3, [pc, #344]	; (80021cc <main+0x394>)
 8002072:	edd3 7a00 	vldr	s15, [r3]
 8002076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800207e:	edc3 7a02 	vstr	s15, [r3, #8]

		MotorZ.i_a = (adc_read[6]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002082:	4b4c      	ldr	r3, [pc, #304]	; (80021b4 <main+0x37c>)
 8002084:	899b      	ldrh	r3, [r3, #12]
 8002086:	b29b      	uxth	r3, r3
 8002088:	ee07 3a90 	vmov	s15, r3
 800208c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002090:	4b4b      	ldr	r3, [pc, #300]	; (80021c0 <main+0x388>)
 8002092:	edd3 7a00 	vldr	s15, [r3]
 8002096:	ee27 7a27 	vmul.f32	s14, s14, s15
 800209a:	4b4e      	ldr	r3, [pc, #312]	; (80021d4 <main+0x39c>)
 800209c:	edd3 7a00 	vldr	s15, [r3]
 80020a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020a4:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <main+0x3a0>)
 80020a6:	edd3 7a00 	vldr	s15, [r3]
 80020aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020ae:	4b47      	ldr	r3, [pc, #284]	; (80021cc <main+0x394>)
 80020b0:	edd3 7a00 	vldr	s15, [r3]
 80020b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b8:	463b      	mov	r3, r7
 80020ba:	edc3 7a01 	vstr	s15, [r3, #4]
		MotorZ.i_b = (adc_read[7]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80020be:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <main+0x37c>)
 80020c0:	89db      	ldrh	r3, [r3, #14]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	ee07 3a90 	vmov	s15, r3
 80020c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020cc:	4b3c      	ldr	r3, [pc, #240]	; (80021c0 <main+0x388>)
 80020ce:	edd3 7a00 	vldr	s15, [r3]
 80020d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d6:	4b3f      	ldr	r3, [pc, #252]	; (80021d4 <main+0x39c>)
 80020d8:	edd3 7a00 	vldr	s15, [r3]
 80020dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020e0:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <main+0x3a0>)
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020ea:	4b38      	ldr	r3, [pc, #224]	; (80021cc <main+0x394>)
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f4:	463b      	mov	r3, r7
 80020f6:	edc3 7a02 	vstr	s15, [r3, #8]

		MotorX.speed_reg.T = (float)us_t_prev*us_to_ms;
 80020fa:	4b38      	ldr	r3, [pc, #224]	; (80021dc <main+0x3a4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002106:	4b36      	ldr	r3, [pc, #216]	; (80021e0 <main+0x3a8>)
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002110:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002114:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		MotorX.q_reg.T = (float)us_t_prev*us_to_ms;
 8002118:	4b30      	ldr	r3, [pc, #192]	; (80021dc <main+0x3a4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	ee07 3a90 	vmov	s15, r3
 8002120:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002124:	4b2e      	ldr	r3, [pc, #184]	; (80021e0 <main+0x3a8>)
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002132:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		MotorX.d_reg.T = (float)us_t_prev*us_to_ms;
 8002136:	4b29      	ldr	r3, [pc, #164]	; (80021dc <main+0x3a4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002142:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <main+0x3a8>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002150:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		bmi270_getAccConf(&Imu);
	}



	setSampleFreq_ms();
 8002154:	f7ff fe44 	bl	8001de0 <setSampleFreq_ms>

	TIM5->PSC = 84;
 8002158:	4b22      	ldr	r3, [pc, #136]	; (80021e4 <main+0x3ac>)
 800215a:	2254      	movs	r2, #84	; 0x54
 800215c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM5->ARR = 1000000 - 1;
 800215e:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <main+0x3ac>)
 8002160:	4a21      	ldr	r2, [pc, #132]	; (80021e8 <main+0x3b0>)
 8002162:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_TIM_Base_Start(&htim5);
 8002164:	4821      	ldr	r0, [pc, #132]	; (80021ec <main+0x3b4>)
 8002166:	f003 ffe3 	bl	8006130 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		us_t = __HAL_TIM_GET_COUNTER(&htim5);
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <main+0x3b4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	4a1f      	ldr	r2, [pc, #124]	; (80021f0 <main+0x3b8>)
 8002172:	6013      	str	r3, [r2, #0]
//		setSampleFreq_us();
		t1 = HAL_GetTick();
 8002174:	f001 fb12 	bl	800379c <HAL_GetTick>
 8002178:	4603      	mov	r3, r0
 800217a:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <main+0x3bc>)
 800217c:	6013      	str	r3, [r2, #0]
		setSampleFreq_ms();
 800217e:	f7ff fe2f 	bl	8001de0 <setSampleFreq_ms>

		}

		if (USE_DRV8313 && !USE_IMU_VIS) {
			/* ADC interrupt wait */
			while (adcConvComplete == 0) {
 8002182:	bf00      	nop
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <main+0x398>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0fa      	beq.n	8002184 <main+0x34c>
			}
			adcConvComplete = 0;
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <main+0x398>)
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]

			/* get reference voltage on INA2181 */
			ina_ref = adc_read[2]*adc_ratio*adc_ref;
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <main+0x37c>)
 8002196:	889b      	ldrh	r3, [r3, #4]
 8002198:	e02e      	b.n	80021f8 <main+0x3c0>
 800219a:	bf00      	nop
 800219c:	0800bda8 	.word	0x0800bda8
 80021a0:	2000024c 	.word	0x2000024c
 80021a4:	20004498 	.word	0x20004498
 80021a8:	200043a8 	.word	0x200043a8
 80021ac:	2000444c 	.word	0x2000444c
 80021b0:	20004298 	.word	0x20004298
 80021b4:	200042e0 	.word	0x200042e0
 80021b8:	200042f4 	.word	0x200042f4
 80021bc:	20000010 	.word	0x20000010
 80021c0:	20004448 	.word	0x20004448
 80021c4:	20000014 	.word	0x20000014
 80021c8:	20000008 	.word	0x20000008
 80021cc:	200043a0 	.word	0x200043a0
 80021d0:	20000220 	.word	0x20000220
 80021d4:	2000000c 	.word	0x2000000c
 80021d8:	20000224 	.word	0x20000224
 80021dc:	20000004 	.word	0x20000004
 80021e0:	20000018 	.word	0x20000018
 80021e4:	40000c00 	.word	0x40000c00
 80021e8:	000f423f 	.word	0x000f423f
 80021ec:	20004250 	.word	0x20004250
 80021f0:	2000021c 	.word	0x2000021c
 80021f4:	200043a4 	.word	0x200043a4
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	ee07 3a90 	vmov	s15, r3
 80021fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002202:	4bb9      	ldr	r3, [pc, #740]	; (80024e8 <main+0x6b0>)
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	ee27 7a27 	vmul.f32	s14, s14, s15
 800220c:	4bb7      	ldr	r3, [pc, #732]	; (80024ec <main+0x6b4>)
 800220e:	edd3 7a00 	vldr	s15, [r3]
 8002212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002216:	4bb6      	ldr	r3, [pc, #728]	; (80024f0 <main+0x6b8>)
 8002218:	edc3 7a00 	vstr	s15, [r3]

			MotorX.speed_reg.T = (float)us_t_prev*us_to_ms;
 800221c:	4bb5      	ldr	r3, [pc, #724]	; (80024f4 <main+0x6bc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	ee07 3a90 	vmov	s15, r3
 8002224:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002228:	4bb3      	ldr	r3, [pc, #716]	; (80024f8 <main+0x6c0>)
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002232:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002236:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
			MotorX.q_reg.T = (float)us_t_prev*us_to_ms;
 800223a:	4bae      	ldr	r3, [pc, #696]	; (80024f4 <main+0x6bc>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002246:	4bac      	ldr	r3, [pc, #688]	; (80024f8 <main+0x6c0>)
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002250:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002254:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			MotorX.d_reg.T = (float)us_t_prev*us_to_ms;
 8002258:	4ba6      	ldr	r3, [pc, #664]	; (80024f4 <main+0x6bc>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	ee07 3a90 	vmov	s15, r3
 8002260:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002264:	4ba4      	ldr	r3, [pc, #656]	; (80024f8 <main+0x6c0>)
 8002266:	edd3 7a00 	vldr	s15, [r3]
 800226a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002272:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

			/* get phase currents on each motor */
			MotorX.i_a = (adc_read[0]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002276:	4ba1      	ldr	r3, [pc, #644]	; (80024fc <main+0x6c4>)
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	ee07 3a90 	vmov	s15, r3
 8002280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002284:	4b98      	ldr	r3, [pc, #608]	; (80024e8 <main+0x6b0>)
 8002286:	edd3 7a00 	vldr	s15, [r3]
 800228a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800228e:	4b97      	ldr	r3, [pc, #604]	; (80024ec <main+0x6b4>)
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002298:	4b95      	ldr	r3, [pc, #596]	; (80024f0 <main+0x6b8>)
 800229a:	edd3 7a00 	vldr	s15, [r3]
 800229e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022a2:	4b97      	ldr	r3, [pc, #604]	; (8002500 <main+0x6c8>)
 80022a4:	edd3 7a00 	vldr	s15, [r3]
 80022a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ac:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80022b0:	edc3 7a01 	vstr	s15, [r3, #4]
			MotorX.i_b = (adc_read[1]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80022b4:	4b91      	ldr	r3, [pc, #580]	; (80024fc <main+0x6c4>)
 80022b6:	885b      	ldrh	r3, [r3, #2]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022c2:	4b89      	ldr	r3, [pc, #548]	; (80024e8 <main+0x6b0>)
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022cc:	4b87      	ldr	r3, [pc, #540]	; (80024ec <main+0x6b4>)
 80022ce:	edd3 7a00 	vldr	s15, [r3]
 80022d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d6:	4b86      	ldr	r3, [pc, #536]	; (80024f0 <main+0x6b8>)
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022e0:	4b87      	ldr	r3, [pc, #540]	; (8002500 <main+0x6c8>)
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ea:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80022ee:	edc3 7a02 	vstr	s15, [r3, #8]
			as5048a_calcSpeed(&MotorX, us_t_prev*0.000001); //convert us to s
 80022f2:	4b80      	ldr	r3, [pc, #512]	; (80024f4 <main+0x6bc>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe f90c 	bl	8000514 <__aeabi_ui2d>
 80022fc:	a378      	add	r3, pc, #480	; (adr r3, 80024e0 <main+0x6a8>)
 80022fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002302:	f7fe f981 	bl	8000608 <__aeabi_dmul>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
 800230e:	f7fe fc53 	bl	8000bb8 <__aeabi_d2f>
 8002312:	4602      	mov	r2, r0
 8002314:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002318:	ee00 2a10 	vmov	s0, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe ff77 	bl	8001210 <as5048a_calcSpeed>
			as5048a_calcSpeed(&MotorY, us_t_prev*0.000001);
 8002322:	4b74      	ldr	r3, [pc, #464]	; (80024f4 <main+0x6bc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe f8f4 	bl	8000514 <__aeabi_ui2d>
 800232c:	a36c      	add	r3, pc, #432	; (adr r3, 80024e0 <main+0x6a8>)
 800232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002332:	f7fe f969 	bl	8000608 <__aeabi_dmul>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	f7fe fc3b 	bl	8000bb8 <__aeabi_d2f>
 8002342:	4602      	mov	r2, r0
 8002344:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002348:	ee00 2a10 	vmov	s0, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe ff5f 	bl	8001210 <as5048a_calcSpeed>
			as5048a_calcSpeed(&MotorZ, us_t_prev*0.000001);
 8002352:	4b68      	ldr	r3, [pc, #416]	; (80024f4 <main+0x6bc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe f8dc 	bl	8000514 <__aeabi_ui2d>
 800235c:	a360      	add	r3, pc, #384	; (adr r3, 80024e0 <main+0x6a8>)
 800235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002362:	f7fe f951 	bl	8000608 <__aeabi_dmul>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fc23 	bl	8000bb8 <__aeabi_d2f>
 8002372:	4602      	mov	r2, r0
 8002374:	463b      	mov	r3, r7
 8002376:	ee00 2a10 	vmov	s0, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe ff48 	bl	8001210 <as5048a_calcSpeed>
			foc_update(&MotorX);
 8002380:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff f999 	bl	80016bc <foc_update>

			MotorY.i_a = (adc_read[3]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 800238a:	4b5c      	ldr	r3, [pc, #368]	; (80024fc <main+0x6c4>)
 800238c:	88db      	ldrh	r3, [r3, #6]
 800238e:	b29b      	uxth	r3, r3
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002398:	4b53      	ldr	r3, [pc, #332]	; (80024e8 <main+0x6b0>)
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023a2:	4b52      	ldr	r3, [pc, #328]	; (80024ec <main+0x6b4>)
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ac:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <main+0x6b8>)
 80023ae:	edd3 7a00 	vldr	s15, [r3]
 80023b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023b6:	4b52      	ldr	r3, [pc, #328]	; (8002500 <main+0x6c8>)
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023c4:	edc3 7a01 	vstr	s15, [r3, #4]
			MotorY.i_b = (adc_read[4]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 80023c8:	4b4c      	ldr	r3, [pc, #304]	; (80024fc <main+0x6c4>)
 80023ca:	891b      	ldrh	r3, [r3, #8]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	ee07 3a90 	vmov	s15, r3
 80023d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023d6:	4b44      	ldr	r3, [pc, #272]	; (80024e8 <main+0x6b0>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023e0:	4b42      	ldr	r3, [pc, #264]	; (80024ec <main+0x6b4>)
 80023e2:	edd3 7a00 	vldr	s15, [r3]
 80023e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ea:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <main+0x6b8>)
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023f4:	4b42      	ldr	r3, [pc, #264]	; (8002500 <main+0x6c8>)
 80023f6:	edd3 7a00 	vldr	s15, [r3]
 80023fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002402:	edc3 7a02 	vstr	s15, [r3, #8]
//			foc_update(&MotorY);

			MotorZ.i_a = (adc_read[6]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002406:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <main+0x6c4>)
 8002408:	899b      	ldrh	r3, [r3, #12]
 800240a:	b29b      	uxth	r3, r3
 800240c:	ee07 3a90 	vmov	s15, r3
 8002410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002414:	4b34      	ldr	r3, [pc, #208]	; (80024e8 <main+0x6b0>)
 8002416:	edd3 7a00 	vldr	s15, [r3]
 800241a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800241e:	4b33      	ldr	r3, [pc, #204]	; (80024ec <main+0x6b4>)
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002428:	4b31      	ldr	r3, [pc, #196]	; (80024f0 <main+0x6b8>)
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002432:	4b33      	ldr	r3, [pc, #204]	; (8002500 <main+0x6c8>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243c:	463b      	mov	r3, r7
 800243e:	edc3 7a01 	vstr	s15, [r3, #4]
			MotorZ.i_b = (adc_read[7]*adc_ratio*adc_ref - ina_ref)*sense_ratio;
 8002442:	4b2e      	ldr	r3, [pc, #184]	; (80024fc <main+0x6c4>)
 8002444:	89db      	ldrh	r3, [r3, #14]
 8002446:	b29b      	uxth	r3, r3
 8002448:	ee07 3a90 	vmov	s15, r3
 800244c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002450:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <main+0x6b0>)
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800245a:	4b24      	ldr	r3, [pc, #144]	; (80024ec <main+0x6b4>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002464:	4b22      	ldr	r3, [pc, #136]	; (80024f0 <main+0x6b8>)
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800246e:	4b24      	ldr	r3, [pc, #144]	; (8002500 <main+0x6c8>)
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002478:	463b      	mov	r3, r7
 800247a:	edc3 7a02 	vstr	s15, [r3, #8]

		}

		//HAL_Delay(sampleDelay);

		loop_cnt++;
 800247e:	4b21      	ldr	r3, [pc, #132]	; (8002504 <main+0x6cc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	3301      	adds	r3, #1
 8002484:	4a1f      	ldr	r2, [pc, #124]	; (8002504 <main+0x6cc>)
 8002486:	6013      	str	r3, [r2, #0]
		loop_cnt %= print_flag;
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <main+0x6cc>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <main+0x6d0>)
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	fbb3 f1f2 	udiv	r1, r3, r2
 8002494:	fb02 f201 	mul.w	r2, r2, r1
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	4a1a      	ldr	r2, [pc, #104]	; (8002504 <main+0x6cc>)
 800249c:	6013      	str	r3, [r2, #0]
		/* millisecond timer */
		t2 = HAL_GetTick();
 800249e:	f001 f97d 	bl	800379c <HAL_GetTick>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4a19      	ldr	r2, [pc, #100]	; (800250c <main+0x6d4>)
 80024a6:	6013      	str	r3, [r2, #0]
		while_t = t2 - t1;
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <main+0x6d4>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b18      	ldr	r3, [pc, #96]	; (8002510 <main+0x6d8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <main+0x6dc>)
 80024bc:	edc3 7a00 	vstr	s15, [r3]
		/* microsecond timer */
		us_t = __HAL_TIM_GET_COUNTER(&htim5) - us_t;
 80024c0:	4b15      	ldr	r3, [pc, #84]	; (8002518 <main+0x6e0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <main+0x6e4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	4a13      	ldr	r2, [pc, #76]	; (800251c <main+0x6e4>)
 80024ce:	6013      	str	r3, [r2, #0]
		us_t_prev = us_t;
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <main+0x6e4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a07      	ldr	r2, [pc, #28]	; (80024f4 <main+0x6bc>)
 80024d6:	6013      	str	r3, [r2, #0]
		us_t = __HAL_TIM_GET_COUNTER(&htim5);
 80024d8:	e647      	b.n	800216a <main+0x332>
 80024da:	bf00      	nop
 80024dc:	f3af 8000 	nop.w
 80024e0:	a0b5ed8d 	.word	0xa0b5ed8d
 80024e4:	3eb0c6f7 	.word	0x3eb0c6f7
 80024e8:	20004448 	.word	0x20004448
 80024ec:	2000000c 	.word	0x2000000c
 80024f0:	20000224 	.word	0x20000224
 80024f4:	20000004 	.word	0x20000004
 80024f8:	20000018 	.word	0x20000018
 80024fc:	200042e0 	.word	0x200042e0
 8002500:	200043a0 	.word	0x200043a0
 8002504:	20000228 	.word	0x20000228
 8002508:	2000001c 	.word	0x2000001c
 800250c:	2000424c 	.word	0x2000424c
 8002510:	200043a4 	.word	0x200043a4
 8002514:	20000000 	.word	0x20000000
 8002518:	20004250 	.word	0x20004250
 800251c:	2000021c 	.word	0x2000021c

08002520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b094      	sub	sp, #80	; 0x50
 8002524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002526:	f107 0320 	add.w	r3, r7, #32
 800252a:	2230      	movs	r2, #48	; 0x30
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f005 f860 	bl	80075f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002544:	2300      	movs	r3, #0
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	4b28      	ldr	r3, [pc, #160]	; (80025ec <SystemClock_Config+0xcc>)
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	4a27      	ldr	r2, [pc, #156]	; (80025ec <SystemClock_Config+0xcc>)
 800254e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002552:	6413      	str	r3, [r2, #64]	; 0x40
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <SystemClock_Config+0xcc>)
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002560:	2300      	movs	r3, #0
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <SystemClock_Config+0xd0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800256c:	4a20      	ldr	r2, [pc, #128]	; (80025f0 <SystemClock_Config+0xd0>)
 800256e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <SystemClock_Config+0xd0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002580:	2302      	movs	r3, #2
 8002582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002584:	2301      	movs	r3, #1
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002588:	2310      	movs	r3, #16
 800258a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800258c:	2302      	movs	r3, #2
 800258e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002590:	2300      	movs	r3, #0
 8002592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002594:	2308      	movs	r3, #8
 8002596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002598:	2354      	movs	r3, #84	; 0x54
 800259a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800259c:	2302      	movs	r3, #2
 800259e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80025a0:	2307      	movs	r3, #7
 80025a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025a4:	f107 0320 	add.w	r3, r7, #32
 80025a8:	4618      	mov	r0, r3
 80025aa:	f002 fb47 	bl	8004c3c <HAL_RCC_OscConfig>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80025b4:	f000 fbdc 	bl	8002d70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025b8:	230f      	movs	r3, #15
 80025ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025bc:	2302      	movs	r3, #2
 80025be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025ce:	f107 030c 	add.w	r3, r7, #12
 80025d2:	2102      	movs	r1, #2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f002 fda9 	bl	800512c <HAL_RCC_ClockConfig>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80025e0:	f000 fbc6 	bl	8002d70 <Error_Handler>
  }
}
 80025e4:	bf00      	nop
 80025e6:	3750      	adds	r7, #80	; 0x50
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40007000 	.word	0x40007000

080025f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025fa:	463b      	mov	r3, r7
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002606:	4b59      	ldr	r3, [pc, #356]	; (800276c <MX_ADC1_Init+0x178>)
 8002608:	4a59      	ldr	r2, [pc, #356]	; (8002770 <MX_ADC1_Init+0x17c>)
 800260a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800260c:	4b57      	ldr	r3, [pc, #348]	; (800276c <MX_ADC1_Init+0x178>)
 800260e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002612:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002614:	4b55      	ldr	r3, [pc, #340]	; (800276c <MX_ADC1_Init+0x178>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800261a:	4b54      	ldr	r3, [pc, #336]	; (800276c <MX_ADC1_Init+0x178>)
 800261c:	2201      	movs	r2, #1
 800261e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002620:	4b52      	ldr	r3, [pc, #328]	; (800276c <MX_ADC1_Init+0x178>)
 8002622:	2201      	movs	r2, #1
 8002624:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002626:	4b51      	ldr	r3, [pc, #324]	; (800276c <MX_ADC1_Init+0x178>)
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800262e:	4b4f      	ldr	r3, [pc, #316]	; (800276c <MX_ADC1_Init+0x178>)
 8002630:	2200      	movs	r2, #0
 8002632:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002634:	4b4d      	ldr	r3, [pc, #308]	; (800276c <MX_ADC1_Init+0x178>)
 8002636:	4a4f      	ldr	r2, [pc, #316]	; (8002774 <MX_ADC1_Init+0x180>)
 8002638:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800263a:	4b4c      	ldr	r3, [pc, #304]	; (800276c <MX_ADC1_Init+0x178>)
 800263c:	2200      	movs	r2, #0
 800263e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8002640:	4b4a      	ldr	r3, [pc, #296]	; (800276c <MX_ADC1_Init+0x178>)
 8002642:	2209      	movs	r2, #9
 8002644:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002646:	4b49      	ldr	r3, [pc, #292]	; (800276c <MX_ADC1_Init+0x178>)
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800264e:	4b47      	ldr	r3, [pc, #284]	; (800276c <MX_ADC1_Init+0x178>)
 8002650:	2201      	movs	r2, #1
 8002652:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002654:	4845      	ldr	r0, [pc, #276]	; (800276c <MX_ADC1_Init+0x178>)
 8002656:	f001 f8d1 	bl	80037fc <HAL_ADC_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002660:	f000 fb86 	bl	8002d70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002664:	2300      	movs	r3, #0
 8002666:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002668:	2301      	movs	r3, #1
 800266a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800266c:	2300      	movs	r3, #0
 800266e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002670:	463b      	mov	r3, r7
 8002672:	4619      	mov	r1, r3
 8002674:	483d      	ldr	r0, [pc, #244]	; (800276c <MX_ADC1_Init+0x178>)
 8002676:	f001 fa09 	bl	8003a8c <HAL_ADC_ConfigChannel>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002680:	f000 fb76 	bl	8002d70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002684:	2304      	movs	r3, #4
 8002686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002688:	2302      	movs	r3, #2
 800268a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800268c:	463b      	mov	r3, r7
 800268e:	4619      	mov	r1, r3
 8002690:	4836      	ldr	r0, [pc, #216]	; (800276c <MX_ADC1_Init+0x178>)
 8002692:	f001 f9fb 	bl	8003a8c <HAL_ADC_ConfigChannel>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800269c:	f000 fb68 	bl	8002d70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80026a0:	2309      	movs	r3, #9
 80026a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80026a4:	2303      	movs	r3, #3
 80026a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026a8:	463b      	mov	r3, r7
 80026aa:	4619      	mov	r1, r3
 80026ac:	482f      	ldr	r0, [pc, #188]	; (800276c <MX_ADC1_Init+0x178>)
 80026ae:	f001 f9ed 	bl	8003a8c <HAL_ADC_ConfigChannel>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80026b8:	f000 fb5a 	bl	8002d70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80026bc:	230a      	movs	r3, #10
 80026be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80026c0:	2304      	movs	r3, #4
 80026c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026c4:	463b      	mov	r3, r7
 80026c6:	4619      	mov	r1, r3
 80026c8:	4828      	ldr	r0, [pc, #160]	; (800276c <MX_ADC1_Init+0x178>)
 80026ca:	f001 f9df 	bl	8003a8c <HAL_ADC_ConfigChannel>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80026d4:	f000 fb4c 	bl	8002d70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80026d8:	230b      	movs	r3, #11
 80026da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80026dc:	2305      	movs	r3, #5
 80026de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026e0:	463b      	mov	r3, r7
 80026e2:	4619      	mov	r1, r3
 80026e4:	4821      	ldr	r0, [pc, #132]	; (800276c <MX_ADC1_Init+0x178>)
 80026e6:	f001 f9d1 	bl	8003a8c <HAL_ADC_ConfigChannel>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80026f0:	f000 fb3e 	bl	8002d70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80026f4:	230c      	movs	r3, #12
 80026f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80026f8:	2306      	movs	r3, #6
 80026fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026fc:	463b      	mov	r3, r7
 80026fe:	4619      	mov	r1, r3
 8002700:	481a      	ldr	r0, [pc, #104]	; (800276c <MX_ADC1_Init+0x178>)
 8002702:	f001 f9c3 	bl	8003a8c <HAL_ADC_ConfigChannel>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800270c:	f000 fb30 	bl	8002d70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002710:	230d      	movs	r3, #13
 8002712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002714:	2307      	movs	r3, #7
 8002716:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002718:	463b      	mov	r3, r7
 800271a:	4619      	mov	r1, r3
 800271c:	4813      	ldr	r0, [pc, #76]	; (800276c <MX_ADC1_Init+0x178>)
 800271e:	f001 f9b5 	bl	8003a8c <HAL_ADC_ConfigChannel>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002728:	f000 fb22 	bl	8002d70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800272c:	230e      	movs	r3, #14
 800272e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002730:	2308      	movs	r3, #8
 8002732:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002734:	463b      	mov	r3, r7
 8002736:	4619      	mov	r1, r3
 8002738:	480c      	ldr	r0, [pc, #48]	; (800276c <MX_ADC1_Init+0x178>)
 800273a:	f001 f9a7 	bl	8003a8c <HAL_ADC_ConfigChannel>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002744:	f000 fb14 	bl	8002d70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002748:	230f      	movs	r3, #15
 800274a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800274c:	2309      	movs	r3, #9
 800274e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002750:	463b      	mov	r3, r7
 8002752:	4619      	mov	r1, r3
 8002754:	4805      	ldr	r0, [pc, #20]	; (800276c <MX_ADC1_Init+0x178>)
 8002756:	f001 f999 	bl	8003a8c <HAL_ADC_ConfigChannel>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002760:	f000 fb06 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	200042f4 	.word	0x200042f4
 8002770:	40012000 	.word	0x40012000
 8002774:	0f000001 	.word	0x0f000001

08002778 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800277c:	4b17      	ldr	r3, [pc, #92]	; (80027dc <MX_SPI1_Init+0x64>)
 800277e:	4a18      	ldr	r2, [pc, #96]	; (80027e0 <MX_SPI1_Init+0x68>)
 8002780:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002782:	4b16      	ldr	r3, [pc, #88]	; (80027dc <MX_SPI1_Init+0x64>)
 8002784:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002788:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800278a:	4b14      	ldr	r3, [pc, #80]	; (80027dc <MX_SPI1_Init+0x64>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002790:	4b12      	ldr	r3, [pc, #72]	; (80027dc <MX_SPI1_Init+0x64>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002796:	4b11      	ldr	r3, [pc, #68]	; (80027dc <MX_SPI1_Init+0x64>)
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <MX_SPI1_Init+0x64>)
 800279e:	2200      	movs	r2, #0
 80027a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <MX_SPI1_Init+0x64>)
 80027a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80027aa:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <MX_SPI1_Init+0x64>)
 80027ac:	2220      	movs	r2, #32
 80027ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <MX_SPI1_Init+0x64>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <MX_SPI1_Init+0x64>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027bc:	4b07      	ldr	r3, [pc, #28]	; (80027dc <MX_SPI1_Init+0x64>)
 80027be:	2200      	movs	r2, #0
 80027c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <MX_SPI1_Init+0x64>)
 80027c4:	220a      	movs	r2, #10
 80027c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027c8:	4804      	ldr	r0, [pc, #16]	; (80027dc <MX_SPI1_Init+0x64>)
 80027ca:	f002 feab 	bl	8005524 <HAL_SPI_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027d4:	f000 facc 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	200043f0 	.word	0x200043f0
 80027e0:	40013000 	.word	0x40013000

080027e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b096      	sub	sp, #88	; 0x58
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]
 8002810:	611a      	str	r2, [r3, #16]
 8002812:	615a      	str	r2, [r3, #20]
 8002814:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	2220      	movs	r2, #32
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f004 fee9 	bl	80075f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002822:	4b4a      	ldr	r3, [pc, #296]	; (800294c <MX_TIM1_Init+0x168>)
 8002824:	4a4a      	ldr	r2, [pc, #296]	; (8002950 <MX_TIM1_Init+0x16c>)
 8002826:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8002828:	4b48      	ldr	r3, [pc, #288]	; (800294c <MX_TIM1_Init+0x168>)
 800282a:	2201      	movs	r2, #1
 800282c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800282e:	4b47      	ldr	r3, [pc, #284]	; (800294c <MX_TIM1_Init+0x168>)
 8002830:	2220      	movs	r2, #32
 8002832:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2048-1;
 8002834:	4b45      	ldr	r3, [pc, #276]	; (800294c <MX_TIM1_Init+0x168>)
 8002836:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800283a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283c:	4b43      	ldr	r3, [pc, #268]	; (800294c <MX_TIM1_Init+0x168>)
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002842:	4b42      	ldr	r3, [pc, #264]	; (800294c <MX_TIM1_Init+0x168>)
 8002844:	2200      	movs	r2, #0
 8002846:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002848:	4b40      	ldr	r3, [pc, #256]	; (800294c <MX_TIM1_Init+0x168>)
 800284a:	2200      	movs	r2, #0
 800284c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800284e:	483f      	ldr	r0, [pc, #252]	; (800294c <MX_TIM1_Init+0x168>)
 8002850:	f003 fc1e 	bl	8006090 <HAL_TIM_Base_Init>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800285a:	f000 fa89 	bl	8002d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800285e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002862:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002864:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002868:	4619      	mov	r1, r3
 800286a:	4838      	ldr	r0, [pc, #224]	; (800294c <MX_TIM1_Init+0x168>)
 800286c:	f003 ff26 	bl	80066bc <HAL_TIM_ConfigClockSource>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002876:	f000 fa7b 	bl	8002d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800287a:	4834      	ldr	r0, [pc, #208]	; (800294c <MX_TIM1_Init+0x168>)
 800287c:	f003 fd01 	bl	8006282 <HAL_TIM_PWM_Init>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002886:	f000 fa73 	bl	8002d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800288a:	2300      	movs	r3, #0
 800288c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002892:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002896:	4619      	mov	r1, r3
 8002898:	482c      	ldr	r0, [pc, #176]	; (800294c <MX_TIM1_Init+0x168>)
 800289a:	f004 faa3 	bl	8006de4 <HAL_TIMEx_MasterConfigSynchronization>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80028a4:	f000 fa64 	bl	8002d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028a8:	2360      	movs	r3, #96	; 0x60
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b0:	2300      	movs	r3, #0
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028b4:	2300      	movs	r3, #0
 80028b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80028b8:	2304      	movs	r3, #4
 80028ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028bc:	2300      	movs	r3, #0
 80028be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028c0:	2300      	movs	r3, #0
 80028c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c8:	2200      	movs	r2, #0
 80028ca:	4619      	mov	r1, r3
 80028cc:	481f      	ldr	r0, [pc, #124]	; (800294c <MX_TIM1_Init+0x168>)
 80028ce:	f003 fe33 	bl	8006538 <HAL_TIM_PWM_ConfigChannel>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80028d8:	f000 fa4a 	bl	8002d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e0:	2204      	movs	r2, #4
 80028e2:	4619      	mov	r1, r3
 80028e4:	4819      	ldr	r0, [pc, #100]	; (800294c <MX_TIM1_Init+0x168>)
 80028e6:	f003 fe27 	bl	8006538 <HAL_TIM_PWM_ConfigChannel>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80028f0:	f000 fa3e 	bl	8002d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f8:	2208      	movs	r2, #8
 80028fa:	4619      	mov	r1, r3
 80028fc:	4813      	ldr	r0, [pc, #76]	; (800294c <MX_TIM1_Init+0x168>)
 80028fe:	f003 fe1b 	bl	8006538 <HAL_TIM_PWM_ConfigChannel>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002908:	f000 fa32 	bl	8002d70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800290c:	2300      	movs	r3, #0
 800290e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002910:	2300      	movs	r3, #0
 8002912:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002924:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002926:	2300      	movs	r3, #0
 8002928:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	4619      	mov	r1, r3
 800292e:	4807      	ldr	r0, [pc, #28]	; (800294c <MX_TIM1_Init+0x168>)
 8002930:	f004 fac6 	bl	8006ec0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800293a:	f000 fa19 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800293e:	4803      	ldr	r0, [pc, #12]	; (800294c <MX_TIM1_Init+0x168>)
 8002940:	f000 fc9e 	bl	8003280 <HAL_TIM_MspPostInit>

}
 8002944:	bf00      	nop
 8002946:	3758      	adds	r7, #88	; 0x58
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	200043a8 	.word	0x200043a8
 8002950:	40010000 	.word	0x40010000

08002954 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	; 0x28
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800295a:	f107 0320 	add.w	r3, r7, #32
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002964:	1d3b      	adds	r3, r7, #4
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	605a      	str	r2, [r3, #4]
 800296c:	609a      	str	r2, [r3, #8]
 800296e:	60da      	str	r2, [r3, #12]
 8002970:	611a      	str	r2, [r3, #16]
 8002972:	615a      	str	r2, [r3, #20]
 8002974:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002976:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <MX_TIM2_Init+0xd8>)
 8002978:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800297c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800297e:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <MX_TIM2_Init+0xd8>)
 8002980:	2201      	movs	r2, #1
 8002982:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002984:	4b29      	ldr	r3, [pc, #164]	; (8002a2c <MX_TIM2_Init+0xd8>)
 8002986:	2220      	movs	r2, #32
 8002988:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024-1;
 800298a:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <MX_TIM2_Init+0xd8>)
 800298c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002990:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002992:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <MX_TIM2_Init+0xd8>)
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002998:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <MX_TIM2_Init+0xd8>)
 800299a:	2200      	movs	r2, #0
 800299c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800299e:	4823      	ldr	r0, [pc, #140]	; (8002a2c <MX_TIM2_Init+0xd8>)
 80029a0:	f003 fc6f 	bl	8006282 <HAL_TIM_PWM_Init>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80029aa:	f000 f9e1 	bl	8002d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029b6:	f107 0320 	add.w	r3, r7, #32
 80029ba:	4619      	mov	r1, r3
 80029bc:	481b      	ldr	r0, [pc, #108]	; (8002a2c <MX_TIM2_Init+0xd8>)
 80029be:	f004 fa11 	bl	8006de4 <HAL_TIMEx_MasterConfigSynchronization>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80029c8:	f000 f9d2 	bl	8002d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029cc:	2360      	movs	r3, #96	; 0x60
 80029ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	2200      	movs	r2, #0
 80029e0:	4619      	mov	r1, r3
 80029e2:	4812      	ldr	r0, [pc, #72]	; (8002a2c <MX_TIM2_Init+0xd8>)
 80029e4:	f003 fda8 	bl	8006538 <HAL_TIM_PWM_ConfigChannel>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80029ee:	f000 f9bf 	bl	8002d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	2204      	movs	r2, #4
 80029f6:	4619      	mov	r1, r3
 80029f8:	480c      	ldr	r0, [pc, #48]	; (8002a2c <MX_TIM2_Init+0xd8>)
 80029fa:	f003 fd9d 	bl	8006538 <HAL_TIM_PWM_ConfigChannel>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002a04:	f000 f9b4 	bl	8002d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4807      	ldr	r0, [pc, #28]	; (8002a2c <MX_TIM2_Init+0xd8>)
 8002a10:	f003 fd92 	bl	8006538 <HAL_TIM_PWM_ConfigChannel>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8002a1a:	f000 f9a9 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a1e:	4803      	ldr	r0, [pc, #12]	; (8002a2c <MX_TIM2_Init+0xd8>)
 8002a20:	f000 fc2e 	bl	8003280 <HAL_TIM_MspPostInit>

}
 8002a24:	bf00      	nop
 8002a26:	3728      	adds	r7, #40	; 0x28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	2000444c 	.word	0x2000444c

08002a30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08a      	sub	sp, #40	; 0x28
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a36:	f107 0320 	add.w	r3, r7, #32
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]
 8002a48:	609a      	str	r2, [r3, #8]
 8002a4a:	60da      	str	r2, [r3, #12]
 8002a4c:	611a      	str	r2, [r3, #16]
 8002a4e:	615a      	str	r2, [r3, #20]
 8002a50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a52:	4b2d      	ldr	r3, [pc, #180]	; (8002b08 <MX_TIM3_Init+0xd8>)
 8002a54:	4a2d      	ldr	r2, [pc, #180]	; (8002b0c <MX_TIM3_Init+0xdc>)
 8002a56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8002a58:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <MX_TIM3_Init+0xd8>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <MX_TIM3_Init+0xd8>)
 8002a60:	2220      	movs	r2, #32
 8002a62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a64:	4b28      	ldr	r3, [pc, #160]	; (8002b08 <MX_TIM3_Init+0xd8>)
 8002a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a6c:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <MX_TIM3_Init+0xd8>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a72:	4b25      	ldr	r3, [pc, #148]	; (8002b08 <MX_TIM3_Init+0xd8>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a78:	4823      	ldr	r0, [pc, #140]	; (8002b08 <MX_TIM3_Init+0xd8>)
 8002a7a:	f003 fc02 	bl	8006282 <HAL_TIM_PWM_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002a84:	f000 f974 	bl	8002d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a90:	f107 0320 	add.w	r3, r7, #32
 8002a94:	4619      	mov	r1, r3
 8002a96:	481c      	ldr	r0, [pc, #112]	; (8002b08 <MX_TIM3_Init+0xd8>)
 8002a98:	f004 f9a4 	bl	8006de4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002aa2:	f000 f965 	bl	8002d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aa6:	2360      	movs	r3, #96	; 0x60
 8002aa8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	2200      	movs	r2, #0
 8002aba:	4619      	mov	r1, r3
 8002abc:	4812      	ldr	r0, [pc, #72]	; (8002b08 <MX_TIM3_Init+0xd8>)
 8002abe:	f003 fd3b 	bl	8006538 <HAL_TIM_PWM_ConfigChannel>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002ac8:	f000 f952 	bl	8002d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002acc:	1d3b      	adds	r3, r7, #4
 8002ace:	2204      	movs	r2, #4
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	480d      	ldr	r0, [pc, #52]	; (8002b08 <MX_TIM3_Init+0xd8>)
 8002ad4:	f003 fd30 	bl	8006538 <HAL_TIM_PWM_ConfigChannel>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002ade:	f000 f947 	bl	8002d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ae2:	1d3b      	adds	r3, r7, #4
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4807      	ldr	r0, [pc, #28]	; (8002b08 <MX_TIM3_Init+0xd8>)
 8002aea:	f003 fd25 	bl	8006538 <HAL_TIM_PWM_ConfigChannel>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002af4:	f000 f93c 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002af8:	4803      	ldr	r0, [pc, #12]	; (8002b08 <MX_TIM3_Init+0xd8>)
 8002afa:	f000 fbc1 	bl	8003280 <HAL_TIM_MspPostInit>

}
 8002afe:	bf00      	nop
 8002b00:	3728      	adds	r7, #40	; 0x28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20004298 	.word	0x20004298
 8002b0c:	40000400 	.word	0x40000400

08002b10 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	; 0x28
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b16:	f107 0320 	add.w	r3, r7, #32
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b20:	1d3b      	adds	r3, r7, #4
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	60da      	str	r2, [r3, #12]
 8002b2c:	611a      	str	r2, [r3, #16]
 8002b2e:	615a      	str	r2, [r3, #20]
 8002b30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b32:	4b20      	ldr	r3, [pc, #128]	; (8002bb4 <MX_TIM5_Init+0xa4>)
 8002b34:	4a20      	ldr	r2, [pc, #128]	; (8002bb8 <MX_TIM5_Init+0xa8>)
 8002b36:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84;
 8002b38:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <MX_TIM5_Init+0xa4>)
 8002b3a:	2254      	movs	r2, #84	; 0x54
 8002b3c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <MX_TIM5_Init+0xa4>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999999;
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <MX_TIM5_Init+0xa4>)
 8002b46:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <MX_TIM5_Init+0xac>)
 8002b48:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <MX_TIM5_Init+0xa4>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b50:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <MX_TIM5_Init+0xa4>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8002b56:	4817      	ldr	r0, [pc, #92]	; (8002bb4 <MX_TIM5_Init+0xa4>)
 8002b58:	f003 fb44 	bl	80061e4 <HAL_TIM_OC_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8002b62:	f000 f905 	bl	8002d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b6e:	f107 0320 	add.w	r3, r7, #32
 8002b72:	4619      	mov	r1, r3
 8002b74:	480f      	ldr	r0, [pc, #60]	; (8002bb4 <MX_TIM5_Init+0xa4>)
 8002b76:	f004 f935 	bl	8006de4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8002b80:	f000 f8f6 	bl	8002d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002b84:	2300      	movs	r3, #0
 8002b86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	220c      	movs	r2, #12
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4806      	ldr	r0, [pc, #24]	; (8002bb4 <MX_TIM5_Init+0xa4>)
 8002b9c:	f003 fc70 	bl	8006480 <HAL_TIM_OC_ConfigChannel>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002ba6:	f000 f8e3 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002baa:	bf00      	nop
 8002bac:	3728      	adds	r7, #40	; 0x28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20004250 	.word	0x20004250
 8002bb8:	40000c00 	.word	0x40000c00
 8002bbc:	000f423f 	.word	0x000f423f

08002bc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <MX_USART2_UART_Init+0x4c>)
 8002bc6:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <MX_USART2_UART_Init+0x50>)
 8002bc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <MX_USART2_UART_Init+0x4c>)
 8002bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <MX_USART2_UART_Init+0x4c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <MX_USART2_UART_Init+0x4c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <MX_USART2_UART_Init+0x4c>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <MX_USART2_UART_Init+0x4c>)
 8002be6:	220c      	movs	r2, #12
 8002be8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <MX_USART2_UART_Init+0x4c>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <MX_USART2_UART_Init+0x4c>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8002bf6:	4805      	ldr	r0, [pc, #20]	; (8002c0c <MX_USART2_UART_Init+0x4c>)
 8002bf8:	f004 f9b4 	bl	8006f64 <HAL_HalfDuplex_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c02:	f000 f8b5 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20004498 	.word	0x20004498
 8002c10:	40004400 	.word	0x40004400

08002c14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <MX_DMA_Init+0x3c>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a0b      	ldr	r2, [pc, #44]	; (8002c50 <MX_DMA_Init+0x3c>)
 8002c24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <MX_DMA_Init+0x3c>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2100      	movs	r1, #0
 8002c3a:	2038      	movs	r0, #56	; 0x38
 8002c3c:	f001 faa1 	bl	8004182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002c40:	2038      	movs	r0, #56	; 0x38
 8002c42:	f001 faba 	bl	80041ba <HAL_NVIC_EnableIRQ>

}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800

08002c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5a:	f107 0314 	add.w	r3, r7, #20
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	60da      	str	r2, [r3, #12]
 8002c68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	4b35      	ldr	r3, [pc, #212]	; (8002d44 <MX_GPIO_Init+0xf0>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	4a34      	ldr	r2, [pc, #208]	; (8002d44 <MX_GPIO_Init+0xf0>)
 8002c74:	f043 0304 	orr.w	r3, r3, #4
 8002c78:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7a:	4b32      	ldr	r3, [pc, #200]	; (8002d44 <MX_GPIO_Init+0xf0>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <MX_GPIO_Init+0xf0>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a2d      	ldr	r2, [pc, #180]	; (8002d44 <MX_GPIO_Init+0xf0>)
 8002c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <MX_GPIO_Init+0xf0>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	4b27      	ldr	r3, [pc, #156]	; (8002d44 <MX_GPIO_Init+0xf0>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a26      	ldr	r2, [pc, #152]	; (8002d44 <MX_GPIO_Init+0xf0>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <MX_GPIO_Init+0xf0>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
 8002cc2:	4b20      	ldr	r3, [pc, #128]	; (8002d44 <MX_GPIO_Init+0xf0>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a1f      	ldr	r2, [pc, #124]	; (8002d44 <MX_GPIO_Init+0xf0>)
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <MX_GPIO_Init+0xf0>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f242 0171 	movw	r1, #8305	; 0x2071
 8002ce0:	4819      	ldr	r0, [pc, #100]	; (8002d48 <MX_GPIO_Init+0xf4>)
 8002ce2:	f001 ff91 	bl	8004c08 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002cf6:	f107 0314 	add.w	r3, r7, #20
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4813      	ldr	r0, [pc, #76]	; (8002d4c <MX_GPIO_Init+0xf8>)
 8002cfe:	f001 fde7 	bl	80048d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5
 8002d02:	f242 0371 	movw	r3, #8305	; 0x2071
 8002d06:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d10:	2300      	movs	r3, #0
 8002d12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	4619      	mov	r1, r3
 8002d1a:	480b      	ldr	r0, [pc, #44]	; (8002d48 <MX_GPIO_Init+0xf4>)
 8002d1c:	f001 fdd8 	bl	80048d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002d20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d2e:	f107 0314 	add.w	r3, r7, #20
 8002d32:	4619      	mov	r1, r3
 8002d34:	4804      	ldr	r0, [pc, #16]	; (8002d48 <MX_GPIO_Init+0xf4>)
 8002d36:	f001 fdcb 	bl	80048d0 <HAL_GPIO_Init>

}
 8002d3a:	bf00      	nop
 8002d3c:	3728      	adds	r7, #40	; 0x28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020400 	.word	0x40020400
 8002d4c:	40020800 	.word	0x40020800

08002d50 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	adcConvComplete = 1;
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <HAL_ADC_ConvCpltCallback+0x1c>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000220 	.word	0x20000220

08002d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d74:	b672      	cpsid	i
}
 8002d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002d78:	e7fe      	b.n	8002d78 <Error_Handler+0x8>

08002d7a <PID_Init>:
 *      Author: maxborglowe
 */

#include "pid.h"

void PID_Init(struct PID *pid) {
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
	pid->integrator = 0.0f;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	61da      	str	r2, [r3, #28]
	pid->prevErr = 0.0f;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	621a      	str	r2, [r3, #32]
	pid->differentiator = 0.0f;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevMeas = 0.0f;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	629a      	str	r2, [r3, #40]	; 0x28
	pid->out = 0.0f;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->Kp = 1.0f;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002db0:	601a      	str	r2, [r3, #0]
	pid->Ki = 0.0f;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	605a      	str	r2, [r3, #4]
	pid->Kd = 0.0f;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]

}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <PID_Update>:

float PID_Update(struct PID *pid, float setpoint, float meas) {
 8002dce:	b480      	push	{r7}
 8002dd0:	b089      	sub	sp, #36	; 0x24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	ed87 0a02 	vstr	s0, [r7, #8]
 8002dda:	edc7 0a01 	vstr	s1, [r7, #4]
	/* Error output from leftmost summer*/
	float err = setpoint - meas;
 8002dde:	ed97 7a02 	vldr	s14, [r7, #8]
 8002de2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dea:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Proportional */
	float prop = pid->Kp * err;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	edd3 7a00 	vldr	s15, [r3]
 8002df4:	ed97 7a05 	vldr	s14, [r7, #20]
 8002df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dfc:	edc7 7a04 	vstr	s15, [r7, #16]

	/* Integrator */
	pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (err + pid->prevErr);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	ed93 7a07 	vldr	s14, [r3, #28]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e0c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002e10:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e1a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	ed93 6a08 	vldr	s12, [r3, #32]
 8002e24:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e28:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	edc3 7a07 	vstr	s15, [r3, #28]

	/* Anti-windup scheme */
	float lim_min_int, lim_max_int;
	if (pid->lim_max > prop) {
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e40:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4c:	d509      	bpl.n	8002e62 <PID_Update+0x94>
		lim_max_int = pid->lim_max - prop;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	ed93 7a05 	vldr	s14, [r3, #20]
 8002e54:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e5c:	edc7 7a06 	vstr	s15, [r7, #24]
 8002e60:	e002      	b.n	8002e68 <PID_Update+0x9a>
	} else {
		lim_max_int = 0.0f;
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	61bb      	str	r3, [r7, #24]
	}

	if (pid->lim_min < prop) {
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7a:	dd09      	ble.n	8002e90 <PID_Update+0xc2>
		lim_min_int = pid->lim_min - prop;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002e82:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e8a:	edc7 7a07 	vstr	s15, [r7, #28]
 8002e8e:	e002      	b.n	8002e96 <PID_Update+0xc8>
	} else {
		lim_min_int = 0.0f;
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
	}

	/* Clamp integrator -> prevents integrator from growing out of proportions */
	if (pid->integrator > lim_max_int) {
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e9c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ea0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea8:	d503      	bpl.n	8002eb2 <PID_Update+0xe4>
		pid->integrator = lim_max_int;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	61da      	str	r2, [r3, #28]
 8002eb0:	e00c      	b.n	8002ecc <PID_Update+0xfe>
	} else if (pid->integrator < lim_min_int) {
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	edd3 7a07 	vldr	s15, [r3, #28]
 8002eb8:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ebc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec4:	dd02      	ble.n	8002ecc <PID_Update+0xfe>
		pid->integrator = lim_min_int;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	61da      	str	r2, [r3, #28]
	}

	/* Derivative: not necessary for FOC */

	/* Output */
	pid->out = prop + pid->integrator + pid->differentiator;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ed2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ed6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	/* Limiter */
	if (pid->out > pid->lim_max) {
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efe:	dd04      	ble.n	8002f0a <PID_Update+0x13c>
		pid->out = pid->lim_max;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f08:	e00e      	b.n	8002f28 <PID_Update+0x15a>
	} else if (pid->out < pid->lim_min) {
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1e:	d503      	bpl.n	8002f28 <PID_Update+0x15a>
		pid->out = pid->lim_min;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Store error and measurement in PID struct*/
	pid->prevErr = err;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	621a      	str	r2, [r3, #32]
	pid->prevMeas = meas;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	629a      	str	r2, [r3, #40]	; 0x28

	return pid->out;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	ee07 3a90 	vmov	s15, r3
}
 8002f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f40:	3724      	adds	r7, #36	; 0x24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	607b      	str	r3, [r7, #4]
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <HAL_MspInit+0x4c>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	4a0f      	ldr	r2, [pc, #60]	; (8002f98 <HAL_MspInit+0x4c>)
 8002f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f60:	6453      	str	r3, [r2, #68]	; 0x44
 8002f62:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <HAL_MspInit+0x4c>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f6a:	607b      	str	r3, [r7, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	603b      	str	r3, [r7, #0]
 8002f72:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <HAL_MspInit+0x4c>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	4a08      	ldr	r2, [pc, #32]	; (8002f98 <HAL_MspInit+0x4c>)
 8002f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_MspInit+0x4c>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f8a:	2007      	movs	r0, #7
 8002f8c:	f001 f8ee 	bl	800416c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40023800 	.word	0x40023800

08002f9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08c      	sub	sp, #48	; 0x30
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa4:	f107 031c 	add.w	r3, r7, #28
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a49      	ldr	r2, [pc, #292]	; (80030e0 <HAL_ADC_MspInit+0x144>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	f040 808c 	bne.w	80030d8 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
 8002fc4:	4b47      	ldr	r3, [pc, #284]	; (80030e4 <HAL_ADC_MspInit+0x148>)
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc8:	4a46      	ldr	r2, [pc, #280]	; (80030e4 <HAL_ADC_MspInit+0x148>)
 8002fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fce:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd0:	4b44      	ldr	r3, [pc, #272]	; (80030e4 <HAL_ADC_MspInit+0x148>)
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	4b40      	ldr	r3, [pc, #256]	; (80030e4 <HAL_ADC_MspInit+0x148>)
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	4a3f      	ldr	r2, [pc, #252]	; (80030e4 <HAL_ADC_MspInit+0x148>)
 8002fe6:	f043 0304 	orr.w	r3, r3, #4
 8002fea:	6313      	str	r3, [r2, #48]	; 0x30
 8002fec:	4b3d      	ldr	r3, [pc, #244]	; (80030e4 <HAL_ADC_MspInit+0x148>)
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	4b39      	ldr	r3, [pc, #228]	; (80030e4 <HAL_ADC_MspInit+0x148>)
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	4a38      	ldr	r2, [pc, #224]	; (80030e4 <HAL_ADC_MspInit+0x148>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6313      	str	r3, [r2, #48]	; 0x30
 8003008:	4b36      	ldr	r3, [pc, #216]	; (80030e4 <HAL_ADC_MspInit+0x148>)
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	4b32      	ldr	r3, [pc, #200]	; (80030e4 <HAL_ADC_MspInit+0x148>)
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	4a31      	ldr	r2, [pc, #196]	; (80030e4 <HAL_ADC_MspInit+0x148>)
 800301e:	f043 0302 	orr.w	r3, r3, #2
 8003022:	6313      	str	r3, [r2, #48]	; 0x30
 8003024:	4b2f      	ldr	r3, [pc, #188]	; (80030e4 <HAL_ADC_MspInit+0x148>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003030:	233f      	movs	r3, #63	; 0x3f
 8003032:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003034:	2303      	movs	r3, #3
 8003036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800303c:	f107 031c 	add.w	r3, r7, #28
 8003040:	4619      	mov	r1, r3
 8003042:	4829      	ldr	r0, [pc, #164]	; (80030e8 <HAL_ADC_MspInit+0x14c>)
 8003044:	f001 fc44 	bl	80048d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8003048:	2311      	movs	r3, #17
 800304a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800304c:	2303      	movs	r3, #3
 800304e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003054:	f107 031c 	add.w	r3, r7, #28
 8003058:	4619      	mov	r1, r3
 800305a:	4824      	ldr	r0, [pc, #144]	; (80030ec <HAL_ADC_MspInit+0x150>)
 800305c:	f001 fc38 	bl	80048d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003060:	2302      	movs	r3, #2
 8003062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003064:	2303      	movs	r3, #3
 8003066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800306c:	f107 031c 	add.w	r3, r7, #28
 8003070:	4619      	mov	r1, r3
 8003072:	481f      	ldr	r0, [pc, #124]	; (80030f0 <HAL_ADC_MspInit+0x154>)
 8003074:	f001 fc2c 	bl	80048d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003078:	4b1e      	ldr	r3, [pc, #120]	; (80030f4 <HAL_ADC_MspInit+0x158>)
 800307a:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <HAL_ADC_MspInit+0x15c>)
 800307c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800307e:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_ADC_MspInit+0x158>)
 8003080:	2200      	movs	r2, #0
 8003082:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003084:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <HAL_ADC_MspInit+0x158>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800308a:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <HAL_ADC_MspInit+0x158>)
 800308c:	2200      	movs	r2, #0
 800308e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003090:	4b18      	ldr	r3, [pc, #96]	; (80030f4 <HAL_ADC_MspInit+0x158>)
 8003092:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003096:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003098:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <HAL_ADC_MspInit+0x158>)
 800309a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800309e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030a0:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <HAL_ADC_MspInit+0x158>)
 80030a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030a6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80030a8:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <HAL_ADC_MspInit+0x158>)
 80030aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030ae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80030b0:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <HAL_ADC_MspInit+0x158>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030b6:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <HAL_ADC_MspInit+0x158>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030bc:	480d      	ldr	r0, [pc, #52]	; (80030f4 <HAL_ADC_MspInit+0x158>)
 80030be:	f001 f897 	bl	80041f0 <HAL_DMA_Init>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80030c8:	f7ff fe52 	bl	8002d70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <HAL_ADC_MspInit+0x158>)
 80030d0:	639a      	str	r2, [r3, #56]	; 0x38
 80030d2:	4a08      	ldr	r2, [pc, #32]	; (80030f4 <HAL_ADC_MspInit+0x158>)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030d8:	bf00      	nop
 80030da:	3730      	adds	r7, #48	; 0x30
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40012000 	.word	0x40012000
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40020800 	.word	0x40020800
 80030ec:	40020000 	.word	0x40020000
 80030f0:	40020400 	.word	0x40020400
 80030f4:	20004340 	.word	0x20004340
 80030f8:	40026410 	.word	0x40026410

080030fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003104:	f107 0314 	add.w	r3, r7, #20
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a19      	ldr	r2, [pc, #100]	; (8003180 <HAL_SPI_MspInit+0x84>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d12b      	bne.n	8003176 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	4b18      	ldr	r3, [pc, #96]	; (8003184 <HAL_SPI_MspInit+0x88>)
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	4a17      	ldr	r2, [pc, #92]	; (8003184 <HAL_SPI_MspInit+0x88>)
 8003128:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800312c:	6453      	str	r3, [r2, #68]	; 0x44
 800312e:	4b15      	ldr	r3, [pc, #84]	; (8003184 <HAL_SPI_MspInit+0x88>)
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <HAL_SPI_MspInit+0x88>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a10      	ldr	r2, [pc, #64]	; (8003184 <HAL_SPI_MspInit+0x88>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <HAL_SPI_MspInit+0x88>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003156:	23e0      	movs	r3, #224	; 0xe0
 8003158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	2302      	movs	r3, #2
 800315c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003162:	2303      	movs	r3, #3
 8003164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003166:	2305      	movs	r3, #5
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316a:	f107 0314 	add.w	r3, r7, #20
 800316e:	4619      	mov	r1, r3
 8003170:	4805      	ldr	r0, [pc, #20]	; (8003188 <HAL_SPI_MspInit+0x8c>)
 8003172:	f001 fbad 	bl	80048d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003176:	bf00      	nop
 8003178:	3728      	adds	r7, #40	; 0x28
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40013000 	.word	0x40013000
 8003184:	40023800 	.word	0x40023800
 8003188:	40020000 	.word	0x40020000

0800318c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0b      	ldr	r2, [pc, #44]	; (80031c8 <HAL_TIM_Base_MspInit+0x3c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d10d      	bne.n	80031ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_TIM_Base_MspInit+0x40>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	4a09      	ldr	r2, [pc, #36]	; (80031cc <HAL_TIM_Base_MspInit+0x40>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6453      	str	r3, [r2, #68]	; 0x44
 80031ae:	4b07      	ldr	r3, [pc, #28]	; (80031cc <HAL_TIM_Base_MspInit+0x40>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40010000 	.word	0x40010000
 80031cc:	40023800 	.word	0x40023800

080031d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e0:	d10e      	bne.n	8003200 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	4b13      	ldr	r3, [pc, #76]	; (8003234 <HAL_TIM_PWM_MspInit+0x64>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	4a12      	ldr	r2, [pc, #72]	; (8003234 <HAL_TIM_PWM_MspInit+0x64>)
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	6413      	str	r3, [r2, #64]	; 0x40
 80031f2:	4b10      	ldr	r3, [pc, #64]	; (8003234 <HAL_TIM_PWM_MspInit+0x64>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80031fe:	e012      	b.n	8003226 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a0c      	ldr	r2, [pc, #48]	; (8003238 <HAL_TIM_PWM_MspInit+0x68>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d10d      	bne.n	8003226 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_TIM_PWM_MspInit+0x64>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	4a08      	ldr	r2, [pc, #32]	; (8003234 <HAL_TIM_PWM_MspInit+0x64>)
 8003214:	f043 0302 	orr.w	r3, r3, #2
 8003218:	6413      	str	r3, [r2, #64]	; 0x40
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <HAL_TIM_PWM_MspInit+0x64>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	60bb      	str	r3, [r7, #8]
 8003224:	68bb      	ldr	r3, [r7, #8]
}
 8003226:	bf00      	nop
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	40000400 	.word	0x40000400

0800323c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0b      	ldr	r2, [pc, #44]	; (8003278 <HAL_TIM_OC_MspInit+0x3c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d10d      	bne.n	800326a <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	4b0a      	ldr	r3, [pc, #40]	; (800327c <HAL_TIM_OC_MspInit+0x40>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	4a09      	ldr	r2, [pc, #36]	; (800327c <HAL_TIM_OC_MspInit+0x40>)
 8003258:	f043 0308 	orr.w	r3, r3, #8
 800325c:	6413      	str	r3, [r2, #64]	; 0x40
 800325e:	4b07      	ldr	r3, [pc, #28]	; (800327c <HAL_TIM_OC_MspInit+0x40>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40000c00 	.word	0x40000c00
 800327c:	40023800 	.word	0x40023800

08003280 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08c      	sub	sp, #48	; 0x30
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003288:	f107 031c 	add.w	r3, r7, #28
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	609a      	str	r2, [r3, #8]
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a47      	ldr	r2, [pc, #284]	; (80033bc <HAL_TIM_MspPostInit+0x13c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d11f      	bne.n	80032e2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	4b46      	ldr	r3, [pc, #280]	; (80033c0 <HAL_TIM_MspPostInit+0x140>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	4a45      	ldr	r2, [pc, #276]	; (80033c0 <HAL_TIM_MspPostInit+0x140>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6313      	str	r3, [r2, #48]	; 0x30
 80032b2:	4b43      	ldr	r3, [pc, #268]	; (80033c0 <HAL_TIM_MspPostInit+0x140>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	61bb      	str	r3, [r7, #24]
 80032bc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80032be:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80032c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c4:	2302      	movs	r3, #2
 80032c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032cc:	2300      	movs	r3, #0
 80032ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032d0:	2301      	movs	r3, #1
 80032d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d4:	f107 031c 	add.w	r3, r7, #28
 80032d8:	4619      	mov	r1, r3
 80032da:	483a      	ldr	r0, [pc, #232]	; (80033c4 <HAL_TIM_MspPostInit+0x144>)
 80032dc:	f001 faf8 	bl	80048d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80032e0:	e067      	b.n	80033b2 <HAL_TIM_MspPostInit+0x132>
  else if(htim->Instance==TIM2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ea:	d13e      	bne.n	800336a <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	4b33      	ldr	r3, [pc, #204]	; (80033c0 <HAL_TIM_MspPostInit+0x140>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	4a32      	ldr	r2, [pc, #200]	; (80033c0 <HAL_TIM_MspPostInit+0x140>)
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	6313      	str	r3, [r2, #48]	; 0x30
 80032fc:	4b30      	ldr	r3, [pc, #192]	; (80033c0 <HAL_TIM_MspPostInit+0x140>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003308:	2300      	movs	r3, #0
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	4b2c      	ldr	r3, [pc, #176]	; (80033c0 <HAL_TIM_MspPostInit+0x140>)
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	4a2b      	ldr	r2, [pc, #172]	; (80033c0 <HAL_TIM_MspPostInit+0x140>)
 8003312:	f043 0302 	orr.w	r3, r3, #2
 8003316:	6313      	str	r3, [r2, #48]	; 0x30
 8003318:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <HAL_TIM_MspPostInit+0x140>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8003324:	f248 0302 	movw	r3, #32770	; 0x8002
 8003328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332a:	2302      	movs	r3, #2
 800332c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	2300      	movs	r3, #0
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003332:	2300      	movs	r3, #0
 8003334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003336:	2301      	movs	r3, #1
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333a:	f107 031c 	add.w	r3, r7, #28
 800333e:	4619      	mov	r1, r3
 8003340:	4820      	ldr	r0, [pc, #128]	; (80033c4 <HAL_TIM_MspPostInit+0x144>)
 8003342:	f001 fac5 	bl	80048d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800334a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334c:	2302      	movs	r3, #2
 800334e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003354:	2300      	movs	r3, #0
 8003356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003358:	2301      	movs	r3, #1
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800335c:	f107 031c 	add.w	r3, r7, #28
 8003360:	4619      	mov	r1, r3
 8003362:	4819      	ldr	r0, [pc, #100]	; (80033c8 <HAL_TIM_MspPostInit+0x148>)
 8003364:	f001 fab4 	bl	80048d0 <HAL_GPIO_Init>
}
 8003368:	e023      	b.n	80033b2 <HAL_TIM_MspPostInit+0x132>
  else if(htim->Instance==TIM3)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a17      	ldr	r2, [pc, #92]	; (80033cc <HAL_TIM_MspPostInit+0x14c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d11e      	bne.n	80033b2 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <HAL_TIM_MspPostInit+0x140>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	4a10      	ldr	r2, [pc, #64]	; (80033c0 <HAL_TIM_MspPostInit+0x140>)
 800337e:	f043 0304 	orr.w	r3, r3, #4
 8003382:	6313      	str	r3, [r2, #48]	; 0x30
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_TIM_MspPostInit+0x140>)
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8003390:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003396:	2302      	movs	r3, #2
 8003398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	2300      	movs	r3, #0
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339e:	2300      	movs	r3, #0
 80033a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033a2:	2302      	movs	r3, #2
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a6:	f107 031c 	add.w	r3, r7, #28
 80033aa:	4619      	mov	r1, r3
 80033ac:	4808      	ldr	r0, [pc, #32]	; (80033d0 <HAL_TIM_MspPostInit+0x150>)
 80033ae:	f001 fa8f 	bl	80048d0 <HAL_GPIO_Init>
}
 80033b2:	bf00      	nop
 80033b4:	3730      	adds	r7, #48	; 0x30
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40020000 	.word	0x40020000
 80033c8:	40020400 	.word	0x40020400
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40020800 	.word	0x40020800

080033d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 0314 	add.w	r3, r7, #20
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a19      	ldr	r2, [pc, #100]	; (8003458 <HAL_UART_MspInit+0x84>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d12b      	bne.n	800344e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	4b18      	ldr	r3, [pc, #96]	; (800345c <HAL_UART_MspInit+0x88>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	4a17      	ldr	r2, [pc, #92]	; (800345c <HAL_UART_MspInit+0x88>)
 8003400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003404:	6413      	str	r3, [r2, #64]	; 0x40
 8003406:	4b15      	ldr	r3, [pc, #84]	; (800345c <HAL_UART_MspInit+0x88>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	4b11      	ldr	r3, [pc, #68]	; (800345c <HAL_UART_MspInit+0x88>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	4a10      	ldr	r2, [pc, #64]	; (800345c <HAL_UART_MspInit+0x88>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6313      	str	r3, [r2, #48]	; 0x30
 8003422:	4b0e      	ldr	r3, [pc, #56]	; (800345c <HAL_UART_MspInit+0x88>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800342e:	2304      	movs	r3, #4
 8003430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003432:	2312      	movs	r3, #18
 8003434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343a:	2303      	movs	r3, #3
 800343c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800343e:	2307      	movs	r3, #7
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003442:	f107 0314 	add.w	r3, r7, #20
 8003446:	4619      	mov	r1, r3
 8003448:	4805      	ldr	r0, [pc, #20]	; (8003460 <HAL_UART_MspInit+0x8c>)
 800344a:	f001 fa41 	bl	80048d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800344e:	bf00      	nop
 8003450:	3728      	adds	r7, #40	; 0x28
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40004400 	.word	0x40004400
 800345c:	40023800 	.word	0x40023800
 8003460:	40020000 	.word	0x40020000

08003464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003468:	e7fe      	b.n	8003468 <NMI_Handler+0x4>

0800346a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800346a:	b480      	push	{r7}
 800346c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800346e:	e7fe      	b.n	800346e <HardFault_Handler+0x4>

08003470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003474:	e7fe      	b.n	8003474 <MemManage_Handler+0x4>

08003476 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003476:	b480      	push	{r7}
 8003478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800347a:	e7fe      	b.n	800347a <BusFault_Handler+0x4>

0800347c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003480:	e7fe      	b.n	8003480 <UsageFault_Handler+0x4>

08003482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003482:	b480      	push	{r7}
 8003484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800349e:	b480      	push	{r7}
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034b0:	f000 f960 	bl	8003774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034b4:	bf00      	nop
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034bc:	4802      	ldr	r0, [pc, #8]	; (80034c8 <DMA2_Stream0_IRQHandler+0x10>)
 80034be:	f000 ff9d 	bl	80043fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20004340 	.word	0x20004340

080034cc <_getpid>:
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	2301      	movs	r3, #1
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <_kill>:
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
 80034e6:	f004 f85b 	bl	80075a0 <__errno>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2216      	movs	r2, #22
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_exit>:
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ffe7 	bl	80034dc <_kill>
 800350e:	e7fe      	b.n	800350e <_exit+0x12>

08003510 <_read>:
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	e00a      	b.n	8003538 <_read+0x28>
 8003522:	f3af 8000 	nop.w
 8003526:	4601      	mov	r1, r0
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	60ba      	str	r2, [r7, #8]
 800352e:	b2ca      	uxtb	r2, r1
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	3301      	adds	r3, #1
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	429a      	cmp	r2, r3
 800353e:	dbf0      	blt.n	8003522 <_read+0x12>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <_write>:
 800354a:	b580      	push	{r7, lr}
 800354c:	b086      	sub	sp, #24
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	e009      	b.n	8003570 <_write+0x26>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	60ba      	str	r2, [r7, #8]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f3af 8000 	nop.w
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	3301      	adds	r3, #1
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	429a      	cmp	r2, r3
 8003576:	dbf1      	blt.n	800355c <_write+0x12>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <_close>:
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <_fstat>:
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035aa:	605a      	str	r2, [r3, #4]
 80035ac:	2300      	movs	r3, #0
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <_isatty>:
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	2301      	movs	r3, #1
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <_lseek>:
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	2300      	movs	r3, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003600:	4b13      	ldr	r3, [pc, #76]	; (8003650 <_sbrk+0x64>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d102      	bne.n	800360e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003608:	4b11      	ldr	r3, [pc, #68]	; (8003650 <_sbrk+0x64>)
 800360a:	4a12      	ldr	r2, [pc, #72]	; (8003654 <_sbrk+0x68>)
 800360c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800360e:	4b10      	ldr	r3, [pc, #64]	; (8003650 <_sbrk+0x64>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	429a      	cmp	r2, r3
 800361a:	d207      	bcs.n	800362c <_sbrk+0x40>
		errno = ENOMEM;
 800361c:	f003 ffc0 	bl	80075a0 <__errno>
 8003620:	4603      	mov	r3, r0
 8003622:	220c      	movs	r2, #12
 8003624:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800362a:	e009      	b.n	8003640 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 800362c:	4b08      	ldr	r3, [pc, #32]	; (8003650 <_sbrk+0x64>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <_sbrk+0x64>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	4a05      	ldr	r2, [pc, #20]	; (8003650 <_sbrk+0x64>)
 800363c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800363e:	68fb      	ldr	r3, [r7, #12]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20018000 	.word	0x20018000
 800364c:	00000400 	.word	0x00000400
 8003650:	2000022c 	.word	0x2000022c
 8003654:	200044f8 	.word	0x200044f8

08003658 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <SystemInit+0x20>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003662:	4a05      	ldr	r2, [pc, #20]	; (8003678 <SystemInit+0x20>)
 8003664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <Reset_Handler>:
 800367c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036b4 <LoopFillZerobss+0x12>
 8003680:	480d      	ldr	r0, [pc, #52]	; (80036b8 <LoopFillZerobss+0x16>)
 8003682:	490e      	ldr	r1, [pc, #56]	; (80036bc <LoopFillZerobss+0x1a>)
 8003684:	4a0e      	ldr	r2, [pc, #56]	; (80036c0 <LoopFillZerobss+0x1e>)
 8003686:	2300      	movs	r3, #0
 8003688:	e002      	b.n	8003690 <LoopCopyDataInit>

0800368a <CopyDataInit>:
 800368a:	58d4      	ldr	r4, [r2, r3]
 800368c:	50c4      	str	r4, [r0, r3]
 800368e:	3304      	adds	r3, #4

08003690 <LoopCopyDataInit>:
 8003690:	18c4      	adds	r4, r0, r3
 8003692:	428c      	cmp	r4, r1
 8003694:	d3f9      	bcc.n	800368a <CopyDataInit>
 8003696:	4a0b      	ldr	r2, [pc, #44]	; (80036c4 <LoopFillZerobss+0x22>)
 8003698:	4c0b      	ldr	r4, [pc, #44]	; (80036c8 <LoopFillZerobss+0x26>)
 800369a:	2300      	movs	r3, #0
 800369c:	e001      	b.n	80036a2 <LoopFillZerobss>

0800369e <FillZerobss>:
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	3204      	adds	r2, #4

080036a2 <LoopFillZerobss>:
 80036a2:	42a2      	cmp	r2, r4
 80036a4:	d3fb      	bcc.n	800369e <FillZerobss>
 80036a6:	f7ff ffd7 	bl	8003658 <SystemInit>
 80036aa:	f003 ff7f 	bl	80075ac <__libc_init_array>
 80036ae:	f7fe fbc3 	bl	8001e38 <main>
 80036b2:	4770      	bx	lr
 80036b4:	20018000 	.word	0x20018000
 80036b8:	20000000 	.word	0x20000000
 80036bc:	20000200 	.word	0x20000200
 80036c0:	0800c438 	.word	0x0800c438
 80036c4:	20000200 	.word	0x20000200
 80036c8:	200044f8 	.word	0x200044f8

080036cc <ADC_IRQHandler>:
 80036cc:	e7fe      	b.n	80036cc <ADC_IRQHandler>
	...

080036d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036d4:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <HAL_Init+0x40>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a0d      	ldr	r2, [pc, #52]	; (8003710 <HAL_Init+0x40>)
 80036da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_Init+0x40>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <HAL_Init+0x40>)
 80036e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036ec:	4b08      	ldr	r3, [pc, #32]	; (8003710 <HAL_Init+0x40>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a07      	ldr	r2, [pc, #28]	; (8003710 <HAL_Init+0x40>)
 80036f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036f8:	2003      	movs	r0, #3
 80036fa:	f000 fd37 	bl	800416c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036fe:	2000      	movs	r0, #0
 8003700:	f000 f808 	bl	8003714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003704:	f7ff fc22 	bl	8002f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023c00 	.word	0x40023c00

08003714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800371c:	4b12      	ldr	r3, [pc, #72]	; (8003768 <HAL_InitTick+0x54>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4b12      	ldr	r3, [pc, #72]	; (800376c <HAL_InitTick+0x58>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	4619      	mov	r1, r3
 8003726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800372a:	fbb3 f3f1 	udiv	r3, r3, r1
 800372e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fd4f 	bl	80041d6 <HAL_SYSTICK_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e00e      	b.n	8003760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b0f      	cmp	r3, #15
 8003746:	d80a      	bhi.n	800375e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003748:	2200      	movs	r2, #0
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003750:	f000 fd17 	bl	8004182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003754:	4a06      	ldr	r2, [pc, #24]	; (8003770 <HAL_InitTick+0x5c>)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
}
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20000020 	.word	0x20000020
 800376c:	20000028 	.word	0x20000028
 8003770:	20000024 	.word	0x20000024

08003774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_IncTick+0x20>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_IncTick+0x24>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4413      	add	r3, r2
 8003784:	4a04      	ldr	r2, [pc, #16]	; (8003798 <HAL_IncTick+0x24>)
 8003786:	6013      	str	r3, [r2, #0]
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000028 	.word	0x20000028
 8003798:	200044e4 	.word	0x200044e4

0800379c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return uwTick;
 80037a0:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <HAL_GetTick+0x14>)
 80037a2:	681b      	ldr	r3, [r3, #0]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	200044e4 	.word	0x200044e4

080037b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037bc:	f7ff ffee 	bl	800379c <HAL_GetTick>
 80037c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037cc:	d005      	beq.n	80037da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ce:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <HAL_Delay+0x44>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037da:	bf00      	nop
 80037dc:	f7ff ffde 	bl	800379c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d8f7      	bhi.n	80037dc <HAL_Delay+0x28>
  {
  }
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000028 	.word	0x20000028

080037fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e033      	b.n	800387a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff fbbe 	bl	8002f9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d118      	bne.n	800386c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003842:	f023 0302 	bic.w	r3, r3, #2
 8003846:	f043 0202 	orr.w	r2, r3, #2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fa3e 	bl	8003cd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	f043 0201 	orr.w	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
 800386a:	e001      	b.n	8003870 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003878:	7bfb      	ldrb	r3, [r7, #15]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_ADC_Start_DMA+0x1e>
 800389e:	2302      	movs	r3, #2
 80038a0:	e0ce      	b.n	8003a40 <HAL_ADC_Start_DMA+0x1bc>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d018      	beq.n	80038ea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038c8:	4b5f      	ldr	r3, [pc, #380]	; (8003a48 <HAL_ADC_Start_DMA+0x1c4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a5f      	ldr	r2, [pc, #380]	; (8003a4c <HAL_ADC_Start_DMA+0x1c8>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	0c9a      	lsrs	r2, r3, #18
 80038d4:	4613      	mov	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80038dc:	e002      	b.n	80038e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f9      	bne.n	80038de <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f8:	d107      	bne.n	800390a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003908:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b01      	cmp	r3, #1
 8003916:	f040 8086 	bne.w	8003a26 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003922:	f023 0301 	bic.w	r3, r3, #1
 8003926:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003944:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003958:	d106      	bne.n	8003968 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f023 0206 	bic.w	r2, r3, #6
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	645a      	str	r2, [r3, #68]	; 0x44
 8003966:	e002      	b.n	800396e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003976:	4b36      	ldr	r3, [pc, #216]	; (8003a50 <HAL_ADC_Start_DMA+0x1cc>)
 8003978:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	4a35      	ldr	r2, [pc, #212]	; (8003a54 <HAL_ADC_Start_DMA+0x1d0>)
 8003980:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	4a34      	ldr	r2, [pc, #208]	; (8003a58 <HAL_ADC_Start_DMA+0x1d4>)
 8003988:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398e:	4a33      	ldr	r2, [pc, #204]	; (8003a5c <HAL_ADC_Start_DMA+0x1d8>)
 8003990:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800399a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80039aa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	334c      	adds	r3, #76	; 0x4c
 80039c6:	4619      	mov	r1, r3
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f000 fcbe 	bl	800434c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10f      	bne.n	80039fc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d129      	bne.n	8003a3e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039f8:	609a      	str	r2, [r3, #8]
 80039fa:	e020      	b.n	8003a3e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a17      	ldr	r2, [pc, #92]	; (8003a60 <HAL_ADC_Start_DMA+0x1dc>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d11b      	bne.n	8003a3e <HAL_ADC_Start_DMA+0x1ba>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d114      	bne.n	8003a3e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	e00b      	b.n	8003a3e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f043 0210 	orr.w	r2, r3, #16
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	f043 0201 	orr.w	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000020 	.word	0x20000020
 8003a4c:	431bde83 	.word	0x431bde83
 8003a50:	40012300 	.word	0x40012300
 8003a54:	08003ec9 	.word	0x08003ec9
 8003a58:	08003f83 	.word	0x08003f83
 8003a5c:	08003f9f 	.word	0x08003f9f
 8003a60:	40012000 	.word	0x40012000

08003a64 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x1c>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e105      	b.n	8003cb4 <HAL_ADC_ConfigChannel+0x228>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b09      	cmp	r3, #9
 8003ab6:	d925      	bls.n	8003b04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68d9      	ldr	r1, [r3, #12]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	4413      	add	r3, r2
 8003acc:	3b1e      	subs	r3, #30
 8003ace:	2207      	movs	r2, #7
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43da      	mvns	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	400a      	ands	r2, r1
 8003adc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68d9      	ldr	r1, [r3, #12]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	4618      	mov	r0, r3
 8003af0:	4603      	mov	r3, r0
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4403      	add	r3, r0
 8003af6:	3b1e      	subs	r3, #30
 8003af8:	409a      	lsls	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	60da      	str	r2, [r3, #12]
 8003b02:	e022      	b.n	8003b4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6919      	ldr	r1, [r3, #16]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	461a      	mov	r2, r3
 8003b12:	4613      	mov	r3, r2
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	4413      	add	r3, r2
 8003b18:	2207      	movs	r2, #7
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43da      	mvns	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	400a      	ands	r2, r1
 8003b26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6919      	ldr	r1, [r3, #16]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	4618      	mov	r0, r3
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	4403      	add	r3, r0
 8003b40:	409a      	lsls	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b06      	cmp	r3, #6
 8003b50:	d824      	bhi.n	8003b9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	3b05      	subs	r3, #5
 8003b64:	221f      	movs	r2, #31
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43da      	mvns	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	400a      	ands	r2, r1
 8003b72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	4618      	mov	r0, r3
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3b05      	subs	r3, #5
 8003b8e:	fa00 f203 	lsl.w	r2, r0, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	635a      	str	r2, [r3, #52]	; 0x34
 8003b9a:	e04c      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b0c      	cmp	r3, #12
 8003ba2:	d824      	bhi.n	8003bee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3b23      	subs	r3, #35	; 0x23
 8003bb6:	221f      	movs	r2, #31
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43da      	mvns	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	400a      	ands	r2, r1
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	3b23      	subs	r3, #35	; 0x23
 8003be0:	fa00 f203 	lsl.w	r2, r0, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
 8003bec:	e023      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3b41      	subs	r3, #65	; 0x41
 8003c00:	221f      	movs	r2, #31
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43da      	mvns	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	400a      	ands	r2, r1
 8003c0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	3b41      	subs	r3, #65	; 0x41
 8003c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c36:	4b22      	ldr	r3, [pc, #136]	; (8003cc0 <HAL_ADC_ConfigChannel+0x234>)
 8003c38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a21      	ldr	r2, [pc, #132]	; (8003cc4 <HAL_ADC_ConfigChannel+0x238>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d109      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x1cc>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b12      	cmp	r3, #18
 8003c4a:	d105      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a19      	ldr	r2, [pc, #100]	; (8003cc4 <HAL_ADC_ConfigChannel+0x238>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d123      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x21e>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d003      	beq.n	8003c72 <HAL_ADC_ConfigChannel+0x1e6>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b11      	cmp	r3, #17
 8003c70:	d11b      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b10      	cmp	r3, #16
 8003c84:	d111      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <HAL_ADC_ConfigChannel+0x23c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a10      	ldr	r2, [pc, #64]	; (8003ccc <HAL_ADC_ConfigChannel+0x240>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	0c9a      	lsrs	r2, r3, #18
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c9c:	e002      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f9      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	40012300 	.word	0x40012300
 8003cc4:	40012000 	.word	0x40012000
 8003cc8:	20000020 	.word	0x20000020
 8003ccc:	431bde83 	.word	0x431bde83

08003cd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cd8:	4b79      	ldr	r3, [pc, #484]	; (8003ec0 <ADC_Init+0x1f0>)
 8003cda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6859      	ldr	r1, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	021a      	lsls	r2, r3, #8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6899      	ldr	r1, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	4a58      	ldr	r2, [pc, #352]	; (8003ec4 <ADC_Init+0x1f4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d022      	beq.n	8003dae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6899      	ldr	r1, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6899      	ldr	r1, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]
 8003dac:	e00f      	b.n	8003dce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003dcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0202 	bic.w	r2, r2, #2
 8003ddc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6899      	ldr	r1, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	7e1b      	ldrb	r3, [r3, #24]
 8003de8:	005a      	lsls	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01b      	beq.n	8003e34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6859      	ldr	r1, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	3b01      	subs	r3, #1
 8003e28:	035a      	lsls	r2, r3, #13
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	e007      	b.n	8003e44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	051a      	lsls	r2, r3, #20
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6899      	ldr	r1, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e86:	025a      	lsls	r2, r3, #9
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6899      	ldr	r1, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	029a      	lsls	r2, r3, #10
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	609a      	str	r2, [r3, #8]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	40012300 	.word	0x40012300
 8003ec4:	0f000001 	.word	0x0f000001

08003ec8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d13c      	bne.n	8003f5c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d12b      	bne.n	8003f54 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d127      	bne.n	8003f54 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d006      	beq.n	8003f20 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d119      	bne.n	8003f54 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0220 	bic.w	r2, r2, #32
 8003f2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d105      	bne.n	8003f54 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	f043 0201 	orr.w	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f7fe fefb 	bl	8002d50 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f5a:	e00e      	b.n	8003f7a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f7ff fd85 	bl	8003a78 <HAL_ADC_ErrorCallback>
}
 8003f6e:	e004      	b.n	8003f7a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
}
 8003f7a:	bf00      	nop
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f7ff fd67 	bl	8003a64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2240      	movs	r2, #64	; 0x40
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	f043 0204 	orr.w	r2, r3, #4
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f7ff fd5a 	bl	8003a78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <__NVIC_SetPriorityGrouping+0x44>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fe8:	4013      	ands	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ffe:	4a04      	ldr	r2, [pc, #16]	; (8004010 <__NVIC_SetPriorityGrouping+0x44>)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	60d3      	str	r3, [r2, #12]
}
 8004004:	bf00      	nop
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	e000ed00 	.word	0xe000ed00

08004014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004018:	4b04      	ldr	r3, [pc, #16]	; (800402c <__NVIC_GetPriorityGrouping+0x18>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	0a1b      	lsrs	r3, r3, #8
 800401e:	f003 0307 	and.w	r3, r3, #7
}
 8004022:	4618      	mov	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	2b00      	cmp	r3, #0
 8004040:	db0b      	blt.n	800405a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	f003 021f 	and.w	r2, r3, #31
 8004048:	4907      	ldr	r1, [pc, #28]	; (8004068 <__NVIC_EnableIRQ+0x38>)
 800404a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	2001      	movs	r0, #1
 8004052:	fa00 f202 	lsl.w	r2, r0, r2
 8004056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	e000e100 	.word	0xe000e100

0800406c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	6039      	str	r1, [r7, #0]
 8004076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407c:	2b00      	cmp	r3, #0
 800407e:	db0a      	blt.n	8004096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	b2da      	uxtb	r2, r3
 8004084:	490c      	ldr	r1, [pc, #48]	; (80040b8 <__NVIC_SetPriority+0x4c>)
 8004086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408a:	0112      	lsls	r2, r2, #4
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	440b      	add	r3, r1
 8004090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004094:	e00a      	b.n	80040ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	4908      	ldr	r1, [pc, #32]	; (80040bc <__NVIC_SetPriority+0x50>)
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	3b04      	subs	r3, #4
 80040a4:	0112      	lsls	r2, r2, #4
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	440b      	add	r3, r1
 80040aa:	761a      	strb	r2, [r3, #24]
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	e000e100 	.word	0xe000e100
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	; 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f1c3 0307 	rsb	r3, r3, #7
 80040da:	2b04      	cmp	r3, #4
 80040dc:	bf28      	it	cs
 80040de:	2304      	movcs	r3, #4
 80040e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3304      	adds	r3, #4
 80040e6:	2b06      	cmp	r3, #6
 80040e8:	d902      	bls.n	80040f0 <NVIC_EncodePriority+0x30>
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3b03      	subs	r3, #3
 80040ee:	e000      	b.n	80040f2 <NVIC_EncodePriority+0x32>
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	43da      	mvns	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	401a      	ands	r2, r3
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	fa01 f303 	lsl.w	r3, r1, r3
 8004112:	43d9      	mvns	r1, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004118:	4313      	orrs	r3, r2
         );
}
 800411a:	4618      	mov	r0, r3
 800411c:	3724      	adds	r7, #36	; 0x24
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
	...

08004128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3b01      	subs	r3, #1
 8004134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004138:	d301      	bcc.n	800413e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800413a:	2301      	movs	r3, #1
 800413c:	e00f      	b.n	800415e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800413e:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <SysTick_Config+0x40>)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3b01      	subs	r3, #1
 8004144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004146:	210f      	movs	r1, #15
 8004148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800414c:	f7ff ff8e 	bl	800406c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004150:	4b05      	ldr	r3, [pc, #20]	; (8004168 <SysTick_Config+0x40>)
 8004152:	2200      	movs	r2, #0
 8004154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004156:	4b04      	ldr	r3, [pc, #16]	; (8004168 <SysTick_Config+0x40>)
 8004158:	2207      	movs	r2, #7
 800415a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	e000e010 	.word	0xe000e010

0800416c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff ff29 	bl	8003fcc <__NVIC_SetPriorityGrouping>
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004182:	b580      	push	{r7, lr}
 8004184:	b086      	sub	sp, #24
 8004186:	af00      	add	r7, sp, #0
 8004188:	4603      	mov	r3, r0
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	607a      	str	r2, [r7, #4]
 800418e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004194:	f7ff ff3e 	bl	8004014 <__NVIC_GetPriorityGrouping>
 8004198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	6978      	ldr	r0, [r7, #20]
 80041a0:	f7ff ff8e 	bl	80040c0 <NVIC_EncodePriority>
 80041a4:	4602      	mov	r2, r0
 80041a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041aa:	4611      	mov	r1, r2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff ff5d 	bl	800406c <__NVIC_SetPriority>
}
 80041b2:	bf00      	nop
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	4603      	mov	r3, r0
 80041c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff ff31 	bl	8004030 <__NVIC_EnableIRQ>
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7ff ffa2 	bl	8004128 <SysTick_Config>
 80041e4:	4603      	mov	r3, r0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80041fc:	f7ff face 	bl	800379c <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e099      	b.n	8004340 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0201 	bic.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800422c:	e00f      	b.n	800424e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800422e:	f7ff fab5 	bl	800379c <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b05      	cmp	r3, #5
 800423a:	d908      	bls.n	800424e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2203      	movs	r2, #3
 8004246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e078      	b.n	8004340 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e8      	bne.n	800422e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4b38      	ldr	r3, [pc, #224]	; (8004348 <HAL_DMA_Init+0x158>)
 8004268:	4013      	ands	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800427a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d107      	bne.n	80042b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	4313      	orrs	r3, r2
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f023 0307 	bic.w	r3, r3, #7
 80042ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d117      	bne.n	8004312 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00e      	beq.n	8004312 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fa6f 	bl	80047d8 <DMA_CheckFifoParam>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2240      	movs	r2, #64	; 0x40
 8004304:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800430e:	2301      	movs	r3, #1
 8004310:	e016      	b.n	8004340 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fa26 	bl	800476c <DMA_CalcBaseAndBitshift>
 8004320:	4603      	mov	r3, r0
 8004322:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004328:	223f      	movs	r2, #63	; 0x3f
 800432a:	409a      	lsls	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	f010803f 	.word	0xf010803f

0800434c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_DMA_Start_IT+0x26>
 800436e:	2302      	movs	r3, #2
 8004370:	e040      	b.n	80043f4 <HAL_DMA_Start_IT+0xa8>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b01      	cmp	r3, #1
 8004384:	d12f      	bne.n	80043e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2202      	movs	r2, #2
 800438a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f9b8 	bl	8004710 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a4:	223f      	movs	r2, #63	; 0x3f
 80043a6:	409a      	lsls	r2, r3
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0216 	orr.w	r2, r2, #22
 80043ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0208 	orr.w	r2, r2, #8
 80043d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e005      	b.n	80043f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80043ee:	2302      	movs	r3, #2
 80043f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80043f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004408:	4b92      	ldr	r3, [pc, #584]	; (8004654 <HAL_DMA_IRQHandler+0x258>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a92      	ldr	r2, [pc, #584]	; (8004658 <HAL_DMA_IRQHandler+0x25c>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	0a9b      	lsrs	r3, r3, #10
 8004414:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004426:	2208      	movs	r2, #8
 8004428:	409a      	lsls	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4013      	ands	r3, r2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d01a      	beq.n	8004468 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d013      	beq.n	8004468 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0204 	bic.w	r2, r2, #4
 800444e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004454:	2208      	movs	r2, #8
 8004456:	409a      	lsls	r2, r3
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004460:	f043 0201 	orr.w	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446c:	2201      	movs	r2, #1
 800446e:	409a      	lsls	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4013      	ands	r3, r2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d012      	beq.n	800449e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00b      	beq.n	800449e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448a:	2201      	movs	r2, #1
 800448c:	409a      	lsls	r2, r3
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004496:	f043 0202 	orr.w	r2, r3, #2
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a2:	2204      	movs	r2, #4
 80044a4:	409a      	lsls	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4013      	ands	r3, r2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d012      	beq.n	80044d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00b      	beq.n	80044d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c0:	2204      	movs	r2, #4
 80044c2:	409a      	lsls	r2, r3
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044cc:	f043 0204 	orr.w	r2, r3, #4
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d8:	2210      	movs	r2, #16
 80044da:	409a      	lsls	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4013      	ands	r3, r2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d043      	beq.n	800456c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d03c      	beq.n	800456c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f6:	2210      	movs	r2, #16
 80044f8:	409a      	lsls	r2, r3
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d018      	beq.n	800453e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d108      	bne.n	800452c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d024      	beq.n	800456c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	4798      	blx	r3
 800452a:	e01f      	b.n	800456c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01b      	beq.n	800456c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	4798      	blx	r3
 800453c:	e016      	b.n	800456c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d107      	bne.n	800455c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0208 	bic.w	r2, r2, #8
 800455a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004570:	2220      	movs	r2, #32
 8004572:	409a      	lsls	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4013      	ands	r3, r2
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 808e 	beq.w	800469a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0310 	and.w	r3, r3, #16
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8086 	beq.w	800469a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004592:	2220      	movs	r2, #32
 8004594:	409a      	lsls	r2, r3
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b05      	cmp	r3, #5
 80045a4:	d136      	bne.n	8004614 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0216 	bic.w	r2, r2, #22
 80045b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695a      	ldr	r2, [r3, #20]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d103      	bne.n	80045d6 <HAL_DMA_IRQHandler+0x1da>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d007      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0208 	bic.w	r2, r2, #8
 80045e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ea:	223f      	movs	r2, #63	; 0x3f
 80045ec:	409a      	lsls	r2, r3
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004606:	2b00      	cmp	r3, #0
 8004608:	d07d      	beq.n	8004706 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	4798      	blx	r3
        }
        return;
 8004612:	e078      	b.n	8004706 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d01c      	beq.n	800465c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d108      	bne.n	8004642 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004634:	2b00      	cmp	r3, #0
 8004636:	d030      	beq.n	800469a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	4798      	blx	r3
 8004640:	e02b      	b.n	800469a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d027      	beq.n	800469a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	4798      	blx	r3
 8004652:	e022      	b.n	800469a <HAL_DMA_IRQHandler+0x29e>
 8004654:	20000020 	.word	0x20000020
 8004658:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10f      	bne.n	800468a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0210 	bic.w	r2, r2, #16
 8004678:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d032      	beq.n	8004708 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d022      	beq.n	80046f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2205      	movs	r2, #5
 80046b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0201 	bic.w	r2, r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	3301      	adds	r3, #1
 80046ca:	60bb      	str	r3, [r7, #8]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d307      	bcc.n	80046e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1f2      	bne.n	80046c6 <HAL_DMA_IRQHandler+0x2ca>
 80046e0:	e000      	b.n	80046e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80046e2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4798      	blx	r3
 8004704:	e000      	b.n	8004708 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004706:	bf00      	nop
    }
  }
}
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop

08004710 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800472c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b40      	cmp	r3, #64	; 0x40
 800473c:	d108      	bne.n	8004750 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800474e:	e007      	b.n	8004760 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	60da      	str	r2, [r3, #12]
}
 8004760:	bf00      	nop
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	3b10      	subs	r3, #16
 800477c:	4a14      	ldr	r2, [pc, #80]	; (80047d0 <DMA_CalcBaseAndBitshift+0x64>)
 800477e:	fba2 2303 	umull	r2, r3, r2, r3
 8004782:	091b      	lsrs	r3, r3, #4
 8004784:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004786:	4a13      	ldr	r2, [pc, #76]	; (80047d4 <DMA_CalcBaseAndBitshift+0x68>)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b03      	cmp	r3, #3
 8004798:	d909      	bls.n	80047ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047a2:	f023 0303 	bic.w	r3, r3, #3
 80047a6:	1d1a      	adds	r2, r3, #4
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	659a      	str	r2, [r3, #88]	; 0x58
 80047ac:	e007      	b.n	80047be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047b6:	f023 0303 	bic.w	r3, r3, #3
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	aaaaaaab 	.word	0xaaaaaaab
 80047d4:	0800bde0 	.word	0x0800bde0

080047d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d11f      	bne.n	8004832 <DMA_CheckFifoParam+0x5a>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d856      	bhi.n	80048a6 <DMA_CheckFifoParam+0xce>
 80047f8:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <DMA_CheckFifoParam+0x28>)
 80047fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fe:	bf00      	nop
 8004800:	08004811 	.word	0x08004811
 8004804:	08004823 	.word	0x08004823
 8004808:	08004811 	.word	0x08004811
 800480c:	080048a7 	.word	0x080048a7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d046      	beq.n	80048aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004820:	e043      	b.n	80048aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800482a:	d140      	bne.n	80048ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004830:	e03d      	b.n	80048ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483a:	d121      	bne.n	8004880 <DMA_CheckFifoParam+0xa8>
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b03      	cmp	r3, #3
 8004840:	d837      	bhi.n	80048b2 <DMA_CheckFifoParam+0xda>
 8004842:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <DMA_CheckFifoParam+0x70>)
 8004844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004848:	08004859 	.word	0x08004859
 800484c:	0800485f 	.word	0x0800485f
 8004850:	08004859 	.word	0x08004859
 8004854:	08004871 	.word	0x08004871
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
      break;
 800485c:	e030      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d025      	beq.n	80048b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800486e:	e022      	b.n	80048b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004878:	d11f      	bne.n	80048ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800487e:	e01c      	b.n	80048ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d903      	bls.n	800488e <DMA_CheckFifoParam+0xb6>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b03      	cmp	r3, #3
 800488a:	d003      	beq.n	8004894 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800488c:	e018      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	73fb      	strb	r3, [r7, #15]
      break;
 8004892:	e015      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00e      	beq.n	80048be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      break;
 80048a4:	e00b      	b.n	80048be <DMA_CheckFifoParam+0xe6>
      break;
 80048a6:	bf00      	nop
 80048a8:	e00a      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
      break;
 80048aa:	bf00      	nop
 80048ac:	e008      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
      break;
 80048ae:	bf00      	nop
 80048b0:	e006      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
      break;
 80048b2:	bf00      	nop
 80048b4:	e004      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
      break;
 80048b6:	bf00      	nop
 80048b8:	e002      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80048ba:	bf00      	nop
 80048bc:	e000      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
      break;
 80048be:	bf00      	nop
    }
  } 
  
  return status; 
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop

080048d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b089      	sub	sp, #36	; 0x24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048de:	2300      	movs	r3, #0
 80048e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
 80048ea:	e159      	b.n	8004ba0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048ec:	2201      	movs	r2, #1
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4013      	ands	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	429a      	cmp	r2, r3
 8004906:	f040 8148 	bne.w	8004b9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b01      	cmp	r3, #1
 8004914:	d005      	beq.n	8004922 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800491e:	2b02      	cmp	r3, #2
 8004920:	d130      	bne.n	8004984 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	2203      	movs	r2, #3
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	43db      	mvns	r3, r3
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4013      	ands	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4313      	orrs	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004958:	2201      	movs	r2, #1
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	43db      	mvns	r3, r3
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4013      	ands	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	091b      	lsrs	r3, r3, #4
 800496e:	f003 0201 	and.w	r2, r3, #1
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4313      	orrs	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	2b03      	cmp	r3, #3
 800498e:	d017      	beq.n	80049c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	2203      	movs	r2, #3
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	43db      	mvns	r3, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4013      	ands	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d123      	bne.n	8004a14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	08da      	lsrs	r2, r3, #3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3208      	adds	r2, #8
 80049d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	220f      	movs	r2, #15
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	43db      	mvns	r3, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	08da      	lsrs	r2, r3, #3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3208      	adds	r2, #8
 8004a0e:	69b9      	ldr	r1, [r7, #24]
 8004a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	2203      	movs	r2, #3
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	43db      	mvns	r3, r3
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 0203 	and.w	r2, r3, #3
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80a2 	beq.w	8004b9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	4b57      	ldr	r3, [pc, #348]	; (8004bb8 <HAL_GPIO_Init+0x2e8>)
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5e:	4a56      	ldr	r2, [pc, #344]	; (8004bb8 <HAL_GPIO_Init+0x2e8>)
 8004a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a64:	6453      	str	r3, [r2, #68]	; 0x44
 8004a66:	4b54      	ldr	r3, [pc, #336]	; (8004bb8 <HAL_GPIO_Init+0x2e8>)
 8004a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a72:	4a52      	ldr	r2, [pc, #328]	; (8004bbc <HAL_GPIO_Init+0x2ec>)
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	089b      	lsrs	r3, r3, #2
 8004a78:	3302      	adds	r3, #2
 8004a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	220f      	movs	r2, #15
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	4013      	ands	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a49      	ldr	r2, [pc, #292]	; (8004bc0 <HAL_GPIO_Init+0x2f0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d019      	beq.n	8004ad2 <HAL_GPIO_Init+0x202>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a48      	ldr	r2, [pc, #288]	; (8004bc4 <HAL_GPIO_Init+0x2f4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d013      	beq.n	8004ace <HAL_GPIO_Init+0x1fe>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a47      	ldr	r2, [pc, #284]	; (8004bc8 <HAL_GPIO_Init+0x2f8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00d      	beq.n	8004aca <HAL_GPIO_Init+0x1fa>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a46      	ldr	r2, [pc, #280]	; (8004bcc <HAL_GPIO_Init+0x2fc>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d007      	beq.n	8004ac6 <HAL_GPIO_Init+0x1f6>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a45      	ldr	r2, [pc, #276]	; (8004bd0 <HAL_GPIO_Init+0x300>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d101      	bne.n	8004ac2 <HAL_GPIO_Init+0x1f2>
 8004abe:	2304      	movs	r3, #4
 8004ac0:	e008      	b.n	8004ad4 <HAL_GPIO_Init+0x204>
 8004ac2:	2307      	movs	r3, #7
 8004ac4:	e006      	b.n	8004ad4 <HAL_GPIO_Init+0x204>
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e004      	b.n	8004ad4 <HAL_GPIO_Init+0x204>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e002      	b.n	8004ad4 <HAL_GPIO_Init+0x204>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <HAL_GPIO_Init+0x204>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	f002 0203 	and.w	r2, r2, #3
 8004ada:	0092      	lsls	r2, r2, #2
 8004adc:	4093      	lsls	r3, r2
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ae4:	4935      	ldr	r1, [pc, #212]	; (8004bbc <HAL_GPIO_Init+0x2ec>)
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	089b      	lsrs	r3, r3, #2
 8004aea:	3302      	adds	r3, #2
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004af2:	4b38      	ldr	r3, [pc, #224]	; (8004bd4 <HAL_GPIO_Init+0x304>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	43db      	mvns	r3, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4013      	ands	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b16:	4a2f      	ldr	r2, [pc, #188]	; (8004bd4 <HAL_GPIO_Init+0x304>)
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004b1c:	4b2d      	ldr	r3, [pc, #180]	; (8004bd4 <HAL_GPIO_Init+0x304>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b40:	4a24      	ldr	r2, [pc, #144]	; (8004bd4 <HAL_GPIO_Init+0x304>)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b46:	4b23      	ldr	r3, [pc, #140]	; (8004bd4 <HAL_GPIO_Init+0x304>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	4013      	ands	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b6a:	4a1a      	ldr	r2, [pc, #104]	; (8004bd4 <HAL_GPIO_Init+0x304>)
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b70:	4b18      	ldr	r3, [pc, #96]	; (8004bd4 <HAL_GPIO_Init+0x304>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b94:	4a0f      	ldr	r2, [pc, #60]	; (8004bd4 <HAL_GPIO_Init+0x304>)
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	61fb      	str	r3, [r7, #28]
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	2b0f      	cmp	r3, #15
 8004ba4:	f67f aea2 	bls.w	80048ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop
 8004bac:	3724      	adds	r7, #36	; 0x24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	40013800 	.word	0x40013800
 8004bc0:	40020000 	.word	0x40020000
 8004bc4:	40020400 	.word	0x40020400
 8004bc8:	40020800 	.word	0x40020800
 8004bcc:	40020c00 	.word	0x40020c00
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	40013c00 	.word	0x40013c00

08004bd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	887b      	ldrh	r3, [r7, #2]
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	73fb      	strb	r3, [r7, #15]
 8004bf4:	e001      	b.n	8004bfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	807b      	strh	r3, [r7, #2]
 8004c14:	4613      	mov	r3, r2
 8004c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c18:	787b      	ldrb	r3, [r7, #1]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c1e:	887a      	ldrh	r2, [r7, #2]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c24:	e003      	b.n	8004c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c26:	887b      	ldrh	r3, [r7, #2]
 8004c28:	041a      	lsls	r2, r3, #16
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	619a      	str	r2, [r3, #24]
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
	...

08004c3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e264      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d075      	beq.n	8004d46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c5a:	4ba3      	ldr	r3, [pc, #652]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d00c      	beq.n	8004c80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c66:	4ba0      	ldr	r3, [pc, #640]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d112      	bne.n	8004c98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c72:	4b9d      	ldr	r3, [pc, #628]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c7e:	d10b      	bne.n	8004c98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c80:	4b99      	ldr	r3, [pc, #612]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d05b      	beq.n	8004d44 <HAL_RCC_OscConfig+0x108>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d157      	bne.n	8004d44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e23f      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca0:	d106      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x74>
 8004ca2:	4b91      	ldr	r3, [pc, #580]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a90      	ldr	r2, [pc, #576]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	e01d      	b.n	8004cec <HAL_RCC_OscConfig+0xb0>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x98>
 8004cba:	4b8b      	ldr	r3, [pc, #556]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a8a      	ldr	r2, [pc, #552]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	4b88      	ldr	r3, [pc, #544]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a87      	ldr	r2, [pc, #540]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e00b      	b.n	8004cec <HAL_RCC_OscConfig+0xb0>
 8004cd4:	4b84      	ldr	r3, [pc, #528]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a83      	ldr	r2, [pc, #524]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	4b81      	ldr	r3, [pc, #516]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a80      	ldr	r2, [pc, #512]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d013      	beq.n	8004d1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf4:	f7fe fd52 	bl	800379c <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cfc:	f7fe fd4e 	bl	800379c <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b64      	cmp	r3, #100	; 0x64
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e204      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0e:	4b76      	ldr	r3, [pc, #472]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCC_OscConfig+0xc0>
 8004d1a:	e014      	b.n	8004d46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1c:	f7fe fd3e 	bl	800379c <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d24:	f7fe fd3a 	bl	800379c <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	; 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e1f0      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d36:	4b6c      	ldr	r3, [pc, #432]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f0      	bne.n	8004d24 <HAL_RCC_OscConfig+0xe8>
 8004d42:	e000      	b.n	8004d46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d063      	beq.n	8004e1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d52:	4b65      	ldr	r3, [pc, #404]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d5e:	4b62      	ldr	r3, [pc, #392]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d11c      	bne.n	8004da4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d6a:	4b5f      	ldr	r3, [pc, #380]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d116      	bne.n	8004da4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d76:	4b5c      	ldr	r3, [pc, #368]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <HAL_RCC_OscConfig+0x152>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d001      	beq.n	8004d8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e1c4      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8e:	4b56      	ldr	r3, [pc, #344]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	4952      	ldr	r1, [pc, #328]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004da2:	e03a      	b.n	8004e1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d020      	beq.n	8004dee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dac:	4b4f      	ldr	r3, [pc, #316]	; (8004eec <HAL_RCC_OscConfig+0x2b0>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db2:	f7fe fcf3 	bl	800379c <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dba:	f7fe fcef 	bl	800379c <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e1a5      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dcc:	4b46      	ldr	r3, [pc, #280]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0f0      	beq.n	8004dba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd8:	4b43      	ldr	r3, [pc, #268]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	4940      	ldr	r1, [pc, #256]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	600b      	str	r3, [r1, #0]
 8004dec:	e015      	b.n	8004e1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dee:	4b3f      	ldr	r3, [pc, #252]	; (8004eec <HAL_RCC_OscConfig+0x2b0>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df4:	f7fe fcd2 	bl	800379c <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dfc:	f7fe fcce 	bl	800379c <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e184      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e0e:	4b36      	ldr	r3, [pc, #216]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f0      	bne.n	8004dfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d030      	beq.n	8004e88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d016      	beq.n	8004e5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e2e:	4b30      	ldr	r3, [pc, #192]	; (8004ef0 <HAL_RCC_OscConfig+0x2b4>)
 8004e30:	2201      	movs	r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e34:	f7fe fcb2 	bl	800379c <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e3c:	f7fe fcae 	bl	800379c <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e164      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e4e:	4b26      	ldr	r3, [pc, #152]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0x200>
 8004e5a:	e015      	b.n	8004e88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e5c:	4b24      	ldr	r3, [pc, #144]	; (8004ef0 <HAL_RCC_OscConfig+0x2b4>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e62:	f7fe fc9b 	bl	800379c <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e6a:	f7fe fc97 	bl	800379c <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e14d      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1f0      	bne.n	8004e6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 80a0 	beq.w	8004fd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e96:	2300      	movs	r3, #0
 8004e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e9a:	4b13      	ldr	r3, [pc, #76]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10f      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	4b0f      	ldr	r3, [pc, #60]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	4a0e      	ldr	r2, [pc, #56]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <HAL_RCC_OscConfig+0x2ac>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <HAL_RCC_OscConfig+0x2b8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d121      	bne.n	8004f16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ed2:	4b08      	ldr	r3, [pc, #32]	; (8004ef4 <HAL_RCC_OscConfig+0x2b8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a07      	ldr	r2, [pc, #28]	; (8004ef4 <HAL_RCC_OscConfig+0x2b8>)
 8004ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ede:	f7fe fc5d 	bl	800379c <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee4:	e011      	b.n	8004f0a <HAL_RCC_OscConfig+0x2ce>
 8004ee6:	bf00      	nop
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	42470000 	.word	0x42470000
 8004ef0:	42470e80 	.word	0x42470e80
 8004ef4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef8:	f7fe fc50 	bl	800379c <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e106      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0a:	4b85      	ldr	r3, [pc, #532]	; (8005120 <HAL_RCC_OscConfig+0x4e4>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f0      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d106      	bne.n	8004f2c <HAL_RCC_OscConfig+0x2f0>
 8004f1e:	4b81      	ldr	r3, [pc, #516]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f22:	4a80      	ldr	r2, [pc, #512]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f24:	f043 0301 	orr.w	r3, r3, #1
 8004f28:	6713      	str	r3, [r2, #112]	; 0x70
 8004f2a:	e01c      	b.n	8004f66 <HAL_RCC_OscConfig+0x32a>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	2b05      	cmp	r3, #5
 8004f32:	d10c      	bne.n	8004f4e <HAL_RCC_OscConfig+0x312>
 8004f34:	4b7b      	ldr	r3, [pc, #492]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f38:	4a7a      	ldr	r2, [pc, #488]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f3a:	f043 0304 	orr.w	r3, r3, #4
 8004f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f40:	4b78      	ldr	r3, [pc, #480]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f44:	4a77      	ldr	r2, [pc, #476]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f46:	f043 0301 	orr.w	r3, r3, #1
 8004f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f4c:	e00b      	b.n	8004f66 <HAL_RCC_OscConfig+0x32a>
 8004f4e:	4b75      	ldr	r3, [pc, #468]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	4a74      	ldr	r2, [pc, #464]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f54:	f023 0301 	bic.w	r3, r3, #1
 8004f58:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5a:	4b72      	ldr	r3, [pc, #456]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	4a71      	ldr	r2, [pc, #452]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f60:	f023 0304 	bic.w	r3, r3, #4
 8004f64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d015      	beq.n	8004f9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6e:	f7fe fc15 	bl	800379c <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f74:	e00a      	b.n	8004f8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f76:	f7fe fc11 	bl	800379c <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e0c5      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f8c:	4b65      	ldr	r3, [pc, #404]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0ee      	beq.n	8004f76 <HAL_RCC_OscConfig+0x33a>
 8004f98:	e014      	b.n	8004fc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f9a:	f7fe fbff 	bl	800379c <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa0:	e00a      	b.n	8004fb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fa2:	f7fe fbfb 	bl	800379c <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e0af      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fb8:	4b5a      	ldr	r3, [pc, #360]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1ee      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fc4:	7dfb      	ldrb	r3, [r7, #23]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d105      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fca:	4b56      	ldr	r3, [pc, #344]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	4a55      	ldr	r2, [pc, #340]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 809b 	beq.w	8005116 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fe0:	4b50      	ldr	r3, [pc, #320]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 030c 	and.w	r3, r3, #12
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d05c      	beq.n	80050a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d141      	bne.n	8005078 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff4:	4b4c      	ldr	r3, [pc, #304]	; (8005128 <HAL_RCC_OscConfig+0x4ec>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffa:	f7fe fbcf 	bl	800379c <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005002:	f7fe fbcb 	bl	800379c <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e081      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005014:	4b43      	ldr	r3, [pc, #268]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f0      	bne.n	8005002 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	019b      	lsls	r3, r3, #6
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	085b      	lsrs	r3, r3, #1
 8005038:	3b01      	subs	r3, #1
 800503a:	041b      	lsls	r3, r3, #16
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	061b      	lsls	r3, r3, #24
 8005044:	4937      	ldr	r1, [pc, #220]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 8005046:	4313      	orrs	r3, r2
 8005048:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800504a:	4b37      	ldr	r3, [pc, #220]	; (8005128 <HAL_RCC_OscConfig+0x4ec>)
 800504c:	2201      	movs	r2, #1
 800504e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005050:	f7fe fba4 	bl	800379c <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005058:	f7fe fba0 	bl	800379c <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e056      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800506a:	4b2e      	ldr	r3, [pc, #184]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0x41c>
 8005076:	e04e      	b.n	8005116 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005078:	4b2b      	ldr	r3, [pc, #172]	; (8005128 <HAL_RCC_OscConfig+0x4ec>)
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507e:	f7fe fb8d 	bl	800379c <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005086:	f7fe fb89 	bl	800379c <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e03f      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005098:	4b22      	ldr	r3, [pc, #136]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f0      	bne.n	8005086 <HAL_RCC_OscConfig+0x44a>
 80050a4:	e037      	b.n	8005116 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e032      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050b2:	4b1c      	ldr	r3, [pc, #112]	; (8005124 <HAL_RCC_OscConfig+0x4e8>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d028      	beq.n	8005112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d121      	bne.n	8005112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050d8:	429a      	cmp	r2, r3
 80050da:	d11a      	bne.n	8005112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050e2:	4013      	ands	r3, r2
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d111      	bne.n	8005112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f8:	085b      	lsrs	r3, r3, #1
 80050fa:	3b01      	subs	r3, #1
 80050fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050fe:	429a      	cmp	r2, r3
 8005100:	d107      	bne.n	8005112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800510e:	429a      	cmp	r2, r3
 8005110:	d001      	beq.n	8005116 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40007000 	.word	0x40007000
 8005124:	40023800 	.word	0x40023800
 8005128:	42470060 	.word	0x42470060

0800512c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0cc      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005140:	4b68      	ldr	r3, [pc, #416]	; (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d90c      	bls.n	8005168 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514e:	4b65      	ldr	r3, [pc, #404]	; (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005156:	4b63      	ldr	r3, [pc, #396]	; (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d001      	beq.n	8005168 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0b8      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d020      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005180:	4b59      	ldr	r3, [pc, #356]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	4a58      	ldr	r2, [pc, #352]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005186:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800518a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005198:	4b53      	ldr	r3, [pc, #332]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	4a52      	ldr	r2, [pc, #328]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a4:	4b50      	ldr	r3, [pc, #320]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	494d      	ldr	r1, [pc, #308]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d044      	beq.n	800524c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d107      	bne.n	80051da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ca:	4b47      	ldr	r3, [pc, #284]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d119      	bne.n	800520a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e07f      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d003      	beq.n	80051ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d107      	bne.n	80051fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ea:	4b3f      	ldr	r3, [pc, #252]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d109      	bne.n	800520a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e06f      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051fa:	4b3b      	ldr	r3, [pc, #236]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e067      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800520a:	4b37      	ldr	r3, [pc, #220]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f023 0203 	bic.w	r2, r3, #3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	4934      	ldr	r1, [pc, #208]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005218:	4313      	orrs	r3, r2
 800521a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800521c:	f7fe fabe 	bl	800379c <HAL_GetTick>
 8005220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005222:	e00a      	b.n	800523a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005224:	f7fe faba 	bl	800379c <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e04f      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523a:	4b2b      	ldr	r3, [pc, #172]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 020c 	and.w	r2, r3, #12
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	429a      	cmp	r2, r3
 800524a:	d1eb      	bne.n	8005224 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800524c:	4b25      	ldr	r3, [pc, #148]	; (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d20c      	bcs.n	8005274 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525a:	4b22      	ldr	r3, [pc, #136]	; (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005262:	4b20      	ldr	r3, [pc, #128]	; (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d001      	beq.n	8005274 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e032      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005280:	4b19      	ldr	r3, [pc, #100]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	4916      	ldr	r1, [pc, #88]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800528e:	4313      	orrs	r3, r2
 8005290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d009      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800529e:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	490e      	ldr	r1, [pc, #56]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052b2:	f000 f821 	bl	80052f8 <HAL_RCC_GetSysClockFreq>
 80052b6:	4602      	mov	r2, r0
 80052b8:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	490a      	ldr	r1, [pc, #40]	; (80052ec <HAL_RCC_ClockConfig+0x1c0>)
 80052c4:	5ccb      	ldrb	r3, [r1, r3]
 80052c6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ca:	4a09      	ldr	r2, [pc, #36]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 80052cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052ce:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fe fa1e 	bl	8003714 <HAL_InitTick>

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40023c00 	.word	0x40023c00
 80052e8:	40023800 	.word	0x40023800
 80052ec:	0800bdc8 	.word	0x0800bdc8
 80052f0:	20000020 	.word	0x20000020
 80052f4:	20000024 	.word	0x20000024

080052f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80052fc:	b084      	sub	sp, #16
 80052fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	607b      	str	r3, [r7, #4]
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	2300      	movs	r3, #0
 800530a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800530c:	2300      	movs	r3, #0
 800530e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005310:	4b67      	ldr	r3, [pc, #412]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f003 030c 	and.w	r3, r3, #12
 8005318:	2b08      	cmp	r3, #8
 800531a:	d00d      	beq.n	8005338 <HAL_RCC_GetSysClockFreq+0x40>
 800531c:	2b08      	cmp	r3, #8
 800531e:	f200 80bd 	bhi.w	800549c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <HAL_RCC_GetSysClockFreq+0x34>
 8005326:	2b04      	cmp	r3, #4
 8005328:	d003      	beq.n	8005332 <HAL_RCC_GetSysClockFreq+0x3a>
 800532a:	e0b7      	b.n	800549c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800532c:	4b61      	ldr	r3, [pc, #388]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800532e:	60bb      	str	r3, [r7, #8]
       break;
 8005330:	e0b7      	b.n	80054a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005332:	4b61      	ldr	r3, [pc, #388]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005334:	60bb      	str	r3, [r7, #8]
      break;
 8005336:	e0b4      	b.n	80054a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005338:	4b5d      	ldr	r3, [pc, #372]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005340:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005342:	4b5b      	ldr	r3, [pc, #364]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d04d      	beq.n	80053ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800534e:	4b58      	ldr	r3, [pc, #352]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	099b      	lsrs	r3, r3, #6
 8005354:	461a      	mov	r2, r3
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800535e:	f04f 0100 	mov.w	r1, #0
 8005362:	ea02 0800 	and.w	r8, r2, r0
 8005366:	ea03 0901 	and.w	r9, r3, r1
 800536a:	4640      	mov	r0, r8
 800536c:	4649      	mov	r1, r9
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	014b      	lsls	r3, r1, #5
 8005378:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800537c:	0142      	lsls	r2, r0, #5
 800537e:	4610      	mov	r0, r2
 8005380:	4619      	mov	r1, r3
 8005382:	ebb0 0008 	subs.w	r0, r0, r8
 8005386:	eb61 0109 	sbc.w	r1, r1, r9
 800538a:	f04f 0200 	mov.w	r2, #0
 800538e:	f04f 0300 	mov.w	r3, #0
 8005392:	018b      	lsls	r3, r1, #6
 8005394:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005398:	0182      	lsls	r2, r0, #6
 800539a:	1a12      	subs	r2, r2, r0
 800539c:	eb63 0301 	sbc.w	r3, r3, r1
 80053a0:	f04f 0000 	mov.w	r0, #0
 80053a4:	f04f 0100 	mov.w	r1, #0
 80053a8:	00d9      	lsls	r1, r3, #3
 80053aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053ae:	00d0      	lsls	r0, r2, #3
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	eb12 0208 	adds.w	r2, r2, r8
 80053b8:	eb43 0309 	adc.w	r3, r3, r9
 80053bc:	f04f 0000 	mov.w	r0, #0
 80053c0:	f04f 0100 	mov.w	r1, #0
 80053c4:	0259      	lsls	r1, r3, #9
 80053c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80053ca:	0250      	lsls	r0, r2, #9
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4610      	mov	r0, r2
 80053d2:	4619      	mov	r1, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	f7fb fc3c 	bl	8000c58 <__aeabi_uldivmod>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4613      	mov	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	e04a      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ea:	4b31      	ldr	r3, [pc, #196]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	099b      	lsrs	r3, r3, #6
 80053f0:	461a      	mov	r2, r3
 80053f2:	f04f 0300 	mov.w	r3, #0
 80053f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80053fa:	f04f 0100 	mov.w	r1, #0
 80053fe:	ea02 0400 	and.w	r4, r2, r0
 8005402:	ea03 0501 	and.w	r5, r3, r1
 8005406:	4620      	mov	r0, r4
 8005408:	4629      	mov	r1, r5
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	f04f 0300 	mov.w	r3, #0
 8005412:	014b      	lsls	r3, r1, #5
 8005414:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005418:	0142      	lsls	r2, r0, #5
 800541a:	4610      	mov	r0, r2
 800541c:	4619      	mov	r1, r3
 800541e:	1b00      	subs	r0, r0, r4
 8005420:	eb61 0105 	sbc.w	r1, r1, r5
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	018b      	lsls	r3, r1, #6
 800542e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005432:	0182      	lsls	r2, r0, #6
 8005434:	1a12      	subs	r2, r2, r0
 8005436:	eb63 0301 	sbc.w	r3, r3, r1
 800543a:	f04f 0000 	mov.w	r0, #0
 800543e:	f04f 0100 	mov.w	r1, #0
 8005442:	00d9      	lsls	r1, r3, #3
 8005444:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005448:	00d0      	lsls	r0, r2, #3
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	1912      	adds	r2, r2, r4
 8005450:	eb45 0303 	adc.w	r3, r5, r3
 8005454:	f04f 0000 	mov.w	r0, #0
 8005458:	f04f 0100 	mov.w	r1, #0
 800545c:	0299      	lsls	r1, r3, #10
 800545e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005462:	0290      	lsls	r0, r2, #10
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4610      	mov	r0, r2
 800546a:	4619      	mov	r1, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	461a      	mov	r2, r3
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	f7fb fbf0 	bl	8000c58 <__aeabi_uldivmod>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	4613      	mov	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005480:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	0c1b      	lsrs	r3, r3, #16
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	3301      	adds	r3, #1
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	fbb2 f3f3 	udiv	r3, r2, r3
 8005498:	60bb      	str	r3, [r7, #8]
      break;
 800549a:	e002      	b.n	80054a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800549c:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800549e:	60bb      	str	r3, [r7, #8]
      break;
 80054a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054a2:	68bb      	ldr	r3, [r7, #8]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80054ae:	bf00      	nop
 80054b0:	40023800 	.word	0x40023800
 80054b4:	00f42400 	.word	0x00f42400
 80054b8:	007a1200 	.word	0x007a1200

080054bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054c0:	4b03      	ldr	r3, [pc, #12]	; (80054d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80054c2:	681b      	ldr	r3, [r3, #0]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	20000020 	.word	0x20000020

080054d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054d8:	f7ff fff0 	bl	80054bc <HAL_RCC_GetHCLKFreq>
 80054dc:	4602      	mov	r2, r0
 80054de:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	0a9b      	lsrs	r3, r3, #10
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	4903      	ldr	r1, [pc, #12]	; (80054f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ea:	5ccb      	ldrb	r3, [r1, r3]
 80054ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40023800 	.word	0x40023800
 80054f8:	0800bdd8 	.word	0x0800bdd8

080054fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005500:	f7ff ffdc 	bl	80054bc <HAL_RCC_GetHCLKFreq>
 8005504:	4602      	mov	r2, r0
 8005506:	4b05      	ldr	r3, [pc, #20]	; (800551c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	0b5b      	lsrs	r3, r3, #13
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	4903      	ldr	r1, [pc, #12]	; (8005520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005512:	5ccb      	ldrb	r3, [r1, r3]
 8005514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005518:	4618      	mov	r0, r3
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40023800 	.word	0x40023800
 8005520:	0800bdd8 	.word	0x0800bdd8

08005524 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e07b      	b.n	800562e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	2b00      	cmp	r3, #0
 800553c:	d108      	bne.n	8005550 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005546:	d009      	beq.n	800555c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	61da      	str	r2, [r3, #28]
 800554e:	e005      	b.n	800555c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fd fdc0 	bl	80030fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005592:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e0:	ea42 0103 	orr.w	r1, r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	0c1b      	lsrs	r3, r3, #16
 80055fa:	f003 0104 	and.w	r1, r3, #4
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	f003 0210 	and.w	r2, r3, #16
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800561c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b088      	sub	sp, #32
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	603b      	str	r3, [r7, #0]
 8005642:	4613      	mov	r3, r2
 8005644:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_SPI_Transmit+0x22>
 8005654:	2302      	movs	r3, #2
 8005656:	e126      	b.n	80058a6 <HAL_SPI_Transmit+0x270>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005660:	f7fe f89c 	bl	800379c <HAL_GetTick>
 8005664:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005666:	88fb      	ldrh	r3, [r7, #6]
 8005668:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b01      	cmp	r3, #1
 8005674:	d002      	beq.n	800567c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005676:	2302      	movs	r3, #2
 8005678:	77fb      	strb	r3, [r7, #31]
    goto error;
 800567a:	e10b      	b.n	8005894 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_SPI_Transmit+0x52>
 8005682:	88fb      	ldrh	r3, [r7, #6]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d102      	bne.n	800568e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800568c:	e102      	b.n	8005894 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2203      	movs	r2, #3
 8005692:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	88fa      	ldrh	r2, [r7, #6]
 80056a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	88fa      	ldrh	r2, [r7, #6]
 80056ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d4:	d10f      	bne.n	80056f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005700:	2b40      	cmp	r3, #64	; 0x40
 8005702:	d007      	beq.n	8005714 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005712:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800571c:	d14b      	bne.n	80057b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <HAL_SPI_Transmit+0xf6>
 8005726:	8afb      	ldrh	r3, [r7, #22]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d13e      	bne.n	80057aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	881a      	ldrh	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573c:	1c9a      	adds	r2, r3, #2
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005750:	e02b      	b.n	80057aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b02      	cmp	r3, #2
 800575e:	d112      	bne.n	8005786 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005764:	881a      	ldrh	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005770:	1c9a      	adds	r2, r3, #2
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	86da      	strh	r2, [r3, #54]	; 0x36
 8005784:	e011      	b.n	80057aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005786:	f7fe f809 	bl	800379c <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d803      	bhi.n	800579e <HAL_SPI_Transmit+0x168>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800579c:	d102      	bne.n	80057a4 <HAL_SPI_Transmit+0x16e>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d102      	bne.n	80057aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057a8:	e074      	b.n	8005894 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1ce      	bne.n	8005752 <HAL_SPI_Transmit+0x11c>
 80057b4:	e04c      	b.n	8005850 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <HAL_SPI_Transmit+0x18e>
 80057be:	8afb      	ldrh	r3, [r7, #22]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d140      	bne.n	8005846 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	330c      	adds	r3, #12
 80057ce:	7812      	ldrb	r2, [r2, #0]
 80057d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057ea:	e02c      	b.n	8005846 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d113      	bne.n	8005822 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	330c      	adds	r3, #12
 8005804:	7812      	ldrb	r2, [r2, #0]
 8005806:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005820:	e011      	b.n	8005846 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005822:	f7fd ffbb 	bl	800379c <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d803      	bhi.n	800583a <HAL_SPI_Transmit+0x204>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005838:	d102      	bne.n	8005840 <HAL_SPI_Transmit+0x20a>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d102      	bne.n	8005846 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005844:	e026      	b.n	8005894 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1cd      	bne.n	80057ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 fbd9 	bl	800600c <SPI_EndRxTxTransaction>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10a      	bne.n	8005884 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800586e:	2300      	movs	r3, #0
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	77fb      	strb	r3, [r7, #31]
 8005890:	e000      	b.n	8005894 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005892:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3720      	adds	r7, #32
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b088      	sub	sp, #32
 80058b2:	af02      	add	r7, sp, #8
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	603b      	str	r3, [r7, #0]
 80058ba:	4613      	mov	r3, r2
 80058bc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ca:	d112      	bne.n	80058f2 <HAL_SPI_Receive+0x44>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10e      	bne.n	80058f2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2204      	movs	r2, #4
 80058d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80058dc:	88fa      	ldrh	r2, [r7, #6]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	4613      	mov	r3, r2
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	68b9      	ldr	r1, [r7, #8]
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 f8f1 	bl	8005ad0 <HAL_SPI_TransmitReceive>
 80058ee:	4603      	mov	r3, r0
 80058f0:	e0ea      	b.n	8005ac8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_SPI_Receive+0x52>
 80058fc:	2302      	movs	r3, #2
 80058fe:	e0e3      	b.n	8005ac8 <HAL_SPI_Receive+0x21a>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005908:	f7fd ff48 	bl	800379c <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b01      	cmp	r3, #1
 8005918:	d002      	beq.n	8005920 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800591a:	2302      	movs	r3, #2
 800591c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800591e:	e0ca      	b.n	8005ab6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <HAL_SPI_Receive+0x7e>
 8005926:	88fb      	ldrh	r3, [r7, #6]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d102      	bne.n	8005932 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005930:	e0c1      	b.n	8005ab6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2204      	movs	r2, #4
 8005936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	88fa      	ldrh	r2, [r7, #6]
 800594a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	88fa      	ldrh	r2, [r7, #6]
 8005950:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005978:	d10f      	bne.n	800599a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005988:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005998:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	d007      	beq.n	80059b8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d162      	bne.n	8005a86 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80059c0:	e02e      	b.n	8005a20 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d115      	bne.n	80059fc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f103 020c 	add.w	r2, r3, #12
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059dc:	7812      	ldrb	r2, [r2, #0]
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059fa:	e011      	b.n	8005a20 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059fc:	f7fd fece 	bl	800379c <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d803      	bhi.n	8005a14 <HAL_SPI_Receive+0x166>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a12:	d102      	bne.n	8005a1a <HAL_SPI_Receive+0x16c>
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d102      	bne.n	8005a20 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a1e:	e04a      	b.n	8005ab6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1cb      	bne.n	80059c2 <HAL_SPI_Receive+0x114>
 8005a2a:	e031      	b.n	8005a90 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d113      	bne.n	8005a62 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68da      	ldr	r2, [r3, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a44:	b292      	uxth	r2, r2
 8005a46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	1c9a      	adds	r2, r3, #2
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a60:	e011      	b.n	8005a86 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a62:	f7fd fe9b 	bl	800379c <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d803      	bhi.n	8005a7a <HAL_SPI_Receive+0x1cc>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a78:	d102      	bne.n	8005a80 <HAL_SPI_Receive+0x1d2>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d102      	bne.n	8005a86 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a84:	e017      	b.n	8005ab6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1cd      	bne.n	8005a2c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	6839      	ldr	r1, [r7, #0]
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fa53 	bl	8005f40 <SPI_EndRxTransaction>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	75fb      	strb	r3, [r7, #23]
 8005ab2:	e000      	b.n	8005ab6 <HAL_SPI_Receive+0x208>
  }

error :
 8005ab4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08c      	sub	sp, #48	; 0x30
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d101      	bne.n	8005af6 <HAL_SPI_TransmitReceive+0x26>
 8005af2:	2302      	movs	r3, #2
 8005af4:	e18a      	b.n	8005e0c <HAL_SPI_TransmitReceive+0x33c>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005afe:	f7fd fe4d 	bl	800379c <HAL_GetTick>
 8005b02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005b14:	887b      	ldrh	r3, [r7, #2]
 8005b16:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d00f      	beq.n	8005b40 <HAL_SPI_TransmitReceive+0x70>
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b26:	d107      	bne.n	8005b38 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d103      	bne.n	8005b38 <HAL_SPI_TransmitReceive+0x68>
 8005b30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d003      	beq.n	8005b40 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005b38:	2302      	movs	r3, #2
 8005b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b3e:	e15b      	b.n	8005df8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <HAL_SPI_TransmitReceive+0x82>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <HAL_SPI_TransmitReceive+0x82>
 8005b4c:	887b      	ldrh	r3, [r7, #2]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d103      	bne.n	8005b5a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b58:	e14e      	b.n	8005df8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d003      	beq.n	8005b6e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2205      	movs	r2, #5
 8005b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	887a      	ldrh	r2, [r7, #2]
 8005b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	887a      	ldrh	r2, [r7, #2]
 8005b84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	887a      	ldrh	r2, [r7, #2]
 8005b90:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	887a      	ldrh	r2, [r7, #2]
 8005b96:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bae:	2b40      	cmp	r3, #64	; 0x40
 8005bb0:	d007      	beq.n	8005bc2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bca:	d178      	bne.n	8005cbe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <HAL_SPI_TransmitReceive+0x10a>
 8005bd4:	8b7b      	ldrh	r3, [r7, #26]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d166      	bne.n	8005ca8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bde:	881a      	ldrh	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bea:	1c9a      	adds	r2, r3, #2
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bfe:	e053      	b.n	8005ca8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d11b      	bne.n	8005c46 <HAL_SPI_TransmitReceive+0x176>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d016      	beq.n	8005c46 <HAL_SPI_TransmitReceive+0x176>
 8005c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d113      	bne.n	8005c46 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c22:	881a      	ldrh	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2e:	1c9a      	adds	r2, r3, #2
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d119      	bne.n	8005c88 <HAL_SPI_TransmitReceive+0x1b8>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d014      	beq.n	8005c88 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	b292      	uxth	r2, r2
 8005c6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c70:	1c9a      	adds	r2, r3, #2
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c84:	2301      	movs	r3, #1
 8005c86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c88:	f7fd fd88 	bl	800379c <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d807      	bhi.n	8005ca8 <HAL_SPI_TransmitReceive+0x1d8>
 8005c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c9e:	d003      	beq.n	8005ca8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ca6:	e0a7      	b.n	8005df8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1a6      	bne.n	8005c00 <HAL_SPI_TransmitReceive+0x130>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1a1      	bne.n	8005c00 <HAL_SPI_TransmitReceive+0x130>
 8005cbc:	e07c      	b.n	8005db8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <HAL_SPI_TransmitReceive+0x1fc>
 8005cc6:	8b7b      	ldrh	r3, [r7, #26]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d16b      	bne.n	8005da4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	330c      	adds	r3, #12
 8005cd6:	7812      	ldrb	r2, [r2, #0]
 8005cd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cf2:	e057      	b.n	8005da4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d11c      	bne.n	8005d3c <HAL_SPI_TransmitReceive+0x26c>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d017      	beq.n	8005d3c <HAL_SPI_TransmitReceive+0x26c>
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d114      	bne.n	8005d3c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	330c      	adds	r3, #12
 8005d1c:	7812      	ldrb	r2, [r2, #0]
 8005d1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d119      	bne.n	8005d7e <HAL_SPI_TransmitReceive+0x2ae>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d014      	beq.n	8005d7e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d7e:	f7fd fd0d 	bl	800379c <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d803      	bhi.n	8005d96 <HAL_SPI_TransmitReceive+0x2c6>
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d94:	d102      	bne.n	8005d9c <HAL_SPI_TransmitReceive+0x2cc>
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d103      	bne.n	8005da4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005da2:	e029      	b.n	8005df8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1a2      	bne.n	8005cf4 <HAL_SPI_TransmitReceive+0x224>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d19d      	bne.n	8005cf4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 f925 	bl	800600c <SPI_EndRxTxTransaction>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d006      	beq.n	8005dd6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005dd4:	e010      	b.n	8005df8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10b      	bne.n	8005df6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dde:	2300      	movs	r3, #0
 8005de0:	617b      	str	r3, [r7, #20]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	617b      	str	r3, [r7, #20]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	e000      	b.n	8005df8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005df6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3730      	adds	r7, #48	; 0x30
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e22:	b2db      	uxtb	r3, r3
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e40:	f7fd fcac 	bl	800379c <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e48:	1a9b      	subs	r3, r3, r2
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e50:	f7fd fca4 	bl	800379c <HAL_GetTick>
 8005e54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e56:	4b39      	ldr	r3, [pc, #228]	; (8005f3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	015b      	lsls	r3, r3, #5
 8005e5c:	0d1b      	lsrs	r3, r3, #20
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	fb02 f303 	mul.w	r3, r2, r3
 8005e64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e66:	e054      	b.n	8005f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e6e:	d050      	beq.n	8005f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e70:	f7fd fc94 	bl	800379c <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	69fa      	ldr	r2, [r7, #28]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d902      	bls.n	8005e86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d13d      	bne.n	8005f02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e9e:	d111      	bne.n	8005ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea8:	d004      	beq.n	8005eb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb2:	d107      	bne.n	8005ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ec2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ecc:	d10f      	bne.n	8005eee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005eec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e017      	b.n	8005f32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	bf0c      	ite	eq
 8005f22:	2301      	moveq	r3, #1
 8005f24:	2300      	movne	r3, #0
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d19b      	bne.n	8005e68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3720      	adds	r7, #32
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20000020 	.word	0x20000020

08005f40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f54:	d111      	bne.n	8005f7a <SPI_EndRxTransaction+0x3a>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f5e:	d004      	beq.n	8005f6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f68:	d107      	bne.n	8005f7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f82:	d12a      	bne.n	8005fda <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f8c:	d012      	beq.n	8005fb4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2200      	movs	r2, #0
 8005f96:	2180      	movs	r1, #128	; 0x80
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f7ff ff49 	bl	8005e30 <SPI_WaitFlagStateUntilTimeout>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d02d      	beq.n	8006000 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa8:	f043 0220 	orr.w	r2, r3, #32
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e026      	b.n	8006002 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f7ff ff36 	bl	8005e30 <SPI_WaitFlagStateUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d01a      	beq.n	8006000 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fce:	f043 0220 	orr.w	r2, r3, #32
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e013      	b.n	8006002 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f7ff ff23 	bl	8005e30 <SPI_WaitFlagStateUntilTimeout>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d007      	beq.n	8006000 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff4:	f043 0220 	orr.w	r2, r3, #32
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e000      	b.n	8006002 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
	...

0800600c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af02      	add	r7, sp, #8
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006018:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <SPI_EndRxTxTransaction+0x7c>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a1b      	ldr	r2, [pc, #108]	; (800608c <SPI_EndRxTxTransaction+0x80>)
 800601e:	fba2 2303 	umull	r2, r3, r2, r3
 8006022:	0d5b      	lsrs	r3, r3, #21
 8006024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006028:	fb02 f303 	mul.w	r3, r2, r3
 800602c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006036:	d112      	bne.n	800605e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2200      	movs	r2, #0
 8006040:	2180      	movs	r1, #128	; 0x80
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f7ff fef4 	bl	8005e30 <SPI_WaitFlagStateUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d016      	beq.n	800607c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006052:	f043 0220 	orr.w	r2, r3, #32
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e00f      	b.n	800607e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00a      	beq.n	800607a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	3b01      	subs	r3, #1
 8006068:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006074:	2b80      	cmp	r3, #128	; 0x80
 8006076:	d0f2      	beq.n	800605e <SPI_EndRxTxTransaction+0x52>
 8006078:	e000      	b.n	800607c <SPI_EndRxTxTransaction+0x70>
        break;
 800607a:	bf00      	nop
  }

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000020 	.word	0x20000020
 800608c:	165e9f81 	.word	0x165e9f81

08006090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e041      	b.n	8006126 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d106      	bne.n	80060bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7fd f868 	bl	800318c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3304      	adds	r3, #4
 80060cc:	4619      	mov	r1, r3
 80060ce:	4610      	mov	r0, r2
 80060d0:	f000 fbbc 	bl	800684c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b01      	cmp	r3, #1
 8006142:	d001      	beq.n	8006148 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e03c      	b.n	80061c2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a1e      	ldr	r2, [pc, #120]	; (80061d0 <HAL_TIM_Base_Start+0xa0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d018      	beq.n	800618c <HAL_TIM_Base_Start+0x5c>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006162:	d013      	beq.n	800618c <HAL_TIM_Base_Start+0x5c>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a1a      	ldr	r2, [pc, #104]	; (80061d4 <HAL_TIM_Base_Start+0xa4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00e      	beq.n	800618c <HAL_TIM_Base_Start+0x5c>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a19      	ldr	r2, [pc, #100]	; (80061d8 <HAL_TIM_Base_Start+0xa8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d009      	beq.n	800618c <HAL_TIM_Base_Start+0x5c>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a17      	ldr	r2, [pc, #92]	; (80061dc <HAL_TIM_Base_Start+0xac>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_TIM_Base_Start+0x5c>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a16      	ldr	r2, [pc, #88]	; (80061e0 <HAL_TIM_Base_Start+0xb0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d111      	bne.n	80061b0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b06      	cmp	r3, #6
 800619c:	d010      	beq.n	80061c0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f042 0201 	orr.w	r2, r2, #1
 80061ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ae:	e007      	b.n	80061c0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	40010000 	.word	0x40010000
 80061d4:	40000400 	.word	0x40000400
 80061d8:	40000800 	.word	0x40000800
 80061dc:	40000c00 	.word	0x40000c00
 80061e0:	40014000 	.word	0x40014000

080061e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e041      	b.n	800627a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d106      	bne.n	8006210 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7fd f816 	bl	800323c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3304      	adds	r3, #4
 8006220:	4619      	mov	r1, r3
 8006222:	4610      	mov	r0, r2
 8006224:	f000 fb12 	bl	800684c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e041      	b.n	8006318 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d106      	bne.n	80062ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7fc ff91 	bl	80031d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2202      	movs	r2, #2
 80062b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3304      	adds	r3, #4
 80062be:	4619      	mov	r1, r3
 80062c0:	4610      	mov	r0, r2
 80062c2:	f000 fac3 	bl	800684c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d109      	bne.n	8006344 <HAL_TIM_PWM_Start+0x24>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b01      	cmp	r3, #1
 800633a:	bf14      	ite	ne
 800633c:	2301      	movne	r3, #1
 800633e:	2300      	moveq	r3, #0
 8006340:	b2db      	uxtb	r3, r3
 8006342:	e022      	b.n	800638a <HAL_TIM_PWM_Start+0x6a>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b04      	cmp	r3, #4
 8006348:	d109      	bne.n	800635e <HAL_TIM_PWM_Start+0x3e>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b01      	cmp	r3, #1
 8006354:	bf14      	ite	ne
 8006356:	2301      	movne	r3, #1
 8006358:	2300      	moveq	r3, #0
 800635a:	b2db      	uxtb	r3, r3
 800635c:	e015      	b.n	800638a <HAL_TIM_PWM_Start+0x6a>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b08      	cmp	r3, #8
 8006362:	d109      	bne.n	8006378 <HAL_TIM_PWM_Start+0x58>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b01      	cmp	r3, #1
 800636e:	bf14      	ite	ne
 8006370:	2301      	movne	r3, #1
 8006372:	2300      	moveq	r3, #0
 8006374:	b2db      	uxtb	r3, r3
 8006376:	e008      	b.n	800638a <HAL_TIM_PWM_Start+0x6a>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b01      	cmp	r3, #1
 8006382:	bf14      	ite	ne
 8006384:	2301      	movne	r3, #1
 8006386:	2300      	moveq	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e068      	b.n	8006464 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d104      	bne.n	80063a2 <HAL_TIM_PWM_Start+0x82>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063a0:	e013      	b.n	80063ca <HAL_TIM_PWM_Start+0xaa>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d104      	bne.n	80063b2 <HAL_TIM_PWM_Start+0x92>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063b0:	e00b      	b.n	80063ca <HAL_TIM_PWM_Start+0xaa>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d104      	bne.n	80063c2 <HAL_TIM_PWM_Start+0xa2>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063c0:	e003      	b.n	80063ca <HAL_TIM_PWM_Start+0xaa>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2202      	movs	r2, #2
 80063c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2201      	movs	r2, #1
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fce0 	bl	8006d98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a23      	ldr	r2, [pc, #140]	; (800646c <HAL_TIM_PWM_Start+0x14c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d107      	bne.n	80063f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a1d      	ldr	r2, [pc, #116]	; (800646c <HAL_TIM_PWM_Start+0x14c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d018      	beq.n	800642e <HAL_TIM_PWM_Start+0x10e>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006404:	d013      	beq.n	800642e <HAL_TIM_PWM_Start+0x10e>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a19      	ldr	r2, [pc, #100]	; (8006470 <HAL_TIM_PWM_Start+0x150>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00e      	beq.n	800642e <HAL_TIM_PWM_Start+0x10e>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a17      	ldr	r2, [pc, #92]	; (8006474 <HAL_TIM_PWM_Start+0x154>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d009      	beq.n	800642e <HAL_TIM_PWM_Start+0x10e>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a16      	ldr	r2, [pc, #88]	; (8006478 <HAL_TIM_PWM_Start+0x158>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d004      	beq.n	800642e <HAL_TIM_PWM_Start+0x10e>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a14      	ldr	r2, [pc, #80]	; (800647c <HAL_TIM_PWM_Start+0x15c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d111      	bne.n	8006452 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b06      	cmp	r3, #6
 800643e:	d010      	beq.n	8006462 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0201 	orr.w	r2, r2, #1
 800644e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006450:	e007      	b.n	8006462 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f042 0201 	orr.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	40010000 	.word	0x40010000
 8006470:	40000400 	.word	0x40000400
 8006474:	40000800 	.word	0x40000800
 8006478:	40000c00 	.word	0x40000c00
 800647c:	40014000 	.word	0x40014000

08006480 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006496:	2b01      	cmp	r3, #1
 8006498:	d101      	bne.n	800649e <HAL_TIM_OC_ConfigChannel+0x1e>
 800649a:	2302      	movs	r3, #2
 800649c:	e048      	b.n	8006530 <HAL_TIM_OC_ConfigChannel+0xb0>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b0c      	cmp	r3, #12
 80064aa:	d839      	bhi.n	8006520 <HAL_TIM_OC_ConfigChannel+0xa0>
 80064ac:	a201      	add	r2, pc, #4	; (adr r2, 80064b4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80064ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b2:	bf00      	nop
 80064b4:	080064e9 	.word	0x080064e9
 80064b8:	08006521 	.word	0x08006521
 80064bc:	08006521 	.word	0x08006521
 80064c0:	08006521 	.word	0x08006521
 80064c4:	080064f7 	.word	0x080064f7
 80064c8:	08006521 	.word	0x08006521
 80064cc:	08006521 	.word	0x08006521
 80064d0:	08006521 	.word	0x08006521
 80064d4:	08006505 	.word	0x08006505
 80064d8:	08006521 	.word	0x08006521
 80064dc:	08006521 	.word	0x08006521
 80064e0:	08006521 	.word	0x08006521
 80064e4:	08006513 	.word	0x08006513
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 fa2c 	bl	800694c <TIM_OC1_SetConfig>
      break;
 80064f4:	e017      	b.n	8006526 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68b9      	ldr	r1, [r7, #8]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 fa8b 	bl	8006a18 <TIM_OC2_SetConfig>
      break;
 8006502:	e010      	b.n	8006526 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68b9      	ldr	r1, [r7, #8]
 800650a:	4618      	mov	r0, r3
 800650c:	f000 faf0 	bl	8006af0 <TIM_OC3_SetConfig>
      break;
 8006510:	e009      	b.n	8006526 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68b9      	ldr	r1, [r7, #8]
 8006518:	4618      	mov	r0, r3
 800651a:	f000 fb53 	bl	8006bc4 <TIM_OC4_SetConfig>
      break;
 800651e:	e002      	b.n	8006526 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	75fb      	strb	r3, [r7, #23]
      break;
 8006524:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800652e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800654e:	2b01      	cmp	r3, #1
 8006550:	d101      	bne.n	8006556 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006552:	2302      	movs	r3, #2
 8006554:	e0ae      	b.n	80066b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b0c      	cmp	r3, #12
 8006562:	f200 809f 	bhi.w	80066a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006566:	a201      	add	r2, pc, #4	; (adr r2, 800656c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656c:	080065a1 	.word	0x080065a1
 8006570:	080066a5 	.word	0x080066a5
 8006574:	080066a5 	.word	0x080066a5
 8006578:	080066a5 	.word	0x080066a5
 800657c:	080065e1 	.word	0x080065e1
 8006580:	080066a5 	.word	0x080066a5
 8006584:	080066a5 	.word	0x080066a5
 8006588:	080066a5 	.word	0x080066a5
 800658c:	08006623 	.word	0x08006623
 8006590:	080066a5 	.word	0x080066a5
 8006594:	080066a5 	.word	0x080066a5
 8006598:	080066a5 	.word	0x080066a5
 800659c:	08006663 	.word	0x08006663
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68b9      	ldr	r1, [r7, #8]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 f9d0 	bl	800694c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0208 	orr.w	r2, r2, #8
 80065ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0204 	bic.w	r2, r2, #4
 80065ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6999      	ldr	r1, [r3, #24]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	691a      	ldr	r2, [r3, #16]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	619a      	str	r2, [r3, #24]
      break;
 80065de:	e064      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fa16 	bl	8006a18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699a      	ldr	r2, [r3, #24]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800660a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6999      	ldr	r1, [r3, #24]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	021a      	lsls	r2, r3, #8
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	619a      	str	r2, [r3, #24]
      break;
 8006620:	e043      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fa61 	bl	8006af0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69da      	ldr	r2, [r3, #28]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0208 	orr.w	r2, r2, #8
 800663c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69da      	ldr	r2, [r3, #28]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0204 	bic.w	r2, r2, #4
 800664c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69d9      	ldr	r1, [r3, #28]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	691a      	ldr	r2, [r3, #16]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	61da      	str	r2, [r3, #28]
      break;
 8006660:	e023      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	4618      	mov	r0, r3
 800666a:	f000 faab 	bl	8006bc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	69da      	ldr	r2, [r3, #28]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800667c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	69da      	ldr	r2, [r3, #28]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	69d9      	ldr	r1, [r3, #28]
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	021a      	lsls	r2, r3, #8
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	61da      	str	r2, [r3, #28]
      break;
 80066a2:	e002      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	75fb      	strb	r3, [r7, #23]
      break;
 80066a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3718      	adds	r7, #24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d101      	bne.n	80066d8 <HAL_TIM_ConfigClockSource+0x1c>
 80066d4:	2302      	movs	r3, #2
 80066d6:	e0b4      	b.n	8006842 <HAL_TIM_ConfigClockSource+0x186>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006710:	d03e      	beq.n	8006790 <HAL_TIM_ConfigClockSource+0xd4>
 8006712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006716:	f200 8087 	bhi.w	8006828 <HAL_TIM_ConfigClockSource+0x16c>
 800671a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671e:	f000 8086 	beq.w	800682e <HAL_TIM_ConfigClockSource+0x172>
 8006722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006726:	d87f      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x16c>
 8006728:	2b70      	cmp	r3, #112	; 0x70
 800672a:	d01a      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0xa6>
 800672c:	2b70      	cmp	r3, #112	; 0x70
 800672e:	d87b      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x16c>
 8006730:	2b60      	cmp	r3, #96	; 0x60
 8006732:	d050      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0x11a>
 8006734:	2b60      	cmp	r3, #96	; 0x60
 8006736:	d877      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x16c>
 8006738:	2b50      	cmp	r3, #80	; 0x50
 800673a:	d03c      	beq.n	80067b6 <HAL_TIM_ConfigClockSource+0xfa>
 800673c:	2b50      	cmp	r3, #80	; 0x50
 800673e:	d873      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x16c>
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	d058      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0x13a>
 8006744:	2b40      	cmp	r3, #64	; 0x40
 8006746:	d86f      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x16c>
 8006748:	2b30      	cmp	r3, #48	; 0x30
 800674a:	d064      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x15a>
 800674c:	2b30      	cmp	r3, #48	; 0x30
 800674e:	d86b      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x16c>
 8006750:	2b20      	cmp	r3, #32
 8006752:	d060      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x15a>
 8006754:	2b20      	cmp	r3, #32
 8006756:	d867      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x16c>
 8006758:	2b00      	cmp	r3, #0
 800675a:	d05c      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x15a>
 800675c:	2b10      	cmp	r3, #16
 800675e:	d05a      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x15a>
 8006760:	e062      	b.n	8006828 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6818      	ldr	r0, [r3, #0]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	6899      	ldr	r1, [r3, #8]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f000 faf1 	bl	8006d58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006784:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	609a      	str	r2, [r3, #8]
      break;
 800678e:	e04f      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	6899      	ldr	r1, [r3, #8]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f000 fada 	bl	8006d58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689a      	ldr	r2, [r3, #8]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067b2:	609a      	str	r2, [r3, #8]
      break;
 80067b4:	e03c      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6818      	ldr	r0, [r3, #0]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	6859      	ldr	r1, [r3, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	461a      	mov	r2, r3
 80067c4:	f000 fa4e 	bl	8006c64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2150      	movs	r1, #80	; 0x50
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 faa7 	bl	8006d22 <TIM_ITRx_SetConfig>
      break;
 80067d4:	e02c      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6818      	ldr	r0, [r3, #0]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	6859      	ldr	r1, [r3, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	461a      	mov	r2, r3
 80067e4:	f000 fa6d 	bl	8006cc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2160      	movs	r1, #96	; 0x60
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fa97 	bl	8006d22 <TIM_ITRx_SetConfig>
      break;
 80067f4:	e01c      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	6859      	ldr	r1, [r3, #4]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	461a      	mov	r2, r3
 8006804:	f000 fa2e 	bl	8006c64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2140      	movs	r1, #64	; 0x40
 800680e:	4618      	mov	r0, r3
 8006810:	f000 fa87 	bl	8006d22 <TIM_ITRx_SetConfig>
      break;
 8006814:	e00c      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4619      	mov	r1, r3
 8006820:	4610      	mov	r0, r2
 8006822:	f000 fa7e 	bl	8006d22 <TIM_ITRx_SetConfig>
      break;
 8006826:	e003      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	73fb      	strb	r3, [r7, #15]
      break;
 800682c:	e000      	b.n	8006830 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800682e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006840:	7bfb      	ldrb	r3, [r7, #15]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a34      	ldr	r2, [pc, #208]	; (8006930 <TIM_Base_SetConfig+0xe4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d00f      	beq.n	8006884 <TIM_Base_SetConfig+0x38>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686a:	d00b      	beq.n	8006884 <TIM_Base_SetConfig+0x38>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a31      	ldr	r2, [pc, #196]	; (8006934 <TIM_Base_SetConfig+0xe8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d007      	beq.n	8006884 <TIM_Base_SetConfig+0x38>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a30      	ldr	r2, [pc, #192]	; (8006938 <TIM_Base_SetConfig+0xec>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d003      	beq.n	8006884 <TIM_Base_SetConfig+0x38>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a2f      	ldr	r2, [pc, #188]	; (800693c <TIM_Base_SetConfig+0xf0>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d108      	bne.n	8006896 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a25      	ldr	r2, [pc, #148]	; (8006930 <TIM_Base_SetConfig+0xe4>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d01b      	beq.n	80068d6 <TIM_Base_SetConfig+0x8a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a4:	d017      	beq.n	80068d6 <TIM_Base_SetConfig+0x8a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a22      	ldr	r2, [pc, #136]	; (8006934 <TIM_Base_SetConfig+0xe8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d013      	beq.n	80068d6 <TIM_Base_SetConfig+0x8a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a21      	ldr	r2, [pc, #132]	; (8006938 <TIM_Base_SetConfig+0xec>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00f      	beq.n	80068d6 <TIM_Base_SetConfig+0x8a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a20      	ldr	r2, [pc, #128]	; (800693c <TIM_Base_SetConfig+0xf0>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00b      	beq.n	80068d6 <TIM_Base_SetConfig+0x8a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a1f      	ldr	r2, [pc, #124]	; (8006940 <TIM_Base_SetConfig+0xf4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d007      	beq.n	80068d6 <TIM_Base_SetConfig+0x8a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a1e      	ldr	r2, [pc, #120]	; (8006944 <TIM_Base_SetConfig+0xf8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d003      	beq.n	80068d6 <TIM_Base_SetConfig+0x8a>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a1d      	ldr	r2, [pc, #116]	; (8006948 <TIM_Base_SetConfig+0xfc>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d108      	bne.n	80068e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a08      	ldr	r2, [pc, #32]	; (8006930 <TIM_Base_SetConfig+0xe4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d103      	bne.n	800691c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	691a      	ldr	r2, [r3, #16]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	615a      	str	r2, [r3, #20]
}
 8006922:	bf00      	nop
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	40010000 	.word	0x40010000
 8006934:	40000400 	.word	0x40000400
 8006938:	40000800 	.word	0x40000800
 800693c:	40000c00 	.word	0x40000c00
 8006940:	40014000 	.word	0x40014000
 8006944:	40014400 	.word	0x40014400
 8006948:	40014800 	.word	0x40014800

0800694c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	f023 0201 	bic.w	r2, r3, #1
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0303 	bic.w	r3, r3, #3
 8006982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f023 0302 	bic.w	r3, r3, #2
 8006994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a1c      	ldr	r2, [pc, #112]	; (8006a14 <TIM_OC1_SetConfig+0xc8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d10c      	bne.n	80069c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f023 0308 	bic.w	r3, r3, #8
 80069ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f023 0304 	bic.w	r3, r3, #4
 80069c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a13      	ldr	r2, [pc, #76]	; (8006a14 <TIM_OC1_SetConfig+0xc8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d111      	bne.n	80069ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	621a      	str	r2, [r3, #32]
}
 8006a08:	bf00      	nop
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	40010000 	.word	0x40010000

08006a18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	f023 0210 	bic.w	r2, r3, #16
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	021b      	lsls	r3, r3, #8
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f023 0320 	bic.w	r3, r3, #32
 8006a62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	011b      	lsls	r3, r3, #4
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a1e      	ldr	r2, [pc, #120]	; (8006aec <TIM_OC2_SetConfig+0xd4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d10d      	bne.n	8006a94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a15      	ldr	r2, [pc, #84]	; (8006aec <TIM_OC2_SetConfig+0xd4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d113      	bne.n	8006ac4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006aa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	621a      	str	r2, [r3, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	40010000 	.word	0x40010000

08006af0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0303 	bic.w	r3, r3, #3
 8006b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a1d      	ldr	r2, [pc, #116]	; (8006bc0 <TIM_OC3_SetConfig+0xd0>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d10d      	bne.n	8006b6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	021b      	lsls	r3, r3, #8
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a14      	ldr	r2, [pc, #80]	; (8006bc0 <TIM_OC3_SetConfig+0xd0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d113      	bne.n	8006b9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	621a      	str	r2, [r3, #32]
}
 8006bb4:	bf00      	nop
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	40010000 	.word	0x40010000

08006bc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	021b      	lsls	r3, r3, #8
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	031b      	lsls	r3, r3, #12
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a10      	ldr	r2, [pc, #64]	; (8006c60 <TIM_OC4_SetConfig+0x9c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d109      	bne.n	8006c38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	019b      	lsls	r3, r3, #6
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	621a      	str	r2, [r3, #32]
}
 8006c52:	bf00      	nop
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40010000 	.word	0x40010000

08006c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	f023 0201 	bic.w	r2, r3, #1
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	011b      	lsls	r3, r3, #4
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f023 030a 	bic.w	r3, r3, #10
 8006ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b087      	sub	sp, #28
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	60b9      	str	r1, [r7, #8]
 8006ccc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	f023 0210 	bic.w	r2, r3, #16
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	031b      	lsls	r3, r3, #12
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	011b      	lsls	r3, r3, #4
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	621a      	str	r2, [r3, #32]
}
 8006d16:	bf00      	nop
 8006d18:	371c      	adds	r7, #28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b085      	sub	sp, #20
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f043 0307 	orr.w	r3, r3, #7
 8006d44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	609a      	str	r2, [r3, #8]
}
 8006d4c:	bf00      	nop
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	021a      	lsls	r2, r3, #8
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	609a      	str	r2, [r3, #8]
}
 8006d8c:	bf00      	nop
 8006d8e:	371c      	adds	r7, #28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f003 031f 	and.w	r3, r3, #31
 8006daa:	2201      	movs	r2, #1
 8006dac:	fa02 f303 	lsl.w	r3, r2, r3
 8006db0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a1a      	ldr	r2, [r3, #32]
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	43db      	mvns	r3, r3
 8006dba:	401a      	ands	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6a1a      	ldr	r2, [r3, #32]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	f003 031f 	and.w	r3, r3, #31
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	621a      	str	r2, [r3, #32]
}
 8006dd6:	bf00      	nop
 8006dd8:	371c      	adds	r7, #28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
	...

08006de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d101      	bne.n	8006dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	e050      	b.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a1c      	ldr	r2, [pc, #112]	; (8006eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d018      	beq.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e48:	d013      	beq.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a18      	ldr	r2, [pc, #96]	; (8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d00e      	beq.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a16      	ldr	r2, [pc, #88]	; (8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d009      	beq.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a15      	ldr	r2, [pc, #84]	; (8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d004      	beq.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a13      	ldr	r2, [pc, #76]	; (8006ebc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d10c      	bne.n	8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	40010000 	.word	0x40010000
 8006eb0:	40000400 	.word	0x40000400
 8006eb4:	40000800 	.word	0x40000800
 8006eb8:	40000c00 	.word	0x40000c00
 8006ebc:	40014000 	.word	0x40014000

08006ec0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d101      	bne.n	8006edc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ed8:	2302      	movs	r3, #2
 8006eda:	e03d      	b.n	8006f58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e047      	b.n	8007006 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d106      	bne.n	8006f90 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7fc fa22 	bl	80033d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2224      	movs	r2, #36	; 0x24
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f931 	bl	8007210 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	691a      	ldr	r2, [r3, #16]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	695a      	ldr	r2, [r3, #20]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8006fcc:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	695a      	ldr	r2, [r3, #20]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f042 0208 	orr.w	r2, r2, #8
 8006fdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68da      	ldr	r2, [r3, #12]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b08a      	sub	sp, #40	; 0x28
 8007012:	af02      	add	r7, sp, #8
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	603b      	str	r3, [r7, #0]
 800701a:	4613      	mov	r3, r2
 800701c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b20      	cmp	r3, #32
 800702c:	d17c      	bne.n	8007128 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <HAL_UART_Transmit+0x2c>
 8007034:	88fb      	ldrh	r3, [r7, #6]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e075      	b.n	800712a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007044:	2b01      	cmp	r3, #1
 8007046:	d101      	bne.n	800704c <HAL_UART_Transmit+0x3e>
 8007048:	2302      	movs	r3, #2
 800704a:	e06e      	b.n	800712a <HAL_UART_Transmit+0x11c>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2221      	movs	r2, #33	; 0x21
 800705e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007062:	f7fc fb9b 	bl	800379c <HAL_GetTick>
 8007066:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	88fa      	ldrh	r2, [r7, #6]
 800706c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	88fa      	ldrh	r2, [r7, #6]
 8007072:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800707c:	d108      	bne.n	8007090 <HAL_UART_Transmit+0x82>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d104      	bne.n	8007090 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007086:	2300      	movs	r3, #0
 8007088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	61bb      	str	r3, [r7, #24]
 800708e:	e003      	b.n	8007098 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007094:	2300      	movs	r3, #0
 8007096:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80070a0:	e02a      	b.n	80070f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2200      	movs	r2, #0
 80070aa:	2180      	movs	r1, #128	; 0x80
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 f840 	bl	8007132 <UART_WaitOnFlagUntilTimeout>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e036      	b.n	800712a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10b      	bne.n	80070da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	3302      	adds	r3, #2
 80070d6:	61bb      	str	r3, [r7, #24]
 80070d8:	e007      	b.n	80070ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	781a      	ldrb	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	3301      	adds	r3, #1
 80070e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	3b01      	subs	r3, #1
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1cf      	bne.n	80070a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2200      	movs	r2, #0
 800710a:	2140      	movs	r1, #64	; 0x40
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 f810 	bl	8007132 <UART_WaitOnFlagUntilTimeout>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e006      	b.n	800712a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2220      	movs	r2, #32
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	e000      	b.n	800712a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007128:	2302      	movs	r3, #2
  }
}
 800712a:	4618      	mov	r0, r3
 800712c:	3720      	adds	r7, #32
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b090      	sub	sp, #64	; 0x40
 8007136:	af00      	add	r7, sp, #0
 8007138:	60f8      	str	r0, [r7, #12]
 800713a:	60b9      	str	r1, [r7, #8]
 800713c:	603b      	str	r3, [r7, #0]
 800713e:	4613      	mov	r3, r2
 8007140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007142:	e050      	b.n	80071e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800714a:	d04c      	beq.n	80071e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800714c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800714e:	2b00      	cmp	r3, #0
 8007150:	d007      	beq.n	8007162 <UART_WaitOnFlagUntilTimeout+0x30>
 8007152:	f7fc fb23 	bl	800379c <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800715e:	429a      	cmp	r2, r3
 8007160:	d241      	bcs.n	80071e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	330c      	adds	r3, #12
 8007168:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007174:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	330c      	adds	r3, #12
 8007180:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007182:	637a      	str	r2, [r7, #52]	; 0x34
 8007184:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007186:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800718a:	e841 2300 	strex	r3, r2, [r1]
 800718e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e5      	bne.n	8007162 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3314      	adds	r3, #20
 800719c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	613b      	str	r3, [r7, #16]
   return(result);
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f023 0301 	bic.w	r3, r3, #1
 80071ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3314      	adds	r3, #20
 80071b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071b6:	623a      	str	r2, [r7, #32]
 80071b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ba:	69f9      	ldr	r1, [r7, #28]
 80071bc:	6a3a      	ldr	r2, [r7, #32]
 80071be:	e841 2300 	strex	r3, r2, [r1]
 80071c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e5      	bne.n	8007196 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2220      	movs	r2, #32
 80071ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e00f      	b.n	8007206 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	4013      	ands	r3, r2
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	bf0c      	ite	eq
 80071f6:	2301      	moveq	r3, #1
 80071f8:	2300      	movne	r3, #0
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	461a      	mov	r2, r3
 80071fe:	79fb      	ldrb	r3, [r7, #7]
 8007200:	429a      	cmp	r2, r3
 8007202:	d09f      	beq.n	8007144 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3740      	adds	r7, #64	; 0x40
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007214:	b09f      	sub	sp, #124	; 0x7c
 8007216:	af00      	add	r7, sp, #0
 8007218:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800721a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007226:	68d9      	ldr	r1, [r3, #12]
 8007228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	ea40 0301 	orr.w	r3, r0, r1
 8007230:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007234:	689a      	ldr	r2, [r3, #8]
 8007236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	431a      	orrs	r2, r3
 800723c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	431a      	orrs	r2, r3
 8007242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	4313      	orrs	r3, r2
 8007248:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800724a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007254:	f021 010c 	bic.w	r1, r1, #12
 8007258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800725e:	430b      	orrs	r3, r1
 8007260:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800726c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800726e:	6999      	ldr	r1, [r3, #24]
 8007270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	ea40 0301 	orr.w	r3, r0, r1
 8007278:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800727a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	4bc5      	ldr	r3, [pc, #788]	; (8007594 <UART_SetConfig+0x384>)
 8007280:	429a      	cmp	r2, r3
 8007282:	d004      	beq.n	800728e <UART_SetConfig+0x7e>
 8007284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	4bc3      	ldr	r3, [pc, #780]	; (8007598 <UART_SetConfig+0x388>)
 800728a:	429a      	cmp	r2, r3
 800728c:	d103      	bne.n	8007296 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800728e:	f7fe f935 	bl	80054fc <HAL_RCC_GetPCLK2Freq>
 8007292:	6778      	str	r0, [r7, #116]	; 0x74
 8007294:	e002      	b.n	800729c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007296:	f7fe f91d 	bl	80054d4 <HAL_RCC_GetPCLK1Freq>
 800729a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800729c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a4:	f040 80b6 	bne.w	8007414 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072aa:	461c      	mov	r4, r3
 80072ac:	f04f 0500 	mov.w	r5, #0
 80072b0:	4622      	mov	r2, r4
 80072b2:	462b      	mov	r3, r5
 80072b4:	1891      	adds	r1, r2, r2
 80072b6:	6439      	str	r1, [r7, #64]	; 0x40
 80072b8:	415b      	adcs	r3, r3
 80072ba:	647b      	str	r3, [r7, #68]	; 0x44
 80072bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072c0:	1912      	adds	r2, r2, r4
 80072c2:	eb45 0303 	adc.w	r3, r5, r3
 80072c6:	f04f 0000 	mov.w	r0, #0
 80072ca:	f04f 0100 	mov.w	r1, #0
 80072ce:	00d9      	lsls	r1, r3, #3
 80072d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072d4:	00d0      	lsls	r0, r2, #3
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	1911      	adds	r1, r2, r4
 80072dc:	6639      	str	r1, [r7, #96]	; 0x60
 80072de:	416b      	adcs	r3, r5
 80072e0:	667b      	str	r3, [r7, #100]	; 0x64
 80072e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	461a      	mov	r2, r3
 80072e8:	f04f 0300 	mov.w	r3, #0
 80072ec:	1891      	adds	r1, r2, r2
 80072ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80072f0:	415b      	adcs	r3, r3
 80072f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80072f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80072fc:	f7f9 fcac 	bl	8000c58 <__aeabi_uldivmod>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	4ba5      	ldr	r3, [pc, #660]	; (800759c <UART_SetConfig+0x38c>)
 8007306:	fba3 2302 	umull	r2, r3, r3, r2
 800730a:	095b      	lsrs	r3, r3, #5
 800730c:	011e      	lsls	r6, r3, #4
 800730e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007310:	461c      	mov	r4, r3
 8007312:	f04f 0500 	mov.w	r5, #0
 8007316:	4622      	mov	r2, r4
 8007318:	462b      	mov	r3, r5
 800731a:	1891      	adds	r1, r2, r2
 800731c:	6339      	str	r1, [r7, #48]	; 0x30
 800731e:	415b      	adcs	r3, r3
 8007320:	637b      	str	r3, [r7, #52]	; 0x34
 8007322:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007326:	1912      	adds	r2, r2, r4
 8007328:	eb45 0303 	adc.w	r3, r5, r3
 800732c:	f04f 0000 	mov.w	r0, #0
 8007330:	f04f 0100 	mov.w	r1, #0
 8007334:	00d9      	lsls	r1, r3, #3
 8007336:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800733a:	00d0      	lsls	r0, r2, #3
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	1911      	adds	r1, r2, r4
 8007342:	65b9      	str	r1, [r7, #88]	; 0x58
 8007344:	416b      	adcs	r3, r5
 8007346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	461a      	mov	r2, r3
 800734e:	f04f 0300 	mov.w	r3, #0
 8007352:	1891      	adds	r1, r2, r2
 8007354:	62b9      	str	r1, [r7, #40]	; 0x28
 8007356:	415b      	adcs	r3, r3
 8007358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800735a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800735e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007362:	f7f9 fc79 	bl	8000c58 <__aeabi_uldivmod>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	4b8c      	ldr	r3, [pc, #560]	; (800759c <UART_SetConfig+0x38c>)
 800736c:	fba3 1302 	umull	r1, r3, r3, r2
 8007370:	095b      	lsrs	r3, r3, #5
 8007372:	2164      	movs	r1, #100	; 0x64
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	3332      	adds	r3, #50	; 0x32
 800737e:	4a87      	ldr	r2, [pc, #540]	; (800759c <UART_SetConfig+0x38c>)
 8007380:	fba2 2303 	umull	r2, r3, r2, r3
 8007384:	095b      	lsrs	r3, r3, #5
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800738c:	441e      	add	r6, r3
 800738e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007390:	4618      	mov	r0, r3
 8007392:	f04f 0100 	mov.w	r1, #0
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	1894      	adds	r4, r2, r2
 800739c:	623c      	str	r4, [r7, #32]
 800739e:	415b      	adcs	r3, r3
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
 80073a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073a6:	1812      	adds	r2, r2, r0
 80073a8:	eb41 0303 	adc.w	r3, r1, r3
 80073ac:	f04f 0400 	mov.w	r4, #0
 80073b0:	f04f 0500 	mov.w	r5, #0
 80073b4:	00dd      	lsls	r5, r3, #3
 80073b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073ba:	00d4      	lsls	r4, r2, #3
 80073bc:	4622      	mov	r2, r4
 80073be:	462b      	mov	r3, r5
 80073c0:	1814      	adds	r4, r2, r0
 80073c2:	653c      	str	r4, [r7, #80]	; 0x50
 80073c4:	414b      	adcs	r3, r1
 80073c6:	657b      	str	r3, [r7, #84]	; 0x54
 80073c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	461a      	mov	r2, r3
 80073ce:	f04f 0300 	mov.w	r3, #0
 80073d2:	1891      	adds	r1, r2, r2
 80073d4:	61b9      	str	r1, [r7, #24]
 80073d6:	415b      	adcs	r3, r3
 80073d8:	61fb      	str	r3, [r7, #28]
 80073da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80073e2:	f7f9 fc39 	bl	8000c58 <__aeabi_uldivmod>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4b6c      	ldr	r3, [pc, #432]	; (800759c <UART_SetConfig+0x38c>)
 80073ec:	fba3 1302 	umull	r1, r3, r3, r2
 80073f0:	095b      	lsrs	r3, r3, #5
 80073f2:	2164      	movs	r1, #100	; 0x64
 80073f4:	fb01 f303 	mul.w	r3, r1, r3
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	00db      	lsls	r3, r3, #3
 80073fc:	3332      	adds	r3, #50	; 0x32
 80073fe:	4a67      	ldr	r2, [pc, #412]	; (800759c <UART_SetConfig+0x38c>)
 8007400:	fba2 2303 	umull	r2, r3, r2, r3
 8007404:	095b      	lsrs	r3, r3, #5
 8007406:	f003 0207 	and.w	r2, r3, #7
 800740a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4432      	add	r2, r6
 8007410:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007412:	e0b9      	b.n	8007588 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007416:	461c      	mov	r4, r3
 8007418:	f04f 0500 	mov.w	r5, #0
 800741c:	4622      	mov	r2, r4
 800741e:	462b      	mov	r3, r5
 8007420:	1891      	adds	r1, r2, r2
 8007422:	6139      	str	r1, [r7, #16]
 8007424:	415b      	adcs	r3, r3
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800742c:	1912      	adds	r2, r2, r4
 800742e:	eb45 0303 	adc.w	r3, r5, r3
 8007432:	f04f 0000 	mov.w	r0, #0
 8007436:	f04f 0100 	mov.w	r1, #0
 800743a:	00d9      	lsls	r1, r3, #3
 800743c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007440:	00d0      	lsls	r0, r2, #3
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	eb12 0804 	adds.w	r8, r2, r4
 800744a:	eb43 0905 	adc.w	r9, r3, r5
 800744e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	4618      	mov	r0, r3
 8007454:	f04f 0100 	mov.w	r1, #0
 8007458:	f04f 0200 	mov.w	r2, #0
 800745c:	f04f 0300 	mov.w	r3, #0
 8007460:	008b      	lsls	r3, r1, #2
 8007462:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007466:	0082      	lsls	r2, r0, #2
 8007468:	4640      	mov	r0, r8
 800746a:	4649      	mov	r1, r9
 800746c:	f7f9 fbf4 	bl	8000c58 <__aeabi_uldivmod>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4b49      	ldr	r3, [pc, #292]	; (800759c <UART_SetConfig+0x38c>)
 8007476:	fba3 2302 	umull	r2, r3, r3, r2
 800747a:	095b      	lsrs	r3, r3, #5
 800747c:	011e      	lsls	r6, r3, #4
 800747e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007480:	4618      	mov	r0, r3
 8007482:	f04f 0100 	mov.w	r1, #0
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	1894      	adds	r4, r2, r2
 800748c:	60bc      	str	r4, [r7, #8]
 800748e:	415b      	adcs	r3, r3
 8007490:	60fb      	str	r3, [r7, #12]
 8007492:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007496:	1812      	adds	r2, r2, r0
 8007498:	eb41 0303 	adc.w	r3, r1, r3
 800749c:	f04f 0400 	mov.w	r4, #0
 80074a0:	f04f 0500 	mov.w	r5, #0
 80074a4:	00dd      	lsls	r5, r3, #3
 80074a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074aa:	00d4      	lsls	r4, r2, #3
 80074ac:	4622      	mov	r2, r4
 80074ae:	462b      	mov	r3, r5
 80074b0:	1814      	adds	r4, r2, r0
 80074b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80074b4:	414b      	adcs	r3, r1
 80074b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	4618      	mov	r0, r3
 80074be:	f04f 0100 	mov.w	r1, #0
 80074c2:	f04f 0200 	mov.w	r2, #0
 80074c6:	f04f 0300 	mov.w	r3, #0
 80074ca:	008b      	lsls	r3, r1, #2
 80074cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80074d0:	0082      	lsls	r2, r0, #2
 80074d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80074d6:	f7f9 fbbf 	bl	8000c58 <__aeabi_uldivmod>
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	4b2f      	ldr	r3, [pc, #188]	; (800759c <UART_SetConfig+0x38c>)
 80074e0:	fba3 1302 	umull	r1, r3, r3, r2
 80074e4:	095b      	lsrs	r3, r3, #5
 80074e6:	2164      	movs	r1, #100	; 0x64
 80074e8:	fb01 f303 	mul.w	r3, r1, r3
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	011b      	lsls	r3, r3, #4
 80074f0:	3332      	adds	r3, #50	; 0x32
 80074f2:	4a2a      	ldr	r2, [pc, #168]	; (800759c <UART_SetConfig+0x38c>)
 80074f4:	fba2 2303 	umull	r2, r3, r2, r3
 80074f8:	095b      	lsrs	r3, r3, #5
 80074fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074fe:	441e      	add	r6, r3
 8007500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007502:	4618      	mov	r0, r3
 8007504:	f04f 0100 	mov.w	r1, #0
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	1894      	adds	r4, r2, r2
 800750e:	603c      	str	r4, [r7, #0]
 8007510:	415b      	adcs	r3, r3
 8007512:	607b      	str	r3, [r7, #4]
 8007514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007518:	1812      	adds	r2, r2, r0
 800751a:	eb41 0303 	adc.w	r3, r1, r3
 800751e:	f04f 0400 	mov.w	r4, #0
 8007522:	f04f 0500 	mov.w	r5, #0
 8007526:	00dd      	lsls	r5, r3, #3
 8007528:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800752c:	00d4      	lsls	r4, r2, #3
 800752e:	4622      	mov	r2, r4
 8007530:	462b      	mov	r3, r5
 8007532:	eb12 0a00 	adds.w	sl, r2, r0
 8007536:	eb43 0b01 	adc.w	fp, r3, r1
 800753a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	4618      	mov	r0, r3
 8007540:	f04f 0100 	mov.w	r1, #0
 8007544:	f04f 0200 	mov.w	r2, #0
 8007548:	f04f 0300 	mov.w	r3, #0
 800754c:	008b      	lsls	r3, r1, #2
 800754e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007552:	0082      	lsls	r2, r0, #2
 8007554:	4650      	mov	r0, sl
 8007556:	4659      	mov	r1, fp
 8007558:	f7f9 fb7e 	bl	8000c58 <__aeabi_uldivmod>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	4b0e      	ldr	r3, [pc, #56]	; (800759c <UART_SetConfig+0x38c>)
 8007562:	fba3 1302 	umull	r1, r3, r3, r2
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	2164      	movs	r1, #100	; 0x64
 800756a:	fb01 f303 	mul.w	r3, r1, r3
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	011b      	lsls	r3, r3, #4
 8007572:	3332      	adds	r3, #50	; 0x32
 8007574:	4a09      	ldr	r2, [pc, #36]	; (800759c <UART_SetConfig+0x38c>)
 8007576:	fba2 2303 	umull	r2, r3, r2, r3
 800757a:	095b      	lsrs	r3, r3, #5
 800757c:	f003 020f 	and.w	r2, r3, #15
 8007580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4432      	add	r2, r6
 8007586:	609a      	str	r2, [r3, #8]
}
 8007588:	bf00      	nop
 800758a:	377c      	adds	r7, #124	; 0x7c
 800758c:	46bd      	mov	sp, r7
 800758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007592:	bf00      	nop
 8007594:	40011000 	.word	0x40011000
 8007598:	40011400 	.word	0x40011400
 800759c:	51eb851f 	.word	0x51eb851f

080075a0 <__errno>:
 80075a0:	4b01      	ldr	r3, [pc, #4]	; (80075a8 <__errno+0x8>)
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	2000002c 	.word	0x2000002c

080075ac <__libc_init_array>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	4d0d      	ldr	r5, [pc, #52]	; (80075e4 <__libc_init_array+0x38>)
 80075b0:	4c0d      	ldr	r4, [pc, #52]	; (80075e8 <__libc_init_array+0x3c>)
 80075b2:	1b64      	subs	r4, r4, r5
 80075b4:	10a4      	asrs	r4, r4, #2
 80075b6:	2600      	movs	r6, #0
 80075b8:	42a6      	cmp	r6, r4
 80075ba:	d109      	bne.n	80075d0 <__libc_init_array+0x24>
 80075bc:	4d0b      	ldr	r5, [pc, #44]	; (80075ec <__libc_init_array+0x40>)
 80075be:	4c0c      	ldr	r4, [pc, #48]	; (80075f0 <__libc_init_array+0x44>)
 80075c0:	f004 fbe4 	bl	800bd8c <_init>
 80075c4:	1b64      	subs	r4, r4, r5
 80075c6:	10a4      	asrs	r4, r4, #2
 80075c8:	2600      	movs	r6, #0
 80075ca:	42a6      	cmp	r6, r4
 80075cc:	d105      	bne.n	80075da <__libc_init_array+0x2e>
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d4:	4798      	blx	r3
 80075d6:	3601      	adds	r6, #1
 80075d8:	e7ee      	b.n	80075b8 <__libc_init_array+0xc>
 80075da:	f855 3b04 	ldr.w	r3, [r5], #4
 80075de:	4798      	blx	r3
 80075e0:	3601      	adds	r6, #1
 80075e2:	e7f2      	b.n	80075ca <__libc_init_array+0x1e>
 80075e4:	0800c430 	.word	0x0800c430
 80075e8:	0800c430 	.word	0x0800c430
 80075ec:	0800c430 	.word	0x0800c430
 80075f0:	0800c434 	.word	0x0800c434

080075f4 <memset>:
 80075f4:	4402      	add	r2, r0
 80075f6:	4603      	mov	r3, r0
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d100      	bne.n	80075fe <memset+0xa>
 80075fc:	4770      	bx	lr
 80075fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007602:	e7f9      	b.n	80075f8 <memset+0x4>

08007604 <__cvt>:
 8007604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007608:	ec55 4b10 	vmov	r4, r5, d0
 800760c:	2d00      	cmp	r5, #0
 800760e:	460e      	mov	r6, r1
 8007610:	4619      	mov	r1, r3
 8007612:	462b      	mov	r3, r5
 8007614:	bfbb      	ittet	lt
 8007616:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800761a:	461d      	movlt	r5, r3
 800761c:	2300      	movge	r3, #0
 800761e:	232d      	movlt	r3, #45	; 0x2d
 8007620:	700b      	strb	r3, [r1, #0]
 8007622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007624:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007628:	4691      	mov	r9, r2
 800762a:	f023 0820 	bic.w	r8, r3, #32
 800762e:	bfbc      	itt	lt
 8007630:	4622      	movlt	r2, r4
 8007632:	4614      	movlt	r4, r2
 8007634:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007638:	d005      	beq.n	8007646 <__cvt+0x42>
 800763a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800763e:	d100      	bne.n	8007642 <__cvt+0x3e>
 8007640:	3601      	adds	r6, #1
 8007642:	2102      	movs	r1, #2
 8007644:	e000      	b.n	8007648 <__cvt+0x44>
 8007646:	2103      	movs	r1, #3
 8007648:	ab03      	add	r3, sp, #12
 800764a:	9301      	str	r3, [sp, #4]
 800764c:	ab02      	add	r3, sp, #8
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	ec45 4b10 	vmov	d0, r4, r5
 8007654:	4653      	mov	r3, sl
 8007656:	4632      	mov	r2, r6
 8007658:	f000 fcea 	bl	8008030 <_dtoa_r>
 800765c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007660:	4607      	mov	r7, r0
 8007662:	d102      	bne.n	800766a <__cvt+0x66>
 8007664:	f019 0f01 	tst.w	r9, #1
 8007668:	d022      	beq.n	80076b0 <__cvt+0xac>
 800766a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800766e:	eb07 0906 	add.w	r9, r7, r6
 8007672:	d110      	bne.n	8007696 <__cvt+0x92>
 8007674:	783b      	ldrb	r3, [r7, #0]
 8007676:	2b30      	cmp	r3, #48	; 0x30
 8007678:	d10a      	bne.n	8007690 <__cvt+0x8c>
 800767a:	2200      	movs	r2, #0
 800767c:	2300      	movs	r3, #0
 800767e:	4620      	mov	r0, r4
 8007680:	4629      	mov	r1, r5
 8007682:	f7f9 fa29 	bl	8000ad8 <__aeabi_dcmpeq>
 8007686:	b918      	cbnz	r0, 8007690 <__cvt+0x8c>
 8007688:	f1c6 0601 	rsb	r6, r6, #1
 800768c:	f8ca 6000 	str.w	r6, [sl]
 8007690:	f8da 3000 	ldr.w	r3, [sl]
 8007694:	4499      	add	r9, r3
 8007696:	2200      	movs	r2, #0
 8007698:	2300      	movs	r3, #0
 800769a:	4620      	mov	r0, r4
 800769c:	4629      	mov	r1, r5
 800769e:	f7f9 fa1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80076a2:	b108      	cbz	r0, 80076a8 <__cvt+0xa4>
 80076a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80076a8:	2230      	movs	r2, #48	; 0x30
 80076aa:	9b03      	ldr	r3, [sp, #12]
 80076ac:	454b      	cmp	r3, r9
 80076ae:	d307      	bcc.n	80076c0 <__cvt+0xbc>
 80076b0:	9b03      	ldr	r3, [sp, #12]
 80076b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076b4:	1bdb      	subs	r3, r3, r7
 80076b6:	4638      	mov	r0, r7
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	b004      	add	sp, #16
 80076bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c0:	1c59      	adds	r1, r3, #1
 80076c2:	9103      	str	r1, [sp, #12]
 80076c4:	701a      	strb	r2, [r3, #0]
 80076c6:	e7f0      	b.n	80076aa <__cvt+0xa6>

080076c8 <__exponent>:
 80076c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076ca:	4603      	mov	r3, r0
 80076cc:	2900      	cmp	r1, #0
 80076ce:	bfb8      	it	lt
 80076d0:	4249      	neglt	r1, r1
 80076d2:	f803 2b02 	strb.w	r2, [r3], #2
 80076d6:	bfb4      	ite	lt
 80076d8:	222d      	movlt	r2, #45	; 0x2d
 80076da:	222b      	movge	r2, #43	; 0x2b
 80076dc:	2909      	cmp	r1, #9
 80076de:	7042      	strb	r2, [r0, #1]
 80076e0:	dd2a      	ble.n	8007738 <__exponent+0x70>
 80076e2:	f10d 0407 	add.w	r4, sp, #7
 80076e6:	46a4      	mov	ip, r4
 80076e8:	270a      	movs	r7, #10
 80076ea:	46a6      	mov	lr, r4
 80076ec:	460a      	mov	r2, r1
 80076ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80076f2:	fb07 1516 	mls	r5, r7, r6, r1
 80076f6:	3530      	adds	r5, #48	; 0x30
 80076f8:	2a63      	cmp	r2, #99	; 0x63
 80076fa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80076fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007702:	4631      	mov	r1, r6
 8007704:	dcf1      	bgt.n	80076ea <__exponent+0x22>
 8007706:	3130      	adds	r1, #48	; 0x30
 8007708:	f1ae 0502 	sub.w	r5, lr, #2
 800770c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007710:	1c44      	adds	r4, r0, #1
 8007712:	4629      	mov	r1, r5
 8007714:	4561      	cmp	r1, ip
 8007716:	d30a      	bcc.n	800772e <__exponent+0x66>
 8007718:	f10d 0209 	add.w	r2, sp, #9
 800771c:	eba2 020e 	sub.w	r2, r2, lr
 8007720:	4565      	cmp	r5, ip
 8007722:	bf88      	it	hi
 8007724:	2200      	movhi	r2, #0
 8007726:	4413      	add	r3, r2
 8007728:	1a18      	subs	r0, r3, r0
 800772a:	b003      	add	sp, #12
 800772c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800772e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007732:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007736:	e7ed      	b.n	8007714 <__exponent+0x4c>
 8007738:	2330      	movs	r3, #48	; 0x30
 800773a:	3130      	adds	r1, #48	; 0x30
 800773c:	7083      	strb	r3, [r0, #2]
 800773e:	70c1      	strb	r1, [r0, #3]
 8007740:	1d03      	adds	r3, r0, #4
 8007742:	e7f1      	b.n	8007728 <__exponent+0x60>

08007744 <_printf_float>:
 8007744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007748:	ed2d 8b02 	vpush	{d8}
 800774c:	b08d      	sub	sp, #52	; 0x34
 800774e:	460c      	mov	r4, r1
 8007750:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007754:	4616      	mov	r6, r2
 8007756:	461f      	mov	r7, r3
 8007758:	4605      	mov	r5, r0
 800775a:	f001 fa55 	bl	8008c08 <_localeconv_r>
 800775e:	f8d0 a000 	ldr.w	sl, [r0]
 8007762:	4650      	mov	r0, sl
 8007764:	f7f8 fd3c 	bl	80001e0 <strlen>
 8007768:	2300      	movs	r3, #0
 800776a:	930a      	str	r3, [sp, #40]	; 0x28
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	9305      	str	r3, [sp, #20]
 8007770:	f8d8 3000 	ldr.w	r3, [r8]
 8007774:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007778:	3307      	adds	r3, #7
 800777a:	f023 0307 	bic.w	r3, r3, #7
 800777e:	f103 0208 	add.w	r2, r3, #8
 8007782:	f8c8 2000 	str.w	r2, [r8]
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800778e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007792:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007796:	9307      	str	r3, [sp, #28]
 8007798:	f8cd 8018 	str.w	r8, [sp, #24]
 800779c:	ee08 0a10 	vmov	s16, r0
 80077a0:	4b9f      	ldr	r3, [pc, #636]	; (8007a20 <_printf_float+0x2dc>)
 80077a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077aa:	f7f9 f9c7 	bl	8000b3c <__aeabi_dcmpun>
 80077ae:	bb88      	cbnz	r0, 8007814 <_printf_float+0xd0>
 80077b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077b4:	4b9a      	ldr	r3, [pc, #616]	; (8007a20 <_printf_float+0x2dc>)
 80077b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077ba:	f7f9 f9a1 	bl	8000b00 <__aeabi_dcmple>
 80077be:	bb48      	cbnz	r0, 8007814 <_printf_float+0xd0>
 80077c0:	2200      	movs	r2, #0
 80077c2:	2300      	movs	r3, #0
 80077c4:	4640      	mov	r0, r8
 80077c6:	4649      	mov	r1, r9
 80077c8:	f7f9 f990 	bl	8000aec <__aeabi_dcmplt>
 80077cc:	b110      	cbz	r0, 80077d4 <_printf_float+0x90>
 80077ce:	232d      	movs	r3, #45	; 0x2d
 80077d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077d4:	4b93      	ldr	r3, [pc, #588]	; (8007a24 <_printf_float+0x2e0>)
 80077d6:	4894      	ldr	r0, [pc, #592]	; (8007a28 <_printf_float+0x2e4>)
 80077d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80077dc:	bf94      	ite	ls
 80077de:	4698      	movls	r8, r3
 80077e0:	4680      	movhi	r8, r0
 80077e2:	2303      	movs	r3, #3
 80077e4:	6123      	str	r3, [r4, #16]
 80077e6:	9b05      	ldr	r3, [sp, #20]
 80077e8:	f023 0204 	bic.w	r2, r3, #4
 80077ec:	6022      	str	r2, [r4, #0]
 80077ee:	f04f 0900 	mov.w	r9, #0
 80077f2:	9700      	str	r7, [sp, #0]
 80077f4:	4633      	mov	r3, r6
 80077f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80077f8:	4621      	mov	r1, r4
 80077fa:	4628      	mov	r0, r5
 80077fc:	f000 f9d8 	bl	8007bb0 <_printf_common>
 8007800:	3001      	adds	r0, #1
 8007802:	f040 8090 	bne.w	8007926 <_printf_float+0x1e2>
 8007806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800780a:	b00d      	add	sp, #52	; 0x34
 800780c:	ecbd 8b02 	vpop	{d8}
 8007810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007814:	4642      	mov	r2, r8
 8007816:	464b      	mov	r3, r9
 8007818:	4640      	mov	r0, r8
 800781a:	4649      	mov	r1, r9
 800781c:	f7f9 f98e 	bl	8000b3c <__aeabi_dcmpun>
 8007820:	b140      	cbz	r0, 8007834 <_printf_float+0xf0>
 8007822:	464b      	mov	r3, r9
 8007824:	2b00      	cmp	r3, #0
 8007826:	bfbc      	itt	lt
 8007828:	232d      	movlt	r3, #45	; 0x2d
 800782a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800782e:	487f      	ldr	r0, [pc, #508]	; (8007a2c <_printf_float+0x2e8>)
 8007830:	4b7f      	ldr	r3, [pc, #508]	; (8007a30 <_printf_float+0x2ec>)
 8007832:	e7d1      	b.n	80077d8 <_printf_float+0x94>
 8007834:	6863      	ldr	r3, [r4, #4]
 8007836:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800783a:	9206      	str	r2, [sp, #24]
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	d13f      	bne.n	80078c0 <_printf_float+0x17c>
 8007840:	2306      	movs	r3, #6
 8007842:	6063      	str	r3, [r4, #4]
 8007844:	9b05      	ldr	r3, [sp, #20]
 8007846:	6861      	ldr	r1, [r4, #4]
 8007848:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800784c:	2300      	movs	r3, #0
 800784e:	9303      	str	r3, [sp, #12]
 8007850:	ab0a      	add	r3, sp, #40	; 0x28
 8007852:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007856:	ab09      	add	r3, sp, #36	; 0x24
 8007858:	ec49 8b10 	vmov	d0, r8, r9
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	6022      	str	r2, [r4, #0]
 8007860:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007864:	4628      	mov	r0, r5
 8007866:	f7ff fecd 	bl	8007604 <__cvt>
 800786a:	9b06      	ldr	r3, [sp, #24]
 800786c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800786e:	2b47      	cmp	r3, #71	; 0x47
 8007870:	4680      	mov	r8, r0
 8007872:	d108      	bne.n	8007886 <_printf_float+0x142>
 8007874:	1cc8      	adds	r0, r1, #3
 8007876:	db02      	blt.n	800787e <_printf_float+0x13a>
 8007878:	6863      	ldr	r3, [r4, #4]
 800787a:	4299      	cmp	r1, r3
 800787c:	dd41      	ble.n	8007902 <_printf_float+0x1be>
 800787e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007882:	fa5f fb8b 	uxtb.w	fp, fp
 8007886:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800788a:	d820      	bhi.n	80078ce <_printf_float+0x18a>
 800788c:	3901      	subs	r1, #1
 800788e:	465a      	mov	r2, fp
 8007890:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007894:	9109      	str	r1, [sp, #36]	; 0x24
 8007896:	f7ff ff17 	bl	80076c8 <__exponent>
 800789a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800789c:	1813      	adds	r3, r2, r0
 800789e:	2a01      	cmp	r2, #1
 80078a0:	4681      	mov	r9, r0
 80078a2:	6123      	str	r3, [r4, #16]
 80078a4:	dc02      	bgt.n	80078ac <_printf_float+0x168>
 80078a6:	6822      	ldr	r2, [r4, #0]
 80078a8:	07d2      	lsls	r2, r2, #31
 80078aa:	d501      	bpl.n	80078b0 <_printf_float+0x16c>
 80078ac:	3301      	adds	r3, #1
 80078ae:	6123      	str	r3, [r4, #16]
 80078b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d09c      	beq.n	80077f2 <_printf_float+0xae>
 80078b8:	232d      	movs	r3, #45	; 0x2d
 80078ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078be:	e798      	b.n	80077f2 <_printf_float+0xae>
 80078c0:	9a06      	ldr	r2, [sp, #24]
 80078c2:	2a47      	cmp	r2, #71	; 0x47
 80078c4:	d1be      	bne.n	8007844 <_printf_float+0x100>
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1bc      	bne.n	8007844 <_printf_float+0x100>
 80078ca:	2301      	movs	r3, #1
 80078cc:	e7b9      	b.n	8007842 <_printf_float+0xfe>
 80078ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80078d2:	d118      	bne.n	8007906 <_printf_float+0x1c2>
 80078d4:	2900      	cmp	r1, #0
 80078d6:	6863      	ldr	r3, [r4, #4]
 80078d8:	dd0b      	ble.n	80078f2 <_printf_float+0x1ae>
 80078da:	6121      	str	r1, [r4, #16]
 80078dc:	b913      	cbnz	r3, 80078e4 <_printf_float+0x1a0>
 80078de:	6822      	ldr	r2, [r4, #0]
 80078e0:	07d0      	lsls	r0, r2, #31
 80078e2:	d502      	bpl.n	80078ea <_printf_float+0x1a6>
 80078e4:	3301      	adds	r3, #1
 80078e6:	440b      	add	r3, r1
 80078e8:	6123      	str	r3, [r4, #16]
 80078ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80078ec:	f04f 0900 	mov.w	r9, #0
 80078f0:	e7de      	b.n	80078b0 <_printf_float+0x16c>
 80078f2:	b913      	cbnz	r3, 80078fa <_printf_float+0x1b6>
 80078f4:	6822      	ldr	r2, [r4, #0]
 80078f6:	07d2      	lsls	r2, r2, #31
 80078f8:	d501      	bpl.n	80078fe <_printf_float+0x1ba>
 80078fa:	3302      	adds	r3, #2
 80078fc:	e7f4      	b.n	80078e8 <_printf_float+0x1a4>
 80078fe:	2301      	movs	r3, #1
 8007900:	e7f2      	b.n	80078e8 <_printf_float+0x1a4>
 8007902:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007908:	4299      	cmp	r1, r3
 800790a:	db05      	blt.n	8007918 <_printf_float+0x1d4>
 800790c:	6823      	ldr	r3, [r4, #0]
 800790e:	6121      	str	r1, [r4, #16]
 8007910:	07d8      	lsls	r0, r3, #31
 8007912:	d5ea      	bpl.n	80078ea <_printf_float+0x1a6>
 8007914:	1c4b      	adds	r3, r1, #1
 8007916:	e7e7      	b.n	80078e8 <_printf_float+0x1a4>
 8007918:	2900      	cmp	r1, #0
 800791a:	bfd4      	ite	le
 800791c:	f1c1 0202 	rsble	r2, r1, #2
 8007920:	2201      	movgt	r2, #1
 8007922:	4413      	add	r3, r2
 8007924:	e7e0      	b.n	80078e8 <_printf_float+0x1a4>
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	055a      	lsls	r2, r3, #21
 800792a:	d407      	bmi.n	800793c <_printf_float+0x1f8>
 800792c:	6923      	ldr	r3, [r4, #16]
 800792e:	4642      	mov	r2, r8
 8007930:	4631      	mov	r1, r6
 8007932:	4628      	mov	r0, r5
 8007934:	47b8      	blx	r7
 8007936:	3001      	adds	r0, #1
 8007938:	d12c      	bne.n	8007994 <_printf_float+0x250>
 800793a:	e764      	b.n	8007806 <_printf_float+0xc2>
 800793c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007940:	f240 80e0 	bls.w	8007b04 <_printf_float+0x3c0>
 8007944:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007948:	2200      	movs	r2, #0
 800794a:	2300      	movs	r3, #0
 800794c:	f7f9 f8c4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007950:	2800      	cmp	r0, #0
 8007952:	d034      	beq.n	80079be <_printf_float+0x27a>
 8007954:	4a37      	ldr	r2, [pc, #220]	; (8007a34 <_printf_float+0x2f0>)
 8007956:	2301      	movs	r3, #1
 8007958:	4631      	mov	r1, r6
 800795a:	4628      	mov	r0, r5
 800795c:	47b8      	blx	r7
 800795e:	3001      	adds	r0, #1
 8007960:	f43f af51 	beq.w	8007806 <_printf_float+0xc2>
 8007964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007968:	429a      	cmp	r2, r3
 800796a:	db02      	blt.n	8007972 <_printf_float+0x22e>
 800796c:	6823      	ldr	r3, [r4, #0]
 800796e:	07d8      	lsls	r0, r3, #31
 8007970:	d510      	bpl.n	8007994 <_printf_float+0x250>
 8007972:	ee18 3a10 	vmov	r3, s16
 8007976:	4652      	mov	r2, sl
 8007978:	4631      	mov	r1, r6
 800797a:	4628      	mov	r0, r5
 800797c:	47b8      	blx	r7
 800797e:	3001      	adds	r0, #1
 8007980:	f43f af41 	beq.w	8007806 <_printf_float+0xc2>
 8007984:	f04f 0800 	mov.w	r8, #0
 8007988:	f104 091a 	add.w	r9, r4, #26
 800798c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800798e:	3b01      	subs	r3, #1
 8007990:	4543      	cmp	r3, r8
 8007992:	dc09      	bgt.n	80079a8 <_printf_float+0x264>
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	079b      	lsls	r3, r3, #30
 8007998:	f100 8105 	bmi.w	8007ba6 <_printf_float+0x462>
 800799c:	68e0      	ldr	r0, [r4, #12]
 800799e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079a0:	4298      	cmp	r0, r3
 80079a2:	bfb8      	it	lt
 80079a4:	4618      	movlt	r0, r3
 80079a6:	e730      	b.n	800780a <_printf_float+0xc6>
 80079a8:	2301      	movs	r3, #1
 80079aa:	464a      	mov	r2, r9
 80079ac:	4631      	mov	r1, r6
 80079ae:	4628      	mov	r0, r5
 80079b0:	47b8      	blx	r7
 80079b2:	3001      	adds	r0, #1
 80079b4:	f43f af27 	beq.w	8007806 <_printf_float+0xc2>
 80079b8:	f108 0801 	add.w	r8, r8, #1
 80079bc:	e7e6      	b.n	800798c <_printf_float+0x248>
 80079be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	dc39      	bgt.n	8007a38 <_printf_float+0x2f4>
 80079c4:	4a1b      	ldr	r2, [pc, #108]	; (8007a34 <_printf_float+0x2f0>)
 80079c6:	2301      	movs	r3, #1
 80079c8:	4631      	mov	r1, r6
 80079ca:	4628      	mov	r0, r5
 80079cc:	47b8      	blx	r7
 80079ce:	3001      	adds	r0, #1
 80079d0:	f43f af19 	beq.w	8007806 <_printf_float+0xc2>
 80079d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079d8:	4313      	orrs	r3, r2
 80079da:	d102      	bne.n	80079e2 <_printf_float+0x29e>
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	07d9      	lsls	r1, r3, #31
 80079e0:	d5d8      	bpl.n	8007994 <_printf_float+0x250>
 80079e2:	ee18 3a10 	vmov	r3, s16
 80079e6:	4652      	mov	r2, sl
 80079e8:	4631      	mov	r1, r6
 80079ea:	4628      	mov	r0, r5
 80079ec:	47b8      	blx	r7
 80079ee:	3001      	adds	r0, #1
 80079f0:	f43f af09 	beq.w	8007806 <_printf_float+0xc2>
 80079f4:	f04f 0900 	mov.w	r9, #0
 80079f8:	f104 0a1a 	add.w	sl, r4, #26
 80079fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079fe:	425b      	negs	r3, r3
 8007a00:	454b      	cmp	r3, r9
 8007a02:	dc01      	bgt.n	8007a08 <_printf_float+0x2c4>
 8007a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a06:	e792      	b.n	800792e <_printf_float+0x1ea>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	4652      	mov	r2, sl
 8007a0c:	4631      	mov	r1, r6
 8007a0e:	4628      	mov	r0, r5
 8007a10:	47b8      	blx	r7
 8007a12:	3001      	adds	r0, #1
 8007a14:	f43f aef7 	beq.w	8007806 <_printf_float+0xc2>
 8007a18:	f109 0901 	add.w	r9, r9, #1
 8007a1c:	e7ee      	b.n	80079fc <_printf_float+0x2b8>
 8007a1e:	bf00      	nop
 8007a20:	7fefffff 	.word	0x7fefffff
 8007a24:	0800bdec 	.word	0x0800bdec
 8007a28:	0800bdf0 	.word	0x0800bdf0
 8007a2c:	0800bdf8 	.word	0x0800bdf8
 8007a30:	0800bdf4 	.word	0x0800bdf4
 8007a34:	0800bdfc 	.word	0x0800bdfc
 8007a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	bfa8      	it	ge
 8007a40:	461a      	movge	r2, r3
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	4691      	mov	r9, r2
 8007a46:	dc37      	bgt.n	8007ab8 <_printf_float+0x374>
 8007a48:	f04f 0b00 	mov.w	fp, #0
 8007a4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a50:	f104 021a 	add.w	r2, r4, #26
 8007a54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a56:	9305      	str	r3, [sp, #20]
 8007a58:	eba3 0309 	sub.w	r3, r3, r9
 8007a5c:	455b      	cmp	r3, fp
 8007a5e:	dc33      	bgt.n	8007ac8 <_printf_float+0x384>
 8007a60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a64:	429a      	cmp	r2, r3
 8007a66:	db3b      	blt.n	8007ae0 <_printf_float+0x39c>
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	07da      	lsls	r2, r3, #31
 8007a6c:	d438      	bmi.n	8007ae0 <_printf_float+0x39c>
 8007a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a70:	9b05      	ldr	r3, [sp, #20]
 8007a72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	eba2 0901 	sub.w	r9, r2, r1
 8007a7a:	4599      	cmp	r9, r3
 8007a7c:	bfa8      	it	ge
 8007a7e:	4699      	movge	r9, r3
 8007a80:	f1b9 0f00 	cmp.w	r9, #0
 8007a84:	dc35      	bgt.n	8007af2 <_printf_float+0x3ae>
 8007a86:	f04f 0800 	mov.w	r8, #0
 8007a8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a8e:	f104 0a1a 	add.w	sl, r4, #26
 8007a92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a96:	1a9b      	subs	r3, r3, r2
 8007a98:	eba3 0309 	sub.w	r3, r3, r9
 8007a9c:	4543      	cmp	r3, r8
 8007a9e:	f77f af79 	ble.w	8007994 <_printf_float+0x250>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	4652      	mov	r2, sl
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	47b8      	blx	r7
 8007aac:	3001      	adds	r0, #1
 8007aae:	f43f aeaa 	beq.w	8007806 <_printf_float+0xc2>
 8007ab2:	f108 0801 	add.w	r8, r8, #1
 8007ab6:	e7ec      	b.n	8007a92 <_printf_float+0x34e>
 8007ab8:	4613      	mov	r3, r2
 8007aba:	4631      	mov	r1, r6
 8007abc:	4642      	mov	r2, r8
 8007abe:	4628      	mov	r0, r5
 8007ac0:	47b8      	blx	r7
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	d1c0      	bne.n	8007a48 <_printf_float+0x304>
 8007ac6:	e69e      	b.n	8007806 <_printf_float+0xc2>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	4631      	mov	r1, r6
 8007acc:	4628      	mov	r0, r5
 8007ace:	9205      	str	r2, [sp, #20]
 8007ad0:	47b8      	blx	r7
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	f43f ae97 	beq.w	8007806 <_printf_float+0xc2>
 8007ad8:	9a05      	ldr	r2, [sp, #20]
 8007ada:	f10b 0b01 	add.w	fp, fp, #1
 8007ade:	e7b9      	b.n	8007a54 <_printf_float+0x310>
 8007ae0:	ee18 3a10 	vmov	r3, s16
 8007ae4:	4652      	mov	r2, sl
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	4628      	mov	r0, r5
 8007aea:	47b8      	blx	r7
 8007aec:	3001      	adds	r0, #1
 8007aee:	d1be      	bne.n	8007a6e <_printf_float+0x32a>
 8007af0:	e689      	b.n	8007806 <_printf_float+0xc2>
 8007af2:	9a05      	ldr	r2, [sp, #20]
 8007af4:	464b      	mov	r3, r9
 8007af6:	4442      	add	r2, r8
 8007af8:	4631      	mov	r1, r6
 8007afa:	4628      	mov	r0, r5
 8007afc:	47b8      	blx	r7
 8007afe:	3001      	adds	r0, #1
 8007b00:	d1c1      	bne.n	8007a86 <_printf_float+0x342>
 8007b02:	e680      	b.n	8007806 <_printf_float+0xc2>
 8007b04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b06:	2a01      	cmp	r2, #1
 8007b08:	dc01      	bgt.n	8007b0e <_printf_float+0x3ca>
 8007b0a:	07db      	lsls	r3, r3, #31
 8007b0c:	d538      	bpl.n	8007b80 <_printf_float+0x43c>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	4642      	mov	r2, r8
 8007b12:	4631      	mov	r1, r6
 8007b14:	4628      	mov	r0, r5
 8007b16:	47b8      	blx	r7
 8007b18:	3001      	adds	r0, #1
 8007b1a:	f43f ae74 	beq.w	8007806 <_printf_float+0xc2>
 8007b1e:	ee18 3a10 	vmov	r3, s16
 8007b22:	4652      	mov	r2, sl
 8007b24:	4631      	mov	r1, r6
 8007b26:	4628      	mov	r0, r5
 8007b28:	47b8      	blx	r7
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	f43f ae6b 	beq.w	8007806 <_printf_float+0xc2>
 8007b30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b34:	2200      	movs	r2, #0
 8007b36:	2300      	movs	r3, #0
 8007b38:	f7f8 ffce 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b3c:	b9d8      	cbnz	r0, 8007b76 <_printf_float+0x432>
 8007b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b40:	f108 0201 	add.w	r2, r8, #1
 8007b44:	3b01      	subs	r3, #1
 8007b46:	4631      	mov	r1, r6
 8007b48:	4628      	mov	r0, r5
 8007b4a:	47b8      	blx	r7
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	d10e      	bne.n	8007b6e <_printf_float+0x42a>
 8007b50:	e659      	b.n	8007806 <_printf_float+0xc2>
 8007b52:	2301      	movs	r3, #1
 8007b54:	4652      	mov	r2, sl
 8007b56:	4631      	mov	r1, r6
 8007b58:	4628      	mov	r0, r5
 8007b5a:	47b8      	blx	r7
 8007b5c:	3001      	adds	r0, #1
 8007b5e:	f43f ae52 	beq.w	8007806 <_printf_float+0xc2>
 8007b62:	f108 0801 	add.w	r8, r8, #1
 8007b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	4543      	cmp	r3, r8
 8007b6c:	dcf1      	bgt.n	8007b52 <_printf_float+0x40e>
 8007b6e:	464b      	mov	r3, r9
 8007b70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b74:	e6dc      	b.n	8007930 <_printf_float+0x1ec>
 8007b76:	f04f 0800 	mov.w	r8, #0
 8007b7a:	f104 0a1a 	add.w	sl, r4, #26
 8007b7e:	e7f2      	b.n	8007b66 <_printf_float+0x422>
 8007b80:	2301      	movs	r3, #1
 8007b82:	4642      	mov	r2, r8
 8007b84:	e7df      	b.n	8007b46 <_printf_float+0x402>
 8007b86:	2301      	movs	r3, #1
 8007b88:	464a      	mov	r2, r9
 8007b8a:	4631      	mov	r1, r6
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	47b8      	blx	r7
 8007b90:	3001      	adds	r0, #1
 8007b92:	f43f ae38 	beq.w	8007806 <_printf_float+0xc2>
 8007b96:	f108 0801 	add.w	r8, r8, #1
 8007b9a:	68e3      	ldr	r3, [r4, #12]
 8007b9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b9e:	1a5b      	subs	r3, r3, r1
 8007ba0:	4543      	cmp	r3, r8
 8007ba2:	dcf0      	bgt.n	8007b86 <_printf_float+0x442>
 8007ba4:	e6fa      	b.n	800799c <_printf_float+0x258>
 8007ba6:	f04f 0800 	mov.w	r8, #0
 8007baa:	f104 0919 	add.w	r9, r4, #25
 8007bae:	e7f4      	b.n	8007b9a <_printf_float+0x456>

08007bb0 <_printf_common>:
 8007bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb4:	4616      	mov	r6, r2
 8007bb6:	4699      	mov	r9, r3
 8007bb8:	688a      	ldr	r2, [r1, #8]
 8007bba:	690b      	ldr	r3, [r1, #16]
 8007bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	bfb8      	it	lt
 8007bc4:	4613      	movlt	r3, r2
 8007bc6:	6033      	str	r3, [r6, #0]
 8007bc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bcc:	4607      	mov	r7, r0
 8007bce:	460c      	mov	r4, r1
 8007bd0:	b10a      	cbz	r2, 8007bd6 <_printf_common+0x26>
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	6033      	str	r3, [r6, #0]
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	0699      	lsls	r1, r3, #26
 8007bda:	bf42      	ittt	mi
 8007bdc:	6833      	ldrmi	r3, [r6, #0]
 8007bde:	3302      	addmi	r3, #2
 8007be0:	6033      	strmi	r3, [r6, #0]
 8007be2:	6825      	ldr	r5, [r4, #0]
 8007be4:	f015 0506 	ands.w	r5, r5, #6
 8007be8:	d106      	bne.n	8007bf8 <_printf_common+0x48>
 8007bea:	f104 0a19 	add.w	sl, r4, #25
 8007bee:	68e3      	ldr	r3, [r4, #12]
 8007bf0:	6832      	ldr	r2, [r6, #0]
 8007bf2:	1a9b      	subs	r3, r3, r2
 8007bf4:	42ab      	cmp	r3, r5
 8007bf6:	dc26      	bgt.n	8007c46 <_printf_common+0x96>
 8007bf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bfc:	1e13      	subs	r3, r2, #0
 8007bfe:	6822      	ldr	r2, [r4, #0]
 8007c00:	bf18      	it	ne
 8007c02:	2301      	movne	r3, #1
 8007c04:	0692      	lsls	r2, r2, #26
 8007c06:	d42b      	bmi.n	8007c60 <_printf_common+0xb0>
 8007c08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c0c:	4649      	mov	r1, r9
 8007c0e:	4638      	mov	r0, r7
 8007c10:	47c0      	blx	r8
 8007c12:	3001      	adds	r0, #1
 8007c14:	d01e      	beq.n	8007c54 <_printf_common+0xa4>
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	68e5      	ldr	r5, [r4, #12]
 8007c1a:	6832      	ldr	r2, [r6, #0]
 8007c1c:	f003 0306 	and.w	r3, r3, #6
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	bf08      	it	eq
 8007c24:	1aad      	subeq	r5, r5, r2
 8007c26:	68a3      	ldr	r3, [r4, #8]
 8007c28:	6922      	ldr	r2, [r4, #16]
 8007c2a:	bf0c      	ite	eq
 8007c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c30:	2500      	movne	r5, #0
 8007c32:	4293      	cmp	r3, r2
 8007c34:	bfc4      	itt	gt
 8007c36:	1a9b      	subgt	r3, r3, r2
 8007c38:	18ed      	addgt	r5, r5, r3
 8007c3a:	2600      	movs	r6, #0
 8007c3c:	341a      	adds	r4, #26
 8007c3e:	42b5      	cmp	r5, r6
 8007c40:	d11a      	bne.n	8007c78 <_printf_common+0xc8>
 8007c42:	2000      	movs	r0, #0
 8007c44:	e008      	b.n	8007c58 <_printf_common+0xa8>
 8007c46:	2301      	movs	r3, #1
 8007c48:	4652      	mov	r2, sl
 8007c4a:	4649      	mov	r1, r9
 8007c4c:	4638      	mov	r0, r7
 8007c4e:	47c0      	blx	r8
 8007c50:	3001      	adds	r0, #1
 8007c52:	d103      	bne.n	8007c5c <_printf_common+0xac>
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c5c:	3501      	adds	r5, #1
 8007c5e:	e7c6      	b.n	8007bee <_printf_common+0x3e>
 8007c60:	18e1      	adds	r1, r4, r3
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	2030      	movs	r0, #48	; 0x30
 8007c66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c6a:	4422      	add	r2, r4
 8007c6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c74:	3302      	adds	r3, #2
 8007c76:	e7c7      	b.n	8007c08 <_printf_common+0x58>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	4622      	mov	r2, r4
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	4638      	mov	r0, r7
 8007c80:	47c0      	blx	r8
 8007c82:	3001      	adds	r0, #1
 8007c84:	d0e6      	beq.n	8007c54 <_printf_common+0xa4>
 8007c86:	3601      	adds	r6, #1
 8007c88:	e7d9      	b.n	8007c3e <_printf_common+0x8e>
	...

08007c8c <_printf_i>:
 8007c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c90:	460c      	mov	r4, r1
 8007c92:	4691      	mov	r9, r2
 8007c94:	7e27      	ldrb	r7, [r4, #24]
 8007c96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c98:	2f78      	cmp	r7, #120	; 0x78
 8007c9a:	4680      	mov	r8, r0
 8007c9c:	469a      	mov	sl, r3
 8007c9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ca2:	d807      	bhi.n	8007cb4 <_printf_i+0x28>
 8007ca4:	2f62      	cmp	r7, #98	; 0x62
 8007ca6:	d80a      	bhi.n	8007cbe <_printf_i+0x32>
 8007ca8:	2f00      	cmp	r7, #0
 8007caa:	f000 80d8 	beq.w	8007e5e <_printf_i+0x1d2>
 8007cae:	2f58      	cmp	r7, #88	; 0x58
 8007cb0:	f000 80a3 	beq.w	8007dfa <_printf_i+0x16e>
 8007cb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007cb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cbc:	e03a      	b.n	8007d34 <_printf_i+0xa8>
 8007cbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cc2:	2b15      	cmp	r3, #21
 8007cc4:	d8f6      	bhi.n	8007cb4 <_printf_i+0x28>
 8007cc6:	a001      	add	r0, pc, #4	; (adr r0, 8007ccc <_printf_i+0x40>)
 8007cc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ccc:	08007d25 	.word	0x08007d25
 8007cd0:	08007d39 	.word	0x08007d39
 8007cd4:	08007cb5 	.word	0x08007cb5
 8007cd8:	08007cb5 	.word	0x08007cb5
 8007cdc:	08007cb5 	.word	0x08007cb5
 8007ce0:	08007cb5 	.word	0x08007cb5
 8007ce4:	08007d39 	.word	0x08007d39
 8007ce8:	08007cb5 	.word	0x08007cb5
 8007cec:	08007cb5 	.word	0x08007cb5
 8007cf0:	08007cb5 	.word	0x08007cb5
 8007cf4:	08007cb5 	.word	0x08007cb5
 8007cf8:	08007e45 	.word	0x08007e45
 8007cfc:	08007d69 	.word	0x08007d69
 8007d00:	08007e27 	.word	0x08007e27
 8007d04:	08007cb5 	.word	0x08007cb5
 8007d08:	08007cb5 	.word	0x08007cb5
 8007d0c:	08007e67 	.word	0x08007e67
 8007d10:	08007cb5 	.word	0x08007cb5
 8007d14:	08007d69 	.word	0x08007d69
 8007d18:	08007cb5 	.word	0x08007cb5
 8007d1c:	08007cb5 	.word	0x08007cb5
 8007d20:	08007e2f 	.word	0x08007e2f
 8007d24:	680b      	ldr	r3, [r1, #0]
 8007d26:	1d1a      	adds	r2, r3, #4
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	600a      	str	r2, [r1, #0]
 8007d2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d34:	2301      	movs	r3, #1
 8007d36:	e0a3      	b.n	8007e80 <_printf_i+0x1f4>
 8007d38:	6825      	ldr	r5, [r4, #0]
 8007d3a:	6808      	ldr	r0, [r1, #0]
 8007d3c:	062e      	lsls	r6, r5, #24
 8007d3e:	f100 0304 	add.w	r3, r0, #4
 8007d42:	d50a      	bpl.n	8007d5a <_printf_i+0xce>
 8007d44:	6805      	ldr	r5, [r0, #0]
 8007d46:	600b      	str	r3, [r1, #0]
 8007d48:	2d00      	cmp	r5, #0
 8007d4a:	da03      	bge.n	8007d54 <_printf_i+0xc8>
 8007d4c:	232d      	movs	r3, #45	; 0x2d
 8007d4e:	426d      	negs	r5, r5
 8007d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d54:	485e      	ldr	r0, [pc, #376]	; (8007ed0 <_printf_i+0x244>)
 8007d56:	230a      	movs	r3, #10
 8007d58:	e019      	b.n	8007d8e <_printf_i+0x102>
 8007d5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007d5e:	6805      	ldr	r5, [r0, #0]
 8007d60:	600b      	str	r3, [r1, #0]
 8007d62:	bf18      	it	ne
 8007d64:	b22d      	sxthne	r5, r5
 8007d66:	e7ef      	b.n	8007d48 <_printf_i+0xbc>
 8007d68:	680b      	ldr	r3, [r1, #0]
 8007d6a:	6825      	ldr	r5, [r4, #0]
 8007d6c:	1d18      	adds	r0, r3, #4
 8007d6e:	6008      	str	r0, [r1, #0]
 8007d70:	0628      	lsls	r0, r5, #24
 8007d72:	d501      	bpl.n	8007d78 <_printf_i+0xec>
 8007d74:	681d      	ldr	r5, [r3, #0]
 8007d76:	e002      	b.n	8007d7e <_printf_i+0xf2>
 8007d78:	0669      	lsls	r1, r5, #25
 8007d7a:	d5fb      	bpl.n	8007d74 <_printf_i+0xe8>
 8007d7c:	881d      	ldrh	r5, [r3, #0]
 8007d7e:	4854      	ldr	r0, [pc, #336]	; (8007ed0 <_printf_i+0x244>)
 8007d80:	2f6f      	cmp	r7, #111	; 0x6f
 8007d82:	bf0c      	ite	eq
 8007d84:	2308      	moveq	r3, #8
 8007d86:	230a      	movne	r3, #10
 8007d88:	2100      	movs	r1, #0
 8007d8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d8e:	6866      	ldr	r6, [r4, #4]
 8007d90:	60a6      	str	r6, [r4, #8]
 8007d92:	2e00      	cmp	r6, #0
 8007d94:	bfa2      	ittt	ge
 8007d96:	6821      	ldrge	r1, [r4, #0]
 8007d98:	f021 0104 	bicge.w	r1, r1, #4
 8007d9c:	6021      	strge	r1, [r4, #0]
 8007d9e:	b90d      	cbnz	r5, 8007da4 <_printf_i+0x118>
 8007da0:	2e00      	cmp	r6, #0
 8007da2:	d04d      	beq.n	8007e40 <_printf_i+0x1b4>
 8007da4:	4616      	mov	r6, r2
 8007da6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007daa:	fb03 5711 	mls	r7, r3, r1, r5
 8007dae:	5dc7      	ldrb	r7, [r0, r7]
 8007db0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007db4:	462f      	mov	r7, r5
 8007db6:	42bb      	cmp	r3, r7
 8007db8:	460d      	mov	r5, r1
 8007dba:	d9f4      	bls.n	8007da6 <_printf_i+0x11a>
 8007dbc:	2b08      	cmp	r3, #8
 8007dbe:	d10b      	bne.n	8007dd8 <_printf_i+0x14c>
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	07df      	lsls	r7, r3, #31
 8007dc4:	d508      	bpl.n	8007dd8 <_printf_i+0x14c>
 8007dc6:	6923      	ldr	r3, [r4, #16]
 8007dc8:	6861      	ldr	r1, [r4, #4]
 8007dca:	4299      	cmp	r1, r3
 8007dcc:	bfde      	ittt	le
 8007dce:	2330      	movle	r3, #48	; 0x30
 8007dd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007dd4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007dd8:	1b92      	subs	r2, r2, r6
 8007dda:	6122      	str	r2, [r4, #16]
 8007ddc:	f8cd a000 	str.w	sl, [sp]
 8007de0:	464b      	mov	r3, r9
 8007de2:	aa03      	add	r2, sp, #12
 8007de4:	4621      	mov	r1, r4
 8007de6:	4640      	mov	r0, r8
 8007de8:	f7ff fee2 	bl	8007bb0 <_printf_common>
 8007dec:	3001      	adds	r0, #1
 8007dee:	d14c      	bne.n	8007e8a <_printf_i+0x1fe>
 8007df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007df4:	b004      	add	sp, #16
 8007df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dfa:	4835      	ldr	r0, [pc, #212]	; (8007ed0 <_printf_i+0x244>)
 8007dfc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e00:	6823      	ldr	r3, [r4, #0]
 8007e02:	680e      	ldr	r6, [r1, #0]
 8007e04:	061f      	lsls	r7, r3, #24
 8007e06:	f856 5b04 	ldr.w	r5, [r6], #4
 8007e0a:	600e      	str	r6, [r1, #0]
 8007e0c:	d514      	bpl.n	8007e38 <_printf_i+0x1ac>
 8007e0e:	07d9      	lsls	r1, r3, #31
 8007e10:	bf44      	itt	mi
 8007e12:	f043 0320 	orrmi.w	r3, r3, #32
 8007e16:	6023      	strmi	r3, [r4, #0]
 8007e18:	b91d      	cbnz	r5, 8007e22 <_printf_i+0x196>
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	f023 0320 	bic.w	r3, r3, #32
 8007e20:	6023      	str	r3, [r4, #0]
 8007e22:	2310      	movs	r3, #16
 8007e24:	e7b0      	b.n	8007d88 <_printf_i+0xfc>
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	f043 0320 	orr.w	r3, r3, #32
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	2378      	movs	r3, #120	; 0x78
 8007e30:	4828      	ldr	r0, [pc, #160]	; (8007ed4 <_printf_i+0x248>)
 8007e32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e36:	e7e3      	b.n	8007e00 <_printf_i+0x174>
 8007e38:	065e      	lsls	r6, r3, #25
 8007e3a:	bf48      	it	mi
 8007e3c:	b2ad      	uxthmi	r5, r5
 8007e3e:	e7e6      	b.n	8007e0e <_printf_i+0x182>
 8007e40:	4616      	mov	r6, r2
 8007e42:	e7bb      	b.n	8007dbc <_printf_i+0x130>
 8007e44:	680b      	ldr	r3, [r1, #0]
 8007e46:	6826      	ldr	r6, [r4, #0]
 8007e48:	6960      	ldr	r0, [r4, #20]
 8007e4a:	1d1d      	adds	r5, r3, #4
 8007e4c:	600d      	str	r5, [r1, #0]
 8007e4e:	0635      	lsls	r5, r6, #24
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	d501      	bpl.n	8007e58 <_printf_i+0x1cc>
 8007e54:	6018      	str	r0, [r3, #0]
 8007e56:	e002      	b.n	8007e5e <_printf_i+0x1d2>
 8007e58:	0671      	lsls	r1, r6, #25
 8007e5a:	d5fb      	bpl.n	8007e54 <_printf_i+0x1c8>
 8007e5c:	8018      	strh	r0, [r3, #0]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	6123      	str	r3, [r4, #16]
 8007e62:	4616      	mov	r6, r2
 8007e64:	e7ba      	b.n	8007ddc <_printf_i+0x150>
 8007e66:	680b      	ldr	r3, [r1, #0]
 8007e68:	1d1a      	adds	r2, r3, #4
 8007e6a:	600a      	str	r2, [r1, #0]
 8007e6c:	681e      	ldr	r6, [r3, #0]
 8007e6e:	6862      	ldr	r2, [r4, #4]
 8007e70:	2100      	movs	r1, #0
 8007e72:	4630      	mov	r0, r6
 8007e74:	f7f8 f9bc 	bl	80001f0 <memchr>
 8007e78:	b108      	cbz	r0, 8007e7e <_printf_i+0x1f2>
 8007e7a:	1b80      	subs	r0, r0, r6
 8007e7c:	6060      	str	r0, [r4, #4]
 8007e7e:	6863      	ldr	r3, [r4, #4]
 8007e80:	6123      	str	r3, [r4, #16]
 8007e82:	2300      	movs	r3, #0
 8007e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e88:	e7a8      	b.n	8007ddc <_printf_i+0x150>
 8007e8a:	6923      	ldr	r3, [r4, #16]
 8007e8c:	4632      	mov	r2, r6
 8007e8e:	4649      	mov	r1, r9
 8007e90:	4640      	mov	r0, r8
 8007e92:	47d0      	blx	sl
 8007e94:	3001      	adds	r0, #1
 8007e96:	d0ab      	beq.n	8007df0 <_printf_i+0x164>
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	079b      	lsls	r3, r3, #30
 8007e9c:	d413      	bmi.n	8007ec6 <_printf_i+0x23a>
 8007e9e:	68e0      	ldr	r0, [r4, #12]
 8007ea0:	9b03      	ldr	r3, [sp, #12]
 8007ea2:	4298      	cmp	r0, r3
 8007ea4:	bfb8      	it	lt
 8007ea6:	4618      	movlt	r0, r3
 8007ea8:	e7a4      	b.n	8007df4 <_printf_i+0x168>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	4632      	mov	r2, r6
 8007eae:	4649      	mov	r1, r9
 8007eb0:	4640      	mov	r0, r8
 8007eb2:	47d0      	blx	sl
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d09b      	beq.n	8007df0 <_printf_i+0x164>
 8007eb8:	3501      	adds	r5, #1
 8007eba:	68e3      	ldr	r3, [r4, #12]
 8007ebc:	9903      	ldr	r1, [sp, #12]
 8007ebe:	1a5b      	subs	r3, r3, r1
 8007ec0:	42ab      	cmp	r3, r5
 8007ec2:	dcf2      	bgt.n	8007eaa <_printf_i+0x21e>
 8007ec4:	e7eb      	b.n	8007e9e <_printf_i+0x212>
 8007ec6:	2500      	movs	r5, #0
 8007ec8:	f104 0619 	add.w	r6, r4, #25
 8007ecc:	e7f5      	b.n	8007eba <_printf_i+0x22e>
 8007ece:	bf00      	nop
 8007ed0:	0800bdfe 	.word	0x0800bdfe
 8007ed4:	0800be0f 	.word	0x0800be0f

08007ed8 <siprintf>:
 8007ed8:	b40e      	push	{r1, r2, r3}
 8007eda:	b500      	push	{lr}
 8007edc:	b09c      	sub	sp, #112	; 0x70
 8007ede:	ab1d      	add	r3, sp, #116	; 0x74
 8007ee0:	9002      	str	r0, [sp, #8]
 8007ee2:	9006      	str	r0, [sp, #24]
 8007ee4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ee8:	4809      	ldr	r0, [pc, #36]	; (8007f10 <siprintf+0x38>)
 8007eea:	9107      	str	r1, [sp, #28]
 8007eec:	9104      	str	r1, [sp, #16]
 8007eee:	4909      	ldr	r1, [pc, #36]	; (8007f14 <siprintf+0x3c>)
 8007ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef4:	9105      	str	r1, [sp, #20]
 8007ef6:	6800      	ldr	r0, [r0, #0]
 8007ef8:	9301      	str	r3, [sp, #4]
 8007efa:	a902      	add	r1, sp, #8
 8007efc:	f001 fb32 	bl	8009564 <_svfiprintf_r>
 8007f00:	9b02      	ldr	r3, [sp, #8]
 8007f02:	2200      	movs	r2, #0
 8007f04:	701a      	strb	r2, [r3, #0]
 8007f06:	b01c      	add	sp, #112	; 0x70
 8007f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f0c:	b003      	add	sp, #12
 8007f0e:	4770      	bx	lr
 8007f10:	2000002c 	.word	0x2000002c
 8007f14:	ffff0208 	.word	0xffff0208

08007f18 <quorem>:
 8007f18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1c:	6903      	ldr	r3, [r0, #16]
 8007f1e:	690c      	ldr	r4, [r1, #16]
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	4607      	mov	r7, r0
 8007f24:	f2c0 8081 	blt.w	800802a <quorem+0x112>
 8007f28:	3c01      	subs	r4, #1
 8007f2a:	f101 0814 	add.w	r8, r1, #20
 8007f2e:	f100 0514 	add.w	r5, r0, #20
 8007f32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f36:	9301      	str	r3, [sp, #4]
 8007f38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f40:	3301      	adds	r3, #1
 8007f42:	429a      	cmp	r2, r3
 8007f44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f50:	d331      	bcc.n	8007fb6 <quorem+0x9e>
 8007f52:	f04f 0e00 	mov.w	lr, #0
 8007f56:	4640      	mov	r0, r8
 8007f58:	46ac      	mov	ip, r5
 8007f5a:	46f2      	mov	sl, lr
 8007f5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f60:	b293      	uxth	r3, r2
 8007f62:	fb06 e303 	mla	r3, r6, r3, lr
 8007f66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	ebaa 0303 	sub.w	r3, sl, r3
 8007f70:	0c12      	lsrs	r2, r2, #16
 8007f72:	f8dc a000 	ldr.w	sl, [ip]
 8007f76:	fb06 e202 	mla	r2, r6, r2, lr
 8007f7a:	fa13 f38a 	uxtah	r3, r3, sl
 8007f7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f82:	fa1f fa82 	uxth.w	sl, r2
 8007f86:	f8dc 2000 	ldr.w	r2, [ip]
 8007f8a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007f8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f98:	4581      	cmp	r9, r0
 8007f9a:	f84c 3b04 	str.w	r3, [ip], #4
 8007f9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007fa2:	d2db      	bcs.n	8007f5c <quorem+0x44>
 8007fa4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007fa8:	b92b      	cbnz	r3, 8007fb6 <quorem+0x9e>
 8007faa:	9b01      	ldr	r3, [sp, #4]
 8007fac:	3b04      	subs	r3, #4
 8007fae:	429d      	cmp	r5, r3
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	d32e      	bcc.n	8008012 <quorem+0xfa>
 8007fb4:	613c      	str	r4, [r7, #16]
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	f001 f8be 	bl	8009138 <__mcmp>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	db24      	blt.n	800800a <quorem+0xf2>
 8007fc0:	3601      	adds	r6, #1
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	f04f 0c00 	mov.w	ip, #0
 8007fc8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007fcc:	f8d0 e000 	ldr.w	lr, [r0]
 8007fd0:	b293      	uxth	r3, r2
 8007fd2:	ebac 0303 	sub.w	r3, ip, r3
 8007fd6:	0c12      	lsrs	r2, r2, #16
 8007fd8:	fa13 f38e 	uxtah	r3, r3, lr
 8007fdc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007fe0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fea:	45c1      	cmp	r9, r8
 8007fec:	f840 3b04 	str.w	r3, [r0], #4
 8007ff0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ff4:	d2e8      	bcs.n	8007fc8 <quorem+0xb0>
 8007ff6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ffe:	b922      	cbnz	r2, 800800a <quorem+0xf2>
 8008000:	3b04      	subs	r3, #4
 8008002:	429d      	cmp	r5, r3
 8008004:	461a      	mov	r2, r3
 8008006:	d30a      	bcc.n	800801e <quorem+0x106>
 8008008:	613c      	str	r4, [r7, #16]
 800800a:	4630      	mov	r0, r6
 800800c:	b003      	add	sp, #12
 800800e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008012:	6812      	ldr	r2, [r2, #0]
 8008014:	3b04      	subs	r3, #4
 8008016:	2a00      	cmp	r2, #0
 8008018:	d1cc      	bne.n	8007fb4 <quorem+0x9c>
 800801a:	3c01      	subs	r4, #1
 800801c:	e7c7      	b.n	8007fae <quorem+0x96>
 800801e:	6812      	ldr	r2, [r2, #0]
 8008020:	3b04      	subs	r3, #4
 8008022:	2a00      	cmp	r2, #0
 8008024:	d1f0      	bne.n	8008008 <quorem+0xf0>
 8008026:	3c01      	subs	r4, #1
 8008028:	e7eb      	b.n	8008002 <quorem+0xea>
 800802a:	2000      	movs	r0, #0
 800802c:	e7ee      	b.n	800800c <quorem+0xf4>
	...

08008030 <_dtoa_r>:
 8008030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	ed2d 8b02 	vpush	{d8}
 8008038:	ec57 6b10 	vmov	r6, r7, d0
 800803c:	b095      	sub	sp, #84	; 0x54
 800803e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008040:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008044:	9105      	str	r1, [sp, #20]
 8008046:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800804a:	4604      	mov	r4, r0
 800804c:	9209      	str	r2, [sp, #36]	; 0x24
 800804e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008050:	b975      	cbnz	r5, 8008070 <_dtoa_r+0x40>
 8008052:	2010      	movs	r0, #16
 8008054:	f000 fddc 	bl	8008c10 <malloc>
 8008058:	4602      	mov	r2, r0
 800805a:	6260      	str	r0, [r4, #36]	; 0x24
 800805c:	b920      	cbnz	r0, 8008068 <_dtoa_r+0x38>
 800805e:	4bb2      	ldr	r3, [pc, #712]	; (8008328 <_dtoa_r+0x2f8>)
 8008060:	21ea      	movs	r1, #234	; 0xea
 8008062:	48b2      	ldr	r0, [pc, #712]	; (800832c <_dtoa_r+0x2fc>)
 8008064:	f001 fb8e 	bl	8009784 <__assert_func>
 8008068:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800806c:	6005      	str	r5, [r0, #0]
 800806e:	60c5      	str	r5, [r0, #12]
 8008070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008072:	6819      	ldr	r1, [r3, #0]
 8008074:	b151      	cbz	r1, 800808c <_dtoa_r+0x5c>
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	604a      	str	r2, [r1, #4]
 800807a:	2301      	movs	r3, #1
 800807c:	4093      	lsls	r3, r2
 800807e:	608b      	str	r3, [r1, #8]
 8008080:	4620      	mov	r0, r4
 8008082:	f000 fe1b 	bl	8008cbc <_Bfree>
 8008086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	1e3b      	subs	r3, r7, #0
 800808e:	bfb9      	ittee	lt
 8008090:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008094:	9303      	strlt	r3, [sp, #12]
 8008096:	2300      	movge	r3, #0
 8008098:	f8c8 3000 	strge.w	r3, [r8]
 800809c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80080a0:	4ba3      	ldr	r3, [pc, #652]	; (8008330 <_dtoa_r+0x300>)
 80080a2:	bfbc      	itt	lt
 80080a4:	2201      	movlt	r2, #1
 80080a6:	f8c8 2000 	strlt.w	r2, [r8]
 80080aa:	ea33 0309 	bics.w	r3, r3, r9
 80080ae:	d11b      	bne.n	80080e8 <_dtoa_r+0xb8>
 80080b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080bc:	4333      	orrs	r3, r6
 80080be:	f000 857a 	beq.w	8008bb6 <_dtoa_r+0xb86>
 80080c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080c4:	b963      	cbnz	r3, 80080e0 <_dtoa_r+0xb0>
 80080c6:	4b9b      	ldr	r3, [pc, #620]	; (8008334 <_dtoa_r+0x304>)
 80080c8:	e024      	b.n	8008114 <_dtoa_r+0xe4>
 80080ca:	4b9b      	ldr	r3, [pc, #620]	; (8008338 <_dtoa_r+0x308>)
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	3308      	adds	r3, #8
 80080d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80080d2:	6013      	str	r3, [r2, #0]
 80080d4:	9800      	ldr	r0, [sp, #0]
 80080d6:	b015      	add	sp, #84	; 0x54
 80080d8:	ecbd 8b02 	vpop	{d8}
 80080dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e0:	4b94      	ldr	r3, [pc, #592]	; (8008334 <_dtoa_r+0x304>)
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	3303      	adds	r3, #3
 80080e6:	e7f3      	b.n	80080d0 <_dtoa_r+0xa0>
 80080e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080ec:	2200      	movs	r2, #0
 80080ee:	ec51 0b17 	vmov	r0, r1, d7
 80080f2:	2300      	movs	r3, #0
 80080f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80080f8:	f7f8 fcee 	bl	8000ad8 <__aeabi_dcmpeq>
 80080fc:	4680      	mov	r8, r0
 80080fe:	b158      	cbz	r0, 8008118 <_dtoa_r+0xe8>
 8008100:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008102:	2301      	movs	r3, #1
 8008104:	6013      	str	r3, [r2, #0]
 8008106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 8551 	beq.w	8008bb0 <_dtoa_r+0xb80>
 800810e:	488b      	ldr	r0, [pc, #556]	; (800833c <_dtoa_r+0x30c>)
 8008110:	6018      	str	r0, [r3, #0]
 8008112:	1e43      	subs	r3, r0, #1
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	e7dd      	b.n	80080d4 <_dtoa_r+0xa4>
 8008118:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800811c:	aa12      	add	r2, sp, #72	; 0x48
 800811e:	a913      	add	r1, sp, #76	; 0x4c
 8008120:	4620      	mov	r0, r4
 8008122:	f001 f8ad 	bl	8009280 <__d2b>
 8008126:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800812a:	4683      	mov	fp, r0
 800812c:	2d00      	cmp	r5, #0
 800812e:	d07c      	beq.n	800822a <_dtoa_r+0x1fa>
 8008130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008132:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008136:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800813a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800813e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008142:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008146:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800814a:	4b7d      	ldr	r3, [pc, #500]	; (8008340 <_dtoa_r+0x310>)
 800814c:	2200      	movs	r2, #0
 800814e:	4630      	mov	r0, r6
 8008150:	4639      	mov	r1, r7
 8008152:	f7f8 f8a1 	bl	8000298 <__aeabi_dsub>
 8008156:	a36e      	add	r3, pc, #440	; (adr r3, 8008310 <_dtoa_r+0x2e0>)
 8008158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815c:	f7f8 fa54 	bl	8000608 <__aeabi_dmul>
 8008160:	a36d      	add	r3, pc, #436	; (adr r3, 8008318 <_dtoa_r+0x2e8>)
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	f7f8 f899 	bl	800029c <__adddf3>
 800816a:	4606      	mov	r6, r0
 800816c:	4628      	mov	r0, r5
 800816e:	460f      	mov	r7, r1
 8008170:	f7f8 f9e0 	bl	8000534 <__aeabi_i2d>
 8008174:	a36a      	add	r3, pc, #424	; (adr r3, 8008320 <_dtoa_r+0x2f0>)
 8008176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817a:	f7f8 fa45 	bl	8000608 <__aeabi_dmul>
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	4630      	mov	r0, r6
 8008184:	4639      	mov	r1, r7
 8008186:	f7f8 f889 	bl	800029c <__adddf3>
 800818a:	4606      	mov	r6, r0
 800818c:	460f      	mov	r7, r1
 800818e:	f7f8 fceb 	bl	8000b68 <__aeabi_d2iz>
 8008192:	2200      	movs	r2, #0
 8008194:	4682      	mov	sl, r0
 8008196:	2300      	movs	r3, #0
 8008198:	4630      	mov	r0, r6
 800819a:	4639      	mov	r1, r7
 800819c:	f7f8 fca6 	bl	8000aec <__aeabi_dcmplt>
 80081a0:	b148      	cbz	r0, 80081b6 <_dtoa_r+0x186>
 80081a2:	4650      	mov	r0, sl
 80081a4:	f7f8 f9c6 	bl	8000534 <__aeabi_i2d>
 80081a8:	4632      	mov	r2, r6
 80081aa:	463b      	mov	r3, r7
 80081ac:	f7f8 fc94 	bl	8000ad8 <__aeabi_dcmpeq>
 80081b0:	b908      	cbnz	r0, 80081b6 <_dtoa_r+0x186>
 80081b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80081b6:	f1ba 0f16 	cmp.w	sl, #22
 80081ba:	d854      	bhi.n	8008266 <_dtoa_r+0x236>
 80081bc:	4b61      	ldr	r3, [pc, #388]	; (8008344 <_dtoa_r+0x314>)
 80081be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80081ca:	f7f8 fc8f 	bl	8000aec <__aeabi_dcmplt>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d04b      	beq.n	800826a <_dtoa_r+0x23a>
 80081d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80081d6:	2300      	movs	r3, #0
 80081d8:	930e      	str	r3, [sp, #56]	; 0x38
 80081da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081dc:	1b5d      	subs	r5, r3, r5
 80081de:	1e6b      	subs	r3, r5, #1
 80081e0:	9304      	str	r3, [sp, #16]
 80081e2:	bf43      	ittte	mi
 80081e4:	2300      	movmi	r3, #0
 80081e6:	f1c5 0801 	rsbmi	r8, r5, #1
 80081ea:	9304      	strmi	r3, [sp, #16]
 80081ec:	f04f 0800 	movpl.w	r8, #0
 80081f0:	f1ba 0f00 	cmp.w	sl, #0
 80081f4:	db3b      	blt.n	800826e <_dtoa_r+0x23e>
 80081f6:	9b04      	ldr	r3, [sp, #16]
 80081f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80081fc:	4453      	add	r3, sl
 80081fe:	9304      	str	r3, [sp, #16]
 8008200:	2300      	movs	r3, #0
 8008202:	9306      	str	r3, [sp, #24]
 8008204:	9b05      	ldr	r3, [sp, #20]
 8008206:	2b09      	cmp	r3, #9
 8008208:	d869      	bhi.n	80082de <_dtoa_r+0x2ae>
 800820a:	2b05      	cmp	r3, #5
 800820c:	bfc4      	itt	gt
 800820e:	3b04      	subgt	r3, #4
 8008210:	9305      	strgt	r3, [sp, #20]
 8008212:	9b05      	ldr	r3, [sp, #20]
 8008214:	f1a3 0302 	sub.w	r3, r3, #2
 8008218:	bfcc      	ite	gt
 800821a:	2500      	movgt	r5, #0
 800821c:	2501      	movle	r5, #1
 800821e:	2b03      	cmp	r3, #3
 8008220:	d869      	bhi.n	80082f6 <_dtoa_r+0x2c6>
 8008222:	e8df f003 	tbb	[pc, r3]
 8008226:	4e2c      	.short	0x4e2c
 8008228:	5a4c      	.short	0x5a4c
 800822a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800822e:	441d      	add	r5, r3
 8008230:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008234:	2b20      	cmp	r3, #32
 8008236:	bfc1      	itttt	gt
 8008238:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800823c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008240:	fa09 f303 	lslgt.w	r3, r9, r3
 8008244:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008248:	bfda      	itte	le
 800824a:	f1c3 0320 	rsble	r3, r3, #32
 800824e:	fa06 f003 	lslle.w	r0, r6, r3
 8008252:	4318      	orrgt	r0, r3
 8008254:	f7f8 f95e 	bl	8000514 <__aeabi_ui2d>
 8008258:	2301      	movs	r3, #1
 800825a:	4606      	mov	r6, r0
 800825c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008260:	3d01      	subs	r5, #1
 8008262:	9310      	str	r3, [sp, #64]	; 0x40
 8008264:	e771      	b.n	800814a <_dtoa_r+0x11a>
 8008266:	2301      	movs	r3, #1
 8008268:	e7b6      	b.n	80081d8 <_dtoa_r+0x1a8>
 800826a:	900e      	str	r0, [sp, #56]	; 0x38
 800826c:	e7b5      	b.n	80081da <_dtoa_r+0x1aa>
 800826e:	f1ca 0300 	rsb	r3, sl, #0
 8008272:	9306      	str	r3, [sp, #24]
 8008274:	2300      	movs	r3, #0
 8008276:	eba8 080a 	sub.w	r8, r8, sl
 800827a:	930d      	str	r3, [sp, #52]	; 0x34
 800827c:	e7c2      	b.n	8008204 <_dtoa_r+0x1d4>
 800827e:	2300      	movs	r3, #0
 8008280:	9308      	str	r3, [sp, #32]
 8008282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008284:	2b00      	cmp	r3, #0
 8008286:	dc39      	bgt.n	80082fc <_dtoa_r+0x2cc>
 8008288:	f04f 0901 	mov.w	r9, #1
 800828c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008290:	464b      	mov	r3, r9
 8008292:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008296:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008298:	2200      	movs	r2, #0
 800829a:	6042      	str	r2, [r0, #4]
 800829c:	2204      	movs	r2, #4
 800829e:	f102 0614 	add.w	r6, r2, #20
 80082a2:	429e      	cmp	r6, r3
 80082a4:	6841      	ldr	r1, [r0, #4]
 80082a6:	d92f      	bls.n	8008308 <_dtoa_r+0x2d8>
 80082a8:	4620      	mov	r0, r4
 80082aa:	f000 fcc7 	bl	8008c3c <_Balloc>
 80082ae:	9000      	str	r0, [sp, #0]
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d14b      	bne.n	800834c <_dtoa_r+0x31c>
 80082b4:	4b24      	ldr	r3, [pc, #144]	; (8008348 <_dtoa_r+0x318>)
 80082b6:	4602      	mov	r2, r0
 80082b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80082bc:	e6d1      	b.n	8008062 <_dtoa_r+0x32>
 80082be:	2301      	movs	r3, #1
 80082c0:	e7de      	b.n	8008280 <_dtoa_r+0x250>
 80082c2:	2300      	movs	r3, #0
 80082c4:	9308      	str	r3, [sp, #32]
 80082c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c8:	eb0a 0903 	add.w	r9, sl, r3
 80082cc:	f109 0301 	add.w	r3, r9, #1
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	9301      	str	r3, [sp, #4]
 80082d4:	bfb8      	it	lt
 80082d6:	2301      	movlt	r3, #1
 80082d8:	e7dd      	b.n	8008296 <_dtoa_r+0x266>
 80082da:	2301      	movs	r3, #1
 80082dc:	e7f2      	b.n	80082c4 <_dtoa_r+0x294>
 80082de:	2501      	movs	r5, #1
 80082e0:	2300      	movs	r3, #0
 80082e2:	9305      	str	r3, [sp, #20]
 80082e4:	9508      	str	r5, [sp, #32]
 80082e6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80082ea:	2200      	movs	r2, #0
 80082ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80082f0:	2312      	movs	r3, #18
 80082f2:	9209      	str	r2, [sp, #36]	; 0x24
 80082f4:	e7cf      	b.n	8008296 <_dtoa_r+0x266>
 80082f6:	2301      	movs	r3, #1
 80082f8:	9308      	str	r3, [sp, #32]
 80082fa:	e7f4      	b.n	80082e6 <_dtoa_r+0x2b6>
 80082fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008300:	f8cd 9004 	str.w	r9, [sp, #4]
 8008304:	464b      	mov	r3, r9
 8008306:	e7c6      	b.n	8008296 <_dtoa_r+0x266>
 8008308:	3101      	adds	r1, #1
 800830a:	6041      	str	r1, [r0, #4]
 800830c:	0052      	lsls	r2, r2, #1
 800830e:	e7c6      	b.n	800829e <_dtoa_r+0x26e>
 8008310:	636f4361 	.word	0x636f4361
 8008314:	3fd287a7 	.word	0x3fd287a7
 8008318:	8b60c8b3 	.word	0x8b60c8b3
 800831c:	3fc68a28 	.word	0x3fc68a28
 8008320:	509f79fb 	.word	0x509f79fb
 8008324:	3fd34413 	.word	0x3fd34413
 8008328:	0800be2d 	.word	0x0800be2d
 800832c:	0800be44 	.word	0x0800be44
 8008330:	7ff00000 	.word	0x7ff00000
 8008334:	0800be29 	.word	0x0800be29
 8008338:	0800be20 	.word	0x0800be20
 800833c:	0800bdfd 	.word	0x0800bdfd
 8008340:	3ff80000 	.word	0x3ff80000
 8008344:	0800bf40 	.word	0x0800bf40
 8008348:	0800bea3 	.word	0x0800bea3
 800834c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800834e:	9a00      	ldr	r2, [sp, #0]
 8008350:	601a      	str	r2, [r3, #0]
 8008352:	9b01      	ldr	r3, [sp, #4]
 8008354:	2b0e      	cmp	r3, #14
 8008356:	f200 80ad 	bhi.w	80084b4 <_dtoa_r+0x484>
 800835a:	2d00      	cmp	r5, #0
 800835c:	f000 80aa 	beq.w	80084b4 <_dtoa_r+0x484>
 8008360:	f1ba 0f00 	cmp.w	sl, #0
 8008364:	dd36      	ble.n	80083d4 <_dtoa_r+0x3a4>
 8008366:	4ac3      	ldr	r2, [pc, #780]	; (8008674 <_dtoa_r+0x644>)
 8008368:	f00a 030f 	and.w	r3, sl, #15
 800836c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008370:	ed93 7b00 	vldr	d7, [r3]
 8008374:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008378:	ea4f 172a 	mov.w	r7, sl, asr #4
 800837c:	eeb0 8a47 	vmov.f32	s16, s14
 8008380:	eef0 8a67 	vmov.f32	s17, s15
 8008384:	d016      	beq.n	80083b4 <_dtoa_r+0x384>
 8008386:	4bbc      	ldr	r3, [pc, #752]	; (8008678 <_dtoa_r+0x648>)
 8008388:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800838c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008390:	f7f8 fa64 	bl	800085c <__aeabi_ddiv>
 8008394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008398:	f007 070f 	and.w	r7, r7, #15
 800839c:	2503      	movs	r5, #3
 800839e:	4eb6      	ldr	r6, [pc, #728]	; (8008678 <_dtoa_r+0x648>)
 80083a0:	b957      	cbnz	r7, 80083b8 <_dtoa_r+0x388>
 80083a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083a6:	ec53 2b18 	vmov	r2, r3, d8
 80083aa:	f7f8 fa57 	bl	800085c <__aeabi_ddiv>
 80083ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083b2:	e029      	b.n	8008408 <_dtoa_r+0x3d8>
 80083b4:	2502      	movs	r5, #2
 80083b6:	e7f2      	b.n	800839e <_dtoa_r+0x36e>
 80083b8:	07f9      	lsls	r1, r7, #31
 80083ba:	d508      	bpl.n	80083ce <_dtoa_r+0x39e>
 80083bc:	ec51 0b18 	vmov	r0, r1, d8
 80083c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083c4:	f7f8 f920 	bl	8000608 <__aeabi_dmul>
 80083c8:	ec41 0b18 	vmov	d8, r0, r1
 80083cc:	3501      	adds	r5, #1
 80083ce:	107f      	asrs	r7, r7, #1
 80083d0:	3608      	adds	r6, #8
 80083d2:	e7e5      	b.n	80083a0 <_dtoa_r+0x370>
 80083d4:	f000 80a6 	beq.w	8008524 <_dtoa_r+0x4f4>
 80083d8:	f1ca 0600 	rsb	r6, sl, #0
 80083dc:	4ba5      	ldr	r3, [pc, #660]	; (8008674 <_dtoa_r+0x644>)
 80083de:	4fa6      	ldr	r7, [pc, #664]	; (8008678 <_dtoa_r+0x648>)
 80083e0:	f006 020f 	and.w	r2, r6, #15
 80083e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80083f0:	f7f8 f90a 	bl	8000608 <__aeabi_dmul>
 80083f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083f8:	1136      	asrs	r6, r6, #4
 80083fa:	2300      	movs	r3, #0
 80083fc:	2502      	movs	r5, #2
 80083fe:	2e00      	cmp	r6, #0
 8008400:	f040 8085 	bne.w	800850e <_dtoa_r+0x4de>
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1d2      	bne.n	80083ae <_dtoa_r+0x37e>
 8008408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 808c 	beq.w	8008528 <_dtoa_r+0x4f8>
 8008410:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008414:	4b99      	ldr	r3, [pc, #612]	; (800867c <_dtoa_r+0x64c>)
 8008416:	2200      	movs	r2, #0
 8008418:	4630      	mov	r0, r6
 800841a:	4639      	mov	r1, r7
 800841c:	f7f8 fb66 	bl	8000aec <__aeabi_dcmplt>
 8008420:	2800      	cmp	r0, #0
 8008422:	f000 8081 	beq.w	8008528 <_dtoa_r+0x4f8>
 8008426:	9b01      	ldr	r3, [sp, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d07d      	beq.n	8008528 <_dtoa_r+0x4f8>
 800842c:	f1b9 0f00 	cmp.w	r9, #0
 8008430:	dd3c      	ble.n	80084ac <_dtoa_r+0x47c>
 8008432:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008436:	9307      	str	r3, [sp, #28]
 8008438:	2200      	movs	r2, #0
 800843a:	4b91      	ldr	r3, [pc, #580]	; (8008680 <_dtoa_r+0x650>)
 800843c:	4630      	mov	r0, r6
 800843e:	4639      	mov	r1, r7
 8008440:	f7f8 f8e2 	bl	8000608 <__aeabi_dmul>
 8008444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008448:	3501      	adds	r5, #1
 800844a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800844e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008452:	4628      	mov	r0, r5
 8008454:	f7f8 f86e 	bl	8000534 <__aeabi_i2d>
 8008458:	4632      	mov	r2, r6
 800845a:	463b      	mov	r3, r7
 800845c:	f7f8 f8d4 	bl	8000608 <__aeabi_dmul>
 8008460:	4b88      	ldr	r3, [pc, #544]	; (8008684 <_dtoa_r+0x654>)
 8008462:	2200      	movs	r2, #0
 8008464:	f7f7 ff1a 	bl	800029c <__adddf3>
 8008468:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800846c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008470:	9303      	str	r3, [sp, #12]
 8008472:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008474:	2b00      	cmp	r3, #0
 8008476:	d15c      	bne.n	8008532 <_dtoa_r+0x502>
 8008478:	4b83      	ldr	r3, [pc, #524]	; (8008688 <_dtoa_r+0x658>)
 800847a:	2200      	movs	r2, #0
 800847c:	4630      	mov	r0, r6
 800847e:	4639      	mov	r1, r7
 8008480:	f7f7 ff0a 	bl	8000298 <__aeabi_dsub>
 8008484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008488:	4606      	mov	r6, r0
 800848a:	460f      	mov	r7, r1
 800848c:	f7f8 fb4c 	bl	8000b28 <__aeabi_dcmpgt>
 8008490:	2800      	cmp	r0, #0
 8008492:	f040 8296 	bne.w	80089c2 <_dtoa_r+0x992>
 8008496:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800849a:	4630      	mov	r0, r6
 800849c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084a0:	4639      	mov	r1, r7
 80084a2:	f7f8 fb23 	bl	8000aec <__aeabi_dcmplt>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	f040 8288 	bne.w	80089bc <_dtoa_r+0x98c>
 80084ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80084b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f2c0 8158 	blt.w	800876c <_dtoa_r+0x73c>
 80084bc:	f1ba 0f0e 	cmp.w	sl, #14
 80084c0:	f300 8154 	bgt.w	800876c <_dtoa_r+0x73c>
 80084c4:	4b6b      	ldr	r3, [pc, #428]	; (8008674 <_dtoa_r+0x644>)
 80084c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80084ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f280 80e3 	bge.w	800869c <_dtoa_r+0x66c>
 80084d6:	9b01      	ldr	r3, [sp, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f300 80df 	bgt.w	800869c <_dtoa_r+0x66c>
 80084de:	f040 826d 	bne.w	80089bc <_dtoa_r+0x98c>
 80084e2:	4b69      	ldr	r3, [pc, #420]	; (8008688 <_dtoa_r+0x658>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	4640      	mov	r0, r8
 80084e8:	4649      	mov	r1, r9
 80084ea:	f7f8 f88d 	bl	8000608 <__aeabi_dmul>
 80084ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084f2:	f7f8 fb0f 	bl	8000b14 <__aeabi_dcmpge>
 80084f6:	9e01      	ldr	r6, [sp, #4]
 80084f8:	4637      	mov	r7, r6
 80084fa:	2800      	cmp	r0, #0
 80084fc:	f040 8243 	bne.w	8008986 <_dtoa_r+0x956>
 8008500:	9d00      	ldr	r5, [sp, #0]
 8008502:	2331      	movs	r3, #49	; 0x31
 8008504:	f805 3b01 	strb.w	r3, [r5], #1
 8008508:	f10a 0a01 	add.w	sl, sl, #1
 800850c:	e23f      	b.n	800898e <_dtoa_r+0x95e>
 800850e:	07f2      	lsls	r2, r6, #31
 8008510:	d505      	bpl.n	800851e <_dtoa_r+0x4ee>
 8008512:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008516:	f7f8 f877 	bl	8000608 <__aeabi_dmul>
 800851a:	3501      	adds	r5, #1
 800851c:	2301      	movs	r3, #1
 800851e:	1076      	asrs	r6, r6, #1
 8008520:	3708      	adds	r7, #8
 8008522:	e76c      	b.n	80083fe <_dtoa_r+0x3ce>
 8008524:	2502      	movs	r5, #2
 8008526:	e76f      	b.n	8008408 <_dtoa_r+0x3d8>
 8008528:	9b01      	ldr	r3, [sp, #4]
 800852a:	f8cd a01c 	str.w	sl, [sp, #28]
 800852e:	930c      	str	r3, [sp, #48]	; 0x30
 8008530:	e78d      	b.n	800844e <_dtoa_r+0x41e>
 8008532:	9900      	ldr	r1, [sp, #0]
 8008534:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008536:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008538:	4b4e      	ldr	r3, [pc, #312]	; (8008674 <_dtoa_r+0x644>)
 800853a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800853e:	4401      	add	r1, r0
 8008540:	9102      	str	r1, [sp, #8]
 8008542:	9908      	ldr	r1, [sp, #32]
 8008544:	eeb0 8a47 	vmov.f32	s16, s14
 8008548:	eef0 8a67 	vmov.f32	s17, s15
 800854c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008550:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008554:	2900      	cmp	r1, #0
 8008556:	d045      	beq.n	80085e4 <_dtoa_r+0x5b4>
 8008558:	494c      	ldr	r1, [pc, #304]	; (800868c <_dtoa_r+0x65c>)
 800855a:	2000      	movs	r0, #0
 800855c:	f7f8 f97e 	bl	800085c <__aeabi_ddiv>
 8008560:	ec53 2b18 	vmov	r2, r3, d8
 8008564:	f7f7 fe98 	bl	8000298 <__aeabi_dsub>
 8008568:	9d00      	ldr	r5, [sp, #0]
 800856a:	ec41 0b18 	vmov	d8, r0, r1
 800856e:	4639      	mov	r1, r7
 8008570:	4630      	mov	r0, r6
 8008572:	f7f8 faf9 	bl	8000b68 <__aeabi_d2iz>
 8008576:	900c      	str	r0, [sp, #48]	; 0x30
 8008578:	f7f7 ffdc 	bl	8000534 <__aeabi_i2d>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4630      	mov	r0, r6
 8008582:	4639      	mov	r1, r7
 8008584:	f7f7 fe88 	bl	8000298 <__aeabi_dsub>
 8008588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800858a:	3330      	adds	r3, #48	; 0x30
 800858c:	f805 3b01 	strb.w	r3, [r5], #1
 8008590:	ec53 2b18 	vmov	r2, r3, d8
 8008594:	4606      	mov	r6, r0
 8008596:	460f      	mov	r7, r1
 8008598:	f7f8 faa8 	bl	8000aec <__aeabi_dcmplt>
 800859c:	2800      	cmp	r0, #0
 800859e:	d165      	bne.n	800866c <_dtoa_r+0x63c>
 80085a0:	4632      	mov	r2, r6
 80085a2:	463b      	mov	r3, r7
 80085a4:	4935      	ldr	r1, [pc, #212]	; (800867c <_dtoa_r+0x64c>)
 80085a6:	2000      	movs	r0, #0
 80085a8:	f7f7 fe76 	bl	8000298 <__aeabi_dsub>
 80085ac:	ec53 2b18 	vmov	r2, r3, d8
 80085b0:	f7f8 fa9c 	bl	8000aec <__aeabi_dcmplt>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	f040 80b9 	bne.w	800872c <_dtoa_r+0x6fc>
 80085ba:	9b02      	ldr	r3, [sp, #8]
 80085bc:	429d      	cmp	r5, r3
 80085be:	f43f af75 	beq.w	80084ac <_dtoa_r+0x47c>
 80085c2:	4b2f      	ldr	r3, [pc, #188]	; (8008680 <_dtoa_r+0x650>)
 80085c4:	ec51 0b18 	vmov	r0, r1, d8
 80085c8:	2200      	movs	r2, #0
 80085ca:	f7f8 f81d 	bl	8000608 <__aeabi_dmul>
 80085ce:	4b2c      	ldr	r3, [pc, #176]	; (8008680 <_dtoa_r+0x650>)
 80085d0:	ec41 0b18 	vmov	d8, r0, r1
 80085d4:	2200      	movs	r2, #0
 80085d6:	4630      	mov	r0, r6
 80085d8:	4639      	mov	r1, r7
 80085da:	f7f8 f815 	bl	8000608 <__aeabi_dmul>
 80085de:	4606      	mov	r6, r0
 80085e0:	460f      	mov	r7, r1
 80085e2:	e7c4      	b.n	800856e <_dtoa_r+0x53e>
 80085e4:	ec51 0b17 	vmov	r0, r1, d7
 80085e8:	f7f8 f80e 	bl	8000608 <__aeabi_dmul>
 80085ec:	9b02      	ldr	r3, [sp, #8]
 80085ee:	9d00      	ldr	r5, [sp, #0]
 80085f0:	930c      	str	r3, [sp, #48]	; 0x30
 80085f2:	ec41 0b18 	vmov	d8, r0, r1
 80085f6:	4639      	mov	r1, r7
 80085f8:	4630      	mov	r0, r6
 80085fa:	f7f8 fab5 	bl	8000b68 <__aeabi_d2iz>
 80085fe:	9011      	str	r0, [sp, #68]	; 0x44
 8008600:	f7f7 ff98 	bl	8000534 <__aeabi_i2d>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4630      	mov	r0, r6
 800860a:	4639      	mov	r1, r7
 800860c:	f7f7 fe44 	bl	8000298 <__aeabi_dsub>
 8008610:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008612:	3330      	adds	r3, #48	; 0x30
 8008614:	f805 3b01 	strb.w	r3, [r5], #1
 8008618:	9b02      	ldr	r3, [sp, #8]
 800861a:	429d      	cmp	r5, r3
 800861c:	4606      	mov	r6, r0
 800861e:	460f      	mov	r7, r1
 8008620:	f04f 0200 	mov.w	r2, #0
 8008624:	d134      	bne.n	8008690 <_dtoa_r+0x660>
 8008626:	4b19      	ldr	r3, [pc, #100]	; (800868c <_dtoa_r+0x65c>)
 8008628:	ec51 0b18 	vmov	r0, r1, d8
 800862c:	f7f7 fe36 	bl	800029c <__adddf3>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	4630      	mov	r0, r6
 8008636:	4639      	mov	r1, r7
 8008638:	f7f8 fa76 	bl	8000b28 <__aeabi_dcmpgt>
 800863c:	2800      	cmp	r0, #0
 800863e:	d175      	bne.n	800872c <_dtoa_r+0x6fc>
 8008640:	ec53 2b18 	vmov	r2, r3, d8
 8008644:	4911      	ldr	r1, [pc, #68]	; (800868c <_dtoa_r+0x65c>)
 8008646:	2000      	movs	r0, #0
 8008648:	f7f7 fe26 	bl	8000298 <__aeabi_dsub>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	4630      	mov	r0, r6
 8008652:	4639      	mov	r1, r7
 8008654:	f7f8 fa4a 	bl	8000aec <__aeabi_dcmplt>
 8008658:	2800      	cmp	r0, #0
 800865a:	f43f af27 	beq.w	80084ac <_dtoa_r+0x47c>
 800865e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008660:	1e6b      	subs	r3, r5, #1
 8008662:	930c      	str	r3, [sp, #48]	; 0x30
 8008664:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008668:	2b30      	cmp	r3, #48	; 0x30
 800866a:	d0f8      	beq.n	800865e <_dtoa_r+0x62e>
 800866c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008670:	e04a      	b.n	8008708 <_dtoa_r+0x6d8>
 8008672:	bf00      	nop
 8008674:	0800bf40 	.word	0x0800bf40
 8008678:	0800bf18 	.word	0x0800bf18
 800867c:	3ff00000 	.word	0x3ff00000
 8008680:	40240000 	.word	0x40240000
 8008684:	401c0000 	.word	0x401c0000
 8008688:	40140000 	.word	0x40140000
 800868c:	3fe00000 	.word	0x3fe00000
 8008690:	4baf      	ldr	r3, [pc, #700]	; (8008950 <_dtoa_r+0x920>)
 8008692:	f7f7 ffb9 	bl	8000608 <__aeabi_dmul>
 8008696:	4606      	mov	r6, r0
 8008698:	460f      	mov	r7, r1
 800869a:	e7ac      	b.n	80085f6 <_dtoa_r+0x5c6>
 800869c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80086a0:	9d00      	ldr	r5, [sp, #0]
 80086a2:	4642      	mov	r2, r8
 80086a4:	464b      	mov	r3, r9
 80086a6:	4630      	mov	r0, r6
 80086a8:	4639      	mov	r1, r7
 80086aa:	f7f8 f8d7 	bl	800085c <__aeabi_ddiv>
 80086ae:	f7f8 fa5b 	bl	8000b68 <__aeabi_d2iz>
 80086b2:	9002      	str	r0, [sp, #8]
 80086b4:	f7f7 ff3e 	bl	8000534 <__aeabi_i2d>
 80086b8:	4642      	mov	r2, r8
 80086ba:	464b      	mov	r3, r9
 80086bc:	f7f7 ffa4 	bl	8000608 <__aeabi_dmul>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	4630      	mov	r0, r6
 80086c6:	4639      	mov	r1, r7
 80086c8:	f7f7 fde6 	bl	8000298 <__aeabi_dsub>
 80086cc:	9e02      	ldr	r6, [sp, #8]
 80086ce:	9f01      	ldr	r7, [sp, #4]
 80086d0:	3630      	adds	r6, #48	; 0x30
 80086d2:	f805 6b01 	strb.w	r6, [r5], #1
 80086d6:	9e00      	ldr	r6, [sp, #0]
 80086d8:	1bae      	subs	r6, r5, r6
 80086da:	42b7      	cmp	r7, r6
 80086dc:	4602      	mov	r2, r0
 80086de:	460b      	mov	r3, r1
 80086e0:	d137      	bne.n	8008752 <_dtoa_r+0x722>
 80086e2:	f7f7 fddb 	bl	800029c <__adddf3>
 80086e6:	4642      	mov	r2, r8
 80086e8:	464b      	mov	r3, r9
 80086ea:	4606      	mov	r6, r0
 80086ec:	460f      	mov	r7, r1
 80086ee:	f7f8 fa1b 	bl	8000b28 <__aeabi_dcmpgt>
 80086f2:	b9c8      	cbnz	r0, 8008728 <_dtoa_r+0x6f8>
 80086f4:	4642      	mov	r2, r8
 80086f6:	464b      	mov	r3, r9
 80086f8:	4630      	mov	r0, r6
 80086fa:	4639      	mov	r1, r7
 80086fc:	f7f8 f9ec 	bl	8000ad8 <__aeabi_dcmpeq>
 8008700:	b110      	cbz	r0, 8008708 <_dtoa_r+0x6d8>
 8008702:	9b02      	ldr	r3, [sp, #8]
 8008704:	07d9      	lsls	r1, r3, #31
 8008706:	d40f      	bmi.n	8008728 <_dtoa_r+0x6f8>
 8008708:	4620      	mov	r0, r4
 800870a:	4659      	mov	r1, fp
 800870c:	f000 fad6 	bl	8008cbc <_Bfree>
 8008710:	2300      	movs	r3, #0
 8008712:	702b      	strb	r3, [r5, #0]
 8008714:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008716:	f10a 0001 	add.w	r0, sl, #1
 800871a:	6018      	str	r0, [r3, #0]
 800871c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800871e:	2b00      	cmp	r3, #0
 8008720:	f43f acd8 	beq.w	80080d4 <_dtoa_r+0xa4>
 8008724:	601d      	str	r5, [r3, #0]
 8008726:	e4d5      	b.n	80080d4 <_dtoa_r+0xa4>
 8008728:	f8cd a01c 	str.w	sl, [sp, #28]
 800872c:	462b      	mov	r3, r5
 800872e:	461d      	mov	r5, r3
 8008730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008734:	2a39      	cmp	r2, #57	; 0x39
 8008736:	d108      	bne.n	800874a <_dtoa_r+0x71a>
 8008738:	9a00      	ldr	r2, [sp, #0]
 800873a:	429a      	cmp	r2, r3
 800873c:	d1f7      	bne.n	800872e <_dtoa_r+0x6fe>
 800873e:	9a07      	ldr	r2, [sp, #28]
 8008740:	9900      	ldr	r1, [sp, #0]
 8008742:	3201      	adds	r2, #1
 8008744:	9207      	str	r2, [sp, #28]
 8008746:	2230      	movs	r2, #48	; 0x30
 8008748:	700a      	strb	r2, [r1, #0]
 800874a:	781a      	ldrb	r2, [r3, #0]
 800874c:	3201      	adds	r2, #1
 800874e:	701a      	strb	r2, [r3, #0]
 8008750:	e78c      	b.n	800866c <_dtoa_r+0x63c>
 8008752:	4b7f      	ldr	r3, [pc, #508]	; (8008950 <_dtoa_r+0x920>)
 8008754:	2200      	movs	r2, #0
 8008756:	f7f7 ff57 	bl	8000608 <__aeabi_dmul>
 800875a:	2200      	movs	r2, #0
 800875c:	2300      	movs	r3, #0
 800875e:	4606      	mov	r6, r0
 8008760:	460f      	mov	r7, r1
 8008762:	f7f8 f9b9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008766:	2800      	cmp	r0, #0
 8008768:	d09b      	beq.n	80086a2 <_dtoa_r+0x672>
 800876a:	e7cd      	b.n	8008708 <_dtoa_r+0x6d8>
 800876c:	9a08      	ldr	r2, [sp, #32]
 800876e:	2a00      	cmp	r2, #0
 8008770:	f000 80c4 	beq.w	80088fc <_dtoa_r+0x8cc>
 8008774:	9a05      	ldr	r2, [sp, #20]
 8008776:	2a01      	cmp	r2, #1
 8008778:	f300 80a8 	bgt.w	80088cc <_dtoa_r+0x89c>
 800877c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800877e:	2a00      	cmp	r2, #0
 8008780:	f000 80a0 	beq.w	80088c4 <_dtoa_r+0x894>
 8008784:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008788:	9e06      	ldr	r6, [sp, #24]
 800878a:	4645      	mov	r5, r8
 800878c:	9a04      	ldr	r2, [sp, #16]
 800878e:	2101      	movs	r1, #1
 8008790:	441a      	add	r2, r3
 8008792:	4620      	mov	r0, r4
 8008794:	4498      	add	r8, r3
 8008796:	9204      	str	r2, [sp, #16]
 8008798:	f000 fb4c 	bl	8008e34 <__i2b>
 800879c:	4607      	mov	r7, r0
 800879e:	2d00      	cmp	r5, #0
 80087a0:	dd0b      	ble.n	80087ba <_dtoa_r+0x78a>
 80087a2:	9b04      	ldr	r3, [sp, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	dd08      	ble.n	80087ba <_dtoa_r+0x78a>
 80087a8:	42ab      	cmp	r3, r5
 80087aa:	9a04      	ldr	r2, [sp, #16]
 80087ac:	bfa8      	it	ge
 80087ae:	462b      	movge	r3, r5
 80087b0:	eba8 0803 	sub.w	r8, r8, r3
 80087b4:	1aed      	subs	r5, r5, r3
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	9304      	str	r3, [sp, #16]
 80087ba:	9b06      	ldr	r3, [sp, #24]
 80087bc:	b1fb      	cbz	r3, 80087fe <_dtoa_r+0x7ce>
 80087be:	9b08      	ldr	r3, [sp, #32]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 809f 	beq.w	8008904 <_dtoa_r+0x8d4>
 80087c6:	2e00      	cmp	r6, #0
 80087c8:	dd11      	ble.n	80087ee <_dtoa_r+0x7be>
 80087ca:	4639      	mov	r1, r7
 80087cc:	4632      	mov	r2, r6
 80087ce:	4620      	mov	r0, r4
 80087d0:	f000 fbec 	bl	8008fac <__pow5mult>
 80087d4:	465a      	mov	r2, fp
 80087d6:	4601      	mov	r1, r0
 80087d8:	4607      	mov	r7, r0
 80087da:	4620      	mov	r0, r4
 80087dc:	f000 fb40 	bl	8008e60 <__multiply>
 80087e0:	4659      	mov	r1, fp
 80087e2:	9007      	str	r0, [sp, #28]
 80087e4:	4620      	mov	r0, r4
 80087e6:	f000 fa69 	bl	8008cbc <_Bfree>
 80087ea:	9b07      	ldr	r3, [sp, #28]
 80087ec:	469b      	mov	fp, r3
 80087ee:	9b06      	ldr	r3, [sp, #24]
 80087f0:	1b9a      	subs	r2, r3, r6
 80087f2:	d004      	beq.n	80087fe <_dtoa_r+0x7ce>
 80087f4:	4659      	mov	r1, fp
 80087f6:	4620      	mov	r0, r4
 80087f8:	f000 fbd8 	bl	8008fac <__pow5mult>
 80087fc:	4683      	mov	fp, r0
 80087fe:	2101      	movs	r1, #1
 8008800:	4620      	mov	r0, r4
 8008802:	f000 fb17 	bl	8008e34 <__i2b>
 8008806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008808:	2b00      	cmp	r3, #0
 800880a:	4606      	mov	r6, r0
 800880c:	dd7c      	ble.n	8008908 <_dtoa_r+0x8d8>
 800880e:	461a      	mov	r2, r3
 8008810:	4601      	mov	r1, r0
 8008812:	4620      	mov	r0, r4
 8008814:	f000 fbca 	bl	8008fac <__pow5mult>
 8008818:	9b05      	ldr	r3, [sp, #20]
 800881a:	2b01      	cmp	r3, #1
 800881c:	4606      	mov	r6, r0
 800881e:	dd76      	ble.n	800890e <_dtoa_r+0x8de>
 8008820:	2300      	movs	r3, #0
 8008822:	9306      	str	r3, [sp, #24]
 8008824:	6933      	ldr	r3, [r6, #16]
 8008826:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800882a:	6918      	ldr	r0, [r3, #16]
 800882c:	f000 fab2 	bl	8008d94 <__hi0bits>
 8008830:	f1c0 0020 	rsb	r0, r0, #32
 8008834:	9b04      	ldr	r3, [sp, #16]
 8008836:	4418      	add	r0, r3
 8008838:	f010 001f 	ands.w	r0, r0, #31
 800883c:	f000 8086 	beq.w	800894c <_dtoa_r+0x91c>
 8008840:	f1c0 0320 	rsb	r3, r0, #32
 8008844:	2b04      	cmp	r3, #4
 8008846:	dd7f      	ble.n	8008948 <_dtoa_r+0x918>
 8008848:	f1c0 001c 	rsb	r0, r0, #28
 800884c:	9b04      	ldr	r3, [sp, #16]
 800884e:	4403      	add	r3, r0
 8008850:	4480      	add	r8, r0
 8008852:	4405      	add	r5, r0
 8008854:	9304      	str	r3, [sp, #16]
 8008856:	f1b8 0f00 	cmp.w	r8, #0
 800885a:	dd05      	ble.n	8008868 <_dtoa_r+0x838>
 800885c:	4659      	mov	r1, fp
 800885e:	4642      	mov	r2, r8
 8008860:	4620      	mov	r0, r4
 8008862:	f000 fbfd 	bl	8009060 <__lshift>
 8008866:	4683      	mov	fp, r0
 8008868:	9b04      	ldr	r3, [sp, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	dd05      	ble.n	800887a <_dtoa_r+0x84a>
 800886e:	4631      	mov	r1, r6
 8008870:	461a      	mov	r2, r3
 8008872:	4620      	mov	r0, r4
 8008874:	f000 fbf4 	bl	8009060 <__lshift>
 8008878:	4606      	mov	r6, r0
 800887a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800887c:	2b00      	cmp	r3, #0
 800887e:	d069      	beq.n	8008954 <_dtoa_r+0x924>
 8008880:	4631      	mov	r1, r6
 8008882:	4658      	mov	r0, fp
 8008884:	f000 fc58 	bl	8009138 <__mcmp>
 8008888:	2800      	cmp	r0, #0
 800888a:	da63      	bge.n	8008954 <_dtoa_r+0x924>
 800888c:	2300      	movs	r3, #0
 800888e:	4659      	mov	r1, fp
 8008890:	220a      	movs	r2, #10
 8008892:	4620      	mov	r0, r4
 8008894:	f000 fa34 	bl	8008d00 <__multadd>
 8008898:	9b08      	ldr	r3, [sp, #32]
 800889a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800889e:	4683      	mov	fp, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 818f 	beq.w	8008bc4 <_dtoa_r+0xb94>
 80088a6:	4639      	mov	r1, r7
 80088a8:	2300      	movs	r3, #0
 80088aa:	220a      	movs	r2, #10
 80088ac:	4620      	mov	r0, r4
 80088ae:	f000 fa27 	bl	8008d00 <__multadd>
 80088b2:	f1b9 0f00 	cmp.w	r9, #0
 80088b6:	4607      	mov	r7, r0
 80088b8:	f300 808e 	bgt.w	80089d8 <_dtoa_r+0x9a8>
 80088bc:	9b05      	ldr	r3, [sp, #20]
 80088be:	2b02      	cmp	r3, #2
 80088c0:	dc50      	bgt.n	8008964 <_dtoa_r+0x934>
 80088c2:	e089      	b.n	80089d8 <_dtoa_r+0x9a8>
 80088c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088ca:	e75d      	b.n	8008788 <_dtoa_r+0x758>
 80088cc:	9b01      	ldr	r3, [sp, #4]
 80088ce:	1e5e      	subs	r6, r3, #1
 80088d0:	9b06      	ldr	r3, [sp, #24]
 80088d2:	42b3      	cmp	r3, r6
 80088d4:	bfbf      	itttt	lt
 80088d6:	9b06      	ldrlt	r3, [sp, #24]
 80088d8:	9606      	strlt	r6, [sp, #24]
 80088da:	1af2      	sublt	r2, r6, r3
 80088dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80088de:	bfb6      	itet	lt
 80088e0:	189b      	addlt	r3, r3, r2
 80088e2:	1b9e      	subge	r6, r3, r6
 80088e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80088e6:	9b01      	ldr	r3, [sp, #4]
 80088e8:	bfb8      	it	lt
 80088ea:	2600      	movlt	r6, #0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	bfb5      	itete	lt
 80088f0:	eba8 0503 	sublt.w	r5, r8, r3
 80088f4:	9b01      	ldrge	r3, [sp, #4]
 80088f6:	2300      	movlt	r3, #0
 80088f8:	4645      	movge	r5, r8
 80088fa:	e747      	b.n	800878c <_dtoa_r+0x75c>
 80088fc:	9e06      	ldr	r6, [sp, #24]
 80088fe:	9f08      	ldr	r7, [sp, #32]
 8008900:	4645      	mov	r5, r8
 8008902:	e74c      	b.n	800879e <_dtoa_r+0x76e>
 8008904:	9a06      	ldr	r2, [sp, #24]
 8008906:	e775      	b.n	80087f4 <_dtoa_r+0x7c4>
 8008908:	9b05      	ldr	r3, [sp, #20]
 800890a:	2b01      	cmp	r3, #1
 800890c:	dc18      	bgt.n	8008940 <_dtoa_r+0x910>
 800890e:	9b02      	ldr	r3, [sp, #8]
 8008910:	b9b3      	cbnz	r3, 8008940 <_dtoa_r+0x910>
 8008912:	9b03      	ldr	r3, [sp, #12]
 8008914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008918:	b9a3      	cbnz	r3, 8008944 <_dtoa_r+0x914>
 800891a:	9b03      	ldr	r3, [sp, #12]
 800891c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008920:	0d1b      	lsrs	r3, r3, #20
 8008922:	051b      	lsls	r3, r3, #20
 8008924:	b12b      	cbz	r3, 8008932 <_dtoa_r+0x902>
 8008926:	9b04      	ldr	r3, [sp, #16]
 8008928:	3301      	adds	r3, #1
 800892a:	9304      	str	r3, [sp, #16]
 800892c:	f108 0801 	add.w	r8, r8, #1
 8008930:	2301      	movs	r3, #1
 8008932:	9306      	str	r3, [sp, #24]
 8008934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008936:	2b00      	cmp	r3, #0
 8008938:	f47f af74 	bne.w	8008824 <_dtoa_r+0x7f4>
 800893c:	2001      	movs	r0, #1
 800893e:	e779      	b.n	8008834 <_dtoa_r+0x804>
 8008940:	2300      	movs	r3, #0
 8008942:	e7f6      	b.n	8008932 <_dtoa_r+0x902>
 8008944:	9b02      	ldr	r3, [sp, #8]
 8008946:	e7f4      	b.n	8008932 <_dtoa_r+0x902>
 8008948:	d085      	beq.n	8008856 <_dtoa_r+0x826>
 800894a:	4618      	mov	r0, r3
 800894c:	301c      	adds	r0, #28
 800894e:	e77d      	b.n	800884c <_dtoa_r+0x81c>
 8008950:	40240000 	.word	0x40240000
 8008954:	9b01      	ldr	r3, [sp, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	dc38      	bgt.n	80089cc <_dtoa_r+0x99c>
 800895a:	9b05      	ldr	r3, [sp, #20]
 800895c:	2b02      	cmp	r3, #2
 800895e:	dd35      	ble.n	80089cc <_dtoa_r+0x99c>
 8008960:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008964:	f1b9 0f00 	cmp.w	r9, #0
 8008968:	d10d      	bne.n	8008986 <_dtoa_r+0x956>
 800896a:	4631      	mov	r1, r6
 800896c:	464b      	mov	r3, r9
 800896e:	2205      	movs	r2, #5
 8008970:	4620      	mov	r0, r4
 8008972:	f000 f9c5 	bl	8008d00 <__multadd>
 8008976:	4601      	mov	r1, r0
 8008978:	4606      	mov	r6, r0
 800897a:	4658      	mov	r0, fp
 800897c:	f000 fbdc 	bl	8009138 <__mcmp>
 8008980:	2800      	cmp	r0, #0
 8008982:	f73f adbd 	bgt.w	8008500 <_dtoa_r+0x4d0>
 8008986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008988:	9d00      	ldr	r5, [sp, #0]
 800898a:	ea6f 0a03 	mvn.w	sl, r3
 800898e:	f04f 0800 	mov.w	r8, #0
 8008992:	4631      	mov	r1, r6
 8008994:	4620      	mov	r0, r4
 8008996:	f000 f991 	bl	8008cbc <_Bfree>
 800899a:	2f00      	cmp	r7, #0
 800899c:	f43f aeb4 	beq.w	8008708 <_dtoa_r+0x6d8>
 80089a0:	f1b8 0f00 	cmp.w	r8, #0
 80089a4:	d005      	beq.n	80089b2 <_dtoa_r+0x982>
 80089a6:	45b8      	cmp	r8, r7
 80089a8:	d003      	beq.n	80089b2 <_dtoa_r+0x982>
 80089aa:	4641      	mov	r1, r8
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 f985 	bl	8008cbc <_Bfree>
 80089b2:	4639      	mov	r1, r7
 80089b4:	4620      	mov	r0, r4
 80089b6:	f000 f981 	bl	8008cbc <_Bfree>
 80089ba:	e6a5      	b.n	8008708 <_dtoa_r+0x6d8>
 80089bc:	2600      	movs	r6, #0
 80089be:	4637      	mov	r7, r6
 80089c0:	e7e1      	b.n	8008986 <_dtoa_r+0x956>
 80089c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80089c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80089c8:	4637      	mov	r7, r6
 80089ca:	e599      	b.n	8008500 <_dtoa_r+0x4d0>
 80089cc:	9b08      	ldr	r3, [sp, #32]
 80089ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f000 80fd 	beq.w	8008bd2 <_dtoa_r+0xba2>
 80089d8:	2d00      	cmp	r5, #0
 80089da:	dd05      	ble.n	80089e8 <_dtoa_r+0x9b8>
 80089dc:	4639      	mov	r1, r7
 80089de:	462a      	mov	r2, r5
 80089e0:	4620      	mov	r0, r4
 80089e2:	f000 fb3d 	bl	8009060 <__lshift>
 80089e6:	4607      	mov	r7, r0
 80089e8:	9b06      	ldr	r3, [sp, #24]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d05c      	beq.n	8008aa8 <_dtoa_r+0xa78>
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	4620      	mov	r0, r4
 80089f2:	f000 f923 	bl	8008c3c <_Balloc>
 80089f6:	4605      	mov	r5, r0
 80089f8:	b928      	cbnz	r0, 8008a06 <_dtoa_r+0x9d6>
 80089fa:	4b80      	ldr	r3, [pc, #512]	; (8008bfc <_dtoa_r+0xbcc>)
 80089fc:	4602      	mov	r2, r0
 80089fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a02:	f7ff bb2e 	b.w	8008062 <_dtoa_r+0x32>
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	3202      	adds	r2, #2
 8008a0a:	0092      	lsls	r2, r2, #2
 8008a0c:	f107 010c 	add.w	r1, r7, #12
 8008a10:	300c      	adds	r0, #12
 8008a12:	f000 f905 	bl	8008c20 <memcpy>
 8008a16:	2201      	movs	r2, #1
 8008a18:	4629      	mov	r1, r5
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f000 fb20 	bl	8009060 <__lshift>
 8008a20:	9b00      	ldr	r3, [sp, #0]
 8008a22:	3301      	adds	r3, #1
 8008a24:	9301      	str	r3, [sp, #4]
 8008a26:	9b00      	ldr	r3, [sp, #0]
 8008a28:	444b      	add	r3, r9
 8008a2a:	9307      	str	r3, [sp, #28]
 8008a2c:	9b02      	ldr	r3, [sp, #8]
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	46b8      	mov	r8, r7
 8008a34:	9306      	str	r3, [sp, #24]
 8008a36:	4607      	mov	r7, r0
 8008a38:	9b01      	ldr	r3, [sp, #4]
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	4658      	mov	r0, fp
 8008a40:	9302      	str	r3, [sp, #8]
 8008a42:	f7ff fa69 	bl	8007f18 <quorem>
 8008a46:	4603      	mov	r3, r0
 8008a48:	3330      	adds	r3, #48	; 0x30
 8008a4a:	9004      	str	r0, [sp, #16]
 8008a4c:	4641      	mov	r1, r8
 8008a4e:	4658      	mov	r0, fp
 8008a50:	9308      	str	r3, [sp, #32]
 8008a52:	f000 fb71 	bl	8009138 <__mcmp>
 8008a56:	463a      	mov	r2, r7
 8008a58:	4681      	mov	r9, r0
 8008a5a:	4631      	mov	r1, r6
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f000 fb87 	bl	8009170 <__mdiff>
 8008a62:	68c2      	ldr	r2, [r0, #12]
 8008a64:	9b08      	ldr	r3, [sp, #32]
 8008a66:	4605      	mov	r5, r0
 8008a68:	bb02      	cbnz	r2, 8008aac <_dtoa_r+0xa7c>
 8008a6a:	4601      	mov	r1, r0
 8008a6c:	4658      	mov	r0, fp
 8008a6e:	f000 fb63 	bl	8009138 <__mcmp>
 8008a72:	9b08      	ldr	r3, [sp, #32]
 8008a74:	4602      	mov	r2, r0
 8008a76:	4629      	mov	r1, r5
 8008a78:	4620      	mov	r0, r4
 8008a7a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008a7e:	f000 f91d 	bl	8008cbc <_Bfree>
 8008a82:	9b05      	ldr	r3, [sp, #20]
 8008a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a86:	9d01      	ldr	r5, [sp, #4]
 8008a88:	ea43 0102 	orr.w	r1, r3, r2
 8008a8c:	9b06      	ldr	r3, [sp, #24]
 8008a8e:	430b      	orrs	r3, r1
 8008a90:	9b08      	ldr	r3, [sp, #32]
 8008a92:	d10d      	bne.n	8008ab0 <_dtoa_r+0xa80>
 8008a94:	2b39      	cmp	r3, #57	; 0x39
 8008a96:	d029      	beq.n	8008aec <_dtoa_r+0xabc>
 8008a98:	f1b9 0f00 	cmp.w	r9, #0
 8008a9c:	dd01      	ble.n	8008aa2 <_dtoa_r+0xa72>
 8008a9e:	9b04      	ldr	r3, [sp, #16]
 8008aa0:	3331      	adds	r3, #49	; 0x31
 8008aa2:	9a02      	ldr	r2, [sp, #8]
 8008aa4:	7013      	strb	r3, [r2, #0]
 8008aa6:	e774      	b.n	8008992 <_dtoa_r+0x962>
 8008aa8:	4638      	mov	r0, r7
 8008aaa:	e7b9      	b.n	8008a20 <_dtoa_r+0x9f0>
 8008aac:	2201      	movs	r2, #1
 8008aae:	e7e2      	b.n	8008a76 <_dtoa_r+0xa46>
 8008ab0:	f1b9 0f00 	cmp.w	r9, #0
 8008ab4:	db06      	blt.n	8008ac4 <_dtoa_r+0xa94>
 8008ab6:	9905      	ldr	r1, [sp, #20]
 8008ab8:	ea41 0909 	orr.w	r9, r1, r9
 8008abc:	9906      	ldr	r1, [sp, #24]
 8008abe:	ea59 0101 	orrs.w	r1, r9, r1
 8008ac2:	d120      	bne.n	8008b06 <_dtoa_r+0xad6>
 8008ac4:	2a00      	cmp	r2, #0
 8008ac6:	ddec      	ble.n	8008aa2 <_dtoa_r+0xa72>
 8008ac8:	4659      	mov	r1, fp
 8008aca:	2201      	movs	r2, #1
 8008acc:	4620      	mov	r0, r4
 8008ace:	9301      	str	r3, [sp, #4]
 8008ad0:	f000 fac6 	bl	8009060 <__lshift>
 8008ad4:	4631      	mov	r1, r6
 8008ad6:	4683      	mov	fp, r0
 8008ad8:	f000 fb2e 	bl	8009138 <__mcmp>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	9b01      	ldr	r3, [sp, #4]
 8008ae0:	dc02      	bgt.n	8008ae8 <_dtoa_r+0xab8>
 8008ae2:	d1de      	bne.n	8008aa2 <_dtoa_r+0xa72>
 8008ae4:	07da      	lsls	r2, r3, #31
 8008ae6:	d5dc      	bpl.n	8008aa2 <_dtoa_r+0xa72>
 8008ae8:	2b39      	cmp	r3, #57	; 0x39
 8008aea:	d1d8      	bne.n	8008a9e <_dtoa_r+0xa6e>
 8008aec:	9a02      	ldr	r2, [sp, #8]
 8008aee:	2339      	movs	r3, #57	; 0x39
 8008af0:	7013      	strb	r3, [r2, #0]
 8008af2:	462b      	mov	r3, r5
 8008af4:	461d      	mov	r5, r3
 8008af6:	3b01      	subs	r3, #1
 8008af8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008afc:	2a39      	cmp	r2, #57	; 0x39
 8008afe:	d050      	beq.n	8008ba2 <_dtoa_r+0xb72>
 8008b00:	3201      	adds	r2, #1
 8008b02:	701a      	strb	r2, [r3, #0]
 8008b04:	e745      	b.n	8008992 <_dtoa_r+0x962>
 8008b06:	2a00      	cmp	r2, #0
 8008b08:	dd03      	ble.n	8008b12 <_dtoa_r+0xae2>
 8008b0a:	2b39      	cmp	r3, #57	; 0x39
 8008b0c:	d0ee      	beq.n	8008aec <_dtoa_r+0xabc>
 8008b0e:	3301      	adds	r3, #1
 8008b10:	e7c7      	b.n	8008aa2 <_dtoa_r+0xa72>
 8008b12:	9a01      	ldr	r2, [sp, #4]
 8008b14:	9907      	ldr	r1, [sp, #28]
 8008b16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008b1a:	428a      	cmp	r2, r1
 8008b1c:	d02a      	beq.n	8008b74 <_dtoa_r+0xb44>
 8008b1e:	4659      	mov	r1, fp
 8008b20:	2300      	movs	r3, #0
 8008b22:	220a      	movs	r2, #10
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 f8eb 	bl	8008d00 <__multadd>
 8008b2a:	45b8      	cmp	r8, r7
 8008b2c:	4683      	mov	fp, r0
 8008b2e:	f04f 0300 	mov.w	r3, #0
 8008b32:	f04f 020a 	mov.w	r2, #10
 8008b36:	4641      	mov	r1, r8
 8008b38:	4620      	mov	r0, r4
 8008b3a:	d107      	bne.n	8008b4c <_dtoa_r+0xb1c>
 8008b3c:	f000 f8e0 	bl	8008d00 <__multadd>
 8008b40:	4680      	mov	r8, r0
 8008b42:	4607      	mov	r7, r0
 8008b44:	9b01      	ldr	r3, [sp, #4]
 8008b46:	3301      	adds	r3, #1
 8008b48:	9301      	str	r3, [sp, #4]
 8008b4a:	e775      	b.n	8008a38 <_dtoa_r+0xa08>
 8008b4c:	f000 f8d8 	bl	8008d00 <__multadd>
 8008b50:	4639      	mov	r1, r7
 8008b52:	4680      	mov	r8, r0
 8008b54:	2300      	movs	r3, #0
 8008b56:	220a      	movs	r2, #10
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f000 f8d1 	bl	8008d00 <__multadd>
 8008b5e:	4607      	mov	r7, r0
 8008b60:	e7f0      	b.n	8008b44 <_dtoa_r+0xb14>
 8008b62:	f1b9 0f00 	cmp.w	r9, #0
 8008b66:	9a00      	ldr	r2, [sp, #0]
 8008b68:	bfcc      	ite	gt
 8008b6a:	464d      	movgt	r5, r9
 8008b6c:	2501      	movle	r5, #1
 8008b6e:	4415      	add	r5, r2
 8008b70:	f04f 0800 	mov.w	r8, #0
 8008b74:	4659      	mov	r1, fp
 8008b76:	2201      	movs	r2, #1
 8008b78:	4620      	mov	r0, r4
 8008b7a:	9301      	str	r3, [sp, #4]
 8008b7c:	f000 fa70 	bl	8009060 <__lshift>
 8008b80:	4631      	mov	r1, r6
 8008b82:	4683      	mov	fp, r0
 8008b84:	f000 fad8 	bl	8009138 <__mcmp>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	dcb2      	bgt.n	8008af2 <_dtoa_r+0xac2>
 8008b8c:	d102      	bne.n	8008b94 <_dtoa_r+0xb64>
 8008b8e:	9b01      	ldr	r3, [sp, #4]
 8008b90:	07db      	lsls	r3, r3, #31
 8008b92:	d4ae      	bmi.n	8008af2 <_dtoa_r+0xac2>
 8008b94:	462b      	mov	r3, r5
 8008b96:	461d      	mov	r5, r3
 8008b98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b9c:	2a30      	cmp	r2, #48	; 0x30
 8008b9e:	d0fa      	beq.n	8008b96 <_dtoa_r+0xb66>
 8008ba0:	e6f7      	b.n	8008992 <_dtoa_r+0x962>
 8008ba2:	9a00      	ldr	r2, [sp, #0]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d1a5      	bne.n	8008af4 <_dtoa_r+0xac4>
 8008ba8:	f10a 0a01 	add.w	sl, sl, #1
 8008bac:	2331      	movs	r3, #49	; 0x31
 8008bae:	e779      	b.n	8008aa4 <_dtoa_r+0xa74>
 8008bb0:	4b13      	ldr	r3, [pc, #76]	; (8008c00 <_dtoa_r+0xbd0>)
 8008bb2:	f7ff baaf 	b.w	8008114 <_dtoa_r+0xe4>
 8008bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f47f aa86 	bne.w	80080ca <_dtoa_r+0x9a>
 8008bbe:	4b11      	ldr	r3, [pc, #68]	; (8008c04 <_dtoa_r+0xbd4>)
 8008bc0:	f7ff baa8 	b.w	8008114 <_dtoa_r+0xe4>
 8008bc4:	f1b9 0f00 	cmp.w	r9, #0
 8008bc8:	dc03      	bgt.n	8008bd2 <_dtoa_r+0xba2>
 8008bca:	9b05      	ldr	r3, [sp, #20]
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	f73f aec9 	bgt.w	8008964 <_dtoa_r+0x934>
 8008bd2:	9d00      	ldr	r5, [sp, #0]
 8008bd4:	4631      	mov	r1, r6
 8008bd6:	4658      	mov	r0, fp
 8008bd8:	f7ff f99e 	bl	8007f18 <quorem>
 8008bdc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008be0:	f805 3b01 	strb.w	r3, [r5], #1
 8008be4:	9a00      	ldr	r2, [sp, #0]
 8008be6:	1aaa      	subs	r2, r5, r2
 8008be8:	4591      	cmp	r9, r2
 8008bea:	ddba      	ble.n	8008b62 <_dtoa_r+0xb32>
 8008bec:	4659      	mov	r1, fp
 8008bee:	2300      	movs	r3, #0
 8008bf0:	220a      	movs	r2, #10
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f000 f884 	bl	8008d00 <__multadd>
 8008bf8:	4683      	mov	fp, r0
 8008bfa:	e7eb      	b.n	8008bd4 <_dtoa_r+0xba4>
 8008bfc:	0800bea3 	.word	0x0800bea3
 8008c00:	0800bdfc 	.word	0x0800bdfc
 8008c04:	0800be20 	.word	0x0800be20

08008c08 <_localeconv_r>:
 8008c08:	4800      	ldr	r0, [pc, #0]	; (8008c0c <_localeconv_r+0x4>)
 8008c0a:	4770      	bx	lr
 8008c0c:	20000180 	.word	0x20000180

08008c10 <malloc>:
 8008c10:	4b02      	ldr	r3, [pc, #8]	; (8008c1c <malloc+0xc>)
 8008c12:	4601      	mov	r1, r0
 8008c14:	6818      	ldr	r0, [r3, #0]
 8008c16:	f000 bbef 	b.w	80093f8 <_malloc_r>
 8008c1a:	bf00      	nop
 8008c1c:	2000002c 	.word	0x2000002c

08008c20 <memcpy>:
 8008c20:	440a      	add	r2, r1
 8008c22:	4291      	cmp	r1, r2
 8008c24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008c28:	d100      	bne.n	8008c2c <memcpy+0xc>
 8008c2a:	4770      	bx	lr
 8008c2c:	b510      	push	{r4, lr}
 8008c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c36:	4291      	cmp	r1, r2
 8008c38:	d1f9      	bne.n	8008c2e <memcpy+0xe>
 8008c3a:	bd10      	pop	{r4, pc}

08008c3c <_Balloc>:
 8008c3c:	b570      	push	{r4, r5, r6, lr}
 8008c3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c40:	4604      	mov	r4, r0
 8008c42:	460d      	mov	r5, r1
 8008c44:	b976      	cbnz	r6, 8008c64 <_Balloc+0x28>
 8008c46:	2010      	movs	r0, #16
 8008c48:	f7ff ffe2 	bl	8008c10 <malloc>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	6260      	str	r0, [r4, #36]	; 0x24
 8008c50:	b920      	cbnz	r0, 8008c5c <_Balloc+0x20>
 8008c52:	4b18      	ldr	r3, [pc, #96]	; (8008cb4 <_Balloc+0x78>)
 8008c54:	4818      	ldr	r0, [pc, #96]	; (8008cb8 <_Balloc+0x7c>)
 8008c56:	2166      	movs	r1, #102	; 0x66
 8008c58:	f000 fd94 	bl	8009784 <__assert_func>
 8008c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c60:	6006      	str	r6, [r0, #0]
 8008c62:	60c6      	str	r6, [r0, #12]
 8008c64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c66:	68f3      	ldr	r3, [r6, #12]
 8008c68:	b183      	cbz	r3, 8008c8c <_Balloc+0x50>
 8008c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c72:	b9b8      	cbnz	r0, 8008ca4 <_Balloc+0x68>
 8008c74:	2101      	movs	r1, #1
 8008c76:	fa01 f605 	lsl.w	r6, r1, r5
 8008c7a:	1d72      	adds	r2, r6, #5
 8008c7c:	0092      	lsls	r2, r2, #2
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f000 fb5a 	bl	8009338 <_calloc_r>
 8008c84:	b160      	cbz	r0, 8008ca0 <_Balloc+0x64>
 8008c86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c8a:	e00e      	b.n	8008caa <_Balloc+0x6e>
 8008c8c:	2221      	movs	r2, #33	; 0x21
 8008c8e:	2104      	movs	r1, #4
 8008c90:	4620      	mov	r0, r4
 8008c92:	f000 fb51 	bl	8009338 <_calloc_r>
 8008c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c98:	60f0      	str	r0, [r6, #12]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e4      	bne.n	8008c6a <_Balloc+0x2e>
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}
 8008ca4:	6802      	ldr	r2, [r0, #0]
 8008ca6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008caa:	2300      	movs	r3, #0
 8008cac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cb0:	e7f7      	b.n	8008ca2 <_Balloc+0x66>
 8008cb2:	bf00      	nop
 8008cb4:	0800be2d 	.word	0x0800be2d
 8008cb8:	0800beb4 	.word	0x0800beb4

08008cbc <_Bfree>:
 8008cbc:	b570      	push	{r4, r5, r6, lr}
 8008cbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	b976      	cbnz	r6, 8008ce4 <_Bfree+0x28>
 8008cc6:	2010      	movs	r0, #16
 8008cc8:	f7ff ffa2 	bl	8008c10 <malloc>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	6268      	str	r0, [r5, #36]	; 0x24
 8008cd0:	b920      	cbnz	r0, 8008cdc <_Bfree+0x20>
 8008cd2:	4b09      	ldr	r3, [pc, #36]	; (8008cf8 <_Bfree+0x3c>)
 8008cd4:	4809      	ldr	r0, [pc, #36]	; (8008cfc <_Bfree+0x40>)
 8008cd6:	218a      	movs	r1, #138	; 0x8a
 8008cd8:	f000 fd54 	bl	8009784 <__assert_func>
 8008cdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ce0:	6006      	str	r6, [r0, #0]
 8008ce2:	60c6      	str	r6, [r0, #12]
 8008ce4:	b13c      	cbz	r4, 8008cf6 <_Bfree+0x3a>
 8008ce6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ce8:	6862      	ldr	r2, [r4, #4]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cf0:	6021      	str	r1, [r4, #0]
 8008cf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cf6:	bd70      	pop	{r4, r5, r6, pc}
 8008cf8:	0800be2d 	.word	0x0800be2d
 8008cfc:	0800beb4 	.word	0x0800beb4

08008d00 <__multadd>:
 8008d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d04:	690e      	ldr	r6, [r1, #16]
 8008d06:	4607      	mov	r7, r0
 8008d08:	4698      	mov	r8, r3
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	f101 0014 	add.w	r0, r1, #20
 8008d10:	2300      	movs	r3, #0
 8008d12:	6805      	ldr	r5, [r0, #0]
 8008d14:	b2a9      	uxth	r1, r5
 8008d16:	fb02 8101 	mla	r1, r2, r1, r8
 8008d1a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008d1e:	0c2d      	lsrs	r5, r5, #16
 8008d20:	fb02 c505 	mla	r5, r2, r5, ip
 8008d24:	b289      	uxth	r1, r1
 8008d26:	3301      	adds	r3, #1
 8008d28:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008d2c:	429e      	cmp	r6, r3
 8008d2e:	f840 1b04 	str.w	r1, [r0], #4
 8008d32:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008d36:	dcec      	bgt.n	8008d12 <__multadd+0x12>
 8008d38:	f1b8 0f00 	cmp.w	r8, #0
 8008d3c:	d022      	beq.n	8008d84 <__multadd+0x84>
 8008d3e:	68a3      	ldr	r3, [r4, #8]
 8008d40:	42b3      	cmp	r3, r6
 8008d42:	dc19      	bgt.n	8008d78 <__multadd+0x78>
 8008d44:	6861      	ldr	r1, [r4, #4]
 8008d46:	4638      	mov	r0, r7
 8008d48:	3101      	adds	r1, #1
 8008d4a:	f7ff ff77 	bl	8008c3c <_Balloc>
 8008d4e:	4605      	mov	r5, r0
 8008d50:	b928      	cbnz	r0, 8008d5e <__multadd+0x5e>
 8008d52:	4602      	mov	r2, r0
 8008d54:	4b0d      	ldr	r3, [pc, #52]	; (8008d8c <__multadd+0x8c>)
 8008d56:	480e      	ldr	r0, [pc, #56]	; (8008d90 <__multadd+0x90>)
 8008d58:	21b5      	movs	r1, #181	; 0xb5
 8008d5a:	f000 fd13 	bl	8009784 <__assert_func>
 8008d5e:	6922      	ldr	r2, [r4, #16]
 8008d60:	3202      	adds	r2, #2
 8008d62:	f104 010c 	add.w	r1, r4, #12
 8008d66:	0092      	lsls	r2, r2, #2
 8008d68:	300c      	adds	r0, #12
 8008d6a:	f7ff ff59 	bl	8008c20 <memcpy>
 8008d6e:	4621      	mov	r1, r4
 8008d70:	4638      	mov	r0, r7
 8008d72:	f7ff ffa3 	bl	8008cbc <_Bfree>
 8008d76:	462c      	mov	r4, r5
 8008d78:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008d7c:	3601      	adds	r6, #1
 8008d7e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008d82:	6126      	str	r6, [r4, #16]
 8008d84:	4620      	mov	r0, r4
 8008d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d8a:	bf00      	nop
 8008d8c:	0800bea3 	.word	0x0800bea3
 8008d90:	0800beb4 	.word	0x0800beb4

08008d94 <__hi0bits>:
 8008d94:	0c03      	lsrs	r3, r0, #16
 8008d96:	041b      	lsls	r3, r3, #16
 8008d98:	b9d3      	cbnz	r3, 8008dd0 <__hi0bits+0x3c>
 8008d9a:	0400      	lsls	r0, r0, #16
 8008d9c:	2310      	movs	r3, #16
 8008d9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008da2:	bf04      	itt	eq
 8008da4:	0200      	lsleq	r0, r0, #8
 8008da6:	3308      	addeq	r3, #8
 8008da8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008dac:	bf04      	itt	eq
 8008dae:	0100      	lsleq	r0, r0, #4
 8008db0:	3304      	addeq	r3, #4
 8008db2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008db6:	bf04      	itt	eq
 8008db8:	0080      	lsleq	r0, r0, #2
 8008dba:	3302      	addeq	r3, #2
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	db05      	blt.n	8008dcc <__hi0bits+0x38>
 8008dc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008dc4:	f103 0301 	add.w	r3, r3, #1
 8008dc8:	bf08      	it	eq
 8008dca:	2320      	moveq	r3, #32
 8008dcc:	4618      	mov	r0, r3
 8008dce:	4770      	bx	lr
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	e7e4      	b.n	8008d9e <__hi0bits+0xa>

08008dd4 <__lo0bits>:
 8008dd4:	6803      	ldr	r3, [r0, #0]
 8008dd6:	f013 0207 	ands.w	r2, r3, #7
 8008dda:	4601      	mov	r1, r0
 8008ddc:	d00b      	beq.n	8008df6 <__lo0bits+0x22>
 8008dde:	07da      	lsls	r2, r3, #31
 8008de0:	d424      	bmi.n	8008e2c <__lo0bits+0x58>
 8008de2:	0798      	lsls	r0, r3, #30
 8008de4:	bf49      	itett	mi
 8008de6:	085b      	lsrmi	r3, r3, #1
 8008de8:	089b      	lsrpl	r3, r3, #2
 8008dea:	2001      	movmi	r0, #1
 8008dec:	600b      	strmi	r3, [r1, #0]
 8008dee:	bf5c      	itt	pl
 8008df0:	600b      	strpl	r3, [r1, #0]
 8008df2:	2002      	movpl	r0, #2
 8008df4:	4770      	bx	lr
 8008df6:	b298      	uxth	r0, r3
 8008df8:	b9b0      	cbnz	r0, 8008e28 <__lo0bits+0x54>
 8008dfa:	0c1b      	lsrs	r3, r3, #16
 8008dfc:	2010      	movs	r0, #16
 8008dfe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008e02:	bf04      	itt	eq
 8008e04:	0a1b      	lsreq	r3, r3, #8
 8008e06:	3008      	addeq	r0, #8
 8008e08:	071a      	lsls	r2, r3, #28
 8008e0a:	bf04      	itt	eq
 8008e0c:	091b      	lsreq	r3, r3, #4
 8008e0e:	3004      	addeq	r0, #4
 8008e10:	079a      	lsls	r2, r3, #30
 8008e12:	bf04      	itt	eq
 8008e14:	089b      	lsreq	r3, r3, #2
 8008e16:	3002      	addeq	r0, #2
 8008e18:	07da      	lsls	r2, r3, #31
 8008e1a:	d403      	bmi.n	8008e24 <__lo0bits+0x50>
 8008e1c:	085b      	lsrs	r3, r3, #1
 8008e1e:	f100 0001 	add.w	r0, r0, #1
 8008e22:	d005      	beq.n	8008e30 <__lo0bits+0x5c>
 8008e24:	600b      	str	r3, [r1, #0]
 8008e26:	4770      	bx	lr
 8008e28:	4610      	mov	r0, r2
 8008e2a:	e7e8      	b.n	8008dfe <__lo0bits+0x2a>
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	4770      	bx	lr
 8008e30:	2020      	movs	r0, #32
 8008e32:	4770      	bx	lr

08008e34 <__i2b>:
 8008e34:	b510      	push	{r4, lr}
 8008e36:	460c      	mov	r4, r1
 8008e38:	2101      	movs	r1, #1
 8008e3a:	f7ff feff 	bl	8008c3c <_Balloc>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	b928      	cbnz	r0, 8008e4e <__i2b+0x1a>
 8008e42:	4b05      	ldr	r3, [pc, #20]	; (8008e58 <__i2b+0x24>)
 8008e44:	4805      	ldr	r0, [pc, #20]	; (8008e5c <__i2b+0x28>)
 8008e46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e4a:	f000 fc9b 	bl	8009784 <__assert_func>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	6144      	str	r4, [r0, #20]
 8008e52:	6103      	str	r3, [r0, #16]
 8008e54:	bd10      	pop	{r4, pc}
 8008e56:	bf00      	nop
 8008e58:	0800bea3 	.word	0x0800bea3
 8008e5c:	0800beb4 	.word	0x0800beb4

08008e60 <__multiply>:
 8008e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	4614      	mov	r4, r2
 8008e66:	690a      	ldr	r2, [r1, #16]
 8008e68:	6923      	ldr	r3, [r4, #16]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	bfb8      	it	lt
 8008e6e:	460b      	movlt	r3, r1
 8008e70:	460d      	mov	r5, r1
 8008e72:	bfbc      	itt	lt
 8008e74:	4625      	movlt	r5, r4
 8008e76:	461c      	movlt	r4, r3
 8008e78:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008e7c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008e80:	68ab      	ldr	r3, [r5, #8]
 8008e82:	6869      	ldr	r1, [r5, #4]
 8008e84:	eb0a 0709 	add.w	r7, sl, r9
 8008e88:	42bb      	cmp	r3, r7
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	bfb8      	it	lt
 8008e8e:	3101      	addlt	r1, #1
 8008e90:	f7ff fed4 	bl	8008c3c <_Balloc>
 8008e94:	b930      	cbnz	r0, 8008ea4 <__multiply+0x44>
 8008e96:	4602      	mov	r2, r0
 8008e98:	4b42      	ldr	r3, [pc, #264]	; (8008fa4 <__multiply+0x144>)
 8008e9a:	4843      	ldr	r0, [pc, #268]	; (8008fa8 <__multiply+0x148>)
 8008e9c:	f240 115d 	movw	r1, #349	; 0x15d
 8008ea0:	f000 fc70 	bl	8009784 <__assert_func>
 8008ea4:	f100 0614 	add.w	r6, r0, #20
 8008ea8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008eac:	4633      	mov	r3, r6
 8008eae:	2200      	movs	r2, #0
 8008eb0:	4543      	cmp	r3, r8
 8008eb2:	d31e      	bcc.n	8008ef2 <__multiply+0x92>
 8008eb4:	f105 0c14 	add.w	ip, r5, #20
 8008eb8:	f104 0314 	add.w	r3, r4, #20
 8008ebc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008ec0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008ec4:	9202      	str	r2, [sp, #8]
 8008ec6:	ebac 0205 	sub.w	r2, ip, r5
 8008eca:	3a15      	subs	r2, #21
 8008ecc:	f022 0203 	bic.w	r2, r2, #3
 8008ed0:	3204      	adds	r2, #4
 8008ed2:	f105 0115 	add.w	r1, r5, #21
 8008ed6:	458c      	cmp	ip, r1
 8008ed8:	bf38      	it	cc
 8008eda:	2204      	movcc	r2, #4
 8008edc:	9201      	str	r2, [sp, #4]
 8008ede:	9a02      	ldr	r2, [sp, #8]
 8008ee0:	9303      	str	r3, [sp, #12]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d808      	bhi.n	8008ef8 <__multiply+0x98>
 8008ee6:	2f00      	cmp	r7, #0
 8008ee8:	dc55      	bgt.n	8008f96 <__multiply+0x136>
 8008eea:	6107      	str	r7, [r0, #16]
 8008eec:	b005      	add	sp, #20
 8008eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef2:	f843 2b04 	str.w	r2, [r3], #4
 8008ef6:	e7db      	b.n	8008eb0 <__multiply+0x50>
 8008ef8:	f8b3 a000 	ldrh.w	sl, [r3]
 8008efc:	f1ba 0f00 	cmp.w	sl, #0
 8008f00:	d020      	beq.n	8008f44 <__multiply+0xe4>
 8008f02:	f105 0e14 	add.w	lr, r5, #20
 8008f06:	46b1      	mov	r9, r6
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008f0e:	f8d9 b000 	ldr.w	fp, [r9]
 8008f12:	b2a1      	uxth	r1, r4
 8008f14:	fa1f fb8b 	uxth.w	fp, fp
 8008f18:	fb0a b101 	mla	r1, sl, r1, fp
 8008f1c:	4411      	add	r1, r2
 8008f1e:	f8d9 2000 	ldr.w	r2, [r9]
 8008f22:	0c24      	lsrs	r4, r4, #16
 8008f24:	0c12      	lsrs	r2, r2, #16
 8008f26:	fb0a 2404 	mla	r4, sl, r4, r2
 8008f2a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008f2e:	b289      	uxth	r1, r1
 8008f30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008f34:	45f4      	cmp	ip, lr
 8008f36:	f849 1b04 	str.w	r1, [r9], #4
 8008f3a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008f3e:	d8e4      	bhi.n	8008f0a <__multiply+0xaa>
 8008f40:	9901      	ldr	r1, [sp, #4]
 8008f42:	5072      	str	r2, [r6, r1]
 8008f44:	9a03      	ldr	r2, [sp, #12]
 8008f46:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	f1b9 0f00 	cmp.w	r9, #0
 8008f50:	d01f      	beq.n	8008f92 <__multiply+0x132>
 8008f52:	6834      	ldr	r4, [r6, #0]
 8008f54:	f105 0114 	add.w	r1, r5, #20
 8008f58:	46b6      	mov	lr, r6
 8008f5a:	f04f 0a00 	mov.w	sl, #0
 8008f5e:	880a      	ldrh	r2, [r1, #0]
 8008f60:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008f64:	fb09 b202 	mla	r2, r9, r2, fp
 8008f68:	4492      	add	sl, r2
 8008f6a:	b2a4      	uxth	r4, r4
 8008f6c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008f70:	f84e 4b04 	str.w	r4, [lr], #4
 8008f74:	f851 4b04 	ldr.w	r4, [r1], #4
 8008f78:	f8be 2000 	ldrh.w	r2, [lr]
 8008f7c:	0c24      	lsrs	r4, r4, #16
 8008f7e:	fb09 2404 	mla	r4, r9, r4, r2
 8008f82:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008f86:	458c      	cmp	ip, r1
 8008f88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008f8c:	d8e7      	bhi.n	8008f5e <__multiply+0xfe>
 8008f8e:	9a01      	ldr	r2, [sp, #4]
 8008f90:	50b4      	str	r4, [r6, r2]
 8008f92:	3604      	adds	r6, #4
 8008f94:	e7a3      	b.n	8008ede <__multiply+0x7e>
 8008f96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1a5      	bne.n	8008eea <__multiply+0x8a>
 8008f9e:	3f01      	subs	r7, #1
 8008fa0:	e7a1      	b.n	8008ee6 <__multiply+0x86>
 8008fa2:	bf00      	nop
 8008fa4:	0800bea3 	.word	0x0800bea3
 8008fa8:	0800beb4 	.word	0x0800beb4

08008fac <__pow5mult>:
 8008fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb0:	4615      	mov	r5, r2
 8008fb2:	f012 0203 	ands.w	r2, r2, #3
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	460f      	mov	r7, r1
 8008fba:	d007      	beq.n	8008fcc <__pow5mult+0x20>
 8008fbc:	4c25      	ldr	r4, [pc, #148]	; (8009054 <__pow5mult+0xa8>)
 8008fbe:	3a01      	subs	r2, #1
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fc6:	f7ff fe9b 	bl	8008d00 <__multadd>
 8008fca:	4607      	mov	r7, r0
 8008fcc:	10ad      	asrs	r5, r5, #2
 8008fce:	d03d      	beq.n	800904c <__pow5mult+0xa0>
 8008fd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008fd2:	b97c      	cbnz	r4, 8008ff4 <__pow5mult+0x48>
 8008fd4:	2010      	movs	r0, #16
 8008fd6:	f7ff fe1b 	bl	8008c10 <malloc>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	6270      	str	r0, [r6, #36]	; 0x24
 8008fde:	b928      	cbnz	r0, 8008fec <__pow5mult+0x40>
 8008fe0:	4b1d      	ldr	r3, [pc, #116]	; (8009058 <__pow5mult+0xac>)
 8008fe2:	481e      	ldr	r0, [pc, #120]	; (800905c <__pow5mult+0xb0>)
 8008fe4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008fe8:	f000 fbcc 	bl	8009784 <__assert_func>
 8008fec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ff0:	6004      	str	r4, [r0, #0]
 8008ff2:	60c4      	str	r4, [r0, #12]
 8008ff4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ff8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ffc:	b94c      	cbnz	r4, 8009012 <__pow5mult+0x66>
 8008ffe:	f240 2171 	movw	r1, #625	; 0x271
 8009002:	4630      	mov	r0, r6
 8009004:	f7ff ff16 	bl	8008e34 <__i2b>
 8009008:	2300      	movs	r3, #0
 800900a:	f8c8 0008 	str.w	r0, [r8, #8]
 800900e:	4604      	mov	r4, r0
 8009010:	6003      	str	r3, [r0, #0]
 8009012:	f04f 0900 	mov.w	r9, #0
 8009016:	07eb      	lsls	r3, r5, #31
 8009018:	d50a      	bpl.n	8009030 <__pow5mult+0x84>
 800901a:	4639      	mov	r1, r7
 800901c:	4622      	mov	r2, r4
 800901e:	4630      	mov	r0, r6
 8009020:	f7ff ff1e 	bl	8008e60 <__multiply>
 8009024:	4639      	mov	r1, r7
 8009026:	4680      	mov	r8, r0
 8009028:	4630      	mov	r0, r6
 800902a:	f7ff fe47 	bl	8008cbc <_Bfree>
 800902e:	4647      	mov	r7, r8
 8009030:	106d      	asrs	r5, r5, #1
 8009032:	d00b      	beq.n	800904c <__pow5mult+0xa0>
 8009034:	6820      	ldr	r0, [r4, #0]
 8009036:	b938      	cbnz	r0, 8009048 <__pow5mult+0x9c>
 8009038:	4622      	mov	r2, r4
 800903a:	4621      	mov	r1, r4
 800903c:	4630      	mov	r0, r6
 800903e:	f7ff ff0f 	bl	8008e60 <__multiply>
 8009042:	6020      	str	r0, [r4, #0]
 8009044:	f8c0 9000 	str.w	r9, [r0]
 8009048:	4604      	mov	r4, r0
 800904a:	e7e4      	b.n	8009016 <__pow5mult+0x6a>
 800904c:	4638      	mov	r0, r7
 800904e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009052:	bf00      	nop
 8009054:	0800c008 	.word	0x0800c008
 8009058:	0800be2d 	.word	0x0800be2d
 800905c:	0800beb4 	.word	0x0800beb4

08009060 <__lshift>:
 8009060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009064:	460c      	mov	r4, r1
 8009066:	6849      	ldr	r1, [r1, #4]
 8009068:	6923      	ldr	r3, [r4, #16]
 800906a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800906e:	68a3      	ldr	r3, [r4, #8]
 8009070:	4607      	mov	r7, r0
 8009072:	4691      	mov	r9, r2
 8009074:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009078:	f108 0601 	add.w	r6, r8, #1
 800907c:	42b3      	cmp	r3, r6
 800907e:	db0b      	blt.n	8009098 <__lshift+0x38>
 8009080:	4638      	mov	r0, r7
 8009082:	f7ff fddb 	bl	8008c3c <_Balloc>
 8009086:	4605      	mov	r5, r0
 8009088:	b948      	cbnz	r0, 800909e <__lshift+0x3e>
 800908a:	4602      	mov	r2, r0
 800908c:	4b28      	ldr	r3, [pc, #160]	; (8009130 <__lshift+0xd0>)
 800908e:	4829      	ldr	r0, [pc, #164]	; (8009134 <__lshift+0xd4>)
 8009090:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009094:	f000 fb76 	bl	8009784 <__assert_func>
 8009098:	3101      	adds	r1, #1
 800909a:	005b      	lsls	r3, r3, #1
 800909c:	e7ee      	b.n	800907c <__lshift+0x1c>
 800909e:	2300      	movs	r3, #0
 80090a0:	f100 0114 	add.w	r1, r0, #20
 80090a4:	f100 0210 	add.w	r2, r0, #16
 80090a8:	4618      	mov	r0, r3
 80090aa:	4553      	cmp	r3, sl
 80090ac:	db33      	blt.n	8009116 <__lshift+0xb6>
 80090ae:	6920      	ldr	r0, [r4, #16]
 80090b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090b4:	f104 0314 	add.w	r3, r4, #20
 80090b8:	f019 091f 	ands.w	r9, r9, #31
 80090bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090c4:	d02b      	beq.n	800911e <__lshift+0xbe>
 80090c6:	f1c9 0e20 	rsb	lr, r9, #32
 80090ca:	468a      	mov	sl, r1
 80090cc:	2200      	movs	r2, #0
 80090ce:	6818      	ldr	r0, [r3, #0]
 80090d0:	fa00 f009 	lsl.w	r0, r0, r9
 80090d4:	4302      	orrs	r2, r0
 80090d6:	f84a 2b04 	str.w	r2, [sl], #4
 80090da:	f853 2b04 	ldr.w	r2, [r3], #4
 80090de:	459c      	cmp	ip, r3
 80090e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80090e4:	d8f3      	bhi.n	80090ce <__lshift+0x6e>
 80090e6:	ebac 0304 	sub.w	r3, ip, r4
 80090ea:	3b15      	subs	r3, #21
 80090ec:	f023 0303 	bic.w	r3, r3, #3
 80090f0:	3304      	adds	r3, #4
 80090f2:	f104 0015 	add.w	r0, r4, #21
 80090f6:	4584      	cmp	ip, r0
 80090f8:	bf38      	it	cc
 80090fa:	2304      	movcc	r3, #4
 80090fc:	50ca      	str	r2, [r1, r3]
 80090fe:	b10a      	cbz	r2, 8009104 <__lshift+0xa4>
 8009100:	f108 0602 	add.w	r6, r8, #2
 8009104:	3e01      	subs	r6, #1
 8009106:	4638      	mov	r0, r7
 8009108:	612e      	str	r6, [r5, #16]
 800910a:	4621      	mov	r1, r4
 800910c:	f7ff fdd6 	bl	8008cbc <_Bfree>
 8009110:	4628      	mov	r0, r5
 8009112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009116:	f842 0f04 	str.w	r0, [r2, #4]!
 800911a:	3301      	adds	r3, #1
 800911c:	e7c5      	b.n	80090aa <__lshift+0x4a>
 800911e:	3904      	subs	r1, #4
 8009120:	f853 2b04 	ldr.w	r2, [r3], #4
 8009124:	f841 2f04 	str.w	r2, [r1, #4]!
 8009128:	459c      	cmp	ip, r3
 800912a:	d8f9      	bhi.n	8009120 <__lshift+0xc0>
 800912c:	e7ea      	b.n	8009104 <__lshift+0xa4>
 800912e:	bf00      	nop
 8009130:	0800bea3 	.word	0x0800bea3
 8009134:	0800beb4 	.word	0x0800beb4

08009138 <__mcmp>:
 8009138:	b530      	push	{r4, r5, lr}
 800913a:	6902      	ldr	r2, [r0, #16]
 800913c:	690c      	ldr	r4, [r1, #16]
 800913e:	1b12      	subs	r2, r2, r4
 8009140:	d10e      	bne.n	8009160 <__mcmp+0x28>
 8009142:	f100 0314 	add.w	r3, r0, #20
 8009146:	3114      	adds	r1, #20
 8009148:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800914c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009150:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009154:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009158:	42a5      	cmp	r5, r4
 800915a:	d003      	beq.n	8009164 <__mcmp+0x2c>
 800915c:	d305      	bcc.n	800916a <__mcmp+0x32>
 800915e:	2201      	movs	r2, #1
 8009160:	4610      	mov	r0, r2
 8009162:	bd30      	pop	{r4, r5, pc}
 8009164:	4283      	cmp	r3, r0
 8009166:	d3f3      	bcc.n	8009150 <__mcmp+0x18>
 8009168:	e7fa      	b.n	8009160 <__mcmp+0x28>
 800916a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800916e:	e7f7      	b.n	8009160 <__mcmp+0x28>

08009170 <__mdiff>:
 8009170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009174:	460c      	mov	r4, r1
 8009176:	4606      	mov	r6, r0
 8009178:	4611      	mov	r1, r2
 800917a:	4620      	mov	r0, r4
 800917c:	4617      	mov	r7, r2
 800917e:	f7ff ffdb 	bl	8009138 <__mcmp>
 8009182:	1e05      	subs	r5, r0, #0
 8009184:	d110      	bne.n	80091a8 <__mdiff+0x38>
 8009186:	4629      	mov	r1, r5
 8009188:	4630      	mov	r0, r6
 800918a:	f7ff fd57 	bl	8008c3c <_Balloc>
 800918e:	b930      	cbnz	r0, 800919e <__mdiff+0x2e>
 8009190:	4b39      	ldr	r3, [pc, #228]	; (8009278 <__mdiff+0x108>)
 8009192:	4602      	mov	r2, r0
 8009194:	f240 2132 	movw	r1, #562	; 0x232
 8009198:	4838      	ldr	r0, [pc, #224]	; (800927c <__mdiff+0x10c>)
 800919a:	f000 faf3 	bl	8009784 <__assert_func>
 800919e:	2301      	movs	r3, #1
 80091a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a8:	bfa4      	itt	ge
 80091aa:	463b      	movge	r3, r7
 80091ac:	4627      	movge	r7, r4
 80091ae:	4630      	mov	r0, r6
 80091b0:	6879      	ldr	r1, [r7, #4]
 80091b2:	bfa6      	itte	ge
 80091b4:	461c      	movge	r4, r3
 80091b6:	2500      	movge	r5, #0
 80091b8:	2501      	movlt	r5, #1
 80091ba:	f7ff fd3f 	bl	8008c3c <_Balloc>
 80091be:	b920      	cbnz	r0, 80091ca <__mdiff+0x5a>
 80091c0:	4b2d      	ldr	r3, [pc, #180]	; (8009278 <__mdiff+0x108>)
 80091c2:	4602      	mov	r2, r0
 80091c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80091c8:	e7e6      	b.n	8009198 <__mdiff+0x28>
 80091ca:	693e      	ldr	r6, [r7, #16]
 80091cc:	60c5      	str	r5, [r0, #12]
 80091ce:	6925      	ldr	r5, [r4, #16]
 80091d0:	f107 0114 	add.w	r1, r7, #20
 80091d4:	f104 0914 	add.w	r9, r4, #20
 80091d8:	f100 0e14 	add.w	lr, r0, #20
 80091dc:	f107 0210 	add.w	r2, r7, #16
 80091e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80091e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80091e8:	46f2      	mov	sl, lr
 80091ea:	2700      	movs	r7, #0
 80091ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80091f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80091f4:	fa1f f883 	uxth.w	r8, r3
 80091f8:	fa17 f78b 	uxtah	r7, r7, fp
 80091fc:	0c1b      	lsrs	r3, r3, #16
 80091fe:	eba7 0808 	sub.w	r8, r7, r8
 8009202:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009206:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800920a:	fa1f f888 	uxth.w	r8, r8
 800920e:	141f      	asrs	r7, r3, #16
 8009210:	454d      	cmp	r5, r9
 8009212:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009216:	f84a 3b04 	str.w	r3, [sl], #4
 800921a:	d8e7      	bhi.n	80091ec <__mdiff+0x7c>
 800921c:	1b2b      	subs	r3, r5, r4
 800921e:	3b15      	subs	r3, #21
 8009220:	f023 0303 	bic.w	r3, r3, #3
 8009224:	3304      	adds	r3, #4
 8009226:	3415      	adds	r4, #21
 8009228:	42a5      	cmp	r5, r4
 800922a:	bf38      	it	cc
 800922c:	2304      	movcc	r3, #4
 800922e:	4419      	add	r1, r3
 8009230:	4473      	add	r3, lr
 8009232:	469e      	mov	lr, r3
 8009234:	460d      	mov	r5, r1
 8009236:	4565      	cmp	r5, ip
 8009238:	d30e      	bcc.n	8009258 <__mdiff+0xe8>
 800923a:	f10c 0203 	add.w	r2, ip, #3
 800923e:	1a52      	subs	r2, r2, r1
 8009240:	f022 0203 	bic.w	r2, r2, #3
 8009244:	3903      	subs	r1, #3
 8009246:	458c      	cmp	ip, r1
 8009248:	bf38      	it	cc
 800924a:	2200      	movcc	r2, #0
 800924c:	441a      	add	r2, r3
 800924e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009252:	b17b      	cbz	r3, 8009274 <__mdiff+0x104>
 8009254:	6106      	str	r6, [r0, #16]
 8009256:	e7a5      	b.n	80091a4 <__mdiff+0x34>
 8009258:	f855 8b04 	ldr.w	r8, [r5], #4
 800925c:	fa17 f488 	uxtah	r4, r7, r8
 8009260:	1422      	asrs	r2, r4, #16
 8009262:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009266:	b2a4      	uxth	r4, r4
 8009268:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800926c:	f84e 4b04 	str.w	r4, [lr], #4
 8009270:	1417      	asrs	r7, r2, #16
 8009272:	e7e0      	b.n	8009236 <__mdiff+0xc6>
 8009274:	3e01      	subs	r6, #1
 8009276:	e7ea      	b.n	800924e <__mdiff+0xde>
 8009278:	0800bea3 	.word	0x0800bea3
 800927c:	0800beb4 	.word	0x0800beb4

08009280 <__d2b>:
 8009280:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009284:	4689      	mov	r9, r1
 8009286:	2101      	movs	r1, #1
 8009288:	ec57 6b10 	vmov	r6, r7, d0
 800928c:	4690      	mov	r8, r2
 800928e:	f7ff fcd5 	bl	8008c3c <_Balloc>
 8009292:	4604      	mov	r4, r0
 8009294:	b930      	cbnz	r0, 80092a4 <__d2b+0x24>
 8009296:	4602      	mov	r2, r0
 8009298:	4b25      	ldr	r3, [pc, #148]	; (8009330 <__d2b+0xb0>)
 800929a:	4826      	ldr	r0, [pc, #152]	; (8009334 <__d2b+0xb4>)
 800929c:	f240 310a 	movw	r1, #778	; 0x30a
 80092a0:	f000 fa70 	bl	8009784 <__assert_func>
 80092a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80092a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092ac:	bb35      	cbnz	r5, 80092fc <__d2b+0x7c>
 80092ae:	2e00      	cmp	r6, #0
 80092b0:	9301      	str	r3, [sp, #4]
 80092b2:	d028      	beq.n	8009306 <__d2b+0x86>
 80092b4:	4668      	mov	r0, sp
 80092b6:	9600      	str	r6, [sp, #0]
 80092b8:	f7ff fd8c 	bl	8008dd4 <__lo0bits>
 80092bc:	9900      	ldr	r1, [sp, #0]
 80092be:	b300      	cbz	r0, 8009302 <__d2b+0x82>
 80092c0:	9a01      	ldr	r2, [sp, #4]
 80092c2:	f1c0 0320 	rsb	r3, r0, #32
 80092c6:	fa02 f303 	lsl.w	r3, r2, r3
 80092ca:	430b      	orrs	r3, r1
 80092cc:	40c2      	lsrs	r2, r0
 80092ce:	6163      	str	r3, [r4, #20]
 80092d0:	9201      	str	r2, [sp, #4]
 80092d2:	9b01      	ldr	r3, [sp, #4]
 80092d4:	61a3      	str	r3, [r4, #24]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	bf14      	ite	ne
 80092da:	2202      	movne	r2, #2
 80092dc:	2201      	moveq	r2, #1
 80092de:	6122      	str	r2, [r4, #16]
 80092e0:	b1d5      	cbz	r5, 8009318 <__d2b+0x98>
 80092e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80092e6:	4405      	add	r5, r0
 80092e8:	f8c9 5000 	str.w	r5, [r9]
 80092ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80092f0:	f8c8 0000 	str.w	r0, [r8]
 80092f4:	4620      	mov	r0, r4
 80092f6:	b003      	add	sp, #12
 80092f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009300:	e7d5      	b.n	80092ae <__d2b+0x2e>
 8009302:	6161      	str	r1, [r4, #20]
 8009304:	e7e5      	b.n	80092d2 <__d2b+0x52>
 8009306:	a801      	add	r0, sp, #4
 8009308:	f7ff fd64 	bl	8008dd4 <__lo0bits>
 800930c:	9b01      	ldr	r3, [sp, #4]
 800930e:	6163      	str	r3, [r4, #20]
 8009310:	2201      	movs	r2, #1
 8009312:	6122      	str	r2, [r4, #16]
 8009314:	3020      	adds	r0, #32
 8009316:	e7e3      	b.n	80092e0 <__d2b+0x60>
 8009318:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800931c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009320:	f8c9 0000 	str.w	r0, [r9]
 8009324:	6918      	ldr	r0, [r3, #16]
 8009326:	f7ff fd35 	bl	8008d94 <__hi0bits>
 800932a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800932e:	e7df      	b.n	80092f0 <__d2b+0x70>
 8009330:	0800bea3 	.word	0x0800bea3
 8009334:	0800beb4 	.word	0x0800beb4

08009338 <_calloc_r>:
 8009338:	b513      	push	{r0, r1, r4, lr}
 800933a:	434a      	muls	r2, r1
 800933c:	4611      	mov	r1, r2
 800933e:	9201      	str	r2, [sp, #4]
 8009340:	f000 f85a 	bl	80093f8 <_malloc_r>
 8009344:	4604      	mov	r4, r0
 8009346:	b118      	cbz	r0, 8009350 <_calloc_r+0x18>
 8009348:	9a01      	ldr	r2, [sp, #4]
 800934a:	2100      	movs	r1, #0
 800934c:	f7fe f952 	bl	80075f4 <memset>
 8009350:	4620      	mov	r0, r4
 8009352:	b002      	add	sp, #8
 8009354:	bd10      	pop	{r4, pc}
	...

08009358 <_free_r>:
 8009358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800935a:	2900      	cmp	r1, #0
 800935c:	d048      	beq.n	80093f0 <_free_r+0x98>
 800935e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009362:	9001      	str	r0, [sp, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	f1a1 0404 	sub.w	r4, r1, #4
 800936a:	bfb8      	it	lt
 800936c:	18e4      	addlt	r4, r4, r3
 800936e:	f000 fa65 	bl	800983c <__malloc_lock>
 8009372:	4a20      	ldr	r2, [pc, #128]	; (80093f4 <_free_r+0x9c>)
 8009374:	9801      	ldr	r0, [sp, #4]
 8009376:	6813      	ldr	r3, [r2, #0]
 8009378:	4615      	mov	r5, r2
 800937a:	b933      	cbnz	r3, 800938a <_free_r+0x32>
 800937c:	6063      	str	r3, [r4, #4]
 800937e:	6014      	str	r4, [r2, #0]
 8009380:	b003      	add	sp, #12
 8009382:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009386:	f000 ba5f 	b.w	8009848 <__malloc_unlock>
 800938a:	42a3      	cmp	r3, r4
 800938c:	d90b      	bls.n	80093a6 <_free_r+0x4e>
 800938e:	6821      	ldr	r1, [r4, #0]
 8009390:	1862      	adds	r2, r4, r1
 8009392:	4293      	cmp	r3, r2
 8009394:	bf04      	itt	eq
 8009396:	681a      	ldreq	r2, [r3, #0]
 8009398:	685b      	ldreq	r3, [r3, #4]
 800939a:	6063      	str	r3, [r4, #4]
 800939c:	bf04      	itt	eq
 800939e:	1852      	addeq	r2, r2, r1
 80093a0:	6022      	streq	r2, [r4, #0]
 80093a2:	602c      	str	r4, [r5, #0]
 80093a4:	e7ec      	b.n	8009380 <_free_r+0x28>
 80093a6:	461a      	mov	r2, r3
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	b10b      	cbz	r3, 80093b0 <_free_r+0x58>
 80093ac:	42a3      	cmp	r3, r4
 80093ae:	d9fa      	bls.n	80093a6 <_free_r+0x4e>
 80093b0:	6811      	ldr	r1, [r2, #0]
 80093b2:	1855      	adds	r5, r2, r1
 80093b4:	42a5      	cmp	r5, r4
 80093b6:	d10b      	bne.n	80093d0 <_free_r+0x78>
 80093b8:	6824      	ldr	r4, [r4, #0]
 80093ba:	4421      	add	r1, r4
 80093bc:	1854      	adds	r4, r2, r1
 80093be:	42a3      	cmp	r3, r4
 80093c0:	6011      	str	r1, [r2, #0]
 80093c2:	d1dd      	bne.n	8009380 <_free_r+0x28>
 80093c4:	681c      	ldr	r4, [r3, #0]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	6053      	str	r3, [r2, #4]
 80093ca:	4421      	add	r1, r4
 80093cc:	6011      	str	r1, [r2, #0]
 80093ce:	e7d7      	b.n	8009380 <_free_r+0x28>
 80093d0:	d902      	bls.n	80093d8 <_free_r+0x80>
 80093d2:	230c      	movs	r3, #12
 80093d4:	6003      	str	r3, [r0, #0]
 80093d6:	e7d3      	b.n	8009380 <_free_r+0x28>
 80093d8:	6825      	ldr	r5, [r4, #0]
 80093da:	1961      	adds	r1, r4, r5
 80093dc:	428b      	cmp	r3, r1
 80093de:	bf04      	itt	eq
 80093e0:	6819      	ldreq	r1, [r3, #0]
 80093e2:	685b      	ldreq	r3, [r3, #4]
 80093e4:	6063      	str	r3, [r4, #4]
 80093e6:	bf04      	itt	eq
 80093e8:	1949      	addeq	r1, r1, r5
 80093ea:	6021      	streq	r1, [r4, #0]
 80093ec:	6054      	str	r4, [r2, #4]
 80093ee:	e7c7      	b.n	8009380 <_free_r+0x28>
 80093f0:	b003      	add	sp, #12
 80093f2:	bd30      	pop	{r4, r5, pc}
 80093f4:	20000230 	.word	0x20000230

080093f8 <_malloc_r>:
 80093f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fa:	1ccd      	adds	r5, r1, #3
 80093fc:	f025 0503 	bic.w	r5, r5, #3
 8009400:	3508      	adds	r5, #8
 8009402:	2d0c      	cmp	r5, #12
 8009404:	bf38      	it	cc
 8009406:	250c      	movcc	r5, #12
 8009408:	2d00      	cmp	r5, #0
 800940a:	4606      	mov	r6, r0
 800940c:	db01      	blt.n	8009412 <_malloc_r+0x1a>
 800940e:	42a9      	cmp	r1, r5
 8009410:	d903      	bls.n	800941a <_malloc_r+0x22>
 8009412:	230c      	movs	r3, #12
 8009414:	6033      	str	r3, [r6, #0]
 8009416:	2000      	movs	r0, #0
 8009418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800941a:	f000 fa0f 	bl	800983c <__malloc_lock>
 800941e:	4921      	ldr	r1, [pc, #132]	; (80094a4 <_malloc_r+0xac>)
 8009420:	680a      	ldr	r2, [r1, #0]
 8009422:	4614      	mov	r4, r2
 8009424:	b99c      	cbnz	r4, 800944e <_malloc_r+0x56>
 8009426:	4f20      	ldr	r7, [pc, #128]	; (80094a8 <_malloc_r+0xb0>)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	b923      	cbnz	r3, 8009436 <_malloc_r+0x3e>
 800942c:	4621      	mov	r1, r4
 800942e:	4630      	mov	r0, r6
 8009430:	f000 f998 	bl	8009764 <_sbrk_r>
 8009434:	6038      	str	r0, [r7, #0]
 8009436:	4629      	mov	r1, r5
 8009438:	4630      	mov	r0, r6
 800943a:	f000 f993 	bl	8009764 <_sbrk_r>
 800943e:	1c43      	adds	r3, r0, #1
 8009440:	d123      	bne.n	800948a <_malloc_r+0x92>
 8009442:	230c      	movs	r3, #12
 8009444:	6033      	str	r3, [r6, #0]
 8009446:	4630      	mov	r0, r6
 8009448:	f000 f9fe 	bl	8009848 <__malloc_unlock>
 800944c:	e7e3      	b.n	8009416 <_malloc_r+0x1e>
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	1b5b      	subs	r3, r3, r5
 8009452:	d417      	bmi.n	8009484 <_malloc_r+0x8c>
 8009454:	2b0b      	cmp	r3, #11
 8009456:	d903      	bls.n	8009460 <_malloc_r+0x68>
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	441c      	add	r4, r3
 800945c:	6025      	str	r5, [r4, #0]
 800945e:	e004      	b.n	800946a <_malloc_r+0x72>
 8009460:	6863      	ldr	r3, [r4, #4]
 8009462:	42a2      	cmp	r2, r4
 8009464:	bf0c      	ite	eq
 8009466:	600b      	streq	r3, [r1, #0]
 8009468:	6053      	strne	r3, [r2, #4]
 800946a:	4630      	mov	r0, r6
 800946c:	f000 f9ec 	bl	8009848 <__malloc_unlock>
 8009470:	f104 000b 	add.w	r0, r4, #11
 8009474:	1d23      	adds	r3, r4, #4
 8009476:	f020 0007 	bic.w	r0, r0, #7
 800947a:	1ac2      	subs	r2, r0, r3
 800947c:	d0cc      	beq.n	8009418 <_malloc_r+0x20>
 800947e:	1a1b      	subs	r3, r3, r0
 8009480:	50a3      	str	r3, [r4, r2]
 8009482:	e7c9      	b.n	8009418 <_malloc_r+0x20>
 8009484:	4622      	mov	r2, r4
 8009486:	6864      	ldr	r4, [r4, #4]
 8009488:	e7cc      	b.n	8009424 <_malloc_r+0x2c>
 800948a:	1cc4      	adds	r4, r0, #3
 800948c:	f024 0403 	bic.w	r4, r4, #3
 8009490:	42a0      	cmp	r0, r4
 8009492:	d0e3      	beq.n	800945c <_malloc_r+0x64>
 8009494:	1a21      	subs	r1, r4, r0
 8009496:	4630      	mov	r0, r6
 8009498:	f000 f964 	bl	8009764 <_sbrk_r>
 800949c:	3001      	adds	r0, #1
 800949e:	d1dd      	bne.n	800945c <_malloc_r+0x64>
 80094a0:	e7cf      	b.n	8009442 <_malloc_r+0x4a>
 80094a2:	bf00      	nop
 80094a4:	20000230 	.word	0x20000230
 80094a8:	20000234 	.word	0x20000234

080094ac <__ssputs_r>:
 80094ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094b0:	688e      	ldr	r6, [r1, #8]
 80094b2:	429e      	cmp	r6, r3
 80094b4:	4682      	mov	sl, r0
 80094b6:	460c      	mov	r4, r1
 80094b8:	4690      	mov	r8, r2
 80094ba:	461f      	mov	r7, r3
 80094bc:	d838      	bhi.n	8009530 <__ssputs_r+0x84>
 80094be:	898a      	ldrh	r2, [r1, #12]
 80094c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094c4:	d032      	beq.n	800952c <__ssputs_r+0x80>
 80094c6:	6825      	ldr	r5, [r4, #0]
 80094c8:	6909      	ldr	r1, [r1, #16]
 80094ca:	eba5 0901 	sub.w	r9, r5, r1
 80094ce:	6965      	ldr	r5, [r4, #20]
 80094d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094d8:	3301      	adds	r3, #1
 80094da:	444b      	add	r3, r9
 80094dc:	106d      	asrs	r5, r5, #1
 80094de:	429d      	cmp	r5, r3
 80094e0:	bf38      	it	cc
 80094e2:	461d      	movcc	r5, r3
 80094e4:	0553      	lsls	r3, r2, #21
 80094e6:	d531      	bpl.n	800954c <__ssputs_r+0xa0>
 80094e8:	4629      	mov	r1, r5
 80094ea:	f7ff ff85 	bl	80093f8 <_malloc_r>
 80094ee:	4606      	mov	r6, r0
 80094f0:	b950      	cbnz	r0, 8009508 <__ssputs_r+0x5c>
 80094f2:	230c      	movs	r3, #12
 80094f4:	f8ca 3000 	str.w	r3, [sl]
 80094f8:	89a3      	ldrh	r3, [r4, #12]
 80094fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094fe:	81a3      	strh	r3, [r4, #12]
 8009500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009508:	6921      	ldr	r1, [r4, #16]
 800950a:	464a      	mov	r2, r9
 800950c:	f7ff fb88 	bl	8008c20 <memcpy>
 8009510:	89a3      	ldrh	r3, [r4, #12]
 8009512:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800951a:	81a3      	strh	r3, [r4, #12]
 800951c:	6126      	str	r6, [r4, #16]
 800951e:	6165      	str	r5, [r4, #20]
 8009520:	444e      	add	r6, r9
 8009522:	eba5 0509 	sub.w	r5, r5, r9
 8009526:	6026      	str	r6, [r4, #0]
 8009528:	60a5      	str	r5, [r4, #8]
 800952a:	463e      	mov	r6, r7
 800952c:	42be      	cmp	r6, r7
 800952e:	d900      	bls.n	8009532 <__ssputs_r+0x86>
 8009530:	463e      	mov	r6, r7
 8009532:	4632      	mov	r2, r6
 8009534:	6820      	ldr	r0, [r4, #0]
 8009536:	4641      	mov	r1, r8
 8009538:	f000 f966 	bl	8009808 <memmove>
 800953c:	68a3      	ldr	r3, [r4, #8]
 800953e:	6822      	ldr	r2, [r4, #0]
 8009540:	1b9b      	subs	r3, r3, r6
 8009542:	4432      	add	r2, r6
 8009544:	60a3      	str	r3, [r4, #8]
 8009546:	6022      	str	r2, [r4, #0]
 8009548:	2000      	movs	r0, #0
 800954a:	e7db      	b.n	8009504 <__ssputs_r+0x58>
 800954c:	462a      	mov	r2, r5
 800954e:	f000 f981 	bl	8009854 <_realloc_r>
 8009552:	4606      	mov	r6, r0
 8009554:	2800      	cmp	r0, #0
 8009556:	d1e1      	bne.n	800951c <__ssputs_r+0x70>
 8009558:	6921      	ldr	r1, [r4, #16]
 800955a:	4650      	mov	r0, sl
 800955c:	f7ff fefc 	bl	8009358 <_free_r>
 8009560:	e7c7      	b.n	80094f2 <__ssputs_r+0x46>
	...

08009564 <_svfiprintf_r>:
 8009564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009568:	4698      	mov	r8, r3
 800956a:	898b      	ldrh	r3, [r1, #12]
 800956c:	061b      	lsls	r3, r3, #24
 800956e:	b09d      	sub	sp, #116	; 0x74
 8009570:	4607      	mov	r7, r0
 8009572:	460d      	mov	r5, r1
 8009574:	4614      	mov	r4, r2
 8009576:	d50e      	bpl.n	8009596 <_svfiprintf_r+0x32>
 8009578:	690b      	ldr	r3, [r1, #16]
 800957a:	b963      	cbnz	r3, 8009596 <_svfiprintf_r+0x32>
 800957c:	2140      	movs	r1, #64	; 0x40
 800957e:	f7ff ff3b 	bl	80093f8 <_malloc_r>
 8009582:	6028      	str	r0, [r5, #0]
 8009584:	6128      	str	r0, [r5, #16]
 8009586:	b920      	cbnz	r0, 8009592 <_svfiprintf_r+0x2e>
 8009588:	230c      	movs	r3, #12
 800958a:	603b      	str	r3, [r7, #0]
 800958c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009590:	e0d1      	b.n	8009736 <_svfiprintf_r+0x1d2>
 8009592:	2340      	movs	r3, #64	; 0x40
 8009594:	616b      	str	r3, [r5, #20]
 8009596:	2300      	movs	r3, #0
 8009598:	9309      	str	r3, [sp, #36]	; 0x24
 800959a:	2320      	movs	r3, #32
 800959c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80095a4:	2330      	movs	r3, #48	; 0x30
 80095a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009750 <_svfiprintf_r+0x1ec>
 80095aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095ae:	f04f 0901 	mov.w	r9, #1
 80095b2:	4623      	mov	r3, r4
 80095b4:	469a      	mov	sl, r3
 80095b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095ba:	b10a      	cbz	r2, 80095c0 <_svfiprintf_r+0x5c>
 80095bc:	2a25      	cmp	r2, #37	; 0x25
 80095be:	d1f9      	bne.n	80095b4 <_svfiprintf_r+0x50>
 80095c0:	ebba 0b04 	subs.w	fp, sl, r4
 80095c4:	d00b      	beq.n	80095de <_svfiprintf_r+0x7a>
 80095c6:	465b      	mov	r3, fp
 80095c8:	4622      	mov	r2, r4
 80095ca:	4629      	mov	r1, r5
 80095cc:	4638      	mov	r0, r7
 80095ce:	f7ff ff6d 	bl	80094ac <__ssputs_r>
 80095d2:	3001      	adds	r0, #1
 80095d4:	f000 80aa 	beq.w	800972c <_svfiprintf_r+0x1c8>
 80095d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095da:	445a      	add	r2, fp
 80095dc:	9209      	str	r2, [sp, #36]	; 0x24
 80095de:	f89a 3000 	ldrb.w	r3, [sl]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f000 80a2 	beq.w	800972c <_svfiprintf_r+0x1c8>
 80095e8:	2300      	movs	r3, #0
 80095ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095f2:	f10a 0a01 	add.w	sl, sl, #1
 80095f6:	9304      	str	r3, [sp, #16]
 80095f8:	9307      	str	r3, [sp, #28]
 80095fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095fe:	931a      	str	r3, [sp, #104]	; 0x68
 8009600:	4654      	mov	r4, sl
 8009602:	2205      	movs	r2, #5
 8009604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009608:	4851      	ldr	r0, [pc, #324]	; (8009750 <_svfiprintf_r+0x1ec>)
 800960a:	f7f6 fdf1 	bl	80001f0 <memchr>
 800960e:	9a04      	ldr	r2, [sp, #16]
 8009610:	b9d8      	cbnz	r0, 800964a <_svfiprintf_r+0xe6>
 8009612:	06d0      	lsls	r0, r2, #27
 8009614:	bf44      	itt	mi
 8009616:	2320      	movmi	r3, #32
 8009618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800961c:	0711      	lsls	r1, r2, #28
 800961e:	bf44      	itt	mi
 8009620:	232b      	movmi	r3, #43	; 0x2b
 8009622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009626:	f89a 3000 	ldrb.w	r3, [sl]
 800962a:	2b2a      	cmp	r3, #42	; 0x2a
 800962c:	d015      	beq.n	800965a <_svfiprintf_r+0xf6>
 800962e:	9a07      	ldr	r2, [sp, #28]
 8009630:	4654      	mov	r4, sl
 8009632:	2000      	movs	r0, #0
 8009634:	f04f 0c0a 	mov.w	ip, #10
 8009638:	4621      	mov	r1, r4
 800963a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800963e:	3b30      	subs	r3, #48	; 0x30
 8009640:	2b09      	cmp	r3, #9
 8009642:	d94e      	bls.n	80096e2 <_svfiprintf_r+0x17e>
 8009644:	b1b0      	cbz	r0, 8009674 <_svfiprintf_r+0x110>
 8009646:	9207      	str	r2, [sp, #28]
 8009648:	e014      	b.n	8009674 <_svfiprintf_r+0x110>
 800964a:	eba0 0308 	sub.w	r3, r0, r8
 800964e:	fa09 f303 	lsl.w	r3, r9, r3
 8009652:	4313      	orrs	r3, r2
 8009654:	9304      	str	r3, [sp, #16]
 8009656:	46a2      	mov	sl, r4
 8009658:	e7d2      	b.n	8009600 <_svfiprintf_r+0x9c>
 800965a:	9b03      	ldr	r3, [sp, #12]
 800965c:	1d19      	adds	r1, r3, #4
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	9103      	str	r1, [sp, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	bfbb      	ittet	lt
 8009666:	425b      	neglt	r3, r3
 8009668:	f042 0202 	orrlt.w	r2, r2, #2
 800966c:	9307      	strge	r3, [sp, #28]
 800966e:	9307      	strlt	r3, [sp, #28]
 8009670:	bfb8      	it	lt
 8009672:	9204      	strlt	r2, [sp, #16]
 8009674:	7823      	ldrb	r3, [r4, #0]
 8009676:	2b2e      	cmp	r3, #46	; 0x2e
 8009678:	d10c      	bne.n	8009694 <_svfiprintf_r+0x130>
 800967a:	7863      	ldrb	r3, [r4, #1]
 800967c:	2b2a      	cmp	r3, #42	; 0x2a
 800967e:	d135      	bne.n	80096ec <_svfiprintf_r+0x188>
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	1d1a      	adds	r2, r3, #4
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	9203      	str	r2, [sp, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	bfb8      	it	lt
 800968c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009690:	3402      	adds	r4, #2
 8009692:	9305      	str	r3, [sp, #20]
 8009694:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009760 <_svfiprintf_r+0x1fc>
 8009698:	7821      	ldrb	r1, [r4, #0]
 800969a:	2203      	movs	r2, #3
 800969c:	4650      	mov	r0, sl
 800969e:	f7f6 fda7 	bl	80001f0 <memchr>
 80096a2:	b140      	cbz	r0, 80096b6 <_svfiprintf_r+0x152>
 80096a4:	2340      	movs	r3, #64	; 0x40
 80096a6:	eba0 000a 	sub.w	r0, r0, sl
 80096aa:	fa03 f000 	lsl.w	r0, r3, r0
 80096ae:	9b04      	ldr	r3, [sp, #16]
 80096b0:	4303      	orrs	r3, r0
 80096b2:	3401      	adds	r4, #1
 80096b4:	9304      	str	r3, [sp, #16]
 80096b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ba:	4826      	ldr	r0, [pc, #152]	; (8009754 <_svfiprintf_r+0x1f0>)
 80096bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096c0:	2206      	movs	r2, #6
 80096c2:	f7f6 fd95 	bl	80001f0 <memchr>
 80096c6:	2800      	cmp	r0, #0
 80096c8:	d038      	beq.n	800973c <_svfiprintf_r+0x1d8>
 80096ca:	4b23      	ldr	r3, [pc, #140]	; (8009758 <_svfiprintf_r+0x1f4>)
 80096cc:	bb1b      	cbnz	r3, 8009716 <_svfiprintf_r+0x1b2>
 80096ce:	9b03      	ldr	r3, [sp, #12]
 80096d0:	3307      	adds	r3, #7
 80096d2:	f023 0307 	bic.w	r3, r3, #7
 80096d6:	3308      	adds	r3, #8
 80096d8:	9303      	str	r3, [sp, #12]
 80096da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096dc:	4433      	add	r3, r6
 80096de:	9309      	str	r3, [sp, #36]	; 0x24
 80096e0:	e767      	b.n	80095b2 <_svfiprintf_r+0x4e>
 80096e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80096e6:	460c      	mov	r4, r1
 80096e8:	2001      	movs	r0, #1
 80096ea:	e7a5      	b.n	8009638 <_svfiprintf_r+0xd4>
 80096ec:	2300      	movs	r3, #0
 80096ee:	3401      	adds	r4, #1
 80096f0:	9305      	str	r3, [sp, #20]
 80096f2:	4619      	mov	r1, r3
 80096f4:	f04f 0c0a 	mov.w	ip, #10
 80096f8:	4620      	mov	r0, r4
 80096fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096fe:	3a30      	subs	r2, #48	; 0x30
 8009700:	2a09      	cmp	r2, #9
 8009702:	d903      	bls.n	800970c <_svfiprintf_r+0x1a8>
 8009704:	2b00      	cmp	r3, #0
 8009706:	d0c5      	beq.n	8009694 <_svfiprintf_r+0x130>
 8009708:	9105      	str	r1, [sp, #20]
 800970a:	e7c3      	b.n	8009694 <_svfiprintf_r+0x130>
 800970c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009710:	4604      	mov	r4, r0
 8009712:	2301      	movs	r3, #1
 8009714:	e7f0      	b.n	80096f8 <_svfiprintf_r+0x194>
 8009716:	ab03      	add	r3, sp, #12
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	462a      	mov	r2, r5
 800971c:	4b0f      	ldr	r3, [pc, #60]	; (800975c <_svfiprintf_r+0x1f8>)
 800971e:	a904      	add	r1, sp, #16
 8009720:	4638      	mov	r0, r7
 8009722:	f7fe f80f 	bl	8007744 <_printf_float>
 8009726:	1c42      	adds	r2, r0, #1
 8009728:	4606      	mov	r6, r0
 800972a:	d1d6      	bne.n	80096da <_svfiprintf_r+0x176>
 800972c:	89ab      	ldrh	r3, [r5, #12]
 800972e:	065b      	lsls	r3, r3, #25
 8009730:	f53f af2c 	bmi.w	800958c <_svfiprintf_r+0x28>
 8009734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009736:	b01d      	add	sp, #116	; 0x74
 8009738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973c:	ab03      	add	r3, sp, #12
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	462a      	mov	r2, r5
 8009742:	4b06      	ldr	r3, [pc, #24]	; (800975c <_svfiprintf_r+0x1f8>)
 8009744:	a904      	add	r1, sp, #16
 8009746:	4638      	mov	r0, r7
 8009748:	f7fe faa0 	bl	8007c8c <_printf_i>
 800974c:	e7eb      	b.n	8009726 <_svfiprintf_r+0x1c2>
 800974e:	bf00      	nop
 8009750:	0800c014 	.word	0x0800c014
 8009754:	0800c01e 	.word	0x0800c01e
 8009758:	08007745 	.word	0x08007745
 800975c:	080094ad 	.word	0x080094ad
 8009760:	0800c01a 	.word	0x0800c01a

08009764 <_sbrk_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4d06      	ldr	r5, [pc, #24]	; (8009780 <_sbrk_r+0x1c>)
 8009768:	2300      	movs	r3, #0
 800976a:	4604      	mov	r4, r0
 800976c:	4608      	mov	r0, r1
 800976e:	602b      	str	r3, [r5, #0]
 8009770:	f7f9 ff3c 	bl	80035ec <_sbrk>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	d102      	bne.n	800977e <_sbrk_r+0x1a>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	b103      	cbz	r3, 800977e <_sbrk_r+0x1a>
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	200044e8 	.word	0x200044e8

08009784 <__assert_func>:
 8009784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009786:	4614      	mov	r4, r2
 8009788:	461a      	mov	r2, r3
 800978a:	4b09      	ldr	r3, [pc, #36]	; (80097b0 <__assert_func+0x2c>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4605      	mov	r5, r0
 8009790:	68d8      	ldr	r0, [r3, #12]
 8009792:	b14c      	cbz	r4, 80097a8 <__assert_func+0x24>
 8009794:	4b07      	ldr	r3, [pc, #28]	; (80097b4 <__assert_func+0x30>)
 8009796:	9100      	str	r1, [sp, #0]
 8009798:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800979c:	4906      	ldr	r1, [pc, #24]	; (80097b8 <__assert_func+0x34>)
 800979e:	462b      	mov	r3, r5
 80097a0:	f000 f80e 	bl	80097c0 <fiprintf>
 80097a4:	f000 faa4 	bl	8009cf0 <abort>
 80097a8:	4b04      	ldr	r3, [pc, #16]	; (80097bc <__assert_func+0x38>)
 80097aa:	461c      	mov	r4, r3
 80097ac:	e7f3      	b.n	8009796 <__assert_func+0x12>
 80097ae:	bf00      	nop
 80097b0:	2000002c 	.word	0x2000002c
 80097b4:	0800c025 	.word	0x0800c025
 80097b8:	0800c032 	.word	0x0800c032
 80097bc:	0800c060 	.word	0x0800c060

080097c0 <fiprintf>:
 80097c0:	b40e      	push	{r1, r2, r3}
 80097c2:	b503      	push	{r0, r1, lr}
 80097c4:	4601      	mov	r1, r0
 80097c6:	ab03      	add	r3, sp, #12
 80097c8:	4805      	ldr	r0, [pc, #20]	; (80097e0 <fiprintf+0x20>)
 80097ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ce:	6800      	ldr	r0, [r0, #0]
 80097d0:	9301      	str	r3, [sp, #4]
 80097d2:	f000 f88f 	bl	80098f4 <_vfiprintf_r>
 80097d6:	b002      	add	sp, #8
 80097d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80097dc:	b003      	add	sp, #12
 80097de:	4770      	bx	lr
 80097e0:	2000002c 	.word	0x2000002c

080097e4 <__ascii_mbtowc>:
 80097e4:	b082      	sub	sp, #8
 80097e6:	b901      	cbnz	r1, 80097ea <__ascii_mbtowc+0x6>
 80097e8:	a901      	add	r1, sp, #4
 80097ea:	b142      	cbz	r2, 80097fe <__ascii_mbtowc+0x1a>
 80097ec:	b14b      	cbz	r3, 8009802 <__ascii_mbtowc+0x1e>
 80097ee:	7813      	ldrb	r3, [r2, #0]
 80097f0:	600b      	str	r3, [r1, #0]
 80097f2:	7812      	ldrb	r2, [r2, #0]
 80097f4:	1e10      	subs	r0, r2, #0
 80097f6:	bf18      	it	ne
 80097f8:	2001      	movne	r0, #1
 80097fa:	b002      	add	sp, #8
 80097fc:	4770      	bx	lr
 80097fe:	4610      	mov	r0, r2
 8009800:	e7fb      	b.n	80097fa <__ascii_mbtowc+0x16>
 8009802:	f06f 0001 	mvn.w	r0, #1
 8009806:	e7f8      	b.n	80097fa <__ascii_mbtowc+0x16>

08009808 <memmove>:
 8009808:	4288      	cmp	r0, r1
 800980a:	b510      	push	{r4, lr}
 800980c:	eb01 0402 	add.w	r4, r1, r2
 8009810:	d902      	bls.n	8009818 <memmove+0x10>
 8009812:	4284      	cmp	r4, r0
 8009814:	4623      	mov	r3, r4
 8009816:	d807      	bhi.n	8009828 <memmove+0x20>
 8009818:	1e43      	subs	r3, r0, #1
 800981a:	42a1      	cmp	r1, r4
 800981c:	d008      	beq.n	8009830 <memmove+0x28>
 800981e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009822:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009826:	e7f8      	b.n	800981a <memmove+0x12>
 8009828:	4402      	add	r2, r0
 800982a:	4601      	mov	r1, r0
 800982c:	428a      	cmp	r2, r1
 800982e:	d100      	bne.n	8009832 <memmove+0x2a>
 8009830:	bd10      	pop	{r4, pc}
 8009832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009836:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800983a:	e7f7      	b.n	800982c <memmove+0x24>

0800983c <__malloc_lock>:
 800983c:	4801      	ldr	r0, [pc, #4]	; (8009844 <__malloc_lock+0x8>)
 800983e:	f000 bc17 	b.w	800a070 <__retarget_lock_acquire_recursive>
 8009842:	bf00      	nop
 8009844:	200044f0 	.word	0x200044f0

08009848 <__malloc_unlock>:
 8009848:	4801      	ldr	r0, [pc, #4]	; (8009850 <__malloc_unlock+0x8>)
 800984a:	f000 bc12 	b.w	800a072 <__retarget_lock_release_recursive>
 800984e:	bf00      	nop
 8009850:	200044f0 	.word	0x200044f0

08009854 <_realloc_r>:
 8009854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009856:	4607      	mov	r7, r0
 8009858:	4614      	mov	r4, r2
 800985a:	460e      	mov	r6, r1
 800985c:	b921      	cbnz	r1, 8009868 <_realloc_r+0x14>
 800985e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009862:	4611      	mov	r1, r2
 8009864:	f7ff bdc8 	b.w	80093f8 <_malloc_r>
 8009868:	b922      	cbnz	r2, 8009874 <_realloc_r+0x20>
 800986a:	f7ff fd75 	bl	8009358 <_free_r>
 800986e:	4625      	mov	r5, r4
 8009870:	4628      	mov	r0, r5
 8009872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009874:	f000 fc62 	bl	800a13c <_malloc_usable_size_r>
 8009878:	42a0      	cmp	r0, r4
 800987a:	d20f      	bcs.n	800989c <_realloc_r+0x48>
 800987c:	4621      	mov	r1, r4
 800987e:	4638      	mov	r0, r7
 8009880:	f7ff fdba 	bl	80093f8 <_malloc_r>
 8009884:	4605      	mov	r5, r0
 8009886:	2800      	cmp	r0, #0
 8009888:	d0f2      	beq.n	8009870 <_realloc_r+0x1c>
 800988a:	4631      	mov	r1, r6
 800988c:	4622      	mov	r2, r4
 800988e:	f7ff f9c7 	bl	8008c20 <memcpy>
 8009892:	4631      	mov	r1, r6
 8009894:	4638      	mov	r0, r7
 8009896:	f7ff fd5f 	bl	8009358 <_free_r>
 800989a:	e7e9      	b.n	8009870 <_realloc_r+0x1c>
 800989c:	4635      	mov	r5, r6
 800989e:	e7e7      	b.n	8009870 <_realloc_r+0x1c>

080098a0 <__sfputc_r>:
 80098a0:	6893      	ldr	r3, [r2, #8]
 80098a2:	3b01      	subs	r3, #1
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	b410      	push	{r4}
 80098a8:	6093      	str	r3, [r2, #8]
 80098aa:	da08      	bge.n	80098be <__sfputc_r+0x1e>
 80098ac:	6994      	ldr	r4, [r2, #24]
 80098ae:	42a3      	cmp	r3, r4
 80098b0:	db01      	blt.n	80098b6 <__sfputc_r+0x16>
 80098b2:	290a      	cmp	r1, #10
 80098b4:	d103      	bne.n	80098be <__sfputc_r+0x1e>
 80098b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098ba:	f000 b94b 	b.w	8009b54 <__swbuf_r>
 80098be:	6813      	ldr	r3, [r2, #0]
 80098c0:	1c58      	adds	r0, r3, #1
 80098c2:	6010      	str	r0, [r2, #0]
 80098c4:	7019      	strb	r1, [r3, #0]
 80098c6:	4608      	mov	r0, r1
 80098c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098cc:	4770      	bx	lr

080098ce <__sfputs_r>:
 80098ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d0:	4606      	mov	r6, r0
 80098d2:	460f      	mov	r7, r1
 80098d4:	4614      	mov	r4, r2
 80098d6:	18d5      	adds	r5, r2, r3
 80098d8:	42ac      	cmp	r4, r5
 80098da:	d101      	bne.n	80098e0 <__sfputs_r+0x12>
 80098dc:	2000      	movs	r0, #0
 80098de:	e007      	b.n	80098f0 <__sfputs_r+0x22>
 80098e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e4:	463a      	mov	r2, r7
 80098e6:	4630      	mov	r0, r6
 80098e8:	f7ff ffda 	bl	80098a0 <__sfputc_r>
 80098ec:	1c43      	adds	r3, r0, #1
 80098ee:	d1f3      	bne.n	80098d8 <__sfputs_r+0xa>
 80098f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098f4 <_vfiprintf_r>:
 80098f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f8:	460d      	mov	r5, r1
 80098fa:	b09d      	sub	sp, #116	; 0x74
 80098fc:	4614      	mov	r4, r2
 80098fe:	4698      	mov	r8, r3
 8009900:	4606      	mov	r6, r0
 8009902:	b118      	cbz	r0, 800990c <_vfiprintf_r+0x18>
 8009904:	6983      	ldr	r3, [r0, #24]
 8009906:	b90b      	cbnz	r3, 800990c <_vfiprintf_r+0x18>
 8009908:	f000 fb14 	bl	8009f34 <__sinit>
 800990c:	4b89      	ldr	r3, [pc, #548]	; (8009b34 <_vfiprintf_r+0x240>)
 800990e:	429d      	cmp	r5, r3
 8009910:	d11b      	bne.n	800994a <_vfiprintf_r+0x56>
 8009912:	6875      	ldr	r5, [r6, #4]
 8009914:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009916:	07d9      	lsls	r1, r3, #31
 8009918:	d405      	bmi.n	8009926 <_vfiprintf_r+0x32>
 800991a:	89ab      	ldrh	r3, [r5, #12]
 800991c:	059a      	lsls	r2, r3, #22
 800991e:	d402      	bmi.n	8009926 <_vfiprintf_r+0x32>
 8009920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009922:	f000 fba5 	bl	800a070 <__retarget_lock_acquire_recursive>
 8009926:	89ab      	ldrh	r3, [r5, #12]
 8009928:	071b      	lsls	r3, r3, #28
 800992a:	d501      	bpl.n	8009930 <_vfiprintf_r+0x3c>
 800992c:	692b      	ldr	r3, [r5, #16]
 800992e:	b9eb      	cbnz	r3, 800996c <_vfiprintf_r+0x78>
 8009930:	4629      	mov	r1, r5
 8009932:	4630      	mov	r0, r6
 8009934:	f000 f96e 	bl	8009c14 <__swsetup_r>
 8009938:	b1c0      	cbz	r0, 800996c <_vfiprintf_r+0x78>
 800993a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800993c:	07dc      	lsls	r4, r3, #31
 800993e:	d50e      	bpl.n	800995e <_vfiprintf_r+0x6a>
 8009940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009944:	b01d      	add	sp, #116	; 0x74
 8009946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800994a:	4b7b      	ldr	r3, [pc, #492]	; (8009b38 <_vfiprintf_r+0x244>)
 800994c:	429d      	cmp	r5, r3
 800994e:	d101      	bne.n	8009954 <_vfiprintf_r+0x60>
 8009950:	68b5      	ldr	r5, [r6, #8]
 8009952:	e7df      	b.n	8009914 <_vfiprintf_r+0x20>
 8009954:	4b79      	ldr	r3, [pc, #484]	; (8009b3c <_vfiprintf_r+0x248>)
 8009956:	429d      	cmp	r5, r3
 8009958:	bf08      	it	eq
 800995a:	68f5      	ldreq	r5, [r6, #12]
 800995c:	e7da      	b.n	8009914 <_vfiprintf_r+0x20>
 800995e:	89ab      	ldrh	r3, [r5, #12]
 8009960:	0598      	lsls	r0, r3, #22
 8009962:	d4ed      	bmi.n	8009940 <_vfiprintf_r+0x4c>
 8009964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009966:	f000 fb84 	bl	800a072 <__retarget_lock_release_recursive>
 800996a:	e7e9      	b.n	8009940 <_vfiprintf_r+0x4c>
 800996c:	2300      	movs	r3, #0
 800996e:	9309      	str	r3, [sp, #36]	; 0x24
 8009970:	2320      	movs	r3, #32
 8009972:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009976:	f8cd 800c 	str.w	r8, [sp, #12]
 800997a:	2330      	movs	r3, #48	; 0x30
 800997c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b40 <_vfiprintf_r+0x24c>
 8009980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009984:	f04f 0901 	mov.w	r9, #1
 8009988:	4623      	mov	r3, r4
 800998a:	469a      	mov	sl, r3
 800998c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009990:	b10a      	cbz	r2, 8009996 <_vfiprintf_r+0xa2>
 8009992:	2a25      	cmp	r2, #37	; 0x25
 8009994:	d1f9      	bne.n	800998a <_vfiprintf_r+0x96>
 8009996:	ebba 0b04 	subs.w	fp, sl, r4
 800999a:	d00b      	beq.n	80099b4 <_vfiprintf_r+0xc0>
 800999c:	465b      	mov	r3, fp
 800999e:	4622      	mov	r2, r4
 80099a0:	4629      	mov	r1, r5
 80099a2:	4630      	mov	r0, r6
 80099a4:	f7ff ff93 	bl	80098ce <__sfputs_r>
 80099a8:	3001      	adds	r0, #1
 80099aa:	f000 80aa 	beq.w	8009b02 <_vfiprintf_r+0x20e>
 80099ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099b0:	445a      	add	r2, fp
 80099b2:	9209      	str	r2, [sp, #36]	; 0x24
 80099b4:	f89a 3000 	ldrb.w	r3, [sl]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 80a2 	beq.w	8009b02 <_vfiprintf_r+0x20e>
 80099be:	2300      	movs	r3, #0
 80099c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099c8:	f10a 0a01 	add.w	sl, sl, #1
 80099cc:	9304      	str	r3, [sp, #16]
 80099ce:	9307      	str	r3, [sp, #28]
 80099d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099d4:	931a      	str	r3, [sp, #104]	; 0x68
 80099d6:	4654      	mov	r4, sl
 80099d8:	2205      	movs	r2, #5
 80099da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099de:	4858      	ldr	r0, [pc, #352]	; (8009b40 <_vfiprintf_r+0x24c>)
 80099e0:	f7f6 fc06 	bl	80001f0 <memchr>
 80099e4:	9a04      	ldr	r2, [sp, #16]
 80099e6:	b9d8      	cbnz	r0, 8009a20 <_vfiprintf_r+0x12c>
 80099e8:	06d1      	lsls	r1, r2, #27
 80099ea:	bf44      	itt	mi
 80099ec:	2320      	movmi	r3, #32
 80099ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099f2:	0713      	lsls	r3, r2, #28
 80099f4:	bf44      	itt	mi
 80099f6:	232b      	movmi	r3, #43	; 0x2b
 80099f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009a00:	2b2a      	cmp	r3, #42	; 0x2a
 8009a02:	d015      	beq.n	8009a30 <_vfiprintf_r+0x13c>
 8009a04:	9a07      	ldr	r2, [sp, #28]
 8009a06:	4654      	mov	r4, sl
 8009a08:	2000      	movs	r0, #0
 8009a0a:	f04f 0c0a 	mov.w	ip, #10
 8009a0e:	4621      	mov	r1, r4
 8009a10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a14:	3b30      	subs	r3, #48	; 0x30
 8009a16:	2b09      	cmp	r3, #9
 8009a18:	d94e      	bls.n	8009ab8 <_vfiprintf_r+0x1c4>
 8009a1a:	b1b0      	cbz	r0, 8009a4a <_vfiprintf_r+0x156>
 8009a1c:	9207      	str	r2, [sp, #28]
 8009a1e:	e014      	b.n	8009a4a <_vfiprintf_r+0x156>
 8009a20:	eba0 0308 	sub.w	r3, r0, r8
 8009a24:	fa09 f303 	lsl.w	r3, r9, r3
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	9304      	str	r3, [sp, #16]
 8009a2c:	46a2      	mov	sl, r4
 8009a2e:	e7d2      	b.n	80099d6 <_vfiprintf_r+0xe2>
 8009a30:	9b03      	ldr	r3, [sp, #12]
 8009a32:	1d19      	adds	r1, r3, #4
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	9103      	str	r1, [sp, #12]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	bfbb      	ittet	lt
 8009a3c:	425b      	neglt	r3, r3
 8009a3e:	f042 0202 	orrlt.w	r2, r2, #2
 8009a42:	9307      	strge	r3, [sp, #28]
 8009a44:	9307      	strlt	r3, [sp, #28]
 8009a46:	bfb8      	it	lt
 8009a48:	9204      	strlt	r2, [sp, #16]
 8009a4a:	7823      	ldrb	r3, [r4, #0]
 8009a4c:	2b2e      	cmp	r3, #46	; 0x2e
 8009a4e:	d10c      	bne.n	8009a6a <_vfiprintf_r+0x176>
 8009a50:	7863      	ldrb	r3, [r4, #1]
 8009a52:	2b2a      	cmp	r3, #42	; 0x2a
 8009a54:	d135      	bne.n	8009ac2 <_vfiprintf_r+0x1ce>
 8009a56:	9b03      	ldr	r3, [sp, #12]
 8009a58:	1d1a      	adds	r2, r3, #4
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	9203      	str	r2, [sp, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	bfb8      	it	lt
 8009a62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a66:	3402      	adds	r4, #2
 8009a68:	9305      	str	r3, [sp, #20]
 8009a6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b50 <_vfiprintf_r+0x25c>
 8009a6e:	7821      	ldrb	r1, [r4, #0]
 8009a70:	2203      	movs	r2, #3
 8009a72:	4650      	mov	r0, sl
 8009a74:	f7f6 fbbc 	bl	80001f0 <memchr>
 8009a78:	b140      	cbz	r0, 8009a8c <_vfiprintf_r+0x198>
 8009a7a:	2340      	movs	r3, #64	; 0x40
 8009a7c:	eba0 000a 	sub.w	r0, r0, sl
 8009a80:	fa03 f000 	lsl.w	r0, r3, r0
 8009a84:	9b04      	ldr	r3, [sp, #16]
 8009a86:	4303      	orrs	r3, r0
 8009a88:	3401      	adds	r4, #1
 8009a8a:	9304      	str	r3, [sp, #16]
 8009a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a90:	482c      	ldr	r0, [pc, #176]	; (8009b44 <_vfiprintf_r+0x250>)
 8009a92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a96:	2206      	movs	r2, #6
 8009a98:	f7f6 fbaa 	bl	80001f0 <memchr>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d03f      	beq.n	8009b20 <_vfiprintf_r+0x22c>
 8009aa0:	4b29      	ldr	r3, [pc, #164]	; (8009b48 <_vfiprintf_r+0x254>)
 8009aa2:	bb1b      	cbnz	r3, 8009aec <_vfiprintf_r+0x1f8>
 8009aa4:	9b03      	ldr	r3, [sp, #12]
 8009aa6:	3307      	adds	r3, #7
 8009aa8:	f023 0307 	bic.w	r3, r3, #7
 8009aac:	3308      	adds	r3, #8
 8009aae:	9303      	str	r3, [sp, #12]
 8009ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ab2:	443b      	add	r3, r7
 8009ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab6:	e767      	b.n	8009988 <_vfiprintf_r+0x94>
 8009ab8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009abc:	460c      	mov	r4, r1
 8009abe:	2001      	movs	r0, #1
 8009ac0:	e7a5      	b.n	8009a0e <_vfiprintf_r+0x11a>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	3401      	adds	r4, #1
 8009ac6:	9305      	str	r3, [sp, #20]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	f04f 0c0a 	mov.w	ip, #10
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ad4:	3a30      	subs	r2, #48	; 0x30
 8009ad6:	2a09      	cmp	r2, #9
 8009ad8:	d903      	bls.n	8009ae2 <_vfiprintf_r+0x1ee>
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0c5      	beq.n	8009a6a <_vfiprintf_r+0x176>
 8009ade:	9105      	str	r1, [sp, #20]
 8009ae0:	e7c3      	b.n	8009a6a <_vfiprintf_r+0x176>
 8009ae2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e7f0      	b.n	8009ace <_vfiprintf_r+0x1da>
 8009aec:	ab03      	add	r3, sp, #12
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	462a      	mov	r2, r5
 8009af2:	4b16      	ldr	r3, [pc, #88]	; (8009b4c <_vfiprintf_r+0x258>)
 8009af4:	a904      	add	r1, sp, #16
 8009af6:	4630      	mov	r0, r6
 8009af8:	f7fd fe24 	bl	8007744 <_printf_float>
 8009afc:	4607      	mov	r7, r0
 8009afe:	1c78      	adds	r0, r7, #1
 8009b00:	d1d6      	bne.n	8009ab0 <_vfiprintf_r+0x1bc>
 8009b02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b04:	07d9      	lsls	r1, r3, #31
 8009b06:	d405      	bmi.n	8009b14 <_vfiprintf_r+0x220>
 8009b08:	89ab      	ldrh	r3, [r5, #12]
 8009b0a:	059a      	lsls	r2, r3, #22
 8009b0c:	d402      	bmi.n	8009b14 <_vfiprintf_r+0x220>
 8009b0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b10:	f000 faaf 	bl	800a072 <__retarget_lock_release_recursive>
 8009b14:	89ab      	ldrh	r3, [r5, #12]
 8009b16:	065b      	lsls	r3, r3, #25
 8009b18:	f53f af12 	bmi.w	8009940 <_vfiprintf_r+0x4c>
 8009b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b1e:	e711      	b.n	8009944 <_vfiprintf_r+0x50>
 8009b20:	ab03      	add	r3, sp, #12
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	462a      	mov	r2, r5
 8009b26:	4b09      	ldr	r3, [pc, #36]	; (8009b4c <_vfiprintf_r+0x258>)
 8009b28:	a904      	add	r1, sp, #16
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	f7fe f8ae 	bl	8007c8c <_printf_i>
 8009b30:	e7e4      	b.n	8009afc <_vfiprintf_r+0x208>
 8009b32:	bf00      	nop
 8009b34:	0800c18c 	.word	0x0800c18c
 8009b38:	0800c1ac 	.word	0x0800c1ac
 8009b3c:	0800c16c 	.word	0x0800c16c
 8009b40:	0800c014 	.word	0x0800c014
 8009b44:	0800c01e 	.word	0x0800c01e
 8009b48:	08007745 	.word	0x08007745
 8009b4c:	080098cf 	.word	0x080098cf
 8009b50:	0800c01a 	.word	0x0800c01a

08009b54 <__swbuf_r>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	460e      	mov	r6, r1
 8009b58:	4614      	mov	r4, r2
 8009b5a:	4605      	mov	r5, r0
 8009b5c:	b118      	cbz	r0, 8009b66 <__swbuf_r+0x12>
 8009b5e:	6983      	ldr	r3, [r0, #24]
 8009b60:	b90b      	cbnz	r3, 8009b66 <__swbuf_r+0x12>
 8009b62:	f000 f9e7 	bl	8009f34 <__sinit>
 8009b66:	4b21      	ldr	r3, [pc, #132]	; (8009bec <__swbuf_r+0x98>)
 8009b68:	429c      	cmp	r4, r3
 8009b6a:	d12b      	bne.n	8009bc4 <__swbuf_r+0x70>
 8009b6c:	686c      	ldr	r4, [r5, #4]
 8009b6e:	69a3      	ldr	r3, [r4, #24]
 8009b70:	60a3      	str	r3, [r4, #8]
 8009b72:	89a3      	ldrh	r3, [r4, #12]
 8009b74:	071a      	lsls	r2, r3, #28
 8009b76:	d52f      	bpl.n	8009bd8 <__swbuf_r+0x84>
 8009b78:	6923      	ldr	r3, [r4, #16]
 8009b7a:	b36b      	cbz	r3, 8009bd8 <__swbuf_r+0x84>
 8009b7c:	6923      	ldr	r3, [r4, #16]
 8009b7e:	6820      	ldr	r0, [r4, #0]
 8009b80:	1ac0      	subs	r0, r0, r3
 8009b82:	6963      	ldr	r3, [r4, #20]
 8009b84:	b2f6      	uxtb	r6, r6
 8009b86:	4283      	cmp	r3, r0
 8009b88:	4637      	mov	r7, r6
 8009b8a:	dc04      	bgt.n	8009b96 <__swbuf_r+0x42>
 8009b8c:	4621      	mov	r1, r4
 8009b8e:	4628      	mov	r0, r5
 8009b90:	f000 f93c 	bl	8009e0c <_fflush_r>
 8009b94:	bb30      	cbnz	r0, 8009be4 <__swbuf_r+0x90>
 8009b96:	68a3      	ldr	r3, [r4, #8]
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	60a3      	str	r3, [r4, #8]
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	6022      	str	r2, [r4, #0]
 8009ba2:	701e      	strb	r6, [r3, #0]
 8009ba4:	6963      	ldr	r3, [r4, #20]
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	4283      	cmp	r3, r0
 8009baa:	d004      	beq.n	8009bb6 <__swbuf_r+0x62>
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	07db      	lsls	r3, r3, #31
 8009bb0:	d506      	bpl.n	8009bc0 <__swbuf_r+0x6c>
 8009bb2:	2e0a      	cmp	r6, #10
 8009bb4:	d104      	bne.n	8009bc0 <__swbuf_r+0x6c>
 8009bb6:	4621      	mov	r1, r4
 8009bb8:	4628      	mov	r0, r5
 8009bba:	f000 f927 	bl	8009e0c <_fflush_r>
 8009bbe:	b988      	cbnz	r0, 8009be4 <__swbuf_r+0x90>
 8009bc0:	4638      	mov	r0, r7
 8009bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bc4:	4b0a      	ldr	r3, [pc, #40]	; (8009bf0 <__swbuf_r+0x9c>)
 8009bc6:	429c      	cmp	r4, r3
 8009bc8:	d101      	bne.n	8009bce <__swbuf_r+0x7a>
 8009bca:	68ac      	ldr	r4, [r5, #8]
 8009bcc:	e7cf      	b.n	8009b6e <__swbuf_r+0x1a>
 8009bce:	4b09      	ldr	r3, [pc, #36]	; (8009bf4 <__swbuf_r+0xa0>)
 8009bd0:	429c      	cmp	r4, r3
 8009bd2:	bf08      	it	eq
 8009bd4:	68ec      	ldreq	r4, [r5, #12]
 8009bd6:	e7ca      	b.n	8009b6e <__swbuf_r+0x1a>
 8009bd8:	4621      	mov	r1, r4
 8009bda:	4628      	mov	r0, r5
 8009bdc:	f000 f81a 	bl	8009c14 <__swsetup_r>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d0cb      	beq.n	8009b7c <__swbuf_r+0x28>
 8009be4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009be8:	e7ea      	b.n	8009bc0 <__swbuf_r+0x6c>
 8009bea:	bf00      	nop
 8009bec:	0800c18c 	.word	0x0800c18c
 8009bf0:	0800c1ac 	.word	0x0800c1ac
 8009bf4:	0800c16c 	.word	0x0800c16c

08009bf8 <__ascii_wctomb>:
 8009bf8:	b149      	cbz	r1, 8009c0e <__ascii_wctomb+0x16>
 8009bfa:	2aff      	cmp	r2, #255	; 0xff
 8009bfc:	bf85      	ittet	hi
 8009bfe:	238a      	movhi	r3, #138	; 0x8a
 8009c00:	6003      	strhi	r3, [r0, #0]
 8009c02:	700a      	strbls	r2, [r1, #0]
 8009c04:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009c08:	bf98      	it	ls
 8009c0a:	2001      	movls	r0, #1
 8009c0c:	4770      	bx	lr
 8009c0e:	4608      	mov	r0, r1
 8009c10:	4770      	bx	lr
	...

08009c14 <__swsetup_r>:
 8009c14:	4b32      	ldr	r3, [pc, #200]	; (8009ce0 <__swsetup_r+0xcc>)
 8009c16:	b570      	push	{r4, r5, r6, lr}
 8009c18:	681d      	ldr	r5, [r3, #0]
 8009c1a:	4606      	mov	r6, r0
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	b125      	cbz	r5, 8009c2a <__swsetup_r+0x16>
 8009c20:	69ab      	ldr	r3, [r5, #24]
 8009c22:	b913      	cbnz	r3, 8009c2a <__swsetup_r+0x16>
 8009c24:	4628      	mov	r0, r5
 8009c26:	f000 f985 	bl	8009f34 <__sinit>
 8009c2a:	4b2e      	ldr	r3, [pc, #184]	; (8009ce4 <__swsetup_r+0xd0>)
 8009c2c:	429c      	cmp	r4, r3
 8009c2e:	d10f      	bne.n	8009c50 <__swsetup_r+0x3c>
 8009c30:	686c      	ldr	r4, [r5, #4]
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c38:	0719      	lsls	r1, r3, #28
 8009c3a:	d42c      	bmi.n	8009c96 <__swsetup_r+0x82>
 8009c3c:	06dd      	lsls	r5, r3, #27
 8009c3e:	d411      	bmi.n	8009c64 <__swsetup_r+0x50>
 8009c40:	2309      	movs	r3, #9
 8009c42:	6033      	str	r3, [r6, #0]
 8009c44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c48:	81a3      	strh	r3, [r4, #12]
 8009c4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c4e:	e03e      	b.n	8009cce <__swsetup_r+0xba>
 8009c50:	4b25      	ldr	r3, [pc, #148]	; (8009ce8 <__swsetup_r+0xd4>)
 8009c52:	429c      	cmp	r4, r3
 8009c54:	d101      	bne.n	8009c5a <__swsetup_r+0x46>
 8009c56:	68ac      	ldr	r4, [r5, #8]
 8009c58:	e7eb      	b.n	8009c32 <__swsetup_r+0x1e>
 8009c5a:	4b24      	ldr	r3, [pc, #144]	; (8009cec <__swsetup_r+0xd8>)
 8009c5c:	429c      	cmp	r4, r3
 8009c5e:	bf08      	it	eq
 8009c60:	68ec      	ldreq	r4, [r5, #12]
 8009c62:	e7e6      	b.n	8009c32 <__swsetup_r+0x1e>
 8009c64:	0758      	lsls	r0, r3, #29
 8009c66:	d512      	bpl.n	8009c8e <__swsetup_r+0x7a>
 8009c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c6a:	b141      	cbz	r1, 8009c7e <__swsetup_r+0x6a>
 8009c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c70:	4299      	cmp	r1, r3
 8009c72:	d002      	beq.n	8009c7a <__swsetup_r+0x66>
 8009c74:	4630      	mov	r0, r6
 8009c76:	f7ff fb6f 	bl	8009358 <_free_r>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	6363      	str	r3, [r4, #52]	; 0x34
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c84:	81a3      	strh	r3, [r4, #12]
 8009c86:	2300      	movs	r3, #0
 8009c88:	6063      	str	r3, [r4, #4]
 8009c8a:	6923      	ldr	r3, [r4, #16]
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	f043 0308 	orr.w	r3, r3, #8
 8009c94:	81a3      	strh	r3, [r4, #12]
 8009c96:	6923      	ldr	r3, [r4, #16]
 8009c98:	b94b      	cbnz	r3, 8009cae <__swsetup_r+0x9a>
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ca4:	d003      	beq.n	8009cae <__swsetup_r+0x9a>
 8009ca6:	4621      	mov	r1, r4
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f000 fa07 	bl	800a0bc <__smakebuf_r>
 8009cae:	89a0      	ldrh	r0, [r4, #12]
 8009cb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cb4:	f010 0301 	ands.w	r3, r0, #1
 8009cb8:	d00a      	beq.n	8009cd0 <__swsetup_r+0xbc>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60a3      	str	r3, [r4, #8]
 8009cbe:	6963      	ldr	r3, [r4, #20]
 8009cc0:	425b      	negs	r3, r3
 8009cc2:	61a3      	str	r3, [r4, #24]
 8009cc4:	6923      	ldr	r3, [r4, #16]
 8009cc6:	b943      	cbnz	r3, 8009cda <__swsetup_r+0xc6>
 8009cc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ccc:	d1ba      	bne.n	8009c44 <__swsetup_r+0x30>
 8009cce:	bd70      	pop	{r4, r5, r6, pc}
 8009cd0:	0781      	lsls	r1, r0, #30
 8009cd2:	bf58      	it	pl
 8009cd4:	6963      	ldrpl	r3, [r4, #20]
 8009cd6:	60a3      	str	r3, [r4, #8]
 8009cd8:	e7f4      	b.n	8009cc4 <__swsetup_r+0xb0>
 8009cda:	2000      	movs	r0, #0
 8009cdc:	e7f7      	b.n	8009cce <__swsetup_r+0xba>
 8009cde:	bf00      	nop
 8009ce0:	2000002c 	.word	0x2000002c
 8009ce4:	0800c18c 	.word	0x0800c18c
 8009ce8:	0800c1ac 	.word	0x0800c1ac
 8009cec:	0800c16c 	.word	0x0800c16c

08009cf0 <abort>:
 8009cf0:	b508      	push	{r3, lr}
 8009cf2:	2006      	movs	r0, #6
 8009cf4:	f000 fa52 	bl	800a19c <raise>
 8009cf8:	2001      	movs	r0, #1
 8009cfa:	f7f9 fbff 	bl	80034fc <_exit>
	...

08009d00 <__sflush_r>:
 8009d00:	898a      	ldrh	r2, [r1, #12]
 8009d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d06:	4605      	mov	r5, r0
 8009d08:	0710      	lsls	r0, r2, #28
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	d458      	bmi.n	8009dc0 <__sflush_r+0xc0>
 8009d0e:	684b      	ldr	r3, [r1, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	dc05      	bgt.n	8009d20 <__sflush_r+0x20>
 8009d14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	dc02      	bgt.n	8009d20 <__sflush_r+0x20>
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d22:	2e00      	cmp	r6, #0
 8009d24:	d0f9      	beq.n	8009d1a <__sflush_r+0x1a>
 8009d26:	2300      	movs	r3, #0
 8009d28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d2c:	682f      	ldr	r7, [r5, #0]
 8009d2e:	602b      	str	r3, [r5, #0]
 8009d30:	d032      	beq.n	8009d98 <__sflush_r+0x98>
 8009d32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	075a      	lsls	r2, r3, #29
 8009d38:	d505      	bpl.n	8009d46 <__sflush_r+0x46>
 8009d3a:	6863      	ldr	r3, [r4, #4]
 8009d3c:	1ac0      	subs	r0, r0, r3
 8009d3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d40:	b10b      	cbz	r3, 8009d46 <__sflush_r+0x46>
 8009d42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d44:	1ac0      	subs	r0, r0, r3
 8009d46:	2300      	movs	r3, #0
 8009d48:	4602      	mov	r2, r0
 8009d4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d4c:	6a21      	ldr	r1, [r4, #32]
 8009d4e:	4628      	mov	r0, r5
 8009d50:	47b0      	blx	r6
 8009d52:	1c43      	adds	r3, r0, #1
 8009d54:	89a3      	ldrh	r3, [r4, #12]
 8009d56:	d106      	bne.n	8009d66 <__sflush_r+0x66>
 8009d58:	6829      	ldr	r1, [r5, #0]
 8009d5a:	291d      	cmp	r1, #29
 8009d5c:	d82c      	bhi.n	8009db8 <__sflush_r+0xb8>
 8009d5e:	4a2a      	ldr	r2, [pc, #168]	; (8009e08 <__sflush_r+0x108>)
 8009d60:	40ca      	lsrs	r2, r1
 8009d62:	07d6      	lsls	r6, r2, #31
 8009d64:	d528      	bpl.n	8009db8 <__sflush_r+0xb8>
 8009d66:	2200      	movs	r2, #0
 8009d68:	6062      	str	r2, [r4, #4]
 8009d6a:	04d9      	lsls	r1, r3, #19
 8009d6c:	6922      	ldr	r2, [r4, #16]
 8009d6e:	6022      	str	r2, [r4, #0]
 8009d70:	d504      	bpl.n	8009d7c <__sflush_r+0x7c>
 8009d72:	1c42      	adds	r2, r0, #1
 8009d74:	d101      	bne.n	8009d7a <__sflush_r+0x7a>
 8009d76:	682b      	ldr	r3, [r5, #0]
 8009d78:	b903      	cbnz	r3, 8009d7c <__sflush_r+0x7c>
 8009d7a:	6560      	str	r0, [r4, #84]	; 0x54
 8009d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d7e:	602f      	str	r7, [r5, #0]
 8009d80:	2900      	cmp	r1, #0
 8009d82:	d0ca      	beq.n	8009d1a <__sflush_r+0x1a>
 8009d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d88:	4299      	cmp	r1, r3
 8009d8a:	d002      	beq.n	8009d92 <__sflush_r+0x92>
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f7ff fae3 	bl	8009358 <_free_r>
 8009d92:	2000      	movs	r0, #0
 8009d94:	6360      	str	r0, [r4, #52]	; 0x34
 8009d96:	e7c1      	b.n	8009d1c <__sflush_r+0x1c>
 8009d98:	6a21      	ldr	r1, [r4, #32]
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	47b0      	blx	r6
 8009da0:	1c41      	adds	r1, r0, #1
 8009da2:	d1c7      	bne.n	8009d34 <__sflush_r+0x34>
 8009da4:	682b      	ldr	r3, [r5, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d0c4      	beq.n	8009d34 <__sflush_r+0x34>
 8009daa:	2b1d      	cmp	r3, #29
 8009dac:	d001      	beq.n	8009db2 <__sflush_r+0xb2>
 8009dae:	2b16      	cmp	r3, #22
 8009db0:	d101      	bne.n	8009db6 <__sflush_r+0xb6>
 8009db2:	602f      	str	r7, [r5, #0]
 8009db4:	e7b1      	b.n	8009d1a <__sflush_r+0x1a>
 8009db6:	89a3      	ldrh	r3, [r4, #12]
 8009db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dbc:	81a3      	strh	r3, [r4, #12]
 8009dbe:	e7ad      	b.n	8009d1c <__sflush_r+0x1c>
 8009dc0:	690f      	ldr	r7, [r1, #16]
 8009dc2:	2f00      	cmp	r7, #0
 8009dc4:	d0a9      	beq.n	8009d1a <__sflush_r+0x1a>
 8009dc6:	0793      	lsls	r3, r2, #30
 8009dc8:	680e      	ldr	r6, [r1, #0]
 8009dca:	bf08      	it	eq
 8009dcc:	694b      	ldreq	r3, [r1, #20]
 8009dce:	600f      	str	r7, [r1, #0]
 8009dd0:	bf18      	it	ne
 8009dd2:	2300      	movne	r3, #0
 8009dd4:	eba6 0807 	sub.w	r8, r6, r7
 8009dd8:	608b      	str	r3, [r1, #8]
 8009dda:	f1b8 0f00 	cmp.w	r8, #0
 8009dde:	dd9c      	ble.n	8009d1a <__sflush_r+0x1a>
 8009de0:	6a21      	ldr	r1, [r4, #32]
 8009de2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009de4:	4643      	mov	r3, r8
 8009de6:	463a      	mov	r2, r7
 8009de8:	4628      	mov	r0, r5
 8009dea:	47b0      	blx	r6
 8009dec:	2800      	cmp	r0, #0
 8009dee:	dc06      	bgt.n	8009dfe <__sflush_r+0xfe>
 8009df0:	89a3      	ldrh	r3, [r4, #12]
 8009df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009df6:	81a3      	strh	r3, [r4, #12]
 8009df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dfc:	e78e      	b.n	8009d1c <__sflush_r+0x1c>
 8009dfe:	4407      	add	r7, r0
 8009e00:	eba8 0800 	sub.w	r8, r8, r0
 8009e04:	e7e9      	b.n	8009dda <__sflush_r+0xda>
 8009e06:	bf00      	nop
 8009e08:	20400001 	.word	0x20400001

08009e0c <_fflush_r>:
 8009e0c:	b538      	push	{r3, r4, r5, lr}
 8009e0e:	690b      	ldr	r3, [r1, #16]
 8009e10:	4605      	mov	r5, r0
 8009e12:	460c      	mov	r4, r1
 8009e14:	b913      	cbnz	r3, 8009e1c <_fflush_r+0x10>
 8009e16:	2500      	movs	r5, #0
 8009e18:	4628      	mov	r0, r5
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	b118      	cbz	r0, 8009e26 <_fflush_r+0x1a>
 8009e1e:	6983      	ldr	r3, [r0, #24]
 8009e20:	b90b      	cbnz	r3, 8009e26 <_fflush_r+0x1a>
 8009e22:	f000 f887 	bl	8009f34 <__sinit>
 8009e26:	4b14      	ldr	r3, [pc, #80]	; (8009e78 <_fflush_r+0x6c>)
 8009e28:	429c      	cmp	r4, r3
 8009e2a:	d11b      	bne.n	8009e64 <_fflush_r+0x58>
 8009e2c:	686c      	ldr	r4, [r5, #4]
 8009e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0ef      	beq.n	8009e16 <_fflush_r+0xa>
 8009e36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e38:	07d0      	lsls	r0, r2, #31
 8009e3a:	d404      	bmi.n	8009e46 <_fflush_r+0x3a>
 8009e3c:	0599      	lsls	r1, r3, #22
 8009e3e:	d402      	bmi.n	8009e46 <_fflush_r+0x3a>
 8009e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e42:	f000 f915 	bl	800a070 <__retarget_lock_acquire_recursive>
 8009e46:	4628      	mov	r0, r5
 8009e48:	4621      	mov	r1, r4
 8009e4a:	f7ff ff59 	bl	8009d00 <__sflush_r>
 8009e4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e50:	07da      	lsls	r2, r3, #31
 8009e52:	4605      	mov	r5, r0
 8009e54:	d4e0      	bmi.n	8009e18 <_fflush_r+0xc>
 8009e56:	89a3      	ldrh	r3, [r4, #12]
 8009e58:	059b      	lsls	r3, r3, #22
 8009e5a:	d4dd      	bmi.n	8009e18 <_fflush_r+0xc>
 8009e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e5e:	f000 f908 	bl	800a072 <__retarget_lock_release_recursive>
 8009e62:	e7d9      	b.n	8009e18 <_fflush_r+0xc>
 8009e64:	4b05      	ldr	r3, [pc, #20]	; (8009e7c <_fflush_r+0x70>)
 8009e66:	429c      	cmp	r4, r3
 8009e68:	d101      	bne.n	8009e6e <_fflush_r+0x62>
 8009e6a:	68ac      	ldr	r4, [r5, #8]
 8009e6c:	e7df      	b.n	8009e2e <_fflush_r+0x22>
 8009e6e:	4b04      	ldr	r3, [pc, #16]	; (8009e80 <_fflush_r+0x74>)
 8009e70:	429c      	cmp	r4, r3
 8009e72:	bf08      	it	eq
 8009e74:	68ec      	ldreq	r4, [r5, #12]
 8009e76:	e7da      	b.n	8009e2e <_fflush_r+0x22>
 8009e78:	0800c18c 	.word	0x0800c18c
 8009e7c:	0800c1ac 	.word	0x0800c1ac
 8009e80:	0800c16c 	.word	0x0800c16c

08009e84 <std>:
 8009e84:	2300      	movs	r3, #0
 8009e86:	b510      	push	{r4, lr}
 8009e88:	4604      	mov	r4, r0
 8009e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8009e8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e92:	6083      	str	r3, [r0, #8]
 8009e94:	8181      	strh	r1, [r0, #12]
 8009e96:	6643      	str	r3, [r0, #100]	; 0x64
 8009e98:	81c2      	strh	r2, [r0, #14]
 8009e9a:	6183      	str	r3, [r0, #24]
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	2208      	movs	r2, #8
 8009ea0:	305c      	adds	r0, #92	; 0x5c
 8009ea2:	f7fd fba7 	bl	80075f4 <memset>
 8009ea6:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <std+0x38>)
 8009ea8:	6263      	str	r3, [r4, #36]	; 0x24
 8009eaa:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <std+0x3c>)
 8009eac:	62a3      	str	r3, [r4, #40]	; 0x28
 8009eae:	4b05      	ldr	r3, [pc, #20]	; (8009ec4 <std+0x40>)
 8009eb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009eb2:	4b05      	ldr	r3, [pc, #20]	; (8009ec8 <std+0x44>)
 8009eb4:	6224      	str	r4, [r4, #32]
 8009eb6:	6323      	str	r3, [r4, #48]	; 0x30
 8009eb8:	bd10      	pop	{r4, pc}
 8009eba:	bf00      	nop
 8009ebc:	0800a1d5 	.word	0x0800a1d5
 8009ec0:	0800a1f7 	.word	0x0800a1f7
 8009ec4:	0800a22f 	.word	0x0800a22f
 8009ec8:	0800a253 	.word	0x0800a253

08009ecc <_cleanup_r>:
 8009ecc:	4901      	ldr	r1, [pc, #4]	; (8009ed4 <_cleanup_r+0x8>)
 8009ece:	f000 b8af 	b.w	800a030 <_fwalk_reent>
 8009ed2:	bf00      	nop
 8009ed4:	08009e0d 	.word	0x08009e0d

08009ed8 <__sfmoreglue>:
 8009ed8:	b570      	push	{r4, r5, r6, lr}
 8009eda:	1e4a      	subs	r2, r1, #1
 8009edc:	2568      	movs	r5, #104	; 0x68
 8009ede:	4355      	muls	r5, r2
 8009ee0:	460e      	mov	r6, r1
 8009ee2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ee6:	f7ff fa87 	bl	80093f8 <_malloc_r>
 8009eea:	4604      	mov	r4, r0
 8009eec:	b140      	cbz	r0, 8009f00 <__sfmoreglue+0x28>
 8009eee:	2100      	movs	r1, #0
 8009ef0:	e9c0 1600 	strd	r1, r6, [r0]
 8009ef4:	300c      	adds	r0, #12
 8009ef6:	60a0      	str	r0, [r4, #8]
 8009ef8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009efc:	f7fd fb7a 	bl	80075f4 <memset>
 8009f00:	4620      	mov	r0, r4
 8009f02:	bd70      	pop	{r4, r5, r6, pc}

08009f04 <__sfp_lock_acquire>:
 8009f04:	4801      	ldr	r0, [pc, #4]	; (8009f0c <__sfp_lock_acquire+0x8>)
 8009f06:	f000 b8b3 	b.w	800a070 <__retarget_lock_acquire_recursive>
 8009f0a:	bf00      	nop
 8009f0c:	200044f4 	.word	0x200044f4

08009f10 <__sfp_lock_release>:
 8009f10:	4801      	ldr	r0, [pc, #4]	; (8009f18 <__sfp_lock_release+0x8>)
 8009f12:	f000 b8ae 	b.w	800a072 <__retarget_lock_release_recursive>
 8009f16:	bf00      	nop
 8009f18:	200044f4 	.word	0x200044f4

08009f1c <__sinit_lock_acquire>:
 8009f1c:	4801      	ldr	r0, [pc, #4]	; (8009f24 <__sinit_lock_acquire+0x8>)
 8009f1e:	f000 b8a7 	b.w	800a070 <__retarget_lock_acquire_recursive>
 8009f22:	bf00      	nop
 8009f24:	200044ef 	.word	0x200044ef

08009f28 <__sinit_lock_release>:
 8009f28:	4801      	ldr	r0, [pc, #4]	; (8009f30 <__sinit_lock_release+0x8>)
 8009f2a:	f000 b8a2 	b.w	800a072 <__retarget_lock_release_recursive>
 8009f2e:	bf00      	nop
 8009f30:	200044ef 	.word	0x200044ef

08009f34 <__sinit>:
 8009f34:	b510      	push	{r4, lr}
 8009f36:	4604      	mov	r4, r0
 8009f38:	f7ff fff0 	bl	8009f1c <__sinit_lock_acquire>
 8009f3c:	69a3      	ldr	r3, [r4, #24]
 8009f3e:	b11b      	cbz	r3, 8009f48 <__sinit+0x14>
 8009f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f44:	f7ff bff0 	b.w	8009f28 <__sinit_lock_release>
 8009f48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f4c:	6523      	str	r3, [r4, #80]	; 0x50
 8009f4e:	4b13      	ldr	r3, [pc, #76]	; (8009f9c <__sinit+0x68>)
 8009f50:	4a13      	ldr	r2, [pc, #76]	; (8009fa0 <__sinit+0x6c>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f56:	42a3      	cmp	r3, r4
 8009f58:	bf04      	itt	eq
 8009f5a:	2301      	moveq	r3, #1
 8009f5c:	61a3      	streq	r3, [r4, #24]
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f000 f820 	bl	8009fa4 <__sfp>
 8009f64:	6060      	str	r0, [r4, #4]
 8009f66:	4620      	mov	r0, r4
 8009f68:	f000 f81c 	bl	8009fa4 <__sfp>
 8009f6c:	60a0      	str	r0, [r4, #8]
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f000 f818 	bl	8009fa4 <__sfp>
 8009f74:	2200      	movs	r2, #0
 8009f76:	60e0      	str	r0, [r4, #12]
 8009f78:	2104      	movs	r1, #4
 8009f7a:	6860      	ldr	r0, [r4, #4]
 8009f7c:	f7ff ff82 	bl	8009e84 <std>
 8009f80:	68a0      	ldr	r0, [r4, #8]
 8009f82:	2201      	movs	r2, #1
 8009f84:	2109      	movs	r1, #9
 8009f86:	f7ff ff7d 	bl	8009e84 <std>
 8009f8a:	68e0      	ldr	r0, [r4, #12]
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	2112      	movs	r1, #18
 8009f90:	f7ff ff78 	bl	8009e84 <std>
 8009f94:	2301      	movs	r3, #1
 8009f96:	61a3      	str	r3, [r4, #24]
 8009f98:	e7d2      	b.n	8009f40 <__sinit+0xc>
 8009f9a:	bf00      	nop
 8009f9c:	0800bde8 	.word	0x0800bde8
 8009fa0:	08009ecd 	.word	0x08009ecd

08009fa4 <__sfp>:
 8009fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa6:	4607      	mov	r7, r0
 8009fa8:	f7ff ffac 	bl	8009f04 <__sfp_lock_acquire>
 8009fac:	4b1e      	ldr	r3, [pc, #120]	; (800a028 <__sfp+0x84>)
 8009fae:	681e      	ldr	r6, [r3, #0]
 8009fb0:	69b3      	ldr	r3, [r6, #24]
 8009fb2:	b913      	cbnz	r3, 8009fba <__sfp+0x16>
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f7ff ffbd 	bl	8009f34 <__sinit>
 8009fba:	3648      	adds	r6, #72	; 0x48
 8009fbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	d503      	bpl.n	8009fcc <__sfp+0x28>
 8009fc4:	6833      	ldr	r3, [r6, #0]
 8009fc6:	b30b      	cbz	r3, 800a00c <__sfp+0x68>
 8009fc8:	6836      	ldr	r6, [r6, #0]
 8009fca:	e7f7      	b.n	8009fbc <__sfp+0x18>
 8009fcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fd0:	b9d5      	cbnz	r5, 800a008 <__sfp+0x64>
 8009fd2:	4b16      	ldr	r3, [pc, #88]	; (800a02c <__sfp+0x88>)
 8009fd4:	60e3      	str	r3, [r4, #12]
 8009fd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fda:	6665      	str	r5, [r4, #100]	; 0x64
 8009fdc:	f000 f847 	bl	800a06e <__retarget_lock_init_recursive>
 8009fe0:	f7ff ff96 	bl	8009f10 <__sfp_lock_release>
 8009fe4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009fe8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009fec:	6025      	str	r5, [r4, #0]
 8009fee:	61a5      	str	r5, [r4, #24]
 8009ff0:	2208      	movs	r2, #8
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ff8:	f7fd fafc 	bl	80075f4 <memset>
 8009ffc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a000:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a004:	4620      	mov	r0, r4
 800a006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a008:	3468      	adds	r4, #104	; 0x68
 800a00a:	e7d9      	b.n	8009fc0 <__sfp+0x1c>
 800a00c:	2104      	movs	r1, #4
 800a00e:	4638      	mov	r0, r7
 800a010:	f7ff ff62 	bl	8009ed8 <__sfmoreglue>
 800a014:	4604      	mov	r4, r0
 800a016:	6030      	str	r0, [r6, #0]
 800a018:	2800      	cmp	r0, #0
 800a01a:	d1d5      	bne.n	8009fc8 <__sfp+0x24>
 800a01c:	f7ff ff78 	bl	8009f10 <__sfp_lock_release>
 800a020:	230c      	movs	r3, #12
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	e7ee      	b.n	800a004 <__sfp+0x60>
 800a026:	bf00      	nop
 800a028:	0800bde8 	.word	0x0800bde8
 800a02c:	ffff0001 	.word	0xffff0001

0800a030 <_fwalk_reent>:
 800a030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a034:	4606      	mov	r6, r0
 800a036:	4688      	mov	r8, r1
 800a038:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a03c:	2700      	movs	r7, #0
 800a03e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a042:	f1b9 0901 	subs.w	r9, r9, #1
 800a046:	d505      	bpl.n	800a054 <_fwalk_reent+0x24>
 800a048:	6824      	ldr	r4, [r4, #0]
 800a04a:	2c00      	cmp	r4, #0
 800a04c:	d1f7      	bne.n	800a03e <_fwalk_reent+0xe>
 800a04e:	4638      	mov	r0, r7
 800a050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a054:	89ab      	ldrh	r3, [r5, #12]
 800a056:	2b01      	cmp	r3, #1
 800a058:	d907      	bls.n	800a06a <_fwalk_reent+0x3a>
 800a05a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a05e:	3301      	adds	r3, #1
 800a060:	d003      	beq.n	800a06a <_fwalk_reent+0x3a>
 800a062:	4629      	mov	r1, r5
 800a064:	4630      	mov	r0, r6
 800a066:	47c0      	blx	r8
 800a068:	4307      	orrs	r7, r0
 800a06a:	3568      	adds	r5, #104	; 0x68
 800a06c:	e7e9      	b.n	800a042 <_fwalk_reent+0x12>

0800a06e <__retarget_lock_init_recursive>:
 800a06e:	4770      	bx	lr

0800a070 <__retarget_lock_acquire_recursive>:
 800a070:	4770      	bx	lr

0800a072 <__retarget_lock_release_recursive>:
 800a072:	4770      	bx	lr

0800a074 <__swhatbuf_r>:
 800a074:	b570      	push	{r4, r5, r6, lr}
 800a076:	460e      	mov	r6, r1
 800a078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a07c:	2900      	cmp	r1, #0
 800a07e:	b096      	sub	sp, #88	; 0x58
 800a080:	4614      	mov	r4, r2
 800a082:	461d      	mov	r5, r3
 800a084:	da07      	bge.n	800a096 <__swhatbuf_r+0x22>
 800a086:	2300      	movs	r3, #0
 800a088:	602b      	str	r3, [r5, #0]
 800a08a:	89b3      	ldrh	r3, [r6, #12]
 800a08c:	061a      	lsls	r2, r3, #24
 800a08e:	d410      	bmi.n	800a0b2 <__swhatbuf_r+0x3e>
 800a090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a094:	e00e      	b.n	800a0b4 <__swhatbuf_r+0x40>
 800a096:	466a      	mov	r2, sp
 800a098:	f000 f902 	bl	800a2a0 <_fstat_r>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	dbf2      	blt.n	800a086 <__swhatbuf_r+0x12>
 800a0a0:	9a01      	ldr	r2, [sp, #4]
 800a0a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0aa:	425a      	negs	r2, r3
 800a0ac:	415a      	adcs	r2, r3
 800a0ae:	602a      	str	r2, [r5, #0]
 800a0b0:	e7ee      	b.n	800a090 <__swhatbuf_r+0x1c>
 800a0b2:	2340      	movs	r3, #64	; 0x40
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	6023      	str	r3, [r4, #0]
 800a0b8:	b016      	add	sp, #88	; 0x58
 800a0ba:	bd70      	pop	{r4, r5, r6, pc}

0800a0bc <__smakebuf_r>:
 800a0bc:	898b      	ldrh	r3, [r1, #12]
 800a0be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0c0:	079d      	lsls	r5, r3, #30
 800a0c2:	4606      	mov	r6, r0
 800a0c4:	460c      	mov	r4, r1
 800a0c6:	d507      	bpl.n	800a0d8 <__smakebuf_r+0x1c>
 800a0c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0cc:	6023      	str	r3, [r4, #0]
 800a0ce:	6123      	str	r3, [r4, #16]
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	6163      	str	r3, [r4, #20]
 800a0d4:	b002      	add	sp, #8
 800a0d6:	bd70      	pop	{r4, r5, r6, pc}
 800a0d8:	ab01      	add	r3, sp, #4
 800a0da:	466a      	mov	r2, sp
 800a0dc:	f7ff ffca 	bl	800a074 <__swhatbuf_r>
 800a0e0:	9900      	ldr	r1, [sp, #0]
 800a0e2:	4605      	mov	r5, r0
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	f7ff f987 	bl	80093f8 <_malloc_r>
 800a0ea:	b948      	cbnz	r0, 800a100 <__smakebuf_r+0x44>
 800a0ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f0:	059a      	lsls	r2, r3, #22
 800a0f2:	d4ef      	bmi.n	800a0d4 <__smakebuf_r+0x18>
 800a0f4:	f023 0303 	bic.w	r3, r3, #3
 800a0f8:	f043 0302 	orr.w	r3, r3, #2
 800a0fc:	81a3      	strh	r3, [r4, #12]
 800a0fe:	e7e3      	b.n	800a0c8 <__smakebuf_r+0xc>
 800a100:	4b0d      	ldr	r3, [pc, #52]	; (800a138 <__smakebuf_r+0x7c>)
 800a102:	62b3      	str	r3, [r6, #40]	; 0x28
 800a104:	89a3      	ldrh	r3, [r4, #12]
 800a106:	6020      	str	r0, [r4, #0]
 800a108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a10c:	81a3      	strh	r3, [r4, #12]
 800a10e:	9b00      	ldr	r3, [sp, #0]
 800a110:	6163      	str	r3, [r4, #20]
 800a112:	9b01      	ldr	r3, [sp, #4]
 800a114:	6120      	str	r0, [r4, #16]
 800a116:	b15b      	cbz	r3, 800a130 <__smakebuf_r+0x74>
 800a118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a11c:	4630      	mov	r0, r6
 800a11e:	f000 f8d1 	bl	800a2c4 <_isatty_r>
 800a122:	b128      	cbz	r0, 800a130 <__smakebuf_r+0x74>
 800a124:	89a3      	ldrh	r3, [r4, #12]
 800a126:	f023 0303 	bic.w	r3, r3, #3
 800a12a:	f043 0301 	orr.w	r3, r3, #1
 800a12e:	81a3      	strh	r3, [r4, #12]
 800a130:	89a0      	ldrh	r0, [r4, #12]
 800a132:	4305      	orrs	r5, r0
 800a134:	81a5      	strh	r5, [r4, #12]
 800a136:	e7cd      	b.n	800a0d4 <__smakebuf_r+0x18>
 800a138:	08009ecd 	.word	0x08009ecd

0800a13c <_malloc_usable_size_r>:
 800a13c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a140:	1f18      	subs	r0, r3, #4
 800a142:	2b00      	cmp	r3, #0
 800a144:	bfbc      	itt	lt
 800a146:	580b      	ldrlt	r3, [r1, r0]
 800a148:	18c0      	addlt	r0, r0, r3
 800a14a:	4770      	bx	lr

0800a14c <_raise_r>:
 800a14c:	291f      	cmp	r1, #31
 800a14e:	b538      	push	{r3, r4, r5, lr}
 800a150:	4604      	mov	r4, r0
 800a152:	460d      	mov	r5, r1
 800a154:	d904      	bls.n	800a160 <_raise_r+0x14>
 800a156:	2316      	movs	r3, #22
 800a158:	6003      	str	r3, [r0, #0]
 800a15a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a15e:	bd38      	pop	{r3, r4, r5, pc}
 800a160:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a162:	b112      	cbz	r2, 800a16a <_raise_r+0x1e>
 800a164:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a168:	b94b      	cbnz	r3, 800a17e <_raise_r+0x32>
 800a16a:	4620      	mov	r0, r4
 800a16c:	f000 f830 	bl	800a1d0 <_getpid_r>
 800a170:	462a      	mov	r2, r5
 800a172:	4601      	mov	r1, r0
 800a174:	4620      	mov	r0, r4
 800a176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a17a:	f000 b817 	b.w	800a1ac <_kill_r>
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d00a      	beq.n	800a198 <_raise_r+0x4c>
 800a182:	1c59      	adds	r1, r3, #1
 800a184:	d103      	bne.n	800a18e <_raise_r+0x42>
 800a186:	2316      	movs	r3, #22
 800a188:	6003      	str	r3, [r0, #0]
 800a18a:	2001      	movs	r0, #1
 800a18c:	e7e7      	b.n	800a15e <_raise_r+0x12>
 800a18e:	2400      	movs	r4, #0
 800a190:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a194:	4628      	mov	r0, r5
 800a196:	4798      	blx	r3
 800a198:	2000      	movs	r0, #0
 800a19a:	e7e0      	b.n	800a15e <_raise_r+0x12>

0800a19c <raise>:
 800a19c:	4b02      	ldr	r3, [pc, #8]	; (800a1a8 <raise+0xc>)
 800a19e:	4601      	mov	r1, r0
 800a1a0:	6818      	ldr	r0, [r3, #0]
 800a1a2:	f7ff bfd3 	b.w	800a14c <_raise_r>
 800a1a6:	bf00      	nop
 800a1a8:	2000002c 	.word	0x2000002c

0800a1ac <_kill_r>:
 800a1ac:	b538      	push	{r3, r4, r5, lr}
 800a1ae:	4d07      	ldr	r5, [pc, #28]	; (800a1cc <_kill_r+0x20>)
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	4608      	mov	r0, r1
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	602b      	str	r3, [r5, #0]
 800a1ba:	f7f9 f98f 	bl	80034dc <_kill>
 800a1be:	1c43      	adds	r3, r0, #1
 800a1c0:	d102      	bne.n	800a1c8 <_kill_r+0x1c>
 800a1c2:	682b      	ldr	r3, [r5, #0]
 800a1c4:	b103      	cbz	r3, 800a1c8 <_kill_r+0x1c>
 800a1c6:	6023      	str	r3, [r4, #0]
 800a1c8:	bd38      	pop	{r3, r4, r5, pc}
 800a1ca:	bf00      	nop
 800a1cc:	200044e8 	.word	0x200044e8

0800a1d0 <_getpid_r>:
 800a1d0:	f7f9 b97c 	b.w	80034cc <_getpid>

0800a1d4 <__sread>:
 800a1d4:	b510      	push	{r4, lr}
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1dc:	f000 f894 	bl	800a308 <_read_r>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	bfab      	itete	ge
 800a1e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1e6:	89a3      	ldrhlt	r3, [r4, #12]
 800a1e8:	181b      	addge	r3, r3, r0
 800a1ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1ee:	bfac      	ite	ge
 800a1f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1f2:	81a3      	strhlt	r3, [r4, #12]
 800a1f4:	bd10      	pop	{r4, pc}

0800a1f6 <__swrite>:
 800a1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1fa:	461f      	mov	r7, r3
 800a1fc:	898b      	ldrh	r3, [r1, #12]
 800a1fe:	05db      	lsls	r3, r3, #23
 800a200:	4605      	mov	r5, r0
 800a202:	460c      	mov	r4, r1
 800a204:	4616      	mov	r6, r2
 800a206:	d505      	bpl.n	800a214 <__swrite+0x1e>
 800a208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a20c:	2302      	movs	r3, #2
 800a20e:	2200      	movs	r2, #0
 800a210:	f000 f868 	bl	800a2e4 <_lseek_r>
 800a214:	89a3      	ldrh	r3, [r4, #12]
 800a216:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a21a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a21e:	81a3      	strh	r3, [r4, #12]
 800a220:	4632      	mov	r2, r6
 800a222:	463b      	mov	r3, r7
 800a224:	4628      	mov	r0, r5
 800a226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a22a:	f000 b817 	b.w	800a25c <_write_r>

0800a22e <__sseek>:
 800a22e:	b510      	push	{r4, lr}
 800a230:	460c      	mov	r4, r1
 800a232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a236:	f000 f855 	bl	800a2e4 <_lseek_r>
 800a23a:	1c43      	adds	r3, r0, #1
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	bf15      	itete	ne
 800a240:	6560      	strne	r0, [r4, #84]	; 0x54
 800a242:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a246:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a24a:	81a3      	strheq	r3, [r4, #12]
 800a24c:	bf18      	it	ne
 800a24e:	81a3      	strhne	r3, [r4, #12]
 800a250:	bd10      	pop	{r4, pc}

0800a252 <__sclose>:
 800a252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a256:	f000 b813 	b.w	800a280 <_close_r>
	...

0800a25c <_write_r>:
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	4d07      	ldr	r5, [pc, #28]	; (800a27c <_write_r+0x20>)
 800a260:	4604      	mov	r4, r0
 800a262:	4608      	mov	r0, r1
 800a264:	4611      	mov	r1, r2
 800a266:	2200      	movs	r2, #0
 800a268:	602a      	str	r2, [r5, #0]
 800a26a:	461a      	mov	r2, r3
 800a26c:	f7f9 f96d 	bl	800354a <_write>
 800a270:	1c43      	adds	r3, r0, #1
 800a272:	d102      	bne.n	800a27a <_write_r+0x1e>
 800a274:	682b      	ldr	r3, [r5, #0]
 800a276:	b103      	cbz	r3, 800a27a <_write_r+0x1e>
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	bd38      	pop	{r3, r4, r5, pc}
 800a27c:	200044e8 	.word	0x200044e8

0800a280 <_close_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	4d06      	ldr	r5, [pc, #24]	; (800a29c <_close_r+0x1c>)
 800a284:	2300      	movs	r3, #0
 800a286:	4604      	mov	r4, r0
 800a288:	4608      	mov	r0, r1
 800a28a:	602b      	str	r3, [r5, #0]
 800a28c:	f7f9 f979 	bl	8003582 <_close>
 800a290:	1c43      	adds	r3, r0, #1
 800a292:	d102      	bne.n	800a29a <_close_r+0x1a>
 800a294:	682b      	ldr	r3, [r5, #0]
 800a296:	b103      	cbz	r3, 800a29a <_close_r+0x1a>
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	bd38      	pop	{r3, r4, r5, pc}
 800a29c:	200044e8 	.word	0x200044e8

0800a2a0 <_fstat_r>:
 800a2a0:	b538      	push	{r3, r4, r5, lr}
 800a2a2:	4d07      	ldr	r5, [pc, #28]	; (800a2c0 <_fstat_r+0x20>)
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	4608      	mov	r0, r1
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	602b      	str	r3, [r5, #0]
 800a2ae:	f7f9 f974 	bl	800359a <_fstat>
 800a2b2:	1c43      	adds	r3, r0, #1
 800a2b4:	d102      	bne.n	800a2bc <_fstat_r+0x1c>
 800a2b6:	682b      	ldr	r3, [r5, #0]
 800a2b8:	b103      	cbz	r3, 800a2bc <_fstat_r+0x1c>
 800a2ba:	6023      	str	r3, [r4, #0]
 800a2bc:	bd38      	pop	{r3, r4, r5, pc}
 800a2be:	bf00      	nop
 800a2c0:	200044e8 	.word	0x200044e8

0800a2c4 <_isatty_r>:
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	4d06      	ldr	r5, [pc, #24]	; (800a2e0 <_isatty_r+0x1c>)
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	4608      	mov	r0, r1
 800a2ce:	602b      	str	r3, [r5, #0]
 800a2d0:	f7f9 f973 	bl	80035ba <_isatty>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d102      	bne.n	800a2de <_isatty_r+0x1a>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	b103      	cbz	r3, 800a2de <_isatty_r+0x1a>
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	200044e8 	.word	0x200044e8

0800a2e4 <_lseek_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	4d07      	ldr	r5, [pc, #28]	; (800a304 <_lseek_r+0x20>)
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	4608      	mov	r0, r1
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	602a      	str	r2, [r5, #0]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	f7f9 f96c 	bl	80035d0 <_lseek>
 800a2f8:	1c43      	adds	r3, r0, #1
 800a2fa:	d102      	bne.n	800a302 <_lseek_r+0x1e>
 800a2fc:	682b      	ldr	r3, [r5, #0]
 800a2fe:	b103      	cbz	r3, 800a302 <_lseek_r+0x1e>
 800a300:	6023      	str	r3, [r4, #0]
 800a302:	bd38      	pop	{r3, r4, r5, pc}
 800a304:	200044e8 	.word	0x200044e8

0800a308 <_read_r>:
 800a308:	b538      	push	{r3, r4, r5, lr}
 800a30a:	4d07      	ldr	r5, [pc, #28]	; (800a328 <_read_r+0x20>)
 800a30c:	4604      	mov	r4, r0
 800a30e:	4608      	mov	r0, r1
 800a310:	4611      	mov	r1, r2
 800a312:	2200      	movs	r2, #0
 800a314:	602a      	str	r2, [r5, #0]
 800a316:	461a      	mov	r2, r3
 800a318:	f7f9 f8fa 	bl	8003510 <_read>
 800a31c:	1c43      	adds	r3, r0, #1
 800a31e:	d102      	bne.n	800a326 <_read_r+0x1e>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	b103      	cbz	r3, 800a326 <_read_r+0x1e>
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	bd38      	pop	{r3, r4, r5, pc}
 800a328:	200044e8 	.word	0x200044e8
 800a32c:	00000000 	.word	0x00000000

0800a330 <cos>:
 800a330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a332:	ec53 2b10 	vmov	r2, r3, d0
 800a336:	4824      	ldr	r0, [pc, #144]	; (800a3c8 <cos+0x98>)
 800a338:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a33c:	4281      	cmp	r1, r0
 800a33e:	dc06      	bgt.n	800a34e <cos+0x1e>
 800a340:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800a3c0 <cos+0x90>
 800a344:	f000 fda8 	bl	800ae98 <__kernel_cos>
 800a348:	ec51 0b10 	vmov	r0, r1, d0
 800a34c:	e007      	b.n	800a35e <cos+0x2e>
 800a34e:	481f      	ldr	r0, [pc, #124]	; (800a3cc <cos+0x9c>)
 800a350:	4281      	cmp	r1, r0
 800a352:	dd09      	ble.n	800a368 <cos+0x38>
 800a354:	ee10 0a10 	vmov	r0, s0
 800a358:	4619      	mov	r1, r3
 800a35a:	f7f5 ff9d 	bl	8000298 <__aeabi_dsub>
 800a35e:	ec41 0b10 	vmov	d0, r0, r1
 800a362:	b005      	add	sp, #20
 800a364:	f85d fb04 	ldr.w	pc, [sp], #4
 800a368:	4668      	mov	r0, sp
 800a36a:	f000 fad5 	bl	800a918 <__ieee754_rem_pio2>
 800a36e:	f000 0003 	and.w	r0, r0, #3
 800a372:	2801      	cmp	r0, #1
 800a374:	d007      	beq.n	800a386 <cos+0x56>
 800a376:	2802      	cmp	r0, #2
 800a378:	d012      	beq.n	800a3a0 <cos+0x70>
 800a37a:	b9c0      	cbnz	r0, 800a3ae <cos+0x7e>
 800a37c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a380:	ed9d 0b00 	vldr	d0, [sp]
 800a384:	e7de      	b.n	800a344 <cos+0x14>
 800a386:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a38a:	ed9d 0b00 	vldr	d0, [sp]
 800a38e:	f001 f98b 	bl	800b6a8 <__kernel_sin>
 800a392:	ec53 2b10 	vmov	r2, r3, d0
 800a396:	ee10 0a10 	vmov	r0, s0
 800a39a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a39e:	e7de      	b.n	800a35e <cos+0x2e>
 800a3a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a3a4:	ed9d 0b00 	vldr	d0, [sp]
 800a3a8:	f000 fd76 	bl	800ae98 <__kernel_cos>
 800a3ac:	e7f1      	b.n	800a392 <cos+0x62>
 800a3ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a3b2:	ed9d 0b00 	vldr	d0, [sp]
 800a3b6:	2001      	movs	r0, #1
 800a3b8:	f001 f976 	bl	800b6a8 <__kernel_sin>
 800a3bc:	e7c4      	b.n	800a348 <cos+0x18>
 800a3be:	bf00      	nop
	...
 800a3c8:	3fe921fb 	.word	0x3fe921fb
 800a3cc:	7fefffff 	.word	0x7fefffff

0800a3d0 <sin>:
 800a3d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3d2:	ec53 2b10 	vmov	r2, r3, d0
 800a3d6:	4826      	ldr	r0, [pc, #152]	; (800a470 <sin+0xa0>)
 800a3d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a3dc:	4281      	cmp	r1, r0
 800a3de:	dc07      	bgt.n	800a3f0 <sin+0x20>
 800a3e0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a468 <sin+0x98>
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	f001 f95f 	bl	800b6a8 <__kernel_sin>
 800a3ea:	ec51 0b10 	vmov	r0, r1, d0
 800a3ee:	e007      	b.n	800a400 <sin+0x30>
 800a3f0:	4820      	ldr	r0, [pc, #128]	; (800a474 <sin+0xa4>)
 800a3f2:	4281      	cmp	r1, r0
 800a3f4:	dd09      	ble.n	800a40a <sin+0x3a>
 800a3f6:	ee10 0a10 	vmov	r0, s0
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	f7f5 ff4c 	bl	8000298 <__aeabi_dsub>
 800a400:	ec41 0b10 	vmov	d0, r0, r1
 800a404:	b005      	add	sp, #20
 800a406:	f85d fb04 	ldr.w	pc, [sp], #4
 800a40a:	4668      	mov	r0, sp
 800a40c:	f000 fa84 	bl	800a918 <__ieee754_rem_pio2>
 800a410:	f000 0003 	and.w	r0, r0, #3
 800a414:	2801      	cmp	r0, #1
 800a416:	d008      	beq.n	800a42a <sin+0x5a>
 800a418:	2802      	cmp	r0, #2
 800a41a:	d00d      	beq.n	800a438 <sin+0x68>
 800a41c:	b9d0      	cbnz	r0, 800a454 <sin+0x84>
 800a41e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a422:	ed9d 0b00 	vldr	d0, [sp]
 800a426:	2001      	movs	r0, #1
 800a428:	e7dd      	b.n	800a3e6 <sin+0x16>
 800a42a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a42e:	ed9d 0b00 	vldr	d0, [sp]
 800a432:	f000 fd31 	bl	800ae98 <__kernel_cos>
 800a436:	e7d8      	b.n	800a3ea <sin+0x1a>
 800a438:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a43c:	ed9d 0b00 	vldr	d0, [sp]
 800a440:	2001      	movs	r0, #1
 800a442:	f001 f931 	bl	800b6a8 <__kernel_sin>
 800a446:	ec53 2b10 	vmov	r2, r3, d0
 800a44a:	ee10 0a10 	vmov	r0, s0
 800a44e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a452:	e7d5      	b.n	800a400 <sin+0x30>
 800a454:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a458:	ed9d 0b00 	vldr	d0, [sp]
 800a45c:	f000 fd1c 	bl	800ae98 <__kernel_cos>
 800a460:	e7f1      	b.n	800a446 <sin+0x76>
 800a462:	bf00      	nop
 800a464:	f3af 8000 	nop.w
	...
 800a470:	3fe921fb 	.word	0x3fe921fb
 800a474:	7fefffff 	.word	0x7fefffff

0800a478 <atan2>:
 800a478:	f000 b872 	b.w	800a560 <__ieee754_atan2>

0800a47c <fmod>:
 800a47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47e:	ed2d 8b02 	vpush	{d8}
 800a482:	ec57 6b10 	vmov	r6, r7, d0
 800a486:	ec55 4b11 	vmov	r4, r5, d1
 800a48a:	f000 f933 	bl	800a6f4 <__ieee754_fmod>
 800a48e:	4b18      	ldr	r3, [pc, #96]	; (800a4f0 <fmod+0x74>)
 800a490:	eeb0 8a40 	vmov.f32	s16, s0
 800a494:	eef0 8a60 	vmov.f32	s17, s1
 800a498:	f993 3000 	ldrsb.w	r3, [r3]
 800a49c:	3301      	adds	r3, #1
 800a49e:	d020      	beq.n	800a4e2 <fmod+0x66>
 800a4a0:	4622      	mov	r2, r4
 800a4a2:	462b      	mov	r3, r5
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	f7f6 fb48 	bl	8000b3c <__aeabi_dcmpun>
 800a4ac:	b9c8      	cbnz	r0, 800a4e2 <fmod+0x66>
 800a4ae:	4632      	mov	r2, r6
 800a4b0:	463b      	mov	r3, r7
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	4639      	mov	r1, r7
 800a4b6:	f7f6 fb41 	bl	8000b3c <__aeabi_dcmpun>
 800a4ba:	b990      	cbnz	r0, 800a4e2 <fmod+0x66>
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2300      	movs	r3, #0
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	4629      	mov	r1, r5
 800a4c4:	f7f6 fb08 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4c8:	b158      	cbz	r0, 800a4e2 <fmod+0x66>
 800a4ca:	f7fd f869 	bl	80075a0 <__errno>
 800a4ce:	2321      	movs	r3, #33	; 0x21
 800a4d0:	6003      	str	r3, [r0, #0]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	4610      	mov	r0, r2
 800a4d8:	4619      	mov	r1, r3
 800a4da:	f7f6 f9bf 	bl	800085c <__aeabi_ddiv>
 800a4de:	ec41 0b18 	vmov	d8, r0, r1
 800a4e2:	eeb0 0a48 	vmov.f32	s0, s16
 800a4e6:	eef0 0a68 	vmov.f32	s1, s17
 800a4ea:	ecbd 8b02 	vpop	{d8}
 800a4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f0:	200001fc 	.word	0x200001fc

0800a4f4 <sqrt>:
 800a4f4:	b538      	push	{r3, r4, r5, lr}
 800a4f6:	ed2d 8b02 	vpush	{d8}
 800a4fa:	ec55 4b10 	vmov	r4, r5, d0
 800a4fe:	f000 fc15 	bl	800ad2c <__ieee754_sqrt>
 800a502:	4b15      	ldr	r3, [pc, #84]	; (800a558 <sqrt+0x64>)
 800a504:	eeb0 8a40 	vmov.f32	s16, s0
 800a508:	eef0 8a60 	vmov.f32	s17, s1
 800a50c:	f993 3000 	ldrsb.w	r3, [r3]
 800a510:	3301      	adds	r3, #1
 800a512:	d019      	beq.n	800a548 <sqrt+0x54>
 800a514:	4622      	mov	r2, r4
 800a516:	462b      	mov	r3, r5
 800a518:	4620      	mov	r0, r4
 800a51a:	4629      	mov	r1, r5
 800a51c:	f7f6 fb0e 	bl	8000b3c <__aeabi_dcmpun>
 800a520:	b990      	cbnz	r0, 800a548 <sqrt+0x54>
 800a522:	2200      	movs	r2, #0
 800a524:	2300      	movs	r3, #0
 800a526:	4620      	mov	r0, r4
 800a528:	4629      	mov	r1, r5
 800a52a:	f7f6 fadf 	bl	8000aec <__aeabi_dcmplt>
 800a52e:	b158      	cbz	r0, 800a548 <sqrt+0x54>
 800a530:	f7fd f836 	bl	80075a0 <__errno>
 800a534:	2321      	movs	r3, #33	; 0x21
 800a536:	6003      	str	r3, [r0, #0]
 800a538:	2200      	movs	r2, #0
 800a53a:	2300      	movs	r3, #0
 800a53c:	4610      	mov	r0, r2
 800a53e:	4619      	mov	r1, r3
 800a540:	f7f6 f98c 	bl	800085c <__aeabi_ddiv>
 800a544:	ec41 0b18 	vmov	d8, r0, r1
 800a548:	eeb0 0a48 	vmov.f32	s0, s16
 800a54c:	eef0 0a68 	vmov.f32	s1, s17
 800a550:	ecbd 8b02 	vpop	{d8}
 800a554:	bd38      	pop	{r3, r4, r5, pc}
 800a556:	bf00      	nop
 800a558:	200001fc 	.word	0x200001fc
 800a55c:	00000000 	.word	0x00000000

0800a560 <__ieee754_atan2>:
 800a560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a564:	ec57 6b11 	vmov	r6, r7, d1
 800a568:	4273      	negs	r3, r6
 800a56a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a6f0 <__ieee754_atan2+0x190>
 800a56e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a572:	4333      	orrs	r3, r6
 800a574:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a578:	4573      	cmp	r3, lr
 800a57a:	ec51 0b10 	vmov	r0, r1, d0
 800a57e:	ee11 8a10 	vmov	r8, s2
 800a582:	d80a      	bhi.n	800a59a <__ieee754_atan2+0x3a>
 800a584:	4244      	negs	r4, r0
 800a586:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a58a:	4304      	orrs	r4, r0
 800a58c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a590:	4574      	cmp	r4, lr
 800a592:	ee10 9a10 	vmov	r9, s0
 800a596:	468c      	mov	ip, r1
 800a598:	d907      	bls.n	800a5aa <__ieee754_atan2+0x4a>
 800a59a:	4632      	mov	r2, r6
 800a59c:	463b      	mov	r3, r7
 800a59e:	f7f5 fe7d 	bl	800029c <__adddf3>
 800a5a2:	ec41 0b10 	vmov	d0, r0, r1
 800a5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5aa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a5ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a5b2:	4334      	orrs	r4, r6
 800a5b4:	d103      	bne.n	800a5be <__ieee754_atan2+0x5e>
 800a5b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5ba:	f001 b935 	b.w	800b828 <atan>
 800a5be:	17bc      	asrs	r4, r7, #30
 800a5c0:	f004 0402 	and.w	r4, r4, #2
 800a5c4:	ea53 0909 	orrs.w	r9, r3, r9
 800a5c8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a5cc:	d107      	bne.n	800a5de <__ieee754_atan2+0x7e>
 800a5ce:	2c02      	cmp	r4, #2
 800a5d0:	d060      	beq.n	800a694 <__ieee754_atan2+0x134>
 800a5d2:	2c03      	cmp	r4, #3
 800a5d4:	d1e5      	bne.n	800a5a2 <__ieee754_atan2+0x42>
 800a5d6:	a142      	add	r1, pc, #264	; (adr r1, 800a6e0 <__ieee754_atan2+0x180>)
 800a5d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5dc:	e7e1      	b.n	800a5a2 <__ieee754_atan2+0x42>
 800a5de:	ea52 0808 	orrs.w	r8, r2, r8
 800a5e2:	d106      	bne.n	800a5f2 <__ieee754_atan2+0x92>
 800a5e4:	f1bc 0f00 	cmp.w	ip, #0
 800a5e8:	da5f      	bge.n	800a6aa <__ieee754_atan2+0x14a>
 800a5ea:	a13f      	add	r1, pc, #252	; (adr r1, 800a6e8 <__ieee754_atan2+0x188>)
 800a5ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5f0:	e7d7      	b.n	800a5a2 <__ieee754_atan2+0x42>
 800a5f2:	4572      	cmp	r2, lr
 800a5f4:	d10f      	bne.n	800a616 <__ieee754_atan2+0xb6>
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a5fc:	d107      	bne.n	800a60e <__ieee754_atan2+0xae>
 800a5fe:	2c02      	cmp	r4, #2
 800a600:	d84c      	bhi.n	800a69c <__ieee754_atan2+0x13c>
 800a602:	4b35      	ldr	r3, [pc, #212]	; (800a6d8 <__ieee754_atan2+0x178>)
 800a604:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a608:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a60c:	e7c9      	b.n	800a5a2 <__ieee754_atan2+0x42>
 800a60e:	2c02      	cmp	r4, #2
 800a610:	d848      	bhi.n	800a6a4 <__ieee754_atan2+0x144>
 800a612:	4b32      	ldr	r3, [pc, #200]	; (800a6dc <__ieee754_atan2+0x17c>)
 800a614:	e7f6      	b.n	800a604 <__ieee754_atan2+0xa4>
 800a616:	4573      	cmp	r3, lr
 800a618:	d0e4      	beq.n	800a5e4 <__ieee754_atan2+0x84>
 800a61a:	1a9b      	subs	r3, r3, r2
 800a61c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a620:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a624:	da1e      	bge.n	800a664 <__ieee754_atan2+0x104>
 800a626:	2f00      	cmp	r7, #0
 800a628:	da01      	bge.n	800a62e <__ieee754_atan2+0xce>
 800a62a:	323c      	adds	r2, #60	; 0x3c
 800a62c:	db1e      	blt.n	800a66c <__ieee754_atan2+0x10c>
 800a62e:	4632      	mov	r2, r6
 800a630:	463b      	mov	r3, r7
 800a632:	f7f6 f913 	bl	800085c <__aeabi_ddiv>
 800a636:	ec41 0b10 	vmov	d0, r0, r1
 800a63a:	f001 fa95 	bl	800bb68 <fabs>
 800a63e:	f001 f8f3 	bl	800b828 <atan>
 800a642:	ec51 0b10 	vmov	r0, r1, d0
 800a646:	2c01      	cmp	r4, #1
 800a648:	d013      	beq.n	800a672 <__ieee754_atan2+0x112>
 800a64a:	2c02      	cmp	r4, #2
 800a64c:	d015      	beq.n	800a67a <__ieee754_atan2+0x11a>
 800a64e:	2c00      	cmp	r4, #0
 800a650:	d0a7      	beq.n	800a5a2 <__ieee754_atan2+0x42>
 800a652:	a319      	add	r3, pc, #100	; (adr r3, 800a6b8 <__ieee754_atan2+0x158>)
 800a654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a658:	f7f5 fe1e 	bl	8000298 <__aeabi_dsub>
 800a65c:	a318      	add	r3, pc, #96	; (adr r3, 800a6c0 <__ieee754_atan2+0x160>)
 800a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a662:	e014      	b.n	800a68e <__ieee754_atan2+0x12e>
 800a664:	a118      	add	r1, pc, #96	; (adr r1, 800a6c8 <__ieee754_atan2+0x168>)
 800a666:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a66a:	e7ec      	b.n	800a646 <__ieee754_atan2+0xe6>
 800a66c:	2000      	movs	r0, #0
 800a66e:	2100      	movs	r1, #0
 800a670:	e7e9      	b.n	800a646 <__ieee754_atan2+0xe6>
 800a672:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a676:	4619      	mov	r1, r3
 800a678:	e793      	b.n	800a5a2 <__ieee754_atan2+0x42>
 800a67a:	a30f      	add	r3, pc, #60	; (adr r3, 800a6b8 <__ieee754_atan2+0x158>)
 800a67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a680:	f7f5 fe0a 	bl	8000298 <__aeabi_dsub>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	a10d      	add	r1, pc, #52	; (adr r1, 800a6c0 <__ieee754_atan2+0x160>)
 800a68a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a68e:	f7f5 fe03 	bl	8000298 <__aeabi_dsub>
 800a692:	e786      	b.n	800a5a2 <__ieee754_atan2+0x42>
 800a694:	a10a      	add	r1, pc, #40	; (adr r1, 800a6c0 <__ieee754_atan2+0x160>)
 800a696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a69a:	e782      	b.n	800a5a2 <__ieee754_atan2+0x42>
 800a69c:	a10c      	add	r1, pc, #48	; (adr r1, 800a6d0 <__ieee754_atan2+0x170>)
 800a69e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6a2:	e77e      	b.n	800a5a2 <__ieee754_atan2+0x42>
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	e77b      	b.n	800a5a2 <__ieee754_atan2+0x42>
 800a6aa:	a107      	add	r1, pc, #28	; (adr r1, 800a6c8 <__ieee754_atan2+0x168>)
 800a6ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6b0:	e777      	b.n	800a5a2 <__ieee754_atan2+0x42>
 800a6b2:	bf00      	nop
 800a6b4:	f3af 8000 	nop.w
 800a6b8:	33145c07 	.word	0x33145c07
 800a6bc:	3ca1a626 	.word	0x3ca1a626
 800a6c0:	54442d18 	.word	0x54442d18
 800a6c4:	400921fb 	.word	0x400921fb
 800a6c8:	54442d18 	.word	0x54442d18
 800a6cc:	3ff921fb 	.word	0x3ff921fb
 800a6d0:	54442d18 	.word	0x54442d18
 800a6d4:	3fe921fb 	.word	0x3fe921fb
 800a6d8:	0800c1d0 	.word	0x0800c1d0
 800a6dc:	0800c1e8 	.word	0x0800c1e8
 800a6e0:	54442d18 	.word	0x54442d18
 800a6e4:	c00921fb 	.word	0xc00921fb
 800a6e8:	54442d18 	.word	0x54442d18
 800a6ec:	bff921fb 	.word	0xbff921fb
 800a6f0:	7ff00000 	.word	0x7ff00000

0800a6f4 <__ieee754_fmod>:
 800a6f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f8:	ec53 2b11 	vmov	r2, r3, d1
 800a6fc:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800a700:	ea5e 0402 	orrs.w	r4, lr, r2
 800a704:	ec51 0b10 	vmov	r0, r1, d0
 800a708:	ee11 7a10 	vmov	r7, s2
 800a70c:	ee11 ca10 	vmov	ip, s2
 800a710:	461e      	mov	r6, r3
 800a712:	d00d      	beq.n	800a730 <__ieee754_fmod+0x3c>
 800a714:	4c7a      	ldr	r4, [pc, #488]	; (800a900 <__ieee754_fmod+0x20c>)
 800a716:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800a71a:	45a0      	cmp	r8, r4
 800a71c:	4689      	mov	r9, r1
 800a71e:	dc07      	bgt.n	800a730 <__ieee754_fmod+0x3c>
 800a720:	4254      	negs	r4, r2
 800a722:	4d78      	ldr	r5, [pc, #480]	; (800a904 <__ieee754_fmod+0x210>)
 800a724:	4314      	orrs	r4, r2
 800a726:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800a72a:	42ac      	cmp	r4, r5
 800a72c:	46ab      	mov	fp, r5
 800a72e:	d909      	bls.n	800a744 <__ieee754_fmod+0x50>
 800a730:	f7f5 ff6a 	bl	8000608 <__aeabi_dmul>
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	f7f6 f890 	bl	800085c <__aeabi_ddiv>
 800a73c:	ec41 0b10 	vmov	d0, r0, r1
 800a740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a744:	45f0      	cmp	r8, lr
 800a746:	ee10 aa10 	vmov	sl, s0
 800a74a:	ee10 4a10 	vmov	r4, s0
 800a74e:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800a752:	dc0a      	bgt.n	800a76a <__ieee754_fmod+0x76>
 800a754:	dbf2      	blt.n	800a73c <__ieee754_fmod+0x48>
 800a756:	4290      	cmp	r0, r2
 800a758:	d3f0      	bcc.n	800a73c <__ieee754_fmod+0x48>
 800a75a:	d106      	bne.n	800a76a <__ieee754_fmod+0x76>
 800a75c:	4a6a      	ldr	r2, [pc, #424]	; (800a908 <__ieee754_fmod+0x214>)
 800a75e:	0fed      	lsrs	r5, r5, #31
 800a760:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a764:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a768:	e7e8      	b.n	800a73c <__ieee754_fmod+0x48>
 800a76a:	ea19 0f0b 	tst.w	r9, fp
 800a76e:	d14a      	bne.n	800a806 <__ieee754_fmod+0x112>
 800a770:	f1b8 0f00 	cmp.w	r8, #0
 800a774:	d13f      	bne.n	800a7f6 <__ieee754_fmod+0x102>
 800a776:	4965      	ldr	r1, [pc, #404]	; (800a90c <__ieee754_fmod+0x218>)
 800a778:	4653      	mov	r3, sl
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	dc38      	bgt.n	800a7f0 <__ieee754_fmod+0xfc>
 800a77e:	4b61      	ldr	r3, [pc, #388]	; (800a904 <__ieee754_fmod+0x210>)
 800a780:	4033      	ands	r3, r6
 800a782:	2b00      	cmp	r3, #0
 800a784:	d14f      	bne.n	800a826 <__ieee754_fmod+0x132>
 800a786:	f1be 0f00 	cmp.w	lr, #0
 800a78a:	d144      	bne.n	800a816 <__ieee754_fmod+0x122>
 800a78c:	4a5f      	ldr	r2, [pc, #380]	; (800a90c <__ieee754_fmod+0x218>)
 800a78e:	463b      	mov	r3, r7
 800a790:	2b00      	cmp	r3, #0
 800a792:	dc3d      	bgt.n	800a810 <__ieee754_fmod+0x11c>
 800a794:	4b5e      	ldr	r3, [pc, #376]	; (800a910 <__ieee754_fmod+0x21c>)
 800a796:	4299      	cmp	r1, r3
 800a798:	db4a      	blt.n	800a830 <__ieee754_fmod+0x13c>
 800a79a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a79e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7a2:	485b      	ldr	r0, [pc, #364]	; (800a910 <__ieee754_fmod+0x21c>)
 800a7a4:	4282      	cmp	r2, r0
 800a7a6:	db57      	blt.n	800a858 <__ieee754_fmod+0x164>
 800a7a8:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800a7ac:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800a7b0:	1a89      	subs	r1, r1, r2
 800a7b2:	1b98      	subs	r0, r3, r6
 800a7b4:	eba4 070c 	sub.w	r7, r4, ip
 800a7b8:	2900      	cmp	r1, #0
 800a7ba:	d164      	bne.n	800a886 <__ieee754_fmod+0x192>
 800a7bc:	4564      	cmp	r4, ip
 800a7be:	bf38      	it	cc
 800a7c0:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	bfa4      	itt	ge
 800a7c8:	463c      	movge	r4, r7
 800a7ca:	4603      	movge	r3, r0
 800a7cc:	ea53 0104 	orrs.w	r1, r3, r4
 800a7d0:	d0c4      	beq.n	800a75c <__ieee754_fmod+0x68>
 800a7d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7d6:	db6b      	blt.n	800a8b0 <__ieee754_fmod+0x1bc>
 800a7d8:	494d      	ldr	r1, [pc, #308]	; (800a910 <__ieee754_fmod+0x21c>)
 800a7da:	428a      	cmp	r2, r1
 800a7dc:	db6e      	blt.n	800a8bc <__ieee754_fmod+0x1c8>
 800a7de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a7e2:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800a7e6:	431d      	orrs	r5, r3
 800a7e8:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	e7a5      	b.n	800a73c <__ieee754_fmod+0x48>
 800a7f0:	3901      	subs	r1, #1
 800a7f2:	005b      	lsls	r3, r3, #1
 800a7f4:	e7c1      	b.n	800a77a <__ieee754_fmod+0x86>
 800a7f6:	4946      	ldr	r1, [pc, #280]	; (800a910 <__ieee754_fmod+0x21c>)
 800a7f8:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	ddbe      	ble.n	800a77e <__ieee754_fmod+0x8a>
 800a800:	3901      	subs	r1, #1
 800a802:	005b      	lsls	r3, r3, #1
 800a804:	e7fa      	b.n	800a7fc <__ieee754_fmod+0x108>
 800a806:	ea4f 5128 	mov.w	r1, r8, asr #20
 800a80a:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a80e:	e7b6      	b.n	800a77e <__ieee754_fmod+0x8a>
 800a810:	3a01      	subs	r2, #1
 800a812:	005b      	lsls	r3, r3, #1
 800a814:	e7bc      	b.n	800a790 <__ieee754_fmod+0x9c>
 800a816:	4a3e      	ldr	r2, [pc, #248]	; (800a910 <__ieee754_fmod+0x21c>)
 800a818:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	ddb9      	ble.n	800a794 <__ieee754_fmod+0xa0>
 800a820:	3a01      	subs	r2, #1
 800a822:	005b      	lsls	r3, r3, #1
 800a824:	e7fa      	b.n	800a81c <__ieee754_fmod+0x128>
 800a826:	ea4f 522e 	mov.w	r2, lr, asr #20
 800a82a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a82e:	e7b1      	b.n	800a794 <__ieee754_fmod+0xa0>
 800a830:	1a5c      	subs	r4, r3, r1
 800a832:	2c1f      	cmp	r4, #31
 800a834:	dc0a      	bgt.n	800a84c <__ieee754_fmod+0x158>
 800a836:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800a83a:	fa08 f804 	lsl.w	r8, r8, r4
 800a83e:	fa2a f303 	lsr.w	r3, sl, r3
 800a842:	ea43 0308 	orr.w	r3, r3, r8
 800a846:	fa0a f404 	lsl.w	r4, sl, r4
 800a84a:	e7aa      	b.n	800a7a2 <__ieee754_fmod+0xae>
 800a84c:	4b31      	ldr	r3, [pc, #196]	; (800a914 <__ieee754_fmod+0x220>)
 800a84e:	1a5b      	subs	r3, r3, r1
 800a850:	fa0a f303 	lsl.w	r3, sl, r3
 800a854:	2400      	movs	r4, #0
 800a856:	e7a4      	b.n	800a7a2 <__ieee754_fmod+0xae>
 800a858:	eba0 0c02 	sub.w	ip, r0, r2
 800a85c:	f1bc 0f1f 	cmp.w	ip, #31
 800a860:	dc0a      	bgt.n	800a878 <__ieee754_fmod+0x184>
 800a862:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800a866:	fa0e fe0c 	lsl.w	lr, lr, ip
 800a86a:	fa27 f606 	lsr.w	r6, r7, r6
 800a86e:	ea46 060e 	orr.w	r6, r6, lr
 800a872:	fa07 fc0c 	lsl.w	ip, r7, ip
 800a876:	e79b      	b.n	800a7b0 <__ieee754_fmod+0xbc>
 800a878:	4e26      	ldr	r6, [pc, #152]	; (800a914 <__ieee754_fmod+0x220>)
 800a87a:	1ab6      	subs	r6, r6, r2
 800a87c:	fa07 f606 	lsl.w	r6, r7, r6
 800a880:	f04f 0c00 	mov.w	ip, #0
 800a884:	e794      	b.n	800a7b0 <__ieee754_fmod+0xbc>
 800a886:	4564      	cmp	r4, ip
 800a888:	bf38      	it	cc
 800a88a:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800a88e:	2800      	cmp	r0, #0
 800a890:	da05      	bge.n	800a89e <__ieee754_fmod+0x1aa>
 800a892:	0fe0      	lsrs	r0, r4, #31
 800a894:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a898:	0064      	lsls	r4, r4, #1
 800a89a:	3901      	subs	r1, #1
 800a89c:	e789      	b.n	800a7b2 <__ieee754_fmod+0xbe>
 800a89e:	ea50 0307 	orrs.w	r3, r0, r7
 800a8a2:	f43f af5b 	beq.w	800a75c <__ieee754_fmod+0x68>
 800a8a6:	0ffb      	lsrs	r3, r7, #31
 800a8a8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800a8ac:	007c      	lsls	r4, r7, #1
 800a8ae:	e7f4      	b.n	800a89a <__ieee754_fmod+0x1a6>
 800a8b0:	0fe1      	lsrs	r1, r4, #31
 800a8b2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a8b6:	0064      	lsls	r4, r4, #1
 800a8b8:	3a01      	subs	r2, #1
 800a8ba:	e78a      	b.n	800a7d2 <__ieee754_fmod+0xde>
 800a8bc:	1a89      	subs	r1, r1, r2
 800a8be:	2914      	cmp	r1, #20
 800a8c0:	dc0a      	bgt.n	800a8d8 <__ieee754_fmod+0x1e4>
 800a8c2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800a8c6:	fa03 f202 	lsl.w	r2, r3, r2
 800a8ca:	40cc      	lsrs	r4, r1
 800a8cc:	4322      	orrs	r2, r4
 800a8ce:	410b      	asrs	r3, r1
 800a8d0:	ea43 0105 	orr.w	r1, r3, r5
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	e731      	b.n	800a73c <__ieee754_fmod+0x48>
 800a8d8:	291f      	cmp	r1, #31
 800a8da:	dc07      	bgt.n	800a8ec <__ieee754_fmod+0x1f8>
 800a8dc:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800a8e0:	40cc      	lsrs	r4, r1
 800a8e2:	fa03 f202 	lsl.w	r2, r3, r2
 800a8e6:	4322      	orrs	r2, r4
 800a8e8:	462b      	mov	r3, r5
 800a8ea:	e7f1      	b.n	800a8d0 <__ieee754_fmod+0x1dc>
 800a8ec:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800a8f0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a8f4:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800a8f8:	32e2      	adds	r2, #226	; 0xe2
 800a8fa:	fa43 f202 	asr.w	r2, r3, r2
 800a8fe:	e7f3      	b.n	800a8e8 <__ieee754_fmod+0x1f4>
 800a900:	7fefffff 	.word	0x7fefffff
 800a904:	7ff00000 	.word	0x7ff00000
 800a908:	0800c200 	.word	0x0800c200
 800a90c:	fffffbed 	.word	0xfffffbed
 800a910:	fffffc02 	.word	0xfffffc02
 800a914:	fffffbe2 	.word	0xfffffbe2

0800a918 <__ieee754_rem_pio2>:
 800a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91c:	ed2d 8b02 	vpush	{d8}
 800a920:	ec55 4b10 	vmov	r4, r5, d0
 800a924:	4bca      	ldr	r3, [pc, #808]	; (800ac50 <__ieee754_rem_pio2+0x338>)
 800a926:	b08b      	sub	sp, #44	; 0x2c
 800a928:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a92c:	4598      	cmp	r8, r3
 800a92e:	4682      	mov	sl, r0
 800a930:	9502      	str	r5, [sp, #8]
 800a932:	dc08      	bgt.n	800a946 <__ieee754_rem_pio2+0x2e>
 800a934:	2200      	movs	r2, #0
 800a936:	2300      	movs	r3, #0
 800a938:	ed80 0b00 	vstr	d0, [r0]
 800a93c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a940:	f04f 0b00 	mov.w	fp, #0
 800a944:	e028      	b.n	800a998 <__ieee754_rem_pio2+0x80>
 800a946:	4bc3      	ldr	r3, [pc, #780]	; (800ac54 <__ieee754_rem_pio2+0x33c>)
 800a948:	4598      	cmp	r8, r3
 800a94a:	dc78      	bgt.n	800aa3e <__ieee754_rem_pio2+0x126>
 800a94c:	9b02      	ldr	r3, [sp, #8]
 800a94e:	4ec2      	ldr	r6, [pc, #776]	; (800ac58 <__ieee754_rem_pio2+0x340>)
 800a950:	2b00      	cmp	r3, #0
 800a952:	ee10 0a10 	vmov	r0, s0
 800a956:	a3b0      	add	r3, pc, #704	; (adr r3, 800ac18 <__ieee754_rem_pio2+0x300>)
 800a958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95c:	4629      	mov	r1, r5
 800a95e:	dd39      	ble.n	800a9d4 <__ieee754_rem_pio2+0xbc>
 800a960:	f7f5 fc9a 	bl	8000298 <__aeabi_dsub>
 800a964:	45b0      	cmp	r8, r6
 800a966:	4604      	mov	r4, r0
 800a968:	460d      	mov	r5, r1
 800a96a:	d01b      	beq.n	800a9a4 <__ieee754_rem_pio2+0x8c>
 800a96c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ac20 <__ieee754_rem_pio2+0x308>)
 800a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a972:	f7f5 fc91 	bl	8000298 <__aeabi_dsub>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	e9ca 2300 	strd	r2, r3, [sl]
 800a97e:	4620      	mov	r0, r4
 800a980:	4629      	mov	r1, r5
 800a982:	f7f5 fc89 	bl	8000298 <__aeabi_dsub>
 800a986:	a3a6      	add	r3, pc, #664	; (adr r3, 800ac20 <__ieee754_rem_pio2+0x308>)
 800a988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98c:	f7f5 fc84 	bl	8000298 <__aeabi_dsub>
 800a990:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a994:	f04f 0b01 	mov.w	fp, #1
 800a998:	4658      	mov	r0, fp
 800a99a:	b00b      	add	sp, #44	; 0x2c
 800a99c:	ecbd 8b02 	vpop	{d8}
 800a9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a4:	a3a0      	add	r3, pc, #640	; (adr r3, 800ac28 <__ieee754_rem_pio2+0x310>)
 800a9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9aa:	f7f5 fc75 	bl	8000298 <__aeabi_dsub>
 800a9ae:	a3a0      	add	r3, pc, #640	; (adr r3, 800ac30 <__ieee754_rem_pio2+0x318>)
 800a9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b4:	4604      	mov	r4, r0
 800a9b6:	460d      	mov	r5, r1
 800a9b8:	f7f5 fc6e 	bl	8000298 <__aeabi_dsub>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	460b      	mov	r3, r1
 800a9c0:	e9ca 2300 	strd	r2, r3, [sl]
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	4629      	mov	r1, r5
 800a9c8:	f7f5 fc66 	bl	8000298 <__aeabi_dsub>
 800a9cc:	a398      	add	r3, pc, #608	; (adr r3, 800ac30 <__ieee754_rem_pio2+0x318>)
 800a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d2:	e7db      	b.n	800a98c <__ieee754_rem_pio2+0x74>
 800a9d4:	f7f5 fc62 	bl	800029c <__adddf3>
 800a9d8:	45b0      	cmp	r8, r6
 800a9da:	4604      	mov	r4, r0
 800a9dc:	460d      	mov	r5, r1
 800a9de:	d016      	beq.n	800aa0e <__ieee754_rem_pio2+0xf6>
 800a9e0:	a38f      	add	r3, pc, #572	; (adr r3, 800ac20 <__ieee754_rem_pio2+0x308>)
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	f7f5 fc59 	bl	800029c <__adddf3>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	e9ca 2300 	strd	r2, r3, [sl]
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	4629      	mov	r1, r5
 800a9f6:	f7f5 fc4f 	bl	8000298 <__aeabi_dsub>
 800a9fa:	a389      	add	r3, pc, #548	; (adr r3, 800ac20 <__ieee754_rem_pio2+0x308>)
 800a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa00:	f7f5 fc4c 	bl	800029c <__adddf3>
 800aa04:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800aa08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aa0c:	e7c4      	b.n	800a998 <__ieee754_rem_pio2+0x80>
 800aa0e:	a386      	add	r3, pc, #536	; (adr r3, 800ac28 <__ieee754_rem_pio2+0x310>)
 800aa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa14:	f7f5 fc42 	bl	800029c <__adddf3>
 800aa18:	a385      	add	r3, pc, #532	; (adr r3, 800ac30 <__ieee754_rem_pio2+0x318>)
 800aa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1e:	4604      	mov	r4, r0
 800aa20:	460d      	mov	r5, r1
 800aa22:	f7f5 fc3b 	bl	800029c <__adddf3>
 800aa26:	4602      	mov	r2, r0
 800aa28:	460b      	mov	r3, r1
 800aa2a:	e9ca 2300 	strd	r2, r3, [sl]
 800aa2e:	4620      	mov	r0, r4
 800aa30:	4629      	mov	r1, r5
 800aa32:	f7f5 fc31 	bl	8000298 <__aeabi_dsub>
 800aa36:	a37e      	add	r3, pc, #504	; (adr r3, 800ac30 <__ieee754_rem_pio2+0x318>)
 800aa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3c:	e7e0      	b.n	800aa00 <__ieee754_rem_pio2+0xe8>
 800aa3e:	4b87      	ldr	r3, [pc, #540]	; (800ac5c <__ieee754_rem_pio2+0x344>)
 800aa40:	4598      	cmp	r8, r3
 800aa42:	f300 80d9 	bgt.w	800abf8 <__ieee754_rem_pio2+0x2e0>
 800aa46:	f001 f88f 	bl	800bb68 <fabs>
 800aa4a:	ec55 4b10 	vmov	r4, r5, d0
 800aa4e:	ee10 0a10 	vmov	r0, s0
 800aa52:	a379      	add	r3, pc, #484	; (adr r3, 800ac38 <__ieee754_rem_pio2+0x320>)
 800aa54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa58:	4629      	mov	r1, r5
 800aa5a:	f7f5 fdd5 	bl	8000608 <__aeabi_dmul>
 800aa5e:	4b80      	ldr	r3, [pc, #512]	; (800ac60 <__ieee754_rem_pio2+0x348>)
 800aa60:	2200      	movs	r2, #0
 800aa62:	f7f5 fc1b 	bl	800029c <__adddf3>
 800aa66:	f7f6 f87f 	bl	8000b68 <__aeabi_d2iz>
 800aa6a:	4683      	mov	fp, r0
 800aa6c:	f7f5 fd62 	bl	8000534 <__aeabi_i2d>
 800aa70:	4602      	mov	r2, r0
 800aa72:	460b      	mov	r3, r1
 800aa74:	ec43 2b18 	vmov	d8, r2, r3
 800aa78:	a367      	add	r3, pc, #412	; (adr r3, 800ac18 <__ieee754_rem_pio2+0x300>)
 800aa7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7e:	f7f5 fdc3 	bl	8000608 <__aeabi_dmul>
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4620      	mov	r0, r4
 800aa88:	4629      	mov	r1, r5
 800aa8a:	f7f5 fc05 	bl	8000298 <__aeabi_dsub>
 800aa8e:	a364      	add	r3, pc, #400	; (adr r3, 800ac20 <__ieee754_rem_pio2+0x308>)
 800aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa94:	4606      	mov	r6, r0
 800aa96:	460f      	mov	r7, r1
 800aa98:	ec51 0b18 	vmov	r0, r1, d8
 800aa9c:	f7f5 fdb4 	bl	8000608 <__aeabi_dmul>
 800aaa0:	f1bb 0f1f 	cmp.w	fp, #31
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	460d      	mov	r5, r1
 800aaa8:	dc0d      	bgt.n	800aac6 <__ieee754_rem_pio2+0x1ae>
 800aaaa:	4b6e      	ldr	r3, [pc, #440]	; (800ac64 <__ieee754_rem_pio2+0x34c>)
 800aaac:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800aab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab4:	4543      	cmp	r3, r8
 800aab6:	d006      	beq.n	800aac6 <__ieee754_rem_pio2+0x1ae>
 800aab8:	4622      	mov	r2, r4
 800aaba:	462b      	mov	r3, r5
 800aabc:	4630      	mov	r0, r6
 800aabe:	4639      	mov	r1, r7
 800aac0:	f7f5 fbea 	bl	8000298 <__aeabi_dsub>
 800aac4:	e00f      	b.n	800aae6 <__ieee754_rem_pio2+0x1ce>
 800aac6:	462b      	mov	r3, r5
 800aac8:	4622      	mov	r2, r4
 800aaca:	4630      	mov	r0, r6
 800aacc:	4639      	mov	r1, r7
 800aace:	f7f5 fbe3 	bl	8000298 <__aeabi_dsub>
 800aad2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aad6:	9303      	str	r3, [sp, #12]
 800aad8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aadc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800aae0:	f1b8 0f10 	cmp.w	r8, #16
 800aae4:	dc02      	bgt.n	800aaec <__ieee754_rem_pio2+0x1d4>
 800aae6:	e9ca 0100 	strd	r0, r1, [sl]
 800aaea:	e039      	b.n	800ab60 <__ieee754_rem_pio2+0x248>
 800aaec:	a34e      	add	r3, pc, #312	; (adr r3, 800ac28 <__ieee754_rem_pio2+0x310>)
 800aaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf2:	ec51 0b18 	vmov	r0, r1, d8
 800aaf6:	f7f5 fd87 	bl	8000608 <__aeabi_dmul>
 800aafa:	4604      	mov	r4, r0
 800aafc:	460d      	mov	r5, r1
 800aafe:	4602      	mov	r2, r0
 800ab00:	460b      	mov	r3, r1
 800ab02:	4630      	mov	r0, r6
 800ab04:	4639      	mov	r1, r7
 800ab06:	f7f5 fbc7 	bl	8000298 <__aeabi_dsub>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	4680      	mov	r8, r0
 800ab10:	4689      	mov	r9, r1
 800ab12:	4630      	mov	r0, r6
 800ab14:	4639      	mov	r1, r7
 800ab16:	f7f5 fbbf 	bl	8000298 <__aeabi_dsub>
 800ab1a:	4622      	mov	r2, r4
 800ab1c:	462b      	mov	r3, r5
 800ab1e:	f7f5 fbbb 	bl	8000298 <__aeabi_dsub>
 800ab22:	a343      	add	r3, pc, #268	; (adr r3, 800ac30 <__ieee754_rem_pio2+0x318>)
 800ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab28:	4604      	mov	r4, r0
 800ab2a:	460d      	mov	r5, r1
 800ab2c:	ec51 0b18 	vmov	r0, r1, d8
 800ab30:	f7f5 fd6a 	bl	8000608 <__aeabi_dmul>
 800ab34:	4622      	mov	r2, r4
 800ab36:	462b      	mov	r3, r5
 800ab38:	f7f5 fbae 	bl	8000298 <__aeabi_dsub>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	460b      	mov	r3, r1
 800ab40:	4604      	mov	r4, r0
 800ab42:	460d      	mov	r5, r1
 800ab44:	4640      	mov	r0, r8
 800ab46:	4649      	mov	r1, r9
 800ab48:	f7f5 fba6 	bl	8000298 <__aeabi_dsub>
 800ab4c:	9a03      	ldr	r2, [sp, #12]
 800ab4e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab52:	1ad3      	subs	r3, r2, r3
 800ab54:	2b31      	cmp	r3, #49	; 0x31
 800ab56:	dc24      	bgt.n	800aba2 <__ieee754_rem_pio2+0x28a>
 800ab58:	e9ca 0100 	strd	r0, r1, [sl]
 800ab5c:	4646      	mov	r6, r8
 800ab5e:	464f      	mov	r7, r9
 800ab60:	e9da 8900 	ldrd	r8, r9, [sl]
 800ab64:	4630      	mov	r0, r6
 800ab66:	4642      	mov	r2, r8
 800ab68:	464b      	mov	r3, r9
 800ab6a:	4639      	mov	r1, r7
 800ab6c:	f7f5 fb94 	bl	8000298 <__aeabi_dsub>
 800ab70:	462b      	mov	r3, r5
 800ab72:	4622      	mov	r2, r4
 800ab74:	f7f5 fb90 	bl	8000298 <__aeabi_dsub>
 800ab78:	9b02      	ldr	r3, [sp, #8]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ab80:	f6bf af0a 	bge.w	800a998 <__ieee754_rem_pio2+0x80>
 800ab84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ab88:	f8ca 3004 	str.w	r3, [sl, #4]
 800ab8c:	f8ca 8000 	str.w	r8, [sl]
 800ab90:	f8ca 0008 	str.w	r0, [sl, #8]
 800ab94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab98:	f8ca 300c 	str.w	r3, [sl, #12]
 800ab9c:	f1cb 0b00 	rsb	fp, fp, #0
 800aba0:	e6fa      	b.n	800a998 <__ieee754_rem_pio2+0x80>
 800aba2:	a327      	add	r3, pc, #156	; (adr r3, 800ac40 <__ieee754_rem_pio2+0x328>)
 800aba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba8:	ec51 0b18 	vmov	r0, r1, d8
 800abac:	f7f5 fd2c 	bl	8000608 <__aeabi_dmul>
 800abb0:	4604      	mov	r4, r0
 800abb2:	460d      	mov	r5, r1
 800abb4:	4602      	mov	r2, r0
 800abb6:	460b      	mov	r3, r1
 800abb8:	4640      	mov	r0, r8
 800abba:	4649      	mov	r1, r9
 800abbc:	f7f5 fb6c 	bl	8000298 <__aeabi_dsub>
 800abc0:	4602      	mov	r2, r0
 800abc2:	460b      	mov	r3, r1
 800abc4:	4606      	mov	r6, r0
 800abc6:	460f      	mov	r7, r1
 800abc8:	4640      	mov	r0, r8
 800abca:	4649      	mov	r1, r9
 800abcc:	f7f5 fb64 	bl	8000298 <__aeabi_dsub>
 800abd0:	4622      	mov	r2, r4
 800abd2:	462b      	mov	r3, r5
 800abd4:	f7f5 fb60 	bl	8000298 <__aeabi_dsub>
 800abd8:	a31b      	add	r3, pc, #108	; (adr r3, 800ac48 <__ieee754_rem_pio2+0x330>)
 800abda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abde:	4604      	mov	r4, r0
 800abe0:	460d      	mov	r5, r1
 800abe2:	ec51 0b18 	vmov	r0, r1, d8
 800abe6:	f7f5 fd0f 	bl	8000608 <__aeabi_dmul>
 800abea:	4622      	mov	r2, r4
 800abec:	462b      	mov	r3, r5
 800abee:	f7f5 fb53 	bl	8000298 <__aeabi_dsub>
 800abf2:	4604      	mov	r4, r0
 800abf4:	460d      	mov	r5, r1
 800abf6:	e75f      	b.n	800aab8 <__ieee754_rem_pio2+0x1a0>
 800abf8:	4b1b      	ldr	r3, [pc, #108]	; (800ac68 <__ieee754_rem_pio2+0x350>)
 800abfa:	4598      	cmp	r8, r3
 800abfc:	dd36      	ble.n	800ac6c <__ieee754_rem_pio2+0x354>
 800abfe:	ee10 2a10 	vmov	r2, s0
 800ac02:	462b      	mov	r3, r5
 800ac04:	4620      	mov	r0, r4
 800ac06:	4629      	mov	r1, r5
 800ac08:	f7f5 fb46 	bl	8000298 <__aeabi_dsub>
 800ac0c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ac10:	e9ca 0100 	strd	r0, r1, [sl]
 800ac14:	e694      	b.n	800a940 <__ieee754_rem_pio2+0x28>
 800ac16:	bf00      	nop
 800ac18:	54400000 	.word	0x54400000
 800ac1c:	3ff921fb 	.word	0x3ff921fb
 800ac20:	1a626331 	.word	0x1a626331
 800ac24:	3dd0b461 	.word	0x3dd0b461
 800ac28:	1a600000 	.word	0x1a600000
 800ac2c:	3dd0b461 	.word	0x3dd0b461
 800ac30:	2e037073 	.word	0x2e037073
 800ac34:	3ba3198a 	.word	0x3ba3198a
 800ac38:	6dc9c883 	.word	0x6dc9c883
 800ac3c:	3fe45f30 	.word	0x3fe45f30
 800ac40:	2e000000 	.word	0x2e000000
 800ac44:	3ba3198a 	.word	0x3ba3198a
 800ac48:	252049c1 	.word	0x252049c1
 800ac4c:	397b839a 	.word	0x397b839a
 800ac50:	3fe921fb 	.word	0x3fe921fb
 800ac54:	4002d97b 	.word	0x4002d97b
 800ac58:	3ff921fb 	.word	0x3ff921fb
 800ac5c:	413921fb 	.word	0x413921fb
 800ac60:	3fe00000 	.word	0x3fe00000
 800ac64:	0800c210 	.word	0x0800c210
 800ac68:	7fefffff 	.word	0x7fefffff
 800ac6c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ac70:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ac74:	ee10 0a10 	vmov	r0, s0
 800ac78:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ac7c:	ee10 6a10 	vmov	r6, s0
 800ac80:	460f      	mov	r7, r1
 800ac82:	f7f5 ff71 	bl	8000b68 <__aeabi_d2iz>
 800ac86:	f7f5 fc55 	bl	8000534 <__aeabi_i2d>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	4630      	mov	r0, r6
 800ac90:	4639      	mov	r1, r7
 800ac92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac96:	f7f5 faff 	bl	8000298 <__aeabi_dsub>
 800ac9a:	4b22      	ldr	r3, [pc, #136]	; (800ad24 <__ieee754_rem_pio2+0x40c>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f7f5 fcb3 	bl	8000608 <__aeabi_dmul>
 800aca2:	460f      	mov	r7, r1
 800aca4:	4606      	mov	r6, r0
 800aca6:	f7f5 ff5f 	bl	8000b68 <__aeabi_d2iz>
 800acaa:	f7f5 fc43 	bl	8000534 <__aeabi_i2d>
 800acae:	4602      	mov	r2, r0
 800acb0:	460b      	mov	r3, r1
 800acb2:	4630      	mov	r0, r6
 800acb4:	4639      	mov	r1, r7
 800acb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800acba:	f7f5 faed 	bl	8000298 <__aeabi_dsub>
 800acbe:	4b19      	ldr	r3, [pc, #100]	; (800ad24 <__ieee754_rem_pio2+0x40c>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	f7f5 fca1 	bl	8000608 <__aeabi_dmul>
 800acc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800acca:	ad04      	add	r5, sp, #16
 800accc:	f04f 0803 	mov.w	r8, #3
 800acd0:	46a9      	mov	r9, r5
 800acd2:	2600      	movs	r6, #0
 800acd4:	2700      	movs	r7, #0
 800acd6:	4632      	mov	r2, r6
 800acd8:	463b      	mov	r3, r7
 800acda:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800acde:	46c3      	mov	fp, r8
 800ace0:	3d08      	subs	r5, #8
 800ace2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ace6:	f7f5 fef7 	bl	8000ad8 <__aeabi_dcmpeq>
 800acea:	2800      	cmp	r0, #0
 800acec:	d1f3      	bne.n	800acd6 <__ieee754_rem_pio2+0x3be>
 800acee:	4b0e      	ldr	r3, [pc, #56]	; (800ad28 <__ieee754_rem_pio2+0x410>)
 800acf0:	9301      	str	r3, [sp, #4]
 800acf2:	2302      	movs	r3, #2
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	4622      	mov	r2, r4
 800acf8:	465b      	mov	r3, fp
 800acfa:	4651      	mov	r1, sl
 800acfc:	4648      	mov	r0, r9
 800acfe:	f000 f993 	bl	800b028 <__kernel_rem_pio2>
 800ad02:	9b02      	ldr	r3, [sp, #8]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	4683      	mov	fp, r0
 800ad08:	f6bf ae46 	bge.w	800a998 <__ieee754_rem_pio2+0x80>
 800ad0c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ad10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ad14:	f8ca 3004 	str.w	r3, [sl, #4]
 800ad18:	f8da 300c 	ldr.w	r3, [sl, #12]
 800ad1c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ad20:	e73a      	b.n	800ab98 <__ieee754_rem_pio2+0x280>
 800ad22:	bf00      	nop
 800ad24:	41700000 	.word	0x41700000
 800ad28:	0800c290 	.word	0x0800c290

0800ad2c <__ieee754_sqrt>:
 800ad2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad30:	ec55 4b10 	vmov	r4, r5, d0
 800ad34:	4e56      	ldr	r6, [pc, #344]	; (800ae90 <__ieee754_sqrt+0x164>)
 800ad36:	43ae      	bics	r6, r5
 800ad38:	ee10 0a10 	vmov	r0, s0
 800ad3c:	ee10 3a10 	vmov	r3, s0
 800ad40:	4629      	mov	r1, r5
 800ad42:	462a      	mov	r2, r5
 800ad44:	d110      	bne.n	800ad68 <__ieee754_sqrt+0x3c>
 800ad46:	ee10 2a10 	vmov	r2, s0
 800ad4a:	462b      	mov	r3, r5
 800ad4c:	f7f5 fc5c 	bl	8000608 <__aeabi_dmul>
 800ad50:	4602      	mov	r2, r0
 800ad52:	460b      	mov	r3, r1
 800ad54:	4620      	mov	r0, r4
 800ad56:	4629      	mov	r1, r5
 800ad58:	f7f5 faa0 	bl	800029c <__adddf3>
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	460d      	mov	r5, r1
 800ad60:	ec45 4b10 	vmov	d0, r4, r5
 800ad64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad68:	2d00      	cmp	r5, #0
 800ad6a:	dc10      	bgt.n	800ad8e <__ieee754_sqrt+0x62>
 800ad6c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ad70:	4330      	orrs	r0, r6
 800ad72:	d0f5      	beq.n	800ad60 <__ieee754_sqrt+0x34>
 800ad74:	b15d      	cbz	r5, 800ad8e <__ieee754_sqrt+0x62>
 800ad76:	ee10 2a10 	vmov	r2, s0
 800ad7a:	462b      	mov	r3, r5
 800ad7c:	ee10 0a10 	vmov	r0, s0
 800ad80:	f7f5 fa8a 	bl	8000298 <__aeabi_dsub>
 800ad84:	4602      	mov	r2, r0
 800ad86:	460b      	mov	r3, r1
 800ad88:	f7f5 fd68 	bl	800085c <__aeabi_ddiv>
 800ad8c:	e7e6      	b.n	800ad5c <__ieee754_sqrt+0x30>
 800ad8e:	1509      	asrs	r1, r1, #20
 800ad90:	d076      	beq.n	800ae80 <__ieee754_sqrt+0x154>
 800ad92:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ad96:	07ce      	lsls	r6, r1, #31
 800ad98:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ad9c:	bf5e      	ittt	pl
 800ad9e:	0fda      	lsrpl	r2, r3, #31
 800ada0:	005b      	lslpl	r3, r3, #1
 800ada2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800ada6:	0fda      	lsrs	r2, r3, #31
 800ada8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800adac:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800adb0:	2000      	movs	r0, #0
 800adb2:	106d      	asrs	r5, r5, #1
 800adb4:	005b      	lsls	r3, r3, #1
 800adb6:	f04f 0e16 	mov.w	lr, #22
 800adba:	4684      	mov	ip, r0
 800adbc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800adc0:	eb0c 0401 	add.w	r4, ip, r1
 800adc4:	4294      	cmp	r4, r2
 800adc6:	bfde      	ittt	le
 800adc8:	1b12      	suble	r2, r2, r4
 800adca:	eb04 0c01 	addle.w	ip, r4, r1
 800adce:	1840      	addle	r0, r0, r1
 800add0:	0052      	lsls	r2, r2, #1
 800add2:	f1be 0e01 	subs.w	lr, lr, #1
 800add6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800adda:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800adde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ade2:	d1ed      	bne.n	800adc0 <__ieee754_sqrt+0x94>
 800ade4:	4671      	mov	r1, lr
 800ade6:	2720      	movs	r7, #32
 800ade8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800adec:	4562      	cmp	r2, ip
 800adee:	eb04 060e 	add.w	r6, r4, lr
 800adf2:	dc02      	bgt.n	800adfa <__ieee754_sqrt+0xce>
 800adf4:	d113      	bne.n	800ae1e <__ieee754_sqrt+0xf2>
 800adf6:	429e      	cmp	r6, r3
 800adf8:	d811      	bhi.n	800ae1e <__ieee754_sqrt+0xf2>
 800adfa:	2e00      	cmp	r6, #0
 800adfc:	eb06 0e04 	add.w	lr, r6, r4
 800ae00:	da43      	bge.n	800ae8a <__ieee754_sqrt+0x15e>
 800ae02:	f1be 0f00 	cmp.w	lr, #0
 800ae06:	db40      	blt.n	800ae8a <__ieee754_sqrt+0x15e>
 800ae08:	f10c 0801 	add.w	r8, ip, #1
 800ae0c:	eba2 020c 	sub.w	r2, r2, ip
 800ae10:	429e      	cmp	r6, r3
 800ae12:	bf88      	it	hi
 800ae14:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800ae18:	1b9b      	subs	r3, r3, r6
 800ae1a:	4421      	add	r1, r4
 800ae1c:	46c4      	mov	ip, r8
 800ae1e:	0052      	lsls	r2, r2, #1
 800ae20:	3f01      	subs	r7, #1
 800ae22:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ae26:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ae2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae2e:	d1dd      	bne.n	800adec <__ieee754_sqrt+0xc0>
 800ae30:	4313      	orrs	r3, r2
 800ae32:	d006      	beq.n	800ae42 <__ieee754_sqrt+0x116>
 800ae34:	1c4c      	adds	r4, r1, #1
 800ae36:	bf13      	iteet	ne
 800ae38:	3101      	addne	r1, #1
 800ae3a:	3001      	addeq	r0, #1
 800ae3c:	4639      	moveq	r1, r7
 800ae3e:	f021 0101 	bicne.w	r1, r1, #1
 800ae42:	1043      	asrs	r3, r0, #1
 800ae44:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ae48:	0849      	lsrs	r1, r1, #1
 800ae4a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ae4e:	07c2      	lsls	r2, r0, #31
 800ae50:	bf48      	it	mi
 800ae52:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ae56:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	463d      	mov	r5, r7
 800ae5e:	e77f      	b.n	800ad60 <__ieee754_sqrt+0x34>
 800ae60:	0ada      	lsrs	r2, r3, #11
 800ae62:	3815      	subs	r0, #21
 800ae64:	055b      	lsls	r3, r3, #21
 800ae66:	2a00      	cmp	r2, #0
 800ae68:	d0fa      	beq.n	800ae60 <__ieee754_sqrt+0x134>
 800ae6a:	02d7      	lsls	r7, r2, #11
 800ae6c:	d50a      	bpl.n	800ae84 <__ieee754_sqrt+0x158>
 800ae6e:	f1c1 0420 	rsb	r4, r1, #32
 800ae72:	fa23 f404 	lsr.w	r4, r3, r4
 800ae76:	1e4d      	subs	r5, r1, #1
 800ae78:	408b      	lsls	r3, r1
 800ae7a:	4322      	orrs	r2, r4
 800ae7c:	1b41      	subs	r1, r0, r5
 800ae7e:	e788      	b.n	800ad92 <__ieee754_sqrt+0x66>
 800ae80:	4608      	mov	r0, r1
 800ae82:	e7f0      	b.n	800ae66 <__ieee754_sqrt+0x13a>
 800ae84:	0052      	lsls	r2, r2, #1
 800ae86:	3101      	adds	r1, #1
 800ae88:	e7ef      	b.n	800ae6a <__ieee754_sqrt+0x13e>
 800ae8a:	46e0      	mov	r8, ip
 800ae8c:	e7be      	b.n	800ae0c <__ieee754_sqrt+0xe0>
 800ae8e:	bf00      	nop
 800ae90:	7ff00000 	.word	0x7ff00000
 800ae94:	00000000 	.word	0x00000000

0800ae98 <__kernel_cos>:
 800ae98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae9c:	ec57 6b10 	vmov	r6, r7, d0
 800aea0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800aea4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800aea8:	ed8d 1b00 	vstr	d1, [sp]
 800aeac:	da07      	bge.n	800aebe <__kernel_cos+0x26>
 800aeae:	ee10 0a10 	vmov	r0, s0
 800aeb2:	4639      	mov	r1, r7
 800aeb4:	f7f5 fe58 	bl	8000b68 <__aeabi_d2iz>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	f000 8088 	beq.w	800afce <__kernel_cos+0x136>
 800aebe:	4632      	mov	r2, r6
 800aec0:	463b      	mov	r3, r7
 800aec2:	4630      	mov	r0, r6
 800aec4:	4639      	mov	r1, r7
 800aec6:	f7f5 fb9f 	bl	8000608 <__aeabi_dmul>
 800aeca:	4b51      	ldr	r3, [pc, #324]	; (800b010 <__kernel_cos+0x178>)
 800aecc:	2200      	movs	r2, #0
 800aece:	4604      	mov	r4, r0
 800aed0:	460d      	mov	r5, r1
 800aed2:	f7f5 fb99 	bl	8000608 <__aeabi_dmul>
 800aed6:	a340      	add	r3, pc, #256	; (adr r3, 800afd8 <__kernel_cos+0x140>)
 800aed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aedc:	4682      	mov	sl, r0
 800aede:	468b      	mov	fp, r1
 800aee0:	4620      	mov	r0, r4
 800aee2:	4629      	mov	r1, r5
 800aee4:	f7f5 fb90 	bl	8000608 <__aeabi_dmul>
 800aee8:	a33d      	add	r3, pc, #244	; (adr r3, 800afe0 <__kernel_cos+0x148>)
 800aeea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeee:	f7f5 f9d5 	bl	800029c <__adddf3>
 800aef2:	4622      	mov	r2, r4
 800aef4:	462b      	mov	r3, r5
 800aef6:	f7f5 fb87 	bl	8000608 <__aeabi_dmul>
 800aefa:	a33b      	add	r3, pc, #236	; (adr r3, 800afe8 <__kernel_cos+0x150>)
 800aefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af00:	f7f5 f9ca 	bl	8000298 <__aeabi_dsub>
 800af04:	4622      	mov	r2, r4
 800af06:	462b      	mov	r3, r5
 800af08:	f7f5 fb7e 	bl	8000608 <__aeabi_dmul>
 800af0c:	a338      	add	r3, pc, #224	; (adr r3, 800aff0 <__kernel_cos+0x158>)
 800af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af12:	f7f5 f9c3 	bl	800029c <__adddf3>
 800af16:	4622      	mov	r2, r4
 800af18:	462b      	mov	r3, r5
 800af1a:	f7f5 fb75 	bl	8000608 <__aeabi_dmul>
 800af1e:	a336      	add	r3, pc, #216	; (adr r3, 800aff8 <__kernel_cos+0x160>)
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	f7f5 f9b8 	bl	8000298 <__aeabi_dsub>
 800af28:	4622      	mov	r2, r4
 800af2a:	462b      	mov	r3, r5
 800af2c:	f7f5 fb6c 	bl	8000608 <__aeabi_dmul>
 800af30:	a333      	add	r3, pc, #204	; (adr r3, 800b000 <__kernel_cos+0x168>)
 800af32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af36:	f7f5 f9b1 	bl	800029c <__adddf3>
 800af3a:	4622      	mov	r2, r4
 800af3c:	462b      	mov	r3, r5
 800af3e:	f7f5 fb63 	bl	8000608 <__aeabi_dmul>
 800af42:	4622      	mov	r2, r4
 800af44:	462b      	mov	r3, r5
 800af46:	f7f5 fb5f 	bl	8000608 <__aeabi_dmul>
 800af4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af4e:	4604      	mov	r4, r0
 800af50:	460d      	mov	r5, r1
 800af52:	4630      	mov	r0, r6
 800af54:	4639      	mov	r1, r7
 800af56:	f7f5 fb57 	bl	8000608 <__aeabi_dmul>
 800af5a:	460b      	mov	r3, r1
 800af5c:	4602      	mov	r2, r0
 800af5e:	4629      	mov	r1, r5
 800af60:	4620      	mov	r0, r4
 800af62:	f7f5 f999 	bl	8000298 <__aeabi_dsub>
 800af66:	4b2b      	ldr	r3, [pc, #172]	; (800b014 <__kernel_cos+0x17c>)
 800af68:	4598      	cmp	r8, r3
 800af6a:	4606      	mov	r6, r0
 800af6c:	460f      	mov	r7, r1
 800af6e:	dc10      	bgt.n	800af92 <__kernel_cos+0xfa>
 800af70:	4602      	mov	r2, r0
 800af72:	460b      	mov	r3, r1
 800af74:	4650      	mov	r0, sl
 800af76:	4659      	mov	r1, fp
 800af78:	f7f5 f98e 	bl	8000298 <__aeabi_dsub>
 800af7c:	460b      	mov	r3, r1
 800af7e:	4926      	ldr	r1, [pc, #152]	; (800b018 <__kernel_cos+0x180>)
 800af80:	4602      	mov	r2, r0
 800af82:	2000      	movs	r0, #0
 800af84:	f7f5 f988 	bl	8000298 <__aeabi_dsub>
 800af88:	ec41 0b10 	vmov	d0, r0, r1
 800af8c:	b003      	add	sp, #12
 800af8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af92:	4b22      	ldr	r3, [pc, #136]	; (800b01c <__kernel_cos+0x184>)
 800af94:	4920      	ldr	r1, [pc, #128]	; (800b018 <__kernel_cos+0x180>)
 800af96:	4598      	cmp	r8, r3
 800af98:	bfcc      	ite	gt
 800af9a:	4d21      	ldrgt	r5, [pc, #132]	; (800b020 <__kernel_cos+0x188>)
 800af9c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800afa0:	2400      	movs	r4, #0
 800afa2:	4622      	mov	r2, r4
 800afa4:	462b      	mov	r3, r5
 800afa6:	2000      	movs	r0, #0
 800afa8:	f7f5 f976 	bl	8000298 <__aeabi_dsub>
 800afac:	4622      	mov	r2, r4
 800afae:	4680      	mov	r8, r0
 800afb0:	4689      	mov	r9, r1
 800afb2:	462b      	mov	r3, r5
 800afb4:	4650      	mov	r0, sl
 800afb6:	4659      	mov	r1, fp
 800afb8:	f7f5 f96e 	bl	8000298 <__aeabi_dsub>
 800afbc:	4632      	mov	r2, r6
 800afbe:	463b      	mov	r3, r7
 800afc0:	f7f5 f96a 	bl	8000298 <__aeabi_dsub>
 800afc4:	4602      	mov	r2, r0
 800afc6:	460b      	mov	r3, r1
 800afc8:	4640      	mov	r0, r8
 800afca:	4649      	mov	r1, r9
 800afcc:	e7da      	b.n	800af84 <__kernel_cos+0xec>
 800afce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b008 <__kernel_cos+0x170>
 800afd2:	e7db      	b.n	800af8c <__kernel_cos+0xf4>
 800afd4:	f3af 8000 	nop.w
 800afd8:	be8838d4 	.word	0xbe8838d4
 800afdc:	bda8fae9 	.word	0xbda8fae9
 800afe0:	bdb4b1c4 	.word	0xbdb4b1c4
 800afe4:	3e21ee9e 	.word	0x3e21ee9e
 800afe8:	809c52ad 	.word	0x809c52ad
 800afec:	3e927e4f 	.word	0x3e927e4f
 800aff0:	19cb1590 	.word	0x19cb1590
 800aff4:	3efa01a0 	.word	0x3efa01a0
 800aff8:	16c15177 	.word	0x16c15177
 800affc:	3f56c16c 	.word	0x3f56c16c
 800b000:	5555554c 	.word	0x5555554c
 800b004:	3fa55555 	.word	0x3fa55555
 800b008:	00000000 	.word	0x00000000
 800b00c:	3ff00000 	.word	0x3ff00000
 800b010:	3fe00000 	.word	0x3fe00000
 800b014:	3fd33332 	.word	0x3fd33332
 800b018:	3ff00000 	.word	0x3ff00000
 800b01c:	3fe90000 	.word	0x3fe90000
 800b020:	3fd20000 	.word	0x3fd20000
 800b024:	00000000 	.word	0x00000000

0800b028 <__kernel_rem_pio2>:
 800b028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b02c:	ed2d 8b02 	vpush	{d8}
 800b030:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b034:	f112 0f14 	cmn.w	r2, #20
 800b038:	9308      	str	r3, [sp, #32]
 800b03a:	9101      	str	r1, [sp, #4]
 800b03c:	4bc6      	ldr	r3, [pc, #792]	; (800b358 <__kernel_rem_pio2+0x330>)
 800b03e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800b040:	9009      	str	r0, [sp, #36]	; 0x24
 800b042:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b046:	9304      	str	r3, [sp, #16]
 800b048:	9b08      	ldr	r3, [sp, #32]
 800b04a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b04e:	bfa8      	it	ge
 800b050:	1ed4      	subge	r4, r2, #3
 800b052:	9306      	str	r3, [sp, #24]
 800b054:	bfb2      	itee	lt
 800b056:	2400      	movlt	r4, #0
 800b058:	2318      	movge	r3, #24
 800b05a:	fb94 f4f3 	sdivge	r4, r4, r3
 800b05e:	f06f 0317 	mvn.w	r3, #23
 800b062:	fb04 3303 	mla	r3, r4, r3, r3
 800b066:	eb03 0a02 	add.w	sl, r3, r2
 800b06a:	9b04      	ldr	r3, [sp, #16]
 800b06c:	9a06      	ldr	r2, [sp, #24]
 800b06e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b348 <__kernel_rem_pio2+0x320>
 800b072:	eb03 0802 	add.w	r8, r3, r2
 800b076:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b078:	1aa7      	subs	r7, r4, r2
 800b07a:	ae20      	add	r6, sp, #128	; 0x80
 800b07c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b080:	2500      	movs	r5, #0
 800b082:	4545      	cmp	r5, r8
 800b084:	dd18      	ble.n	800b0b8 <__kernel_rem_pio2+0x90>
 800b086:	9b08      	ldr	r3, [sp, #32]
 800b088:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b08c:	aa20      	add	r2, sp, #128	; 0x80
 800b08e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800b348 <__kernel_rem_pio2+0x320>
 800b092:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b096:	f1c3 0301 	rsb	r3, r3, #1
 800b09a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b09e:	9307      	str	r3, [sp, #28]
 800b0a0:	9b07      	ldr	r3, [sp, #28]
 800b0a2:	9a04      	ldr	r2, [sp, #16]
 800b0a4:	4443      	add	r3, r8
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	db2f      	blt.n	800b10a <__kernel_rem_pio2+0xe2>
 800b0aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b0ae:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b0b2:	462f      	mov	r7, r5
 800b0b4:	2600      	movs	r6, #0
 800b0b6:	e01b      	b.n	800b0f0 <__kernel_rem_pio2+0xc8>
 800b0b8:	42ef      	cmn	r7, r5
 800b0ba:	d407      	bmi.n	800b0cc <__kernel_rem_pio2+0xa4>
 800b0bc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b0c0:	f7f5 fa38 	bl	8000534 <__aeabi_i2d>
 800b0c4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b0c8:	3501      	adds	r5, #1
 800b0ca:	e7da      	b.n	800b082 <__kernel_rem_pio2+0x5a>
 800b0cc:	ec51 0b18 	vmov	r0, r1, d8
 800b0d0:	e7f8      	b.n	800b0c4 <__kernel_rem_pio2+0x9c>
 800b0d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0d6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b0da:	f7f5 fa95 	bl	8000608 <__aeabi_dmul>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0e6:	f7f5 f8d9 	bl	800029c <__adddf3>
 800b0ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0ee:	3601      	adds	r6, #1
 800b0f0:	9b06      	ldr	r3, [sp, #24]
 800b0f2:	429e      	cmp	r6, r3
 800b0f4:	f1a7 0708 	sub.w	r7, r7, #8
 800b0f8:	ddeb      	ble.n	800b0d2 <__kernel_rem_pio2+0xaa>
 800b0fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0fe:	3508      	adds	r5, #8
 800b100:	ecab 7b02 	vstmia	fp!, {d7}
 800b104:	f108 0801 	add.w	r8, r8, #1
 800b108:	e7ca      	b.n	800b0a0 <__kernel_rem_pio2+0x78>
 800b10a:	9b04      	ldr	r3, [sp, #16]
 800b10c:	aa0c      	add	r2, sp, #48	; 0x30
 800b10e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b112:	930b      	str	r3, [sp, #44]	; 0x2c
 800b114:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b116:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b11a:	9c04      	ldr	r4, [sp, #16]
 800b11c:	930a      	str	r3, [sp, #40]	; 0x28
 800b11e:	ab98      	add	r3, sp, #608	; 0x260
 800b120:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b124:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b128:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800b12c:	f8cd b008 	str.w	fp, [sp, #8]
 800b130:	4625      	mov	r5, r4
 800b132:	2d00      	cmp	r5, #0
 800b134:	dc78      	bgt.n	800b228 <__kernel_rem_pio2+0x200>
 800b136:	ec47 6b10 	vmov	d0, r6, r7
 800b13a:	4650      	mov	r0, sl
 800b13c:	f000 fda0 	bl	800bc80 <scalbn>
 800b140:	ec57 6b10 	vmov	r6, r7, d0
 800b144:	2200      	movs	r2, #0
 800b146:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b14a:	ee10 0a10 	vmov	r0, s0
 800b14e:	4639      	mov	r1, r7
 800b150:	f7f5 fa5a 	bl	8000608 <__aeabi_dmul>
 800b154:	ec41 0b10 	vmov	d0, r0, r1
 800b158:	f000 fd12 	bl	800bb80 <floor>
 800b15c:	4b7f      	ldr	r3, [pc, #508]	; (800b35c <__kernel_rem_pio2+0x334>)
 800b15e:	ec51 0b10 	vmov	r0, r1, d0
 800b162:	2200      	movs	r2, #0
 800b164:	f7f5 fa50 	bl	8000608 <__aeabi_dmul>
 800b168:	4602      	mov	r2, r0
 800b16a:	460b      	mov	r3, r1
 800b16c:	4630      	mov	r0, r6
 800b16e:	4639      	mov	r1, r7
 800b170:	f7f5 f892 	bl	8000298 <__aeabi_dsub>
 800b174:	460f      	mov	r7, r1
 800b176:	4606      	mov	r6, r0
 800b178:	f7f5 fcf6 	bl	8000b68 <__aeabi_d2iz>
 800b17c:	9007      	str	r0, [sp, #28]
 800b17e:	f7f5 f9d9 	bl	8000534 <__aeabi_i2d>
 800b182:	4602      	mov	r2, r0
 800b184:	460b      	mov	r3, r1
 800b186:	4630      	mov	r0, r6
 800b188:	4639      	mov	r1, r7
 800b18a:	f7f5 f885 	bl	8000298 <__aeabi_dsub>
 800b18e:	f1ba 0f00 	cmp.w	sl, #0
 800b192:	4606      	mov	r6, r0
 800b194:	460f      	mov	r7, r1
 800b196:	dd70      	ble.n	800b27a <__kernel_rem_pio2+0x252>
 800b198:	1e62      	subs	r2, r4, #1
 800b19a:	ab0c      	add	r3, sp, #48	; 0x30
 800b19c:	9d07      	ldr	r5, [sp, #28]
 800b19e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b1a2:	f1ca 0118 	rsb	r1, sl, #24
 800b1a6:	fa40 f301 	asr.w	r3, r0, r1
 800b1aa:	441d      	add	r5, r3
 800b1ac:	408b      	lsls	r3, r1
 800b1ae:	1ac0      	subs	r0, r0, r3
 800b1b0:	ab0c      	add	r3, sp, #48	; 0x30
 800b1b2:	9507      	str	r5, [sp, #28]
 800b1b4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b1b8:	f1ca 0317 	rsb	r3, sl, #23
 800b1bc:	fa40 f303 	asr.w	r3, r0, r3
 800b1c0:	9302      	str	r3, [sp, #8]
 800b1c2:	9b02      	ldr	r3, [sp, #8]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	dd66      	ble.n	800b296 <__kernel_rem_pio2+0x26e>
 800b1c8:	9b07      	ldr	r3, [sp, #28]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	9307      	str	r3, [sp, #28]
 800b1d0:	4615      	mov	r5, r2
 800b1d2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b1d6:	4294      	cmp	r4, r2
 800b1d8:	f300 8099 	bgt.w	800b30e <__kernel_rem_pio2+0x2e6>
 800b1dc:	f1ba 0f00 	cmp.w	sl, #0
 800b1e0:	dd07      	ble.n	800b1f2 <__kernel_rem_pio2+0x1ca>
 800b1e2:	f1ba 0f01 	cmp.w	sl, #1
 800b1e6:	f000 80a5 	beq.w	800b334 <__kernel_rem_pio2+0x30c>
 800b1ea:	f1ba 0f02 	cmp.w	sl, #2
 800b1ee:	f000 80c1 	beq.w	800b374 <__kernel_rem_pio2+0x34c>
 800b1f2:	9b02      	ldr	r3, [sp, #8]
 800b1f4:	2b02      	cmp	r3, #2
 800b1f6:	d14e      	bne.n	800b296 <__kernel_rem_pio2+0x26e>
 800b1f8:	4632      	mov	r2, r6
 800b1fa:	463b      	mov	r3, r7
 800b1fc:	4958      	ldr	r1, [pc, #352]	; (800b360 <__kernel_rem_pio2+0x338>)
 800b1fe:	2000      	movs	r0, #0
 800b200:	f7f5 f84a 	bl	8000298 <__aeabi_dsub>
 800b204:	4606      	mov	r6, r0
 800b206:	460f      	mov	r7, r1
 800b208:	2d00      	cmp	r5, #0
 800b20a:	d044      	beq.n	800b296 <__kernel_rem_pio2+0x26e>
 800b20c:	4650      	mov	r0, sl
 800b20e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b350 <__kernel_rem_pio2+0x328>
 800b212:	f000 fd35 	bl	800bc80 <scalbn>
 800b216:	4630      	mov	r0, r6
 800b218:	4639      	mov	r1, r7
 800b21a:	ec53 2b10 	vmov	r2, r3, d0
 800b21e:	f7f5 f83b 	bl	8000298 <__aeabi_dsub>
 800b222:	4606      	mov	r6, r0
 800b224:	460f      	mov	r7, r1
 800b226:	e036      	b.n	800b296 <__kernel_rem_pio2+0x26e>
 800b228:	4b4e      	ldr	r3, [pc, #312]	; (800b364 <__kernel_rem_pio2+0x33c>)
 800b22a:	2200      	movs	r2, #0
 800b22c:	4630      	mov	r0, r6
 800b22e:	4639      	mov	r1, r7
 800b230:	f7f5 f9ea 	bl	8000608 <__aeabi_dmul>
 800b234:	f7f5 fc98 	bl	8000b68 <__aeabi_d2iz>
 800b238:	f7f5 f97c 	bl	8000534 <__aeabi_i2d>
 800b23c:	4b4a      	ldr	r3, [pc, #296]	; (800b368 <__kernel_rem_pio2+0x340>)
 800b23e:	2200      	movs	r2, #0
 800b240:	4680      	mov	r8, r0
 800b242:	4689      	mov	r9, r1
 800b244:	f7f5 f9e0 	bl	8000608 <__aeabi_dmul>
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	4630      	mov	r0, r6
 800b24e:	4639      	mov	r1, r7
 800b250:	f7f5 f822 	bl	8000298 <__aeabi_dsub>
 800b254:	f7f5 fc88 	bl	8000b68 <__aeabi_d2iz>
 800b258:	9b02      	ldr	r3, [sp, #8]
 800b25a:	f843 0b04 	str.w	r0, [r3], #4
 800b25e:	3d01      	subs	r5, #1
 800b260:	9302      	str	r3, [sp, #8]
 800b262:	ab70      	add	r3, sp, #448	; 0x1c0
 800b264:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26c:	4640      	mov	r0, r8
 800b26e:	4649      	mov	r1, r9
 800b270:	f7f5 f814 	bl	800029c <__adddf3>
 800b274:	4606      	mov	r6, r0
 800b276:	460f      	mov	r7, r1
 800b278:	e75b      	b.n	800b132 <__kernel_rem_pio2+0x10a>
 800b27a:	d105      	bne.n	800b288 <__kernel_rem_pio2+0x260>
 800b27c:	1e63      	subs	r3, r4, #1
 800b27e:	aa0c      	add	r2, sp, #48	; 0x30
 800b280:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b284:	15c3      	asrs	r3, r0, #23
 800b286:	e79b      	b.n	800b1c0 <__kernel_rem_pio2+0x198>
 800b288:	4b38      	ldr	r3, [pc, #224]	; (800b36c <__kernel_rem_pio2+0x344>)
 800b28a:	2200      	movs	r2, #0
 800b28c:	f7f5 fc42 	bl	8000b14 <__aeabi_dcmpge>
 800b290:	2800      	cmp	r0, #0
 800b292:	d139      	bne.n	800b308 <__kernel_rem_pio2+0x2e0>
 800b294:	9002      	str	r0, [sp, #8]
 800b296:	2200      	movs	r2, #0
 800b298:	2300      	movs	r3, #0
 800b29a:	4630      	mov	r0, r6
 800b29c:	4639      	mov	r1, r7
 800b29e:	f7f5 fc1b 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	f000 80b4 	beq.w	800b410 <__kernel_rem_pio2+0x3e8>
 800b2a8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800b2ac:	465b      	mov	r3, fp
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	9904      	ldr	r1, [sp, #16]
 800b2b2:	428b      	cmp	r3, r1
 800b2b4:	da65      	bge.n	800b382 <__kernel_rem_pio2+0x35a>
 800b2b6:	2a00      	cmp	r2, #0
 800b2b8:	d07b      	beq.n	800b3b2 <__kernel_rem_pio2+0x38a>
 800b2ba:	ab0c      	add	r3, sp, #48	; 0x30
 800b2bc:	f1aa 0a18 	sub.w	sl, sl, #24
 800b2c0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f000 80a0 	beq.w	800b40a <__kernel_rem_pio2+0x3e2>
 800b2ca:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800b350 <__kernel_rem_pio2+0x328>
 800b2ce:	4650      	mov	r0, sl
 800b2d0:	f000 fcd6 	bl	800bc80 <scalbn>
 800b2d4:	4f23      	ldr	r7, [pc, #140]	; (800b364 <__kernel_rem_pio2+0x33c>)
 800b2d6:	ec55 4b10 	vmov	r4, r5, d0
 800b2da:	46d8      	mov	r8, fp
 800b2dc:	2600      	movs	r6, #0
 800b2de:	f1b8 0f00 	cmp.w	r8, #0
 800b2e2:	f280 80cf 	bge.w	800b484 <__kernel_rem_pio2+0x45c>
 800b2e6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800b348 <__kernel_rem_pio2+0x320>
 800b2ea:	465f      	mov	r7, fp
 800b2ec:	f04f 0800 	mov.w	r8, #0
 800b2f0:	2f00      	cmp	r7, #0
 800b2f2:	f2c0 80fd 	blt.w	800b4f0 <__kernel_rem_pio2+0x4c8>
 800b2f6:	ab70      	add	r3, sp, #448	; 0x1c0
 800b2f8:	f8df a074 	ldr.w	sl, [pc, #116]	; 800b370 <__kernel_rem_pio2+0x348>
 800b2fc:	ec55 4b18 	vmov	r4, r5, d8
 800b300:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800b304:	2600      	movs	r6, #0
 800b306:	e0e5      	b.n	800b4d4 <__kernel_rem_pio2+0x4ac>
 800b308:	2302      	movs	r3, #2
 800b30a:	9302      	str	r3, [sp, #8]
 800b30c:	e75c      	b.n	800b1c8 <__kernel_rem_pio2+0x1a0>
 800b30e:	f8db 3000 	ldr.w	r3, [fp]
 800b312:	b955      	cbnz	r5, 800b32a <__kernel_rem_pio2+0x302>
 800b314:	b123      	cbz	r3, 800b320 <__kernel_rem_pio2+0x2f8>
 800b316:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b31a:	f8cb 3000 	str.w	r3, [fp]
 800b31e:	2301      	movs	r3, #1
 800b320:	3201      	adds	r2, #1
 800b322:	f10b 0b04 	add.w	fp, fp, #4
 800b326:	461d      	mov	r5, r3
 800b328:	e755      	b.n	800b1d6 <__kernel_rem_pio2+0x1ae>
 800b32a:	1acb      	subs	r3, r1, r3
 800b32c:	f8cb 3000 	str.w	r3, [fp]
 800b330:	462b      	mov	r3, r5
 800b332:	e7f5      	b.n	800b320 <__kernel_rem_pio2+0x2f8>
 800b334:	1e62      	subs	r2, r4, #1
 800b336:	ab0c      	add	r3, sp, #48	; 0x30
 800b338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b33c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b340:	a90c      	add	r1, sp, #48	; 0x30
 800b342:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b346:	e754      	b.n	800b1f2 <__kernel_rem_pio2+0x1ca>
	...
 800b354:	3ff00000 	.word	0x3ff00000
 800b358:	0800c3d8 	.word	0x0800c3d8
 800b35c:	40200000 	.word	0x40200000
 800b360:	3ff00000 	.word	0x3ff00000
 800b364:	3e700000 	.word	0x3e700000
 800b368:	41700000 	.word	0x41700000
 800b36c:	3fe00000 	.word	0x3fe00000
 800b370:	0800c398 	.word	0x0800c398
 800b374:	1e62      	subs	r2, r4, #1
 800b376:	ab0c      	add	r3, sp, #48	; 0x30
 800b378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b37c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b380:	e7de      	b.n	800b340 <__kernel_rem_pio2+0x318>
 800b382:	a90c      	add	r1, sp, #48	; 0x30
 800b384:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b388:	3b01      	subs	r3, #1
 800b38a:	430a      	orrs	r2, r1
 800b38c:	e790      	b.n	800b2b0 <__kernel_rem_pio2+0x288>
 800b38e:	3301      	adds	r3, #1
 800b390:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b394:	2900      	cmp	r1, #0
 800b396:	d0fa      	beq.n	800b38e <__kernel_rem_pio2+0x366>
 800b398:	9a08      	ldr	r2, [sp, #32]
 800b39a:	18e3      	adds	r3, r4, r3
 800b39c:	18a6      	adds	r6, r4, r2
 800b39e:	aa20      	add	r2, sp, #128	; 0x80
 800b3a0:	1c65      	adds	r5, r4, #1
 800b3a2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b3a6:	9302      	str	r3, [sp, #8]
 800b3a8:	9b02      	ldr	r3, [sp, #8]
 800b3aa:	42ab      	cmp	r3, r5
 800b3ac:	da04      	bge.n	800b3b8 <__kernel_rem_pio2+0x390>
 800b3ae:	461c      	mov	r4, r3
 800b3b0:	e6b5      	b.n	800b11e <__kernel_rem_pio2+0xf6>
 800b3b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	e7eb      	b.n	800b390 <__kernel_rem_pio2+0x368>
 800b3b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3be:	f7f5 f8b9 	bl	8000534 <__aeabi_i2d>
 800b3c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c8:	46b3      	mov	fp, r6
 800b3ca:	461c      	mov	r4, r3
 800b3cc:	2700      	movs	r7, #0
 800b3ce:	f04f 0800 	mov.w	r8, #0
 800b3d2:	f04f 0900 	mov.w	r9, #0
 800b3d6:	9b06      	ldr	r3, [sp, #24]
 800b3d8:	429f      	cmp	r7, r3
 800b3da:	dd06      	ble.n	800b3ea <__kernel_rem_pio2+0x3c2>
 800b3dc:	ab70      	add	r3, sp, #448	; 0x1c0
 800b3de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b3e2:	e9c3 8900 	strd	r8, r9, [r3]
 800b3e6:	3501      	adds	r5, #1
 800b3e8:	e7de      	b.n	800b3a8 <__kernel_rem_pio2+0x380>
 800b3ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b3ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b3f2:	f7f5 f909 	bl	8000608 <__aeabi_dmul>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	4640      	mov	r0, r8
 800b3fc:	4649      	mov	r1, r9
 800b3fe:	f7f4 ff4d 	bl	800029c <__adddf3>
 800b402:	3701      	adds	r7, #1
 800b404:	4680      	mov	r8, r0
 800b406:	4689      	mov	r9, r1
 800b408:	e7e5      	b.n	800b3d6 <__kernel_rem_pio2+0x3ae>
 800b40a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b40e:	e754      	b.n	800b2ba <__kernel_rem_pio2+0x292>
 800b410:	ec47 6b10 	vmov	d0, r6, r7
 800b414:	f1ca 0000 	rsb	r0, sl, #0
 800b418:	f000 fc32 	bl	800bc80 <scalbn>
 800b41c:	ec57 6b10 	vmov	r6, r7, d0
 800b420:	4b9f      	ldr	r3, [pc, #636]	; (800b6a0 <__kernel_rem_pio2+0x678>)
 800b422:	ee10 0a10 	vmov	r0, s0
 800b426:	2200      	movs	r2, #0
 800b428:	4639      	mov	r1, r7
 800b42a:	f7f5 fb73 	bl	8000b14 <__aeabi_dcmpge>
 800b42e:	b300      	cbz	r0, 800b472 <__kernel_rem_pio2+0x44a>
 800b430:	4b9c      	ldr	r3, [pc, #624]	; (800b6a4 <__kernel_rem_pio2+0x67c>)
 800b432:	2200      	movs	r2, #0
 800b434:	4630      	mov	r0, r6
 800b436:	4639      	mov	r1, r7
 800b438:	f7f5 f8e6 	bl	8000608 <__aeabi_dmul>
 800b43c:	f7f5 fb94 	bl	8000b68 <__aeabi_d2iz>
 800b440:	4605      	mov	r5, r0
 800b442:	f7f5 f877 	bl	8000534 <__aeabi_i2d>
 800b446:	4b96      	ldr	r3, [pc, #600]	; (800b6a0 <__kernel_rem_pio2+0x678>)
 800b448:	2200      	movs	r2, #0
 800b44a:	f7f5 f8dd 	bl	8000608 <__aeabi_dmul>
 800b44e:	460b      	mov	r3, r1
 800b450:	4602      	mov	r2, r0
 800b452:	4639      	mov	r1, r7
 800b454:	4630      	mov	r0, r6
 800b456:	f7f4 ff1f 	bl	8000298 <__aeabi_dsub>
 800b45a:	f7f5 fb85 	bl	8000b68 <__aeabi_d2iz>
 800b45e:	f104 0b01 	add.w	fp, r4, #1
 800b462:	ab0c      	add	r3, sp, #48	; 0x30
 800b464:	f10a 0a18 	add.w	sl, sl, #24
 800b468:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b46c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800b470:	e72b      	b.n	800b2ca <__kernel_rem_pio2+0x2a2>
 800b472:	4630      	mov	r0, r6
 800b474:	4639      	mov	r1, r7
 800b476:	f7f5 fb77 	bl	8000b68 <__aeabi_d2iz>
 800b47a:	ab0c      	add	r3, sp, #48	; 0x30
 800b47c:	46a3      	mov	fp, r4
 800b47e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b482:	e722      	b.n	800b2ca <__kernel_rem_pio2+0x2a2>
 800b484:	ab70      	add	r3, sp, #448	; 0x1c0
 800b486:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800b48a:	ab0c      	add	r3, sp, #48	; 0x30
 800b48c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b490:	f7f5 f850 	bl	8000534 <__aeabi_i2d>
 800b494:	4622      	mov	r2, r4
 800b496:	462b      	mov	r3, r5
 800b498:	f7f5 f8b6 	bl	8000608 <__aeabi_dmul>
 800b49c:	4632      	mov	r2, r6
 800b49e:	e9c9 0100 	strd	r0, r1, [r9]
 800b4a2:	463b      	mov	r3, r7
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	f7f5 f8ae 	bl	8000608 <__aeabi_dmul>
 800b4ac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	460d      	mov	r5, r1
 800b4b4:	e713      	b.n	800b2de <__kernel_rem_pio2+0x2b6>
 800b4b6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b4ba:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b4be:	f7f5 f8a3 	bl	8000608 <__aeabi_dmul>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	f7f4 fee7 	bl	800029c <__adddf3>
 800b4ce:	3601      	adds	r6, #1
 800b4d0:	4604      	mov	r4, r0
 800b4d2:	460d      	mov	r5, r1
 800b4d4:	9b04      	ldr	r3, [sp, #16]
 800b4d6:	429e      	cmp	r6, r3
 800b4d8:	dc01      	bgt.n	800b4de <__kernel_rem_pio2+0x4b6>
 800b4da:	45b0      	cmp	r8, r6
 800b4dc:	daeb      	bge.n	800b4b6 <__kernel_rem_pio2+0x48e>
 800b4de:	ab48      	add	r3, sp, #288	; 0x120
 800b4e0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b4e4:	e9c3 4500 	strd	r4, r5, [r3]
 800b4e8:	3f01      	subs	r7, #1
 800b4ea:	f108 0801 	add.w	r8, r8, #1
 800b4ee:	e6ff      	b.n	800b2f0 <__kernel_rem_pio2+0x2c8>
 800b4f0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	dc0b      	bgt.n	800b50e <__kernel_rem_pio2+0x4e6>
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	dc6e      	bgt.n	800b5d8 <__kernel_rem_pio2+0x5b0>
 800b4fa:	d045      	beq.n	800b588 <__kernel_rem_pio2+0x560>
 800b4fc:	9b07      	ldr	r3, [sp, #28]
 800b4fe:	f003 0007 	and.w	r0, r3, #7
 800b502:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b506:	ecbd 8b02 	vpop	{d8}
 800b50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b50e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b510:	2b03      	cmp	r3, #3
 800b512:	d1f3      	bne.n	800b4fc <__kernel_rem_pio2+0x4d4>
 800b514:	ab48      	add	r3, sp, #288	; 0x120
 800b516:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800b51a:	46d0      	mov	r8, sl
 800b51c:	46d9      	mov	r9, fp
 800b51e:	f1b9 0f00 	cmp.w	r9, #0
 800b522:	f1a8 0808 	sub.w	r8, r8, #8
 800b526:	dc64      	bgt.n	800b5f2 <__kernel_rem_pio2+0x5ca>
 800b528:	465c      	mov	r4, fp
 800b52a:	2c01      	cmp	r4, #1
 800b52c:	f1aa 0a08 	sub.w	sl, sl, #8
 800b530:	dc7e      	bgt.n	800b630 <__kernel_rem_pio2+0x608>
 800b532:	2000      	movs	r0, #0
 800b534:	2100      	movs	r1, #0
 800b536:	f1bb 0f01 	cmp.w	fp, #1
 800b53a:	f300 8097 	bgt.w	800b66c <__kernel_rem_pio2+0x644>
 800b53e:	9b02      	ldr	r3, [sp, #8]
 800b540:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800b544:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f040 8099 	bne.w	800b680 <__kernel_rem_pio2+0x658>
 800b54e:	9b01      	ldr	r3, [sp, #4]
 800b550:	e9c3 5600 	strd	r5, r6, [r3]
 800b554:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b558:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b55c:	e7ce      	b.n	800b4fc <__kernel_rem_pio2+0x4d4>
 800b55e:	ab48      	add	r3, sp, #288	; 0x120
 800b560:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b568:	f7f4 fe98 	bl	800029c <__adddf3>
 800b56c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b570:	f1bb 0f00 	cmp.w	fp, #0
 800b574:	daf3      	bge.n	800b55e <__kernel_rem_pio2+0x536>
 800b576:	9b02      	ldr	r3, [sp, #8]
 800b578:	b113      	cbz	r3, 800b580 <__kernel_rem_pio2+0x558>
 800b57a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b57e:	4619      	mov	r1, r3
 800b580:	9b01      	ldr	r3, [sp, #4]
 800b582:	e9c3 0100 	strd	r0, r1, [r3]
 800b586:	e7b9      	b.n	800b4fc <__kernel_rem_pio2+0x4d4>
 800b588:	2000      	movs	r0, #0
 800b58a:	2100      	movs	r1, #0
 800b58c:	e7f0      	b.n	800b570 <__kernel_rem_pio2+0x548>
 800b58e:	ab48      	add	r3, sp, #288	; 0x120
 800b590:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b598:	f7f4 fe80 	bl	800029c <__adddf3>
 800b59c:	3c01      	subs	r4, #1
 800b59e:	2c00      	cmp	r4, #0
 800b5a0:	daf5      	bge.n	800b58e <__kernel_rem_pio2+0x566>
 800b5a2:	9b02      	ldr	r3, [sp, #8]
 800b5a4:	b1e3      	cbz	r3, 800b5e0 <__kernel_rem_pio2+0x5b8>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5ac:	9c01      	ldr	r4, [sp, #4]
 800b5ae:	e9c4 2300 	strd	r2, r3, [r4]
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b5ba:	f7f4 fe6d 	bl	8000298 <__aeabi_dsub>
 800b5be:	ad4a      	add	r5, sp, #296	; 0x128
 800b5c0:	2401      	movs	r4, #1
 800b5c2:	45a3      	cmp	fp, r4
 800b5c4:	da0f      	bge.n	800b5e6 <__kernel_rem_pio2+0x5be>
 800b5c6:	9b02      	ldr	r3, [sp, #8]
 800b5c8:	b113      	cbz	r3, 800b5d0 <__kernel_rem_pio2+0x5a8>
 800b5ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	9b01      	ldr	r3, [sp, #4]
 800b5d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b5d6:	e791      	b.n	800b4fc <__kernel_rem_pio2+0x4d4>
 800b5d8:	465c      	mov	r4, fp
 800b5da:	2000      	movs	r0, #0
 800b5dc:	2100      	movs	r1, #0
 800b5de:	e7de      	b.n	800b59e <__kernel_rem_pio2+0x576>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	e7e2      	b.n	800b5ac <__kernel_rem_pio2+0x584>
 800b5e6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b5ea:	f7f4 fe57 	bl	800029c <__adddf3>
 800b5ee:	3401      	adds	r4, #1
 800b5f0:	e7e7      	b.n	800b5c2 <__kernel_rem_pio2+0x59a>
 800b5f2:	e9d8 4500 	ldrd	r4, r5, [r8]
 800b5f6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	4632      	mov	r2, r6
 800b5fe:	463b      	mov	r3, r7
 800b600:	4629      	mov	r1, r5
 800b602:	f7f4 fe4b 	bl	800029c <__adddf3>
 800b606:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b60a:	4602      	mov	r2, r0
 800b60c:	460b      	mov	r3, r1
 800b60e:	4620      	mov	r0, r4
 800b610:	4629      	mov	r1, r5
 800b612:	f7f4 fe41 	bl	8000298 <__aeabi_dsub>
 800b616:	4632      	mov	r2, r6
 800b618:	463b      	mov	r3, r7
 800b61a:	f7f4 fe3f 	bl	800029c <__adddf3>
 800b61e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b622:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800b626:	ed88 7b00 	vstr	d7, [r8]
 800b62a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b62e:	e776      	b.n	800b51e <__kernel_rem_pio2+0x4f6>
 800b630:	e9da 8900 	ldrd	r8, r9, [sl]
 800b634:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b638:	4640      	mov	r0, r8
 800b63a:	4632      	mov	r2, r6
 800b63c:	463b      	mov	r3, r7
 800b63e:	4649      	mov	r1, r9
 800b640:	f7f4 fe2c 	bl	800029c <__adddf3>
 800b644:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b648:	4602      	mov	r2, r0
 800b64a:	460b      	mov	r3, r1
 800b64c:	4640      	mov	r0, r8
 800b64e:	4649      	mov	r1, r9
 800b650:	f7f4 fe22 	bl	8000298 <__aeabi_dsub>
 800b654:	4632      	mov	r2, r6
 800b656:	463b      	mov	r3, r7
 800b658:	f7f4 fe20 	bl	800029c <__adddf3>
 800b65c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b660:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b664:	ed8a 7b00 	vstr	d7, [sl]
 800b668:	3c01      	subs	r4, #1
 800b66a:	e75e      	b.n	800b52a <__kernel_rem_pio2+0x502>
 800b66c:	ab48      	add	r3, sp, #288	; 0x120
 800b66e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b676:	f7f4 fe11 	bl	800029c <__adddf3>
 800b67a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b67e:	e75a      	b.n	800b536 <__kernel_rem_pio2+0x50e>
 800b680:	9b01      	ldr	r3, [sp, #4]
 800b682:	9a01      	ldr	r2, [sp, #4]
 800b684:	601d      	str	r5, [r3, #0]
 800b686:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b68a:	605c      	str	r4, [r3, #4]
 800b68c:	609f      	str	r7, [r3, #8]
 800b68e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b692:	60d3      	str	r3, [r2, #12]
 800b694:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b698:	6110      	str	r0, [r2, #16]
 800b69a:	6153      	str	r3, [r2, #20]
 800b69c:	e72e      	b.n	800b4fc <__kernel_rem_pio2+0x4d4>
 800b69e:	bf00      	nop
 800b6a0:	41700000 	.word	0x41700000
 800b6a4:	3e700000 	.word	0x3e700000

0800b6a8 <__kernel_sin>:
 800b6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ac:	ed2d 8b04 	vpush	{d8-d9}
 800b6b0:	eeb0 8a41 	vmov.f32	s16, s2
 800b6b4:	eef0 8a61 	vmov.f32	s17, s3
 800b6b8:	ec55 4b10 	vmov	r4, r5, d0
 800b6bc:	b083      	sub	sp, #12
 800b6be:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b6c2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b6c6:	9001      	str	r0, [sp, #4]
 800b6c8:	da06      	bge.n	800b6d8 <__kernel_sin+0x30>
 800b6ca:	ee10 0a10 	vmov	r0, s0
 800b6ce:	4629      	mov	r1, r5
 800b6d0:	f7f5 fa4a 	bl	8000b68 <__aeabi_d2iz>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	d051      	beq.n	800b77c <__kernel_sin+0xd4>
 800b6d8:	4622      	mov	r2, r4
 800b6da:	462b      	mov	r3, r5
 800b6dc:	4620      	mov	r0, r4
 800b6de:	4629      	mov	r1, r5
 800b6e0:	f7f4 ff92 	bl	8000608 <__aeabi_dmul>
 800b6e4:	4682      	mov	sl, r0
 800b6e6:	468b      	mov	fp, r1
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	f7f4 ff8a 	bl	8000608 <__aeabi_dmul>
 800b6f4:	a341      	add	r3, pc, #260	; (adr r3, 800b7fc <__kernel_sin+0x154>)
 800b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fa:	4680      	mov	r8, r0
 800b6fc:	4689      	mov	r9, r1
 800b6fe:	4650      	mov	r0, sl
 800b700:	4659      	mov	r1, fp
 800b702:	f7f4 ff81 	bl	8000608 <__aeabi_dmul>
 800b706:	a33f      	add	r3, pc, #252	; (adr r3, 800b804 <__kernel_sin+0x15c>)
 800b708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70c:	f7f4 fdc4 	bl	8000298 <__aeabi_dsub>
 800b710:	4652      	mov	r2, sl
 800b712:	465b      	mov	r3, fp
 800b714:	f7f4 ff78 	bl	8000608 <__aeabi_dmul>
 800b718:	a33c      	add	r3, pc, #240	; (adr r3, 800b80c <__kernel_sin+0x164>)
 800b71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71e:	f7f4 fdbd 	bl	800029c <__adddf3>
 800b722:	4652      	mov	r2, sl
 800b724:	465b      	mov	r3, fp
 800b726:	f7f4 ff6f 	bl	8000608 <__aeabi_dmul>
 800b72a:	a33a      	add	r3, pc, #232	; (adr r3, 800b814 <__kernel_sin+0x16c>)
 800b72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b730:	f7f4 fdb2 	bl	8000298 <__aeabi_dsub>
 800b734:	4652      	mov	r2, sl
 800b736:	465b      	mov	r3, fp
 800b738:	f7f4 ff66 	bl	8000608 <__aeabi_dmul>
 800b73c:	a337      	add	r3, pc, #220	; (adr r3, 800b81c <__kernel_sin+0x174>)
 800b73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b742:	f7f4 fdab 	bl	800029c <__adddf3>
 800b746:	9b01      	ldr	r3, [sp, #4]
 800b748:	4606      	mov	r6, r0
 800b74a:	460f      	mov	r7, r1
 800b74c:	b9eb      	cbnz	r3, 800b78a <__kernel_sin+0xe2>
 800b74e:	4602      	mov	r2, r0
 800b750:	460b      	mov	r3, r1
 800b752:	4650      	mov	r0, sl
 800b754:	4659      	mov	r1, fp
 800b756:	f7f4 ff57 	bl	8000608 <__aeabi_dmul>
 800b75a:	a325      	add	r3, pc, #148	; (adr r3, 800b7f0 <__kernel_sin+0x148>)
 800b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b760:	f7f4 fd9a 	bl	8000298 <__aeabi_dsub>
 800b764:	4642      	mov	r2, r8
 800b766:	464b      	mov	r3, r9
 800b768:	f7f4 ff4e 	bl	8000608 <__aeabi_dmul>
 800b76c:	4602      	mov	r2, r0
 800b76e:	460b      	mov	r3, r1
 800b770:	4620      	mov	r0, r4
 800b772:	4629      	mov	r1, r5
 800b774:	f7f4 fd92 	bl	800029c <__adddf3>
 800b778:	4604      	mov	r4, r0
 800b77a:	460d      	mov	r5, r1
 800b77c:	ec45 4b10 	vmov	d0, r4, r5
 800b780:	b003      	add	sp, #12
 800b782:	ecbd 8b04 	vpop	{d8-d9}
 800b786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78a:	4b1b      	ldr	r3, [pc, #108]	; (800b7f8 <__kernel_sin+0x150>)
 800b78c:	ec51 0b18 	vmov	r0, r1, d8
 800b790:	2200      	movs	r2, #0
 800b792:	f7f4 ff39 	bl	8000608 <__aeabi_dmul>
 800b796:	4632      	mov	r2, r6
 800b798:	ec41 0b19 	vmov	d9, r0, r1
 800b79c:	463b      	mov	r3, r7
 800b79e:	4640      	mov	r0, r8
 800b7a0:	4649      	mov	r1, r9
 800b7a2:	f7f4 ff31 	bl	8000608 <__aeabi_dmul>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	ec51 0b19 	vmov	r0, r1, d9
 800b7ae:	f7f4 fd73 	bl	8000298 <__aeabi_dsub>
 800b7b2:	4652      	mov	r2, sl
 800b7b4:	465b      	mov	r3, fp
 800b7b6:	f7f4 ff27 	bl	8000608 <__aeabi_dmul>
 800b7ba:	ec53 2b18 	vmov	r2, r3, d8
 800b7be:	f7f4 fd6b 	bl	8000298 <__aeabi_dsub>
 800b7c2:	a30b      	add	r3, pc, #44	; (adr r3, 800b7f0 <__kernel_sin+0x148>)
 800b7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c8:	4606      	mov	r6, r0
 800b7ca:	460f      	mov	r7, r1
 800b7cc:	4640      	mov	r0, r8
 800b7ce:	4649      	mov	r1, r9
 800b7d0:	f7f4 ff1a 	bl	8000608 <__aeabi_dmul>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	4630      	mov	r0, r6
 800b7da:	4639      	mov	r1, r7
 800b7dc:	f7f4 fd5e 	bl	800029c <__adddf3>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	f7f4 fd56 	bl	8000298 <__aeabi_dsub>
 800b7ec:	e7c4      	b.n	800b778 <__kernel_sin+0xd0>
 800b7ee:	bf00      	nop
 800b7f0:	55555549 	.word	0x55555549
 800b7f4:	3fc55555 	.word	0x3fc55555
 800b7f8:	3fe00000 	.word	0x3fe00000
 800b7fc:	5acfd57c 	.word	0x5acfd57c
 800b800:	3de5d93a 	.word	0x3de5d93a
 800b804:	8a2b9ceb 	.word	0x8a2b9ceb
 800b808:	3e5ae5e6 	.word	0x3e5ae5e6
 800b80c:	57b1fe7d 	.word	0x57b1fe7d
 800b810:	3ec71de3 	.word	0x3ec71de3
 800b814:	19c161d5 	.word	0x19c161d5
 800b818:	3f2a01a0 	.word	0x3f2a01a0
 800b81c:	1110f8a6 	.word	0x1110f8a6
 800b820:	3f811111 	.word	0x3f811111
 800b824:	00000000 	.word	0x00000000

0800b828 <atan>:
 800b828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82c:	ec55 4b10 	vmov	r4, r5, d0
 800b830:	4bc3      	ldr	r3, [pc, #780]	; (800bb40 <atan+0x318>)
 800b832:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b836:	429e      	cmp	r6, r3
 800b838:	46ab      	mov	fp, r5
 800b83a:	dd18      	ble.n	800b86e <atan+0x46>
 800b83c:	4bc1      	ldr	r3, [pc, #772]	; (800bb44 <atan+0x31c>)
 800b83e:	429e      	cmp	r6, r3
 800b840:	dc01      	bgt.n	800b846 <atan+0x1e>
 800b842:	d109      	bne.n	800b858 <atan+0x30>
 800b844:	b144      	cbz	r4, 800b858 <atan+0x30>
 800b846:	4622      	mov	r2, r4
 800b848:	462b      	mov	r3, r5
 800b84a:	4620      	mov	r0, r4
 800b84c:	4629      	mov	r1, r5
 800b84e:	f7f4 fd25 	bl	800029c <__adddf3>
 800b852:	4604      	mov	r4, r0
 800b854:	460d      	mov	r5, r1
 800b856:	e006      	b.n	800b866 <atan+0x3e>
 800b858:	f1bb 0f00 	cmp.w	fp, #0
 800b85c:	f300 8131 	bgt.w	800bac2 <atan+0x29a>
 800b860:	a59b      	add	r5, pc, #620	; (adr r5, 800bad0 <atan+0x2a8>)
 800b862:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b866:	ec45 4b10 	vmov	d0, r4, r5
 800b86a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b86e:	4bb6      	ldr	r3, [pc, #728]	; (800bb48 <atan+0x320>)
 800b870:	429e      	cmp	r6, r3
 800b872:	dc14      	bgt.n	800b89e <atan+0x76>
 800b874:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b878:	429e      	cmp	r6, r3
 800b87a:	dc0d      	bgt.n	800b898 <atan+0x70>
 800b87c:	a396      	add	r3, pc, #600	; (adr r3, 800bad8 <atan+0x2b0>)
 800b87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b882:	ee10 0a10 	vmov	r0, s0
 800b886:	4629      	mov	r1, r5
 800b888:	f7f4 fd08 	bl	800029c <__adddf3>
 800b88c:	4baf      	ldr	r3, [pc, #700]	; (800bb4c <atan+0x324>)
 800b88e:	2200      	movs	r2, #0
 800b890:	f7f5 f94a 	bl	8000b28 <__aeabi_dcmpgt>
 800b894:	2800      	cmp	r0, #0
 800b896:	d1e6      	bne.n	800b866 <atan+0x3e>
 800b898:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b89c:	e02b      	b.n	800b8f6 <atan+0xce>
 800b89e:	f000 f963 	bl	800bb68 <fabs>
 800b8a2:	4bab      	ldr	r3, [pc, #684]	; (800bb50 <atan+0x328>)
 800b8a4:	429e      	cmp	r6, r3
 800b8a6:	ec55 4b10 	vmov	r4, r5, d0
 800b8aa:	f300 80bf 	bgt.w	800ba2c <atan+0x204>
 800b8ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b8b2:	429e      	cmp	r6, r3
 800b8b4:	f300 80a0 	bgt.w	800b9f8 <atan+0x1d0>
 800b8b8:	ee10 2a10 	vmov	r2, s0
 800b8bc:	ee10 0a10 	vmov	r0, s0
 800b8c0:	462b      	mov	r3, r5
 800b8c2:	4629      	mov	r1, r5
 800b8c4:	f7f4 fcea 	bl	800029c <__adddf3>
 800b8c8:	4ba0      	ldr	r3, [pc, #640]	; (800bb4c <atan+0x324>)
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f7f4 fce4 	bl	8000298 <__aeabi_dsub>
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	4606      	mov	r6, r0
 800b8d4:	460f      	mov	r7, r1
 800b8d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b8da:	4620      	mov	r0, r4
 800b8dc:	4629      	mov	r1, r5
 800b8de:	f7f4 fcdd 	bl	800029c <__adddf3>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	4639      	mov	r1, r7
 800b8ea:	f7f4 ffb7 	bl	800085c <__aeabi_ddiv>
 800b8ee:	f04f 0a00 	mov.w	sl, #0
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	460d      	mov	r5, r1
 800b8f6:	4622      	mov	r2, r4
 800b8f8:	462b      	mov	r3, r5
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	4629      	mov	r1, r5
 800b8fe:	f7f4 fe83 	bl	8000608 <__aeabi_dmul>
 800b902:	4602      	mov	r2, r0
 800b904:	460b      	mov	r3, r1
 800b906:	4680      	mov	r8, r0
 800b908:	4689      	mov	r9, r1
 800b90a:	f7f4 fe7d 	bl	8000608 <__aeabi_dmul>
 800b90e:	a374      	add	r3, pc, #464	; (adr r3, 800bae0 <atan+0x2b8>)
 800b910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b914:	4606      	mov	r6, r0
 800b916:	460f      	mov	r7, r1
 800b918:	f7f4 fe76 	bl	8000608 <__aeabi_dmul>
 800b91c:	a372      	add	r3, pc, #456	; (adr r3, 800bae8 <atan+0x2c0>)
 800b91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b922:	f7f4 fcbb 	bl	800029c <__adddf3>
 800b926:	4632      	mov	r2, r6
 800b928:	463b      	mov	r3, r7
 800b92a:	f7f4 fe6d 	bl	8000608 <__aeabi_dmul>
 800b92e:	a370      	add	r3, pc, #448	; (adr r3, 800baf0 <atan+0x2c8>)
 800b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b934:	f7f4 fcb2 	bl	800029c <__adddf3>
 800b938:	4632      	mov	r2, r6
 800b93a:	463b      	mov	r3, r7
 800b93c:	f7f4 fe64 	bl	8000608 <__aeabi_dmul>
 800b940:	a36d      	add	r3, pc, #436	; (adr r3, 800baf8 <atan+0x2d0>)
 800b942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b946:	f7f4 fca9 	bl	800029c <__adddf3>
 800b94a:	4632      	mov	r2, r6
 800b94c:	463b      	mov	r3, r7
 800b94e:	f7f4 fe5b 	bl	8000608 <__aeabi_dmul>
 800b952:	a36b      	add	r3, pc, #428	; (adr r3, 800bb00 <atan+0x2d8>)
 800b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b958:	f7f4 fca0 	bl	800029c <__adddf3>
 800b95c:	4632      	mov	r2, r6
 800b95e:	463b      	mov	r3, r7
 800b960:	f7f4 fe52 	bl	8000608 <__aeabi_dmul>
 800b964:	a368      	add	r3, pc, #416	; (adr r3, 800bb08 <atan+0x2e0>)
 800b966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96a:	f7f4 fc97 	bl	800029c <__adddf3>
 800b96e:	4642      	mov	r2, r8
 800b970:	464b      	mov	r3, r9
 800b972:	f7f4 fe49 	bl	8000608 <__aeabi_dmul>
 800b976:	a366      	add	r3, pc, #408	; (adr r3, 800bb10 <atan+0x2e8>)
 800b978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97c:	4680      	mov	r8, r0
 800b97e:	4689      	mov	r9, r1
 800b980:	4630      	mov	r0, r6
 800b982:	4639      	mov	r1, r7
 800b984:	f7f4 fe40 	bl	8000608 <__aeabi_dmul>
 800b988:	a363      	add	r3, pc, #396	; (adr r3, 800bb18 <atan+0x2f0>)
 800b98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98e:	f7f4 fc83 	bl	8000298 <__aeabi_dsub>
 800b992:	4632      	mov	r2, r6
 800b994:	463b      	mov	r3, r7
 800b996:	f7f4 fe37 	bl	8000608 <__aeabi_dmul>
 800b99a:	a361      	add	r3, pc, #388	; (adr r3, 800bb20 <atan+0x2f8>)
 800b99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a0:	f7f4 fc7a 	bl	8000298 <__aeabi_dsub>
 800b9a4:	4632      	mov	r2, r6
 800b9a6:	463b      	mov	r3, r7
 800b9a8:	f7f4 fe2e 	bl	8000608 <__aeabi_dmul>
 800b9ac:	a35e      	add	r3, pc, #376	; (adr r3, 800bb28 <atan+0x300>)
 800b9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b2:	f7f4 fc71 	bl	8000298 <__aeabi_dsub>
 800b9b6:	4632      	mov	r2, r6
 800b9b8:	463b      	mov	r3, r7
 800b9ba:	f7f4 fe25 	bl	8000608 <__aeabi_dmul>
 800b9be:	a35c      	add	r3, pc, #368	; (adr r3, 800bb30 <atan+0x308>)
 800b9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c4:	f7f4 fc68 	bl	8000298 <__aeabi_dsub>
 800b9c8:	4632      	mov	r2, r6
 800b9ca:	463b      	mov	r3, r7
 800b9cc:	f7f4 fe1c 	bl	8000608 <__aeabi_dmul>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	4640      	mov	r0, r8
 800b9d6:	4649      	mov	r1, r9
 800b9d8:	f7f4 fc60 	bl	800029c <__adddf3>
 800b9dc:	4622      	mov	r2, r4
 800b9de:	462b      	mov	r3, r5
 800b9e0:	f7f4 fe12 	bl	8000608 <__aeabi_dmul>
 800b9e4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	d14b      	bne.n	800ba86 <atan+0x25e>
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	4629      	mov	r1, r5
 800b9f2:	f7f4 fc51 	bl	8000298 <__aeabi_dsub>
 800b9f6:	e72c      	b.n	800b852 <atan+0x2a>
 800b9f8:	ee10 0a10 	vmov	r0, s0
 800b9fc:	4b53      	ldr	r3, [pc, #332]	; (800bb4c <atan+0x324>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	4629      	mov	r1, r5
 800ba02:	f7f4 fc49 	bl	8000298 <__aeabi_dsub>
 800ba06:	4b51      	ldr	r3, [pc, #324]	; (800bb4c <atan+0x324>)
 800ba08:	4606      	mov	r6, r0
 800ba0a:	460f      	mov	r7, r1
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	4620      	mov	r0, r4
 800ba10:	4629      	mov	r1, r5
 800ba12:	f7f4 fc43 	bl	800029c <__adddf3>
 800ba16:	4602      	mov	r2, r0
 800ba18:	460b      	mov	r3, r1
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	4639      	mov	r1, r7
 800ba1e:	f7f4 ff1d 	bl	800085c <__aeabi_ddiv>
 800ba22:	f04f 0a01 	mov.w	sl, #1
 800ba26:	4604      	mov	r4, r0
 800ba28:	460d      	mov	r5, r1
 800ba2a:	e764      	b.n	800b8f6 <atan+0xce>
 800ba2c:	4b49      	ldr	r3, [pc, #292]	; (800bb54 <atan+0x32c>)
 800ba2e:	429e      	cmp	r6, r3
 800ba30:	da1d      	bge.n	800ba6e <atan+0x246>
 800ba32:	ee10 0a10 	vmov	r0, s0
 800ba36:	4b48      	ldr	r3, [pc, #288]	; (800bb58 <atan+0x330>)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	f7f4 fc2c 	bl	8000298 <__aeabi_dsub>
 800ba40:	4b45      	ldr	r3, [pc, #276]	; (800bb58 <atan+0x330>)
 800ba42:	4606      	mov	r6, r0
 800ba44:	460f      	mov	r7, r1
 800ba46:	2200      	movs	r2, #0
 800ba48:	4620      	mov	r0, r4
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	f7f4 fddc 	bl	8000608 <__aeabi_dmul>
 800ba50:	4b3e      	ldr	r3, [pc, #248]	; (800bb4c <atan+0x324>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	f7f4 fc22 	bl	800029c <__adddf3>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	4639      	mov	r1, r7
 800ba60:	f7f4 fefc 	bl	800085c <__aeabi_ddiv>
 800ba64:	f04f 0a02 	mov.w	sl, #2
 800ba68:	4604      	mov	r4, r0
 800ba6a:	460d      	mov	r5, r1
 800ba6c:	e743      	b.n	800b8f6 <atan+0xce>
 800ba6e:	462b      	mov	r3, r5
 800ba70:	ee10 2a10 	vmov	r2, s0
 800ba74:	4939      	ldr	r1, [pc, #228]	; (800bb5c <atan+0x334>)
 800ba76:	2000      	movs	r0, #0
 800ba78:	f7f4 fef0 	bl	800085c <__aeabi_ddiv>
 800ba7c:	f04f 0a03 	mov.w	sl, #3
 800ba80:	4604      	mov	r4, r0
 800ba82:	460d      	mov	r5, r1
 800ba84:	e737      	b.n	800b8f6 <atan+0xce>
 800ba86:	4b36      	ldr	r3, [pc, #216]	; (800bb60 <atan+0x338>)
 800ba88:	4e36      	ldr	r6, [pc, #216]	; (800bb64 <atan+0x33c>)
 800ba8a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ba8e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ba92:	e9da 2300 	ldrd	r2, r3, [sl]
 800ba96:	f7f4 fbff 	bl	8000298 <__aeabi_dsub>
 800ba9a:	4622      	mov	r2, r4
 800ba9c:	462b      	mov	r3, r5
 800ba9e:	f7f4 fbfb 	bl	8000298 <__aeabi_dsub>
 800baa2:	4602      	mov	r2, r0
 800baa4:	460b      	mov	r3, r1
 800baa6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800baaa:	f7f4 fbf5 	bl	8000298 <__aeabi_dsub>
 800baae:	f1bb 0f00 	cmp.w	fp, #0
 800bab2:	4604      	mov	r4, r0
 800bab4:	460d      	mov	r5, r1
 800bab6:	f6bf aed6 	bge.w	800b866 <atan+0x3e>
 800baba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800babe:	461d      	mov	r5, r3
 800bac0:	e6d1      	b.n	800b866 <atan+0x3e>
 800bac2:	a51d      	add	r5, pc, #116	; (adr r5, 800bb38 <atan+0x310>)
 800bac4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bac8:	e6cd      	b.n	800b866 <atan+0x3e>
 800baca:	bf00      	nop
 800bacc:	f3af 8000 	nop.w
 800bad0:	54442d18 	.word	0x54442d18
 800bad4:	bff921fb 	.word	0xbff921fb
 800bad8:	8800759c 	.word	0x8800759c
 800badc:	7e37e43c 	.word	0x7e37e43c
 800bae0:	e322da11 	.word	0xe322da11
 800bae4:	3f90ad3a 	.word	0x3f90ad3a
 800bae8:	24760deb 	.word	0x24760deb
 800baec:	3fa97b4b 	.word	0x3fa97b4b
 800baf0:	a0d03d51 	.word	0xa0d03d51
 800baf4:	3fb10d66 	.word	0x3fb10d66
 800baf8:	c54c206e 	.word	0xc54c206e
 800bafc:	3fb745cd 	.word	0x3fb745cd
 800bb00:	920083ff 	.word	0x920083ff
 800bb04:	3fc24924 	.word	0x3fc24924
 800bb08:	5555550d 	.word	0x5555550d
 800bb0c:	3fd55555 	.word	0x3fd55555
 800bb10:	2c6a6c2f 	.word	0x2c6a6c2f
 800bb14:	bfa2b444 	.word	0xbfa2b444
 800bb18:	52defd9a 	.word	0x52defd9a
 800bb1c:	3fadde2d 	.word	0x3fadde2d
 800bb20:	af749a6d 	.word	0xaf749a6d
 800bb24:	3fb3b0f2 	.word	0x3fb3b0f2
 800bb28:	fe231671 	.word	0xfe231671
 800bb2c:	3fbc71c6 	.word	0x3fbc71c6
 800bb30:	9998ebc4 	.word	0x9998ebc4
 800bb34:	3fc99999 	.word	0x3fc99999
 800bb38:	54442d18 	.word	0x54442d18
 800bb3c:	3ff921fb 	.word	0x3ff921fb
 800bb40:	440fffff 	.word	0x440fffff
 800bb44:	7ff00000 	.word	0x7ff00000
 800bb48:	3fdbffff 	.word	0x3fdbffff
 800bb4c:	3ff00000 	.word	0x3ff00000
 800bb50:	3ff2ffff 	.word	0x3ff2ffff
 800bb54:	40038000 	.word	0x40038000
 800bb58:	3ff80000 	.word	0x3ff80000
 800bb5c:	bff00000 	.word	0xbff00000
 800bb60:	0800c408 	.word	0x0800c408
 800bb64:	0800c3e8 	.word	0x0800c3e8

0800bb68 <fabs>:
 800bb68:	ec51 0b10 	vmov	r0, r1, d0
 800bb6c:	ee10 2a10 	vmov	r2, s0
 800bb70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb74:	ec43 2b10 	vmov	d0, r2, r3
 800bb78:	4770      	bx	lr
 800bb7a:	0000      	movs	r0, r0
 800bb7c:	0000      	movs	r0, r0
	...

0800bb80 <floor>:
 800bb80:	ec51 0b10 	vmov	r0, r1, d0
 800bb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bb8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bb90:	2e13      	cmp	r6, #19
 800bb92:	ee10 5a10 	vmov	r5, s0
 800bb96:	ee10 8a10 	vmov	r8, s0
 800bb9a:	460c      	mov	r4, r1
 800bb9c:	dc32      	bgt.n	800bc04 <floor+0x84>
 800bb9e:	2e00      	cmp	r6, #0
 800bba0:	da14      	bge.n	800bbcc <floor+0x4c>
 800bba2:	a333      	add	r3, pc, #204	; (adr r3, 800bc70 <floor+0xf0>)
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	f7f4 fb78 	bl	800029c <__adddf3>
 800bbac:	2200      	movs	r2, #0
 800bbae:	2300      	movs	r3, #0
 800bbb0:	f7f4 ffba 	bl	8000b28 <__aeabi_dcmpgt>
 800bbb4:	b138      	cbz	r0, 800bbc6 <floor+0x46>
 800bbb6:	2c00      	cmp	r4, #0
 800bbb8:	da57      	bge.n	800bc6a <floor+0xea>
 800bbba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bbbe:	431d      	orrs	r5, r3
 800bbc0:	d001      	beq.n	800bbc6 <floor+0x46>
 800bbc2:	4c2d      	ldr	r4, [pc, #180]	; (800bc78 <floor+0xf8>)
 800bbc4:	2500      	movs	r5, #0
 800bbc6:	4621      	mov	r1, r4
 800bbc8:	4628      	mov	r0, r5
 800bbca:	e025      	b.n	800bc18 <floor+0x98>
 800bbcc:	4f2b      	ldr	r7, [pc, #172]	; (800bc7c <floor+0xfc>)
 800bbce:	4137      	asrs	r7, r6
 800bbd0:	ea01 0307 	and.w	r3, r1, r7
 800bbd4:	4303      	orrs	r3, r0
 800bbd6:	d01f      	beq.n	800bc18 <floor+0x98>
 800bbd8:	a325      	add	r3, pc, #148	; (adr r3, 800bc70 <floor+0xf0>)
 800bbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbde:	f7f4 fb5d 	bl	800029c <__adddf3>
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	f7f4 ff9f 	bl	8000b28 <__aeabi_dcmpgt>
 800bbea:	2800      	cmp	r0, #0
 800bbec:	d0eb      	beq.n	800bbc6 <floor+0x46>
 800bbee:	2c00      	cmp	r4, #0
 800bbf0:	bfbe      	ittt	lt
 800bbf2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bbf6:	fa43 f606 	asrlt.w	r6, r3, r6
 800bbfa:	19a4      	addlt	r4, r4, r6
 800bbfc:	ea24 0407 	bic.w	r4, r4, r7
 800bc00:	2500      	movs	r5, #0
 800bc02:	e7e0      	b.n	800bbc6 <floor+0x46>
 800bc04:	2e33      	cmp	r6, #51	; 0x33
 800bc06:	dd0b      	ble.n	800bc20 <floor+0xa0>
 800bc08:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bc0c:	d104      	bne.n	800bc18 <floor+0x98>
 800bc0e:	ee10 2a10 	vmov	r2, s0
 800bc12:	460b      	mov	r3, r1
 800bc14:	f7f4 fb42 	bl	800029c <__adddf3>
 800bc18:	ec41 0b10 	vmov	d0, r0, r1
 800bc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc20:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bc24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc28:	fa23 f707 	lsr.w	r7, r3, r7
 800bc2c:	4207      	tst	r7, r0
 800bc2e:	d0f3      	beq.n	800bc18 <floor+0x98>
 800bc30:	a30f      	add	r3, pc, #60	; (adr r3, 800bc70 <floor+0xf0>)
 800bc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc36:	f7f4 fb31 	bl	800029c <__adddf3>
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	f7f4 ff73 	bl	8000b28 <__aeabi_dcmpgt>
 800bc42:	2800      	cmp	r0, #0
 800bc44:	d0bf      	beq.n	800bbc6 <floor+0x46>
 800bc46:	2c00      	cmp	r4, #0
 800bc48:	da02      	bge.n	800bc50 <floor+0xd0>
 800bc4a:	2e14      	cmp	r6, #20
 800bc4c:	d103      	bne.n	800bc56 <floor+0xd6>
 800bc4e:	3401      	adds	r4, #1
 800bc50:	ea25 0507 	bic.w	r5, r5, r7
 800bc54:	e7b7      	b.n	800bbc6 <floor+0x46>
 800bc56:	2301      	movs	r3, #1
 800bc58:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bc5c:	fa03 f606 	lsl.w	r6, r3, r6
 800bc60:	4435      	add	r5, r6
 800bc62:	4545      	cmp	r5, r8
 800bc64:	bf38      	it	cc
 800bc66:	18e4      	addcc	r4, r4, r3
 800bc68:	e7f2      	b.n	800bc50 <floor+0xd0>
 800bc6a:	2500      	movs	r5, #0
 800bc6c:	462c      	mov	r4, r5
 800bc6e:	e7aa      	b.n	800bbc6 <floor+0x46>
 800bc70:	8800759c 	.word	0x8800759c
 800bc74:	7e37e43c 	.word	0x7e37e43c
 800bc78:	bff00000 	.word	0xbff00000
 800bc7c:	000fffff 	.word	0x000fffff

0800bc80 <scalbn>:
 800bc80:	b570      	push	{r4, r5, r6, lr}
 800bc82:	ec55 4b10 	vmov	r4, r5, d0
 800bc86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bc8a:	4606      	mov	r6, r0
 800bc8c:	462b      	mov	r3, r5
 800bc8e:	b99a      	cbnz	r2, 800bcb8 <scalbn+0x38>
 800bc90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bc94:	4323      	orrs	r3, r4
 800bc96:	d036      	beq.n	800bd06 <scalbn+0x86>
 800bc98:	4b39      	ldr	r3, [pc, #228]	; (800bd80 <scalbn+0x100>)
 800bc9a:	4629      	mov	r1, r5
 800bc9c:	ee10 0a10 	vmov	r0, s0
 800bca0:	2200      	movs	r2, #0
 800bca2:	f7f4 fcb1 	bl	8000608 <__aeabi_dmul>
 800bca6:	4b37      	ldr	r3, [pc, #220]	; (800bd84 <scalbn+0x104>)
 800bca8:	429e      	cmp	r6, r3
 800bcaa:	4604      	mov	r4, r0
 800bcac:	460d      	mov	r5, r1
 800bcae:	da10      	bge.n	800bcd2 <scalbn+0x52>
 800bcb0:	a32b      	add	r3, pc, #172	; (adr r3, 800bd60 <scalbn+0xe0>)
 800bcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb6:	e03a      	b.n	800bd2e <scalbn+0xae>
 800bcb8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bcbc:	428a      	cmp	r2, r1
 800bcbe:	d10c      	bne.n	800bcda <scalbn+0x5a>
 800bcc0:	ee10 2a10 	vmov	r2, s0
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	4629      	mov	r1, r5
 800bcc8:	f7f4 fae8 	bl	800029c <__adddf3>
 800bccc:	4604      	mov	r4, r0
 800bcce:	460d      	mov	r5, r1
 800bcd0:	e019      	b.n	800bd06 <scalbn+0x86>
 800bcd2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	3a36      	subs	r2, #54	; 0x36
 800bcda:	4432      	add	r2, r6
 800bcdc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bce0:	428a      	cmp	r2, r1
 800bce2:	dd08      	ble.n	800bcf6 <scalbn+0x76>
 800bce4:	2d00      	cmp	r5, #0
 800bce6:	a120      	add	r1, pc, #128	; (adr r1, 800bd68 <scalbn+0xe8>)
 800bce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcec:	da1c      	bge.n	800bd28 <scalbn+0xa8>
 800bcee:	a120      	add	r1, pc, #128	; (adr r1, 800bd70 <scalbn+0xf0>)
 800bcf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcf4:	e018      	b.n	800bd28 <scalbn+0xa8>
 800bcf6:	2a00      	cmp	r2, #0
 800bcf8:	dd08      	ble.n	800bd0c <scalbn+0x8c>
 800bcfa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bcfe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bd02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bd06:	ec45 4b10 	vmov	d0, r4, r5
 800bd0a:	bd70      	pop	{r4, r5, r6, pc}
 800bd0c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bd10:	da19      	bge.n	800bd46 <scalbn+0xc6>
 800bd12:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bd16:	429e      	cmp	r6, r3
 800bd18:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bd1c:	dd0a      	ble.n	800bd34 <scalbn+0xb4>
 800bd1e:	a112      	add	r1, pc, #72	; (adr r1, 800bd68 <scalbn+0xe8>)
 800bd20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d1e2      	bne.n	800bcee <scalbn+0x6e>
 800bd28:	a30f      	add	r3, pc, #60	; (adr r3, 800bd68 <scalbn+0xe8>)
 800bd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2e:	f7f4 fc6b 	bl	8000608 <__aeabi_dmul>
 800bd32:	e7cb      	b.n	800bccc <scalbn+0x4c>
 800bd34:	a10a      	add	r1, pc, #40	; (adr r1, 800bd60 <scalbn+0xe0>)
 800bd36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d0b8      	beq.n	800bcb0 <scalbn+0x30>
 800bd3e:	a10e      	add	r1, pc, #56	; (adr r1, 800bd78 <scalbn+0xf8>)
 800bd40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd44:	e7b4      	b.n	800bcb0 <scalbn+0x30>
 800bd46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bd4a:	3236      	adds	r2, #54	; 0x36
 800bd4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bd50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bd54:	4620      	mov	r0, r4
 800bd56:	4b0c      	ldr	r3, [pc, #48]	; (800bd88 <scalbn+0x108>)
 800bd58:	2200      	movs	r2, #0
 800bd5a:	e7e8      	b.n	800bd2e <scalbn+0xae>
 800bd5c:	f3af 8000 	nop.w
 800bd60:	c2f8f359 	.word	0xc2f8f359
 800bd64:	01a56e1f 	.word	0x01a56e1f
 800bd68:	8800759c 	.word	0x8800759c
 800bd6c:	7e37e43c 	.word	0x7e37e43c
 800bd70:	8800759c 	.word	0x8800759c
 800bd74:	fe37e43c 	.word	0xfe37e43c
 800bd78:	c2f8f359 	.word	0xc2f8f359
 800bd7c:	81a56e1f 	.word	0x81a56e1f
 800bd80:	43500000 	.word	0x43500000
 800bd84:	ffff3cb0 	.word	0xffff3cb0
 800bd88:	3c900000 	.word	0x3c900000

0800bd8c <_init>:
 800bd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd8e:	bf00      	nop
 800bd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd92:	bc08      	pop	{r3}
 800bd94:	469e      	mov	lr, r3
 800bd96:	4770      	bx	lr

0800bd98 <_fini>:
 800bd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9a:	bf00      	nop
 800bd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd9e:	bc08      	pop	{r3}
 800bda0:	469e      	mov	lr, r3
 800bda2:	4770      	bx	lr
