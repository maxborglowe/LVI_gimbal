
LVI_Gimbal2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a92c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  0800aad0  0800aad0  0001aad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b230  0800b230  000221e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b230  0800b230  0001b230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b238  0800b238  000221e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b238  0800b238  0001b238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b23c  0800b23c  0001b23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000021e8  20000000  0800b240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c690  200021e8  0800d428  000221e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e878  0800d428  0002e878  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000221e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026dc9  00000000  00000000  00022218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000497f  00000000  00000000  00048fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00016f18  00000000  00000000  0004d960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  00064878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002ae0  00000000  00000000  00065740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bfa1  00000000  00000000  00068220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022096  00000000  00000000  000841c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ecda  00000000  00000000  000a6257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00144f31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049ac  00000000  00000000  00144f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200021e8 	.word	0x200021e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aab4 	.word	0x0800aab4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200021ec 	.word	0x200021ec
 80001dc:	0800aab4 	.word	0x0800aab4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <as5048a_read>:
uint8_t calcEvenParity(uint16_t value) {
	uint8_t cnt = 0;

	for (uint8_t i = 0; i < 16; i++) {
		if (value & 0x1) {
			cnt++;
 8000f50:	f001 0301 	and.w	r3, r1, #1
	uint16_t cmd = CMD_READ | reg;
 8000f54:	f441 4280 	orr.w	r2, r1, #16384	; 0x4000
uint16_t as5048a_read(uint16_t ss, uint16_t reg) {
 8000f58:	b530      	push	{r4, r5, lr}
 8000f5a:	4604      	mov	r4, r0
		if (value & 0x1) {
 8000f5c:	0788      	lsls	r0, r1, #30
			cnt++;
 8000f5e:	bf48      	it	mi
 8000f60:	3301      	addmi	r3, #1
		if (value & 0x1) {
 8000f62:	0751      	lsls	r1, r2, #29
			cnt++;
 8000f64:	bf44      	itt	mi
 8000f66:	3301      	addmi	r3, #1
 8000f68:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f6a:	0715      	lsls	r5, r2, #28
			cnt++;
 8000f6c:	bf44      	itt	mi
 8000f6e:	3301      	addmi	r3, #1
 8000f70:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f72:	06d0      	lsls	r0, r2, #27
			cnt++;
 8000f74:	bf44      	itt	mi
 8000f76:	3301      	addmi	r3, #1
 8000f78:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f7a:	0691      	lsls	r1, r2, #26
			cnt++;
 8000f7c:	bf44      	itt	mi
 8000f7e:	3301      	addmi	r3, #1
 8000f80:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f82:	0655      	lsls	r5, r2, #25
			cnt++;
 8000f84:	bf44      	itt	mi
 8000f86:	3301      	addmi	r3, #1
 8000f88:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f8a:	0610      	lsls	r0, r2, #24
			cnt++;
 8000f8c:	bf44      	itt	mi
 8000f8e:	3301      	addmi	r3, #1
 8000f90:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f92:	05d1      	lsls	r1, r2, #23
			cnt++;
 8000f94:	bf44      	itt	mi
 8000f96:	3301      	addmi	r3, #1
 8000f98:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000f9a:	0595      	lsls	r5, r2, #22
			cnt++;
 8000f9c:	bf44      	itt	mi
 8000f9e:	3301      	addmi	r3, #1
 8000fa0:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000fa2:	0550      	lsls	r0, r2, #21
			cnt++;
 8000fa4:	bf44      	itt	mi
 8000fa6:	3301      	addmi	r3, #1
 8000fa8:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000faa:	0511      	lsls	r1, r2, #20
			cnt++;
 8000fac:	bf44      	itt	mi
 8000fae:	3301      	addmi	r3, #1
 8000fb0:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000fb2:	04d5      	lsls	r5, r2, #19
			cnt++;
 8000fb4:	bf44      	itt	mi
 8000fb6:	3301      	addmi	r3, #1
 8000fb8:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000fba:	0490      	lsls	r0, r2, #18
			cnt++;
 8000fbc:	bf44      	itt	mi
 8000fbe:	3301      	addmi	r3, #1
 8000fc0:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000fc2:	0451      	lsls	r1, r2, #17
			cnt++;
 8000fc4:	bf44      	itt	mi
 8000fc6:	3301      	addmi	r3, #1
 8000fc8:	b2db      	uxtbmi	r3, r3
		if (value & 0x1) {
 8000fca:	0bd1      	lsrs	r1, r2, #15
			cnt++;
 8000fcc:	bf1c      	itt	ne
 8000fce:	3301      	addne	r3, #1
 8000fd0:	b2db      	uxtbne	r3, r3
	cmd |= ((uint16_t) calcEvenParity(cmd) << 15);
 8000fd2:	f003 0301 	and.w	r3, r3, #1
uint16_t as5048a_read(uint16_t ss, uint16_t reg) {
 8000fd6:	b083      	sub	sp, #12
	cmd |= ((uint16_t) calcEvenParity(cmd) << 15);
 8000fd8:	ea42 33c3 	orr.w	r3, r2, r3, lsl #15
	data[0] = (cmd >> 8) & 0xFF;
 8000fdc:	ba5b      	rev16	r3, r3
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_RESET);
 8000fde:	481d      	ldr	r0, [pc, #116]	; (8001054 <as5048a_read+0x104>)
	data[0] = (cmd >> 8) & 0xFF;
 8000fe0:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4621      	mov	r1, r4
 8000fe8:	f003 fc76 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 2, 0xFFFF);
 8000fec:	481a      	ldr	r0, [pc, #104]	; (8001058 <as5048a_read+0x108>)
 8000fee:	a901      	add	r1, sp, #4
 8000ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ff4:	2202      	movs	r2, #2
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8000ff6:	4605      	mov	r5, r0
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 2, 0xFFFF);
 8000ff8:	f004 f81a 	bl	8005030 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	f004 fbcd 	bl	800579c <HAL_SPI_GetState>
 8001002:	2801      	cmp	r0, #1
 8001004:	d1fa      	bne.n	8000ffc <as5048a_read+0xac>
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_SET);
 8001006:	4602      	mov	r2, r0
 8001008:	4621      	mov	r1, r4
 800100a:	4812      	ldr	r0, [pc, #72]	; (8001054 <as5048a_read+0x104>)
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 800100c:	4d12      	ldr	r5, [pc, #72]	; (8001058 <as5048a_read+0x108>)
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_SET);
 800100e:	f003 fc63 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_RESET);
 8001012:	4810      	ldr	r0, [pc, #64]	; (8001054 <as5048a_read+0x104>)
 8001014:	2200      	movs	r2, #0
 8001016:	4621      	mov	r1, r4
 8001018:	f003 fc5e 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 2, 0xFFFF);
 800101c:	a901      	add	r1, sp, #4
 800101e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001022:	2202      	movs	r2, #2
 8001024:	4628      	mov	r0, r5
 8001026:	f004 faad 	bl	8005584 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 800102a:	4628      	mov	r0, r5
 800102c:	f004 fbb6 	bl	800579c <HAL_SPI_GetState>
 8001030:	2801      	cmp	r0, #1
 8001032:	d1fa      	bne.n	800102a <as5048a_read+0xda>
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_SET);
 8001034:	4602      	mov	r2, r0
 8001036:	4621      	mov	r1, r4
 8001038:	4806      	ldr	r0, [pc, #24]	; (8001054 <as5048a_read+0x104>)
 800103a:	f003 fc4d 	bl	80048d8 <HAL_GPIO_WritePin>
	return (((data[0] & 0xFF) << 8) | (data[1] & 0xFF)) & ~0xC000; //wat
 800103e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001042:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001046:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 800104a:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800104e:	b003      	add	sp, #12
 8001050:	bd30      	pop	{r4, r5, pc}
 8001052:	bf00      	nop
 8001054:	40020400 	.word	0x40020400
 8001058:	2000e5d8 	.word	0x2000e5d8
 800105c:	00000000 	.word	0x00000000

08001060 <as5048a_init>:
void as5048a_init(MotorDriver *driver) {
 8001060:	b510      	push	{r4, lr}
 8001062:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(PINBUS_ENC, driver->PIN_ENC, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	8801      	ldrh	r1, [r0, #0]
 8001068:	4825      	ldr	r0, [pc, #148]	; (8001100 <as5048a_init+0xa0>)
 800106a:	f003 fc35 	bl	80048d8 <HAL_GPIO_WritePin>
	return as5048a_read(ss, REG_ANGLE);
 800106e:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001072:	8820      	ldrh	r0, [r4, #0]
 8001074:	f7ff ff6c 	bl	8000f50 <as5048a_read>
	return 2 * ((float) angle * (_2PI * _1_16384) - _PI);
 8001078:	ee07 0a90 	vmov	s15, r0
 800107c:	ed9f 6a21 	vldr	s12, [pc, #132]	; 8001104 <as5048a_init+0xa4>
	angle += _PI;
 8001080:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001108 <as5048a_init+0xa8>
	return 2 * ((float) angle * (_2PI * _1_16384) - _PI);
 8001084:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001088:	eddf 7a20 	vldr	s15, [pc, #128]	; 800110c <as5048a_init+0xac>
 800108c:	eee7 7a06 	vfma.f32	s15, s14, s12
	angle += _PI;
 8001090:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
	angle = fmod(angle, _2PI);
 8001094:	eee7 6a87 	vfma.f32	s13, s15, s14
 8001098:	ee16 0a90 	vmov	r0, s13
 800109c:	f7ff fa5c 	bl	8000558 <__aeabi_f2d>
 80010a0:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80010f8 <as5048a_init+0x98>
 80010a4:	ec41 0b10 	vmov	d0, r0, r1
 80010a8:	f008 f900 	bl	80092ac <fmod>
 80010ac:	ec51 0b10 	vmov	r0, r1, d0
 80010b0:	f7ff fd82 	bl	8000bb8 <__aeabi_d2f>
 80010b4:	ee07 0a90 	vmov	s15, r0
	if (angle < 0) {
 80010b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		angle += _2PI;
 80010c0:	bf44      	itt	mi
 80010c2:	ed9f 7a13 	vldrmi	s14, [pc, #76]	; 8001110 <as5048a_init+0xb0>
 80010c6:	ee77 7a87 	vaddmi.f32	s15, s15, s14
	angle -= _PI;
 80010ca:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001108 <as5048a_init+0xa8>
 80010ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 * @brief Set the zero position to arbitrary value.
 * Use: When moving the camera by hand, you could make the zero position the same as the current angle
 * @param input angle
 */
void as5048a_setZeroArg(MotorDriver *driver, float arg_pos) {
	driver->zero_pos_map = fmod(arg_pos, _2PI);
 80010d2:	ee17 0a90 	vmov	r0, s15
	driver->angle = as5048a_normalize(angle); //<-- Slows down FOC update
 80010d6:	edc4 7a63 	vstr	s15, [r4, #396]	; 0x18c
	driver->zero_pos_map = fmod(arg_pos, _2PI);
 80010da:	f7ff fa3d 	bl	8000558 <__aeabi_f2d>
 80010de:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80010f8 <as5048a_init+0x98>
 80010e2:	ec41 0b10 	vmov	d0, r0, r1
 80010e6:	f008 f8e1 	bl	80092ac <fmod>
 80010ea:	ec51 0b10 	vmov	r0, r1, d0
 80010ee:	f7ff fd63 	bl	8000bb8 <__aeabi_d2f>
 80010f2:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
}
 80010f6:	bd10      	pop	{r4, pc}
 80010f8:	60000000 	.word	0x60000000
 80010fc:	401921fb 	.word	0x401921fb
 8001100:	40020400 	.word	0x40020400
 8001104:	39c90fdb 	.word	0x39c90fdb
 8001108:	40490fdb 	.word	0x40490fdb
 800110c:	c0490fdb 	.word	0xc0490fdb
 8001110:	40c90fdb 	.word	0x40c90fdb
 8001114:	00000000 	.word	0x00000000

08001118 <as5048a_getAngle>:
void as5048a_getAngle(MotorDriver *driver) {
 8001118:	b510      	push	{r4, lr}
	return as5048a_read(ss, REG_ANGLE);
 800111a:	f643 71ff 	movw	r1, #16383	; 0x3fff
void as5048a_getAngle(MotorDriver *driver) {
 800111e:	4604      	mov	r4, r0
	return as5048a_read(ss, REG_ANGLE);
 8001120:	8800      	ldrh	r0, [r0, #0]
 8001122:	f7ff ff15 	bl	8000f50 <as5048a_read>
	return 2 * ((float) angle * (_2PI * _1_16384) - _PI);
 8001126:	ee07 0a90 	vmov	s15, r0
 800112a:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8001190 <as5048a_getAngle+0x78>
	angle += _PI;
 800112e:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001194 <as5048a_getAngle+0x7c>
	return 2 * ((float) angle * (_2PI * _1_16384) - _PI);
 8001132:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001136:	eddf 7a18 	vldr	s15, [pc, #96]	; 8001198 <as5048a_getAngle+0x80>
 800113a:	eee7 7a06 	vfma.f32	s15, s14, s12
	angle += _PI;
 800113e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
	angle = fmod(angle, _2PI);
 8001142:	eee7 6a87 	vfma.f32	s13, s15, s14
 8001146:	ee16 0a90 	vmov	r0, s13
 800114a:	f7ff fa05 	bl	8000558 <__aeabi_f2d>
 800114e:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8001188 <as5048a_getAngle+0x70>
 8001152:	ec41 0b10 	vmov	d0, r0, r1
 8001156:	f008 f8a9 	bl	80092ac <fmod>
 800115a:	ec51 0b10 	vmov	r0, r1, d0
 800115e:	f7ff fd2b 	bl	8000bb8 <__aeabi_d2f>
 8001162:	ee07 0a90 	vmov	s15, r0
	if (angle < 0) {
 8001166:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		angle += _2PI;
 800116e:	bf44      	itt	mi
 8001170:	ed9f 7a0a 	vldrmi	s14, [pc, #40]	; 800119c <as5048a_getAngle+0x84>
 8001174:	ee77 7a87 	vaddmi.f32	s15, s15, s14
	angle -= _PI;
 8001178:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001194 <as5048a_getAngle+0x7c>
 800117c:	ee77 7ac7 	vsub.f32	s15, s15, s14
	driver->angle = as5048a_normalize(angle); //<-- Slows down FOC update
 8001180:	edc4 7a63 	vstr	s15, [r4, #396]	; 0x18c
}
 8001184:	bd10      	pop	{r4, pc}
 8001186:	bf00      	nop
 8001188:	60000000 	.word	0x60000000
 800118c:	401921fb 	.word	0x401921fb
 8001190:	39c90fdb 	.word	0x39c90fdb
 8001194:	40490fdb 	.word	0x40490fdb
 8001198:	c0490fdb 	.word	0xc0490fdb
 800119c:	40c90fdb 	.word	0x40c90fdb

080011a0 <as5048a_getVelocity>:
}

/**@brief Calculate speed in ˚/s using angular values and input time
 *@param Motor driver containing anglular values
 */
void as5048a_getVelocity(MotorDriver *driver){
 80011a0:	b538      	push	{r3, r4, r5, lr}
 80011a2:	4604      	mov	r4, r0
 80011a4:	ed2d 8b02 	vpush	{d8}

//	as5048a_getAngle(driver);
	uint32_t timestamp_us = get_us();
 80011a8:	f002 fd8c 	bl	8003cc4 <get_us>

	float T_samp = (timestamp_us - driver->prev_timestamp_us) * 1e-6f;
 80011ac:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 80011b0:	ed9f 8a39 	vldr	s16, [pc, #228]	; 8001298 <as5048a_getVelocity+0xf8>
	if(T_samp <= 0 || T_samp > 0.5f) T_samp = 1e-3;

	/* Calculate difference between current and previous angles */
	float angle_diff = fmod(driver->angle - driver->prev_angle + _PI, _2PI) - _PI;
 80011b4:	edd4 8a63 	vldr	s17, [r4, #396]	; 0x18c
	float T_samp = (timestamp_us - driver->prev_timestamp_us) * 1e-6f;
 80011b8:	1ac3      	subs	r3, r0, r3
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eef8 7a67 	vcvt.f32.u32	s15, s15
	uint32_t timestamp_us = get_us();
 80011c2:	4605      	mov	r5, r0
	float T_samp = (timestamp_us - driver->prev_timestamp_us) * 1e-6f;
 80011c4:	ee27 8a88 	vmul.f32	s16, s15, s16
	if(T_samp <= 0 || T_samp > 0.5f) T_samp = 1e-3;
 80011c8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80011cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d0:	d92e      	bls.n	8001230 <as5048a_getVelocity+0x90>
 80011d2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800129c <as5048a_getVelocity+0xfc>
 80011d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011de:	dc27      	bgt.n	8001230 <as5048a_getVelocity+0x90>
	float angle_diff = fmod(driver->angle - driver->prev_angle + _PI, _2PI) - _PI;
 80011e0:	eddf 7a2f 	vldr	s15, [pc, #188]	; 80012a0 <as5048a_getVelocity+0x100>
 80011e4:	ed94 7a64 	vldr	s14, [r4, #400]	; 0x190
 80011e8:	ee78 7aa7 	vadd.f32	s15, s17, s15
 80011ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011f0:	ee17 0a90 	vmov	r0, s15
 80011f4:	f7ff f9b0 	bl	8000558 <__aeabi_f2d>
 80011f8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8001288 <as5048a_getVelocity+0xe8>
 80011fc:	ec41 0b10 	vmov	d0, r0, r1
 8001200:	f008 f854 	bl	80092ac <fmod>
 8001204:	a322      	add	r3, pc, #136	; (adr r3, 8001290 <as5048a_getVelocity+0xf0>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	ec51 0b10 	vmov	r0, r1, d0
 800120e:	f7ff f843 	bl	8000298 <__aeabi_dsub>
 8001212:	f7ff fcd1 	bl	8000bb8 <__aeabi_d2f>

	/* Calculate velocity */
	driver->velocity = angle_diff/T_samp;
 8001216:	ee07 0a90 	vmov	s15, r0
 800121a:	eec7 7a88 	vdiv.f32	s15, s15, s16
	if(T_samp == 0) driver->velocity = 0;

	driver->prev_timestamp_us = timestamp_us;
 800121e:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
	driver->prev_angle = driver->angle;
 8001222:	edc4 8a64 	vstr	s17, [r4, #400]	; 0x190
}
 8001226:	ecbd 8b02 	vpop	{d8}
	driver->velocity = angle_diff/T_samp;
 800122a:	edc4 7a67 	vstr	s15, [r4, #412]	; 0x19c
}
 800122e:	bd38      	pop	{r3, r4, r5, pc}
	float angle_diff = fmod(driver->angle - driver->prev_angle + _PI, _2PI) - _PI;
 8001230:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80012a0 <as5048a_getVelocity+0x100>
 8001234:	ed94 7a64 	vldr	s14, [r4, #400]	; 0x190
 8001238:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800123c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001240:	ee17 0a90 	vmov	r0, s15
 8001244:	f7ff f988 	bl	8000558 <__aeabi_f2d>
 8001248:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8001288 <as5048a_getVelocity+0xe8>
 800124c:	ec41 0b10 	vmov	d0, r0, r1
 8001250:	f008 f82c 	bl	80092ac <fmod>
 8001254:	a30e      	add	r3, pc, #56	; (adr r3, 8001290 <as5048a_getVelocity+0xf0>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	ec51 0b10 	vmov	r0, r1, d0
 800125e:	f7ff f81b 	bl	8000298 <__aeabi_dsub>
 8001262:	f7ff fca9 	bl	8000bb8 <__aeabi_d2f>
	driver->prev_angle = driver->angle;
 8001266:	edc4 8a64 	vstr	s17, [r4, #400]	; 0x190
}
 800126a:	ecbd 8b02 	vpop	{d8}
	driver->velocity = angle_diff/T_samp;
 800126e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80012a4 <as5048a_getVelocity+0x104>
	driver->prev_timestamp_us = timestamp_us;
 8001272:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
	driver->velocity = angle_diff/T_samp;
 8001276:	ee07 0a10 	vmov	s14, r0
 800127a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127e:	edc4 7a67 	vstr	s15, [r4, #412]	; 0x19c
}
 8001282:	bd38      	pop	{r3, r4, r5, pc}
 8001284:	f3af 8000 	nop.w
 8001288:	60000000 	.word	0x60000000
 800128c:	401921fb 	.word	0x401921fb
 8001290:	60000000 	.word	0x60000000
 8001294:	400921fb 	.word	0x400921fb
 8001298:	358637bd 	.word	0x358637bd
 800129c:	48f42400 	.word	0x48f42400
 80012a0:	40490fdb 	.word	0x40490fdb
 80012a4:	4479ffff 	.word	0x4479ffff

080012a8 <bmi270_spi_init>:
uint16_t factor_zx_div = 512; //2^9

/*
 * @brief Initialization sequence for BMI270 as described on p. 20 in datasheet.
 */
void bmi270_spi_init() {
 80012a8:	b570      	push	{r4, r5, r6, lr}
	uint8_t chip_id = 0;

	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
void bmi270_spi_init() {
 80012ac:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80012ae:	4611      	mov	r1, r2
/*
 * @brief Read 8 bits of data from SDO-pin on BMI270.
 * @param Which BMI270-register to perform the read on
 */
uint8_t bmi270_spi_read_8(uint8_t reg) {
	uint8_t dummy = 0x00;
 80012b0:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80012b2:	486a      	ldr	r0, [pc, #424]	; (800145c <bmi270_spi_init+0x1b4>)
 80012b4:	f003 fb10 	bl	80048d8 <HAL_GPIO_WritePin>
	uint8_t data = 0x00;
	uint8_t cmd = reg | 0x80;
 80012b8:	2380      	movs	r3, #128	; 0x80

	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80012ba:	4868      	ldr	r0, [pc, #416]	; (800145c <bmi270_spi_init+0x1b4>)
	uint8_t cmd = reg | 0x80;
 80012bc:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80012c0:	4622      	mov	r2, r4
 80012c2:	2101      	movs	r1, #1
	uint8_t dummy = 0x00;
 80012c4:	f88d 4005 	strb.w	r4, [sp, #5]
	uint8_t data = 0x00;
 80012c8:	f88d 4006 	strb.w	r4, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80012cc:	f003 fb04 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80012d0:	f10d 0107 	add.w	r1, sp, #7
 80012d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012d8:	2201      	movs	r2, #1
 80012da:	4861      	ldr	r0, [pc, #388]	; (8001460 <bmi270_spi_init+0x1b8>)
 80012dc:	f003 fea8 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 80012e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e4:	2201      	movs	r2, #1
 80012e6:	f10d 0105 	add.w	r1, sp, #5
 80012ea:	485d      	ldr	r0, [pc, #372]	; (8001460 <bmi270_spi_init+0x1b8>)
 80012ec:	f004 f94a 	bl	8005584 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 80012f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f4:	f10d 0106 	add.w	r1, sp, #6
 80012f8:	2201      	movs	r2, #1
 80012fa:	4859      	ldr	r0, [pc, #356]	; (8001460 <bmi270_spi_init+0x1b8>)
 80012fc:	f004 f942 	bl	8005584 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	4856      	ldr	r0, [pc, #344]	; (800145c <bmi270_spi_init+0x1b4>)
 8001304:	4611      	mov	r1, r2
 8001306:	f003 fae7 	bl	80048d8 <HAL_GPIO_WritePin>

	return data;
 800130a:	f89d 3006 	ldrb.w	r3, [sp, #6]
	if (chip_id != 0x24) {
 800130e:	2b24      	cmp	r3, #36	; 0x24
 8001310:	d00a      	beq.n	8001328 <bmi270_spi_init+0x80>
void bmi270_print(uint16_t code) {
	if ((uint16_t*) code != NULL) {
		sprintf((char*) buff, "BMI270: %s\r\n", bmi270_codeToStr(code));
	}

	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), 200);
 8001312:	4854      	ldr	r0, [pc, #336]	; (8001464 <bmi270_spi_init+0x1bc>)
 8001314:	f7fe ff64 	bl	80001e0 <strlen>
 8001318:	4952      	ldr	r1, [pc, #328]	; (8001464 <bmi270_spi_init+0x1bc>)
 800131a:	b282      	uxth	r2, r0
 800131c:	23c8      	movs	r3, #200	; 0xc8
 800131e:	4852      	ldr	r0, [pc, #328]	; (8001468 <bmi270_spi_init+0x1c0>)
 8001320:	f004 ffbe 	bl	80062a0 <HAL_UART_Transmit>
}
 8001324:	b002      	add	sp, #8
 8001326:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char*) buff, "BMI270: %s\r\n", bmi270_codeToStr(code));
 8001328:	4a50      	ldr	r2, [pc, #320]	; (800146c <bmi270_spi_init+0x1c4>)
 800132a:	4951      	ldr	r1, [pc, #324]	; (8001470 <bmi270_spi_init+0x1c8>)
 800132c:	484d      	ldr	r0, [pc, #308]	; (8001464 <bmi270_spi_init+0x1bc>)
 800132e:	f005 fd01 	bl	8006d34 <siprintf>
	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), 200);
 8001332:	484c      	ldr	r0, [pc, #304]	; (8001464 <bmi270_spi_init+0x1bc>)
 8001334:	f7fe ff54 	bl	80001e0 <strlen>
 8001338:	494a      	ldr	r1, [pc, #296]	; (8001464 <bmi270_spi_init+0x1bc>)
 800133a:	b282      	uxth	r2, r0
 800133c:	23c8      	movs	r3, #200	; 0xc8
 800133e:	484a      	ldr	r0, [pc, #296]	; (8001468 <bmi270_spi_init+0x1c0>)
 8001340:	f004 ffae 	bl	80062a0 <HAL_UART_Transmit>
	uint8_t cmd = reg | 0x00; //write command
 8001344:	237c      	movs	r3, #124	; 0x7c
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001346:	4845      	ldr	r0, [pc, #276]	; (800145c <bmi270_spi_init+0x1b4>)
	uint8_t cmd = reg | 0x00; //write command
 8001348:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800134c:	4622      	mov	r2, r4
 800134e:	2101      	movs	r1, #1
 8001350:	f88d 4006 	strb.w	r4, [sp, #6]
 8001354:	f003 fac0 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001358:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800135c:	2201      	movs	r2, #1
 800135e:	f10d 0107 	add.w	r1, sp, #7
 8001362:	483f      	ldr	r0, [pc, #252]	; (8001460 <bmi270_spi_init+0x1b8>)
 8001364:	f003 fe64 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800136c:	2201      	movs	r2, #1
 800136e:	f10d 0106 	add.w	r1, sp, #6
 8001372:	483b      	ldr	r0, [pc, #236]	; (8001460 <bmi270_spi_init+0x1b8>)
 8001374:	f003 fe5c 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001378:	2201      	movs	r2, #1
 800137a:	4611      	mov	r1, r2
 800137c:	4837      	ldr	r0, [pc, #220]	; (800145c <bmi270_spi_init+0x1b4>)
 800137e:	f003 faab 	bl	80048d8 <HAL_GPIO_WritePin>
		HAL_Delay(1);								//wait for 450us
 8001382:	2001      	movs	r0, #1
 8001384:	f002 fd22 	bl	8003dcc <HAL_Delay>
	uint8_t cmd = reg | 0x00; //write command
 8001388:	2359      	movs	r3, #89	; 0x59
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800138a:	4834      	ldr	r0, [pc, #208]	; (800145c <bmi270_spi_init+0x1b4>)
	uint8_t cmd = reg | 0x00; //write command
 800138c:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001390:	4622      	mov	r2, r4
 8001392:	2101      	movs	r1, #1
 8001394:	f88d 4006 	strb.w	r4, [sp, #6]
 8001398:	f003 fa9e 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 800139c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a0:	2201      	movs	r2, #1
 80013a2:	f10d 0107 	add.w	r1, sp, #7
 80013a6:	482e      	ldr	r0, [pc, #184]	; (8001460 <bmi270_spi_init+0x1b8>)
 80013a8:	f003 fe42 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 80013ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b0:	2201      	movs	r2, #1
 80013b2:	f10d 0106 	add.w	r1, sp, #6
 80013b6:	482a      	ldr	r0, [pc, #168]	; (8001460 <bmi270_spi_init+0x1b8>)
 80013b8:	f003 fe3a 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	4611      	mov	r1, r2
 80013c0:	4826      	ldr	r0, [pc, #152]	; (800145c <bmi270_spi_init+0x1b4>)
 80013c2:	f003 fa89 	bl	80048d8 <HAL_GPIO_WritePin>
		bmi270_spi_write_burst(REG_INIT_DATA, bmi270_config_file, bmi270_config_size); //burst write to reg INIT_DATA. Start with byte 0.
 80013c6:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <bmi270_spi_init+0x1cc>)
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80013c8:	4824      	ldr	r0, [pc, #144]	; (800145c <bmi270_spi_init+0x1b4>)
		bmi270_spi_write_burst(REG_INIT_DATA, bmi270_config_file, bmi270_config_size); //burst write to reg INIT_DATA. Start with byte 0.
 80013ca:	881d      	ldrh	r5, [r3, #0]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80013cc:	4622      	mov	r2, r4
	uint8_t cmd = reg | 0x00; //write command
 80013ce:	235e      	movs	r3, #94	; 0x5e
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80013d0:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x00; //write command
 80013d2:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80013d6:	f003 fa7f 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80013da:	4821      	ldr	r0, [pc, #132]	; (8001460 <bmi270_spi_init+0x1b8>)
 80013dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e0:	2201      	movs	r2, #1
 80013e2:	f10d 0107 	add.w	r1, sp, #7
 80013e6:	f003 fe23 	bl	8005030 <HAL_SPI_Transmit>
	for (i = 0; i < data_size; i++) {
 80013ea:	b17d      	cbz	r5, 800140c <bmi270_spi_init+0x164>
 80013ec:	4c22      	ldr	r4, [pc, #136]	; (8001478 <bmi270_spi_init+0x1d0>)
		HAL_SPI_Transmit(&hspi1, (uint8_t*) &data[i], 1, 0xFFFF);
 80013ee:	4e1c      	ldr	r6, [pc, #112]	; (8001460 <bmi270_spi_init+0x1b8>)
 80013f0:	3d01      	subs	r5, #1
 80013f2:	1c63      	adds	r3, r4, #1
 80013f4:	fa13 f585 	uxtah	r5, r3, r5
 80013f8:	2201      	movs	r2, #1
 80013fa:	4621      	mov	r1, r4
 80013fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001400:	4414      	add	r4, r2
 8001402:	4630      	mov	r0, r6
 8001404:	f003 fe14 	bl	8005030 <HAL_SPI_Transmit>
	for (i = 0; i < data_size; i++) {
 8001408:	42a5      	cmp	r5, r4
 800140a:	d1f5      	bne.n	80013f8 <bmi270_spi_init+0x150>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 800140c:	2201      	movs	r2, #1
 800140e:	4614      	mov	r4, r2
 8001410:	4611      	mov	r1, r2
 8001412:	4812      	ldr	r0, [pc, #72]	; (800145c <bmi270_spi_init+0x1b4>)
 8001414:	f003 fa60 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001418:	4621      	mov	r1, r4
	uint8_t cmd = reg | 0x00; //write command
 800141a:	2359      	movs	r3, #89	; 0x59
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800141c:	480f      	ldr	r0, [pc, #60]	; (800145c <bmi270_spi_init+0x1b4>)
	uint8_t cmd = reg | 0x00; //write command
 800141e:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	f88d 4006 	strb.w	r4, [sp, #6]
 8001428:	f003 fa56 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 800142c:	f10d 0107 	add.w	r1, sp, #7
 8001430:	4622      	mov	r2, r4
 8001432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001436:	480a      	ldr	r0, [pc, #40]	; (8001460 <bmi270_spi_init+0x1b8>)
 8001438:	f003 fdfa 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 800143c:	f10d 0106 	add.w	r1, sp, #6
 8001440:	4622      	mov	r2, r4
 8001442:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001446:	4806      	ldr	r0, [pc, #24]	; (8001460 <bmi270_spi_init+0x1b8>)
 8001448:	f003 fdf2 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 800144c:	4803      	ldr	r0, [pc, #12]	; (800145c <bmi270_spi_init+0x1b4>)
 800144e:	4622      	mov	r2, r4
 8001450:	4621      	mov	r1, r4
 8001452:	f003 fa41 	bl	80048d8 <HAL_GPIO_WritePin>
}
 8001456:	b002      	add	sp, #8
 8001458:	bd70      	pop	{r4, r5, r6, pc}
 800145a:	bf00      	nop
 800145c:	40020400 	.word	0x40020400
 8001460:	2000e5d8 	.word	0x2000e5d8
 8001464:	2000a29c 	.word	0x2000a29c
 8001468:	2000e678 	.word	0x2000e678
 800146c:	0800aad0 	.word	0x0800aad0
 8001470:	0800aae0 	.word	0x0800aae0
 8001474:	20002000 	.word	0x20002000
 8001478:	20000000 	.word	0x20000000

0800147c <bmi270_spi_init_check>:
void bmi270_spi_init_check() {
 800147c:	b570      	push	{r4, r5, r6, lr}
	sprintf((char*) buff, "BMI270: initialization sequence complete\r\n");
 800147e:	4d38      	ldr	r5, [pc, #224]	; (8001560 <bmi270_spi_init_check+0xe4>)
 8001480:	4c38      	ldr	r4, [pc, #224]	; (8001564 <bmi270_spi_init_check+0xe8>)
 8001482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800148a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800148e:	c403      	stmia	r4!, {r0, r1}
 8001490:	f824 2b02 	strh.w	r2, [r4], #2
 8001494:	4621      	mov	r1, r4
 8001496:	0c12      	lsrs	r2, r2, #16
void bmi270_spi_init_check() {
 8001498:	b082      	sub	sp, #8
	sprintf((char*) buff, "BMI270: initialization sequence complete\r\n");
 800149a:	f801 292a 	strb.w	r2, [r1], #-42
	HAL_UART_Transmit(&huart2, buff, strlen(buff), 200);
 800149e:	23c8      	movs	r3, #200	; 0xc8
 80014a0:	222a      	movs	r2, #42	; 0x2a
 80014a2:	4831      	ldr	r0, [pc, #196]	; (8001568 <bmi270_spi_init_check+0xec>)
 80014a4:	f004 fefc 	bl	80062a0 <HAL_UART_Transmit>
	HAL_Delay(150); //wait >140 ms
 80014a8:	2096      	movs	r0, #150	; 0x96
 80014aa:	f002 fc8f 	bl	8003dcc <HAL_Delay>
	uint8_t dummy = 0x00;
 80014ae:	2200      	movs	r2, #0
	uint8_t cmd = reg | 0x80;
 80014b0:	23a1      	movs	r3, #161	; 0xa1
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80014b2:	482e      	ldr	r0, [pc, #184]	; (800156c <bmi270_spi_init_check+0xf0>)
	uint8_t dummy = 0x00;
 80014b4:	f88d 2005 	strb.w	r2, [sp, #5]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80014b8:	2101      	movs	r1, #1
	uint8_t data = 0x00;
 80014ba:	f88d 2006 	strb.w	r2, [sp, #6]
	uint8_t cmd = reg | 0x80;
 80014be:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80014c2:	f003 fa09 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80014c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ca:	2201      	movs	r2, #1
 80014cc:	f10d 0107 	add.w	r1, sp, #7
 80014d0:	4827      	ldr	r0, [pc, #156]	; (8001570 <bmi270_spi_init_check+0xf4>)
 80014d2:	f003 fdad 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 80014d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014da:	2201      	movs	r2, #1
 80014dc:	f10d 0105 	add.w	r1, sp, #5
 80014e0:	4823      	ldr	r0, [pc, #140]	; (8001570 <bmi270_spi_init_check+0xf4>)
 80014e2:	f004 f84f 	bl	8005584 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 80014e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ea:	2201      	movs	r2, #1
 80014ec:	f10d 0106 	add.w	r1, sp, #6
 80014f0:	481f      	ldr	r0, [pc, #124]	; (8001570 <bmi270_spi_init_check+0xf4>)
 80014f2:	f004 f847 	bl	8005584 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	481c      	ldr	r0, [pc, #112]	; (800156c <bmi270_spi_init_check+0xf0>)
 80014fa:	4611      	mov	r1, r2
 80014fc:	f003 f9ec 	bl	80048d8 <HAL_GPIO_WritePin>
	return data;
 8001500:	f89d 3006 	ldrb.w	r3, [sp, #6]
	init_status &= 0x0F;
 8001504:	f003 030f 	and.w	r3, r3, #15
}

const char* bmi270_codeToStr(uint16_t code) {

	//error codes
	switch (code) {
 8001508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800150c:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
 8001510:	2b07      	cmp	r3, #7
 8001512:	d806      	bhi.n	8001522 <bmi270_spi_init_check+0xa6>
 8001514:	e8df f003 	tbb	[pc, r3]
 8001518:	04211715 	.word	0x04211715
 800151c:	191b1d1f 	.word	0x191b1d1f
	case 0xc001:
		return "REG_INTERNAL_STATUS: init_ok";
	case 0xc002:
		return "REG_INTERNAL_STATUS: init_err";
	case 0xc003:
		return "REG_INTERNAL_STATUS: drv_error";
 8001520:	4e14      	ldr	r6, [pc, #80]	; (8001574 <bmi270_spi_init_check+0xf8>)
		sprintf((char*) buff, "BMI270: %s\r\n", bmi270_codeToStr(code));
 8001522:	4915      	ldr	r1, [pc, #84]	; (8001578 <bmi270_spi_init_check+0xfc>)
 8001524:	480f      	ldr	r0, [pc, #60]	; (8001564 <bmi270_spi_init_check+0xe8>)
 8001526:	4632      	mov	r2, r6
 8001528:	f005 fc04 	bl	8006d34 <siprintf>
	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), 200);
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <bmi270_spi_init_check+0xe8>)
 800152e:	f7fe fe57 	bl	80001e0 <strlen>
 8001532:	490c      	ldr	r1, [pc, #48]	; (8001564 <bmi270_spi_init_check+0xe8>)
 8001534:	b282      	uxth	r2, r0
 8001536:	23c8      	movs	r3, #200	; 0xc8
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <bmi270_spi_init_check+0xec>)
 800153a:	f004 feb1 	bl	80062a0 <HAL_UART_Transmit>
}
 800153e:	b002      	add	sp, #8
 8001540:	bd70      	pop	{r4, r5, r6, pc}
	init_status |= 0xC000;
 8001542:	4e0e      	ldr	r6, [pc, #56]	; (800157c <bmi270_spi_init_check+0x100>)
 8001544:	e7ed      	b.n	8001522 <bmi270_spi_init_check+0xa6>
		return "REG_INTERNAL_STATUS: init_ok";
 8001546:	4e0e      	ldr	r6, [pc, #56]	; (8001580 <bmi270_spi_init_check+0x104>)
 8001548:	e7eb      	b.n	8001522 <bmi270_spi_init_check+0xa6>
	case 0xc005:
		return "REG_INTERNAL_STATUS: nvm_error";
	case 0xc006:
		return "REG_INTERNAL_STATUS: start_up_error";
	case 0xc007:
		return "REG_INTERNAL_STATUS: compat_error";
 800154a:	4e0e      	ldr	r6, [pc, #56]	; (8001584 <bmi270_spi_init_check+0x108>)
 800154c:	e7e9      	b.n	8001522 <bmi270_spi_init_check+0xa6>
		return "REG_INTERNAL_STATUS: start_up_error";
 800154e:	4e0e      	ldr	r6, [pc, #56]	; (8001588 <bmi270_spi_init_check+0x10c>)
 8001550:	e7e7      	b.n	8001522 <bmi270_spi_init_check+0xa6>
		return "REG_INTERNAL_STATUS: nvm_error";
 8001552:	4e0e      	ldr	r6, [pc, #56]	; (800158c <bmi270_spi_init_check+0x110>)
 8001554:	e7e5      	b.n	8001522 <bmi270_spi_init_check+0xa6>
		return "REG_INTERNAL_STATUS: sns_stop";
 8001556:	4e0e      	ldr	r6, [pc, #56]	; (8001590 <bmi270_spi_init_check+0x114>)
 8001558:	e7e3      	b.n	8001522 <bmi270_spi_init_check+0xa6>
		return "REG_INTERNAL_STATUS: init_err";
 800155a:	4e0e      	ldr	r6, [pc, #56]	; (8001594 <bmi270_spi_init_check+0x118>)
 800155c:	e7e1      	b.n	8001522 <bmi270_spi_init_check+0xa6>
 800155e:	bf00      	nop
 8001560:	0800abf8 	.word	0x0800abf8
 8001564:	2000a29c 	.word	0x2000a29c
 8001568:	2000e678 	.word	0x2000e678
 800156c:	40020400 	.word	0x40020400
 8001570:	2000e5d8 	.word	0x2000e5d8
 8001574:	0800ab10 	.word	0x0800ab10
 8001578:	0800aae0 	.word	0x0800aae0
 800157c:	0800abd8 	.word	0x0800abd8
 8001580:	0800ab50 	.word	0x0800ab50
 8001584:	0800ab70 	.word	0x0800ab70
 8001588:	0800ab94 	.word	0x0800ab94
 800158c:	0800abb8 	.word	0x0800abb8
 8001590:	0800aaf0 	.word	0x0800aaf0
 8001594:	0800ab30 	.word	0x0800ab30

08001598 <bmi270_pwr_conf>:
void bmi270_pwr_conf(uint8_t pwr_mode) {
 8001598:	b530      	push	{r4, r5, lr}
	if (pwr_mode == BMI270_PWR_MODE_LOW) {
 800159a:	4604      	mov	r4, r0
void bmi270_pwr_conf(uint8_t pwr_mode) {
 800159c:	b083      	sub	sp, #12
	if (pwr_mode == BMI270_PWR_MODE_LOW) {
 800159e:	b130      	cbz	r0, 80015ae <bmi270_pwr_conf+0x16>
	} else if (pwr_mode == BMI270_PWR_MODE_NORM) {
 80015a0:	2801      	cmp	r0, #1
 80015a2:	f000 80c9 	beq.w	8001738 <bmi270_pwr_conf+0x1a0>
	} else if (pwr_mode == BMI270_PWR_MODE_PERF) {
 80015a6:	2802      	cmp	r0, #2
 80015a8:	d063      	beq.n	8001672 <bmi270_pwr_conf+0xda>
}
 80015aa:	b003      	add	sp, #12
 80015ac:	bd30      	pop	{r4, r5, pc}
	uint8_t cmd = reg | 0x00; //write command
 80015ae:	237d      	movs	r3, #125	; 0x7d
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80015b0:	4602      	mov	r2, r0
 80015b2:	2504      	movs	r5, #4
 80015b4:	4894      	ldr	r0, [pc, #592]	; (8001808 <bmi270_pwr_conf+0x270>)
 80015b6:	f88d 5006 	strb.w	r5, [sp, #6]
 80015ba:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x00; //write command
 80015bc:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80015c0:	f003 f98a 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80015c4:	f10d 0107 	add.w	r1, sp, #7
 80015c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015cc:	2201      	movs	r2, #1
 80015ce:	488f      	ldr	r0, [pc, #572]	; (800180c <bmi270_pwr_conf+0x274>)
 80015d0:	f003 fd2e 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 80015d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015d8:	f10d 0106 	add.w	r1, sp, #6
 80015dc:	2201      	movs	r2, #1
 80015de:	488b      	ldr	r0, [pc, #556]	; (800180c <bmi270_pwr_conf+0x274>)
 80015e0:	f003 fd26 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	4611      	mov	r1, r2
 80015e8:	4887      	ldr	r0, [pc, #540]	; (8001808 <bmi270_pwr_conf+0x270>)
 80015ea:	f003 f975 	bl	80048d8 <HAL_GPIO_WritePin>
		bmi270_spi_write_8(REG_ACC_CONF, 0x17); //disable the acc_filter_perf bit; set acc_bwp to 2 repetitions; set acc_odr to 50 Hz
 80015ee:	2517      	movs	r5, #23
	uint8_t cmd = reg | 0x00; //write command
 80015f0:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80015f2:	4622      	mov	r2, r4
 80015f4:	4884      	ldr	r0, [pc, #528]	; (8001808 <bmi270_pwr_conf+0x270>)
	uint8_t cmd = reg | 0x00; //write command
 80015f6:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80015fa:	2101      	movs	r1, #1
 80015fc:	f88d 5006 	strb.w	r5, [sp, #6]
 8001600:	f003 f96a 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001604:	f10d 0107 	add.w	r1, sp, #7
 8001608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800160c:	2201      	movs	r2, #1
 800160e:	487f      	ldr	r0, [pc, #508]	; (800180c <bmi270_pwr_conf+0x274>)
 8001610:	f003 fd0e 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001614:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001618:	f10d 0106 	add.w	r1, sp, #6
 800161c:	2201      	movs	r2, #1
 800161e:	487b      	ldr	r0, [pc, #492]	; (800180c <bmi270_pwr_conf+0x274>)
 8001620:	f003 fd06 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	4611      	mov	r1, r2
 8001628:	4877      	ldr	r0, [pc, #476]	; (8001808 <bmi270_pwr_conf+0x270>)
 800162a:	f003 f955 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800162e:	4622      	mov	r2, r4
	uint8_t cmd = reg | 0x00; //write command
 8001630:	237c      	movs	r3, #124	; 0x7c
 8001632:	2403      	movs	r4, #3
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001634:	4874      	ldr	r0, [pc, #464]	; (8001808 <bmi270_pwr_conf+0x270>)
 8001636:	f88d 4006 	strb.w	r4, [sp, #6]
 800163a:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x00; //write command
 800163c:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001640:	f003 f94a 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001644:	f10d 0107 	add.w	r1, sp, #7
 8001648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800164c:	2201      	movs	r2, #1
 800164e:	486f      	ldr	r0, [pc, #444]	; (800180c <bmi270_pwr_conf+0x274>)
 8001650:	f003 fcee 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001654:	f10d 0106 	add.w	r1, sp, #6
 8001658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800165c:	2201      	movs	r2, #1
 800165e:	486b      	ldr	r0, [pc, #428]	; (800180c <bmi270_pwr_conf+0x274>)
 8001660:	f003 fce6 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001664:	2201      	movs	r2, #1
 8001666:	4868      	ldr	r0, [pc, #416]	; (8001808 <bmi270_pwr_conf+0x270>)
 8001668:	4611      	mov	r1, r2
 800166a:	f003 f935 	bl	80048d8 <HAL_GPIO_WritePin>
}
 800166e:	b003      	add	sp, #12
 8001670:	bd30      	pop	{r4, r5, pc}
	uint8_t cmd = reg | 0x00; //write command
 8001672:	237d      	movs	r3, #125	; 0x7d
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001674:	4864      	ldr	r0, [pc, #400]	; (8001808 <bmi270_pwr_conf+0x270>)
	uint8_t cmd = reg | 0x00; //write command
 8001676:	f88d 3007 	strb.w	r3, [sp, #7]
 800167a:	250e      	movs	r5, #14
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	2101      	movs	r1, #1
 8001680:	f88d 5006 	strb.w	r5, [sp, #6]
 8001684:	f003 f928 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001688:	f10d 0107 	add.w	r1, sp, #7
 800168c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001690:	2201      	movs	r2, #1
 8001692:	485e      	ldr	r0, [pc, #376]	; (800180c <bmi270_pwr_conf+0x274>)
 8001694:	f003 fccc 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800169c:	f10d 0106 	add.w	r1, sp, #6
 80016a0:	2201      	movs	r2, #1
 80016a2:	485a      	ldr	r0, [pc, #360]	; (800180c <bmi270_pwr_conf+0x274>)
 80016a4:	f003 fcc4 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80016a8:	2201      	movs	r2, #1
 80016aa:	4611      	mov	r1, r2
 80016ac:	4856      	ldr	r0, [pc, #344]	; (8001808 <bmi270_pwr_conf+0x270>)
 80016ae:	f003 f913 	bl	80048d8 <HAL_GPIO_WritePin>
		bmi270_spi_write_8(REG_ACC_CONF, 0xA8); //enable the acc_filter_perf bit; set acc_bwp to normal mode; set acc_odr to 100 Hz
 80016b2:	25a8      	movs	r5, #168	; 0xa8
	uint8_t cmd = reg | 0x00; //write command
 80016b4:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80016b6:	4854      	ldr	r0, [pc, #336]	; (8001808 <bmi270_pwr_conf+0x270>)
 80016b8:	f88d 5006 	strb.w	r5, [sp, #6]
 80016bc:	2200      	movs	r2, #0
 80016be:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x00; //write command
 80016c0:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80016c4:	f003 f908 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80016c8:	f10d 0107 	add.w	r1, sp, #7
 80016cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016d0:	2201      	movs	r2, #1
 80016d2:	484e      	ldr	r0, [pc, #312]	; (800180c <bmi270_pwr_conf+0x274>)
 80016d4:	f003 fcac 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 80016d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016dc:	f10d 0106 	add.w	r1, sp, #6
 80016e0:	2201      	movs	r2, #1
 80016e2:	484a      	ldr	r0, [pc, #296]	; (800180c <bmi270_pwr_conf+0x274>)
 80016e4:	f003 fca4 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	4611      	mov	r1, r2
 80016ec:	4846      	ldr	r0, [pc, #280]	; (8001808 <bmi270_pwr_conf+0x270>)
 80016ee:	f003 f8f3 	bl	80048d8 <HAL_GPIO_WritePin>
		bmi270_spi_write_8(REG_GYR_CONF, 0xE9); //enable the gyr_filter_perf bit; enable gyr_noise_perf bit; set gyr_bwp to normal mode; set gyr_odr to 200 Hz
 80016f2:	25e9      	movs	r5, #233	; 0xe9
	uint8_t cmd = reg | 0x00; //write command
 80016f4:	2342      	movs	r3, #66	; 0x42
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80016f6:	4844      	ldr	r0, [pc, #272]	; (8001808 <bmi270_pwr_conf+0x270>)
	uint8_t cmd = reg | 0x00; //write command
 80016f8:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2101      	movs	r1, #1
 8001700:	f88d 5006 	strb.w	r5, [sp, #6]
 8001704:	f003 f8e8 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001708:	f10d 0107 	add.w	r1, sp, #7
 800170c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001710:	2201      	movs	r2, #1
 8001712:	483e      	ldr	r0, [pc, #248]	; (800180c <bmi270_pwr_conf+0x274>)
 8001714:	f003 fc8c 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800171c:	f10d 0106 	add.w	r1, sp, #6
 8001720:	2201      	movs	r2, #1
 8001722:	483a      	ldr	r0, [pc, #232]	; (800180c <bmi270_pwr_conf+0x274>)
 8001724:	f003 fc84 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001728:	2201      	movs	r2, #1
 800172a:	4611      	mov	r1, r2
 800172c:	4836      	ldr	r0, [pc, #216]	; (8001808 <bmi270_pwr_conf+0x270>)
 800172e:	f003 f8d3 	bl	80048d8 <HAL_GPIO_WritePin>
	uint8_t cmd = reg | 0x00; //write command
 8001732:	237c      	movs	r3, #124	; 0x7c
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	e77d      	b.n	8001634 <bmi270_pwr_conf+0x9c>
	uint8_t cmd = reg | 0x00; //write command
 8001738:	237d      	movs	r3, #125	; 0x7d
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800173a:	4601      	mov	r1, r0
 800173c:	250e      	movs	r5, #14
 800173e:	4832      	ldr	r0, [pc, #200]	; (8001808 <bmi270_pwr_conf+0x270>)
 8001740:	f88d 5006 	strb.w	r5, [sp, #6]
 8001744:	2200      	movs	r2, #0
	uint8_t cmd = reg | 0x00; //write command
 8001746:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800174a:	f003 f8c5 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 800174e:	f10d 0107 	add.w	r1, sp, #7
 8001752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001756:	4622      	mov	r2, r4
 8001758:	482c      	ldr	r0, [pc, #176]	; (800180c <bmi270_pwr_conf+0x274>)
 800175a:	f003 fc69 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 800175e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001762:	f10d 0106 	add.w	r1, sp, #6
 8001766:	4622      	mov	r2, r4
 8001768:	4828      	ldr	r0, [pc, #160]	; (800180c <bmi270_pwr_conf+0x274>)
 800176a:	f003 fc61 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 800176e:	4826      	ldr	r0, [pc, #152]	; (8001808 <bmi270_pwr_conf+0x270>)
 8001770:	4622      	mov	r2, r4
 8001772:	4621      	mov	r1, r4
 8001774:	f003 f8b0 	bl	80048d8 <HAL_GPIO_WritePin>
		bmi270_spi_write_8(REG_ACC_CONF, 0xA8); //enable the acc_filter_perf bit; set acc_bwp to normal mode; set acc_odr to 100 Hz
 8001778:	25a8      	movs	r5, #168	; 0xa8
	uint8_t cmd = reg | 0x00; //write command
 800177a:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800177c:	4822      	ldr	r0, [pc, #136]	; (8001808 <bmi270_pwr_conf+0x270>)
 800177e:	f88d 5006 	strb.w	r5, [sp, #6]
 8001782:	2200      	movs	r2, #0
 8001784:	4621      	mov	r1, r4
	uint8_t cmd = reg | 0x00; //write command
 8001786:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800178a:	f003 f8a5 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 800178e:	f10d 0107 	add.w	r1, sp, #7
 8001792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001796:	4622      	mov	r2, r4
 8001798:	481c      	ldr	r0, [pc, #112]	; (800180c <bmi270_pwr_conf+0x274>)
 800179a:	f003 fc49 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 800179e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a2:	f10d 0106 	add.w	r1, sp, #6
 80017a6:	4622      	mov	r2, r4
 80017a8:	4818      	ldr	r0, [pc, #96]	; (800180c <bmi270_pwr_conf+0x274>)
 80017aa:	f003 fc41 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80017ae:	4816      	ldr	r0, [pc, #88]	; (8001808 <bmi270_pwr_conf+0x270>)
 80017b0:	4622      	mov	r2, r4
 80017b2:	4621      	mov	r1, r4
 80017b4:	f003 f890 	bl	80048d8 <HAL_GPIO_WritePin>
		bmi270_spi_write_8(REG_GYR_CONF, 0xA9); //enable the gyr_filter_perf bit; set gyr_bwp to normal mode; set gyr_odr to 200 Hz
 80017b8:	25a9      	movs	r5, #169	; 0xa9
	uint8_t cmd = reg | 0x00; //write command
 80017ba:	2342      	movs	r3, #66	; 0x42
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80017bc:	4812      	ldr	r0, [pc, #72]	; (8001808 <bmi270_pwr_conf+0x270>)
 80017be:	f88d 5006 	strb.w	r5, [sp, #6]
 80017c2:	2200      	movs	r2, #0
 80017c4:	4621      	mov	r1, r4
	uint8_t cmd = reg | 0x00; //write command
 80017c6:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80017ca:	f003 f885 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80017ce:	f10d 0107 	add.w	r1, sp, #7
 80017d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d6:	4622      	mov	r2, r4
 80017d8:	480c      	ldr	r0, [pc, #48]	; (800180c <bmi270_pwr_conf+0x274>)
 80017da:	f003 fc29 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 80017de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017e2:	f10d 0106 	add.w	r1, sp, #6
 80017e6:	4622      	mov	r2, r4
 80017e8:	4808      	ldr	r0, [pc, #32]	; (800180c <bmi270_pwr_conf+0x274>)
 80017ea:	f003 fc21 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80017ee:	2502      	movs	r5, #2
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <bmi270_pwr_conf+0x270>)
 80017f2:	4622      	mov	r2, r4
 80017f4:	4621      	mov	r1, r4
 80017f6:	f003 f86f 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80017fa:	4803      	ldr	r0, [pc, #12]	; (8001808 <bmi270_pwr_conf+0x270>)
 80017fc:	f88d 5006 	strb.w	r5, [sp, #6]
	uint8_t cmd = reg | 0x00; //write command
 8001800:	237c      	movs	r3, #124	; 0x7c
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	4621      	mov	r1, r4
 8001806:	e719      	b.n	800163c <bmi270_pwr_conf+0xa4>
 8001808:	40020400 	.word	0x40020400
 800180c:	2000e5d8 	.word	0x2000e5d8

08001810 <bmi270_read_gyro>:
uint16_t bmi270_read_gyro(uint8_t axis){
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t reg = 2 * axis + REG_DATA_14;
 8001812:	f100 0409 	add.w	r4, r0, #9
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001816:	4f31      	ldr	r7, [pc, #196]	; (80018dc <bmi270_read_gyro+0xcc>)
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001818:	4d31      	ldr	r5, [pc, #196]	; (80018e0 <bmi270_read_gyro+0xd0>)
	uint8_t reg = 2 * axis + REG_DATA_14;
 800181a:	0064      	lsls	r4, r4, #1
uint16_t bmi270_read_gyro(uint8_t axis){
 800181c:	b083      	sub	sp, #12
	uint8_t dummy = 0x00;
 800181e:	2600      	movs	r6, #0
	uint8_t reg = 2 * axis + REG_DATA_14;
 8001820:	b2e4      	uxtb	r4, r4
	uint8_t cmd = reg | 0x80;
 8001822:	f064 037f 	orn	r3, r4, #127	; 0x7f
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001826:	4638      	mov	r0, r7
 8001828:	4632      	mov	r2, r6
 800182a:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x80;
 800182c:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t dummy = 0x00;
 8001830:	f88d 6005 	strb.w	r6, [sp, #5]
	uint8_t data = 0x00;
 8001834:	f88d 6006 	strb.w	r6, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001838:	f003 f84e 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 800183c:	f10d 0107 	add.w	r1, sp, #7
 8001840:	4628      	mov	r0, r5
 8001842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001846:	2201      	movs	r2, #1
 8001848:	f003 fbf2 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 800184c:	f10d 0105 	add.w	r1, sp, #5
 8001850:	4628      	mov	r0, r5
 8001852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001856:	2201      	movs	r2, #1
 8001858:	f003 fe94 	bl	8005584 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 800185c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001860:	f10d 0106 	add.w	r1, sp, #6
 8001864:	4628      	mov	r0, r5
 8001866:	2201      	movs	r2, #1
 8001868:	f003 fe8c 	bl	8005584 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 800186c:	2201      	movs	r2, #1
 800186e:	4638      	mov	r0, r7
 8001870:	4611      	mov	r1, r2
	data |= bmi270_spi_read_8(reg + 1)<<8;
 8001872:	3401      	adds	r4, #1
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001874:	f003 f830 	bl	80048d8 <HAL_GPIO_WritePin>
	uint8_t cmd = reg | 0x80;
 8001878:	f064 047f 	orn	r4, r4, #127	; 0x7f
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800187c:	4632      	mov	r2, r6
 800187e:	4638      	mov	r0, r7
 8001880:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x80;
 8001882:	f88d 4007 	strb.w	r4, [sp, #7]
	uint8_t dummy = 0x00;
 8001886:	f88d 6005 	strb.w	r6, [sp, #5]
	return data;
 800188a:	f89d 4006 	ldrb.w	r4, [sp, #6]
	uint8_t data = 0x00;
 800188e:	f88d 6006 	strb.w	r6, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001892:	f003 f821 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001896:	f10d 0107 	add.w	r1, sp, #7
 800189a:	4628      	mov	r0, r5
 800189c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a0:	2201      	movs	r2, #1
 80018a2:	f003 fbc5 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 80018a6:	f10d 0105 	add.w	r1, sp, #5
 80018aa:	4628      	mov	r0, r5
 80018ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b0:	2201      	movs	r2, #1
 80018b2:	f003 fe67 	bl	8005584 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 80018b6:	f10d 0106 	add.w	r1, sp, #6
 80018ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018be:	4628      	mov	r0, r5
 80018c0:	2201      	movs	r2, #1
 80018c2:	f003 fe5f 	bl	8005584 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80018c6:	2201      	movs	r2, #1
 80018c8:	4638      	mov	r0, r7
 80018ca:	4611      	mov	r1, r2
 80018cc:	f003 f804 	bl	80048d8 <HAL_GPIO_WritePin>
	return data;
 80018d0:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 80018d4:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
 80018d8:	b003      	add	sp, #12
 80018da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018dc:	40020400 	.word	0x40020400
 80018e0:	2000e5d8 	.word	0x2000e5d8

080018e4 <bmi270_read_accel>:
uint16_t bmi270_read_accel(uint8_t axis){
 80018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t reg = 2 * axis + REG_DATA_8;
 80018e6:	1d84      	adds	r4, r0, #6
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80018e8:	4f31      	ldr	r7, [pc, #196]	; (80019b0 <bmi270_read_accel+0xcc>)
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80018ea:	4d32      	ldr	r5, [pc, #200]	; (80019b4 <bmi270_read_accel+0xd0>)
	uint8_t reg = 2 * axis + REG_DATA_8;
 80018ec:	0064      	lsls	r4, r4, #1
uint16_t bmi270_read_accel(uint8_t axis){
 80018ee:	b083      	sub	sp, #12
	uint8_t dummy = 0x00;
 80018f0:	2600      	movs	r6, #0
	uint8_t reg = 2 * axis + REG_DATA_8;
 80018f2:	b2e4      	uxtb	r4, r4
	uint8_t cmd = reg | 0x80;
 80018f4:	f064 037f 	orn	r3, r4, #127	; 0x7f
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80018f8:	4638      	mov	r0, r7
 80018fa:	4632      	mov	r2, r6
 80018fc:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x80;
 80018fe:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t dummy = 0x00;
 8001902:	f88d 6005 	strb.w	r6, [sp, #5]
	uint8_t data = 0x00;
 8001906:	f88d 6006 	strb.w	r6, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800190a:	f002 ffe5 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 800190e:	f10d 0107 	add.w	r1, sp, #7
 8001912:	4628      	mov	r0, r5
 8001914:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001918:	2201      	movs	r2, #1
 800191a:	f003 fb89 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 800191e:	f10d 0105 	add.w	r1, sp, #5
 8001922:	4628      	mov	r0, r5
 8001924:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001928:	2201      	movs	r2, #1
 800192a:	f003 fe2b 	bl	8005584 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 800192e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001932:	f10d 0106 	add.w	r1, sp, #6
 8001936:	4628      	mov	r0, r5
 8001938:	2201      	movs	r2, #1
 800193a:	f003 fe23 	bl	8005584 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 800193e:	2201      	movs	r2, #1
 8001940:	4638      	mov	r0, r7
 8001942:	4611      	mov	r1, r2
	data |= (bmi270_spi_read_8(reg + 1)<<8);
 8001944:	3401      	adds	r4, #1
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001946:	f002 ffc7 	bl	80048d8 <HAL_GPIO_WritePin>
	uint8_t cmd = reg | 0x80;
 800194a:	f064 047f 	orn	r4, r4, #127	; 0x7f
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 800194e:	4632      	mov	r2, r6
 8001950:	4638      	mov	r0, r7
 8001952:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x80;
 8001954:	f88d 4007 	strb.w	r4, [sp, #7]
	uint8_t dummy = 0x00;
 8001958:	f88d 6005 	strb.w	r6, [sp, #5]
	return data;
 800195c:	f89d 4006 	ldrb.w	r4, [sp, #6]
	uint8_t data = 0x00;
 8001960:	f88d 6006 	strb.w	r6, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001964:	f002 ffb8 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001968:	f10d 0107 	add.w	r1, sp, #7
 800196c:	4628      	mov	r0, r5
 800196e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001972:	2201      	movs	r2, #1
 8001974:	f003 fb5c 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 8001978:	f10d 0105 	add.w	r1, sp, #5
 800197c:	4628      	mov	r0, r5
 800197e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001982:	2201      	movs	r2, #1
 8001984:	f003 fdfe 	bl	8005584 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001988:	f10d 0106 	add.w	r1, sp, #6
 800198c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001990:	4628      	mov	r0, r5
 8001992:	2201      	movs	r2, #1
 8001994:	f003 fdf6 	bl	8005584 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001998:	2201      	movs	r2, #1
 800199a:	4638      	mov	r0, r7
 800199c:	4611      	mov	r1, r2
 800199e:	f002 ff9b 	bl	80048d8 <HAL_GPIO_WritePin>
	return data;
 80019a2:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
 80019a6:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
 80019aa:	b003      	add	sp, #12
 80019ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40020400 	.word	0x40020400
 80019b4:	2000e5d8 	.word	0x2000e5d8

080019b8 <bmi270_spi_write_8>:
void bmi270_spi_write_8(uint8_t reg, uint8_t data) {
 80019b8:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80019ba:	4c12      	ldr	r4, [pc, #72]	; (8001a04 <bmi270_spi_write_8+0x4c>)
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80019bc:	4d12      	ldr	r5, [pc, #72]	; (8001a08 <bmi270_spi_write_8+0x50>)
void bmi270_spi_write_8(uint8_t reg, uint8_t data) {
 80019be:	b084      	sub	sp, #16
 80019c0:	460b      	mov	r3, r1
 80019c2:	4606      	mov	r6, r0
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	4620      	mov	r0, r4
 80019c8:	2101      	movs	r1, #1
void bmi270_spi_write_8(uint8_t reg, uint8_t data) {
 80019ca:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t cmd = reg | 0x00; //write command
 80019ce:	f88d 600f 	strb.w	r6, [sp, #15]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80019d2:	f002 ff81 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80019d6:	f10d 010f 	add.w	r1, sp, #15
 80019da:	4628      	mov	r0, r5
 80019dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019e0:	2201      	movs	r2, #1
 80019e2:	f003 fb25 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 80019e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ea:	f10d 0107 	add.w	r1, sp, #7
 80019ee:	4628      	mov	r0, r5
 80019f0:	2201      	movs	r2, #1
 80019f2:	f003 fb1d 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	4620      	mov	r0, r4
 80019fa:	4611      	mov	r1, r2
 80019fc:	f002 ff6c 	bl	80048d8 <HAL_GPIO_WritePin>
}
 8001a00:	b004      	add	sp, #16
 8001a02:	bd70      	pop	{r4, r5, r6, pc}
 8001a04:	40020400 	.word	0x40020400
 8001a08:	2000e5d8 	.word	0x2000e5d8

08001a0c <bmi270_getGyroConf>:
void bmi270_getGyroConf(IMU *Imu){
 8001a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001a0e:	4f22      	ldr	r7, [pc, #136]	; (8001a98 <bmi270_getGyroConf+0x8c>)
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001a10:	4e22      	ldr	r6, [pc, #136]	; (8001a9c <bmi270_getGyroConf+0x90>)
void bmi270_getGyroConf(IMU *Imu){
 8001a12:	b083      	sub	sp, #12
	uint8_t dummy = 0x00;
 8001a14:	2400      	movs	r4, #0
void bmi270_getGyroConf(IMU *Imu){
 8001a16:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001a18:	4622      	mov	r2, r4
 8001a1a:	4638      	mov	r0, r7
	uint8_t cmd = reg | 0x80;
 8001a1c:	23c2      	movs	r3, #194	; 0xc2
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001a1e:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x80;
 8001a20:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t dummy = 0x00;
 8001a24:	f88d 4005 	strb.w	r4, [sp, #5]
	uint8_t data = 0x00;
 8001a28:	f88d 4006 	strb.w	r4, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001a2c:	f002 ff54 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001a30:	f10d 0107 	add.w	r1, sp, #7
 8001a34:	4630      	mov	r0, r6
 8001a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f003 faf8 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 8001a40:	f10d 0105 	add.w	r1, sp, #5
 8001a44:	4630      	mov	r0, r6
 8001a46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f003 fd9a 	bl	8005584 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a54:	f10d 0106 	add.w	r1, sp, #6
 8001a58:	4630      	mov	r0, r6
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f003 fd92 	bl	8005584 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001a60:	2201      	movs	r2, #1
 8001a62:	4611      	mov	r1, r2
 8001a64:	4638      	mov	r0, r7
 8001a66:	f002 ff37 	bl	80048d8 <HAL_GPIO_WritePin>
	return data;
 8001a6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
	Imu->gyr_odr = read_data&0x0F;
 8001a6e:	4622      	mov	r2, r4
 8001a70:	f003 010f 	and.w	r1, r3, #15
 8001a74:	f361 0207 	bfi	r2, r1, #0, #8
	Imu->gyr_bwp = read_data&0x30;
 8001a78:	f003 0130 	and.w	r1, r3, #48	; 0x30
	Imu->gyr_odr = read_data&0x0F;
 8001a7c:	f361 220f 	bfi	r2, r1, #8, #8
	Imu->gyr_noise_perf = read_data&0x40;
 8001a80:	f003 0140 	and.w	r1, r3, #64	; 0x40
	Imu->gyr_odr = read_data&0x0F;
 8001a84:	f361 4217 	bfi	r2, r1, #16, #8
	Imu->gyr_filter_perf = read_data&0x80;
 8001a88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	Imu->gyr_odr = read_data&0x0F;
 8001a8c:	f363 621f 	bfi	r2, r3, #24, #8
 8001a90:	f8c5 206a 	str.w	r2, [r5, #106]	; 0x6a
}
 8001a94:	b003      	add	sp, #12
 8001a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	2000e5d8 	.word	0x2000e5d8

08001aa0 <bmi270_setGyroConf>:
void bmi270_setGyroConf(IMU *Imu){
 8001aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001aa2:	4c43      	ldr	r4, [pc, #268]	; (8001bb0 <bmi270_setGyroConf+0x110>)
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001aa4:	4d43      	ldr	r5, [pc, #268]	; (8001bb4 <bmi270_setGyroConf+0x114>)
 8001aa6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
void bmi270_setGyroConf(IMU *Imu){
 8001aaa:	b083      	sub	sp, #12
 8001aac:	4606      	mov	r6, r0
	uint8_t cmd = reg | 0x00; //write command
 8001aae:	2742      	movs	r7, #66	; 0x42
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t cmd = reg | 0x00; //write command
 8001aba:	f88d 7007 	strb.w	r7, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001abe:	f002 ff0b 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001ac2:	f10d 0107 	add.w	r1, sp, #7
 8001ac6:	4628      	mov	r0, r5
 8001ac8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001acc:	2201      	movs	r2, #1
 8001ace:	f003 faaf 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001ad2:	f10d 0106 	add.w	r1, sp, #6
 8001ad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ada:	4628      	mov	r0, r5
 8001adc:	2201      	movs	r2, #1
 8001ade:	f003 faa7 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	f002 fef6 	bl	80048d8 <HAL_GPIO_WritePin>
	bmi270_spi_write_8(REG_GYR_CONF, Imu->gyr_bwp);
 8001aec:	f896 306b 	ldrb.w	r3, [r6, #107]	; 0x6b
 8001af0:	f88d 3006 	strb.w	r3, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001af4:	4620      	mov	r0, r4
 8001af6:	2200      	movs	r2, #0
 8001af8:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x00; //write command
 8001afa:	f88d 7007 	strb.w	r7, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001afe:	f002 feeb 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001b02:	f10d 0107 	add.w	r1, sp, #7
 8001b06:	4628      	mov	r0, r5
 8001b08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f003 fa8f 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001b12:	f10d 0106 	add.w	r1, sp, #6
 8001b16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b1a:	4628      	mov	r0, r5
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f003 fa87 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001b22:	2201      	movs	r2, #1
 8001b24:	4620      	mov	r0, r4
 8001b26:	4611      	mov	r1, r2
 8001b28:	f002 fed6 	bl	80048d8 <HAL_GPIO_WritePin>
	bmi270_spi_write_8(REG_GYR_CONF, Imu->gyr_noise_perf);
 8001b2c:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
 8001b30:	f88d 3006 	strb.w	r3, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001b34:	4620      	mov	r0, r4
 8001b36:	2200      	movs	r2, #0
 8001b38:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x00; //write command
 8001b3a:	f88d 7007 	strb.w	r7, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001b3e:	f002 fecb 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001b42:	f10d 0107 	add.w	r1, sp, #7
 8001b46:	4628      	mov	r0, r5
 8001b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f003 fa6f 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001b52:	f10d 0106 	add.w	r1, sp, #6
 8001b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b5a:	4628      	mov	r0, r5
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f003 fa67 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001b62:	2201      	movs	r2, #1
 8001b64:	4620      	mov	r0, r4
 8001b66:	4611      	mov	r1, r2
 8001b68:	f002 feb6 	bl	80048d8 <HAL_GPIO_WritePin>
	bmi270_spi_write_8(REG_GYR_CONF, Imu->gyr_filter_perf);
 8001b6c:	f896 306d 	ldrb.w	r3, [r6, #109]	; 0x6d
 8001b70:	f88d 3006 	strb.w	r3, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001b74:	4620      	mov	r0, r4
 8001b76:	2200      	movs	r2, #0
 8001b78:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x00; //write command
 8001b7a:	f88d 7007 	strb.w	r7, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001b7e:	f002 feab 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001b82:	f10d 0107 	add.w	r1, sp, #7
 8001b86:	4628      	mov	r0, r5
 8001b88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f003 fa4f 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001b92:	f10d 0106 	add.w	r1, sp, #6
 8001b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f003 fa47 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	f002 fe96 	bl	80048d8 <HAL_GPIO_WritePin>
}
 8001bac:	b003      	add	sp, #12
 8001bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bb0:	40020400 	.word	0x40020400
 8001bb4:	2000e5d8 	.word	0x2000e5d8

08001bb8 <bmi270_getAccConf>:
void bmi270_getAccConf(IMU *Imu){
 8001bb8:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001bba:	4e1e      	ldr	r6, [pc, #120]	; (8001c34 <bmi270_getAccConf+0x7c>)
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001bbc:	4d1e      	ldr	r5, [pc, #120]	; (8001c38 <bmi270_getAccConf+0x80>)
void bmi270_getAccConf(IMU *Imu){
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	4604      	mov	r4, r0
	uint8_t dummy = 0x00;
 8001bc2:	2200      	movs	r2, #0
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001bc4:	4630      	mov	r0, r6
	uint8_t cmd = reg | 0x80;
 8001bc6:	23c0      	movs	r3, #192	; 0xc0
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001bc8:	2101      	movs	r1, #1
	uint8_t dummy = 0x00;
 8001bca:	f88d 2005 	strb.w	r2, [sp, #5]
	uint8_t data = 0x00;
 8001bce:	f88d 2006 	strb.w	r2, [sp, #6]
	uint8_t cmd = reg | 0x80;
 8001bd2:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001bd6:	f002 fe7f 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001bda:	f10d 0107 	add.w	r1, sp, #7
 8001bde:	4628      	mov	r0, r5
 8001be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be4:	2201      	movs	r2, #1
 8001be6:	f003 fa23 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 8001bea:	f10d 0105 	add.w	r1, sp, #5
 8001bee:	4628      	mov	r0, r5
 8001bf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f003 fcc5 	bl	8005584 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001bfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bfe:	f10d 0106 	add.w	r1, sp, #6
 8001c02:	4628      	mov	r0, r5
 8001c04:	2201      	movs	r2, #1
 8001c06:	f003 fcbd 	bl	8005584 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4630      	mov	r0, r6
 8001c10:	f002 fe62 	bl	80048d8 <HAL_GPIO_WritePin>
	return data;
 8001c14:	f89d 3006 	ldrb.w	r3, [sp, #6]
	Imu->acc_odr = read_data&0x0F;
 8001c18:	f003 010f 	and.w	r1, r3, #15
	Imu->acc_bwp = read_data&0x70;
 8001c1c:	f003 0270 	and.w	r2, r3, #112	; 0x70
	Imu->acc_filter_perf = read_data&0x80;
 8001c20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	Imu->acc_odr = read_data&0x0F;
 8001c24:	f884 106e 	strb.w	r1, [r4, #110]	; 0x6e
	Imu->acc_bwp = read_data&0x70;
 8001c28:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
	Imu->acc_filter_perf = read_data&0x80;
 8001c2c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 8001c30:	b002      	add	sp, #8
 8001c32:	bd70      	pop	{r4, r5, r6, pc}
 8001c34:	40020400 	.word	0x40020400
 8001c38:	2000e5d8 	.word	0x2000e5d8

08001c3c <bmi270_setAccConf>:
void bmi270_setAccConf(IMU *Imu){
 8001c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001c3e:	4c33      	ldr	r4, [pc, #204]	; (8001d0c <bmi270_setAccConf+0xd0>)
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001c40:	4d33      	ldr	r5, [pc, #204]	; (8001d10 <bmi270_setAccConf+0xd4>)
 8001c42:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
void bmi270_setAccConf(IMU *Imu){
 8001c46:	b083      	sub	sp, #12
 8001c48:	4606      	mov	r6, r0
	uint8_t cmd = reg | 0x00; //write command
 8001c4a:	2740      	movs	r7, #64	; 0x40
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2101      	movs	r1, #1
 8001c52:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t cmd = reg | 0x00; //write command
 8001c56:	f88d 7007 	strb.w	r7, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001c5a:	f002 fe3d 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001c5e:	f10d 0107 	add.w	r1, sp, #7
 8001c62:	4628      	mov	r0, r5
 8001c64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f003 f9e1 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001c6e:	f10d 0106 	add.w	r1, sp, #6
 8001c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c76:	4628      	mov	r0, r5
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f003 f9d9 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4620      	mov	r0, r4
 8001c82:	4611      	mov	r1, r2
 8001c84:	f002 fe28 	bl	80048d8 <HAL_GPIO_WritePin>
	bmi270_spi_write_8(REG_ACC_CONF, Imu->acc_bwp);
 8001c88:	f896 306f 	ldrb.w	r3, [r6, #111]	; 0x6f
 8001c8c:	f88d 3006 	strb.w	r3, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001c90:	4620      	mov	r0, r4
 8001c92:	2200      	movs	r2, #0
 8001c94:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x00; //write command
 8001c96:	f88d 7007 	strb.w	r7, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001c9a:	f002 fe1d 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001c9e:	f10d 0107 	add.w	r1, sp, #7
 8001ca2:	4628      	mov	r0, r5
 8001ca4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f003 f9c1 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001cae:	f10d 0106 	add.w	r1, sp, #6
 8001cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cb6:	4628      	mov	r0, r5
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f003 f9b9 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	f002 fe08 	bl	80048d8 <HAL_GPIO_WritePin>
	bmi270_spi_write_8(REG_ACC_CONF, Imu->acc_filter_perf);
 8001cc8:	f896 3070 	ldrb.w	r3, [r6, #112]	; 0x70
 8001ccc:	f88d 3006 	strb.w	r3, [sp, #6]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2101      	movs	r1, #1
	uint8_t cmd = reg | 0x00; //write command
 8001cd6:	f88d 7007 	strb.w	r7, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001cda:	f002 fdfd 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001cde:	f10d 0107 	add.w	r1, sp, #7
 8001ce2:	4628      	mov	r0, r5
 8001ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f003 f9a1 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001cee:	f10d 0106 	add.w	r1, sp, #6
 8001cf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f003 f999 	bl	8005030 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001cfe:	2201      	movs	r2, #1
 8001d00:	4620      	mov	r0, r4
 8001d02:	4611      	mov	r1, r2
 8001d04:	f002 fde8 	bl	80048d8 <HAL_GPIO_WritePin>
}
 8001d08:	b003      	add	sp, #12
 8001d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d0c:	40020400 	.word	0x40020400
 8001d10:	2000e5d8 	.word	0x2000e5d8

08001d14 <bmi270_getGyroRange>:
void bmi270_getGyroRange(IMU *Imu){
 8001d14:	b510      	push	{r4, lr}
 8001d16:	b082      	sub	sp, #8
	uint8_t dummy = 0x00;
 8001d18:	2200      	movs	r2, #0
	uint8_t cmd = reg | 0x80;
 8001d1a:	23c3      	movs	r3, #195	; 0xc3
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001d1c:	2101      	movs	r1, #1
void bmi270_getGyroRange(IMU *Imu){
 8001d1e:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001d20:	482e      	ldr	r0, [pc, #184]	; (8001ddc <bmi270_getGyroRange+0xc8>)
	uint8_t dummy = 0x00;
 8001d22:	f88d 2005 	strb.w	r2, [sp, #5]
	uint8_t data = 0x00;
 8001d26:	f88d 2006 	strb.w	r2, [sp, #6]
	uint8_t cmd = reg | 0x80;
 8001d2a:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001d2e:	f002 fdd3 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d36:	2201      	movs	r2, #1
 8001d38:	f10d 0107 	add.w	r1, sp, #7
 8001d3c:	4828      	ldr	r0, [pc, #160]	; (8001de0 <bmi270_getGyroRange+0xcc>)
 8001d3e:	f003 f977 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 8001d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d46:	2201      	movs	r2, #1
 8001d48:	f10d 0105 	add.w	r1, sp, #5
 8001d4c:	4824      	ldr	r0, [pc, #144]	; (8001de0 <bmi270_getGyroRange+0xcc>)
 8001d4e:	f003 fc19 	bl	8005584 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001d52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d56:	2201      	movs	r2, #1
 8001d58:	f10d 0106 	add.w	r1, sp, #6
 8001d5c:	4820      	ldr	r0, [pc, #128]	; (8001de0 <bmi270_getGyroRange+0xcc>)
 8001d5e:	f003 fc11 	bl	8005584 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	481d      	ldr	r0, [pc, #116]	; (8001ddc <bmi270_getGyroRange+0xc8>)
 8001d66:	4611      	mov	r1, r2
 8001d68:	f002 fdb6 	bl	80048d8 <HAL_GPIO_WritePin>
	return data;
 8001d6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d82c      	bhi.n	8001dce <bmi270_getGyroRange+0xba>
 8001d74:	e8df f003 	tbb	[pc, r3]
 8001d78:	231b130b 	.word	0x231b130b
 8001d7c:	03          	.byte	0x03
 8001d7d:	00          	.byte	0x00
		Imu->gyr_range = BMI270_GYRO_125_DPS;
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <bmi270_getGyroRange+0xd0>)
		break;
 8001d80:	eddf 7a19 	vldr	s15, [pc, #100]	; 8001de8 <bmi270_getGyroRange+0xd4>
		Imu->gyr_range = BMI270_GYRO_125_DPS;
 8001d84:	6023      	str	r3, [r4, #0]
	Imu->inv_gyr_range = 1/Imu->gyr_range;
 8001d86:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd10      	pop	{r4, pc}
		Imu->gyr_range = BMI270_GYRO_2000_DPS;
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <bmi270_getGyroRange+0xd8>)
		break;
 8001d90:	eddf 7a17 	vldr	s15, [pc, #92]	; 8001df0 <bmi270_getGyroRange+0xdc>
		Imu->gyr_range = BMI270_GYRO_2000_DPS;
 8001d94:	6023      	str	r3, [r4, #0]
	Imu->inv_gyr_range = 1/Imu->gyr_range;
 8001d96:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8001d9a:	b002      	add	sp, #8
 8001d9c:	bd10      	pop	{r4, pc}
		Imu->gyr_range = BMI270_GYRO_1000_DPS;
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <bmi270_getGyroRange+0xe0>)
		break;
 8001da0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8001df8 <bmi270_getGyroRange+0xe4>
		Imu->gyr_range = BMI270_GYRO_1000_DPS;
 8001da4:	6023      	str	r3, [r4, #0]
	Imu->inv_gyr_range = 1/Imu->gyr_range;
 8001da6:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8001daa:	b002      	add	sp, #8
 8001dac:	bd10      	pop	{r4, pc}
		Imu->gyr_range = BMI270_GYRO_500_DPS;
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <bmi270_getGyroRange+0xe8>)
		break;
 8001db0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8001e00 <bmi270_getGyroRange+0xec>
		Imu->gyr_range = BMI270_GYRO_500_DPS;
 8001db4:	6023      	str	r3, [r4, #0]
	Imu->inv_gyr_range = 1/Imu->gyr_range;
 8001db6:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8001dba:	b002      	add	sp, #8
 8001dbc:	bd10      	pop	{r4, pc}
		Imu->gyr_range = BMI270_GYRO_250_DPS;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <bmi270_getGyroRange+0xf0>)
		break;
 8001dc0:	eddf 7a11 	vldr	s15, [pc, #68]	; 8001e08 <bmi270_getGyroRange+0xf4>
		Imu->gyr_range = BMI270_GYRO_250_DPS;
 8001dc4:	6023      	str	r3, [r4, #0]
	Imu->inv_gyr_range = 1/Imu->gyr_range;
 8001dc6:	edc4 7a02 	vstr	s15, [r4, #8]
}
 8001dca:	b002      	add	sp, #8
 8001dcc:	bd10      	pop	{r4, pc}
 8001dce:	ed94 7a00 	vldr	s14, [r4]
 8001dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dda:	e7d4      	b.n	8001d86 <bmi270_getGyroRange+0x72>
 8001ddc:	40020400 	.word	0x40020400
 8001de0:	2000e5d8 	.word	0x2000e5d8
 8001de4:	4383126f 	.word	0x4383126f
 8001de8:	3b79ffff 	.word	0x3b79ffff
 8001dec:	4183126f 	.word	0x4183126f
 8001df0:	3d79ffff 	.word	0x3d79ffff
 8001df4:	4203126f 	.word	0x4203126f
 8001df8:	3cf9ffff 	.word	0x3cf9ffff
 8001dfc:	4283126f 	.word	0x4283126f
 8001e00:	3c79ffff 	.word	0x3c79ffff
 8001e04:	4303126f 	.word	0x4303126f
 8001e08:	3bf9ffff 	.word	0x3bf9ffff

08001e0c <bmi270_getAccelRange>:
void bmi270_getAccelRange(IMU *Imu){
 8001e0c:	b510      	push	{r4, lr}
 8001e0e:	b082      	sub	sp, #8
	uint8_t dummy = 0x00;
 8001e10:	2200      	movs	r2, #0
	uint8_t cmd = reg | 0x80;
 8001e12:	23c1      	movs	r3, #193	; 0xc1
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001e14:	2101      	movs	r1, #1
void bmi270_getAccelRange(IMU *Imu){
 8001e16:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001e18:	482c      	ldr	r0, [pc, #176]	; (8001ecc <bmi270_getAccelRange+0xc0>)
	uint8_t dummy = 0x00;
 8001e1a:	f88d 2005 	strb.w	r2, [sp, #5]
	uint8_t data = 0x00;
 8001e1e:	f88d 2006 	strb.w	r2, [sp, #6]
	uint8_t cmd = reg | 0x80;
 8001e22:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001e26:	f002 fd57 	bl	80048d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001e2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f10d 0107 	add.w	r1, sp, #7
 8001e34:	4826      	ldr	r0, [pc, #152]	; (8001ed0 <bmi270_getAccelRange+0xc4>)
 8001e36:	f003 f8fb 	bl	8005030 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 8001e3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f10d 0105 	add.w	r1, sp, #5
 8001e44:	4822      	ldr	r0, [pc, #136]	; (8001ed0 <bmi270_getAccelRange+0xc4>)
 8001e46:	f003 fb9d 	bl	8005584 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f10d 0106 	add.w	r1, sp, #6
 8001e54:	481e      	ldr	r0, [pc, #120]	; (8001ed0 <bmi270_getAccelRange+0xc4>)
 8001e56:	f003 fb95 	bl	8005584 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	481b      	ldr	r0, [pc, #108]	; (8001ecc <bmi270_getAccelRange+0xc0>)
 8001e5e:	4611      	mov	r1, r2
 8001e60:	f002 fd3a 	bl	80048d8 <HAL_GPIO_WritePin>
	return data;
 8001e64:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d827      	bhi.n	8001ebc <bmi270_getAccelRange+0xb0>
 8001e6c:	e8df f003 	tbb	[pc, r3]
 8001e70:	021d140b 	.word	0x021d140b
		Imu->acc_range = BMI270_ACCEL_16G;
 8001e74:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
		break;
 8001e78:	eddf 7a16 	vldr	s15, [pc, #88]	; 8001ed4 <bmi270_getAccelRange+0xc8>
		Imu->acc_range = BMI270_ACCEL_16G;
 8001e7c:	6063      	str	r3, [r4, #4]
	Imu->inv_acc_range = 1/Imu->acc_range;
 8001e7e:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8001e82:	b002      	add	sp, #8
 8001e84:	bd10      	pop	{r4, pc}
		break;
 8001e86:	eddf 7a14 	vldr	s15, [pc, #80]	; 8001ed8 <bmi270_getAccelRange+0xcc>
		Imu->acc_range = BMI270_ACCEL_2G;
 8001e8a:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8001e8e:	6063      	str	r3, [r4, #4]
	Imu->inv_acc_range = 1/Imu->acc_range;
 8001e90:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8001e94:	b002      	add	sp, #8
 8001e96:	bd10      	pop	{r4, pc}
		break;
 8001e98:	eddf 7a10 	vldr	s15, [pc, #64]	; 8001edc <bmi270_getAccelRange+0xd0>
		Imu->acc_range = BMI270_ACCEL_4G;
 8001e9c:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8001ea0:	6063      	str	r3, [r4, #4]
	Imu->inv_acc_range = 1/Imu->acc_range;
 8001ea2:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8001ea6:	b002      	add	sp, #8
 8001ea8:	bd10      	pop	{r4, pc}
		break;
 8001eaa:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8001ee0 <bmi270_getAccelRange+0xd4>
		Imu->acc_range = BMI270_ACCEL_8G;
 8001eae:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001eb2:	6063      	str	r3, [r4, #4]
	Imu->inv_acc_range = 1/Imu->acc_range;
 8001eb4:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8001eb8:	b002      	add	sp, #8
 8001eba:	bd10      	pop	{r4, pc}
 8001ebc:	ed94 7a01 	vldr	s14, [r4, #4]
 8001ec0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ec8:	e7d9      	b.n	8001e7e <bmi270_getAccelRange+0x72>
 8001eca:	bf00      	nop
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	2000e5d8 	.word	0x2000e5d8
 8001ed4:	3a000000 	.word	0x3a000000
 8001ed8:	38800000 	.word	0x38800000
 8001edc:	39000000 	.word	0x39000000
 8001ee0:	39800000 	.word	0x39800000

08001ee4 <bmi270_calibrateInit>:
	Imu->calibration_c = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
	Imu->gyr_lim_min_x = lim;
 8001eea:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
	Imu->gyr_lim_min_y = lim;
 8001eee:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
	Imu->gyr_lim_min_z = lim;
 8001ef2:	ed80 0a12 	vstr	s0, [r0, #72]	; 0x48
	Imu->gyr_lim_max_x = lim;
 8001ef6:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
	Imu->gyr_lim_max_y = lim;
 8001efa:	ed80 0a14 	vstr	s0, [r0, #80]	; 0x50
	Imu->gyr_lim_max_z = lim;
 8001efe:	ed80 0a15 	vstr	s0, [r0, #84]	; 0x54
}
 8001f02:	4770      	bx	lr

08001f04 <drv8313_init>:
 * 1: Set nRESET and nSLEEP to inactive HIGH to enable the three phase H-bridge.
 * 2: Read the nFAULT pin. If the pin is active HIGH, the initialization stops. If inactive LOW, the procedure continues.
 * 3: Pass references to timers and timer channels so that the PWM function of each timer may be used.
 * 4: Start PWM.
 */
uint8_t drv8313_init(MotorDriver *driver, TIM_HandleTypeDef *htim) {
 8001f04:	b570      	push	{r4, r5, r6, lr}
 8001f06:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(PINBUS_DRV8313, PIN_nSLEEP, GPIO_PIN_SET); /* Enable the unit by setting nRESET + nSLEEP to HIGH*/
 8001f08:	484c      	ldr	r0, [pc, #304]	; (800203c <drv8313_init+0x138>)
uint8_t drv8313_init(MotorDriver *driver, TIM_HandleTypeDef *htim) {
 8001f0a:	460e      	mov	r6, r1
	HAL_GPIO_WritePin(PINBUS_DRV8313, PIN_nSLEEP, GPIO_PIN_SET); /* Enable the unit by setting nRESET + nSLEEP to HIGH*/
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
//	HAL_Delay(1); //Misread prevention delay.

	/* Wait for nFAULT to flag inactive HIGH, before init */
	while(!HAL_GPIO_ReadPin(PINBUS_DRV8313, driver->PIN_nFAULT)) {
 8001f12:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(PINBUS_DRV8313, PIN_nSLEEP, GPIO_PIN_SET); /* Enable the unit by setting nRESET + nSLEEP to HIGH*/
 8001f14:	f002 fce0 	bl	80048d8 <HAL_GPIO_WritePin>
	while(!HAL_GPIO_ReadPin(PINBUS_DRV8313, driver->PIN_nFAULT)) {
 8001f18:	8861      	ldrh	r1, [r4, #2]
 8001f1a:	4628      	mov	r0, r5
 8001f1c:	f002 fcd6 	bl	80048cc <HAL_GPIO_ReadPin>
 8001f20:	2800      	cmp	r0, #0
 8001f22:	d0f9      	beq.n	8001f18 <drv8313_init+0x14>
	}

	driver->update_ctr = 0;
 8001f24:	2100      	movs	r1, #0

	driver->timer = htim;

	driver->pwm_ch1 = TIM_CHANNEL_1;
 8001f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
	driver->pwm_ch2 = TIM_CHANNEL_2;
	driver->pwm_ch3 = TIM_CHANNEL_3;
 8001f2a:	2308      	movs	r3, #8
	driver->update_ctr = 0;
 8001f2c:	80a1      	strh	r1, [r4, #4]
	driver->pwm_ch1 = TIM_CHANNEL_1;
 8001f2e:	f8a4 2174 	strh.w	r2, [r4, #372]	; 0x174
	driver->pwm_ch3 = TIM_CHANNEL_3;
 8001f32:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176

	/* PID config */
	PID_Init(&driver->d_reg);
 8001f36:	f104 0030 	add.w	r0, r4, #48	; 0x30
	driver->timer = htim;
 8001f3a:	f8c4 6170 	str.w	r6, [r4, #368]	; 0x170
	PID_Init(&driver->d_reg);
 8001f3e:	f001 fba1 	bl	8003684 <PID_Init>
	PID_Init(&driver->q_reg);
 8001f42:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8001f46:	f001 fb9d 	bl	8003684 <PID_Init>
	PID_Init(&driver->speed_reg);
 8001f4a:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8001f4e:	f001 fb99 	bl	8003684 <PID_Init>
	PID_Init(&driver->pos_reg);
 8001f52:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8001f56:	f001 fb95 	bl	8003684 <PID_Init>
	PID_Init(&driver->imu_reg);
 8001f5a:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8001f5e:	f001 fb91 	bl	8003684 <PID_Init>

	driver->d_reg.lim_min = -BLDC_MAX_VOLTAGE;
	driver->d_reg.lim_max = BLDC_MAX_VOLTAGE;
	driver->q_reg.lim_min = -BLDC_MAX_VOLTAGE;
	driver->q_reg.lim_max = BLDC_MAX_VOLTAGE;
	driver->speed_reg.lim_min = -BLDC_MAX_VOLTAGE/BLDC_PHASE_RESISTANCE;
 8001f62:	4d37      	ldr	r5, [pc, #220]	; (8002040 <drv8313_init+0x13c>)
	driver->speed_reg.lim_max = BLDC_MAX_VOLTAGE/BLDC_PHASE_RESISTANCE;
//	driver->pos_reg.lim_min = -6000; 		/* ˚/s */
//	driver->pos_reg.lim_max = 6000;		/* ˚/s */
	driver->pos_reg.lim_min = -6283.2f; 		/* rad/s */
 8001f64:	4937      	ldr	r1, [pc, #220]	; (8002044 <drv8313_init+0x140>)
	driver->pos_reg.lim_max = 6283.2f;		/* rad/s */
 8001f66:	4a38      	ldr	r2, [pc, #224]	; (8002048 <drv8313_init+0x144>)
	driver->speed_reg.lim_max = BLDC_MAX_VOLTAGE/BLDC_PHASE_RESISTANCE;
 8001f68:	4838      	ldr	r0, [pc, #224]	; (800204c <drv8313_init+0x148>)
	driver->speed_reg.lim_min = -BLDC_MAX_VOLTAGE/BLDC_PHASE_RESISTANCE;
 8001f6a:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	driver->imu_reg.lim_min = -6283.2f;
	driver->imu_reg.lim_max = 6283.2f;

	/* d-regulator */
	driver->d_reg.Kp = 1.75f;
	driver->d_reg.Ki = 0.0f;
 8001f6e:	2300      	movs	r3, #0
	driver->d_reg.lim_min = -BLDC_MAX_VOLTAGE;
 8001f70:	4d37      	ldr	r5, [pc, #220]	; (8002050 <drv8313_init+0x14c>)
	driver->speed_reg.lim_max = BLDC_MAX_VOLTAGE/BLDC_PHASE_RESISTANCE;
 8001f72:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
	driver->pos_reg.lim_min = -6283.2f; 		/* rad/s */
 8001f76:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
	driver->d_reg.lim_max = BLDC_MAX_VOLTAGE;
 8001f7a:	4836      	ldr	r0, [pc, #216]	; (8002054 <drv8313_init+0x150>)
	driver->imu_reg.lim_min = -6283.2f;
 8001f7c:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
	driver->pos_reg.lim_max = 6283.2f;		/* rad/s */
 8001f80:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
	driver->d_reg.Kp = 1.75f;
 8001f84:	4934      	ldr	r1, [pc, #208]	; (8002058 <drv8313_init+0x154>)
	driver->imu_reg.lim_max = 6283.2f;
 8001f86:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
	driver->d_reg.Ki = 0.0f;
 8001f8a:	6363      	str	r3, [r4, #52]	; 0x34
	driver->q_reg.Kd = driver->d_reg.Kd;

	/*Testing note for d and q regs: Set Ki to 1.0 and try making zero-pos on encoders alterable */

	/* speed regulator */
	driver->speed_reg.Kp = 1.0f;
 8001f8c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	driver->d_reg.Kd = 0.00f;
 8001f90:	63a3      	str	r3, [r4, #56]	; 0x38
	driver->q_reg.Ki = driver->d_reg.Ki;
 8001f92:	66a3      	str	r3, [r4, #104]	; 0x68
	driver->q_reg.Kd = driver->d_reg.Kd;
 8001f94:	66e3      	str	r3, [r4, #108]	; 0x6c
	driver->speed_reg.Ki = 0.0f;
 8001f96:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	driver->speed_reg.Kd = 0.0f; /* NOPE. DON'T. EDIT. */
 8001f9a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0

	/* position regulator */
	driver->pos_reg.Kp = 1.0f;
	driver->pos_reg.Ki = 0.0f;
 8001f9e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	driver->pos_reg.Kd = 0.0f;
 8001fa2:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4

	/* imu regulator */
	driver->imu_reg.Kp = 7.0f;
	driver->imu_reg.Ki = 0.0f;
 8001fa6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	driver->imu_reg.Kd = 0.0f;
 8001faa:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108

	driver->offset = 0.0f;
 8001fae:	62e3      	str	r3, [r4, #44]	; 0x2c
	driver->imu_reg.Kp = 7.0f;
 8001fb0:	4b2a      	ldr	r3, [pc, #168]	; (800205c <drv8313_init+0x158>)
 8001fb2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	driver->speed_reg.Kp = 1.0f;
 8001fb6:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	driver->pos_reg.Kp = 1.0f;
 8001fba:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
	driver->d_reg.Kp = 1.75f;
 8001fbe:	6321      	str	r1, [r4, #48]	; 0x30
	driver->q_reg.Kp = driver->d_reg.Kp;
 8001fc0:	6661      	str	r1, [r4, #100]	; 0x64
	driver->d_reg.lim_max = BLDC_MAX_VOLTAGE;
 8001fc2:	6420      	str	r0, [r4, #64]	; 0x40
	driver->q_reg.lim_max = BLDC_MAX_VOLTAGE;
 8001fc4:	6760      	str	r0, [r4, #116]	; 0x74

	/* LPF config */
	lpf_init(&driver->LPF_current_d, 0.02f);
 8001fc6:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8002060 <drv8313_init+0x15c>
	driver->d_reg.lim_min = -BLDC_MAX_VOLTAGE;
 8001fca:	63e5      	str	r5, [r4, #60]	; 0x3c
	lpf_init(&driver->LPF_current_d, 0.02f);
 8001fcc:	f504 709a 	add.w	r0, r4, #308	; 0x134
	driver->q_reg.lim_min = -BLDC_MAX_VOLTAGE;
 8001fd0:	6725      	str	r5, [r4, #112]	; 0x70
	lpf_init(&driver->LPF_current_d, 0.02f);
 8001fd2:	f000 fb8b 	bl	80026ec <lpf_init>
	lpf_init(&driver->LPF_current_q, 0.02f);
 8001fd6:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8001fda:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8002060 <drv8313_init+0x15c>
 8001fde:	f000 fb85 	bl	80026ec <lpf_init>
	lpf_init(&driver->LPF_velocity, 0.065f);
 8001fe2:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 8001fe6:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8002064 <drv8313_init+0x160>
 8001fea:	f000 fb7f 	bl	80026ec <lpf_init>
	lpf_init(&driver->LPF_angle, 0.185f);
 8001fee:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8001ff2:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8002068 <drv8313_init+0x164>
 8001ff6:	f000 fb79 	bl	80026ec <lpf_init>
	lpf_init(&driver->LPF_imu, 0.25f);
 8001ffa:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8001ffe:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 8002002:	f000 fb73 	bl	80026ec <lpf_init>

	HAL_TIM_PWM_Start(driver->timer, driver->pwm_ch1);
 8002006:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
 800200a:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
 800200e:	f003 fd45 	bl	8005a9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(driver->timer, driver->pwm_ch2);
 8002012:	f894 1175 	ldrb.w	r1, [r4, #373]	; 0x175
 8002016:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
 800201a:	f003 fd3f 	bl	8005a9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(driver->timer, driver->pwm_ch3);
 800201e:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
 8002022:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
 8002026:	f003 fd39 	bl	8005a9c <HAL_TIM_PWM_Start>

	/* Calculate PWM period */
	driver->pwm_period = driver->timer->Init.Period + 1;
 800202a:	f8d4 3170 	ldr.w	r3, [r4, #368]	; 0x170
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	3301      	adds	r3, #1
 8002032:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178

	return 1;

}
 8002036:	2001      	movs	r0, #1
 8002038:	bd70      	pop	{r4, r5, r6, pc}
 800203a:	bf00      	nop
 800203c:	40020400 	.word	0x40020400
 8002040:	c01197a8 	.word	0xc01197a8
 8002044:	c5c4599a 	.word	0xc5c4599a
 8002048:	45c4599a 	.word	0x45c4599a
 800204c:	401197a8 	.word	0x401197a8
 8002050:	c1400000 	.word	0xc1400000
 8002054:	41400000 	.word	0x41400000
 8002058:	3fe00000 	.word	0x3fe00000
 800205c:	40e00000 	.word	0x40e00000
 8002060:	3ca3d70a 	.word	0x3ca3d70a
 8002064:	3d851eb8 	.word	0x3d851eb8
 8002068:	3e3d70a4 	.word	0x3e3d70a4

0800206c <drv8313_setPWM>:
	/* Wait for PWM period to finish before setting new duty period
	 * Note: May be unnecessary, but used as a safety measure for now */
//	while(tim_instance->CNT != 0){
//	}

	tim_instance->CCR1 = duty_a * driver->pwm_period;
 800206c:	f8b0 3178 	ldrh.w	r3, [r0, #376]	; 0x178
 8002070:	ee07 3a90 	vmov	s15, r3
 8002074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002078:	ee27 0a80 	vmul.f32	s0, s15, s0
	tim_instance->CCR2 = duty_b * driver->pwm_period;
 800207c:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tim_instance->CCR3 = duty_c * driver->pwm_period;
 8002080:	ee27 1a81 	vmul.f32	s2, s15, s2
	tim_instance->CCR1 = duty_a * driver->pwm_period;
 8002084:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	tim_instance->CCR2 = duty_b * driver->pwm_period;
 8002088:	eefc 0ae0 	vcvt.u32.f32	s1, s1
	tim_instance->CCR3 = duty_c * driver->pwm_period;
 800208c:	eebc 1ac1 	vcvt.u32.f32	s2, s2
	tim_instance->CCR1 = duty_a * driver->pwm_period;
 8002090:	ed81 0a0d 	vstr	s0, [r1, #52]	; 0x34
	tim_instance->CCR2 = duty_b * driver->pwm_period;
 8002094:	edc1 0a0e 	vstr	s1, [r1, #56]	; 0x38
	tim_instance->CCR3 = duty_c * driver->pwm_period;
 8002098:	ed81 1a0f 	vstr	s2, [r1, #60]	; 0x3c
}
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop

080020a0 <foc_pi_control>:
}

/**
 * @brief All PI regulation required to get dq-reference voltages
 */
void foc_pi_control(MotorDriver *driver, float target) {
 80020a0:	b510      	push	{r4, lr}
 80020a2:	4604      	mov	r4, r0
 80020a4:	ed2d 8b02 	vpush	{d8}

	/* filter BLDC angle */
//	driver->angle = lpf_exec(&driver->LPF_angle, driver->angle);
	lpf_exec(&driver->LPF_angle, driver->angle);
 80020a8:	f500 70ac 	add.w	r0, r0, #344	; 0x158
void foc_pi_control(MotorDriver *driver, float target) {
 80020ac:	eeb0 8a40 	vmov.f32	s16, s0
	lpf_exec(&driver->LPF_angle, driver->angle);
 80020b0:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 80020b4:	f000 fb24 	bl	8002700 <lpf_exec>

	/* Check which type of regulation should be used */
//	if (CONTROL_TYPE == CONTROL_POSITION){
		driver->velocity_target = PID_Update(&driver->pos_reg, target, driver->angle);
 80020b8:	edd4 0a63 	vldr	s1, [r4, #396]	; 0x18c
 80020bc:	eeb0 0a48 	vmov.f32	s0, s16
 80020c0:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 80020c4:	f001 faf2 	bl	80036ac <PID_Update>
//	else if (CONTROL_TYPE == CONTROL_VELOCITY){
//		driver->velocity_target = target;
//	}

		/* filter velocity */
	driver->velocity = lpf_exec(&driver->LPF_velocity, driver->velocity);
 80020c8:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
		driver->velocity_target = PID_Update(&driver->pos_reg, target, driver->angle);
 80020cc:	ed84 0a68 	vstr	s0, [r4, #416]	; 0x1a0
	driver->velocity = lpf_exec(&driver->LPF_velocity, driver->velocity);
 80020d0:	ed94 0a67 	vldr	s0, [r4, #412]	; 0x19c
 80020d4:	f000 fb14 	bl	8002700 <lpf_exec>
 80020d8:	eef0 0a40 	vmov.f32	s1, s0
 80020dc:	edc4 0a67 	vstr	s1, [r4, #412]	; 0x19c

	/* Velocity regulation --> i_qref
	 * Note: Setpoint should be set by main function later*/
	float i_qref = PID_Update(&driver->speed_reg, driver->velocity_target,
 80020e0:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80020e4:	ed94 0a68 	vldr	s0, [r4, #416]	; 0x1a0
 80020e8:	f001 fae0 	bl	80036ac <PID_Update>
			driver->velocity);


	driver->i_d = lpf_exec(&driver->LPF_current_d, driver->i_d);
 80020ec:	f504 709a 	add.w	r0, r4, #308	; 0x134
	float i_qref = PID_Update(&driver->speed_reg, driver->velocity_target,
 80020f0:	eeb0 8a40 	vmov.f32	s16, s0
	driver->i_d = lpf_exec(&driver->LPF_current_d, driver->i_d);
 80020f4:	ed94 0a04 	vldr	s0, [r4, #16]
 80020f8:	f000 fb02 	bl	8002700 <lpf_exec>
	driver->i_q = lpf_exec(&driver->LPF_current_q, driver->i_q);
 80020fc:	f504 70a0 	add.w	r0, r4, #320	; 0x140
	driver->i_d = lpf_exec(&driver->LPF_current_d, driver->i_d);
 8002100:	ed84 0a04 	vstr	s0, [r4, #16]
	driver->i_q = lpf_exec(&driver->LPF_current_q, driver->i_q);
 8002104:	ed94 0a05 	vldr	s0, [r4, #20]
 8002108:	f000 fafa 	bl	8002700 <lpf_exec>

	/* current PI stuff */
	driver->V_d = PID_Update(&driver->d_reg, 0, driver->i_d);
 800210c:	edd4 0a04 	vldr	s1, [r4, #16]
	driver->i_q = lpf_exec(&driver->LPF_current_q, driver->i_q);
 8002110:	ed84 0a05 	vstr	s0, [r4, #20]
	driver->V_d = PID_Update(&driver->d_reg, 0, driver->i_d);
 8002114:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8002118:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002140 <foc_pi_control+0xa0>
 800211c:	f001 fac6 	bl	80036ac <PID_Update>
	driver->V_q = PID_Update(&driver->q_reg, i_qref, driver->i_q);
 8002120:	edd4 0a05 	vldr	s1, [r4, #20]
	driver->V_d = PID_Update(&driver->d_reg, 0, driver->i_d);
 8002124:	ed84 0a08 	vstr	s0, [r4, #32]
	driver->V_q = PID_Update(&driver->q_reg, i_qref, driver->i_q);
 8002128:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800212c:	eeb0 0a48 	vmov.f32	s0, s16
 8002130:	f001 fabc 	bl	80036ac <PID_Update>
}
 8002134:	ecbd 8b02 	vpop	{d8}
	driver->V_q = PID_Update(&driver->q_reg, i_qref, driver->i_q);
 8002138:	ed84 0a07 	vstr	s0, [r4, #28]
}
 800213c:	bd10      	pop	{r4, pc}
 800213e:	bf00      	nop
	...

08002148 <foc_setPhaseVoltage>:



	float V_ref, a_duty = 0, b_duty = 0, c_duty = 0;

	V_ref = sqrtApprox(V_d * V_d + V_q * V_q);
 8002148:	ee60 7aa0 	vmul.f32	s15, s1, s1
void foc_setPhaseVoltage(MotorDriver *driver, float V_d, float V_q) {
 800214c:	b5f0      	push	{r4, r5, r6, r7, lr}
	V_ref = sqrtApprox(V_d * V_d + V_q * V_q);
 800214e:	eee0 7a00 	vfma.f32	s15, s0, s0
	i = 0x5f375a86 - (i >> 1);
 8002152:	4bab      	ldr	r3, [pc, #684]	; (8002400 <foc_setPhaseVoltage+0x2b8>)
void foc_setPhaseVoltage(MotorDriver *driver, float V_d, float V_q) {
 8002154:	4605      	mov	r5, r0
	i = 0x5f375a86 - (i >> 1);
 8002156:	ee17 2a90 	vmov	r2, s15
 800215a:	eba3 0062 	sub.w	r0, r3, r2, asr #1

	float T1, T2, T0;

	float m = _SQRT3 * V_ref * _1_Vdc;
 800215e:	ee07 0a10 	vmov	s14, r0
void foc_setPhaseVoltage(MotorDriver *driver, float V_d, float V_q) {
 8002162:	ed2d 8b06 	vpush	{d8-d10}
	float m = _SQRT3 * V_ref * _1_Vdc;
 8002166:	ee67 7a87 	vmul.f32	s15, s15, s14
void foc_setPhaseVoltage(MotorDriver *driver, float V_d, float V_q) {
 800216a:	b083      	sub	sp, #12
	float m = _SQRT3 * V_ref * _1_Vdc;
 800216c:	ee17 0a90 	vmov	r0, s15
void foc_setPhaseVoltage(MotorDriver *driver, float V_d, float V_q) {
 8002170:	eeb0 8a60 	vmov.f32	s16, s1
 8002174:	eef0 8a40 	vmov.f32	s17, s0
	float m = _SQRT3 * V_ref * _1_Vdc;
 8002178:	f7fe f9ee 	bl	8000558 <__aeabi_f2d>
 800217c:	a39c      	add	r3, pc, #624	; (adr r3, 80023f0 <foc_setPhaseVoltage+0x2a8>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fe fa41 	bl	8000608 <__aeabi_dmul>
 8002186:	f7fe fd17 	bl	8000bb8 <__aeabi_d2f>
//	float theta = fmod(atan2(V_beta, V_alpha) + _2PI, _2PI);


	float theta = _normalizeAngle(driver->angle_electrical + FastTrigonometry_atan2(V_q, V_d));
 800218a:	eef0 0a68 	vmov.f32	s1, s17
 800218e:	eeb0 0a48 	vmov.f32	s0, s16
	float m = _SQRT3 * V_ref * _1_Vdc;
 8002192:	ee09 0a10 	vmov	s18, r0
	float theta = _normalizeAngle(driver->angle_electrical + FastTrigonometry_atan2(V_q, V_d));
 8002196:	ed95 8a65 	vldr	s16, [r5, #404]	; 0x194

	/*Sector selection*/
	uint8_t sector = theta * _3_PI + 1;

	/* Duty time calculation */
	T1 = m * FastTrigonometry_sin(sector * _PI_3 - theta);
 800219a:	ed9f aa9a 	vldr	s20, [pc, #616]	; 8002404 <foc_setPhaseVoltage+0x2bc>
	float theta = _normalizeAngle(driver->angle_electrical + FastTrigonometry_atan2(V_q, V_d));
 800219e:	f000 fa43 	bl	8002628 <FastTrigonometry_atan2>
	float a = fmod(angle, _2PI);
 80021a2:	ee78 7a00 	vadd.f32	s15, s16, s0
	uint8_t sector = theta * _3_PI + 1;
 80021a6:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	float a = fmod(angle, _2PI);
 80021aa:	ee17 0a90 	vmov	r0, s15
 80021ae:	f7fe f9d3 	bl	8000558 <__aeabi_f2d>
 80021b2:	ed9f 1b91 	vldr	d1, [pc, #580]	; 80023f8 <foc_setPhaseVoltage+0x2b0>
 80021b6:	ec41 0b10 	vmov	d0, r0, r1
 80021ba:	f007 f877 	bl	80092ac <fmod>
 80021be:	ec51 0b10 	vmov	r0, r1, d0
 80021c2:	f7fe fcf9 	bl	8000bb8 <__aeabi_d2f>
 80021c6:	ee08 0a90 	vmov	s17, r0
	return a >= 0 ? a : (a + _2PI);
 80021ca:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80021ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d2:	bf44      	itt	mi
 80021d4:	eddf 7a8c 	vldrmi	s15, [pc, #560]	; 8002408 <foc_setPhaseVoltage+0x2c0>
 80021d8:	ee78 8aa7 	vaddmi.f32	s17, s17, s15
	uint8_t sector = theta * _3_PI + 1;
 80021dc:	eddf 7a8b 	vldr	s15, [pc, #556]	; 800240c <foc_setPhaseVoltage+0x2c4>
 80021e0:	eeb0 7a48 	vmov.f32	s14, s16
 80021e4:	eea8 7aa7 	vfma.f32	s14, s17, s15
	T1 = m * FastTrigonometry_sin(sector * _PI_3 - theta);
 80021e8:	eeb0 0a68 	vmov.f32	s0, s17
	uint8_t sector = theta * _3_PI + 1;
 80021ec:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80021f0:	edcd 7a00 	vstr	s15, [sp]
 80021f4:	f89d 4000 	ldrb.w	r4, [sp]
	T1 = m * FastTrigonometry_sin(sector * _PI_3 - theta);
 80021f8:	ee07 4a90 	vmov	s15, r4
 80021fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	T2 = m * FastTrigonometry_sin(theta - (sector - 1) * _PI_3);
 8002200:	3c01      	subs	r4, #1
	T1 = m * FastTrigonometry_sin(sector * _PI_3 - theta);
 8002202:	ee97 0a8a 	vfnms.f32	s0, s15, s20
 8002206:	f000 f9e7 	bl	80025d8 <FastTrigonometry_sin>
	T2 = m * FastTrigonometry_sin(theta - (sector - 1) * _PI_3);
 800220a:	ee07 4a90 	vmov	s15, r4
 800220e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	T1 = m * FastTrigonometry_sin(sector * _PI_3 - theta);
 8002212:	ee60 9a09 	vmul.f32	s19, s0, s18
	T2 = m * FastTrigonometry_sin(theta - (sector - 1) * _PI_3);
 8002216:	eeb0 0a68 	vmov.f32	s0, s17
 800221a:	eea7 0aca 	vfms.f32	s0, s15, s20
 800221e:	f000 f9db 	bl	80025d8 <FastTrigonometry_sin>
 8002222:	ee20 9a09 	vmul.f32	s18, s0, s18
	T0 = 1 - T1 - T2;
 8002226:	ee79 8a89 	vadd.f32	s17, s19, s18
 800222a:	ee38 8a68 	vsub.f32	s16, s16, s17

	switch (sector) {
 800222e:	2c05      	cmp	r4, #5
 8002230:	f200 80d7 	bhi.w	80023e2 <foc_setPhaseVoltage+0x29a>
 8002234:	e8df f004 	tbb	[pc, r4]
 8002238:	9b7b633a 	.word	0x9b7b633a
 800223c:	03bb      	.short	0x03bb
			a_duty = T2 + T0 * 0.5;
			b_duty = T0 * 0.5;
			c_duty = T1 + T2 + T0 * 0.5;
			break;
		case 6:
			a_duty = T1 + T2 + T0 * 0.5;
 800223e:	ee18 0a10 	vmov	r0, s16
 8002242:	f7fe f989 	bl	8000558 <__aeabi_f2d>
 8002246:	4b72      	ldr	r3, [pc, #456]	; (8002410 <foc_setPhaseVoltage+0x2c8>)
 8002248:	2200      	movs	r2, #0
 800224a:	f7fe f9dd 	bl	8000608 <__aeabi_dmul>
 800224e:	4606      	mov	r6, r0
 8002250:	460f      	mov	r7, r1
 8002252:	ee18 0a90 	vmov	r0, s17
 8002256:	f7fe f97f 	bl	8000558 <__aeabi_f2d>
 800225a:	463b      	mov	r3, r7
 800225c:	4632      	mov	r2, r6
 800225e:	f7fe f81d 	bl	800029c <__adddf3>
 8002262:	f7fe fca9 	bl	8000bb8 <__aeabi_d2f>
 8002266:	4603      	mov	r3, r0
			b_duty = T0 * 0.5;
			c_duty = T1 + T0 * 0.5;
 8002268:	ee19 0a90 	vmov	r0, s19
			b_duty = T0 * 0.5;
 800226c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002270:	ee68 0a20 	vmul.f32	s1, s16, s1
			a_duty = T1 + T2 + T0 * 0.5;
 8002274:	9301      	str	r3, [sp, #4]
			b_duty = T0 * 0.5;
 8002276:	edcd 0a00 	vstr	s1, [sp]
			c_duty = T1 + T0 * 0.5;
 800227a:	f7fe f96d 	bl	8000558 <__aeabi_f2d>
 800227e:	4632      	mov	r2, r6
 8002280:	463b      	mov	r3, r7
 8002282:	f7fe f80b 	bl	800029c <__adddf3>
 8002286:	f7fe fc97 	bl	8000bb8 <__aeabi_d2f>
			break;
 800228a:	eddd 0a00 	vldr	s1, [sp]
 800228e:	ed9d 0a01 	vldr	s0, [sp, #4]
			c_duty = T1 + T0 * 0.5;
 8002292:	ee01 0a10 	vmov	s2, r0
	}

	drv8313_setPWM(driver, driver->timer->Instance, a_duty, b_duty, c_duty);
 8002296:	f8d5 3170 	ldr.w	r3, [r5, #368]	; 0x170
 800229a:	6819      	ldr	r1, [r3, #0]
 800229c:	4628      	mov	r0, r5
}
 800229e:	b003      	add	sp, #12
 80022a0:	ecbd 8b06 	vpop	{d8-d10}
 80022a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	drv8313_setPWM(driver, driver->timer->Instance, a_duty, b_duty, c_duty);
 80022a8:	f7ff bee0 	b.w	800206c <drv8313_setPWM>
			a_duty = T1 + T2 + T0 * 0.5;
 80022ac:	ee18 0a10 	vmov	r0, s16
 80022b0:	f7fe f952 	bl	8000558 <__aeabi_f2d>
 80022b4:	4b56      	ldr	r3, [pc, #344]	; (8002410 <foc_setPhaseVoltage+0x2c8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	f7fe f9a6 	bl	8000608 <__aeabi_dmul>
 80022bc:	4606      	mov	r6, r0
 80022be:	460f      	mov	r7, r1
 80022c0:	ee18 0a90 	vmov	r0, s17
 80022c4:	f7fe f948 	bl	8000558 <__aeabi_f2d>
 80022c8:	463b      	mov	r3, r7
 80022ca:	4632      	mov	r2, r6
 80022cc:	f7fd ffe6 	bl	800029c <__adddf3>
 80022d0:	f7fe fc72 	bl	8000bb8 <__aeabi_d2f>
 80022d4:	4603      	mov	r3, r0
			b_duty = T2 + T0 * 0.5;
 80022d6:	ee19 0a10 	vmov	r0, s18
			a_duty = T1 + T0 * 0.5;
 80022da:	9300      	str	r3, [sp, #0]
			b_duty = T1 + T2 + T0 * 0.5;
 80022dc:	f7fe f93c 	bl	8000558 <__aeabi_f2d>
 80022e0:	4632      	mov	r2, r6
 80022e2:	463b      	mov	r3, r7
 80022e4:	f7fd ffda 	bl	800029c <__adddf3>
 80022e8:	f7fe fc66 	bl	8000bb8 <__aeabi_d2f>
			c_duty = T0 * 0.5;
 80022ec:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
			b_duty = T1 + T2 + T0 * 0.5;
 80022f0:	ee00 0a90 	vmov	s1, r0
			c_duty = T0 * 0.5;
 80022f4:	ee28 1a01 	vmul.f32	s2, s16, s2
			break;
 80022f8:	ed9d 0a00 	vldr	s0, [sp]
 80022fc:	e7cb      	b.n	8002296 <foc_setPhaseVoltage+0x14e>
			a_duty = T1 + T0 * 0.5;
 80022fe:	ee18 0a10 	vmov	r0, s16
 8002302:	f7fe f929 	bl	8000558 <__aeabi_f2d>
 8002306:	4b42      	ldr	r3, [pc, #264]	; (8002410 <foc_setPhaseVoltage+0x2c8>)
 8002308:	2200      	movs	r2, #0
 800230a:	f7fe f97d 	bl	8000608 <__aeabi_dmul>
 800230e:	4606      	mov	r6, r0
 8002310:	460f      	mov	r7, r1
 8002312:	ee19 0a90 	vmov	r0, s19
 8002316:	f7fe f91f 	bl	8000558 <__aeabi_f2d>
 800231a:	463b      	mov	r3, r7
 800231c:	4632      	mov	r2, r6
 800231e:	f7fd ffbd 	bl	800029c <__adddf3>
 8002322:	f7fe fc49 	bl	8000bb8 <__aeabi_d2f>
 8002326:	4603      	mov	r3, r0
			b_duty = T1 + T2 + T0 * 0.5;
 8002328:	ee18 0a90 	vmov	r0, s17
 800232c:	e7d5      	b.n	80022da <foc_setPhaseVoltage+0x192>
			a_duty = T0 * 0.5;
 800232e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002332:	ee28 0a00 	vmul.f32	s0, s16, s0
			b_duty = T1 + T2 + T0 * 0.5;
 8002336:	ee18 0a10 	vmov	r0, s16
			a_duty = T0 * 0.5;
 800233a:	ed8d 0a01 	vstr	s0, [sp, #4]
			b_duty = T1 + T2 + T0 * 0.5;
 800233e:	f7fe f90b 	bl	8000558 <__aeabi_f2d>
 8002342:	4b33      	ldr	r3, [pc, #204]	; (8002410 <foc_setPhaseVoltage+0x2c8>)
 8002344:	2200      	movs	r2, #0
 8002346:	f7fe f95f 	bl	8000608 <__aeabi_dmul>
 800234a:	4606      	mov	r6, r0
 800234c:	460f      	mov	r7, r1
 800234e:	ee18 0a90 	vmov	r0, s17
 8002352:	f7fe f901 	bl	8000558 <__aeabi_f2d>
 8002356:	463b      	mov	r3, r7
 8002358:	4632      	mov	r2, r6
 800235a:	f7fd ff9f 	bl	800029c <__adddf3>
 800235e:	f7fe fc2b 	bl	8000bb8 <__aeabi_d2f>
 8002362:	4603      	mov	r3, r0
 8002364:	ee00 3a90 	vmov	s1, r3
			c_duty = T2 + T0 * 0.5;
 8002368:	ee19 0a10 	vmov	r0, s18
 800236c:	e783      	b.n	8002276 <foc_setPhaseVoltage+0x12e>
			a_duty = T0 * 0.5;
 800236e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002372:	ee28 0a00 	vmul.f32	s0, s16, s0
			b_duty = T1 + T0 * 0.5;
 8002376:	ee18 0a10 	vmov	r0, s16
			a_duty = T0 * 0.5;
 800237a:	ed8d 0a01 	vstr	s0, [sp, #4]
			b_duty = T1 + T0 * 0.5;
 800237e:	f7fe f8eb 	bl	8000558 <__aeabi_f2d>
 8002382:	4b23      	ldr	r3, [pc, #140]	; (8002410 <foc_setPhaseVoltage+0x2c8>)
 8002384:	2200      	movs	r2, #0
 8002386:	f7fe f93f 	bl	8000608 <__aeabi_dmul>
 800238a:	4606      	mov	r6, r0
 800238c:	460f      	mov	r7, r1
 800238e:	ee19 0a90 	vmov	r0, s19
 8002392:	f7fe f8e1 	bl	8000558 <__aeabi_f2d>
 8002396:	463b      	mov	r3, r7
 8002398:	4632      	mov	r2, r6
 800239a:	f7fd ff7f 	bl	800029c <__adddf3>
 800239e:	f7fe fc0b 	bl	8000bb8 <__aeabi_d2f>
 80023a2:	4603      	mov	r3, r0
 80023a4:	ee00 3a90 	vmov	s1, r3
			c_duty = T1 + T2 + T0 * 0.5;
 80023a8:	ee18 0a90 	vmov	r0, s17
 80023ac:	e763      	b.n	8002276 <foc_setPhaseVoltage+0x12e>
			a_duty = T2 + T0 * 0.5;
 80023ae:	ee18 0a10 	vmov	r0, s16
 80023b2:	f7fe f8d1 	bl	8000558 <__aeabi_f2d>
 80023b6:	4b16      	ldr	r3, [pc, #88]	; (8002410 <foc_setPhaseVoltage+0x2c8>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	f7fe f925 	bl	8000608 <__aeabi_dmul>
 80023be:	4606      	mov	r6, r0
 80023c0:	460f      	mov	r7, r1
 80023c2:	ee19 0a10 	vmov	r0, s18
 80023c6:	f7fe f8c7 	bl	8000558 <__aeabi_f2d>
 80023ca:	463b      	mov	r3, r7
 80023cc:	4632      	mov	r2, r6
 80023ce:	f7fd ff65 	bl	800029c <__adddf3>
 80023d2:	f7fe fbf1 	bl	8000bb8 <__aeabi_d2f>
			b_duty = T0 * 0.5;
 80023d6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
			a_duty = T2 + T0 * 0.5;
 80023da:	4603      	mov	r3, r0
			c_duty = T1 + T2 + T0 * 0.5;
 80023dc:	ee18 0a90 	vmov	r0, s17
 80023e0:	e746      	b.n	8002270 <foc_setPhaseVoltage+0x128>
	T0 = 1 - T1 - T2;
 80023e2:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002414 <foc_setPhaseVoltage+0x2cc>
 80023e6:	eef0 0a41 	vmov.f32	s1, s2
 80023ea:	eeb0 0a41 	vmov.f32	s0, s2
 80023ee:	e752      	b.n	8002296 <foc_setPhaseVoltage+0x14e>
 80023f0:	c6f05b8e 	.word	0xc6f05b8e
 80023f4:	3fc279a6 	.word	0x3fc279a6
 80023f8:	60000000 	.word	0x60000000
 80023fc:	401921fb 	.word	0x401921fb
 8002400:	5f375a86 	.word	0x5f375a86
 8002404:	3f860a92 	.word	0x3f860a92
 8002408:	40c90fdb 	.word	0x40c90fdb
 800240c:	3f747645 	.word	0x3f747645
 8002410:	3fe00000 	.word	0x3fe00000
 8002414:	00000000 	.word	0x00000000

08002418 <foc_update>:
void foc_update(MotorDriver *driver, float target) {
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	4604      	mov	r4, r0
 800241c:	ed2d 8b04 	vpush	{d8-d9}
 8002420:	eef0 8a40 	vmov.f32	s17, s0
		as5048a_getAngle(driver);
 8002424:	f7fe fe78 	bl	8001118 <as5048a_getAngle>
			driver->pole_pairs * driver->angle - _PI, _2PI); /* + driver->offset*/
 8002428:	f8b4 31a4 	ldrh.w	r3, [r4, #420]	; 0x1a4
 800242c:	edd4 6a63 	vldr	s13, [r4, #396]	; 0x18c
 8002430:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002528 <foc_update+0x110>
	sin_val = FastTrigonometry_sin(driver->angle_electrical);
 8002434:	4d3d      	ldr	r5, [pc, #244]	; (800252c <foc_update+0x114>)
	cos_val = FastTrigonometry_cos(driver->angle_electrical);
 8002436:	4e3e      	ldr	r6, [pc, #248]	; (8002530 <foc_update+0x118>)
			driver->pole_pairs * driver->angle - _PI, _2PI); /* + driver->offset*/
 8002438:	ee07 3a90 	vmov	s15, r3
 800243c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	driver->angle_electrical = fmod(
 8002440:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8002444:	ee17 0a10 	vmov	r0, s14
 8002448:	f7fe f886 	bl	8000558 <__aeabi_f2d>
 800244c:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8002518 <foc_update+0x100>
 8002450:	ec41 0b10 	vmov	d0, r0, r1
 8002454:	f006 ff2a 	bl	80092ac <fmod>
 8002458:	ec51 0b10 	vmov	r0, r1, d0
 800245c:	f7fe fbac 	bl	8000bb8 <__aeabi_d2f>
	float i_alpha = driver->i_a;
 8002460:	ed94 9a02 	vldr	s18, [r4, #8]
	float i_beta = (driver->i_a + 2 * driver->i_b) * _1_SQRT3;
 8002464:	ed94 7a03 	vldr	s14, [r4, #12]
 8002468:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800246c:	eef0 6a49 	vmov.f32	s13, s18
 8002470:	eee7 6a27 	vfma.f32	s13, s14, s15
	driver->angle_electrical = fmod(
 8002474:	ee08 0a10 	vmov	s16, r0
	float i_beta = (driver->i_a + 2 * driver->i_b) * _1_SQRT3;
 8002478:	ee16 0a90 	vmov	r0, s13
	driver->angle_electrical = fmod(
 800247c:	ed84 8a65 	vstr	s16, [r4, #404]	; 0x194
	float i_beta = (driver->i_a + 2 * driver->i_b) * _1_SQRT3;
 8002480:	f7fe f86a 	bl	8000558 <__aeabi_f2d>
 8002484:	a326      	add	r3, pc, #152	; (adr r3, 8002520 <foc_update+0x108>)
 8002486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248a:	f7fe f8bd 	bl	8000608 <__aeabi_dmul>
 800248e:	f7fe fb93 	bl	8000bb8 <__aeabi_d2f>
	sin_val = FastTrigonometry_sin(driver->angle_electrical);
 8002492:	eeb0 0a48 	vmov.f32	s0, s16
	float i_beta = (driver->i_a + 2 * driver->i_b) * _1_SQRT3;
 8002496:	ee08 0a10 	vmov	s16, r0
	sin_val = FastTrigonometry_sin(driver->angle_electrical);
 800249a:	f000 f89d 	bl	80025d8 <FastTrigonometry_sin>
 800249e:	eef0 7a40 	vmov.f32	s15, s0
	cos_val = FastTrigonometry_cos(driver->angle_electrical);
 80024a2:	ed94 0a65 	vldr	s0, [r4, #404]	; 0x194
	sin_val = FastTrigonometry_sin(driver->angle_electrical);
 80024a6:	edc5 7a00 	vstr	s15, [r5]
	cos_val = FastTrigonometry_cos(driver->angle_electrical);
 80024aa:	f000 f86d 	bl	8002588 <FastTrigonometry_cos>
	driver->i_d = i_alpha * cos_val + i_beta * sin_val;
 80024ae:	edd5 7a00 	vldr	s15, [r5]
	cos_val = FastTrigonometry_cos(driver->angle_electrical);
 80024b2:	ed86 0a00 	vstr	s0, [r6]
	driver->i_d = i_alpha * cos_val + i_beta * sin_val;
 80024b6:	ee28 7a27 	vmul.f32	s14, s16, s15
	driver->i_q = i_beta * cos_val - i_alpha * sin_val;
 80024ba:	ee67 7ac9 	vnmul.f32	s15, s15, s18
	driver->i_d = i_alpha * cos_val + i_beta * sin_val;
 80024be:	eea9 7a00 	vfma.f32	s14, s18, s0
		as5048a_getVelocity(driver);
 80024c2:	4620      	mov	r0, r4
	driver->i_q = i_beta * cos_val - i_alpha * sin_val;
 80024c4:	eee8 7a00 	vfma.f32	s15, s16, s0
	driver->i_d = i_alpha * cos_val + i_beta * sin_val;
 80024c8:	ed84 7a04 	vstr	s14, [r4, #16]
	driver->i_q = i_beta * cos_val - i_alpha * sin_val;
 80024cc:	edc4 7a05 	vstr	s15, [r4, #20]
		as5048a_getVelocity(driver);
 80024d0:	f7fe fe66 	bl	80011a0 <as5048a_getVelocity>
		foc_pi_control(driver, target);
 80024d4:	eeb0 0a68 	vmov.f32	s0, s17
 80024d8:	4620      	mov	r0, r4
 80024da:	f7ff fde1 	bl	80020a0 <foc_pi_control>
	driver->V_alpha = cos_val * driver->V_d - sin_val * driver->V_q;
 80024de:	edd4 0a07 	vldr	s1, [r4, #28]
 80024e2:	edd5 6a00 	vldr	s13, [r5]
 80024e6:	ed96 6a00 	vldr	s12, [r6]
 80024ea:	ed94 0a08 	vldr	s0, [r4, #32]
 80024ee:	ee26 7ae0 	vnmul.f32	s14, s13, s1
	driver->V_beta = sin_val * driver->V_d + cos_val * driver->V_q;
 80024f2:	ee66 7a20 	vmul.f32	s15, s12, s1
}
 80024f6:	ecbd 8b04 	vpop	{d8-d9}
	driver->V_alpha = cos_val * driver->V_d - sin_val * driver->V_q;
 80024fa:	eea0 7a06 	vfma.f32	s14, s0, s12
	foc_setPhaseVoltage(driver, driver->V_d, driver->V_q);
 80024fe:	4620      	mov	r0, r4
	driver->V_beta = sin_val * driver->V_d + cos_val * driver->V_q;
 8002500:	eee0 7a26 	vfma.f32	s15, s0, s13
	driver->V_alpha = cos_val * driver->V_d - sin_val * driver->V_q;
 8002504:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
	driver->V_beta = sin_val * driver->V_d + cos_val * driver->V_q;
 8002508:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
}
 800250c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	foc_setPhaseVoltage(driver, driver->V_d, driver->V_q);
 8002510:	f7ff be1a 	b.w	8002148 <foc_setPhaseVoltage>
 8002514:	f3af 8000 	nop.w
 8002518:	60000000 	.word	0x60000000
 800251c:	401921fb 	.word	0x401921fb
 8002520:	561abec8 	.word	0x561abec8
 8002524:	3fe279a7 	.word	0x3fe279a7
 8002528:	c0490fdb 	.word	0xc0490fdb
 800252c:	20002224 	.word	0x20002224
 8002530:	20002220 	.word	0x20002220
 8002534:	00000000 	.word	0x00000000

08002538 <FastTrigonometry_buildTable>:
/**
 * @brief Builds sine lookup table using parameters in header file, where MAX_CIRCLE_ANGLE defines
 * the resultion of the approximation.
 * Source: https://www.flipcode.com/archives/Fast_Trigonometry_Functions_Using_Lookup_Tables.shtml
 */
void FastTrigonometry_buildTable() {
 8002538:	b510      	push	{r4, lr}
	long i;
	for (i = 0; i < MAX_CIRCLE_ANGLE; i++) {
 800253a:	2400      	movs	r4, #0
 800253c:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8002540:	da19      	bge.n	8002576 <FastTrigonometry_buildTable+0x3e>
		cossin_table[i] = (float) sin((double) i * _PI / HALF_MAX_CIRCLE_ANGLE);
 8002542:	4620      	mov	r0, r4
 8002544:	f7fd fff6 	bl	8000534 <__aeabi_i2d>
 8002548:	a30d      	add	r3, pc, #52	; (adr r3, 8002580 <FastTrigonometry_buildTable+0x48>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	f7fe f85b 	bl	8000608 <__aeabi_dmul>
 8002552:	2200      	movs	r2, #0
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <FastTrigonometry_buildTable+0x40>)
 8002556:	f7fe f857 	bl	8000608 <__aeabi_dmul>
 800255a:	ec41 0b10 	vmov	d0, r0, r1
 800255e:	f006 fe17 	bl	8009190 <sin>
 8002562:	ec51 0b10 	vmov	r0, r1, d0
 8002566:	f7fe fb27 	bl	8000bb8 <__aeabi_d2f>
 800256a:	4b04      	ldr	r3, [pc, #16]	; (800257c <FastTrigonometry_buildTable+0x44>)
 800256c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002570:	6018      	str	r0, [r3, #0]
	for (i = 0; i < MAX_CIRCLE_ANGLE; i++) {
 8002572:	3401      	adds	r4, #1
 8002574:	e7e2      	b.n	800253c <FastTrigonometry_buildTable+0x4>
	}
}
 8002576:	bd10      	pop	{r4, pc}
 8002578:	3f300000 	.word	0x3f300000
 800257c:	20002228 	.word	0x20002228
 8002580:	60000000 	.word	0x60000000
 8002584:	400921fb 	.word	0x400921fb

08002588 <FastTrigonometry_cos>:
 * @brief Fast cosine approximation using lookup table.
 * @param x: input angle in radians
 * Source: https://www.flipcode.com/archives/Fast_Trigonometry_Functions_Using_Lookup_Tables.shtml
 */
float FastTrigonometry_cos(float x) {
	float f = x * HALF_MAX_CIRCLE_ANGLE / _PI;
 8002588:	eddf 7a10 	vldr	s15, [pc, #64]	; 80025cc <FastTrigonometry_cos+0x44>
 800258c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002590:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80025d0 <FastTrigonometry_cos+0x48>
 8002594:	eec0 7a07 	vdiv.f32	s15, s0, s14
	int i = (int) f;
 8002598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800259c:	ee17 3a90 	vmov	r3, s15

	if (i < 0) {
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	db09      	blt.n	80025b8 <FastTrigonometry_cos+0x30>
		return cossin_table[((-i) + QUARTER_MAX_CIRCLE_ANGLE)
				& MASK_MAX_CIRCLE_ANGLE];
	}
	else {
		return cossin_table[(i + QUARTER_MAX_CIRCLE_ANGLE)
 80025a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
				& MASK_MAX_CIRCLE_ANGLE];
 80025a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
		return cossin_table[(i + QUARTER_MAX_CIRCLE_ANGLE)
 80025ac:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <FastTrigonometry_cos+0x4c>)
 80025ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80025b2:	ed93 0a00 	vldr	s0, [r3]
	}
}
 80025b6:	4770      	bx	lr
		return cossin_table[((-i) + QUARTER_MAX_CIRCLE_ANGLE)
 80025b8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
				& MASK_MAX_CIRCLE_ANGLE];
 80025bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
		return cossin_table[((-i) + QUARTER_MAX_CIRCLE_ANGLE)
 80025c0:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <FastTrigonometry_cos+0x4c>)
 80025c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80025c6:	ed93 0a00 	vldr	s0, [r3]
 80025ca:	4770      	bx	lr
 80025cc:	45800000 	.word	0x45800000
 80025d0:	40490fdb 	.word	0x40490fdb
 80025d4:	20002228 	.word	0x20002228

080025d8 <FastTrigonometry_sin>:
 * @brief Fast sine approximation using lookup table.
 * @param x: input angle in radians
 * Source: https://www.flipcode.com/archives/Fast_Trigonometry_Functions_Using_Lookup_Tables.shtml
 */
float FastTrigonometry_sin(float x) {
	float f = x * HALF_MAX_CIRCLE_ANGLE / _PI;
 80025d8:	eddf 7a10 	vldr	s15, [pc, #64]	; 800261c <FastTrigonometry_sin+0x44>
 80025dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80025e0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002620 <FastTrigonometry_sin+0x48>
 80025e4:	eec0 7a07 	vdiv.f32	s15, s0, s14
	int i = (int) f;
 80025e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ec:	ee17 3a90 	vmov	r3, s15
	if (i < 0) {
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	db07      	blt.n	8002604 <FastTrigonometry_sin+0x2c>
		return cossin_table[(-((-i) & MASK_MAX_CIRCLE_ANGLE))
				+ MAX_CIRCLE_ANGLE];
	}
	else {
		return cossin_table[i & MASK_MAX_CIRCLE_ANGLE];
 80025f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025f8:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <FastTrigonometry_sin+0x4c>)
 80025fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80025fe:	ed93 0a00 	vldr	s0, [r3]
	}
}
 8002602:	4770      	bx	lr
		return cossin_table[(-((-i) & MASK_MAX_CIRCLE_ANGLE))
 8002604:	425b      	negs	r3, r3
 8002606:	f3c3 030c 	ubfx	r3, r3, #0, #13
				+ MAX_CIRCLE_ANGLE];
 800260a:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
		return cossin_table[(-((-i) & MASK_MAX_CIRCLE_ANGLE))
 800260e:	4a05      	ldr	r2, [pc, #20]	; (8002624 <FastTrigonometry_sin+0x4c>)
 8002610:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002614:	ed93 0a00 	vldr	s0, [r3]
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	45800000 	.word	0x45800000
 8002620:	40490fdb 	.word	0x40490fdb
 8002624:	20002228 	.word	0x20002228

08002628 <FastTrigonometry_atan2>:
 */
float FastTrigonometry_atan2(float y, float x) {
	const float n1 = 0.97239411f;
	const float n2 = -0.19194795f;
	float result = 0.0f;
	if (x != 0.0f) {
 8002628:	eef5 0a40 	vcmp.f32	s1, #0.0
 800262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002630:	d03f      	beq.n	80026b2 <FastTrigonometry_atan2+0x8a>
		const union {
			float flVal;
			uint32_t nVal;
		} tXSign = { x };

		if (fabsf(x) >= fabsf(y)) {
 8002632:	eef0 7ae0 	vabs.f32	s15, s1
 8002636:	eeb0 7ac0 	vabs.f32	s14, s0
 800263a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800263e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002642:	db1d      	blt.n	8002680 <FastTrigonometry_atan2+0x58>
			union {
				float flVal;
				uint32_t nVal;
			} tOffset = { _PI };
			// Add or subtract PI based on y's sign.
			tOffset.nVal |= tYSign.nVal & 0x80000000u;
 8002644:	ee10 3a10 	vmov	r3, s0
 8002648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800264c:	4a20      	ldr	r2, [pc, #128]	; (80026d0 <FastTrigonometry_atan2+0xa8>)
 800264e:	431a      	orrs	r2, r3
			// No offset if x is positive, so multiply by 0 or based on x's sign.
			tOffset.nVal *= tXSign.nVal >> 31;
 8002650:	ee10 3a90 	vmov	r3, s1
 8002654:	0fdb      	lsrs	r3, r3, #31
 8002656:	fb03 f302 	mul.w	r3, r3, r2
			result = tOffset.flVal;
			const float z = y / x;
 800265a:	ee80 7a20 	vdiv.f32	s14, s0, s1
			result += (n1 + n2 * z * z) * z;
 800265e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80026d4 <FastTrigonometry_atan2+0xac>
 8002662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800266a:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80026d8 <FastTrigonometry_atan2+0xb0>
 800266e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8002672:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002676:	ee07 3a10 	vmov	s14, r3
 800267a:	ee37 0a87 	vadd.f32	s0, s15, s14
 800267e:	4770      	bx	lr
				float flVal;
				uint32_t nVal;
			} tOffset = { _PI_2 };

			// Add or subtract PI/2 based on y's sign.
			tOffset.nVal |= tYSign.nVal & 0x80000000u;
 8002680:	ee10 3a10 	vmov	r3, s0
 8002684:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <FastTrigonometry_atan2+0xb4>)
 800268a:	4313      	orrs	r3, r2
			result = tOffset.flVal;
			const float z = x / y;
 800268c:	eec0 7a80 	vdiv.f32	s15, s1, s0
			result -= (n1 + n2 * z * z) * z;
 8002690:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80026d4 <FastTrigonometry_atan2+0xac>
 8002694:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002698:	ee20 0a27 	vmul.f32	s0, s0, s15
 800269c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80026d8 <FastTrigonometry_atan2+0xb0>
 80026a0:	ee30 0a07 	vadd.f32	s0, s0, s14
 80026a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80026a8:	ee07 3a90 	vmov	s15, r3
 80026ac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80026b0:	4770      	bx	lr
		}
	}
	else if (y > 0.0f) {
 80026b2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80026b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ba:	dd02      	ble.n	80026c2 <FastTrigonometry_atan2+0x9a>
		result = _PI_2;
 80026bc:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80026e0 <FastTrigonometry_atan2+0xb8>
 80026c0:	4770      	bx	lr
	}
	else if (y < 0.0f) {
 80026c2:	d402      	bmi.n	80026ca <FastTrigonometry_atan2+0xa2>
	float result = 0.0f;
 80026c4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80026e4 <FastTrigonometry_atan2+0xbc>
 80026c8:	4770      	bx	lr
		result = -_PI_2;
 80026ca:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80026e8 <FastTrigonometry_atan2+0xc0>
	}
	return result;
}
 80026ce:	4770      	bx	lr
 80026d0:	40490fdb 	.word	0x40490fdb
 80026d4:	be448e01 	.word	0xbe448e01
 80026d8:	3f78eed2 	.word	0x3f78eed2
 80026dc:	3fc90fdb 	.word	0x3fc90fdb
 80026e0:	3fc90fdb 	.word	0x3fc90fdb
 80026e4:	00000000 	.word	0x00000000
 80026e8:	bfc90fdb 	.word	0xbfc90fdb

080026ec <lpf_init>:
 *      Author: maxborglowe
 */

#include "LowPassFilter.h"

void lpf_init(struct LPF *lpf, float Tf_init){
 80026ec:	b510      	push	{r4, lr}
	lpf->Tf = Tf_init;
	lpf->out_prev = 0;
 80026ee:	2300      	movs	r3, #0
	lpf->Tf = Tf_init;
 80026f0:	ed80 0a02 	vstr	s0, [r0, #8]
	lpf->out_prev = 0;
 80026f4:	6043      	str	r3, [r0, #4]
void lpf_init(struct LPF *lpf, float Tf_init){
 80026f6:	4604      	mov	r4, r0
	lpf->timestamp_prev = get_ms();
 80026f8:	f001 faec 	bl	8003cd4 <get_ms>
 80026fc:	6020      	str	r0, [r4, #0]
}
 80026fe:	bd10      	pop	{r4, pc}

08002700 <lpf_exec>:

float lpf_exec(struct LPF *lpf, float input){
 8002700:	b510      	push	{r4, lr}
 8002702:	4604      	mov	r4, r0
 8002704:	ed2d 8b02 	vpush	{d8}
 8002708:	eeb0 8a40 	vmov.f32	s16, s0
	uint32_t timestamp = get_ms();
 800270c:	f001 fae2 	bl	8003cd4 <get_ms>
	float dt = (timestamp - lpf->timestamp_prev) * 1e-3f;
 8002710:	6823      	ldr	r3, [r4, #0]

	if (dt < 0.0f ) dt = 1e-3f;
	else if(dt > 0.3f) {
 8002712:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002770 <lpf_exec+0x70>
	float dt = (timestamp - lpf->timestamp_prev) * 1e-3f;
 8002716:	1ac3      	subs	r3, r0, r3
 8002718:	ee07 3a90 	vmov	s15, r3
 800271c:	eef8 7a67 	vcvt.f32.u32	s15, s15
	else if(dt > 0.3f) {
 8002720:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002728:	dc19      	bgt.n	800275e <lpf_exec+0x5e>
		lpf->out_prev = input;
		lpf->timestamp_prev = timestamp;
		return input;
	}

	float alpha = lpf->Tf/(lpf->Tf + dt);
 800272a:	ed94 7a02 	vldr	s14, [r4, #8]
 800272e:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8002774 <lpf_exec+0x74>
	float out = alpha * lpf->out_prev + (1.0f - alpha) * input;
 8002732:	edd4 6a01 	vldr	s13, [r4, #4]
 8002736:	6020      	str	r0, [r4, #0]
	float alpha = lpf->Tf/(lpf->Tf + dt);
 8002738:	eef0 5a47 	vmov.f32	s11, s14
 800273c:	eee7 5a86 	vfma.f32	s11, s15, s12
	float out = alpha * lpf->out_prev + (1.0f - alpha) * input;
 8002740:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	float alpha = lpf->Tf/(lpf->Tf + dt);
 8002744:	eec7 7a25 	vdiv.f32	s15, s14, s11
	float out = alpha * lpf->out_prev + (1.0f - alpha) * input;
 8002748:	ee30 0a67 	vsub.f32	s0, s0, s15
 800274c:	ee20 0a08 	vmul.f32	s0, s0, s16
	lpf->out_prev = out;
	lpf->timestamp_prev = timestamp;
	return out;
}
 8002750:	ecbd 8b02 	vpop	{d8}
	float out = alpha * lpf->out_prev + (1.0f - alpha) * input;
 8002754:	eea6 0aa7 	vfma.f32	s0, s13, s15
	return out;
 8002758:	ed84 0a01 	vstr	s0, [r4, #4]
}
 800275c:	bd10      	pop	{r4, pc}
		return input;
 800275e:	eeb0 0a48 	vmov.f32	s0, s16
}
 8002762:	ecbd 8b02 	vpop	{d8}
 8002766:	6020      	str	r0, [r4, #0]
 8002768:	ed84 0a01 	vstr	s0, [r4, #4]
 800276c:	bd10      	pop	{r4, pc}
 800276e:	bf00      	nop
 8002770:	43960000 	.word	0x43960000
 8002774:	3a83126f 	.word	0x3a83126f

08002778 <filterUpdate>:
 * @param Current acceleration on x-axis from accelerometer
 * @param Current acceleration on y-axis from accelerometer
 * @param Current acceleration on z-axis from accelerometer
 * @param Time passed since last conversion
 */
void filterUpdate(float gx, float gy, float gz, float ax, float ay, float az, float time) {
 8002778:	b410      	push	{r4}
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1,
			q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800277a:	4ac8      	ldr	r2, [pc, #800]	; (8002a9c <filterUpdate+0x324>)
 800277c:	4bc8      	ldr	r3, [pc, #800]	; (8002aa0 <filterUpdate+0x328>)
 800277e:	48c9      	ldr	r0, [pc, #804]	; (8002aa4 <filterUpdate+0x32c>)
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002780:	4cc9      	ldr	r4, [pc, #804]	; (8002aa8 <filterUpdate+0x330>)
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002782:	ed92 4a00 	vldr	s8, [r2]
void filterUpdate(float gx, float gy, float gz, float ax, float ay, float az, float time) {
 8002786:	ed2d 8b10 	vpush	{d8-d15}
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800278a:	edd3 8a00 	vldr	s17, [r3]
 800278e:	ed90 6a00 	vldr	s12, [r0]
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002792:	edd4 3a00 	vldr	s7, [r4]
 8002796:	edd3 4a00 	vldr	s9, [r3]
 800279a:	edd0 6a00 	vldr	s13, [r0]
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800279e:	ed94 8a00 	vldr	s16, [r4]
 80027a2:	ed92 7a00 	vldr	s14, [r2]
 80027a6:	ed90 5a00 	vldr	s10, [r0]
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80027aa:	edd4 5a00 	vldr	s11, [r4]
 80027ae:	edd2 7a00 	vldr	s15, [r2]
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80027b2:	ee26 6a01 	vmul.f32	s12, s12, s2
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80027b6:	ee21 7a47 	vnmul.f32	s14, s2, s14
 80027ba:	ee60 6ae6 	vnmul.f32	s13, s1, s13
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80027be:	ee67 7aa0 	vmul.f32	s15, s15, s1
 80027c2:	eee3 6a80 	vfma.f32	s13, s7, s0
 80027c6:	eee5 7a81 	vfma.f32	s15, s11, s2
 80027ca:	eea8 6aa0 	vfma.f32	s12, s17, s1
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80027ce:	eea8 7a20 	vfma.f32	s14, s16, s1
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80027d2:	edd3 5a00 	vldr	s11, [r3]
 80027d6:	eea4 6a00 	vfma.f32	s12, s8, s0
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80027da:	eee4 6a81 	vfma.f32	s13, s9, s2
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80027de:	eea5 7a00 	vfma.f32	s14, s10, s0
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80027e2:	eee5 7ac0 	vfms.f32	s15, s11, s0

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80027e6:	eef5 1a40 	vcmp.f32	s3, #0.0
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80027ea:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80027ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80027f2:	ee66 3a64 	vnmul.f32	s7, s12, s9
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80027f6:	ee26 1aa4 	vmul.f32	s2, s13, s9
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80027fa:	ee27 4a24 	vmul.f32	s8, s14, s9
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80027fe:	ee67 4aa4 	vmul.f32	s9, s15, s9
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002802:	d105      	bne.n	8002810 <filterUpdate+0x98>
 8002804:	eeb5 2a40 	vcmp.f32	s4, #0.0
 8002808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280c:	f000 813f 	beq.w	8002a8e <filterUpdate+0x316>
		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002810:	ee22 7aa2 	vmul.f32	s14, s5, s5
 */
float invSqrt(float x) {
	float halfx = 0.5f * x;
	float y = x;
	long i = *(long*) &y;
	i = 0x5f3759df - (i >> 1);
 8002814:	49a5      	ldr	r1, [pc, #660]	; (8002aac <filterUpdate+0x334>)
		_2q0 = 2.0f * q0;
 8002816:	edd4 8a00 	vldr	s17, [r4]
		_2q1 = 2.0f * q1;
 800281a:	edd2 aa00 	vldr	s21, [r2]
		_2q2 = 2.0f * q2;
 800281e:	edd3 7a00 	vldr	s15, [r3]
		_2q3 = 2.0f * q3;
 8002822:	edd0 9a00 	vldr	s19, [r0]
		_4q0 = 4.0f * q0;
 8002826:	ed94 aa00 	vldr	s20, [r4]
		_4q1 = 4.0f * q1;
 800282a:	ed92 ba00 	vldr	s22, [r2]
		_4q2 = 4.0f * q2;
 800282e:	ed93 ca00 	vldr	s24, [r3]
		_8q1 = 8.0f * q1;
 8002832:	edd2 ba00 	vldr	s23, [r2]
		_8q2 = 8.0f * q2;
 8002836:	edd3 da00 	vldr	s27, [r3]
		q0q0 = q0 * q0;
 800283a:	edd4 ca00 	vldr	s25, [r4]
 800283e:	edd4 6a00 	vldr	s13, [r4]
		q1q1 = q1 * q1;
 8002842:	ed92 ea00 	vldr	s28, [r2]
 8002846:	ed92 da00 	vldr	s26, [r2]
		q2q2 = q2 * q2;
 800284a:	ed93 8a00 	vldr	s16, [r3]
 800284e:	ed93 5a00 	vldr	s10, [r3]
		q3q3 = q3 * q3;
 8002852:	ed90 9a00 	vldr	s18, [r0]
 8002856:	edd0 0a00 	vldr	s1, [r0]
 800285a:	eea2 7a02 	vfma.f32	s14, s4, s4
	float halfx = 0.5f * x;
 800285e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002862:	eea1 7aa1 	vfma.f32	s14, s3, s3
	y = *(float*) &i;
	y = y * (1.5f - (halfx * y * y));
 8002866:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
	y = *(float*) &i;
 800286a:	ee17 ca10 	vmov	ip, s14
 800286e:	eba1 0c6c 	sub.w	ip, r1, ip, asr #1
 8002872:	ee05 ca90 	vmov	s11, ip
		q0q0 = q0 * q0;
 8002876:	ee6c caa6 	vmul.f32	s25, s25, s13
	float halfx = 0.5f * x;
 800287a:	ee67 6a00 	vmul.f32	s13, s14, s0
	y = y * (1.5f - (halfx * y * y));
 800287e:	ee25 7ae5 	vnmul.f32	s14, s11, s11
 8002882:	eef0 ea46 	vmov.f32	s29, s12
 8002886:	eee7 ea26 	vfma.f32	s29, s14, s13
		q2q2 = q2 * q2;
 800288a:	ee28 5a05 	vmul.f32	s10, s16, s10
	y = y * (1.5f - (halfx * y * y));
 800288e:	eeb0 7a6e 	vmov.f32	s14, s29
		_4q1 = 4.0f * q1;
 8002892:	eeb1 8a00 	vmov.f32	s16, #16	; 0x40800000  4.0
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1
 8002896:	edd2 ea00 	vldr	s29, [r2]
	y = y * (1.5f - (halfx * y * y));
 800289a:	ee65 5a87 	vmul.f32	s11, s11, s14
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
 800289e:	ed93 7a00 	vldr	s14, [r3]
		_4q2 = 4.0f * q2;
 80028a2:	ee2c ca08 	vmul.f32	s24, s24, s16
 80028a6:	ee27 7a08 	vmul.f32	s14, s14, s16
	y = y * (1.5f - (halfx * y * y));
 80028aa:	ee25 fae5 	vnmul.f32	s30, s11, s11
		q1q1 = q1 * q1;
 80028ae:	ee2e da0d 	vmul.f32	s26, s28, s26
		q3q3 = q3 * q3;
 80028b2:	ee29 9a20 	vmul.f32	s18, s18, s1
 80028b6:	eeb0 ea4c 	vmov.f32	s28, s24
	y = y * (1.5f - (halfx * y * y));
 80028ba:	eef0 0a46 	vmov.f32	s1, s12
 80028be:	eeef 0a26 	vfma.f32	s1, s30, s13
 80028c2:	ee9c ea87 	vfnms.f32	s28, s25, s14
 80028c6:	ee65 5aa0 	vmul.f32	s11, s11, s1
		ax *= recipNorm;
 80028ca:	eeb0 7a4e 	vmov.f32	s14, s28
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80028ce:	ed90 ea00 	vldr	s28, [r0]
 80028d2:	edd0 0a00 	vldr	s1, [r0]
 80028d6:	ee60 0a88 	vmul.f32	s1, s1, s16
 80028da:	ee2e ea08 	vmul.f32	s28, s28, s16
 80028de:	ee60 0a85 	vmul.f32	s1, s1, s10
 80028e2:	ee3d 5a05 	vadd.f32	s10, s26, s10
 80028e6:	eeed 0a0e 	vfma.f32	s1, s26, s28
		_8q1 = 8.0f * q1;
 80028ea:	eeb2 da00 	vmov.f32	s26, #32	; 0x41000000  8.0
		_8q2 = 8.0f * q2;
 80028ee:	ee6d da8d 	vmul.f32	s27, s27, s26
		_4q1 = 4.0f * q1;
 80028f2:	ee2b ba08 	vmul.f32	s22, s22, s16
 80028f6:	eead 7a85 	vfma.f32	s14, s27, s10
 80028fa:	ee6e 6a88 	vmul.f32	s13, s29, s16
		ax *= recipNorm;
 80028fe:	ee61 1aa5 	vmul.f32	s3, s3, s11
		_2q0 = 2.0f * q0;
 8002902:	ee78 8aa8 	vadd.f32	s17, s17, s17
		_2q1 = 2.0f * q1;
 8002906:	eef0 da4b 	vmov.f32	s27, s22
 800290a:	eedc daa6 	vfnms.f32	s27, s25, s13
 800290e:	eea2 9aa5 	vfma.f32	s18, s5, s11
 8002912:	eea1 7aa8 	vfma.f32	s14, s3, s17
 8002916:	ee7a aaaa 	vadd.f32	s21, s21, s21
		_8q1 = 8.0f * q1;
 800291a:	ee6b ba8d 	vmul.f32	s23, s23, s26
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800291e:	eee1 0aea 	vfms.f32	s1, s3, s21
 8002922:	eef0 6a6d 	vmov.f32	s13, s27
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002926:	ee25 2ac2 	vnmul.f32	s4, s11, s4
 800292a:	eeeb 6a85 	vfma.f32	s13, s23, s10
		_2q2 = 2.0f * q2;
 800292e:	ee77 7aa7 	vadd.f32	s15, s15, s15
		_2q3 = 2.0f * q3;
 8002932:	eeac 7a09 	vfma.f32	s14, s24, s18
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002936:	eee2 0a27 	vfma.f32	s1, s4, s15
		_2q3 = 2.0f * q3;
 800293a:	ee79 9aa9 	vadd.f32	s19, s19, s19
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800293e:	ee61 7aa7 	vmul.f32	s15, s3, s15
		_4q0 = 4.0f * q0;
 8002942:	ee2a 8a08 	vmul.f32	s16, s20, s16
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
 8002946:	eea2 7a29 	vfma.f32	s14, s4, s19
 800294a:	eee8 7a05 	vfma.f32	s15, s16, s10
 800294e:	eeeb 6a09 	vfma.f32	s13, s22, s18
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002952:	ee20 5aa0 	vmul.f32	s10, s1, s1
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002956:	eee2 7a2a 	vfma.f32	s15, s4, s21
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1
 800295a:	eee1 6ae9 	vfms.f32	s13, s3, s19
 800295e:	eea7 5a07 	vfma.f32	s10, s14, s14
 8002962:	eee2 6a28 	vfma.f32	s13, s4, s17
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002966:	eea7 5aa7 	vfma.f32	s10, s15, s15
	y = y * (1.5f - (halfx * y * y));
 800296a:	eef0 1a46 	vmov.f32	s3, s12
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800296e:	eea6 5aa6 	vfma.f32	s10, s13, s13
		qDot1 -= beta * s0;
 8002972:	eddf 2a4f 	vldr	s5, [pc, #316]	; 8002ab0 <filterUpdate+0x338>
	y = *(float*) &i;
 8002976:	ee15 ca10 	vmov	ip, s10
 800297a:	eba1 016c 	sub.w	r1, r1, ip, asr #1
 800297e:	ee05 1a90 	vmov	s11, r1
	y = y * (1.5f - (halfx * y * y));
 8002982:	ee20 5a45 	vnmul.f32	s10, s0, s10
 8002986:	ee25 2aa5 	vmul.f32	s4, s11, s11
		qDot1 -= beta * s0;
 800298a:	ee67 7aa2 	vmul.f32	s15, s15, s5
	y = y * (1.5f - (halfx * y * y));
 800298e:	eee5 1a02 	vfma.f32	s3, s10, s4
		qDot2 -= beta * s1;
 8002992:	ee66 6aa2 	vmul.f32	s13, s13, s5
	y = y * (1.5f - (halfx * y * y));
 8002996:	ee65 5aa1 	vmul.f32	s11, s11, s3
		qDot3 -= beta * s2;
 800299a:	ee27 7a22 	vmul.f32	s14, s14, s5
	y = y * (1.5f - (halfx * y * y));
 800299e:	ee25 2aa5 	vmul.f32	s4, s11, s11
		qDot4 -= beta * s3;
 80029a2:	ee60 2aa2 	vmul.f32	s5, s1, s5
	y = y * (1.5f - (halfx * y * y));
 80029a6:	eea5 6a02 	vfma.f32	s12, s10, s4
		qDot1 -= beta * s0;
 80029aa:	ee26 6a65 	vnmul.f32	s12, s12, s11
 80029ae:	eee6 3a27 	vfma.f32	s7, s12, s15
		qDot2 -= beta * s1;
 80029b2:	eea6 1a26 	vfma.f32	s2, s12, s13
		qDot3 -= beta * s2;
 80029b6:	eea6 4a07 	vfma.f32	s8, s12, s14
		qDot4 -= beta * s3;
 80029ba:	eee6 4a22 	vfma.f32	s9, s12, s5
	i = 0x5f3759df - (i >> 1);
 80029be:	493b      	ldr	r1, [pc, #236]	; (8002aac <filterUpdate+0x334>)
	q0 += qDot1 * time;
 80029c0:	edd4 7a00 	vldr	s15, [r4]
 80029c4:	eee3 7a83 	vfma.f32	s15, s7, s6
}
 80029c8:	ecbd 8b10 	vpop	{d8-d15}
	q0 += qDot1 * time;
 80029cc:	edc4 7a00 	vstr	s15, [r4]
	q1 += qDot2 * time;
 80029d0:	ed92 7a00 	vldr	s14, [r2]
 80029d4:	eea1 7a03 	vfma.f32	s14, s2, s6
	float halfx = 0.5f * x;
 80029d8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	q1 += qDot2 * time;
 80029dc:	ed82 7a00 	vstr	s14, [r2]
	q2 += qDot3 * time;
 80029e0:	ed93 7a00 	vldr	s14, [r3]
 80029e4:	eea4 7a03 	vfma.f32	s14, s8, s6
	y = y * (1.5f - (halfx * y * y));
 80029e8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
	q2 += qDot3 * time;
 80029ec:	ed83 7a00 	vstr	s14, [r3]
	q3 += qDot4 * time;
 80029f0:	ed90 7a00 	vldr	s14, [r0]
 80029f4:	eea4 7a83 	vfma.f32	s14, s9, s6
 80029f8:	ed80 7a00 	vstr	s14, [r0]
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80029fc:	ed94 3a00 	vldr	s6, [r4]
 8002a00:	edd4 3a00 	vldr	s7, [r4]
 8002a04:	edd2 6a00 	vldr	s13, [r2]
 8002a08:	edd2 2a00 	vldr	s5, [r2]
 8002a0c:	ed93 4a00 	vldr	s8, [r3]
 8002a10:	edd3 4a00 	vldr	s9, [r3]
 8002a14:	ed90 5a00 	vldr	s10, [r0]
 8002a18:	ed90 7a00 	vldr	s14, [r0]
	q0 *= recipNorm;
 8002a1c:	edd4 5a00 	vldr	s11, [r4]
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002a20:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8002a24:	eee3 6a23 	vfma.f32	s13, s6, s7
 8002a28:	eee4 6a24 	vfma.f32	s13, s8, s9
 8002a2c:	eee5 6a07 	vfma.f32	s13, s10, s14
	y = y * (1.5f - (halfx * y * y));
 8002a30:	eeb0 5a67 	vmov.f32	s10, s15
	y = *(float*) &i;
 8002a34:	ee16 ca90 	vmov	ip, s13
 8002a38:	eba1 016c 	sub.w	r1, r1, ip, asr #1
 8002a3c:	ee07 1a10 	vmov	s14, r1
	y = y * (1.5f - (halfx * y * y));
 8002a40:	ee66 6a66 	vnmul.f32	s13, s12, s13
 8002a44:	ee27 6a07 	vmul.f32	s12, s14, s14
 8002a48:	eea6 5a86 	vfma.f32	s10, s13, s12
 8002a4c:	ee27 7a05 	vmul.f32	s14, s14, s10
	y = y * (1.5f - (halfx * y * y));
 8002a50:	ee27 6a07 	vmul.f32	s12, s14, s14
 8002a54:	eee6 7a86 	vfma.f32	s15, s13, s12
 8002a58:	ee67 7a27 	vmul.f32	s15, s14, s15
	q0 *= recipNorm;
 8002a5c:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8002a60:	ed84 7a00 	vstr	s14, [r4]
	q1 *= recipNorm;
 8002a64:	ed92 7a00 	vldr	s14, [r2]
 8002a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a6c:	ed82 7a00 	vstr	s14, [r2]
	q2 *= recipNorm;
 8002a70:	ed93 7a00 	vldr	s14, [r3]
 8002a74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a78:	ed83 7a00 	vstr	s14, [r3]
	q3 *= recipNorm;
 8002a7c:	ed90 7a00 	vldr	s14, [r0]
 8002a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a84:	edc0 7a00 	vstr	s15, [r0]
}
 8002a88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a8c:	4770      	bx	lr
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002a8e:	eef5 2a40 	vcmp.f32	s5, #0.0
 8002a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a96:	d092      	beq.n	80029be <filterUpdate+0x246>
 8002a98:	e6ba      	b.n	8002810 <filterUpdate+0x98>
 8002a9a:	bf00      	nop
 8002a9c:	20002208 	.word	0x20002208
 8002aa0:	2000220c 	.word	0x2000220c
 8002aa4:	20002210 	.word	0x20002210
 8002aa8:	20002004 	.word	0x20002004
 8002aac:	5f3759df 	.word	0x5f3759df
 8002ab0:	3dcccccd 	.word	0x3dcccccd

08002ab4 <ToEulerAngles>:
struct EulerAngles ToEulerAngles(float _q0, float _q1, float _q2, float _q3) {
 8002ab4:	b500      	push	{lr}
			_q0 * _q0 - _q1 * _q1 - _q2 * _q2 + _q3 * _q3);
 8002ab6:	ee61 7aa1 	vmul.f32	s15, s3, s3
struct EulerAngles ToEulerAngles(float _q0, float _q1, float _q2, float _q3) {
 8002aba:	ed2d 8b04 	vpush	{d8-d9}
 8002abe:	eee1 7a41 	vfms.f32	s15, s2, s2
 8002ac2:	b089      	sub	sp, #36	; 0x24
 8002ac4:	eeb0 9a40 	vmov.f32	s18, s0
 8002ac8:	eee9 7a09 	vfma.f32	s15, s18, s18
	angles.x = -FastTrigonometry_atan2(2 * (_q0 * _q1 + _q2 * _q3),
 8002acc:	ee21 0a21 	vmul.f32	s0, s2, s3
struct EulerAngles ToEulerAngles(float _q0, float _q1, float _q2, float _q3) {
 8002ad0:	eeb0 8a61 	vmov.f32	s16, s3
 8002ad4:	eef0 9a60 	vmov.f32	s19, s1
	angles.y = -asin(2 * (_q1 * _q3 - _q0 * _q2));
 8002ad8:	ee28 8a69 	vnmul.f32	s16, s16, s19
struct EulerAngles ToEulerAngles(float _q0, float _q1, float _q2, float _q3) {
 8002adc:	eef0 8a41 	vmov.f32	s17, s2
	angles.x = -FastTrigonometry_atan2(2 * (_q0 * _q1 + _q2 * _q3),
 8002ae0:	eea9 0a20 	vfma.f32	s0, s18, s1
 8002ae4:	eee0 7ae0 	vfms.f32	s15, s1, s1
	angles.y = -asin(2 * (_q1 * _q3 - _q0 * _q2));
 8002ae8:	eea9 8a28 	vfma.f32	s16, s18, s17
	angles.x = -FastTrigonometry_atan2(2 * (_q0 * _q1 + _q2 * _q3),
 8002aec:	eef0 0a67 	vmov.f32	s1, s15
 8002af0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002af4:	f7ff fd98 	bl	8002628 <FastTrigonometry_atan2>
	angles.y = -asin(2 * (_q1 * _q3 - _q0 * _q2));
 8002af8:	ee78 7a08 	vadd.f32	s15, s16, s16
	angles.x = -FastTrigonometry_atan2(2 * (_q0 * _q1 + _q2 * _q3),
 8002afc:	eef1 8a40 	vneg.f32	s17, s0
	angles.y = -asin(2 * (_q1 * _q3 - _q0 * _q2));
 8002b00:	ee17 0a90 	vmov	r0, s15
 8002b04:	f7fd fd28 	bl	8000558 <__aeabi_f2d>
 8002b08:	ec41 0b10 	vmov	d0, r0, r1
 8002b0c:	f006 fb94 	bl	8009238 <asin>
 8002b10:	ec51 0b10 	vmov	r0, r1, d0
 8002b14:	f7fe f850 	bl	8000bb8 <__aeabi_d2f>
}
 8002b18:	ed9d 1a07 	vldr	s2, [sp, #28]
 8002b1c:	ee00 0a90 	vmov	s1, r0
 8002b20:	eeb0 0a68 	vmov.f32	s0, s17
 8002b24:	b009      	add	sp, #36	; 0x24
 8002b26:	ecbd 8b04 	vpop	{d8-d9}
 8002b2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b2e:	bf00      	nop

08002b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b30:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b32:	2300      	movs	r3, #0
{
 8002b34:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b36:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8002b3a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b3e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002b42:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b46:	4923      	ldr	r1, [pc, #140]	; (8002bd4 <SystemClock_Config+0xa4>)
 8002b48:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b4a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b4c:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b4e:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b50:	4a21      	ldr	r2, [pc, #132]	; (8002bd8 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b52:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002b56:	6408      	str	r0, [r1, #64]	; 0x40
 8002b58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b5a:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8002b5e:	9100      	str	r1, [sp, #0]
 8002b60:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	6813      	ldr	r3, [r2, #0]
 8002b66:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	6813      	ldr	r3, [r2, #0]
 8002b72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b76:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b78:	2301      	movs	r3, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b7a:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b7c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b7e:	2202      	movs	r2, #2
 8002b80:	2300      	movs	r3, #0
 8002b82:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002b86:	2208      	movs	r2, #8
 8002b88:	2354      	movs	r3, #84	; 0x54
 8002b8a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b8e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b90:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b92:	2202      	movs	r2, #2
 8002b94:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 84;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b96:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b98:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b9c:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b9e:	910c      	str	r1, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ba0:	f001 feac 	bl	80048fc <HAL_RCC_OscConfig>
 8002ba4:	b108      	cbz	r0, 8002baa <SystemClock_Config+0x7a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002ba8:	e7fe      	b.n	8002ba8 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002baa:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bac:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bae:	2502      	movs	r5, #2
 8002bb0:	240f      	movs	r4, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bb2:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bba:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bbc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002bc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bc4:	f002 f8b6 	bl	8004d34 <HAL_RCC_ClockConfig>
 8002bc8:	b108      	cbz	r0, 8002bce <SystemClock_Config+0x9e>
 8002bca:	b672      	cpsid	i
	while (1) {
 8002bcc:	e7fe      	b.n	8002bcc <SystemClock_Config+0x9c>
}
 8002bce:	b015      	add	sp, #84	; 0x54
 8002bd0:	bd30      	pop	{r4, r5, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	00000000 	.word	0x00000000

08002be0 <main>:
{
 8002be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002be4:	ed2d 8b02 	vpush	{d8}
 8002be8:	b0a1      	sub	sp, #132	; 0x84
	volatile clock_t us_t = 0;
 8002bea:	2400      	movs	r4, #0
	volatile float ina_ref = 0.0f;    //should be at 1.65 V for INA2181
 8002bec:	2300      	movs	r3, #0
	volatile clock_t us_t = 0;
 8002bee:	9402      	str	r4, [sp, #8]
	volatile clock_t us_t_prev = 0;
 8002bf0:	9403      	str	r4, [sp, #12]
	volatile float ina_ref = 0.0f;    //should be at 1.65 V for INA2181
 8002bf2:	9304      	str	r3, [sp, #16]
  HAL_Init();
 8002bf4:	f001 f8be 	bl	8003d74 <HAL_Init>
  SystemClock_Config();
 8002bf8:	f7ff ff9a 	bl	8002b30 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfc:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
 8002c00:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c04:	4dae      	ldr	r5, [pc, #696]	; (8002ec0 <main+0x2e0>)
 8002c06:	9406      	str	r4, [sp, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c0a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(FLAG_FUNCTION_DONE_GPIO_Port, FLAG_FUNCTION_DONE_Pin, GPIO_PIN_RESET);
 8002c0c:	48ad      	ldr	r0, [pc, #692]	; (8002ec4 <main+0x2e4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c0e:	f043 0304 	orr.w	r3, r3, #4
 8002c12:	632b      	str	r3, [r5, #48]	; 0x30
 8002c14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	9306      	str	r3, [sp, #24]
 8002c1c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c1e:	9407      	str	r4, [sp, #28]
 8002c20:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c26:	632b      	str	r3, [r5, #48]	; 0x30
 8002c28:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2e:	9307      	str	r3, [sp, #28]
 8002c30:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c32:	9408      	str	r4, [sp, #32]
 8002c34:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	632b      	str	r3, [r5, #48]	; 0x30
 8002c3c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	9308      	str	r3, [sp, #32]
 8002c44:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c46:	9409      	str	r4, [sp, #36]	; 0x24
 8002c48:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002c4a:	f043 0302 	orr.w	r3, r3, #2
 8002c4e:	632b      	str	r3, [r5, #48]	; 0x30
 8002c50:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(FLAG_FUNCTION_DONE_GPIO_Port, FLAG_FUNCTION_DONE_Pin, GPIO_PIN_RESET);
 8002c58:	4622      	mov	r2, r4
 8002c5a:	2108      	movs	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(FLAG_FUNCTION_DONE_GPIO_Port, FLAG_FUNCTION_DONE_Pin, GPIO_PIN_RESET);
 8002c5e:	f001 fe3b 	bl	80048d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, FLAG_WHILE_LOOP_DONE_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8002c62:	4899      	ldr	r0, [pc, #612]	; (8002ec8 <main+0x2e8>)
 8002c64:	4622      	mov	r2, r4
 8002c66:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002c6a:	f001 fe35 	bl	80048d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, BMI270_CS_Pin|MotorX_encoder_CS_Pin|MotorY_encoder_CS_Pin|MotorZ_encoder_CS_Pin, GPIO_PIN_SET);
 8002c6e:	4897      	ldr	r0, [pc, #604]	; (8002ecc <main+0x2ec>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	2171      	movs	r1, #113	; 0x71
 8002c74:	f001 fe30 	bl	80048d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nSLEEP_GPIO_Port, nSLEEP_Pin, GPIO_PIN_RESET);
 8002c78:	4894      	ldr	r0, [pc, #592]	; (8002ecc <main+0x2ec>)
 8002c7a:	4622      	mov	r2, r4
 8002c7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c80:	f001 fe2a 	bl	80048d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Reset_program_Pin;
 8002c84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c88:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Reset_program_GPIO_Port, &GPIO_InitStruct);
 8002c8c:	488e      	ldr	r0, [pc, #568]	; (8002ec8 <main+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(Reset_program_GPIO_Port, &GPIO_InitStruct);
 8002c90:	a918      	add	r1, sp, #96	; 0x60
  GPIO_InitStruct.Pin = FLAG_FUNCTION_DONE_Pin;
 8002c92:	2600      	movs	r6, #0
 8002c94:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = Reset_program_Pin;
 8002c96:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(Reset_program_GPIO_Port, &GPIO_InitStruct);
 8002c9a:	f001 fd2b 	bl	80046f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FLAG_FUNCTION_DONE_Pin;
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	2301      	movs	r3, #1
  HAL_GPIO_Init(FLAG_FUNCTION_DONE_GPIO_Port, &GPIO_InitStruct);
 8002ca2:	4888      	ldr	r0, [pc, #544]	; (8002ec4 <main+0x2e4>)
 8002ca4:	a918      	add	r1, sp, #96	; 0x60
  GPIO_InitStruct.Pin = FLAG_FUNCTION_DONE_Pin;
 8002ca6:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8002caa:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(FLAG_FUNCTION_DONE_GPIO_Port, &GPIO_InitStruct);
 8002cae:	f001 fd21 	bl	80046f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FLAG_WHILE_LOOP_DONE_Pin;
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	2301      	movs	r3, #1
  HAL_GPIO_Init(FLAG_WHILE_LOOP_DONE_GPIO_Port, &GPIO_InitStruct);
 8002cb6:	4884      	ldr	r0, [pc, #528]	; (8002ec8 <main+0x2e8>)
 8002cb8:	a918      	add	r1, sp, #96	; 0x60
  GPIO_InitStruct.Pin = FLAG_WHILE_LOOP_DONE_Pin;
 8002cba:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 8002cbe:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(FLAG_WHILE_LOOP_DONE_GPIO_Port, &GPIO_InitStruct);
 8002cc2:	f001 fd17 	bl	80046f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BMI270_CS_Pin|MotorX_encoder_CS_Pin|MotorY_encoder_CS_Pin|MotorZ_encoder_CS_Pin;
 8002cc6:	2271      	movs	r2, #113	; 0x71
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cce:	487f      	ldr	r0, [pc, #508]	; (8002ecc <main+0x2ec>)
  GPIO_InitStruct.Pin = BMI270_CS_Pin|MotorX_encoder_CS_Pin|MotorY_encoder_CS_Pin|MotorZ_encoder_CS_Pin;
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd4:	a918      	add	r1, sp, #96	; 0x60
  GPIO_InitStruct.Pin = BMI270_CS_Pin|MotorX_encoder_CS_Pin|MotorY_encoder_CS_Pin|MotorZ_encoder_CS_Pin;
 8002cd6:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cda:	f001 fd0b 	bl	80046f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = nFAULT_Z_Pin|nFAULT_X_Pin|nFAULT_Y_Pin;
 8002cde:	f44f 4250 	mov.w	r2, #53248	; 0xd000
 8002ce2:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce4:	4879      	ldr	r0, [pc, #484]	; (8002ecc <main+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce8:	a918      	add	r1, sp, #96	; 0x60
  GPIO_InitStruct.Pin = nFAULT_Z_Pin|nFAULT_X_Pin|nFAULT_Y_Pin;
 8002cea:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cee:	f001 fd01 	bl	80046f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = nSLEEP_Pin;
 8002cf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cf6:	2301      	movs	r3, #1
  HAL_GPIO_Init(nSLEEP_GPIO_Port, &GPIO_InitStruct);
 8002cf8:	4874      	ldr	r0, [pc, #464]	; (8002ecc <main+0x2ec>)
 8002cfa:	a918      	add	r1, sp, #96	; 0x60
  GPIO_InitStruct.Pin = nSLEEP_Pin;
 8002cfc:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 8002d00:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d04:	f44f 7600 	mov.w	r6, #512	; 0x200
  HAL_GPIO_Init(nSLEEP_GPIO_Port, &GPIO_InitStruct);
 8002d08:	f001 fcf4 	bl	80046f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d0c:	2701      	movs	r7, #1
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d12:	486d      	ldr	r0, [pc, #436]	; (8002ec8 <main+0x2e8>)
 8002d14:	a918      	add	r1, sp, #96	; 0x60
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d16:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8002d1a:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d1e:	f001 fce9 	bl	80046f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d22:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2a:	4866      	ldr	r0, [pc, #408]	; (8002ec4 <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d2c:	961a      	str	r6, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2e:	a918      	add	r1, sp, #96	; 0x60
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d30:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d34:	f001 fcde 	bl	80046f4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d38:	4622      	mov	r2, r4
 8002d3a:	4621      	mov	r1, r4
 8002d3c:	2028      	movs	r0, #40	; 0x28
 8002d3e:	f001 fab1 	bl	80042a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d42:	2028      	movs	r0, #40	; 0x28
 8002d44:	f001 fae6 	bl	8004314 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8002d48:	4861      	ldr	r0, [pc, #388]	; (8002ed0 <main+0x2f0>)
 8002d4a:	4962      	ldr	r1, [pc, #392]	; (8002ed4 <main+0x2f4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d4c:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002d4e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d52:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d54:	e9c0 4403 	strd	r4, r4, [r0, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d58:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.Init.BaudRate = 115200;
 8002d5c:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d60:	6143      	str	r3, [r0, #20]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8002d62:	f003 f9fd 	bl	8006160 <HAL_HalfDuplex_Init>
 8002d66:	b108      	cbz	r0, 8002d6c <main+0x18c>
 8002d68:	b672      	cpsid	i
	while (1) {
 8002d6a:	e7fe      	b.n	8002d6a <main+0x18a>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d6c:	9005      	str	r0, [sp, #20]
 8002d6e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hadc1.Instance = ADC1;
 8002d70:	4c59      	ldr	r4, [pc, #356]	; (8002ed8 <main+0x2f8>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d76:	632b      	str	r3, [r5, #48]	; 0x30
 8002d78:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7e:	4606      	mov	r6, r0
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002d80:	4602      	mov	r2, r0
 8002d82:	4601      	mov	r1, r0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d84:	9305      	str	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002d86:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d88:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002d8a:	f001 fa8b 	bl	80042a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002d8e:	2038      	movs	r0, #56	; 0x38
 8002d90:	f001 fac0 	bl	8004314 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8002d94:	4b51      	ldr	r3, [pc, #324]	; (8002edc <main+0x2fc>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d96:	4a52      	ldr	r2, [pc, #328]	; (8002ee0 <main+0x300>)
  hadc1.Instance = ADC1;
 8002d98:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ENABLE;
 8002d9a:	2701      	movs	r7, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d9c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  hadc1.Init.NbrOfConversion = 5;
 8002da0:	2305      	movs	r3, #5
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002da2:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8002da4:	e9cd 6618 	strd	r6, r6, [sp, #96]	; 0x60
 8002da8:	e9cd 661a 	strd	r6, r6, [sp, #104]	; 0x68
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002dac:	60a6      	str	r6, [r4, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002dae:	f884 6020 	strb.w	r6, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002db2:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002db4:	60e6      	str	r6, [r4, #12]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002db6:	6061      	str	r1, [r4, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002db8:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 5;
 8002dba:	61e3      	str	r3, [r4, #28]
  hadc1.Init.ScanConvMode = ENABLE;
 8002dbc:	6127      	str	r7, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002dbe:	7627      	strb	r7, [r4, #24]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002dc0:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002dc4:	6167      	str	r7, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002dc6:	f001 f813 	bl	8003df0 <HAL_ADC_Init>
 8002dca:	b108      	cbz	r0, 8002dd0 <main+0x1f0>
 8002dcc:	b672      	cpsid	i
	while (1) {
 8002dce:	e7fe      	b.n	8002dce <main+0x1ee>
  sConfig.Channel = ADC_CHANNEL_0;
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002dd4:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dd6:	a918      	add	r1, sp, #96	; 0x60
 8002dd8:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8002dda:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dde:	f001 f9a5 	bl	800412c <HAL_ADC_ConfigChannel>
 8002de2:	b108      	cbz	r0, 8002de8 <main+0x208>
 8002de4:	b672      	cpsid	i
	while (1) {
 8002de6:	e7fe      	b.n	8002de6 <main+0x206>
  sConfig.Channel = ADC_CHANNEL_4;
 8002de8:	2204      	movs	r2, #4
 8002dea:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dec:	a918      	add	r1, sp, #96	; 0x60
 8002dee:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 8002df0:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002df4:	f001 f99a 	bl	800412c <HAL_ADC_ConfigChannel>
 8002df8:	b108      	cbz	r0, 8002dfe <main+0x21e>
 8002dfa:	b672      	cpsid	i
	while (1) {
 8002dfc:	e7fe      	b.n	8002dfc <main+0x21c>
  sConfig.Channel = ADC_CHANNEL_9;
 8002dfe:	2209      	movs	r2, #9
 8002e00:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e02:	a918      	add	r1, sp, #96	; 0x60
 8002e04:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_9;
 8002e06:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e0a:	f001 f98f 	bl	800412c <HAL_ADC_ConfigChannel>
 8002e0e:	b108      	cbz	r0, 8002e14 <main+0x234>
 8002e10:	b672      	cpsid	i
	while (1) {
 8002e12:	e7fe      	b.n	8002e12 <main+0x232>
  sConfig.Channel = ADC_CHANNEL_10;
 8002e14:	220a      	movs	r2, #10
 8002e16:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e18:	a918      	add	r1, sp, #96	; 0x60
 8002e1a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_10;
 8002e1c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e20:	f001 f984 	bl	800412c <HAL_ADC_ConfigChannel>
 8002e24:	b108      	cbz	r0, 8002e2a <main+0x24a>
 8002e26:	b672      	cpsid	i
	while (1) {
 8002e28:	e7fe      	b.n	8002e28 <main+0x248>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e2a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_13;
 8002e2c:	220d      	movs	r2, #13
 8002e2e:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e30:	a918      	add	r1, sp, #96	; 0x60
  sConfig.Channel = ADC_CHANNEL_13;
 8002e32:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e36:	f001 f979 	bl	800412c <HAL_ADC_ConfigChannel>
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	b108      	cbz	r0, 8002e42 <main+0x262>
 8002e3e:	b672      	cpsid	i
	while (1) {
 8002e40:	e7fe      	b.n	8002e40 <main+0x260>
  htim1.Instance = TIM1;
 8002e42:	4d28      	ldr	r5, [pc, #160]	; (8002ee4 <main+0x304>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e44:	900c      	str	r0, [sp, #48]	; 0x30
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e46:	2620      	movs	r6, #32
 8002e48:	4632      	mov	r2, r6
 8002e4a:	4601      	mov	r1, r0
 8002e4c:	a818      	add	r0, sp, #96	; 0x60
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e4e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e52:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 8002e56:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 8002e5a:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e5e:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e60:	9410      	str	r4, [sp, #64]	; 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e62:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e64:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e66:	f003 faf3 	bl	8006450 <memset>
  htim1.Instance = TIM1;
 8002e6a:	4a1f      	ldr	r2, [pc, #124]	; (8002ee8 <main+0x308>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002e6c:	60ae      	str	r6, [r5, #8]
  htim1.Init.Period = 1024-1;
 8002e6e:	f240 33ff 	movw	r3, #1023	; 0x3ff
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e72:	4628      	mov	r0, r5
  htim1.Init.RepetitionCounter = 0;
 8002e74:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.Prescaler = 1;
 8002e78:	606f      	str	r7, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e7a:	61ac      	str	r4, [r5, #24]
  htim1.Instance = TIM1;
 8002e7c:	602a      	str	r2, [r5, #0]
  htim1.Init.Period = 1024-1;
 8002e7e:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e80:	f002 fc90 	bl	80057a4 <HAL_TIM_Base_Init>
 8002e84:	b108      	cbz	r0, 8002e8a <main+0x2aa>
 8002e86:	b672      	cpsid	i
	while (1) {
 8002e88:	e7fe      	b.n	8002e88 <main+0x2a8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e8e:	a90c      	add	r1, sp, #48	; 0x30
 8002e90:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e92:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e94:	f003 f850 	bl	8005f38 <HAL_TIM_ConfigClockSource>
 8002e98:	b108      	cbz	r0, 8002e9e <main+0x2be>
 8002e9a:	b672      	cpsid	i
	while (1) {
 8002e9c:	e7fe      	b.n	8002e9c <main+0x2bc>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	f002 fd7e 	bl	80059a0 <HAL_TIM_PWM_Init>
 8002ea4:	b108      	cbz	r0, 8002eaa <main+0x2ca>
 8002ea6:	b672      	cpsid	i
	while (1) {
 8002ea8:	e7fe      	b.n	8002ea8 <main+0x2c8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eaa:	2400      	movs	r4, #0
 8002eac:	2500      	movs	r5, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002eae:	480d      	ldr	r0, [pc, #52]	; (8002ee4 <main+0x304>)
 8002eb0:	a90a      	add	r1, sp, #40	; 0x28
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eb2:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002eb6:	f003 f8ef 	bl	8006098 <HAL_TIMEx_MasterConfigSynchronization>
 8002eba:	b1b8      	cbz	r0, 8002eec <main+0x30c>
 8002ebc:	b672      	cpsid	i
	while (1) {
 8002ebe:	e7fe      	b.n	8002ebe <main+0x2de>
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40020000 	.word	0x40020000
 8002ec8:	40020800 	.word	0x40020800
 8002ecc:	40020400 	.word	0x40020400
 8002ed0:	2000e678 	.word	0x2000e678
 8002ed4:	40004400 	.word	0x40004400
 8002ed8:	2000e4e0 	.word	0x2000e4e0
 8002edc:	40012000 	.word	0x40012000
 8002ee0:	0f000001 	.word	0x0f000001
 8002ee4:	2000e590 	.word	0x2000e590
 8002ee8:	40010000 	.word	0x40010000
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002eec:	2660      	movs	r6, #96	; 0x60
 8002eee:	2700      	movs	r7, #0
 8002ef0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ef4:	4602      	mov	r2, r0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ef6:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ef8:	2604      	movs	r6, #4
 8002efa:	2700      	movs	r7, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002efc:	4899      	ldr	r0, [pc, #612]	; (8003164 <main+0x584>)
 8002efe:	a910      	add	r1, sp, #64	; 0x40
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f00:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8002f04:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f08:	f002 ff06 	bl	8005d18 <HAL_TIM_PWM_ConfigChannel>
 8002f0c:	b108      	cbz	r0, 8002f12 <main+0x332>
 8002f0e:	b672      	cpsid	i
	while (1) {
 8002f10:	e7fe      	b.n	8002f10 <main+0x330>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f12:	4894      	ldr	r0, [pc, #592]	; (8003164 <main+0x584>)
 8002f14:	2204      	movs	r2, #4
 8002f16:	a910      	add	r1, sp, #64	; 0x40
 8002f18:	f002 fefe 	bl	8005d18 <HAL_TIM_PWM_ConfigChannel>
 8002f1c:	b108      	cbz	r0, 8002f22 <main+0x342>
 8002f1e:	b672      	cpsid	i
	while (1) {
 8002f20:	e7fe      	b.n	8002f20 <main+0x340>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f22:	4890      	ldr	r0, [pc, #576]	; (8003164 <main+0x584>)
 8002f24:	2208      	movs	r2, #8
 8002f26:	a910      	add	r1, sp, #64	; 0x40
 8002f28:	f002 fef6 	bl	8005d18 <HAL_TIM_PWM_ConfigChannel>
 8002f2c:	b108      	cbz	r0, 8002f32 <main+0x352>
 8002f2e:	b672      	cpsid	i
	while (1) {
 8002f30:	e7fe      	b.n	8002f30 <main+0x350>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f32:	2200      	movs	r2, #0
 8002f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f38:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f3a:	a918      	add	r1, sp, #96	; 0x60
 8002f3c:	4889      	ldr	r0, [pc, #548]	; (8003164 <main+0x584>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f3e:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 8002f42:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
 8002f46:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f4a:	f003 f8df 	bl	800610c <HAL_TIMEx_ConfigBreakDeadTime>
 8002f4e:	4606      	mov	r6, r0
 8002f50:	b108      	cbz	r0, 8002f56 <main+0x376>
 8002f52:	b672      	cpsid	i
	while (1) {
 8002f54:	e7fe      	b.n	8002f54 <main+0x374>
  HAL_TIM_MspPostInit(&htim1);
 8002f56:	4883      	ldr	r0, [pc, #524]	; (8003164 <main+0x584>)
 8002f58:	f000 fd78 	bl	8003a4c <HAL_TIM_MspPostInit>
  hspi1.Instance = SPI1;
 8002f5c:	4882      	ldr	r0, [pc, #520]	; (8003168 <main+0x588>)
 8002f5e:	4a83      	ldr	r2, [pc, #524]	; (800316c <main+0x58c>)
 8002f60:	6002      	str	r2, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f62:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f66:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f6a:	6041      	str	r1, [r0, #4]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f6c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002f6e:	2110      	movs	r1, #16
  hspi1.Init.CRCPolynomial = 10;
 8002f70:	220a      	movs	r2, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f72:	e9c0 6602 	strd	r6, r6, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f76:	e9c0 6604 	strd	r6, r6, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f7a:	e9c0 6608 	strd	r6, r6, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f7e:	6286      	str	r6, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002f80:	61c1      	str	r1, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 8002f82:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f84:	f001 fff4 	bl	8004f70 <HAL_SPI_Init>
 8002f88:	b108      	cbz	r0, 8002f8e <main+0x3ae>
 8002f8a:	b672      	cpsid	i
	while (1) {
 8002f8c:	e7fe      	b.n	8002f8c <main+0x3ac>
  htim2.Instance = TIM2;
 8002f8e:	4e78      	ldr	r6, [pc, #480]	; (8003170 <main+0x590>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f90:	9010      	str	r0, [sp, #64]	; 0x40
  htim2.Instance = TIM2;
 8002f92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 1;
 8002f96:	2301      	movs	r3, #1
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f98:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f9c:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fa0:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
 8002fa4:	e9cd 001a 	strd	r0, r0, [sp, #104]	; 0x68
 8002fa8:	e9cd 001c 	strd	r0, r0, [sp, #112]	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fac:	9013      	str	r0, [sp, #76]	; 0x4c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fae:	901e      	str	r0, [sp, #120]	; 0x78
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fb0:	6130      	str	r0, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fb2:	61b0      	str	r0, [r6, #24]
  htim2.Instance = TIM2;
 8002fb4:	6032      	str	r2, [r6, #0]
  htim2.Init.Prescaler = 1;
 8002fb6:	6073      	str	r3, [r6, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002fb8:	2220      	movs	r2, #32
  htim2.Init.Period = 1024-1;
 8002fba:	f240 33ff 	movw	r3, #1023	; 0x3ff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fbe:	4630      	mov	r0, r6
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002fc0:	60b2      	str	r2, [r6, #8]
  htim2.Init.Period = 1024-1;
 8002fc2:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fc4:	f002 fbee 	bl	80057a4 <HAL_TIM_Base_Init>
 8002fc8:	b108      	cbz	r0, 8002fce <main+0x3ee>
 8002fca:	b672      	cpsid	i
	while (1) {
 8002fcc:	e7fe      	b.n	8002fcc <main+0x3ec>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fd2:	a910      	add	r1, sp, #64	; 0x40
 8002fd4:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fd6:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fd8:	f002 ffae 	bl	8005f38 <HAL_TIM_ConfigClockSource>
 8002fdc:	b108      	cbz	r0, 8002fe2 <main+0x402>
 8002fde:	b672      	cpsid	i
	while (1) {
 8002fe0:	e7fe      	b.n	8002fe0 <main+0x400>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	f002 fcdc 	bl	80059a0 <HAL_TIM_PWM_Init>
 8002fe8:	b108      	cbz	r0, 8002fee <main+0x40e>
 8002fea:	b672      	cpsid	i
	while (1) {
 8002fec:	e7fe      	b.n	8002fec <main+0x40c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002fee:	4630      	mov	r0, r6
 8002ff0:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ff2:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ff6:	f003 f84f 	bl	8006098 <HAL_TIMEx_MasterConfigSynchronization>
 8002ffa:	b108      	cbz	r0, 8003000 <main+0x420>
 8002ffc:	b672      	cpsid	i
	while (1) {
 8002ffe:	e7fe      	b.n	8002ffe <main+0x41e>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003000:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003002:	2660      	movs	r6, #96	; 0x60
 8003004:	2700      	movs	r7, #0
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003006:	f04f 0804 	mov.w	r8, #4
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800300a:	4859      	ldr	r0, [pc, #356]	; (8003170 <main+0x590>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800300c:	921a      	str	r2, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800300e:	a918      	add	r1, sp, #96	; 0x60
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003010:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003014:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003018:	f002 fe7e 	bl	8005d18 <HAL_TIM_PWM_ConfigChannel>
 800301c:	b108      	cbz	r0, 8003022 <main+0x442>
 800301e:	b672      	cpsid	i
	while (1) {
 8003020:	e7fe      	b.n	8003020 <main+0x440>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003022:	4853      	ldr	r0, [pc, #332]	; (8003170 <main+0x590>)
 8003024:	4642      	mov	r2, r8
 8003026:	a918      	add	r1, sp, #96	; 0x60
 8003028:	f002 fe76 	bl	8005d18 <HAL_TIM_PWM_ConfigChannel>
 800302c:	b108      	cbz	r0, 8003032 <main+0x452>
 800302e:	b672      	cpsid	i
	while (1) {
 8003030:	e7fe      	b.n	8003030 <main+0x450>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003032:	484f      	ldr	r0, [pc, #316]	; (8003170 <main+0x590>)
 8003034:	2208      	movs	r2, #8
 8003036:	a918      	add	r1, sp, #96	; 0x60
 8003038:	f002 fe6e 	bl	8005d18 <HAL_TIM_PWM_ConfigChannel>
 800303c:	4604      	mov	r4, r0
 800303e:	b108      	cbz	r0, 8003044 <main+0x464>
 8003040:	b672      	cpsid	i
	while (1) {
 8003042:	e7fe      	b.n	8003042 <main+0x462>
  htim3.Instance = TIM3;
 8003044:	4d4b      	ldr	r5, [pc, #300]	; (8003174 <main+0x594>)
  HAL_TIM_MspPostInit(&htim2);
 8003046:	484a      	ldr	r0, [pc, #296]	; (8003170 <main+0x590>)
 8003048:	f000 fd00 	bl	8003a4c <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 800304c:	4a4a      	ldr	r2, [pc, #296]	; (8003178 <main+0x598>)
 800304e:	602a      	str	r2, [r5, #0]
  htim3.Init.Prescaler = 1;
 8003050:	2301      	movs	r3, #1
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003052:	2220      	movs	r2, #32
  htim3.Init.Prescaler = 1;
 8003054:	606b      	str	r3, [r5, #4]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003056:	4628      	mov	r0, r5
  htim3.Init.Period = 1024-1;
 8003058:	f240 33ff 	movw	r3, #1023	; 0x3ff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800305c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8003060:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003064:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003068:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 800306c:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
 8003070:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 8003074:	941e      	str	r4, [sp, #120]	; 0x78
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003076:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003078:	61ac      	str	r4, [r5, #24]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800307a:	60aa      	str	r2, [r5, #8]
  htim3.Init.Period = 1024-1;
 800307c:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800307e:	f002 fb91 	bl	80057a4 <HAL_TIM_Base_Init>
 8003082:	b108      	cbz	r0, 8003088 <main+0x4a8>
 8003084:	b672      	cpsid	i
	while (1) {
 8003086:	e7fe      	b.n	8003086 <main+0x4a6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800308c:	a910      	add	r1, sp, #64	; 0x40
 800308e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003090:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003092:	f002 ff51 	bl	8005f38 <HAL_TIM_ConfigClockSource>
 8003096:	b108      	cbz	r0, 800309c <main+0x4bc>
 8003098:	b672      	cpsid	i
	while (1) {
 800309a:	e7fe      	b.n	800309a <main+0x4ba>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800309c:	4628      	mov	r0, r5
 800309e:	f002 fc7f 	bl	80059a0 <HAL_TIM_PWM_Init>
 80030a2:	b108      	cbz	r0, 80030a8 <main+0x4c8>
 80030a4:	b672      	cpsid	i
	while (1) {
 80030a6:	e7fe      	b.n	80030a6 <main+0x4c6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030a8:	2200      	movs	r2, #0
 80030aa:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030ac:	a90c      	add	r1, sp, #48	; 0x30
 80030ae:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030b4:	f002 fff0 	bl	8006098 <HAL_TIMEx_MasterConfigSynchronization>
 80030b8:	4602      	mov	r2, r0
 80030ba:	b108      	cbz	r0, 80030c0 <main+0x4e0>
 80030bc:	b672      	cpsid	i
	while (1) {
 80030be:	e7fe      	b.n	80030be <main+0x4de>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030c0:	a918      	add	r1, sp, #96	; 0x60
 80030c2:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030c4:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030c8:	921a      	str	r2, [sp, #104]	; 0x68
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80030ca:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030ce:	f002 fe23 	bl	8005d18 <HAL_TIM_PWM_ConfigChannel>
 80030d2:	b108      	cbz	r0, 80030d8 <main+0x4f8>
 80030d4:	b672      	cpsid	i
	while (1) {
 80030d6:	e7fe      	b.n	80030d6 <main+0x4f6>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030d8:	4642      	mov	r2, r8
 80030da:	a918      	add	r1, sp, #96	; 0x60
 80030dc:	4628      	mov	r0, r5
 80030de:	f002 fe1b 	bl	8005d18 <HAL_TIM_PWM_ConfigChannel>
 80030e2:	b108      	cbz	r0, 80030e8 <main+0x508>
 80030e4:	b672      	cpsid	i
	while (1) {
 80030e6:	e7fe      	b.n	80030e6 <main+0x506>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030e8:	4628      	mov	r0, r5
 80030ea:	2208      	movs	r2, #8
 80030ec:	a918      	add	r1, sp, #96	; 0x60
 80030ee:	f002 fe13 	bl	8005d18 <HAL_TIM_PWM_ConfigChannel>
 80030f2:	b108      	cbz	r0, 80030f8 <main+0x518>
 80030f4:	b672      	cpsid	i
	while (1) {
 80030f6:	e7fe      	b.n	80030f6 <main+0x516>
  htim5.Instance = TIM5;
 80030f8:	4c20      	ldr	r4, [pc, #128]	; (800317c <main+0x59c>)
  HAL_TIM_MspPostInit(&htim3);
 80030fa:	481e      	ldr	r0, [pc, #120]	; (8003174 <main+0x594>)
 80030fc:	f000 fca6 	bl	8003a4c <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 8003100:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <main+0x5a0>)
  htim5.Init.Period = 999999;
 8003102:	4a20      	ldr	r2, [pc, #128]	; (8003184 <main+0x5a4>)
  htim5.Instance = TIM5;
 8003104:	6023      	str	r3, [r4, #0]
  htim5.Init.Prescaler = 84;
 8003106:	2354      	movs	r3, #84	; 0x54
 8003108:	6063      	str	r3, [r4, #4]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 800310a:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800310c:	2300      	movs	r3, #0
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800310e:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003112:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003116:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
 800311a:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
 800311e:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8003122:	931e      	str	r3, [sp, #120]	; 0x78
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003124:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003126:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8003128:	f002 fbba 	bl	80058a0 <HAL_TIM_OC_Init>
 800312c:	b108      	cbz	r0, 8003132 <main+0x552>
 800312e:	b672      	cpsid	i
	while (1) {
 8003130:	e7fe      	b.n	8003130 <main+0x550>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003132:	a910      	add	r1, sp, #64	; 0x40
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003134:	2600      	movs	r6, #0
 8003136:	2700      	movs	r7, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003138:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800313a:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800313e:	f002 ffab 	bl	8006098 <HAL_TIMEx_MasterConfigSynchronization>
 8003142:	4603      	mov	r3, r0
 8003144:	b108      	cbz	r0, 800314a <main+0x56a>
 8003146:	b672      	cpsid	i
	while (1) {
 8003148:	e7fe      	b.n	8003148 <main+0x568>
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800314a:	a918      	add	r1, sp, #96	; 0x60
 800314c:	4620      	mov	r0, r4
 800314e:	220c      	movs	r2, #12
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003150:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003154:	931a      	str	r3, [sp, #104]	; 0x68
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003156:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003158:	f002 fd08 	bl	8005b6c <HAL_TIM_OC_ConfigChannel>
 800315c:	4607      	mov	r7, r0
 800315e:	b198      	cbz	r0, 8003188 <main+0x5a8>
 8003160:	b672      	cpsid	i
	while (1) {
 8003162:	e7fe      	b.n	8003162 <main+0x582>
 8003164:	2000e590 	.word	0x2000e590
 8003168:	2000e5d8 	.word	0x2000e5d8
 800316c:	40013000 	.word	0x40013000
 8003170:	2000e630 	.word	0x2000e630
 8003174:	2000e48c 	.word	0x2000e48c
 8003178:	40000400 	.word	0x40000400
 800317c:	2000e444 	.word	0x2000e444
 8003180:	40000c00 	.word	0x40000c00
 8003184:	000f423f 	.word	0x000f423f
		sprintf((char*) buff, "\r\n###########################\r\n");
 8003188:	4edf      	ldr	r6, [pc, #892]	; (8003508 <main+0x928>)
 800318a:	4de0      	ldr	r5, [pc, #896]	; (800350c <main+0x92c>)
		bmi270_getGyroRange(&Imu);
 800318c:	4ce0      	ldr	r4, [pc, #896]	; (8003510 <main+0x930>)
		bmi270_calibrateInit(&Imu, 0);
 800318e:	ed9f 8ae1 	vldr	s16, [pc, #900]	; 8003514 <main+0x934>
	MotorX.PIN_ENC = PIN_ENC_X;
 8003192:	f8df 83f4 	ldr.w	r8, [pc, #1012]	; 8003588 <main+0x9a8>
 8003196:	f8df a3f4 	ldr.w	sl, [pc, #1012]	; 800358c <main+0x9ac>
		sprintf((char*) buff, "\r\n###########################\r\n");
 800319a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800319c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800319e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80031a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart2, (uint8_t*) buff, strlen((char*) buff),
 80031a6:	f1a5 0110 	sub.w	r1, r5, #16
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031ae:	221f      	movs	r2, #31
 80031b0:	48d9      	ldr	r0, [pc, #868]	; (8003518 <main+0x938>)
	MotorY.PIN_ENC = PIN_ENC_Y;
 80031b2:	4dda      	ldr	r5, [pc, #872]	; (800351c <main+0x93c>)
		HAL_UART_Transmit(&huart2, (uint8_t*) buff, strlen((char*) buff),
 80031b4:	f003 f874 	bl	80062a0 <HAL_UART_Transmit>
uint32_t get_ms();
uint32_t get_us();

__STATIC_INLINE void DWT_Init(void)
{
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80031b8:	49d9      	ldr	r1, [pc, #868]	; (8003520 <main+0x940>)
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80031ba:	4ada      	ldr	r2, [pc, #872]	; (8003524 <main+0x944>)
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80031bc:	68cb      	ldr	r3, [r1, #12]
 80031be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031c2:	60cb      	str	r3, [r1, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80031c4:	6813      	ldr	r3, [r2, #0]
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6013      	str	r3, [r2, #0]
		bmi270_spi_init();
 80031cc:	f7fe f86c 	bl	80012a8 <bmi270_spi_init>
		bmi270_spi_init_check(); //if (!USE_IMU_VIS)
 80031d0:	f7fe f954 	bl	800147c <bmi270_spi_init_check>
		bmi270_pwr_conf(BMI270_PWR_MODE_PERF);
 80031d4:	2002      	movs	r0, #2
 80031d6:	f7fe f9df 	bl	8001598 <bmi270_pwr_conf>
		bmi270_spi_write_8(REG_GYR_RANGE, range_2000);
 80031da:	4639      	mov	r1, r7
 80031dc:	2043      	movs	r0, #67	; 0x43
 80031de:	f7fe fbeb 	bl	80019b8 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_ACC_RANGE, range_16g);
 80031e2:	2103      	movs	r1, #3
 80031e4:	2041      	movs	r0, #65	; 0x41
 80031e6:	f7fe fbe7 	bl	80019b8 <bmi270_spi_write_8>
		bmi270_getGyroRange(&Imu);
 80031ea:	4620      	mov	r0, r4
 80031ec:	f7fe fd92 	bl	8001d14 <bmi270_getGyroRange>
		bmi270_getAccelRange(&Imu);
 80031f0:	4620      	mov	r0, r4
 80031f2:	f7fe fe0b 	bl	8001e0c <bmi270_getAccelRange>
		bmi270_calibrateInit(&Imu, 0);
 80031f6:	eeb0 0a48 	vmov.f32	s0, s16
 80031fa:	4620      	mov	r0, r4
 80031fc:	f7fe fe72 	bl	8001ee4 <bmi270_calibrateInit>
		Imu.gyr_odr = gyr_odr_3k2; /* Set gyro 3dB LP-filter cutoff to 50Hz */
 8003200:	230d      	movs	r3, #13
 8003202:	f8c4 306a 	str.w	r3, [r4, #106]	; 0x6a
		bmi270_setGyroConf(&Imu);
 8003206:	4620      	mov	r0, r4
 8003208:	f7fe fc4a 	bl	8001aa0 <bmi270_setGyroConf>
		bmi270_getGyroConf(&Imu);
 800320c:	4620      	mov	r0, r4
 800320e:	f7fe fbfd 	bl	8001a0c <bmi270_getGyroConf>
		Imu.acc_odr = acc_odr_1k6; /* Set accel 3dB LP-filter cutoff to 50Hz */
 8003212:	f240 730c 	movw	r3, #1804	; 0x70c
 8003216:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
		bmi270_setAccConf(&Imu);
 800321a:	4620      	mov	r0, r4
		Imu.acc_filter_perf = acc_ulp;
 800321c:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
		bmi270_setAccConf(&Imu);
 8003220:	f7fe fd0c 	bl	8001c3c <bmi270_setAccConf>
		bmi270_getAccConf(&Imu);
 8003224:	4620      	mov	r0, r4
 8003226:	f7fe fcc7 	bl	8001bb8 <bmi270_getAccConf>
	MotorX.PIN_ENC = PIN_ENC_X;
 800322a:	4abf      	ldr	r2, [pc, #764]	; (8003528 <main+0x948>)
	MotorY.PIN_ENC = PIN_ENC_Y;
 800322c:	4bbf      	ldr	r3, [pc, #764]	; (800352c <main+0x94c>)
	MotorX.PIN_ENC = PIN_ENC_X;
 800322e:	f8c8 2000 	str.w	r2, [r8]
		Imu.update_ctr = 0;
 8003232:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	MotorY.PIN_ENC = PIN_ENC_Y;
 8003236:	602b      	str	r3, [r5, #0]
		Imu.update_ctr = 0;
 8003238:	6661      	str	r1, [r4, #100]	; 0x64
		as5048a_init(&MotorX);
 800323a:	4640      	mov	r0, r8
		Imu.roll_sp = 0;
 800323c:	ed84 8a0d 	vstr	s16, [r4, #52]	; 0x34
		Imu.pitch_sp = 0;
 8003240:	ed84 8a0e 	vstr	s16, [r4, #56]	; 0x38
		as5048a_init(&MotorX);
 8003244:	f7fd ff0c 	bl	8001060 <as5048a_init>
		as5048a_init(&MotorY);
 8003248:	4628      	mov	r0, r5
 800324a:	f7fd ff09 	bl	8001060 <as5048a_init>
		FastTrigonometry_buildTable();
 800324e:	f7ff f973 	bl	8002538 <FastTrigonometry_buildTable>
		drv8313_init(&MotorX, &htim1);
 8003252:	49b7      	ldr	r1, [pc, #732]	; (8003530 <main+0x950>)
 8003254:	4640      	mov	r0, r8
 8003256:	f7fe fe55 	bl	8001f04 <drv8313_init>
		drv8313_init(&MotorY, &htim2);
 800325a:	49b6      	ldr	r1, [pc, #728]	; (8003534 <main+0x954>)
 800325c:	4628      	mov	r0, r5
 800325e:	f7fe fe51 	bl	8001f04 <drv8313_init>
		MotorX.LPF_current_d.Tf = 0.4f;
 8003262:	48b5      	ldr	r0, [pc, #724]	; (8003538 <main+0x958>)
		MotorX.LPF_angle.Tf = 0.185f;
 8003264:	4ab5      	ldr	r2, [pc, #724]	; (800353c <main+0x95c>)
		MotorY.LPF_angle.Tf = 0.235f;
 8003266:	49b6      	ldr	r1, [pc, #728]	; (8003540 <main+0x960>)
		MotorX.LPF_velocity.Tf = 0.065f;
 8003268:	4bb6      	ldr	r3, [pc, #728]	; (8003544 <main+0x964>)
		MotorX.LPF_angle.Tf = 0.185f;
 800326a:	f8c8 2160 	str.w	r2, [r8, #352]	; 0x160
		MotorY.LPF_angle.Tf = 0.235f;
 800326e:	f8c5 1160 	str.w	r1, [r5, #352]	; 0x160
		MotorX.LPF_imu.Tf = 0.15f;
 8003272:	4ab5      	ldr	r2, [pc, #724]	; (8003548 <main+0x968>)
		MotorY.LPF_current_d.Tf = 0.02f;
 8003274:	49b5      	ldr	r1, [pc, #724]	; (800354c <main+0x96c>)
		MotorX.LPF_current_d.Tf = 0.4f;
 8003276:	f8c8 013c 	str.w	r0, [r8, #316]	; 0x13c
		MotorX.LPF_current_q.Tf = 0.4f;
 800327a:	f8c8 0148 	str.w	r0, [r8, #328]	; 0x148
		MotorX.update_goal = 4;
 800327e:	2004      	movs	r0, #4
		MotorX.LPF_velocity.Tf = 0.065f;
 8003280:	f8c8 3154 	str.w	r3, [r8, #340]	; 0x154
		MotorY.LPF_velocity.Tf = 0.065f;
 8003284:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
		MotorX.LPF_imu.Tf = 0.15f;
 8003288:	f8c8 216c 	str.w	r2, [r8, #364]	; 0x16c
		MotorX.pole_pairs = 11;
 800328c:	230b      	movs	r3, #11
		MotorY.LPF_imu.Tf = 0.15f;
 800328e:	f8c5 216c 	str.w	r2, [r5, #364]	; 0x16c
		MotorY.LPF_current_d.Tf = 0.02f;
 8003292:	f8c5 113c 	str.w	r1, [r5, #316]	; 0x13c
		MotorY.LPF_current_q.Tf = 0.02f;
 8003296:	f8c5 1148 	str.w	r1, [r5, #328]	; 0x148
		MotorX.update_goal = 4;
 800329a:	f8a8 0006 	strh.w	r0, [r8, #6]
		MotorY.update_goal = 4;
 800329e:	80e8      	strh	r0, [r5, #6]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_read, 5);
 80032a0:	49ab      	ldr	r1, [pc, #684]	; (8003550 <main+0x970>)
 80032a2:	48ac      	ldr	r0, [pc, #688]	; (8003554 <main+0x974>)
		MotorX.pole_pairs = 11;
 80032a4:	f8a8 31a4 	strh.w	r3, [r8, #420]	; 0x1a4
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_read, 5);
 80032a8:	2205      	movs	r2, #5
		MotorY.pole_pairs = 11;
 80032aa:	f8a5 31a4 	strh.w	r3, [r5, #420]	; 0x1a4
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_read, 5);
 80032ae:	f000 fe4d 	bl	8003f4c <HAL_ADC_Start_DMA>
		while (adcConvComplete == 0) {
 80032b2:	f89a 3000 	ldrb.w	r3, [sl]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0fb      	beq.n	80032b2 <main+0x6d2>
		ina_ref = adc_read[4] * adc_factor;
 80032ba:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8003550 <main+0x970>
 80032be:	eddf 5aa6 	vldr	s11, [pc, #664]	; 8003558 <main+0x978>
				* sense_ratio;
 80032c2:	ed9f 3aa6 	vldr	s6, [pc, #664]	; 800355c <main+0x97c>
		HAL_GPIO_WritePin(GPIOC, FLAG_WHILE_LOOP_DONE_Pin, RESET);
 80032c6:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 8003590 <main+0x9b0>
		adcConvComplete = 0;
 80032ca:	2200      	movs	r2, #0
 80032cc:	f88a 2000 	strb.w	r2, [sl]
		ina_ref = adc_read[4] * adc_factor;
 80032d0:	f8b9 3008 	ldrh.w	r3, [r9, #8]
			Imu.gyr_x = (int16_t) bmi270_read_gyro(AXIS_X) * Imu.inv_gyr_range;
 80032d4:	9201      	str	r2, [sp, #4]
		ina_ref = adc_read[4] * adc_factor;
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	ee07 3a90 	vmov	s15, r3
 80032dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
					loop_time * 1e-3);
 80032e0:	a787      	add	r7, pc, #540	; (adr r7, 8003500 <main+0x920>)
 80032e2:	e9d7 6700 	ldrd	r6, r7, [r7]
		ina_ref = adc_read[4] * adc_factor;
 80032e6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80032ea:	edcd 7a04 	vstr	s15, [sp, #16]
		MotorX.i_a = (adc_read[0] * adc_factor - ina_ref)
 80032ee:	f8b9 0000 	ldrh.w	r0, [r9]
 80032f2:	ed9d 6a04 	vldr	s12, [sp, #16]
		MotorX.i_b = (adc_read[1] * adc_factor - ina_ref)
 80032f6:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 80032fa:	eddd 6a04 	vldr	s13, [sp, #16]
		MotorY.i_a = (adc_read[2] * adc_factor - ina_ref)
 80032fe:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8003302:	ed9d 7a04 	vldr	s14, [sp, #16]
		MotorY.i_b = (adc_read[3] * adc_factor - ina_ref)
 8003306:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 800330a:	eddd 7a04 	vldr	s15, [sp, #16]
		MotorX.i_a = (adc_read[0] * adc_factor - ina_ref)
 800330e:	b280      	uxth	r0, r0
 8003310:	ee05 0a10 	vmov	s10, r0
		MotorX.i_b = (adc_read[1] * adc_factor - ina_ref)
 8003314:	b289      	uxth	r1, r1
		MotorX.i_a = (adc_read[0] * adc_factor - ina_ref)
 8003316:	eef8 3ac5 	vcvt.f32.s32	s7, s10
		MotorX.i_b = (adc_read[1] * adc_factor - ina_ref)
 800331a:	ee05 1a10 	vmov	s10, r1
		MotorY.i_a = (adc_read[2] * adc_factor - ina_ref)
 800331e:	b292      	uxth	r2, r2
		MotorX.i_b = (adc_read[1] * adc_factor - ina_ref)
 8003320:	eeb8 4ac5 	vcvt.f32.s32	s8, s10
		MotorY.i_a = (adc_read[2] * adc_factor - ina_ref)
 8003324:	ee05 2a10 	vmov	s10, r2
		MotorY.i_b = (adc_read[3] * adc_factor - ina_ref)
 8003328:	b29b      	uxth	r3, r3
		MotorY.i_a = (adc_read[2] * adc_factor - ina_ref)
 800332a:	eef8 4ac5 	vcvt.f32.s32	s9, s10
		MotorY.i_b = (adc_read[3] * adc_factor - ina_ref)
 800332e:	ee05 3a10 	vmov	s10, r3
 8003332:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
		MotorX.i_a = (adc_read[0] * adc_factor - ina_ref)
 8003336:	ee93 6aa5 	vfnms.f32	s12, s7, s11
		MotorX.i_b = (adc_read[1] * adc_factor - ina_ref)
 800333a:	eed4 6a25 	vfnms.f32	s13, s8, s11
		MotorY.i_a = (adc_read[2] * adc_factor - ina_ref)
 800333e:	ee94 7aa5 	vfnms.f32	s14, s9, s11
		MotorY.i_b = (adc_read[3] * adc_factor - ina_ref)
 8003342:	eed5 7a25 	vfnms.f32	s15, s10, s11
				* sense_ratio;
 8003346:	ee26 6a03 	vmul.f32	s12, s12, s6
				* sense_ratio;
 800334a:	ee66 6a83 	vmul.f32	s13, s13, s6
				* sense_ratio;
 800334e:	ee27 7a03 	vmul.f32	s14, s14, s6
				* sense_ratio;
 8003352:	ee67 7a83 	vmul.f32	s15, s15, s6
		MotorX.i_a = (adc_read[0] * adc_factor - ina_ref)
 8003356:	ed88 6a02 	vstr	s12, [r8, #8]
		MotorX.i_b = (adc_read[1] * adc_factor - ina_ref)
 800335a:	edc8 6a03 	vstr	s13, [r8, #12]
		MotorY.i_a = (adc_read[2] * adc_factor - ina_ref)
 800335e:	ed85 7a02 	vstr	s14, [r5, #8]
		MotorY.i_b = (adc_read[3] * adc_factor - ina_ref)
 8003362:	edc5 7a03 	vstr	s15, [r5, #12]
		t1 = HAL_GetTick();
 8003366:	f000 fd2b 	bl	8003dc0 <HAL_GetTick>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)){
 800336a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		t1 = HAL_GetTick();
 800336e:	4603      	mov	r3, r0
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)){
 8003370:	487b      	ldr	r0, [pc, #492]	; (8003560 <main+0x980>)
		t1 = HAL_GetTick();
 8003372:	930c      	str	r3, [sp, #48]	; 0x30
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)){
 8003374:	f001 faaa 	bl	80048cc <HAL_GPIO_ReadPin>
 8003378:	2800      	cmp	r0, #0
 800337a:	f000 8162 	beq.w	8003642 <main+0xa62>
			Imu.roll_sp = -45*DEG_TO_RAD;
 800337e:	4b79      	ldr	r3, [pc, #484]	; (8003564 <main+0x984>)
 8003380:	6363      	str	r3, [r4, #52]	; 0x34
			Imu.pitch_sp = -45*DEG_TO_RAD;
 8003382:	63a3      	str	r3, [r4, #56]	; 0x38
			Imu.gyr_x = (int16_t) bmi270_read_gyro(AXIS_X) * Imu.inv_gyr_range;
 8003384:	2000      	movs	r0, #0
 8003386:	f7fe fa43 	bl	8001810 <bmi270_read_gyro>
 800338a:	b200      	sxth	r0, r0
 800338c:	ee07 0a90 	vmov	s15, r0
 8003390:	ed94 7a02 	vldr	s14, [r4, #8]
 8003394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			Imu.gyr_y = (int16_t) bmi270_read_gyro(AXIS_Y) * Imu.inv_gyr_range;
 8003398:	2001      	movs	r0, #1
			Imu.gyr_x = (int16_t) bmi270_read_gyro(AXIS_X) * Imu.inv_gyr_range;
 800339a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800339e:	edc4 7a04 	vstr	s15, [r4, #16]
			Imu.gyr_y = (int16_t) bmi270_read_gyro(AXIS_Y) * Imu.inv_gyr_range;
 80033a2:	f7fe fa35 	bl	8001810 <bmi270_read_gyro>
 80033a6:	b200      	sxth	r0, r0
 80033a8:	ee07 0a90 	vmov	s15, r0
 80033ac:	ed94 7a02 	vldr	s14, [r4, #8]
 80033b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			Imu.gyr_z = (int16_t) bmi270_read_gyro(AXIS_Z) * Imu.inv_gyr_range;
 80033b4:	2002      	movs	r0, #2
			Imu.gyr_y = (int16_t) bmi270_read_gyro(AXIS_Y) * Imu.inv_gyr_range;
 80033b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033ba:	edc4 7a05 	vstr	s15, [r4, #20]
			Imu.gyr_z = (int16_t) bmi270_read_gyro(AXIS_Z) * Imu.inv_gyr_range;
 80033be:	f7fe fa27 	bl	8001810 <bmi270_read_gyro>
 80033c2:	b200      	sxth	r0, r0
 80033c4:	ee07 0a90 	vmov	s15, r0
 80033c8:	ed94 7a02 	vldr	s14, [r4, #8]
 80033cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			Imu.acc_x = (int16_t) bmi270_read_accel(AXIS_X) * Imu.inv_acc_range;
 80033d0:	2000      	movs	r0, #0
			Imu.gyr_z = (int16_t) bmi270_read_gyro(AXIS_Z) * Imu.inv_gyr_range;
 80033d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033d6:	edc4 7a06 	vstr	s15, [r4, #24]
			Imu.acc_x = (int16_t) bmi270_read_accel(AXIS_X) * Imu.inv_acc_range;
 80033da:	f7fe fa83 	bl	80018e4 <bmi270_read_accel>
 80033de:	b200      	sxth	r0, r0
 80033e0:	ee07 0a90 	vmov	s15, r0
 80033e4:	ed94 7a03 	vldr	s14, [r4, #12]
 80033e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			Imu.acc_y = (int16_t) bmi270_read_accel(AXIS_Y) * Imu.inv_acc_range;
 80033ec:	2001      	movs	r0, #1
			Imu.acc_x = (int16_t) bmi270_read_accel(AXIS_X) * Imu.inv_acc_range;
 80033ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033f2:	edc4 7a07 	vstr	s15, [r4, #28]
			Imu.acc_y = (int16_t) bmi270_read_accel(AXIS_Y) * Imu.inv_acc_range;
 80033f6:	f7fe fa75 	bl	80018e4 <bmi270_read_accel>
 80033fa:	b200      	sxth	r0, r0
 80033fc:	ee07 0a90 	vmov	s15, r0
 8003400:	ed94 7a03 	vldr	s14, [r4, #12]
 8003404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			Imu.acc_z = (int16_t) bmi270_read_accel(AXIS_Z) * Imu.inv_acc_range;
 8003408:	2002      	movs	r0, #2
			Imu.acc_y = (int16_t) bmi270_read_accel(AXIS_Y) * Imu.inv_acc_range;
 800340a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800340e:	edc4 7a08 	vstr	s15, [r4, #32]
			Imu.acc_z = (int16_t) bmi270_read_accel(AXIS_Z) * Imu.inv_acc_range;
 8003412:	f7fe fa67 	bl	80018e4 <bmi270_read_accel>
 8003416:	b200      	sxth	r0, r0
 8003418:	ee07 0a90 	vmov	s15, r0
 800341c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003420:	edd4 7a03 	vldr	s15, [r4, #12]
 8003424:	ee28 8a27 	vmul.f32	s16, s16, s15
					loop_time * 1e-3);
 8003428:	ee18 0a90 	vmov	r0, s17
			Imu.acc_z = (int16_t) bmi270_read_accel(AXIS_Z) * Imu.inv_acc_range;
 800342c:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
					loop_time * 1e-3);
 8003430:	f7fd f892 	bl	8000558 <__aeabi_f2d>
 8003434:	4632      	mov	r2, r6
 8003436:	463b      	mov	r3, r7
 8003438:	f7fd f8e6 	bl	8000608 <__aeabi_dmul>
			filterUpdate(Imu.gyr_x * DEG_TO_RAD, Imu.gyr_y * DEG_TO_RAD,
 800343c:	f7fd fbbc 	bl	8000bb8 <__aeabi_d2f>
 8003440:	eddf 7a49 	vldr	s15, [pc, #292]	; 8003568 <main+0x988>
 8003444:	ed94 1a06 	vldr	s2, [r4, #24]
 8003448:	edd4 0a05 	vldr	s1, [r4, #20]
 800344c:	ed94 0a04 	vldr	s0, [r4, #16]
 8003450:	ed94 2a08 	vldr	s4, [r4, #32]
 8003454:	edd4 1a07 	vldr	s3, [r4, #28]
 8003458:	ee03 0a10 	vmov	s6, r0
 800345c:	ee21 1a27 	vmul.f32	s2, s2, s15
 8003460:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8003464:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003468:	eef0 2a48 	vmov.f32	s5, s16
 800346c:	f7ff f984 	bl	8002778 <filterUpdate>
			Euler = ToEulerAngles(q0, q1, q2, q3);
 8003470:	4b3e      	ldr	r3, [pc, #248]	; (800356c <main+0x98c>)
 8003472:	ed93 0a00 	vldr	s0, [r3]
 8003476:	4b3e      	ldr	r3, [pc, #248]	; (8003570 <main+0x990>)
 8003478:	edd3 0a00 	vldr	s1, [r3]
 800347c:	4b3d      	ldr	r3, [pc, #244]	; (8003574 <main+0x994>)
 800347e:	ed93 1a00 	vldr	s2, [r3]
 8003482:	4b3d      	ldr	r3, [pc, #244]	; (8003578 <main+0x998>)
 8003484:	edd3 1a00 	vldr	s3, [r3]
 8003488:	f7ff fb14 	bl	8002ab4 <ToEulerAngles>
			Imu.roll = lpf_exec(&MotorX.LPF_imu, Euler.x);
 800348c:	483b      	ldr	r0, [pc, #236]	; (800357c <main+0x99c>)
			Euler = ToEulerAngles(q0, q1, q2, q3);
 800348e:	edcd 0a19 	vstr	s1, [sp, #100]	; 0x64
 8003492:	ed8d 1a1a 	vstr	s2, [sp, #104]	; 0x68
 8003496:	ed8d 0a18 	vstr	s0, [sp, #96]	; 0x60
			Imu.roll = lpf_exec(&MotorX.LPF_imu, Euler.x);
 800349a:	f7ff f931 	bl	8002700 <lpf_exec>
			Imu.pitch = lpf_exec(&MotorY.LPF_imu, Euler.y);
 800349e:	4838      	ldr	r0, [pc, #224]	; (8003580 <main+0x9a0>)
			Imu.roll = lpf_exec(&MotorX.LPF_imu, Euler.x);
 80034a0:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
			Imu.pitch = lpf_exec(&MotorY.LPF_imu, Euler.y);
 80034a4:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
 80034a8:	f7ff f92a 	bl	8002700 <lpf_exec>
 80034ac:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
			while (adcConvComplete == 0) {
 80034b0:	f89a 3000 	ldrb.w	r3, [sl]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0fb      	beq.n	80034b0 <main+0x8d0>
			adcConvComplete = 0;
 80034b8:	9b01      	ldr	r3, [sp, #4]
 80034ba:	f88a 3000 	strb.w	r3, [sl]
			ina_ref = adc_read[4] * adc_factor;
 80034be:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 80034c2:	ed9f 8a25 	vldr	s16, [pc, #148]	; 8003558 <main+0x978>
					* sense_ratio;
 80034c6:	eddf 8a25 	vldr	s17, [pc, #148]	; 800355c <main+0x97c>
			target_roll = PID_Update(&MotorX.imu_reg, Imu.roll_sp, Imu.roll);
 80034ca:	edd4 0a0a 	vldr	s1, [r4, #40]	; 0x28
 80034ce:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 80034d2:	482c      	ldr	r0, [pc, #176]	; (8003584 <main+0x9a4>)
			ina_ref = adc_read[4] * adc_factor;
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	ee07 3a90 	vmov	s15, r3
 80034da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034de:	ee67 7a88 	vmul.f32	s15, s15, s16
 80034e2:	edcd 7a04 	vstr	s15, [sp, #16]
			MotorX.i_a = (adc_read[0] * adc_factor - ina_ref)
 80034e6:	f8b9 2000 	ldrh.w	r2, [r9]
 80034ea:	ed9d 7a04 	vldr	s14, [sp, #16]
			MotorX.i_b = (adc_read[1] * adc_factor - ina_ref)
 80034ee:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80034f2:	eddd 7a04 	vldr	s15, [sp, #16]
			MotorX.i_a = (adc_read[0] * adc_factor - ina_ref)
 80034f6:	b292      	uxth	r2, r2
 80034f8:	e04c      	b.n	8003594 <main+0x9b4>
 80034fa:	bf00      	nop
 80034fc:	f3af 8000 	nop.w
 8003500:	d2f1a9fc 	.word	0xd2f1a9fc
 8003504:	3f50624d 	.word	0x3f50624d
 8003508:	0800ac24 	.word	0x0800ac24
 800350c:	2000a29c 	.word	0x2000a29c
 8003510:	2000a228 	.word	0x2000a228
 8003514:	00000000 	.word	0x00000000
 8003518:	2000e678 	.word	0x2000e678
 800351c:	2000e29c 	.word	0x2000e29c
 8003520:	e000edf0 	.word	0xe000edf0
 8003524:	e0001000 	.word	0xe0001000
 8003528:	40000010 	.word	0x40000010
 800352c:	80000020 	.word	0x80000020
 8003530:	2000e590 	.word	0x2000e590
 8003534:	2000e630 	.word	0x2000e630
 8003538:	3ecccccd 	.word	0x3ecccccd
 800353c:	3e3d70a4 	.word	0x3e3d70a4
 8003540:	3e70a3d7 	.word	0x3e70a3d7
 8003544:	3d851eb8 	.word	0x3d851eb8
 8003548:	3e19999a 	.word	0x3e19999a
 800354c:	3ca3d70a 	.word	0x3ca3d70a
 8003550:	2000e4d4 	.word	0x2000e4d4
 8003554:	2000e4e0 	.word	0x2000e4e0
 8003558:	3a533333 	.word	0x3a533333
 800355c:	3e628c76 	.word	0x3e628c76
 8003560:	40020000 	.word	0x40020000
 8003564:	bf490fdb 	.word	0xbf490fdb
 8003568:	3c8efa35 	.word	0x3c8efa35
 800356c:	20002004 	.word	0x20002004
 8003570:	20002208 	.word	0x20002208
 8003574:	2000220c 	.word	0x2000220c
 8003578:	20002210 	.word	0x20002210
 800357c:	2000e820 	.word	0x2000e820
 8003580:	2000e400 	.word	0x2000e400
 8003584:	2000e7bc 	.word	0x2000e7bc
 8003588:	2000e6bc 	.word	0x2000e6bc
 800358c:	20002204 	.word	0x20002204
 8003590:	40020800 	.word	0x40020800
 8003594:	ee06 2a90 	vmov	s13, r2
			MotorX.i_b = (adc_read[1] * adc_factor - ina_ref)
 8003598:	b29b      	uxth	r3, r3
			MotorX.i_a = (adc_read[0] * adc_factor - ina_ref)
 800359a:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
			MotorX.i_b = (adc_read[1] * adc_factor - ina_ref)
 800359e:	ee06 3a90 	vmov	s13, r3
 80035a2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
			MotorX.i_a = (adc_read[0] * adc_factor - ina_ref)
 80035a6:	ee96 7a08 	vfnms.f32	s14, s12, s16
			MotorX.i_b = (adc_read[1] * adc_factor - ina_ref)
 80035aa:	eed6 7a88 	vfnms.f32	s15, s13, s16
					* sense_ratio;
 80035ae:	ee27 7a28 	vmul.f32	s14, s14, s17
					* sense_ratio;
 80035b2:	ee67 7aa8 	vmul.f32	s15, s15, s17
			MotorX.i_a = (adc_read[0] * adc_factor - ina_ref)
 80035b6:	ed88 7a02 	vstr	s14, [r8, #8]
			MotorX.i_b = (adc_read[1] * adc_factor - ina_ref)
 80035ba:	edc8 7a03 	vstr	s15, [r8, #12]
			target_roll = PID_Update(&MotorX.imu_reg, Imu.roll_sp, Imu.roll);
 80035be:	f000 f875 	bl	80036ac <PID_Update>
 80035c2:	4b26      	ldr	r3, [pc, #152]	; (800365c <main+0xa7c>)
			foc_update(&MotorX, target_roll);
 80035c4:	4826      	ldr	r0, [pc, #152]	; (8003660 <main+0xa80>)
			target_roll = PID_Update(&MotorX.imu_reg, Imu.roll_sp, Imu.roll);
 80035c6:	ed83 0a00 	vstr	s0, [r3]
			foc_update(&MotorX, target_roll);
 80035ca:	f7fe ff25 	bl	8002418 <foc_update>
			MotorY.i_a = (adc_read[2] * adc_factor - ina_ref)
 80035ce:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 80035d2:	ed9d 7a04 	vldr	s14, [sp, #16]
			MotorY.i_b = (adc_read[3] * adc_factor - ina_ref)
 80035d6:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 80035da:	eddd 7a04 	vldr	s15, [sp, #16]
			target_pitch = PID_Update(&MotorY.imu_reg, Imu.pitch_sp, Imu.pitch);
 80035de:	edd4 0a0b 	vldr	s1, [r4, #44]	; 0x2c
 80035e2:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 80035e6:	481f      	ldr	r0, [pc, #124]	; (8003664 <main+0xa84>)
			MotorY.i_a = (adc_read[2] * adc_factor - ina_ref)
 80035e8:	b292      	uxth	r2, r2
 80035ea:	ee06 2a90 	vmov	s13, r2
			MotorY.i_b = (adc_read[3] * adc_factor - ina_ref)
 80035ee:	b29b      	uxth	r3, r3
			MotorY.i_a = (adc_read[2] * adc_factor - ina_ref)
 80035f0:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
			MotorY.i_b = (adc_read[3] * adc_factor - ina_ref)
 80035f4:	ee06 3a90 	vmov	s13, r3
 80035f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
			MotorY.i_a = (adc_read[2] * adc_factor - ina_ref)
 80035fc:	ee96 7a08 	vfnms.f32	s14, s12, s16
			MotorY.i_b = (adc_read[3] * adc_factor - ina_ref)
 8003600:	eed6 7a88 	vfnms.f32	s15, s13, s16
					* sense_ratio;
 8003604:	ee27 7a28 	vmul.f32	s14, s14, s17
					* sense_ratio;
 8003608:	ee67 7aa8 	vmul.f32	s15, s15, s17
			MotorY.i_a = (adc_read[2] * adc_factor - ina_ref)
 800360c:	ed85 7a02 	vstr	s14, [r5, #8]
			MotorY.i_b = (adc_read[3] * adc_factor - ina_ref)
 8003610:	edc5 7a03 	vstr	s15, [r5, #12]
			target_pitch = PID_Update(&MotorY.imu_reg, Imu.pitch_sp, Imu.pitch);
 8003614:	f000 f84a 	bl	80036ac <PID_Update>
 8003618:	4b13      	ldr	r3, [pc, #76]	; (8003668 <main+0xa88>)
			foc_update(&MotorY, target_pitch);
 800361a:	4814      	ldr	r0, [pc, #80]	; (800366c <main+0xa8c>)
			target_pitch = PID_Update(&MotorY.imu_reg, Imu.pitch_sp, Imu.pitch);
 800361c:	ed83 0a00 	vstr	s0, [r3]
			foc_update(&MotorY, target_pitch);
 8003620:	f7fe fefa 	bl	8002418 <foc_update>
		t2 = HAL_GetTick() - t1;
 8003624:	f000 fbcc 	bl	8003dc0 <HAL_GetTick>
 8003628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800362a:	1ac0      	subs	r0, r0, r3
 800362c:	9010      	str	r0, [sp, #64]	; 0x40
		loop_time = t2;
 800362e:	eddd 8a10 	vldr	s17, [sp, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOC, FLAG_WHILE_LOOP_DONE_Pin, RESET);
 8003632:	2200      	movs	r2, #0
 8003634:	2110      	movs	r1, #16
 8003636:	4658      	mov	r0, fp
		loop_time = t2;
 8003638:	eef8 8a68 	vcvt.f32.u32	s17, s17
		HAL_GPIO_WritePin(GPIOC, FLAG_WHILE_LOOP_DONE_Pin, RESET);
 800363c:	f001 f94c 	bl	80048d8 <HAL_GPIO_WritePin>
		t1 = HAL_GetTick();
 8003640:	e691      	b.n	8003366 <main+0x786>
		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)){
 8003642:	480b      	ldr	r0, [pc, #44]	; (8003670 <main+0xa90>)
 8003644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003648:	f001 f940 	bl	80048cc <HAL_GPIO_ReadPin>
 800364c:	2800      	cmp	r0, #0
 800364e:	f43f ae99 	beq.w	8003384 <main+0x7a4>
			Imu.roll_sp = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	6363      	str	r3, [r4, #52]	; 0x34
			Imu.pitch_sp = 0;
 8003656:	63a3      	str	r3, [r4, #56]	; 0x38
 8003658:	e694      	b.n	8003384 <main+0x7a4>
 800365a:	bf00      	nop
 800365c:	2000e52c 	.word	0x2000e52c
 8003660:	2000e6bc 	.word	0x2000e6bc
 8003664:	2000e39c 	.word	0x2000e39c
 8003668:	2000e528 	.word	0x2000e528
 800366c:	2000e29c 	.word	0x2000e29c
 8003670:	40020000 	.word	0x40020000

08003674 <HAL_ADC_ConvCpltCallback>:
	adcConvComplete = 1;
 8003674:	4b01      	ldr	r3, [pc, #4]	; (800367c <HAL_ADC_ConvCpltCallback+0x8>)
 8003676:	2201      	movs	r2, #1
 8003678:	701a      	strb	r2, [r3, #0]
}
 800367a:	4770      	bx	lr
 800367c:	20002204 	.word	0x20002204

08003680 <Error_Handler>:
 8003680:	b672      	cpsid	i
	while (1) {
 8003682:	e7fe      	b.n	8003682 <Error_Handler+0x2>

08003684 <PID_Init>:
 *      Author: maxborglowe
 */

#include "pid.h"

void PID_Init(struct PID *pid) {
 8003684:	b510      	push	{r4, lr}
	pid->integrator = 0.0f;
 8003686:	2300      	movs	r3, #0
	pid->prevMeas = 0.0f;
	pid->out = 0.0f;
	pid->Kp = 0.0f;
	pid->Ki = 0.0f;
	pid->Kd = 0.0f;
	pid->tau = 0.001f;
 8003688:	4a07      	ldr	r2, [pc, #28]	; (80036a8 <PID_Init+0x24>)
 800368a:	61c2      	str	r2, [r0, #28]
	pid->integrator = 0.0f;
 800368c:	6203      	str	r3, [r0, #32]
	pid->prevErr = 0.0f;
 800368e:	6243      	str	r3, [r0, #36]	; 0x24
	pid->differentiator = 0.0f;
 8003690:	6283      	str	r3, [r0, #40]	; 0x28
	pid->prevMeas = 0.0f;
 8003692:	62c3      	str	r3, [r0, #44]	; 0x2c
	pid->out = 0.0f;
 8003694:	6303      	str	r3, [r0, #48]	; 0x30
	pid->Kp = 0.0f;
 8003696:	6003      	str	r3, [r0, #0]
	pid->Ki = 0.0f;
 8003698:	6043      	str	r3, [r0, #4]
	pid->Kd = 0.0f;
 800369a:	6083      	str	r3, [r0, #8]
void PID_Init(struct PID *pid) {
 800369c:	4604      	mov	r4, r0

	pid->timestamp_prev = get_ms();
 800369e:	f000 fb19 	bl	8003cd4 <get_ms>
 80036a2:	6160      	str	r0, [r4, #20]
}
 80036a4:	bd10      	pop	{r4, pc}
 80036a6:	bf00      	nop
 80036a8:	3a83126f 	.word	0x3a83126f

080036ac <PID_Update>:
/**
 * @brief Update the pid output based on error
 * @param The value to be achieved
 * @param Measured value
 */
float PID_Update(struct PID *pid, float setpoint, float meas) {
 80036ac:	b510      	push	{r4, lr}
 80036ae:	4604      	mov	r4, r0
 80036b0:	ed2d 8b02 	vpush	{d8}
 80036b4:	eeb0 8a40 	vmov.f32	s16, s0
 80036b8:	eef0 8a60 	vmov.f32	s17, s1

	uint32_t timestamp_now = get_ms();
 80036bc:	f000 fb0a 	bl	8003cd4 <get_ms>
	float Ts = (timestamp_now - pid->timestamp_prev) * 1e-3f;
 80036c0:	6963      	ldr	r3, [r4, #20]
 80036c2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80037e8 <PID_Update+0x13c>
 80036c6:	1ac3      	subs	r3, r0, r3
 80036c8:	ee07 3a90 	vmov	s15, r3
 80036cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d0:	ee67 5a87 	vmul.f32	s11, s15, s14
	/* fix micros overflow */
	if(Ts <= 0.0f || Ts > 0.5f) Ts = 1e-3f;
 80036d4:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80036d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036dc:	f240 8081 	bls.w	80037e2 <PID_Update+0x136>
 80036e0:	eddf 6a42 	vldr	s13, [pc, #264]	; 80037ec <PID_Update+0x140>
 80036e4:	eef4 7a66 	vcmp.f32	s15, s13
 80036e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ec:	bfc8      	it	gt
 80036ee:	eef0 5a47 	vmovgt.f32	s11, s14

	/* Error output from leftmost summer*/
	float err = setpoint - meas;
 80036f2:	ee38 7a68 	vsub.f32	s14, s16, s17

	/* Proportional */
	float prop = pid->Kp * err;

	/* Integrator */
	pid->integrator = pid->integrator + 0.5f * pid->Ki * Ts * (err + pid->prevErr);
 80036f6:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 80036fa:	ed94 5a01 	vldr	s10, [r4, #4]
	float prop = pid->Kp * err;
 80036fe:	edd4 7a00 	vldr	s15, [r4]
	pid->integrator = pid->integrator + 0.5f * pid->Ki * Ts * (err + pid->prevErr);
 8003702:	ed94 6a08 	vldr	s12, [r4, #32]

	/* Anti-windup scheme */
	float lim_min_int, lim_max_int;
	if (pid->lim_max > prop) {
 8003706:	ed94 4a04 	vldr	s8, [r4, #16]
		lim_max_int = pid->lim_max - prop;
	} else {
		lim_max_int = 0.0f;
	}

	if (pid->lim_min < prop) {
 800370a:	ed94 0a03 	vldr	s0, [r4, #12]
	pid->integrator = pid->integrator + 0.5f * pid->Ki * Ts * (err + pid->prevErr);
 800370e:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8003712:	ee25 5a24 	vmul.f32	s10, s10, s9
 8003716:	ee77 6a26 	vadd.f32	s13, s14, s13
	float prop = pid->Kp * err;
 800371a:	ee67 7a27 	vmul.f32	s15, s14, s15
	pid->integrator = pid->integrator + 0.5f * pid->Ki * Ts * (err + pid->prevErr);
 800371e:	ee66 6a85 	vmul.f32	s13, s13, s10
	if (pid->lim_max > prop) {
 8003722:	eeb4 4ae7 	vcmpe.f32	s8, s15
	pid->integrator = pid->integrator + 0.5f * pid->Ki * Ts * (err + pid->prevErr);
 8003726:	eea5 6aa6 	vfma.f32	s12, s11, s13
	if (pid->lim_max > prop) {
 800372a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (pid->lim_min < prop) {
 800372e:	eeb4 0ae7 	vcmpe.f32	s0, s15
	pid->integrator = pid->integrator + 0.5f * pid->Ki * Ts * (err + pid->prevErr);
 8003732:	eef0 6a46 	vmov.f32	s13, s12
		lim_max_int = pid->lim_max - prop;
 8003736:	bfcc      	ite	gt
 8003738:	ee34 6a67 	vsubgt.f32	s12, s8, s15
		lim_max_int = 0.0f;
 800373c:	ed9f 6a2c 	vldrle	s12, [pc, #176]	; 80037f0 <PID_Update+0x144>
	if (pid->lim_min < prop) {
 8003740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		lim_min_int = pid->lim_min - prop;
 8003744:	bf4c      	ite	mi
 8003746:	ee30 5a67 	vsubmi.f32	s10, s0, s15
	} else {
		lim_min_int = 0.0f;
 800374a:	ed9f 5a29 	vldrpl	s10, [pc, #164]	; 80037f0 <PID_Update+0x144>
	}

	/* Clamp integrator -> prevents integrator from growing out of proportions */
	pid->integrator = _clamp(pid->integrator, lim_min_int, lim_max_int);
 800374e:	eef4 6ac5 	vcmpe.f32	s13, s10
 8003752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003756:	db08      	blt.n	800376a <PID_Update+0xbe>
 8003758:	eef4 6ac6 	vcmpe.f32	s13, s12
 800375c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003760:	bf8c      	ite	hi
 8003762:	eeb0 5a46 	vmovhi.f32	s10, s12
 8003766:	eeb0 5a66 	vmovls.f32	s10, s13

	/* Derivative: might not be necessary for FOC */
	pid->differentiator = (2.0f * pid->Kd * (meas - pid->prevMeas)
			+ (2.0f * pid->tau - pid->Ts) * pid->differentiator)
 800376a:	ed94 6a06 	vldr	s12, [r4, #24]
 800376e:	ed94 3a07 	vldr	s6, [r4, #28]
 8003772:	edd4 2a0a 	vldr	s5, [r4, #40]	; 0x28
	pid->differentiator = (2.0f * pid->Kd * (meas - pid->prevMeas)
 8003776:	edd4 4a0b 	vldr	s9, [r4, #44]	; 0x2c
			+ (2.0f * pid->tau - pid->Ts) * pid->differentiator)
 800377a:	edd4 5a02 	vldr	s11, [r4, #8]
	pid->integrator = _clamp(pid->integrator, lim_min_int, lim_max_int);
 800377e:	ed84 5a08 	vstr	s10, [r4, #32]
			+ (2.0f * pid->tau - pid->Ts) * pid->differentiator)
 8003782:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 8003786:	eef0 6a46 	vmov.f32	s13, s12
 800378a:	eed3 6a23 	vfnms.f32	s13, s6, s7
 800378e:	ee75 5aa5 	vadd.f32	s11, s11, s11
	pid->differentiator = (2.0f * pid->Kd * (meas - pid->prevMeas)
 8003792:	ee78 4ae4 	vsub.f32	s9, s17, s9
			+ (2.0f * pid->tau - pid->Ts) * pid->differentiator)
 8003796:	ee66 6aa2 	vmul.f32	s13, s13, s5
			/ (2.0f * pid->tau + pid->Ts);
 800379a:	eea3 6a23 	vfma.f32	s12, s6, s7
			+ (2.0f * pid->tau - pid->Ts) * pid->differentiator)
 800379e:	eee4 6aa5 	vfma.f32	s13, s9, s11
			/ (2.0f * pid->tau + pid->Ts);
 80037a2:	eec6 5a86 	vdiv.f32	s11, s13, s12

	/* Output */
	pid->out = prop + pid->integrator + pid->differentiator;
 80037a6:	ee75 7aa7 	vadd.f32	s15, s11, s15
	pid->differentiator = (2.0f * pid->Kd * (meas - pid->prevMeas)
 80037aa:	edc4 5a0a 	vstr	s11, [r4, #40]	; 0x28
	pid->out = prop + pid->integrator + pid->differentiator;
 80037ae:	ee77 7a85 	vadd.f32	s15, s15, s10

	/* Limiter */
	pid->out = _clamp(pid->out, pid->lim_min, pid->lim_max);
 80037b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80037b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ba:	dc08      	bgt.n	80037ce <PID_Update+0x122>
 80037bc:	eeb4 4ae7 	vcmpe.f32	s8, s15
 80037c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c4:	bf8c      	ite	hi
 80037c6:	eeb0 0a67 	vmovhi.f32	s0, s15
 80037ca:	eeb0 0a44 	vmovls.f32	s0, s8

	/* Store error and measurement in PID struct*/
	pid->prevErr = err;
	pid->prevMeas = meas;
 80037ce:	edc4 8a0b 	vstr	s17, [r4, #44]	; 0x2c
	pid->timestamp_prev = timestamp_now;

	return pid->out;
}
 80037d2:	ecbd 8b02 	vpop	{d8}
	pid->out = _clamp(pid->out, pid->lim_min, pid->lim_max);
 80037d6:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
	pid->prevErr = err;
 80037da:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
	pid->timestamp_prev = timestamp_now;
 80037de:	6160      	str	r0, [r4, #20]
}
 80037e0:	bd10      	pop	{r4, pc}
	if(Ts <= 0.0f || Ts > 0.5f) Ts = 1e-3f;
 80037e2:	eef0 5a47 	vmov.f32	s11, s14
 80037e6:	e784      	b.n	80036f2 <PID_Update+0x46>
 80037e8:	3a83126f 	.word	0x3a83126f
 80037ec:	43f9ffff 	.word	0x43f9ffff
 80037f0:	00000000 	.word	0x00000000

080037f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037f4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <HAL_MspInit+0x38>)
 80037f8:	2100      	movs	r1, #0
 80037fa:	9100      	str	r1, [sp, #0]
 80037fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003802:	645a      	str	r2, [r3, #68]	; 0x44
 8003804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003806:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800380a:	9200      	str	r2, [sp, #0]
 800380c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800380e:	9101      	str	r1, [sp, #4]
 8003810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003812:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003816:	641a      	str	r2, [r3, #64]	; 0x40
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003822:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003824:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003826:	f000 bd29 	b.w	800427c <HAL_NVIC_SetPriorityGrouping>
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800

08003830 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003830:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003832:	6802      	ldr	r2, [r0, #0]
 8003834:	4b38      	ldr	r3, [pc, #224]	; (8003918 <HAL_ADC_MspInit+0xe8>)
{
 8003836:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003838:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800383a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003840:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003844:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 8003846:	d001      	beq.n	800384c <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003848:	b00a      	add	sp, #40	; 0x28
 800384a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800384c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003850:	9400      	str	r4, [sp, #0]
 8003852:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8003854:	4e31      	ldr	r6, [pc, #196]	; (800391c <HAL_ADC_MspInit+0xec>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800385a:	645a      	str	r2, [r3, #68]	; 0x44
 800385c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800385e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003862:	9200      	str	r2, [sp, #0]
 8003864:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003866:	9401      	str	r4, [sp, #4]
 8003868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800386a:	f042 0204 	orr.w	r2, r2, #4
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
 8003870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003872:	f002 0204 	and.w	r2, r2, #4
 8003876:	9201      	str	r2, [sp, #4]
 8003878:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800387a:	9402      	str	r4, [sp, #8]
 800387c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
 8003884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003886:	f002 0201 	and.w	r2, r2, #1
 800388a:	9202      	str	r2, [sp, #8]
 800388c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800388e:	9403      	str	r4, [sp, #12]
 8003890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003892:	f042 0202 	orr.w	r2, r2, #2
 8003896:	631a      	str	r2, [r3, #48]	; 0x30
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389a:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = MotorY_i_b_Pin|MotorZ_i_a_Pin|MotorZ_i_b_Pin|current_sense_REF_Pin;
 80038a2:	220f      	movs	r2, #15
 80038a4:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a6:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038a8:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038aa:	a904      	add	r1, sp, #16
 80038ac:	481c      	ldr	r0, [pc, #112]	; (8003920 <HAL_ADC_MspInit+0xf0>)
    GPIO_InitStruct.Pin = MotorY_i_b_Pin|MotorZ_i_a_Pin|MotorZ_i_b_Pin|current_sense_REF_Pin;
 80038ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038b2:	f000 ff1f 	bl	80046f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MotorX_i_a_Pin|MotorX_i_b_Pin;
 80038b6:	2211      	movs	r2, #17
 80038b8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ba:	481a      	ldr	r0, [pc, #104]	; (8003924 <HAL_ADC_MspInit+0xf4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038bc:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038be:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = MotorX_i_a_Pin|MotorX_i_b_Pin;
 80038c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c4:	f000 ff16 	bl	80046f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MotorY_i_a_Pin;
 80038c8:	2202      	movs	r2, #2
 80038ca:	2303      	movs	r3, #3
    HAL_GPIO_Init(MotorY_i_a_GPIO_Port, &GPIO_InitStruct);
 80038cc:	4816      	ldr	r0, [pc, #88]	; (8003928 <HAL_ADC_MspInit+0xf8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ce:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(MotorY_i_a_GPIO_Port, &GPIO_InitStruct);
 80038d0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = MotorY_i_a_Pin;
 80038d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MotorY_i_a_GPIO_Port, &GPIO_InitStruct);
 80038d6:	f000 ff0d 	bl	80046f4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80038da:	4b14      	ldr	r3, [pc, #80]	; (800392c <HAL_ADC_MspInit+0xfc>)
 80038dc:	6033      	str	r3, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80038de:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80038e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80038e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80038ea:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80038ee:	6130      	str	r0, [r6, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80038f0:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80038f2:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038f6:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80038fa:	e9c6 1205 	strd	r1, r2, [r6, #20]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80038fe:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003900:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003902:	f000 fd2f 	bl	8004364 <HAL_DMA_Init>
 8003906:	b918      	cbnz	r0, 8003910 <HAL_ADC_MspInit+0xe0>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003908:	63ae      	str	r6, [r5, #56]	; 0x38
 800390a:	63b5      	str	r5, [r6, #56]	; 0x38
}
 800390c:	b00a      	add	sp, #40	; 0x28
 800390e:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003910:	f7ff feb6 	bl	8003680 <Error_Handler>
 8003914:	e7f8      	b.n	8003908 <HAL_ADC_MspInit+0xd8>
 8003916:	bf00      	nop
 8003918:	40012000 	.word	0x40012000
 800391c:	2000e530 	.word	0x2000e530
 8003920:	40020800 	.word	0x40020800
 8003924:	40020000 	.word	0x40020000
 8003928:	40020400 	.word	0x40020400
 800392c:	40026410 	.word	0x40026410

08003930 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003930:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 8003932:	6801      	ldr	r1, [r0, #0]
 8003934:	4a18      	ldr	r2, [pc, #96]	; (8003998 <HAL_SPI_MspInit+0x68>)
{
 8003936:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003938:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 800393a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003940:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003944:	9306      	str	r3, [sp, #24]
  if(hspi->Instance==SPI1)
 8003946:	d001      	beq.n	800394c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003948:	b009      	add	sp, #36	; 0x24
 800394a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800394c:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003954:	4811      	ldr	r0, [pc, #68]	; (800399c <HAL_SPI_MspInit+0x6c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003956:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800395a:	6451      	str	r1, [r2, #68]	; 0x44
 800395c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800395e:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 8003962:	9100      	str	r1, [sp, #0]
 8003964:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	6313      	str	r3, [r2, #48]	; 0x30
 8003970:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003978:	2305      	movs	r3, #5
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800397a:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800397c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800397e:	2200      	movs	r2, #0
 8003980:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003982:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003984:	24e0      	movs	r4, #224	; 0xe0
 8003986:	2502      	movs	r5, #2
 8003988:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800398c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003990:	f000 feb0 	bl	80046f4 <HAL_GPIO_Init>
}
 8003994:	b009      	add	sp, #36	; 0x24
 8003996:	bd30      	pop	{r4, r5, pc}
 8003998:	40013000 	.word	0x40013000
 800399c:	40020000 	.word	0x40020000

080039a0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80039a0:	4a1b      	ldr	r2, [pc, #108]	; (8003a10 <HAL_TIM_Base_MspInit+0x70>)
 80039a2:	6803      	ldr	r3, [r0, #0]
 80039a4:	4293      	cmp	r3, r2
{
 80039a6:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 80039a8:	d016      	beq.n	80039d8 <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80039aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ae:	d004      	beq.n	80039ba <HAL_TIM_Base_MspInit+0x1a>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80039b0:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <HAL_TIM_Base_MspInit+0x74>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d01e      	beq.n	80039f4 <HAL_TIM_Base_MspInit+0x54>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80039b6:	b004      	add	sp, #16
 80039b8:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039ba:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80039be:	2200      	movs	r2, #0
 80039c0:	9202      	str	r2, [sp, #8]
 80039c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039c4:	f042 0201 	orr.w	r2, r2, #1
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	9302      	str	r3, [sp, #8]
 80039d2:	9b02      	ldr	r3, [sp, #8]
}
 80039d4:	b004      	add	sp, #16
 80039d6:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039d8:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <HAL_TIM_Base_MspInit+0x78>)
 80039da:	2200      	movs	r2, #0
 80039dc:	9201      	str	r2, [sp, #4]
 80039de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039e0:	f042 0201 	orr.w	r2, r2, #1
 80039e4:	645a      	str	r2, [r3, #68]	; 0x44
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	9b01      	ldr	r3, [sp, #4]
}
 80039f0:	b004      	add	sp, #16
 80039f2:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039f4:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <HAL_TIM_Base_MspInit+0x78>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	9203      	str	r2, [sp, #12]
 80039fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039fc:	f042 0202 	orr.w	r2, r2, #2
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	9303      	str	r3, [sp, #12]
 8003a0a:	9b03      	ldr	r3, [sp, #12]
}
 8003a0c:	b004      	add	sp, #16
 8003a0e:	4770      	bx	lr
 8003a10:	40010000 	.word	0x40010000
 8003a14:	40000400 	.word	0x40000400
 8003a18:	40023800 	.word	0x40023800

08003a1c <HAL_TIM_OC_MspInit>:
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
  if(htim_oc->Instance==TIM5)
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <HAL_TIM_OC_MspInit+0x2c>)
 8003a1e:	6802      	ldr	r2, [r0, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d000      	beq.n	8003a26 <HAL_TIM_OC_MspInit+0xa>
 8003a24:	4770      	bx	lr
{
 8003a26:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a28:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	9201      	str	r2, [sp, #4]
 8003a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a32:	f042 0208 	orr.w	r2, r2, #8
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003a42:	b002      	add	sp, #8
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40000c00 	.word	0x40000c00

08003a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a4c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003a4e:	6802      	ldr	r2, [r0, #0]
 8003a50:	4939      	ldr	r1, [pc, #228]	; (8003b38 <HAL_TIM_MspPostInit+0xec>)
{
 8003a52:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a54:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003a56:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a58:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003a5c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003a60:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 8003a62:	d007      	beq.n	8003a74 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8003a64:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003a68:	d020      	beq.n	8003aac <HAL_TIM_MspPostInit+0x60>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8003a6a:	4934      	ldr	r1, [pc, #208]	; (8003b3c <HAL_TIM_MspPostInit+0xf0>)
 8003a6c:	428a      	cmp	r2, r1
 8003a6e:	d050      	beq.n	8003b12 <HAL_TIM_MspPostInit+0xc6>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003a70:	b00a      	add	sp, #40	; 0x28
 8003a72:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a74:	4a32      	ldr	r2, [pc, #200]	; (8003b40 <HAL_TIM_MspPostInit+0xf4>)
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7a:	4832      	ldr	r0, [pc, #200]	; (8003b44 <HAL_TIM_MspPostInit+0xf8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	6313      	str	r3, [r2, #48]	; 0x30
 8003a82:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = MotorX_pwm1_Pin|MotorX_pwm2_Pin|MotorX_pwm3_Pin;
 8003a8e:	f44f 64e0 	mov.w	r4, #1792	; 0x700
 8003a92:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a94:	2301      	movs	r3, #1
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a96:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = MotorZ_pwm1_Pin|MotorZ_pwm2_Pin|MotorZ_pwm3_Pin;
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003aa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aa4:	f000 fe26 	bl	80046f4 <HAL_GPIO_Init>
}
 8003aa8:	b00a      	add	sp, #40	; 0x28
 8003aaa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aac:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8003ab0:	9301      	str	r3, [sp, #4]
 8003ab2:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab4:	4823      	ldr	r0, [pc, #140]	; (8003b44 <HAL_TIM_MspPostInit+0xf8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab6:	f041 0101 	orr.w	r1, r1, #1
 8003aba:	6311      	str	r1, [r2, #48]	; 0x30
 8003abc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003abe:	f001 0101 	and.w	r1, r1, #1
 8003ac2:	9101      	str	r1, [sp, #4]
 8003ac4:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac6:	9302      	str	r3, [sp, #8]
 8003ac8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003aca:	f043 0302 	orr.w	r3, r3, #2
 8003ace:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	9302      	str	r3, [sp, #8]
 8003ad8:	9902      	ldr	r1, [sp, #8]
    GPIO_InitStruct.Pin = MotorY_pwm2_Pin|MotorY_pwm1_Pin;
 8003ada:	f248 0202 	movw	r2, #32770	; 0x8002
 8003ade:	2302      	movs	r3, #2
 8003ae0:	2400      	movs	r4, #0
 8003ae2:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ae4:	2601      	movs	r6, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = MotorY_pwm2_Pin|MotorY_pwm1_Pin;
 8003ae8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003aec:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003af0:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af2:	f000 fdff 	bl	80046f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MotorY_pwm3_Pin;
 8003af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003afa:	2302      	movs	r3, #2
    HAL_GPIO_Init(MotorY_pwm3_GPIO_Port, &GPIO_InitStruct);
 8003afc:	4812      	ldr	r0, [pc, #72]	; (8003b48 <HAL_TIM_MspPostInit+0xfc>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003afe:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(MotorY_pwm3_GPIO_Port, &GPIO_InitStruct);
 8003b00:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = MotorY_pwm3_Pin;
 8003b02:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003b06:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MotorY_pwm3_GPIO_Port, &GPIO_InitStruct);
 8003b0a:	f000 fdf3 	bl	80046f4 <HAL_GPIO_Init>
}
 8003b0e:	b00a      	add	sp, #40	; 0x28
 8003b10:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b12:	4a0b      	ldr	r2, [pc, #44]	; (8003b40 <HAL_TIM_MspPostInit+0xf4>)
 8003b14:	9303      	str	r3, [sp, #12]
 8003b16:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b18:	480c      	ldr	r0, [pc, #48]	; (8003b4c <HAL_TIM_MspPostInit+0x100>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b1a:	f043 0304 	orr.w	r3, r3, #4
 8003b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b20:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	9303      	str	r3, [sp, #12]
 8003b28:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b2a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = MotorZ_pwm1_Pin|MotorZ_pwm2_Pin|MotorZ_pwm3_Pin;
 8003b2c:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8003b30:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b32:	2302      	movs	r3, #2
 8003b34:	e7af      	b.n	8003a96 <HAL_TIM_MspPostInit+0x4a>
 8003b36:	bf00      	nop
 8003b38:	40010000 	.word	0x40010000
 8003b3c:	40000400 	.word	0x40000400
 8003b40:	40023800 	.word	0x40023800
 8003b44:	40020000 	.word	0x40020000
 8003b48:	40020400 	.word	0x40020400
 8003b4c:	40020800 	.word	0x40020800

08003b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b50:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8003b52:	6801      	ldr	r1, [r0, #0]
 8003b54:	4a18      	ldr	r2, [pc, #96]	; (8003bb8 <HAL_UART_MspInit+0x68>)
{
 8003b56:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b58:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8003b5a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b5c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003b60:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003b64:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 8003b66:	d001      	beq.n	8003b6c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003b68:	b009      	add	sp, #36	; 0x24
 8003b6a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b6c:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b74:	4811      	ldr	r0, [pc, #68]	; (8003bbc <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b76:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003b7a:	6411      	str	r1, [r2, #64]	; 0x40
 8003b7c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003b7e:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 8003b82:	9100      	str	r1, [sp, #0]
 8003b84:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b86:	9301      	str	r3, [sp, #4]
 8003b88:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b90:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b98:	2307      	movs	r3, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b9a:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b9c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ba2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ba4:	2404      	movs	r4, #4
 8003ba6:	2512      	movs	r5, #18
 8003ba8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003bac:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb0:	f000 fda0 	bl	80046f4 <HAL_GPIO_Init>
}
 8003bb4:	b009      	add	sp, #36	; 0x24
 8003bb6:	bd30      	pop	{r4, r5, pc}
 8003bb8:	40004400 	.word	0x40004400
 8003bbc:	40020000 	.word	0x40020000

08003bc0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003bc0:	e7fe      	b.n	8003bc0 <NMI_Handler>
 8003bc2:	bf00      	nop

08003bc4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bc4:	e7fe      	b.n	8003bc4 <HardFault_Handler>
 8003bc6:	bf00      	nop

08003bc8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bc8:	e7fe      	b.n	8003bc8 <MemManage_Handler>
 8003bca:	bf00      	nop

08003bcc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bcc:	e7fe      	b.n	8003bcc <BusFault_Handler>
 8003bce:	bf00      	nop

08003bd0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bd0:	e7fe      	b.n	8003bd0 <UsageFault_Handler>
 8003bd2:	bf00      	nop

08003bd4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop

08003bd8 <DebugMon_Handler>:
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop

08003bdc <PendSV_Handler>:
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop

08003be0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003be0:	f000 b8e2 	b.w	8003da8 <HAL_IncTick>

08003be4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Reset_program_Pin);
 8003be4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003be8:	f000 be7c 	b.w	80048e4 <HAL_GPIO_EXTI_IRQHandler>

08003bec <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003bec:	4801      	ldr	r0, [pc, #4]	; (8003bf4 <DMA2_Stream0_IRQHandler+0x8>)
 8003bee:	f000 bc91 	b.w	8004514 <HAL_DMA_IRQHandler>
 8003bf2:	bf00      	nop
 8003bf4:	2000e530 	.word	0x2000e530

08003bf8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	4770      	bx	lr

08003bfc <_kill>:

int _kill(int pid, int sig)
{
 8003bfc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003bfe:	f002 fbfd 	bl	80063fc <__errno>
 8003c02:	2316      	movs	r3, #22
 8003c04:	6003      	str	r3, [r0, #0]
	return -1;
}
 8003c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c0a:	bd08      	pop	{r3, pc}

08003c0c <_exit>:

void _exit (int status)
{
 8003c0c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003c0e:	f002 fbf5 	bl	80063fc <__errno>
 8003c12:	2316      	movs	r3, #22
 8003c14:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8003c16:	e7fe      	b.n	8003c16 <_exit+0xa>

08003c18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c18:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c1a:	1e16      	subs	r6, r2, #0
 8003c1c:	dd07      	ble.n	8003c2e <_read+0x16>
 8003c1e:	460c      	mov	r4, r1
 8003c20:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8003c22:	f3af 8000 	nop.w
 8003c26:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c2a:	42a5      	cmp	r5, r4
 8003c2c:	d1f9      	bne.n	8003c22 <_read+0xa>
	}

return len;
}
 8003c2e:	4630      	mov	r0, r6
 8003c30:	bd70      	pop	{r4, r5, r6, pc}
 8003c32:	bf00      	nop

08003c34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c34:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c36:	1e16      	subs	r6, r2, #0
 8003c38:	dd07      	ble.n	8003c4a <_write+0x16>
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8003c3e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003c42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c46:	42ac      	cmp	r4, r5
 8003c48:	d1f9      	bne.n	8003c3e <_write+0xa>
	}
	return len;
}
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	bd70      	pop	{r4, r5, r6, pc}
 8003c4e:	bf00      	nop

08003c50 <_close>:

int _close(int file)
{
	return -1;
}
 8003c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop

08003c58 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c5c:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003c5e:	2000      	movs	r0, #0
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop

08003c64 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003c64:	2001      	movs	r0, #1
 8003c66:	4770      	bx	lr

08003c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003c68:	2000      	movs	r0, #0
 8003c6a:	4770      	bx	lr

08003c6c <_sbrk>:
			- (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003c6c:	490c      	ldr	r1, [pc, #48]	; (8003ca0 <_sbrk+0x34>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003c6e:	4a0d      	ldr	r2, [pc, #52]	; (8003ca4 <_sbrk+0x38>)
	if (NULL == __sbrk_heap_end) {
 8003c70:	680b      	ldr	r3, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 8003c72:	b510      	push	{r4, lr}
	const uint32_t stack_limit = (uint32_t) &_estack
 8003c74:	4c0c      	ldr	r4, [pc, #48]	; (8003ca8 <_sbrk+0x3c>)
 8003c76:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 8003c78:	b12b      	cbz	r3, 8003c86 <_sbrk+0x1a>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003c7a:	4418      	add	r0, r3
 8003c7c:	4290      	cmp	r0, r2
 8003c7e:	d807      	bhi.n	8003c90 <_sbrk+0x24>
		errno = ENOMEM;
		return (void*) -1;
	}

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;
 8003c80:	6008      	str	r0, [r1, #0]

	return (void*) prev_heap_end;
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	bd10      	pop	{r4, pc}
		__sbrk_heap_end = &_end;
 8003c86:	4b09      	ldr	r3, [pc, #36]	; (8003cac <_sbrk+0x40>)
 8003c88:	600b      	str	r3, [r1, #0]
	if (__sbrk_heap_end + incr > max_heap) {
 8003c8a:	4418      	add	r0, r3
 8003c8c:	4290      	cmp	r0, r2
 8003c8e:	d9f7      	bls.n	8003c80 <_sbrk+0x14>
		errno = ENOMEM;
 8003c90:	f002 fbb4 	bl	80063fc <__errno>
 8003c94:	230c      	movs	r3, #12
 8003c96:	6003      	str	r3, [r0, #0]
		return (void*) -1;
 8003c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd10      	pop	{r4, pc}
 8003ca0:	20002214 	.word	0x20002214
 8003ca4:	20018000 	.word	0x20018000
 8003ca8:	00000400 	.word	0x00000400
 8003cac:	2000e878 	.word	0x2000e878

08003cb0 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8003cb0:	4a03      	ldr	r2, [pc, #12]	; (8003cc0 <SystemInit+0x10>)
 8003cb2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003cb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cbe:	4770      	bx	lr
 8003cc0:	e000ed00 	.word	0xe000ed00

08003cc4 <get_us>:
 *      Author: maxborglowe
 */

#include "time_utils.h"

uint32_t get_us(){
 8003cc4:	b508      	push	{r3, lr}
	return HAL_GetTick()*1000;
 8003cc6:	f000 f87b 	bl	8003dc0 <HAL_GetTick>
 8003cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8003cce:	fb03 f000 	mul.w	r0, r3, r0
 8003cd2:	bd08      	pop	{r3, pc}

08003cd4 <get_ms>:

uint32_t get_ms(){
	return HAL_GetTick();
 8003cd4:	f000 b874 	b.w	8003dc0 <HAL_GetTick>

08003cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cdc:	480d      	ldr	r0, [pc, #52]	; (8003d14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cde:	490e      	ldr	r1, [pc, #56]	; (8003d18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ce0:	4a0e      	ldr	r2, [pc, #56]	; (8003d1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ce4:	e002      	b.n	8003cec <LoopCopyDataInit>

08003ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cea:	3304      	adds	r3, #4

08003cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cf0:	d3f9      	bcc.n	8003ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cf2:	4a0b      	ldr	r2, [pc, #44]	; (8003d20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003cf4:	4c0b      	ldr	r4, [pc, #44]	; (8003d24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cf8:	e001      	b.n	8003cfe <LoopFillZerobss>

08003cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cfc:	3204      	adds	r2, #4

08003cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d00:	d3fb      	bcc.n	8003cfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d02:	f7ff ffd5 	bl	8003cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d06:	f002 fb7f 	bl	8006408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d0a:	f7fe ff69 	bl	8002be0 <main>
  bx  lr    
 8003d0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d18:	200021e8 	.word	0x200021e8
  ldr r2, =_sidata
 8003d1c:	0800b240 	.word	0x0800b240
  ldr r2, =_sbss
 8003d20:	200021e8 	.word	0x200021e8
  ldr r4, =_ebss
 8003d24:	2000e878 	.word	0x2000e878

08003d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d28:	e7fe      	b.n	8003d28 <ADC_IRQHandler>
	...

08003d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d2c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d2e:	4a0e      	ldr	r2, [pc, #56]	; (8003d68 <HAL_InitTick+0x3c>)
 8003d30:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <HAL_InitTick+0x40>)
 8003d32:	7812      	ldrb	r2, [r2, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
{
 8003d36:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d3c:	fbb0 f0f2 	udiv	r0, r0, r2
 8003d40:	fbb3 f0f0 	udiv	r0, r3, r0
 8003d44:	f000 faf4 	bl	8004330 <HAL_SYSTICK_Config>
 8003d48:	b908      	cbnz	r0, 8003d4e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d4a:	2d0f      	cmp	r5, #15
 8003d4c:	d901      	bls.n	8003d52 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8003d4e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003d50:	bd38      	pop	{r3, r4, r5, pc}
 8003d52:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d54:	4602      	mov	r2, r0
 8003d56:	4629      	mov	r1, r5
 8003d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d5c:	f000 faa2 	bl	80042a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d60:	4b03      	ldr	r3, [pc, #12]	; (8003d70 <HAL_InitTick+0x44>)
 8003d62:	4620      	mov	r0, r4
 8003d64:	601d      	str	r5, [r3, #0]
}
 8003d66:	bd38      	pop	{r3, r4, r5, pc}
 8003d68:	2000200c 	.word	0x2000200c
 8003d6c:	20002008 	.word	0x20002008
 8003d70:	20002010 	.word	0x20002010

08003d74 <HAL_Init>:
{
 8003d74:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d76:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <HAL_Init+0x30>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d86:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d8e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d90:	2003      	movs	r0, #3
 8003d92:	f000 fa73 	bl	800427c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d96:	2000      	movs	r0, #0
 8003d98:	f7ff ffc8 	bl	8003d2c <HAL_InitTick>
  HAL_MspInit();
 8003d9c:	f7ff fd2a 	bl	80037f4 <HAL_MspInit>
}
 8003da0:	2000      	movs	r0, #0
 8003da2:	bd08      	pop	{r3, pc}
 8003da4:	40023c00 	.word	0x40023c00

08003da8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003da8:	4a03      	ldr	r2, [pc, #12]	; (8003db8 <HAL_IncTick+0x10>)
 8003daa:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <HAL_IncTick+0x14>)
 8003dac:	6811      	ldr	r1, [r2, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	440b      	add	r3, r1
 8003db2:	6013      	str	r3, [r2, #0]
}
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	2000e864 	.word	0x2000e864
 8003dbc:	2000200c 	.word	0x2000200c

08003dc0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003dc0:	4b01      	ldr	r3, [pc, #4]	; (8003dc8 <HAL_GetTick+0x8>)
 8003dc2:	6818      	ldr	r0, [r3, #0]
}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	2000e864 	.word	0x2000e864

08003dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dcc:	b538      	push	{r3, r4, r5, lr}
 8003dce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003dd0:	f7ff fff6 	bl	8003dc0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dd4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003dd6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003dd8:	d002      	beq.n	8003de0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dda:	4b04      	ldr	r3, [pc, #16]	; (8003dec <HAL_Delay+0x20>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003de0:	f7ff ffee 	bl	8003dc0 <HAL_GetTick>
 8003de4:	1b43      	subs	r3, r0, r5
 8003de6:	42a3      	cmp	r3, r4
 8003de8:	d3fa      	bcc.n	8003de0 <HAL_Delay+0x14>
  {
  }
}
 8003dea:	bd38      	pop	{r3, r4, r5, pc}
 8003dec:	2000200c 	.word	0x2000200c

08003df0 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003df0:	2800      	cmp	r0, #0
 8003df2:	f000 80a0 	beq.w	8003f36 <HAL_ADC_Init+0x146>
{
 8003df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003df8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	b13d      	cbz	r5, 8003e0e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003dfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e00:	06db      	lsls	r3, r3, #27
 8003e02:	d50c      	bpl.n	8003e1e <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e04:	2300      	movs	r3, #0
 8003e06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8003e0a:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8003e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8003e0e:	f7ff fd0f 	bl	8003830 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003e12:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e14:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8003e16:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e1a:	06db      	lsls	r3, r3, #27
 8003e1c:	d4f2      	bmi.n	8003e04 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8003e1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e20:	4948      	ldr	r1, [pc, #288]	; (8003f44 <HAL_ADC_Init+0x154>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e22:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e24:	4d48      	ldr	r5, [pc, #288]	; (8003f48 <HAL_ADC_Init+0x158>)
    ADC_STATE_CLR_SET(hadc->State,
 8003e26:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8003e2a:	f022 0202 	bic.w	r2, r2, #2
 8003e2e:	f042 0202 	orr.w	r2, r2, #2
 8003e32:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e34:	684a      	ldr	r2, [r1, #4]
 8003e36:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003e3a:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e3c:	684a      	ldr	r2, [r1, #4]
 8003e3e:	6860      	ldr	r0, [r4, #4]
 8003e40:	4302      	orrs	r2, r0
 8003e42:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e44:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e46:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e48:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e4a:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e4c:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8003e50:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003e58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e5a:	6858      	ldr	r0, [r3, #4]
 8003e5c:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8003e60:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e62:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e66:	4339      	orrs	r1, r7
 8003e68:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e6a:	6899      	ldr	r1, [r3, #8]
 8003e6c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8003e70:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e72:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e74:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e76:	ea42 0206 	orr.w	r2, r2, r6
 8003e7a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e7c:	d052      	beq.n	8003f24 <HAL_ADC_Init+0x134>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e7e:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e80:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e82:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8003e86:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	4310      	orrs	r0, r2
 8003e8c:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e8e:	6899      	ldr	r1, [r3, #8]
 8003e90:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8003e94:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	432a      	orrs	r2, r5
 8003e9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	f022 0202 	bic.w	r2, r2, #2
 8003ea2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	7e21      	ldrb	r1, [r4, #24]
 8003ea8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003eac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003eae:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003eb2:	2a00      	cmp	r2, #0
 8003eb4:	d041      	beq.n	8003f3a <HAL_ADC_Init+0x14a>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003eb6:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003eb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003eba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ebe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ec6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	3901      	subs	r1, #1
 8003ecc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003ed0:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ed4:	69e0      	ldr	r0, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ed6:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ed8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ede:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ee0:	3801      	subs	r0, #1
 8003ee2:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
 8003ee6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ee8:	6899      	ldr	r1, [r3, #8]
 8003eea:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003eee:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ef0:	6899      	ldr	r1, [r3, #8]
 8003ef2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8003ef6:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8003efa:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003efc:	6899      	ldr	r1, [r3, #8]
 8003efe:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003f02:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f04:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003f06:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f08:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8003f0c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003f0e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003f10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f12:	f023 0303 	bic.w	r3, r3, #3
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f32:	609a      	str	r2, [r3, #8]
 8003f34:	e7b2      	b.n	8003e9c <HAL_ADC_Init+0xac>
    return HAL_ERROR;
 8003f36:	2001      	movs	r0, #1
}
 8003f38:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	e7c6      	b.n	8003ed2 <HAL_ADC_Init+0xe2>
 8003f44:	40012300 	.word	0x40012300
 8003f48:	0f000001 	.word	0x0f000001

08003f4c <HAL_ADC_Start_DMA>:
{
 8003f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f4e:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8003f50:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
{
 8003f54:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8003f56:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8003f58:	2801      	cmp	r0, #1
  __IO uint32_t counter = 0U;
 8003f5a:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 8003f5c:	f000 8088 	beq.w	8004070 <HAL_ADC_Start_DMA+0x124>
 8003f60:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003f62:	682e      	ldr	r6, [r5, #0]
  __HAL_LOCK(hadc);
 8003f64:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003f68:	68b3      	ldr	r3, [r6, #8]
 8003f6a:	07dc      	lsls	r4, r3, #31
 8003f6c:	d414      	bmi.n	8003f98 <HAL_ADC_Start_DMA+0x4c>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f6e:	4b42      	ldr	r3, [pc, #264]	; (8004078 <HAL_ADC_Start_DMA+0x12c>)
 8003f70:	4c42      	ldr	r4, [pc, #264]	; (800407c <HAL_ADC_Start_DMA+0x130>)
 8003f72:	6818      	ldr	r0, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8003f74:	68b3      	ldr	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f76:	fba4 4000 	umull	r4, r0, r4, r0
 8003f7a:	0c80      	lsrs	r0, r0, #18
    __HAL_ADC_ENABLE(hadc);
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f80:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8003f84:	60b3      	str	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f86:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8003f88:	9b01      	ldr	r3, [sp, #4]
 8003f8a:	b12b      	cbz	r3, 8003f98 <HAL_ADC_Start_DMA+0x4c>
      counter--;
 8003f8c:	9c01      	ldr	r4, [sp, #4]
 8003f8e:	3c01      	subs	r4, #1
 8003f90:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8003f92:	9801      	ldr	r0, [sp, #4]
 8003f94:	2800      	cmp	r0, #0
 8003f96:	d1f9      	bne.n	8003f8c <HAL_ADC_Start_DMA+0x40>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003f98:	68b3      	ldr	r3, [r6, #8]
 8003f9a:	05d8      	lsls	r0, r3, #23
 8003f9c:	d503      	bpl.n	8003fa6 <HAL_ADC_Start_DMA+0x5a>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003f9e:	68b3      	ldr	r3, [r6, #8]
 8003fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fa4:	60b3      	str	r3, [r6, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003fa6:	68b0      	ldr	r0, [r6, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8003fa8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003faa:	f010 0001 	ands.w	r0, r0, #1
 8003fae:	d043      	beq.n	8004038 <HAL_ADC_Start_DMA+0xec>
    ADC_STATE_CLR_SET(hadc->State,
 8003fb0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003fb4:	f023 0301 	bic.w	r3, r3, #1
 8003fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbc:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003fbe:	6873      	ldr	r3, [r6, #4]
 8003fc0:	055b      	lsls	r3, r3, #21
 8003fc2:	d505      	bpl.n	8003fd0 <HAL_ADC_Start_DMA+0x84>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003fc4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003fc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003fca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fce:	642b      	str	r3, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fd0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003fd2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8003fd4:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8004090 <HAL_ADC_Start_DMA+0x144>
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003fd8:	4f29      	ldr	r7, [pc, #164]	; (8004080 <HAL_ADC_Start_DMA+0x134>)
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fda:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003fde:	bf1c      	itt	ne
 8003fe0:	6c6b      	ldrne	r3, [r5, #68]	; 0x44
 8003fe2:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8003fe6:	646b      	str	r3, [r5, #68]	; 0x44
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003fe8:	4b26      	ldr	r3, [pc, #152]	; (8004084 <HAL_ADC_Start_DMA+0x138>)
    __HAL_UNLOCK(hadc);   
 8003fea:	2400      	movs	r4, #0
 8003fec:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ff0:	e9c0 c30f 	strd	ip, r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ff4:	f06f 0322 	mvn.w	r3, #34	; 0x22
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ff8:	64c7      	str	r7, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ffa:	6033      	str	r3, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ffc:	6873      	ldr	r3, [r6, #4]
 8003ffe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004002:	6073      	str	r3, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004004:	68b7      	ldr	r7, [r6, #8]
 8004006:	f447 7780 	orr.w	r7, r7, #256	; 0x100
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800400a:	4613      	mov	r3, r2
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800400c:	60b7      	str	r7, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800400e:	460a      	mov	r2, r1
 8004010:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8004014:	f000 fa40 	bl	8004498 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004018:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <HAL_ADC_Start_DMA+0x13c>)
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	f012 021f 	ands.w	r2, r2, #31
 8004020:	d113      	bne.n	800404a <HAL_ADC_Start_DMA+0xfe>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004022:	6829      	ldr	r1, [r5, #0]
 8004024:	6888      	ldr	r0, [r1, #8]
 8004026:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800402a:	d115      	bne.n	8004058 <HAL_ADC_Start_DMA+0x10c>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800402c:	688b      	ldr	r3, [r1, #8]
 800402e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004032:	608b      	str	r3, [r1, #8]
}
 8004034:	b003      	add	sp, #12
 8004036:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004038:	f043 0310 	orr.w	r3, r3, #16
 800403c:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800403e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	646b      	str	r3, [r5, #68]	; 0x44
}
 8004046:	b003      	add	sp, #12
 8004048:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800404a:	682b      	ldr	r3, [r5, #0]
 800404c:	4a0f      	ldr	r2, [pc, #60]	; (800408c <HAL_ADC_Start_DMA+0x140>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d005      	beq.n	800405e <HAL_ADC_Start_DMA+0x112>
  return HAL_OK;
 8004052:	4620      	mov	r0, r4
}
 8004054:	b003      	add	sp, #12
 8004056:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8004058:	4610      	mov	r0, r2
}
 800405a:	b003      	add	sp, #12
 800405c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800405e:	6898      	ldr	r0, [r3, #8]
 8004060:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8004064:	d1f5      	bne.n	8004052 <HAL_ADC_Start_DMA+0x106>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800406c:	609a      	str	r2, [r3, #8]
 800406e:	e7ea      	b.n	8004046 <HAL_ADC_Start_DMA+0xfa>
  __HAL_LOCK(hadc);
 8004070:	2002      	movs	r0, #2
}
 8004072:	b003      	add	sp, #12
 8004074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004076:	bf00      	nop
 8004078:	20002008 	.word	0x20002008
 800407c:	431bde83 	.word	0x431bde83
 8004080:	080040a9 	.word	0x080040a9
 8004084:	08004099 	.word	0x08004099
 8004088:	40012300 	.word	0x40012300
 800408c:	40012000 	.word	0x40012000
 8004090:	080040c1 	.word	0x080040c1

08004094 <HAL_ADC_ConvHalfCpltCallback>:
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop

08004098 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004098:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800409a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800409c:	f7ff fffa 	bl	8004094 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040a0:	bd08      	pop	{r3, pc}
 80040a2:	bf00      	nop

080040a4 <HAL_ADC_ErrorCallback>:
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop

080040a8 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80040aa:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80040ac:	2340      	movs	r3, #64	; 0x40
 80040ae:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80040b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80040b2:	f043 0304 	orr.w	r3, r3, #4
 80040b6:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040b8:	f7ff fff4 	bl	80040a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040bc:	bd08      	pop	{r3, pc}
 80040be:	bf00      	nop

080040c0 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80040c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040c4:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80040c8:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80040cc:	d123      	bne.n	8004116 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040d2:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040d6:	688a      	ldr	r2, [r1, #8]
 80040d8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80040dc:	d117      	bne.n	800410e <ADC_DMAConvCplt+0x4e>
 80040de:	7e1a      	ldrb	r2, [r3, #24]
 80040e0:	b9aa      	cbnz	r2, 800410e <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040e2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040e4:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80040e8:	d002      	beq.n	80040f0 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040ea:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040ec:	0550      	lsls	r0, r2, #21
 80040ee:	d40e      	bmi.n	800410e <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80040f0:	684a      	ldr	r2, [r1, #4]
 80040f2:	f022 0220 	bic.w	r2, r2, #32
 80040f6:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80040f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040fe:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004100:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004102:	04d1      	lsls	r1, r2, #19
 8004104:	d403      	bmi.n	800410e <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004108:	f042 0201 	orr.w	r2, r2, #1
 800410c:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fab0 	bl	8003674 <HAL_ADC_ConvCpltCallback>
}
 8004114:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004116:	06d2      	lsls	r2, r2, #27
 8004118:	d404      	bmi.n	8004124 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800411c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004122:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff ffbd 	bl	80040a4 <HAL_ADC_ErrorCallback>
}
 800412a:	bd10      	pop	{r4, pc}

0800412c <HAL_ADC_ConfigChannel>:
{
 800412c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 800412e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004132:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8004134:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004136:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8004138:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800413a:	f000 8094 	beq.w	8004266 <HAL_ADC_ConfigChannel+0x13a>
 800413e:	2301      	movs	r3, #1
 8004140:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004144:	680d      	ldr	r5, [r1, #0]
 8004146:	2d09      	cmp	r5, #9
 8004148:	d829      	bhi.n	800419e <HAL_ADC_ConfigChannel+0x72>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800414a:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800414c:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800414e:	6922      	ldr	r2, [r4, #16]
 8004150:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8004154:	2607      	movs	r6, #7
 8004156:	40be      	lsls	r6, r7
 8004158:	ea22 0206 	bic.w	r2, r2, r6
 800415c:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800415e:	6922      	ldr	r2, [r4, #16]
 8004160:	40bb      	lsls	r3, r7
 8004162:	4313      	orrs	r3, r2
 8004164:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7U)
 8004166:	684b      	ldr	r3, [r1, #4]
 8004168:	2b06      	cmp	r3, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800416a:	462e      	mov	r6, r5
  if (sConfig->Rank < 7U)
 800416c:	d82c      	bhi.n	80041c8 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800416e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004172:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004174:	3b05      	subs	r3, #5
 8004176:	211f      	movs	r1, #31
 8004178:	4099      	lsls	r1, r3
 800417a:	ea22 0201 	bic.w	r2, r2, r1
 800417e:	6362      	str	r2, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004180:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004182:	fa06 f303 	lsl.w	r3, r6, r3
 8004186:	4313      	orrs	r3, r2
 8004188:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800418a:	4b39      	ldr	r3, [pc, #228]	; (8004270 <HAL_ADC_ConfigChannel+0x144>)
 800418c:	429c      	cmp	r4, r3
 800418e:	d02f      	beq.n	80041f0 <HAL_ADC_ConfigChannel+0xc4>
  __HAL_UNLOCK(hadc);
 8004190:	2300      	movs	r3, #0
 8004192:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004196:	4618      	mov	r0, r3
}
 8004198:	b002      	add	sp, #8
 800419a:	bcf0      	pop	{r4, r5, r6, r7}
 800419c:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800419e:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80041a0:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80041a2:	68e7      	ldr	r7, [r4, #12]
 80041a4:	b2ae      	uxth	r6, r5
 80041a6:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80041aa:	3a1e      	subs	r2, #30
 80041ac:	f04f 0c07 	mov.w	ip, #7
 80041b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80041b4:	ea27 070c 	bic.w	r7, r7, ip
 80041b8:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80041ba:	68e7      	ldr	r7, [r4, #12]
 80041bc:	4093      	lsls	r3, r2
 80041be:	433b      	orrs	r3, r7
 80041c0:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80041c2:	684b      	ldr	r3, [r1, #4]
 80041c4:	2b06      	cmp	r3, #6
 80041c6:	d9d2      	bls.n	800416e <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80041c8:	2b0c      	cmp	r3, #12
 80041ca:	d837      	bhi.n	800423c <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80041d0:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 80041d4:	221f      	movs	r2, #31
 80041d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041d8:	408a      	lsls	r2, r1
 80041da:	ea23 0302 	bic.w	r3, r3, r2
 80041de:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041e2:	fa06 f101 	lsl.w	r1, r6, r1
 80041e6:	4319      	orrs	r1, r3
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041e8:	4b21      	ldr	r3, [pc, #132]	; (8004270 <HAL_ADC_ConfigChannel+0x144>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041ea:	6321      	str	r1, [r4, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041ec:	429c      	cmp	r4, r3
 80041ee:	d1cf      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x64>
 80041f0:	2d12      	cmp	r5, #18
 80041f2:	d032      	beq.n	800425a <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041f4:	f1a5 0310 	sub.w	r3, r5, #16
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d8c9      	bhi.n	8004190 <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041fc:	4a1d      	ldr	r2, [pc, #116]	; (8004274 <HAL_ADC_ConfigChannel+0x148>)
 80041fe:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004200:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004202:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004206:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004208:	d1c2      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x64>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800420a:	4b1b      	ldr	r3, [pc, #108]	; (8004278 <HAL_ADC_ConfigChannel+0x14c>)
 800420c:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8004216:	f202 3283 	addw	r2, r2, #899	; 0x383
 800421a:	fba2 2303 	umull	r2, r3, r2, r3
 800421e:	0c9b      	lsrs	r3, r3, #18
 8004220:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8004228:	9b01      	ldr	r3, [sp, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0b0      	beq.n	8004190 <HAL_ADC_ConfigChannel+0x64>
        counter--;
 800422e:	9b01      	ldr	r3, [sp, #4]
 8004230:	3b01      	subs	r3, #1
 8004232:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8004234:	9b01      	ldr	r3, [sp, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f9      	bne.n	800422e <HAL_ADC_ConfigChannel+0x102>
 800423a:	e7a9      	b.n	8004190 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800423c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004240:	3a41      	subs	r2, #65	; 0x41
 8004242:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004244:	211f      	movs	r1, #31
 8004246:	4091      	lsls	r1, r2
 8004248:	ea23 0301 	bic.w	r3, r3, r1
 800424c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800424e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004250:	fa06 f102 	lsl.w	r1, r6, r2
 8004254:	4319      	orrs	r1, r3
 8004256:	62e1      	str	r1, [r4, #44]	; 0x2c
 8004258:	e797      	b.n	800418a <HAL_ADC_ConfigChannel+0x5e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800425a:	4a06      	ldr	r2, [pc, #24]	; (8004274 <HAL_ADC_ConfigChannel+0x148>)
 800425c:	6853      	ldr	r3, [r2, #4]
 800425e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004262:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004264:	e794      	b.n	8004190 <HAL_ADC_ConfigChannel+0x64>
  __HAL_LOCK(hadc);
 8004266:	2002      	movs	r0, #2
}
 8004268:	b002      	add	sp, #8
 800426a:	bcf0      	pop	{r4, r5, r6, r7}
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40012000 	.word	0x40012000
 8004274:	40012300 	.word	0x40012300
 8004278:	20002008 	.word	0x20002008

0800427c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800427c:	4908      	ldr	r1, [pc, #32]	; (80042a0 <HAL_NVIC_SetPriorityGrouping+0x24>)
 800427e:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004280:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004282:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004284:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8004288:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800428a:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800428e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004298:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 800429c:	60cb      	str	r3, [r1, #12]
 800429e:	4770      	bx	lr
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042a4:	4b19      	ldr	r3, [pc, #100]	; (800430c <HAL_NVIC_SetPriority+0x68>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042ac:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042ae:	f1c3 0507 	rsb	r5, r3, #7
 80042b2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042b4:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042b8:	bf28      	it	cs
 80042ba:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042bc:	2c06      	cmp	r4, #6
 80042be:	d919      	bls.n	80042f4 <HAL_NVIC_SetPriority+0x50>
 80042c0:	3b03      	subs	r3, #3
 80042c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80042c6:	409c      	lsls	r4, r3
 80042c8:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80042d0:	40ac      	lsls	r4, r5
 80042d2:	ea21 0104 	bic.w	r1, r1, r4
 80042d6:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80042d8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042da:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80042de:	db0c      	blt.n	80042fa <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80042e4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80042e8:	0109      	lsls	r1, r1, #4
 80042ea:	b2c9      	uxtb	r1, r1
 80042ec:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80042f0:	bc30      	pop	{r4, r5}
 80042f2:	4770      	bx	lr
 80042f4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042f6:	4613      	mov	r3, r2
 80042f8:	e7e8      	b.n	80042cc <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_NVIC_SetPriority+0x6c>)
 80042fc:	f000 000f 	and.w	r0, r0, #15
 8004300:	0109      	lsls	r1, r1, #4
 8004302:	4403      	add	r3, r0
 8004304:	b2c9      	uxtb	r1, r1
 8004306:	7619      	strb	r1, [r3, #24]
 8004308:	bc30      	pop	{r4, r5}
 800430a:	4770      	bx	lr
 800430c:	e000ed00 	.word	0xe000ed00
 8004310:	e000ecfc 	.word	0xe000ecfc

08004314 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004314:	2800      	cmp	r0, #0
 8004316:	db07      	blt.n	8004328 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004318:	f000 011f 	and.w	r1, r0, #31
 800431c:	4a03      	ldr	r2, [pc, #12]	; (800432c <HAL_NVIC_EnableIRQ+0x18>)
 800431e:	0940      	lsrs	r0, r0, #5
 8004320:	2301      	movs	r3, #1
 8004322:	408b      	lsls	r3, r1
 8004324:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	e000e100 	.word	0xe000e100

08004330 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004330:	3801      	subs	r0, #1
 8004332:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004336:	d20e      	bcs.n	8004356 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004338:	4b08      	ldr	r3, [pc, #32]	; (800435c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800433a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800433c:	4c08      	ldr	r4, [pc, #32]	; (8004360 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800433e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004340:	20f0      	movs	r0, #240	; 0xf0
 8004342:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004346:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004348:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800434a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800434c:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 800434e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004352:	6019      	str	r1, [r3, #0]
 8004354:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004356:	2001      	movs	r0, #1
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	e000e010 	.word	0xe000e010
 8004360:	e000ed00 	.word	0xe000ed00

08004364 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8004368:	f7ff fd2a 	bl	8003dc0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800436c:	2c00      	cmp	r4, #0
 800436e:	d054      	beq.n	800441a <HAL_DMA_Init+0xb6>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004370:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8004372:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8004374:	2102      	movs	r1, #2
 8004376:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800437a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	f022 0201 	bic.w	r2, r2, #1
 8004384:	4605      	mov	r5, r0
 8004386:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004388:	e005      	b.n	8004396 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800438a:	f7ff fd19 	bl	8003dc0 <HAL_GetTick>
 800438e:	1b43      	subs	r3, r0, r5
 8004390:	2b05      	cmp	r3, #5
 8004392:	d83b      	bhi.n	800440c <HAL_DMA_Init+0xa8>
 8004394:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	07d1      	lsls	r1, r2, #31
 800439a:	d4f6      	bmi.n	800438a <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800439c:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a0:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043a4:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a6:	6961      	ldr	r1, [r4, #20]
  tmp = hdma->Instance->CR;
 80043a8:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043aa:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ac:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043b0:	4302      	orrs	r2, r0
 80043b2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80043b4:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043b6:	4935      	ldr	r1, [pc, #212]	; (800448c <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043b8:	4332      	orrs	r2, r6
 80043ba:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80043bc:	4302      	orrs	r2, r0

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043be:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043c0:	4039      	ands	r1, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043c2:	2804      	cmp	r0, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043c4:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043c8:	d029      	beq.n	800441e <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043ca:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043cc:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043ce:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043d2:	4310      	orrs	r0, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	492e      	ldr	r1, [pc, #184]	; (8004490 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 80043d8:	6158      	str	r0, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043da:	3a10      	subs	r2, #16
 80043dc:	fba1 0102 	umull	r0, r1, r1, r2
 80043e0:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043e2:	482c      	ldr	r0, [pc, #176]	; (8004494 <HAL_DMA_Init+0x130>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043e4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043e8:	5c41      	ldrb	r1, [r0, r1]
 80043ea:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043ec:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 80043f0:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043f2:	bf88      	it	hi
 80043f4:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043f6:	223f      	movs	r2, #63	; 0x3f
 80043f8:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 80043fa:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043fc:	2100      	movs	r1, #0
 80043fe:	65a3      	str	r3, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004400:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004402:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004404:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 8004408:	4608      	mov	r0, r1
}
 800440a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800440c:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800440e:	2220      	movs	r2, #32
 8004410:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004412:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8004416:	4618      	mov	r0, r3
}
 8004418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800441a:	2001      	movs	r0, #1
}
 800441c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800441e:	e9d4 500b 	ldrd	r5, r0, [r4, #44]	; 0x2c
 8004422:	4328      	orrs	r0, r5
 8004424:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 8004426:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 8004428:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 800442a:	6958      	ldr	r0, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800442c:	f020 0007 	bic.w	r0, r0, #7
 8004430:	4310      	orrs	r0, r2
    tmp |= hdma->Init.FIFOThreshold;
 8004432:	f040 0004 	orr.w	r0, r0, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004436:	2d00      	cmp	r5, #0
 8004438:	d0cc      	beq.n	80043d4 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800443a:	b17e      	cbz	r6, 800445c <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800443c:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8004440:	d012      	beq.n	8004468 <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004442:	2a02      	cmp	r2, #2
 8004444:	d903      	bls.n	800444e <HAL_DMA_Init+0xea>
 8004446:	2a03      	cmp	r2, #3
 8004448:	d1c4      	bne.n	80043d4 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800444a:	01ea      	lsls	r2, r5, #7
 800444c:	d5c2      	bpl.n	80043d4 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 800444e:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004450:	2240      	movs	r2, #64	; 0x40
 8004452:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004454:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8004458:	4618      	mov	r0, r3
}
 800445a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 800445c:	2a01      	cmp	r2, #1
 800445e:	d011      	beq.n	8004484 <HAL_DMA_Init+0x120>
 8004460:	f032 0202 	bics.w	r2, r2, #2
 8004464:	d1b6      	bne.n	80043d4 <HAL_DMA_Init+0x70>
 8004466:	e7f0      	b.n	800444a <HAL_DMA_Init+0xe6>
    switch (tmp)
 8004468:	2a03      	cmp	r2, #3
 800446a:	d8b3      	bhi.n	80043d4 <HAL_DMA_Init+0x70>
 800446c:	a101      	add	r1, pc, #4	; (adr r1, 8004474 <HAL_DMA_Init+0x110>)
 800446e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004472:	bf00      	nop
 8004474:	0800444f 	.word	0x0800444f
 8004478:	0800444b 	.word	0x0800444b
 800447c:	0800444f 	.word	0x0800444f
 8004480:	08004485 	.word	0x08004485
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004484:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8004488:	d1a4      	bne.n	80043d4 <HAL_DMA_Init+0x70>
 800448a:	e7e0      	b.n	800444e <HAL_DMA_Init+0xea>
 800448c:	f010803f 	.word	0xf010803f
 8004490:	aaaaaaab 	.word	0xaaaaaaab
 8004494:	0800ac5c 	.word	0x0800ac5c

08004498 <HAL_DMA_Start_IT>:
{
 8004498:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800449a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800449e:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80044a0:	2c01      	cmp	r4, #1
 80044a2:	d034      	beq.n	800450e <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 80044a4:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 80044a8:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80044aa:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 80044ac:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80044b0:	d005      	beq.n	80044be <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 80044b2:	2300      	movs	r3, #0
 80044b4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 80044b8:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 80044ba:	2002      	movs	r0, #2
}
 80044bc:	4770      	bx	lr
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044be:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80044c0:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044c2:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80044c4:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044c8:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044ca:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044cc:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044ce:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044d2:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044d4:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80044d6:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 80044d8:	bf0a      	itet	eq
 80044da:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80044dc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 80044de:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044e0:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 80044e2:	bf18      	it	ne
 80044e4:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044e6:	233f      	movs	r3, #63	; 0x3f
 80044e8:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 80044ea:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044ec:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	f043 0316 	orr.w	r3, r3, #22
 80044f4:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80044f6:	b11a      	cbz	r2, 8004500 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	f043 0308 	orr.w	r3, r3, #8
 80044fe:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004508:	2000      	movs	r0, #0
}
 800450a:	bcf0      	pop	{r4, r5, r6, r7}
 800450c:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800450e:	2002      	movs	r0, #2
}
 8004510:	bcf0      	pop	{r4, r5, r6, r7}
 8004512:	4770      	bx	lr

08004514 <HAL_DMA_IRQHandler>:
{
 8004514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004518:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800451a:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800451c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 800451e:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004520:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8004522:	6834      	ldr	r4, [r6, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004524:	4971      	ldr	r1, [pc, #452]	; (80046ec <HAL_DMA_IRQHandler+0x1d8>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004526:	2208      	movs	r2, #8
 8004528:	409a      	lsls	r2, r3
 800452a:	4222      	tst	r2, r4
  uint32_t timeout = SystemCoreClock / 9600U;
 800452c:	680d      	ldr	r5, [r1, #0]
{
 800452e:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004530:	d004      	beq.n	800453c <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004532:	6801      	ldr	r1, [r0, #0]
 8004534:	680f      	ldr	r7, [r1, #0]
 8004536:	0778      	lsls	r0, r7, #29
 8004538:	f100 808a 	bmi.w	8004650 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800453c:	2201      	movs	r2, #1
 800453e:	409a      	lsls	r2, r3
 8004540:	4222      	tst	r2, r4
 8004542:	d004      	beq.n	800454e <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004544:	f8d8 1000 	ldr.w	r1, [r8]
 8004548:	6949      	ldr	r1, [r1, #20]
 800454a:	0609      	lsls	r1, r1, #24
 800454c:	d478      	bmi.n	8004640 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800454e:	2204      	movs	r2, #4
 8004550:	409a      	lsls	r2, r3
 8004552:	4222      	tst	r2, r4
 8004554:	d004      	beq.n	8004560 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004556:	f8d8 1000 	ldr.w	r1, [r8]
 800455a:	6809      	ldr	r1, [r1, #0]
 800455c:	078f      	lsls	r7, r1, #30
 800455e:	d467      	bmi.n	8004630 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004560:	2210      	movs	r2, #16
 8004562:	409a      	lsls	r2, r3
 8004564:	4222      	tst	r2, r4
 8004566:	d004      	beq.n	8004572 <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004568:	f8d8 1000 	ldr.w	r1, [r8]
 800456c:	680f      	ldr	r7, [r1, #0]
 800456e:	0738      	lsls	r0, r7, #28
 8004570:	d449      	bmi.n	8004606 <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004572:	2220      	movs	r2, #32
 8004574:	409a      	lsls	r2, r3
 8004576:	4222      	tst	r2, r4
 8004578:	d017      	beq.n	80045aa <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800457a:	f8d8 1000 	ldr.w	r1, [r8]
 800457e:	680c      	ldr	r4, [r1, #0]
 8004580:	06e0      	lsls	r0, r4, #27
 8004582:	d512      	bpl.n	80045aa <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004584:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004586:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800458a:	2a05      	cmp	r2, #5
 800458c:	d073      	beq.n	8004676 <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800458e:	680b      	ldr	r3, [r1, #0]
 8004590:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004594:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004596:	f000 8090 	beq.w	80046ba <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800459a:	0319      	lsls	r1, r3, #12
 800459c:	f140 809b 	bpl.w	80046d6 <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 80045a0:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80045a4:	b10b      	cbz	r3, 80045aa <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 80045a6:	4640      	mov	r0, r8
 80045a8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045aa:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80045ae:	b33b      	cbz	r3, 8004600 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045b0:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80045b4:	07da      	lsls	r2, r3, #31
 80045b6:	d51b      	bpl.n	80045f0 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 80045b8:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045bc:	494c      	ldr	r1, [pc, #304]	; (80046f0 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80045be:	2305      	movs	r3, #5
 80045c0:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80045c4:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045c6:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 80045ca:	f023 0301 	bic.w	r3, r3, #1
 80045ce:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045d0:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 80045d2:	e002      	b.n	80045da <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045d4:	6813      	ldr	r3, [r2, #0]
 80045d6:	07db      	lsls	r3, r3, #31
 80045d8:	d504      	bpl.n	80045e4 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 80045da:	9b01      	ldr	r3, [sp, #4]
 80045dc:	3301      	adds	r3, #1
 80045de:	42ab      	cmp	r3, r5
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	d9f7      	bls.n	80045d4 <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 80045e4:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 80045e6:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 80045e8:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80045ec:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80045f0:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80045f4:	b123      	cbz	r3, 8004600 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 80045f6:	4640      	mov	r0, r8
}
 80045f8:	b002      	add	sp, #8
 80045fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 80045fe:	4718      	bx	r3
}
 8004600:	b002      	add	sp, #8
 8004602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004606:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004608:	680a      	ldr	r2, [r1, #0]
 800460a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800460e:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004610:	d12a      	bne.n	8004668 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004612:	05d7      	lsls	r7, r2, #23
 8004614:	d403      	bmi.n	800461e <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004616:	680a      	ldr	r2, [r1, #0]
 8004618:	f022 0208 	bic.w	r2, r2, #8
 800461c:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800461e:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8004622:	2a00      	cmp	r2, #0
 8004624:	d0a5      	beq.n	8004572 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8004626:	4640      	mov	r0, r8
 8004628:	4790      	blx	r2
 800462a:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800462e:	e7a0      	b.n	8004572 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004630:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004632:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8004636:	f042 0204 	orr.w	r2, r2, #4
 800463a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800463e:	e78f      	b.n	8004560 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004640:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004642:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8004646:	f042 0202 	orr.w	r2, r2, #2
 800464a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800464e:	e77e      	b.n	800454e <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004650:	680f      	ldr	r7, [r1, #0]
 8004652:	f027 0704 	bic.w	r7, r7, #4
 8004656:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004658:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800465a:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8004666:	e769      	b.n	800453c <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004668:	0312      	lsls	r2, r2, #12
 800466a:	d5d8      	bpl.n	800461e <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800466c:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8004670:	2a00      	cmp	r2, #0
 8004672:	d1d8      	bne.n	8004626 <HAL_DMA_IRQHandler+0x112>
 8004674:	e77d      	b.n	8004572 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004676:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004678:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800467c:	f022 0216 	bic.w	r2, r2, #22
 8004680:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004682:	694a      	ldr	r2, [r1, #20]
 8004684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004688:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800468a:	b354      	cbz	r4, 80046e2 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800468c:	680a      	ldr	r2, [r1, #0]
 800468e:	f022 0208 	bic.w	r2, r2, #8
 8004692:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004694:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 8004696:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
        hdma->State = HAL_DMA_STATE_READY;
 800469e:	2401      	movs	r4, #1
        __HAL_UNLOCK(hdma);
 80046a0:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046a2:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80046a4:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80046a8:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80046ac:	2900      	cmp	r1, #0
 80046ae:	d0a7      	beq.n	8004600 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 80046b0:	4640      	mov	r0, r8
}
 80046b2:	b002      	add	sp, #8
 80046b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 80046b8:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046ba:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80046be:	f47f af6f 	bne.w	80045a0 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046c2:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80046c4:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046c6:	f022 0210 	bic.w	r2, r2, #16
 80046ca:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 80046cc:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80046d0:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80046d4:	e764      	b.n	80045a0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 80046d6:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f47f af63 	bne.w	80045a6 <HAL_DMA_IRQHandler+0x92>
 80046e0:	e763      	b.n	80045aa <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046e2:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80046e6:	2a00      	cmp	r2, #0
 80046e8:	d1d0      	bne.n	800468c <HAL_DMA_IRQHandler+0x178>
 80046ea:	e7d3      	b.n	8004694 <HAL_DMA_IRQHandler+0x180>
 80046ec:	20002008 	.word	0x20002008
 80046f0:	1b4e81b5 	.word	0x1b4e81b5

080046f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f8:	468b      	mov	fp, r1
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046fa:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 80048c8 <HAL_GPIO_Init+0x1d4>
 80046fe:	6809      	ldr	r1, [r1, #0]
{
 8004700:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004702:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8004704:	f04f 0a01 	mov.w	sl, #1
 8004708:	46d9      	mov	r9, fp
 800470a:	e002      	b.n	8004712 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800470c:	3301      	adds	r3, #1
 800470e:	2b10      	cmp	r3, #16
 8004710:	d079      	beq.n	8004806 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8004712:	fa0a f203 	lsl.w	r2, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004716:	ea02 0b01 	and.w	fp, r2, r1
    if(iocurrent == ioposition)
 800471a:	438a      	bics	r2, r1
 800471c:	d1f6      	bne.n	800470c <HAL_GPIO_Init+0x18>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800471e:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8004722:	f005 0203 	and.w	r2, r5, #3
 8004726:	1e54      	subs	r4, r2, #1
 8004728:	2c01      	cmp	r4, #1
 800472a:	ea4f 0743 	mov.w	r7, r3, lsl #1
 800472e:	d96d      	bls.n	800480c <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004730:	2a03      	cmp	r2, #3
 8004732:	f040 80ab 	bne.w	800488c <HAL_GPIO_Init+0x198>
 8004736:	40ba      	lsls	r2, r7
 8004738:	43d4      	mvns	r4, r2
 800473a:	9400      	str	r4, [sp, #0]
      temp = GPIOx->MODER;
 800473c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800473e:	9c00      	ldr	r4, [sp, #0]
 8004740:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004742:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004744:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8004748:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800474a:	d0df      	beq.n	800470c <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800474c:	4c59      	ldr	r4, [pc, #356]	; (80048b4 <HAL_GPIO_Init+0x1c0>)
 800474e:	2200      	movs	r2, #0
 8004750:	9203      	str	r2, [sp, #12]
 8004752:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004754:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004758:	6462      	str	r2, [r4, #68]	; 0x44
 800475a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800475c:	f023 0603 	bic.w	r6, r3, #3
 8004760:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8004764:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004768:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 800476c:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800476e:	f003 0403 	and.w	r4, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004772:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004774:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004776:	00a4      	lsls	r4, r4, #2
 8004778:	220f      	movs	r2, #15
 800477a:	40a2      	lsls	r2, r4
 800477c:	ea27 0202 	bic.w	r2, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004780:	4f4d      	ldr	r7, [pc, #308]	; (80048b8 <HAL_GPIO_Init+0x1c4>)
 8004782:	42b8      	cmp	r0, r7
 8004784:	d014      	beq.n	80047b0 <HAL_GPIO_Init+0xbc>
 8004786:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800478a:	42b8      	cmp	r0, r7
 800478c:	f000 8083 	beq.w	8004896 <HAL_GPIO_Init+0x1a2>
 8004790:	4f4a      	ldr	r7, [pc, #296]	; (80048bc <HAL_GPIO_Init+0x1c8>)
 8004792:	42b8      	cmp	r0, r7
 8004794:	f000 8083 	beq.w	800489e <HAL_GPIO_Init+0x1aa>
 8004798:	4f49      	ldr	r7, [pc, #292]	; (80048c0 <HAL_GPIO_Init+0x1cc>)
 800479a:	42b8      	cmp	r0, r7
 800479c:	f000 8084 	beq.w	80048a8 <HAL_GPIO_Init+0x1b4>
 80047a0:	4f48      	ldr	r7, [pc, #288]	; (80048c4 <HAL_GPIO_Init+0x1d0>)
 80047a2:	42b8      	cmp	r0, r7
 80047a4:	bf0c      	ite	eq
 80047a6:	2704      	moveq	r7, #4
 80047a8:	2707      	movne	r7, #7
 80047aa:	fa07 f404 	lsl.w	r4, r7, r4
 80047ae:	4322      	orrs	r2, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047b0:	60b2      	str	r2, [r6, #8]
        temp = EXTI->IMR;
 80047b2:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
 80047b6:	ea6f 060b 	mvn.w	r6, fp
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047ba:	03ec      	lsls	r4, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80047bc:	bf54      	ite	pl
 80047be:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80047c0:	ea4b 0202 	orrmi.w	r2, fp, r2
        }
        EXTI->IMR = temp;
 80047c4:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 80047c8:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047cc:	03aa      	lsls	r2, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80047ce:	bf54      	ite	pl
 80047d0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80047d2:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->EMR = temp;
 80047d6:	f8cc 4004 	str.w	r4, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047da:	f8dc 4008 	ldr.w	r4, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047de:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80047e0:	bf54      	ite	pl
 80047e2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80047e4:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->RTSR = temp;
 80047e8:	f8cc 4008 	str.w	r4, [ip, #8]

        temp = EXTI->FTSR;
 80047ec:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047f0:	02ac      	lsls	r4, r5, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047f2:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 80047f6:	bf54      	ite	pl
 80047f8:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 80047fa:	ea4b 0202 	orrmi.w	r2, fp, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047fe:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8004800:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004804:	d185      	bne.n	8004712 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8004806:	b005      	add	sp, #20
 8004808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800480c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800480e:	2403      	movs	r4, #3
 8004810:	40bc      	lsls	r4, r7
 8004812:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004816:	f8d9 600c 	ldr.w	r6, [r9, #12]
 800481a:	40be      	lsls	r6, r7
 800481c:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8004820:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8004822:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004826:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800482a:	ea2e 0e0b 	bic.w	lr, lr, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800482e:	409e      	lsls	r6, r3
 8004830:	ea46 060e 	orr.w	r6, r6, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004834:	43e4      	mvns	r4, r4
 8004836:	9400      	str	r4, [sp, #0]
        GPIOx->OTYPER = temp;
 8004838:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 800483a:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800483c:	ea06 0e04 	and.w	lr, r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004840:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8004844:	40be      	lsls	r6, r7
 8004846:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800484a:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800484c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800484e:	d001      	beq.n	8004854 <HAL_GPIO_Init+0x160>
 8004850:	40ba      	lsls	r2, r7
 8004852:	e773      	b.n	800473c <HAL_GPIO_Init+0x48>
        temp = GPIOx->AFR[position >> 3U];
 8004854:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8004858:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800485c:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004860:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8004864:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004866:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800486a:	240f      	movs	r4, #15
 800486c:	fa04 f60e 	lsl.w	r6, r4, lr
 8004870:	9c01      	ldr	r4, [sp, #4]
 8004872:	ea24 0606 	bic.w	r6, r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004876:	f8d9 4010 	ldr.w	r4, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800487a:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800487c:	fa04 f60e 	lsl.w	r6, r4, lr
 8004880:	9c01      	ldr	r4, [sp, #4]
 8004882:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8004884:	40ba      	lsls	r2, r7
 8004886:	f8c8 6020 	str.w	r6, [r8, #32]
 800488a:	e757      	b.n	800473c <HAL_GPIO_Init+0x48>
 800488c:	2403      	movs	r4, #3
 800488e:	40bc      	lsls	r4, r7
 8004890:	43e4      	mvns	r4, r4
 8004892:	9400      	str	r4, [sp, #0]
 8004894:	e7d1      	b.n	800483a <HAL_GPIO_Init+0x146>
 8004896:	fa0a f404 	lsl.w	r4, sl, r4
 800489a:	4322      	orrs	r2, r4
 800489c:	e788      	b.n	80047b0 <HAL_GPIO_Init+0xbc>
 800489e:	2702      	movs	r7, #2
 80048a0:	fa07 f404 	lsl.w	r4, r7, r4
 80048a4:	4322      	orrs	r2, r4
 80048a6:	e783      	b.n	80047b0 <HAL_GPIO_Init+0xbc>
 80048a8:	2703      	movs	r7, #3
 80048aa:	fa07 f404 	lsl.w	r4, r7, r4
 80048ae:	4322      	orrs	r2, r4
 80048b0:	e77e      	b.n	80047b0 <HAL_GPIO_Init+0xbc>
 80048b2:	bf00      	nop
 80048b4:	40023800 	.word	0x40023800
 80048b8:	40020000 	.word	0x40020000
 80048bc:	40020800 	.word	0x40020800
 80048c0:	40020c00 	.word	0x40020c00
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40013c00 	.word	0x40013c00

080048cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048cc:	6903      	ldr	r3, [r0, #16]
 80048ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80048d0:	bf14      	ite	ne
 80048d2:	2001      	movne	r0, #1
 80048d4:	2000      	moveq	r0, #0
 80048d6:	4770      	bx	lr

080048d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048d8:	b902      	cbnz	r2, 80048dc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048da:	0409      	lsls	r1, r1, #16
 80048dc:	6181      	str	r1, [r0, #24]
  }
}
 80048de:	4770      	bx	lr

080048e0 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop

080048e4 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80048e4:	4a04      	ldr	r2, [pc, #16]	; (80048f8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80048e6:	6951      	ldr	r1, [r2, #20]
 80048e8:	4201      	tst	r1, r0
 80048ea:	d100      	bne.n	80048ee <HAL_GPIO_EXTI_IRQHandler+0xa>
 80048ec:	4770      	bx	lr
{
 80048ee:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048f0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048f2:	f7ff fff5 	bl	80048e0 <HAL_GPIO_EXTI_Callback>
}
 80048f6:	bd08      	pop	{r3, pc}
 80048f8:	40013c00 	.word	0x40013c00

080048fc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048fc:	2800      	cmp	r0, #0
 80048fe:	f000 81a5 	beq.w	8004c4c <HAL_RCC_OscConfig+0x350>
{
 8004902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004906:	6803      	ldr	r3, [r0, #0]
 8004908:	07dd      	lsls	r5, r3, #31
{
 800490a:	b082      	sub	sp, #8
 800490c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800490e:	d52f      	bpl.n	8004970 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004910:	49ac      	ldr	r1, [pc, #688]	; (8004bc4 <HAL_RCC_OscConfig+0x2c8>)
 8004912:	688a      	ldr	r2, [r1, #8]
 8004914:	f002 020c 	and.w	r2, r2, #12
 8004918:	2a04      	cmp	r2, #4
 800491a:	f000 80ec 	beq.w	8004af6 <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800491e:	688a      	ldr	r2, [r1, #8]
 8004920:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004924:	2a08      	cmp	r2, #8
 8004926:	f000 80e2 	beq.w	8004aee <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800492a:	6863      	ldr	r3, [r4, #4]
 800492c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004930:	f000 80eb 	beq.w	8004b0a <HAL_RCC_OscConfig+0x20e>
 8004934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004938:	f000 8178 	beq.w	8004c2c <HAL_RCC_OscConfig+0x330>
 800493c:	4da1      	ldr	r5, [pc, #644]	; (8004bc4 <HAL_RCC_OscConfig+0x2c8>)
 800493e:	682a      	ldr	r2, [r5, #0]
 8004940:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004944:	602a      	str	r2, [r5, #0]
 8004946:	682a      	ldr	r2, [r5, #0]
 8004948:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800494c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800494e:	2b00      	cmp	r3, #0
 8004950:	f040 80e0 	bne.w	8004b14 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004954:	f7ff fa34 	bl	8003dc0 <HAL_GetTick>
 8004958:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800495a:	e005      	b.n	8004968 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800495c:	f7ff fa30 	bl	8003dc0 <HAL_GetTick>
 8004960:	1b80      	subs	r0, r0, r6
 8004962:	2864      	cmp	r0, #100	; 0x64
 8004964:	f200 8100 	bhi.w	8004b68 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	039b      	lsls	r3, r3, #14
 800496c:	d4f6      	bmi.n	800495c <HAL_RCC_OscConfig+0x60>
 800496e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004970:	079f      	lsls	r7, r3, #30
 8004972:	d528      	bpl.n	80049c6 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004974:	4a93      	ldr	r2, [pc, #588]	; (8004bc4 <HAL_RCC_OscConfig+0x2c8>)
 8004976:	6891      	ldr	r1, [r2, #8]
 8004978:	f011 0f0c 	tst.w	r1, #12
 800497c:	f000 8090 	beq.w	8004aa0 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004980:	6891      	ldr	r1, [r2, #8]
 8004982:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004986:	2908      	cmp	r1, #8
 8004988:	f000 8086 	beq.w	8004a98 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800498c:	68e3      	ldr	r3, [r4, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 8106 	beq.w	8004ba0 <HAL_RCC_OscConfig+0x2a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004994:	4b8c      	ldr	r3, [pc, #560]	; (8004bc8 <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004996:	4e8b      	ldr	r6, [pc, #556]	; (8004bc4 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8004998:	2201      	movs	r2, #1
 800499a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800499c:	f7ff fa10 	bl	8003dc0 <HAL_GetTick>
 80049a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a2:	e005      	b.n	80049b0 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049a4:	f7ff fa0c 	bl	8003dc0 <HAL_GetTick>
 80049a8:	1b40      	subs	r0, r0, r5
 80049aa:	2802      	cmp	r0, #2
 80049ac:	f200 80dc 	bhi.w	8004b68 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b0:	6833      	ldr	r3, [r6, #0]
 80049b2:	0798      	lsls	r0, r3, #30
 80049b4:	d5f6      	bpl.n	80049a4 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b6:	6833      	ldr	r3, [r6, #0]
 80049b8:	6922      	ldr	r2, [r4, #16]
 80049ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80049be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80049c2:	6033      	str	r3, [r6, #0]
 80049c4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c6:	071a      	lsls	r2, r3, #28
 80049c8:	d452      	bmi.n	8004a70 <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ca:	0758      	lsls	r0, r3, #29
 80049cc:	d52f      	bpl.n	8004a2e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ce:	4a7d      	ldr	r2, [pc, #500]	; (8004bc4 <HAL_RCC_OscConfig+0x2c8>)
 80049d0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80049d2:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80049d6:	d07e      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 80049d8:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049da:	4e7c      	ldr	r6, [pc, #496]	; (8004bcc <HAL_RCC_OscConfig+0x2d0>)
 80049dc:	6833      	ldr	r3, [r6, #0]
 80049de:	05d9      	lsls	r1, r3, #23
 80049e0:	f140 80b2 	bpl.w	8004b48 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049e4:	68a3      	ldr	r3, [r4, #8]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	f000 80c2 	beq.w	8004b70 <HAL_RCC_OscConfig+0x274>
 80049ec:	2b05      	cmp	r3, #5
 80049ee:	f000 812f 	beq.w	8004c50 <HAL_RCC_OscConfig+0x354>
 80049f2:	4e74      	ldr	r6, [pc, #464]	; (8004bc4 <HAL_RCC_OscConfig+0x2c8>)
 80049f4:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80049f6:	f022 0201 	bic.w	r2, r2, #1
 80049fa:	6732      	str	r2, [r6, #112]	; 0x70
 80049fc:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80049fe:	f022 0204 	bic.w	r2, r2, #4
 8004a02:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f040 80b8 	bne.w	8004b7a <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a0a:	f7ff f9d9 	bl	8003dc0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a0e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004a12:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a14:	e005      	b.n	8004a22 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a16:	f7ff f9d3 	bl	8003dc0 <HAL_GetTick>
 8004a1a:	1bc0      	subs	r0, r0, r7
 8004a1c:	4540      	cmp	r0, r8
 8004a1e:	f200 80a3 	bhi.w	8004b68 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a22:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004a24:	0798      	lsls	r0, r3, #30
 8004a26:	d4f6      	bmi.n	8004a16 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a28:	2d00      	cmp	r5, #0
 8004a2a:	f040 8109 	bne.w	8004c40 <HAL_RCC_OscConfig+0x344>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a2e:	69a0      	ldr	r0, [r4, #24]
 8004a30:	b1d0      	cbz	r0, 8004a68 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a32:	4d64      	ldr	r5, [pc, #400]	; (8004bc4 <HAL_RCC_OscConfig+0x2c8>)
 8004a34:	68ab      	ldr	r3, [r5, #8]
 8004a36:	f003 030c 	and.w	r3, r3, #12
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	f000 80cc 	beq.w	8004bd8 <HAL_RCC_OscConfig+0x2dc>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a40:	4b63      	ldr	r3, [pc, #396]	; (8004bd0 <HAL_RCC_OscConfig+0x2d4>)
 8004a42:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a44:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004a46:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a48:	f000 810c 	beq.w	8004c64 <HAL_RCC_OscConfig+0x368>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7ff f9b8 	bl	8003dc0 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a50:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8004a52:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a54:	e005      	b.n	8004a62 <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a56:	f7ff f9b3 	bl	8003dc0 <HAL_GetTick>
 8004a5a:	1b40      	subs	r0, r0, r5
 8004a5c:	2802      	cmp	r0, #2
 8004a5e:	f200 8083 	bhi.w	8004b68 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	019b      	lsls	r3, r3, #6
 8004a66:	d4f6      	bmi.n	8004a56 <HAL_RCC_OscConfig+0x15a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004a68:	2000      	movs	r0, #0
}
 8004a6a:	b002      	add	sp, #8
 8004a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a70:	6963      	ldr	r3, [r4, #20]
 8004a72:	b303      	cbz	r3, 8004ab6 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8004a74:	4b57      	ldr	r3, [pc, #348]	; (8004bd4 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a76:	4e53      	ldr	r6, [pc, #332]	; (8004bc4 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8004a78:	2201      	movs	r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004a7c:	f7ff f9a0 	bl	8003dc0 <HAL_GetTick>
 8004a80:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a82:	e004      	b.n	8004a8e <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a84:	f7ff f99c 	bl	8003dc0 <HAL_GetTick>
 8004a88:	1b40      	subs	r0, r0, r5
 8004a8a:	2802      	cmp	r0, #2
 8004a8c:	d86c      	bhi.n	8004b68 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a8e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004a90:	079b      	lsls	r3, r3, #30
 8004a92:	d5f7      	bpl.n	8004a84 <HAL_RCC_OscConfig+0x188>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	e798      	b.n	80049ca <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a98:	6852      	ldr	r2, [r2, #4]
 8004a9a:	0256      	lsls	r6, r2, #9
 8004a9c:	f53f af76 	bmi.w	800498c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa0:	4a48      	ldr	r2, [pc, #288]	; (8004bc4 <HAL_RCC_OscConfig+0x2c8>)
 8004aa2:	6812      	ldr	r2, [r2, #0]
 8004aa4:	0795      	lsls	r5, r2, #30
 8004aa6:	d543      	bpl.n	8004b30 <HAL_RCC_OscConfig+0x234>
 8004aa8:	68e2      	ldr	r2, [r4, #12]
 8004aaa:	2a01      	cmp	r2, #1
 8004aac:	d040      	beq.n	8004b30 <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 8004aae:	2001      	movs	r0, #1
}
 8004ab0:	b002      	add	sp, #8
 8004ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004ab6:	4a47      	ldr	r2, [pc, #284]	; (8004bd4 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab8:	4e42      	ldr	r6, [pc, #264]	; (8004bc4 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8004aba:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004abc:	f7ff f980 	bl	8003dc0 <HAL_GetTick>
 8004ac0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac2:	e004      	b.n	8004ace <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ac4:	f7ff f97c 	bl	8003dc0 <HAL_GetTick>
 8004ac8:	1b40      	subs	r0, r0, r5
 8004aca:	2802      	cmp	r0, #2
 8004acc:	d84c      	bhi.n	8004b68 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ace:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004ad0:	079f      	lsls	r7, r3, #30
 8004ad2:	d4f7      	bmi.n	8004ac4 <HAL_RCC_OscConfig+0x1c8>
 8004ad4:	e7de      	b.n	8004a94 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ade:	6413      	str	r3, [r2, #64]	; 0x40
 8004ae0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004aea:	2501      	movs	r5, #1
 8004aec:	e775      	b.n	80049da <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aee:	684a      	ldr	r2, [r1, #4]
 8004af0:	0250      	lsls	r0, r2, #9
 8004af2:	f57f af1a 	bpl.w	800492a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af6:	4a33      	ldr	r2, [pc, #204]	; (8004bc4 <HAL_RCC_OscConfig+0x2c8>)
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	0391      	lsls	r1, r2, #14
 8004afc:	f57f af38 	bpl.w	8004970 <HAL_RCC_OscConfig+0x74>
 8004b00:	6862      	ldr	r2, [r4, #4]
 8004b02:	2a00      	cmp	r2, #0
 8004b04:	f47f af34 	bne.w	8004970 <HAL_RCC_OscConfig+0x74>
 8004b08:	e7d1      	b.n	8004aae <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b0a:	4a2e      	ldr	r2, [pc, #184]	; (8004bc4 <HAL_RCC_OscConfig+0x2c8>)
 8004b0c:	6813      	ldr	r3, [r2, #0]
 8004b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b12:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004b14:	f7ff f954 	bl	8003dc0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b18:	4e2a      	ldr	r6, [pc, #168]	; (8004bc4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8004b1a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1c:	e004      	b.n	8004b28 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b1e:	f7ff f94f 	bl	8003dc0 <HAL_GetTick>
 8004b22:	1b40      	subs	r0, r0, r5
 8004b24:	2864      	cmp	r0, #100	; 0x64
 8004b26:	d81f      	bhi.n	8004b68 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b28:	6833      	ldr	r3, [r6, #0]
 8004b2a:	039a      	lsls	r2, r3, #14
 8004b2c:	d5f7      	bpl.n	8004b1e <HAL_RCC_OscConfig+0x222>
 8004b2e:	e71e      	b.n	800496e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b30:	4924      	ldr	r1, [pc, #144]	; (8004bc4 <HAL_RCC_OscConfig+0x2c8>)
 8004b32:	6920      	ldr	r0, [r4, #16]
 8004b34:	680a      	ldr	r2, [r1, #0]
 8004b36:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004b3a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004b3e:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b40:	071a      	lsls	r2, r3, #28
 8004b42:	f57f af42 	bpl.w	80049ca <HAL_RCC_OscConfig+0xce>
 8004b46:	e793      	b.n	8004a70 <HAL_RCC_OscConfig+0x174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b48:	6833      	ldr	r3, [r6, #0]
 8004b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004b50:	f7ff f936 	bl	8003dc0 <HAL_GetTick>
 8004b54:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b56:	6833      	ldr	r3, [r6, #0]
 8004b58:	05da      	lsls	r2, r3, #23
 8004b5a:	f53f af43 	bmi.w	80049e4 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5e:	f7ff f92f 	bl	8003dc0 <HAL_GetTick>
 8004b62:	1bc0      	subs	r0, r0, r7
 8004b64:	2802      	cmp	r0, #2
 8004b66:	d9f6      	bls.n	8004b56 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8004b68:	2003      	movs	r0, #3
}
 8004b6a:	b002      	add	sp, #8
 8004b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b70:	4a14      	ldr	r2, [pc, #80]	; (8004bc4 <HAL_RCC_OscConfig+0x2c8>)
 8004b72:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004b74:	f043 0301 	orr.w	r3, r3, #1
 8004b78:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004b7a:	f7ff f921 	bl	8003dc0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7e:	4f11      	ldr	r7, [pc, #68]	; (8004bc4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8004b80:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b82:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b86:	e004      	b.n	8004b92 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b88:	f7ff f91a 	bl	8003dc0 <HAL_GetTick>
 8004b8c:	1b80      	subs	r0, r0, r6
 8004b8e:	4540      	cmp	r0, r8
 8004b90:	d8ea      	bhi.n	8004b68 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b94:	079b      	lsls	r3, r3, #30
 8004b96:	d5f7      	bpl.n	8004b88 <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 8004b98:	2d00      	cmp	r5, #0
 8004b9a:	f43f af48 	beq.w	8004a2e <HAL_RCC_OscConfig+0x132>
 8004b9e:	e04f      	b.n	8004c40 <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_HSI_DISABLE();
 8004ba0:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <HAL_RCC_OscConfig+0x2cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba2:	4e08      	ldr	r6, [pc, #32]	; (8004bc4 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8004ba4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004ba6:	f7ff f90b 	bl	8003dc0 <HAL_GetTick>
 8004baa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bac:	e004      	b.n	8004bb8 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bae:	f7ff f907 	bl	8003dc0 <HAL_GetTick>
 8004bb2:	1b40      	subs	r0, r0, r5
 8004bb4:	2802      	cmp	r0, #2
 8004bb6:	d8d7      	bhi.n	8004b68 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb8:	6833      	ldr	r3, [r6, #0]
 8004bba:	0799      	lsls	r1, r3, #30
 8004bbc:	d4f7      	bmi.n	8004bae <HAL_RCC_OscConfig+0x2b2>
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	e701      	b.n	80049c6 <HAL_RCC_OscConfig+0xca>
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	42470000 	.word	0x42470000
 8004bcc:	40007000 	.word	0x40007000
 8004bd0:	42470060 	.word	0x42470060
 8004bd4:	42470e80 	.word	0x42470e80
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bd8:	2801      	cmp	r0, #1
 8004bda:	f43f af46 	beq.w	8004a6a <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->PLLCFGR;
 8004bde:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004be0:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be2:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004be6:	4291      	cmp	r1, r2
 8004be8:	f47f af61 	bne.w	8004aae <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bec:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bee:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf2:	4291      	cmp	r1, r2
 8004bf4:	f47f af5b 	bne.w	8004aae <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bf8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004bfa:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004bfe:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c00:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004c04:	f47f af53 	bne.w	8004aae <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c08:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004c0a:	0852      	lsrs	r2, r2, #1
 8004c0c:	3a01      	subs	r2, #1
 8004c0e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c12:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004c16:	f47f af4a 	bne.w	8004aae <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c1c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c20:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8004c24:	bf14      	ite	ne
 8004c26:	2001      	movne	r0, #1
 8004c28:	2000      	moveq	r0, #0
 8004c2a:	e71e      	b.n	8004a6a <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c2c:	4b24      	ldr	r3, [pc, #144]	; (8004cc0 <HAL_RCC_OscConfig+0x3c4>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c3c:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c3e:	e769      	b.n	8004b14 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c40:	4a1f      	ldr	r2, [pc, #124]	; (8004cc0 <HAL_RCC_OscConfig+0x3c4>)
 8004c42:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c48:	6413      	str	r3, [r2, #64]	; 0x40
 8004c4a:	e6f0      	b.n	8004a2e <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8004c4c:	2001      	movs	r0, #1
}
 8004c4e:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c50:	4b1b      	ldr	r3, [pc, #108]	; (8004cc0 <HAL_RCC_OscConfig+0x3c4>)
 8004c52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c54:	f042 0204 	orr.w	r2, r2, #4
 8004c58:	671a      	str	r2, [r3, #112]	; 0x70
 8004c5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c5c:	f042 0201 	orr.w	r2, r2, #1
 8004c60:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c62:	e78a      	b.n	8004b7a <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8004c64:	f7ff f8ac 	bl	8003dc0 <HAL_GetTick>
 8004c68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6a:	e005      	b.n	8004c78 <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c6c:	f7ff f8a8 	bl	8003dc0 <HAL_GetTick>
 8004c70:	1b80      	subs	r0, r0, r6
 8004c72:	2802      	cmp	r0, #2
 8004c74:	f63f af78 	bhi.w	8004b68 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	0199      	lsls	r1, r3, #6
 8004c7c:	d4f6      	bmi.n	8004c6c <HAL_RCC_OscConfig+0x370>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c7e:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8004c82:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8004c86:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004c88:	4333      	orrs	r3, r6
 8004c8a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004c8e:	0852      	lsrs	r2, r2, #1
 8004c90:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004c94:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8004c96:	490b      	ldr	r1, [pc, #44]	; (8004cc4 <HAL_RCC_OscConfig+0x3c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c98:	4e09      	ldr	r6, [pc, #36]	; (8004cc0 <HAL_RCC_OscConfig+0x3c4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004c9e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ca0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004ca2:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8004ca4:	f7ff f88c 	bl	8003dc0 <HAL_GetTick>
 8004ca8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004caa:	e005      	b.n	8004cb8 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cac:	f7ff f888 	bl	8003dc0 <HAL_GetTick>
 8004cb0:	1b00      	subs	r0, r0, r4
 8004cb2:	2802      	cmp	r0, #2
 8004cb4:	f63f af58 	bhi.w	8004b68 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb8:	6833      	ldr	r3, [r6, #0]
 8004cba:	019a      	lsls	r2, r3, #6
 8004cbc:	d5f6      	bpl.n	8004cac <HAL_RCC_OscConfig+0x3b0>
 8004cbe:	e6d3      	b.n	8004a68 <HAL_RCC_OscConfig+0x16c>
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	42470060 	.word	0x42470060

08004cc8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cc8:	4917      	ldr	r1, [pc, #92]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8004cca:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ccc:	688b      	ldr	r3, [r1, #8]
 8004cce:	f003 030c 	and.w	r3, r3, #12
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d01b      	beq.n	8004d0e <HAL_RCC_GetSysClockFreq+0x46>
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d117      	bne.n	8004d0a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cda:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cdc:	684b      	ldr	r3, [r1, #4]
 8004cde:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ce2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ce6:	d114      	bne.n	8004d12 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce8:	6849      	ldr	r1, [r1, #4]
 8004cea:	4810      	ldr	r0, [pc, #64]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x64>)
 8004cec:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004cf0:	fba1 0100 	umull	r0, r1, r1, r0
 8004cf4:	f7fb ffb0 	bl	8000c58 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cf8:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x60>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004d00:	3301      	adds	r3, #1
 8004d02:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004d04:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004d08:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8004d0a:	4808      	ldr	r0, [pc, #32]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8004d0c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d0e:	4808      	ldr	r0, [pc, #32]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8004d10:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d12:	684b      	ldr	r3, [r1, #4]
 8004d14:	4806      	ldr	r0, [pc, #24]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x68>)
 8004d16:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004d1a:	fba3 0100 	umull	r0, r1, r3, r0
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f7fb ff9a 	bl	8000c58 <__aeabi_uldivmod>
 8004d24:	e7e8      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x30>
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	00f42400 	.word	0x00f42400
 8004d30:	007a1200 	.word	0x007a1200

08004d34 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004d34:	2800      	cmp	r0, #0
 8004d36:	f000 8087 	beq.w	8004e48 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d3a:	4a48      	ldr	r2, [pc, #288]	; (8004e5c <HAL_RCC_ClockConfig+0x128>)
 8004d3c:	6813      	ldr	r3, [r2, #0]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	428b      	cmp	r3, r1
{
 8004d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d48:	460d      	mov	r5, r1
 8004d4a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d4c:	d209      	bcs.n	8004d62 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4e:	b2cb      	uxtb	r3, r1
 8004d50:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d52:	6813      	ldr	r3, [r2, #0]
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	428b      	cmp	r3, r1
 8004d5a:	d002      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004d5c:	2001      	movs	r0, #1
}
 8004d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	0798      	lsls	r0, r3, #30
 8004d66:	d514      	bpl.n	8004d92 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d68:	0759      	lsls	r1, r3, #29
 8004d6a:	d504      	bpl.n	8004d76 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d6c:	493c      	ldr	r1, [pc, #240]	; (8004e60 <HAL_RCC_ClockConfig+0x12c>)
 8004d6e:	688a      	ldr	r2, [r1, #8]
 8004d70:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8004d74:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d76:	071a      	lsls	r2, r3, #28
 8004d78:	d504      	bpl.n	8004d84 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d7a:	4939      	ldr	r1, [pc, #228]	; (8004e60 <HAL_RCC_ClockConfig+0x12c>)
 8004d7c:	688a      	ldr	r2, [r1, #8]
 8004d7e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8004d82:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d84:	4936      	ldr	r1, [pc, #216]	; (8004e60 <HAL_RCC_ClockConfig+0x12c>)
 8004d86:	68a0      	ldr	r0, [r4, #8]
 8004d88:	688a      	ldr	r2, [r1, #8]
 8004d8a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004d8e:	4302      	orrs	r2, r0
 8004d90:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d92:	07df      	lsls	r7, r3, #31
 8004d94:	d521      	bpl.n	8004dda <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d96:	6862      	ldr	r2, [r4, #4]
 8004d98:	2a01      	cmp	r2, #1
 8004d9a:	d057      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d9c:	1e93      	subs	r3, r2, #2
 8004d9e:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da0:	4b2f      	ldr	r3, [pc, #188]	; (8004e60 <HAL_RCC_ClockConfig+0x12c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004da4:	d94d      	bls.n	8004e42 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da6:	0799      	lsls	r1, r3, #30
 8004da8:	d5d8      	bpl.n	8004d5c <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004daa:	4e2d      	ldr	r6, [pc, #180]	; (8004e60 <HAL_RCC_ClockConfig+0x12c>)
 8004dac:	68b3      	ldr	r3, [r6, #8]
 8004dae:	f023 0303 	bic.w	r3, r3, #3
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004db6:	f7ff f803 	bl	8003dc0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dba:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004dbe:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc0:	e004      	b.n	8004dcc <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc2:	f7fe fffd 	bl	8003dc0 <HAL_GetTick>
 8004dc6:	1bc0      	subs	r0, r0, r7
 8004dc8:	4540      	cmp	r0, r8
 8004dca:	d844      	bhi.n	8004e56 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dcc:	68b3      	ldr	r3, [r6, #8]
 8004dce:	6862      	ldr	r2, [r4, #4]
 8004dd0:	f003 030c 	and.w	r3, r3, #12
 8004dd4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004dd8:	d1f3      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dda:	4a20      	ldr	r2, [pc, #128]	; (8004e5c <HAL_RCC_ClockConfig+0x128>)
 8004ddc:	6813      	ldr	r3, [r2, #0]
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	42ab      	cmp	r3, r5
 8004de4:	d906      	bls.n	8004df4 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de6:	b2eb      	uxtb	r3, r5
 8004de8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dea:	6813      	ldr	r3, [r2, #0]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	42ab      	cmp	r3, r5
 8004df2:	d1b3      	bne.n	8004d5c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	075a      	lsls	r2, r3, #29
 8004df8:	d506      	bpl.n	8004e08 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dfa:	4919      	ldr	r1, [pc, #100]	; (8004e60 <HAL_RCC_ClockConfig+0x12c>)
 8004dfc:	68e0      	ldr	r0, [r4, #12]
 8004dfe:	688a      	ldr	r2, [r1, #8]
 8004e00:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004e04:	4302      	orrs	r2, r0
 8004e06:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e08:	071b      	lsls	r3, r3, #28
 8004e0a:	d507      	bpl.n	8004e1c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e0c:	4a14      	ldr	r2, [pc, #80]	; (8004e60 <HAL_RCC_ClockConfig+0x12c>)
 8004e0e:	6921      	ldr	r1, [r4, #16]
 8004e10:	6893      	ldr	r3, [r2, #8]
 8004e12:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e16:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004e1a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e1c:	f7ff ff54 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8004e20:	4a0f      	ldr	r2, [pc, #60]	; (8004e60 <HAL_RCC_ClockConfig+0x12c>)
 8004e22:	4c10      	ldr	r4, [pc, #64]	; (8004e64 <HAL_RCC_ClockConfig+0x130>)
 8004e24:	6892      	ldr	r2, [r2, #8]
 8004e26:	4910      	ldr	r1, [pc, #64]	; (8004e68 <HAL_RCC_ClockConfig+0x134>)
 8004e28:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8004e30:	480e      	ldr	r0, [pc, #56]	; (8004e6c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e32:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8004e34:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e36:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8004e38:	f7fe ff78 	bl	8003d2c <HAL_InitTick>
  return HAL_OK;
 8004e3c:	2000      	movs	r0, #0
}
 8004e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e42:	0198      	lsls	r0, r3, #6
 8004e44:	d4b1      	bmi.n	8004daa <HAL_RCC_ClockConfig+0x76>
 8004e46:	e789      	b.n	8004d5c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004e48:	2001      	movs	r0, #1
}
 8004e4a:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4c:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <HAL_RCC_ClockConfig+0x12c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	039e      	lsls	r6, r3, #14
 8004e52:	d4aa      	bmi.n	8004daa <HAL_RCC_ClockConfig+0x76>
 8004e54:	e782      	b.n	8004d5c <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8004e56:	2003      	movs	r0, #3
 8004e58:	e781      	b.n	8004d5e <HAL_RCC_ClockConfig+0x2a>
 8004e5a:	bf00      	nop
 8004e5c:	40023c00 	.word	0x40023c00
 8004e60:	40023800 	.word	0x40023800
 8004e64:	0800ac44 	.word	0x0800ac44
 8004e68:	20002008 	.word	0x20002008
 8004e6c:	20002010 	.word	0x20002010

08004e70 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e70:	4b04      	ldr	r3, [pc, #16]	; (8004e84 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004e72:	4a05      	ldr	r2, [pc, #20]	; (8004e88 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004e74:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004e76:	4905      	ldr	r1, [pc, #20]	; (8004e8c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e78:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004e7c:	6808      	ldr	r0, [r1, #0]
 8004e7e:	5cd3      	ldrb	r3, [r2, r3]
}
 8004e80:	40d8      	lsrs	r0, r3
 8004e82:	4770      	bx	lr
 8004e84:	40023800 	.word	0x40023800
 8004e88:	0800ac54 	.word	0x0800ac54
 8004e8c:	20002008 	.word	0x20002008

08004e90 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e90:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004e92:	4a05      	ldr	r2, [pc, #20]	; (8004ea8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004e94:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004e96:	4905      	ldr	r1, [pc, #20]	; (8004eac <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e98:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004e9c:	6808      	ldr	r0, [r1, #0]
 8004e9e:	5cd3      	ldrb	r3, [r2, r3]
}
 8004ea0:	40d8      	lsrs	r0, r3
 8004ea2:	4770      	bx	lr
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	0800ac54 	.word	0x0800ac54
 8004eac:	20002008 	.word	0x20002008

08004eb0 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	4698      	mov	r8, r3
 8004eb8:	4616      	mov	r6, r2
 8004eba:	460c      	mov	r4, r1
 8004ebc:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ebe:	f7fe ff7f 	bl	8003dc0 <HAL_GetTick>
 8004ec2:	44b0      	add	r8, r6
 8004ec4:	eba8 0500 	sub.w	r5, r8, r0
  tmp_tickstart = HAL_GetTick();
 8004ec8:	f7fe ff7a 	bl	8003dc0 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ecc:	4b27      	ldr	r3, [pc, #156]	; (8004f6c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004ed4:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 8004ed8:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eda:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004edc:	1c73      	adds	r3, r6, #1
 8004ede:	6839      	ldr	r1, [r7, #0]
 8004ee0:	d107      	bne.n	8004ef2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
 8004ee2:	688b      	ldr	r3, [r1, #8]
 8004ee4:	ea34 0303 	bics.w	r3, r4, r3
 8004ee8:	d0fb      	beq.n	8004ee2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
      }
      count--;
    }
  }

  return HAL_OK;
 8004eea:	2000      	movs	r0, #0
}
 8004eec:	b002      	add	sp, #8
 8004eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ef2:	688b      	ldr	r3, [r1, #8]
 8004ef4:	ea34 0303 	bics.w	r3, r4, r3
 8004ef8:	d1f7      	bne.n	8004eea <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004efa:	f7fe ff61 	bl	8003dc0 <HAL_GetTick>
 8004efe:	eba0 0308 	sub.w	r3, r0, r8
 8004f02:	42ab      	cmp	r3, r5
 8004f04:	d208      	bcs.n	8004f18 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
      if(count == 0U)
 8004f06:	9a01      	ldr	r2, [sp, #4]
      count--;
 8004f08:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004f0a:	2a00      	cmp	r2, #0
      count--;
 8004f0c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 8004f10:	bf08      	it	eq
 8004f12:	2500      	moveq	r5, #0
      count--;
 8004f14:	9301      	str	r3, [sp, #4]
 8004f16:	e7e1      	b.n	8004edc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f18:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f1c:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f1e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f22:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f26:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f28:	d014      	beq.n	8004f54 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f2c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004f30:	d007      	beq.n	8004f42 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8004f32:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8004f34:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8004f36:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004f3a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8004f3e:	2003      	movs	r0, #3
 8004f40:	e7d4      	b.n	8004eec <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
          SPI_RESET_CRC(hspi);
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e7ee      	b.n	8004f32 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004f5a:	d002      	beq.n	8004f62 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f5c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004f60:	d1e3      	bne.n	8004f2a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	e7de      	b.n	8004f2a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
 8004f6c:	20002008 	.word	0x20002008

08004f70 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d05b      	beq.n	800502c <HAL_SPI_Init+0xbc>
{
 8004f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f76:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8004f78:	4604      	mov	r4, r0
 8004f7a:	2f00      	cmp	r7, #0
 8004f7c:	d046      	beq.n	800500c <HAL_SPI_Init+0x9c>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f7e:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f80:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f84:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f88:	2000      	movs	r0, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f8a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f8e:	62a0      	str	r0, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f90:	2a00      	cmp	r2, #0
 8004f92:	d041      	beq.n	8005018 <HAL_SPI_Init+0xa8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f94:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8004f98:	68e1      	ldr	r1, [r4, #12]
 8004f9a:	69a6      	ldr	r6, [r4, #24]
 8004f9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fa0:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 8004fa4:	6923      	ldr	r3, [r4, #16]
 8004fa6:	432a      	orrs	r2, r5
 8004fa8:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8004fac:	430a      	orrs	r2, r1
 8004fae:	f003 0102 	and.w	r1, r3, #2
 8004fb2:	6963      	ldr	r3, [r4, #20]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	69e3      	ldr	r3, [r4, #28]
  __HAL_SPI_DISABLE(hspi);
 8004fbe:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fc0:	f003 0e38 	and.w	lr, r3, #56	; 0x38
 8004fc4:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8004fc8:	4313      	orrs	r3, r2
  hspi->State = HAL_SPI_STATE_BUSY;
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fd0:	6a22      	ldr	r2, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fd2:	0c35      	lsrs	r5, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fd4:	ea43 030e 	orr.w	r3, r3, lr
 8004fd8:	f002 0680 	and.w	r6, r2, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fdc:	f005 0204 	and.w	r2, r5, #4
  __HAL_SPI_DISABLE(hspi);
 8004fe0:	680d      	ldr	r5, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fe2:	f007 0710 	and.w	r7, r7, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fe6:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fe8:	433a      	orrs	r2, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fea:	4303      	orrs	r3, r0
  __HAL_SPI_DISABLE(hspi);
 8004fec:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8004ff0:	600d      	str	r5, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ff2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ff4:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ff6:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ff8:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ffa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8004ffe:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005000:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005002:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005004:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  return HAL_OK;
 8005008:	4610      	mov	r0, r2
}
 800500a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800500c:	6843      	ldr	r3, [r0, #4]
 800500e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005012:	d0b7      	beq.n	8004f84 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005014:	61c7      	str	r7, [r0, #28]
 8005016:	e7b5      	b.n	8004f84 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 8005018:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800501a:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800501e:	f7fe fc87 	bl	8003930 <HAL_SPI_MspInit>
 8005022:	e9d4 7309 	ldrd	r7, r3, [r4, #36]	; 0x24
 8005026:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 800502a:	e7b3      	b.n	8004f94 <HAL_SPI_Init+0x24>
    return HAL_ERROR;
 800502c:	2001      	movs	r0, #1
}
 800502e:	4770      	bx	lr

08005030 <HAL_SPI_Transmit>:
{
 8005030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005034:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8005036:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 800503a:	2801      	cmp	r0, #1
{
 800503c:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800503e:	f000 8086 	beq.w	800514e <HAL_SPI_Transmit+0x11e>
 8005042:	461d      	mov	r5, r3
 8005044:	2301      	movs	r3, #1
 8005046:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800504a:	4688      	mov	r8, r1
 800504c:	4617      	mov	r7, r2
 800504e:	f7fe feb7 	bl	8003dc0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005052:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005056:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005058:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800505a:	b2d8      	uxtb	r0, r3
 800505c:	d009      	beq.n	8005072 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 800505e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005060:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8005062:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8005064:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005068:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800506c:	b002      	add	sp, #8
 800506e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8005072:	f1b8 0f00 	cmp.w	r8, #0
 8005076:	d0f3      	beq.n	8005060 <HAL_SPI_Transmit+0x30>
 8005078:	2f00      	cmp	r7, #0
 800507a:	d0f1      	beq.n	8005060 <HAL_SPI_Transmit+0x30>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800507c:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800507e:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005080:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005084:	2303      	movs	r3, #3
 8005086:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800508a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800508e:	f04f 0300 	mov.w	r3, #0
 8005092:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8005094:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8005098:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800509a:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800509c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800509e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80050a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a2:	f000 8085 	beq.w	80051b0 <HAL_SPI_Transmit+0x180>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050a6:	6802      	ldr	r2, [r0, #0]
 80050a8:	0652      	lsls	r2, r2, #25
    __HAL_SPI_DISABLE(hspi);
 80050aa:	4603      	mov	r3, r0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050ac:	d403      	bmi.n	80050b6 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 80050ae:	6802      	ldr	r2, [r0, #0]
 80050b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b4:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050b6:	68e2      	ldr	r2, [r4, #12]
 80050b8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80050bc:	d04b      	beq.n	8005156 <HAL_SPI_Transmit+0x126>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050be:	6863      	ldr	r3, [r4, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8097 	beq.w	80051f4 <HAL_SPI_Transmit+0x1c4>
 80050c6:	2f01      	cmp	r7, #1
 80050c8:	f000 8094 	beq.w	80051f4 <HAL_SPI_Transmit+0x1c4>
    while (hspi->TxXferCount > 0U)
 80050cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	b1ab      	cbz	r3, 80050fe <HAL_SPI_Transmit+0xce>
 80050d2:	1c68      	adds	r0, r5, #1
 80050d4:	f040 8083 	bne.w	80051de <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	0791      	lsls	r1, r2, #30
 80050de:	f140 8094 	bpl.w	800520a <HAL_SPI_Transmit+0x1da>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80050e4:	7812      	ldrb	r2, [r2, #0]
 80050e6:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80050e8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80050ec:	3a01      	subs	r2, #1
 80050ee:	b292      	uxth	r2, r2
 80050f0:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80050f2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050f4:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 80050f6:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050f8:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80050fa:	2a00      	cmp	r2, #0
 80050fc:	d1ec      	bne.n	80050d8 <HAL_SPI_Transmit+0xa8>
 80050fe:	6861      	ldr	r1, [r4, #4]
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005100:	4b5b      	ldr	r3, [pc, #364]	; (8005270 <HAL_SPI_Transmit+0x240>)
 8005102:	4a5c      	ldr	r2, [pc, #368]	; (8005274 <HAL_SPI_Transmit+0x244>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	fba2 2303 	umull	r2, r3, r2, r3
 800510a:	0d5b      	lsrs	r3, r3, #21
 800510c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005110:	fb02 f303 	mul.w	r3, r2, r3
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005114:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005118:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800511a:	d107      	bne.n	800512c <HAL_SPI_Transmit+0xfc>
 800511c:	e098      	b.n	8005250 <HAL_SPI_Transmit+0x220>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800511e:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005120:	6822      	ldr	r2, [r4, #0]
      count--;
 8005122:	3b01      	subs	r3, #1
 8005124:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005126:	6893      	ldr	r3, [r2, #8]
 8005128:	061b      	lsls	r3, r3, #24
 800512a:	d502      	bpl.n	8005132 <HAL_SPI_Transmit+0x102>
      if (count == 0U)
 800512c:	9b01      	ldr	r3, [sp, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f5      	bne.n	800511e <HAL_SPI_Transmit+0xee>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005132:	68a3      	ldr	r3, [r4, #8]
 8005134:	b933      	cbnz	r3, 8005144 <HAL_SPI_Transmit+0x114>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005136:	6822      	ldr	r2, [r4, #0]
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	68d3      	ldr	r3, [r2, #12]
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	6893      	ldr	r3, [r2, #8]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005144:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8005146:	3800      	subs	r0, #0
 8005148:	bf18      	it	ne
 800514a:	2001      	movne	r0, #1
error:
 800514c:	e788      	b.n	8005060 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 800514e:	2002      	movs	r0, #2
}
 8005150:	b002      	add	sp, #8
 8005152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005156:	6861      	ldr	r1, [r4, #4]
 8005158:	2900      	cmp	r1, #0
 800515a:	d176      	bne.n	800524a <HAL_SPI_Transmit+0x21a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800515c:	4647      	mov	r7, r8
 800515e:	f837 2b02 	ldrh.w	r2, [r7], #2
 8005162:	60c2      	str	r2, [r0, #12]
      hspi->TxXferCount--;
 8005164:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005166:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005168:	3a01      	subs	r2, #1
 800516a:	b292      	uxth	r2, r2
 800516c:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800516e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005170:	b292      	uxth	r2, r2
 8005172:	2a00      	cmp	r2, #0
 8005174:	d0c4      	beq.n	8005100 <HAL_SPI_Transmit+0xd0>
 8005176:	1c6a      	adds	r2, r5, #1
 8005178:	d15e      	bne.n	8005238 <HAL_SPI_Transmit+0x208>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800517a:	6883      	ldr	r3, [r0, #8]
 800517c:	079f      	lsls	r7, r3, #30
 800517e:	d50f      	bpl.n	80051a0 <HAL_SPI_Transmit+0x170>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005180:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005182:	f832 3b02 	ldrh.w	r3, [r2], #2
 8005186:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8005188:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800518a:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800518c:	3b01      	subs	r3, #1
 800518e:	b29b      	uxth	r3, r3
 8005190:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8005192:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005194:	b29b      	uxth	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0b1      	beq.n	80050fe <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800519a:	6883      	ldr	r3, [r0, #8]
 800519c:	079f      	lsls	r7, r3, #30
 800519e:	d4ef      	bmi.n	8005180 <HAL_SPI_Transmit+0x150>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051a0:	f7fe fe0e 	bl	8003dc0 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 80051a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0a8      	beq.n	80050fe <HAL_SPI_Transmit+0xce>
 80051ac:	6820      	ldr	r0, [r4, #0]
 80051ae:	e7e4      	b.n	800517a <HAL_SPI_Transmit+0x14a>
    __HAL_SPI_DISABLE(hspi);
 80051b0:	6803      	ldr	r3, [r0, #0]
 80051b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b6:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 80051b8:	6803      	ldr	r3, [r0, #0]
 80051ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051be:	6003      	str	r3, [r0, #0]
 80051c0:	e771      	b.n	80050a6 <HAL_SPI_Transmit+0x76>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80051c4:	7812      	ldrb	r2, [r2, #0]
 80051c6:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80051c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051d0:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80051d2:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051d4:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80051d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d08f      	beq.n	80050fe <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	0792      	lsls	r2, r2, #30
 80051e4:	d4ed      	bmi.n	80051c2 <HAL_SPI_Transmit+0x192>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051e6:	f7fe fdeb 	bl	8003dc0 <HAL_GetTick>
 80051ea:	1b80      	subs	r0, r0, r6
 80051ec:	42a8      	cmp	r0, r5
 80051ee:	d3f2      	bcc.n	80051d6 <HAL_SPI_Transmit+0x1a6>
          errorcode = HAL_TIMEOUT;
 80051f0:	2003      	movs	r0, #3
 80051f2:	e735      	b.n	8005060 <HAL_SPI_Transmit+0x30>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051f4:	f898 3000 	ldrb.w	r3, [r8]
 80051f8:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80051fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051fc:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005202:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8005204:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005206:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005208:	e760      	b.n	80050cc <HAL_SPI_Transmit+0x9c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800520a:	f7fe fdd9 	bl	8003dc0 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800520e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	f47f af60 	bne.w	80050d8 <HAL_SPI_Transmit+0xa8>
 8005218:	e771      	b.n	80050fe <HAL_SPI_Transmit+0xce>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800521a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800521c:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005220:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8005222:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005224:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005226:	3b01      	subs	r3, #1
 8005228:	b29b      	uxth	r3, r3
 800522a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800522c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800522e:	b29b      	uxth	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	f43f af64 	beq.w	80050fe <HAL_SPI_Transmit+0xce>
 8005236:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	0791      	lsls	r1, r2, #30
 800523c:	d4ed      	bmi.n	800521a <HAL_SPI_Transmit+0x1ea>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800523e:	f7fe fdbf 	bl	8003dc0 <HAL_GetTick>
 8005242:	1b80      	subs	r0, r0, r6
 8005244:	42a8      	cmp	r0, r5
 8005246:	d3f1      	bcc.n	800522c <HAL_SPI_Transmit+0x1fc>
 8005248:	e7d2      	b.n	80051f0 <HAL_SPI_Transmit+0x1c0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800524a:	2f01      	cmp	r7, #1
 800524c:	d18f      	bne.n	800516e <HAL_SPI_Transmit+0x13e>
 800524e:	e785      	b.n	800515c <HAL_SPI_Transmit+0x12c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005250:	4633      	mov	r3, r6
 8005252:	462a      	mov	r2, r5
 8005254:	2180      	movs	r1, #128	; 0x80
 8005256:	4620      	mov	r0, r4
 8005258:	f7ff fe2a 	bl	8004eb0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800525c:	2800      	cmp	r0, #0
 800525e:	f43f af68 	beq.w	8005132 <HAL_SPI_Transmit+0x102>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005262:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005264:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005266:	4313      	orrs	r3, r2
 8005268:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800526a:	6562      	str	r2, [r4, #84]	; 0x54
 800526c:	e761      	b.n	8005132 <HAL_SPI_Transmit+0x102>
 800526e:	bf00      	nop
 8005270:	20002008 	.word	0x20002008
 8005274:	165e9f81 	.word	0x165e9f81

08005278 <HAL_SPI_TransmitReceive>:
{
 8005278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800527c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800527e:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8005282:	2801      	cmp	r0, #1
{
 8005284:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8005286:	f000 80a4 	beq.w	80053d2 <HAL_SPI_TransmitReceive+0x15a>
 800528a:	461f      	mov	r7, r3
 800528c:	2301      	movs	r3, #1
 800528e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005292:	4691      	mov	r9, r2
 8005294:	4688      	mov	r8, r1
 8005296:	f7fe fd93 	bl	8003dc0 <HAL_GetTick>
  tmp_state           = hspi->State;
 800529a:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 800529e:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052a0:	2e01      	cmp	r6, #1
  tickstart = HAL_GetTick();
 80052a2:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 80052a4:	b2f2      	uxtb	r2, r6
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052a6:	d011      	beq.n	80052cc <HAL_SPI_TransmitReceive+0x54>
 80052a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ac:	d009      	beq.n	80052c2 <HAL_SPI_TransmitReceive+0x4a>
    errorcode = HAL_BUSY;
 80052ae:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80052b0:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80052b2:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80052b4:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052b8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80052bc:	b003      	add	sp, #12
 80052be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052c2:	68a1      	ldr	r1, [r4, #8]
 80052c4:	2900      	cmp	r1, #0
 80052c6:	d1f2      	bne.n	80052ae <HAL_SPI_TransmitReceive+0x36>
 80052c8:	2a04      	cmp	r2, #4
 80052ca:	d1f0      	bne.n	80052ae <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052cc:	f1b8 0f00 	cmp.w	r8, #0
 80052d0:	f000 8083 	beq.w	80053da <HAL_SPI_TransmitReceive+0x162>
 80052d4:	f1b9 0f00 	cmp.w	r9, #0
 80052d8:	d07f      	beq.n	80053da <HAL_SPI_TransmitReceive+0x162>
 80052da:	2f00      	cmp	r7, #0
 80052dc:	d07d      	beq.n	80053da <HAL_SPI_TransmitReceive+0x162>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052de:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052e2:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052e4:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052e8:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052ea:	bf1c      	itt	ne
 80052ec:	2205      	movne	r2, #5
 80052ee:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052f2:	2200      	movs	r2, #0
 80052f4:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 80052f6:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80052f8:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052fa:	6801      	ldr	r1, [r0, #0]
  hspi->RxXferSize  = Size;
 80052fc:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 80052fe:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005302:	064a      	lsls	r2, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005304:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005308:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800530a:	d403      	bmi.n	8005314 <HAL_SPI_TransmitReceive+0x9c>
    __HAL_SPI_ENABLE(hspi);
 800530c:	6802      	ldr	r2, [r0, #0]
 800530e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005312:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005314:	68e2      	ldr	r2, [r4, #12]
 8005316:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800531a:	f000 80ac 	beq.w	8005476 <HAL_SPI_TransmitReceive+0x1fe>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 809e 	beq.w	8005460 <HAL_SPI_TransmitReceive+0x1e8>
 8005324:	2f01      	cmp	r7, #1
 8005326:	f000 809b 	beq.w	8005460 <HAL_SPI_TransmitReceive+0x1e8>
 800532a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800532c:	3301      	adds	r3, #1
        txallowed = 1U;
 800532e:	f04f 0601 	mov.w	r6, #1
 8005332:	d028      	beq.n	8005386 <HAL_SPI_TransmitReceive+0x10e>
 8005334:	e053      	b.n	80053de <HAL_SPI_TransmitReceive+0x166>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005336:	6822      	ldr	r2, [r4, #0]
 8005338:	6893      	ldr	r3, [r2, #8]
 800533a:	0798      	lsls	r0, r3, #30
 800533c:	d50f      	bpl.n	800535e <HAL_SPI_TransmitReceive+0xe6>
 800533e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005340:	b29b      	uxth	r3, r3
 8005342:	b163      	cbz	r3, 800535e <HAL_SPI_TransmitReceive+0xe6>
 8005344:	b15e      	cbz	r6, 800535e <HAL_SPI_TransmitReceive+0xe6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005346:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 800534c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800534e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005350:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8005352:	3b01      	subs	r3, #1
 8005354:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8005356:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 8005358:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800535a:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 800535c:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800535e:	6893      	ldr	r3, [r2, #8]
 8005360:	f013 0301 	ands.w	r3, r3, #1
 8005364:	d00d      	beq.n	8005382 <HAL_SPI_TransmitReceive+0x10a>
 8005366:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8005368:	b289      	uxth	r1, r1
 800536a:	b151      	cbz	r1, 8005382 <HAL_SPI_TransmitReceive+0x10a>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800536c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800536e:	68d2      	ldr	r2, [r2, #12]
 8005370:	700a      	strb	r2, [r1, #0]
        hspi->RxXferCount--;
 8005372:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8005374:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005376:	3a01      	subs	r2, #1
 8005378:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr++;
 800537a:	3101      	adds	r1, #1
        txallowed = 1U;
 800537c:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 800537e:	87e2      	strh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8005380:	63a1      	str	r1, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005382:	f7fe fd1d 	bl	8003dc0 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005386:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1d3      	bne.n	8005336 <HAL_SPI_TransmitReceive+0xbe>
 800538e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1cf      	bne.n	8005336 <HAL_SPI_TransmitReceive+0xbe>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005396:	4b79      	ldr	r3, [pc, #484]	; (800557c <HAL_SPI_TransmitReceive+0x304>)
 8005398:	4a79      	ldr	r2, [pc, #484]	; (8005580 <HAL_SPI_TransmitReceive+0x308>)
 800539a:	681b      	ldr	r3, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800539c:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800539e:	fba2 2303 	umull	r2, r3, r2, r3
 80053a2:	0d5b      	lsrs	r3, r3, #21
 80053a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053a8:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ac:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053b0:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053b2:	d146      	bne.n	8005442 <HAL_SPI_TransmitReceive+0x1ca>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053b6:	462b      	mov	r3, r5
 80053b8:	2180      	movs	r1, #128	; 0x80
 80053ba:	4620      	mov	r0, r4
 80053bc:	f7ff fd78 	bl	8004eb0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d041      	beq.n	8005448 <HAL_SPI_TransmitReceive+0x1d0>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053c6:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c8:	4313      	orrs	r3, r2
 80053ca:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80053cc:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053ce:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 80053d0:	e76e      	b.n	80052b0 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 80053d2:	2002      	movs	r0, #2
}
 80053d4:	b003      	add	sp, #12
 80053d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 80053da:	2001      	movs	r0, #1
 80053dc:	e768      	b.n	80052b0 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	b91b      	cbnz	r3, 80053ec <HAL_SPI_TransmitReceive+0x174>
 80053e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0d4      	beq.n	8005396 <HAL_SPI_TransmitReceive+0x11e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053ec:	6822      	ldr	r2, [r4, #0]
 80053ee:	6893      	ldr	r3, [r2, #8]
 80053f0:	0799      	lsls	r1, r3, #30
 80053f2:	d50f      	bpl.n	8005414 <HAL_SPI_TransmitReceive+0x19c>
 80053f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	b163      	cbz	r3, 8005414 <HAL_SPI_TransmitReceive+0x19c>
 80053fa:	b15e      	cbz	r6, 8005414 <HAL_SPI_TransmitReceive+0x19c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8005402:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8005404:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005406:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8005408:	3b01      	subs	r3, #1
 800540a:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800540c:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 800540e:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8005410:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 8005412:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005414:	6893      	ldr	r3, [r2, #8]
 8005416:	f013 0301 	ands.w	r3, r3, #1
 800541a:	d003      	beq.n	8005424 <HAL_SPI_TransmitReceive+0x1ac>
 800541c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800541e:	b289      	uxth	r1, r1
 8005420:	2900      	cmp	r1, #0
 8005422:	d167      	bne.n	80054f4 <HAL_SPI_TransmitReceive+0x27c>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005424:	f7fe fccc 	bl	8003dc0 <HAL_GetTick>
 8005428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800542a:	1b40      	subs	r0, r0, r5
 800542c:	4298      	cmp	r0, r3
 800542e:	d3d6      	bcc.n	80053de <HAL_SPI_TransmitReceive+0x166>
        errorcode = HAL_TIMEOUT;
 8005430:	2003      	movs	r0, #3
 8005432:	e73d      	b.n	80052b0 <HAL_SPI_TransmitReceive+0x38>
      count--;
 8005434:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005436:	6822      	ldr	r2, [r4, #0]
      count--;
 8005438:	3b01      	subs	r3, #1
 800543a:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800543c:	6893      	ldr	r3, [r2, #8]
 800543e:	061b      	lsls	r3, r3, #24
 8005440:	d502      	bpl.n	8005448 <HAL_SPI_TransmitReceive+0x1d0>
      if (count == 0U)
 8005442:	9b01      	ldr	r3, [sp, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f5      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x1bc>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005448:	68a0      	ldr	r0, [r4, #8]
 800544a:	2800      	cmp	r0, #0
 800544c:	f040 8093 	bne.w	8005576 <HAL_SPI_TransmitReceive+0x2fe>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	9000      	str	r0, [sp, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	9200      	str	r2, [sp, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	9b00      	ldr	r3, [sp, #0]
 800545e:	e727      	b.n	80052b0 <HAL_SPI_TransmitReceive+0x38>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005460:	f898 3000 	ldrb.w	r3, [r8]
 8005464:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8005466:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005468:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800546a:	3b01      	subs	r3, #1
 800546c:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800546e:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8005470:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005472:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005474:	e759      	b.n	800532a <HAL_SPI_TransmitReceive+0xb2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005476:	2b00      	cmp	r3, #0
 8005478:	d148      	bne.n	800550c <HAL_SPI_TransmitReceive+0x294>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800547a:	4641      	mov	r1, r8
 800547c:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005480:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8005482:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005484:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005486:	3b01      	subs	r3, #1
 8005488:	b29b      	uxth	r3, r3
 800548a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800548c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800548e:	3301      	adds	r3, #1
{
 8005490:	f04f 0601 	mov.w	r6, #1
 8005494:	d025      	beq.n	80054e2 <HAL_SPI_TransmitReceive+0x26a>
 8005496:	e03c      	b.n	8005512 <HAL_SPI_TransmitReceive+0x29a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005498:	6822      	ldr	r2, [r4, #0]
 800549a:	6893      	ldr	r3, [r2, #8]
 800549c:	079b      	lsls	r3, r3, #30
 800549e:	d50d      	bpl.n	80054bc <HAL_SPI_TransmitReceive+0x244>
 80054a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	b153      	cbz	r3, 80054bc <HAL_SPI_TransmitReceive+0x244>
 80054a6:	b14e      	cbz	r6, 80054bc <HAL_SPI_TransmitReceive+0x244>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80054aa:	f831 3b02 	ldrh.w	r3, [r1], #2
 80054ae:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80054b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054b2:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80054ba:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054bc:	6893      	ldr	r3, [r2, #8]
 80054be:	f013 0301 	ands.w	r3, r3, #1
 80054c2:	d00c      	beq.n	80054de <HAL_SPI_TransmitReceive+0x266>
 80054c4:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80054c6:	b289      	uxth	r1, r1
 80054c8:	b149      	cbz	r1, 80054de <HAL_SPI_TransmitReceive+0x266>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054cc:	68d2      	ldr	r2, [r2, #12]
 80054ce:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 80054d2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054d4:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80054d6:	3a01      	subs	r2, #1
 80054d8:	b292      	uxth	r2, r2
        txallowed = 1U;
 80054da:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 80054dc:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054de:	f7fe fc6f 	bl	8003dc0 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1d6      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x220>
 80054ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1d2      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x220>
 80054f2:	e750      	b.n	8005396 <HAL_SPI_TransmitReceive+0x11e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054f6:	68d2      	ldr	r2, [r2, #12]
 80054f8:	700a      	strb	r2, [r1, #0]
        hspi->RxXferCount--;
 80054fa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80054fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80054fe:	3a01      	subs	r2, #1
 8005500:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr++;
 8005502:	3101      	adds	r1, #1
        txallowed = 1U;
 8005504:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8005506:	87e2      	strh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8005508:	63a1      	str	r1, [r4, #56]	; 0x38
        txallowed = 1U;
 800550a:	e78b      	b.n	8005424 <HAL_SPI_TransmitReceive+0x1ac>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800550c:	2f01      	cmp	r7, #1
 800550e:	d1bd      	bne.n	800548c <HAL_SPI_TransmitReceive+0x214>
 8005510:	e7b3      	b.n	800547a <HAL_SPI_TransmitReceive+0x202>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005512:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005514:	b29b      	uxth	r3, r3
 8005516:	b923      	cbnz	r3, 8005522 <HAL_SPI_TransmitReceive+0x2aa>
 8005518:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	f43f af3a 	beq.w	8005396 <HAL_SPI_TransmitReceive+0x11e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005522:	6822      	ldr	r2, [r4, #0]
 8005524:	6893      	ldr	r3, [r2, #8]
 8005526:	079f      	lsls	r7, r3, #30
 8005528:	d50d      	bpl.n	8005546 <HAL_SPI_TransmitReceive+0x2ce>
 800552a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800552c:	b29b      	uxth	r3, r3
 800552e:	b153      	cbz	r3, 8005546 <HAL_SPI_TransmitReceive+0x2ce>
 8005530:	b14e      	cbz	r6, 8005546 <HAL_SPI_TransmitReceive+0x2ce>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005532:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005534:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005538:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 800553a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800553c:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800553e:	3b01      	subs	r3, #1
 8005540:	b29b      	uxth	r3, r3
 8005542:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8005544:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005546:	6893      	ldr	r3, [r2, #8]
 8005548:	f013 0301 	ands.w	r3, r3, #1
 800554c:	d00c      	beq.n	8005568 <HAL_SPI_TransmitReceive+0x2f0>
 800554e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8005550:	b289      	uxth	r1, r1
 8005552:	b149      	cbz	r1, 8005568 <HAL_SPI_TransmitReceive+0x2f0>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005554:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005556:	68d2      	ldr	r2, [r2, #12]
 8005558:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 800555c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800555e:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005560:	3a01      	subs	r2, #1
 8005562:	b292      	uxth	r2, r2
        txallowed = 1U;
 8005564:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8005566:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005568:	f7fe fc2a 	bl	8003dc0 <HAL_GetTick>
 800556c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800556e:	1b40      	subs	r0, r0, r5
 8005570:	4298      	cmp	r0, r3
 8005572:	d3ce      	bcc.n	8005512 <HAL_SPI_TransmitReceive+0x29a>
 8005574:	e75c      	b.n	8005430 <HAL_SPI_TransmitReceive+0x1b8>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005576:	2000      	movs	r0, #0
 8005578:	e69a      	b.n	80052b0 <HAL_SPI_TransmitReceive+0x38>
 800557a:	bf00      	nop
 800557c:	20002008 	.word	0x20002008
 8005580:	165e9f81 	.word	0x165e9f81

08005584 <HAL_SPI_Receive>:
{
 8005584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005588:	6846      	ldr	r6, [r0, #4]
 800558a:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
{
 800558e:	b083      	sub	sp, #12
 8005590:	4604      	mov	r4, r0
 8005592:	4691      	mov	r9, r2
 8005594:	461d      	mov	r5, r3
 8005596:	4688      	mov	r8, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005598:	d06d      	beq.n	8005676 <HAL_SPI_Receive+0xf2>
  __HAL_LOCK(hspi);
 800559a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d075      	beq.n	800568e <HAL_SPI_Receive+0x10a>
 80055a2:	2301      	movs	r3, #1
 80055a4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80055a8:	f7fe fc0a 	bl	8003dc0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80055ac:	f894 7051 	ldrb.w	r7, [r4, #81]	; 0x51
 80055b0:	2f01      	cmp	r7, #1
  tickstart = HAL_GetTick();
 80055b2:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80055b4:	b2f8      	uxtb	r0, r7
 80055b6:	d009      	beq.n	80055cc <HAL_SPI_Receive+0x48>
    errorcode = HAL_BUSY;
 80055b8:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80055ba:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80055bc:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80055be:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80055c2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80055c6:	b003      	add	sp, #12
 80055c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 80055cc:	f1b8 0f00 	cmp.w	r8, #0
 80055d0:	d0f3      	beq.n	80055ba <HAL_SPI_Receive+0x36>
 80055d2:	f1b9 0f00 	cmp.w	r9, #0
 80055d6:	d0f0      	beq.n	80055ba <HAL_SPI_Receive+0x36>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055d8:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80055da:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055dc:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055e0:	2304      	movs	r3, #4
 80055e2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055e6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80055f0:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80055f4:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80055f8:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80055fc:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80055fe:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005600:	86e3      	strh	r3, [r4, #54]	; 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005602:	d107      	bne.n	8005614 <HAL_SPI_Receive+0x90>
    __HAL_SPI_DISABLE(hspi);
 8005604:	680b      	ldr	r3, [r1, #0]
 8005606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800560a:	600b      	str	r3, [r1, #0]
    SPI_1LINE_RX(hspi);
 800560c:	680b      	ldr	r3, [r1, #0]
 800560e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005612:	600b      	str	r3, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005614:	680a      	ldr	r2, [r1, #0]
 8005616:	0650      	lsls	r0, r2, #25
    __HAL_SPI_DISABLE(hspi);
 8005618:	460b      	mov	r3, r1
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800561a:	d403      	bmi.n	8005624 <HAL_SPI_Receive+0xa0>
    __HAL_SPI_ENABLE(hspi);
 800561c:	680a      	ldr	r2, [r1, #0]
 800561e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005622:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005624:	68e2      	ldr	r2, [r4, #12]
 8005626:	2a00      	cmp	r2, #0
 8005628:	d055      	beq.n	80056d6 <HAL_SPI_Receive+0x152>
    while (hspi->RxXferCount > 0U)
 800562a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800562c:	b292      	uxth	r2, r2
 800562e:	b18a      	cbz	r2, 8005654 <HAL_SPI_Receive+0xd0>
 8005630:	1c6a      	adds	r2, r5, #1
 8005632:	d13e      	bne.n	80056b2 <HAL_SPI_Receive+0x12e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005634:	688b      	ldr	r3, [r1, #8]
 8005636:	07db      	lsls	r3, r3, #31
 8005638:	d545      	bpl.n	80056c6 <HAL_SPI_Receive+0x142>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800563a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800563c:	68ca      	ldr	r2, [r1, #12]
 800563e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->RxXferCount--;
 8005642:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005644:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005646:	3a01      	subs	r2, #1
 8005648:	b292      	uxth	r2, r2
 800564a:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 800564c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1ef      	bne.n	8005634 <HAL_SPI_Receive+0xb0>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005654:	6863      	ldr	r3, [r4, #4]
 8005656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800565a:	d074      	beq.n	8005746 <HAL_SPI_Receive+0x1c2>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800565c:	4633      	mov	r3, r6
 800565e:	462a      	mov	r2, r5
 8005660:	2101      	movs	r1, #1
 8005662:	4620      	mov	r0, r4
 8005664:	f7ff fc24 	bl	8004eb0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005668:	2800      	cmp	r0, #0
 800566a:	d17b      	bne.n	8005764 <HAL_SPI_Receive+0x1e0>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800566c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800566e:	3800      	subs	r0, #0
 8005670:	bf18      	it	ne
 8005672:	2001      	movne	r0, #1
error :
 8005674:	e7a1      	b.n	80055ba <HAL_SPI_Receive+0x36>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005676:	6883      	ldr	r3, [r0, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d18e      	bne.n	800559a <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800567c:	2604      	movs	r6, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800567e:	9500      	str	r5, [sp, #0]
 8005680:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005682:	f880 6051 	strb.w	r6, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005686:	460a      	mov	r2, r1
 8005688:	f7ff fdf6 	bl	8005278 <HAL_SPI_TransmitReceive>
 800568c:	e79b      	b.n	80055c6 <HAL_SPI_Receive+0x42>
  __HAL_LOCK(hspi);
 800568e:	2002      	movs	r0, #2
}
 8005690:	b003      	add	sp, #12
 8005692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005696:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800569e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056a0:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 80056a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0d1      	beq.n	8005654 <HAL_SPI_Receive+0xd0>
 80056b0:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	07d2      	lsls	r2, r2, #31
 80056b6:	d4ee      	bmi.n	8005696 <HAL_SPI_Receive+0x112>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056b8:	f7fe fb82 	bl	8003dc0 <HAL_GetTick>
 80056bc:	1b80      	subs	r0, r0, r6
 80056be:	42a8      	cmp	r0, r5
 80056c0:	d3f2      	bcc.n	80056a8 <HAL_SPI_Receive+0x124>
          errorcode = HAL_TIMEOUT;
 80056c2:	2003      	movs	r0, #3
 80056c4:	e779      	b.n	80055ba <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056c6:	f7fe fb7b 	bl	8003dc0 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 80056ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0c0      	beq.n	8005654 <HAL_SPI_Receive+0xd0>
 80056d2:	6821      	ldr	r1, [r4, #0]
 80056d4:	e7ae      	b.n	8005634 <HAL_SPI_Receive+0xb0>
    while (hspi->RxXferCount > 0U)
 80056d6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80056d8:	b292      	uxth	r2, r2
 80056da:	2a00      	cmp	r2, #0
 80056dc:	d0ba      	beq.n	8005654 <HAL_SPI_Receive+0xd0>
 80056de:	1c6f      	adds	r7, r5, #1
 80056e0:	d00f      	beq.n	8005702 <HAL_SPI_Receive+0x17e>
 80056e2:	e027      	b.n	8005734 <HAL_SPI_Receive+0x1b0>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80056e6:	7b1b      	ldrb	r3, [r3, #12]
 80056e8:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 80056ea:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80056ee:	3a01      	subs	r2, #1
 80056f0:	b292      	uxth	r2, r2
 80056f2:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 80056f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056f6:	3101      	adds	r1, #1
    while (hspi->RxXferCount > 0U)
 80056f8:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056fa:	63a1      	str	r1, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0a9      	beq.n	8005654 <HAL_SPI_Receive+0xd0>
 8005700:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	07d0      	lsls	r0, r2, #31
 8005706:	d4ed      	bmi.n	80056e4 <HAL_SPI_Receive+0x160>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005708:	f7fe fb5a 	bl	8003dc0 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 800570c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800570e:	b29b      	uxth	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1f5      	bne.n	8005700 <HAL_SPI_Receive+0x17c>
 8005714:	e79e      	b.n	8005654 <HAL_SPI_Receive+0xd0>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005716:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005718:	7b1b      	ldrb	r3, [r3, #12]
 800571a:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800571c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800571e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005720:	3b01      	subs	r3, #1
 8005722:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005724:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8005726:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005728:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 800572a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800572c:	b29b      	uxth	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d090      	beq.n	8005654 <HAL_SPI_Receive+0xd0>
 8005732:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	07d1      	lsls	r1, r2, #31
 8005738:	d4ed      	bmi.n	8005716 <HAL_SPI_Receive+0x192>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800573a:	f7fe fb41 	bl	8003dc0 <HAL_GetTick>
 800573e:	1b80      	subs	r0, r0, r6
 8005740:	42a8      	cmp	r0, r5
 8005742:	d3f2      	bcc.n	800572a <HAL_SPI_Receive+0x1a6>
 8005744:	e7bd      	b.n	80056c2 <HAL_SPI_Receive+0x13e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005746:	68a3      	ldr	r3, [r4, #8]
 8005748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800574c:	d020      	beq.n	8005790 <HAL_SPI_Receive+0x20c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800574e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005752:	d00e      	beq.n	8005772 <HAL_SPI_Receive+0x1ee>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005754:	4633      	mov	r3, r6
 8005756:	462a      	mov	r2, r5
 8005758:	2180      	movs	r1, #128	; 0x80
 800575a:	4620      	mov	r0, r4
 800575c:	f7ff fba8 	bl	8004eb0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005760:	2800      	cmp	r0, #0
 8005762:	d083      	beq.n	800566c <HAL_SPI_Receive+0xe8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005764:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005766:	f043 0320 	orr.w	r3, r3, #32
 800576a:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800576c:	2320      	movs	r3, #32
 800576e:	6563      	str	r3, [r4, #84]	; 0x54
 8005770:	e77c      	b.n	800566c <HAL_SPI_Receive+0xe8>
    __HAL_SPI_DISABLE(hspi);
 8005772:	6820      	ldr	r0, [r4, #0]
 8005774:	6801      	ldr	r1, [r0, #0]
 8005776:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800577a:	6001      	str	r1, [r0, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800577c:	4633      	mov	r3, r6
 800577e:	462a      	mov	r2, r5
 8005780:	2101      	movs	r1, #1
 8005782:	4620      	mov	r0, r4
 8005784:	f7ff fb94 	bl	8004eb0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005788:	2800      	cmp	r0, #0
 800578a:	f43f af6f 	beq.w	800566c <HAL_SPI_Receive+0xe8>
 800578e:	e7e9      	b.n	8005764 <HAL_SPI_Receive+0x1e0>
    __HAL_SPI_DISABLE(hspi);
 8005790:	6822      	ldr	r2, [r4, #0]
 8005792:	6813      	ldr	r3, [r2, #0]
 8005794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005798:	6013      	str	r3, [r2, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800579a:	e7db      	b.n	8005754 <HAL_SPI_Receive+0x1d0>

0800579c <HAL_SPI_GetState>:
  return hspi->State;
 800579c:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop

080057a4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a4:	2800      	cmp	r0, #0
 80057a6:	d076      	beq.n	8005896 <HAL_TIM_Base_Init+0xf2>
{
 80057a8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80057ae:	4604      	mov	r4, r0
 80057b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d055      	beq.n	8005864 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b8:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057ba:	4938      	ldr	r1, [pc, #224]	; (800589c <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80057bc:	2302      	movs	r3, #2
 80057be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057c2:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80057c4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057c6:	d052      	beq.n	800586e <HAL_TIM_Base_Init+0xca>
 80057c8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80057cc:	d021      	beq.n	8005812 <HAL_TIM_Base_Init+0x6e>
 80057ce:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80057d2:	428a      	cmp	r2, r1
 80057d4:	d01d      	beq.n	8005812 <HAL_TIM_Base_Init+0x6e>
 80057d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80057da:	428a      	cmp	r2, r1
 80057dc:	d019      	beq.n	8005812 <HAL_TIM_Base_Init+0x6e>
 80057de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80057e2:	428a      	cmp	r2, r1
 80057e4:	d015      	beq.n	8005812 <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057e6:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80057ea:	428a      	cmp	r2, r1
 80057ec:	d015      	beq.n	800581a <HAL_TIM_Base_Init+0x76>
 80057ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80057f2:	428a      	cmp	r2, r1
 80057f4:	d011      	beq.n	800581a <HAL_TIM_Base_Init+0x76>
 80057f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80057fa:	428a      	cmp	r2, r1
 80057fc:	d00d      	beq.n	800581a <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057fe:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005800:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005802:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005808:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800580a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800580c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800580e:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005810:	e010      	b.n	8005834 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8005812:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005818:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800581a:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800581c:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800581e:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005824:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800582a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800582c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800582e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005830:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005832:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005834:	2301      	movs	r3, #1
 8005836:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005838:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800583c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005840:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005844:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005848:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800584c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005854:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005858:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800585c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005860:	2000      	movs	r0, #0
}
 8005862:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8005864:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005868:	f7fe f89a 	bl	80039a0 <HAL_TIM_Base_MspInit>
 800586c:	e7a4      	b.n	80057b8 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800586e:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005870:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005872:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005878:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 800587a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800587e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005884:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005886:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005888:	68e3      	ldr	r3, [r4, #12]
 800588a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800588c:	6863      	ldr	r3, [r4, #4]
 800588e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005890:	6963      	ldr	r3, [r4, #20]
 8005892:	6313      	str	r3, [r2, #48]	; 0x30
 8005894:	e7ce      	b.n	8005834 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 8005896:	2001      	movs	r0, #1
}
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	40010000 	.word	0x40010000

080058a0 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80058a0:	2800      	cmp	r0, #0
 80058a2:	d076      	beq.n	8005992 <HAL_TIM_OC_Init+0xf2>
{
 80058a4:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80058a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80058aa:	4604      	mov	r4, r0
 80058ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d055      	beq.n	8005960 <HAL_TIM_OC_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80058b4:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b6:	4938      	ldr	r1, [pc, #224]	; (8005998 <HAL_TIM_OC_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80058b8:	2302      	movs	r3, #2
 80058ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058be:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80058c0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058c2:	d052      	beq.n	800596a <HAL_TIM_OC_Init+0xca>
 80058c4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80058c8:	d021      	beq.n	800590e <HAL_TIM_OC_Init+0x6e>
 80058ca:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80058ce:	428a      	cmp	r2, r1
 80058d0:	d01d      	beq.n	800590e <HAL_TIM_OC_Init+0x6e>
 80058d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058d6:	428a      	cmp	r2, r1
 80058d8:	d019      	beq.n	800590e <HAL_TIM_OC_Init+0x6e>
 80058da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058de:	428a      	cmp	r2, r1
 80058e0:	d015      	beq.n	800590e <HAL_TIM_OC_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058e2:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80058e6:	428a      	cmp	r2, r1
 80058e8:	d015      	beq.n	8005916 <HAL_TIM_OC_Init+0x76>
 80058ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058ee:	428a      	cmp	r2, r1
 80058f0:	d011      	beq.n	8005916 <HAL_TIM_OC_Init+0x76>
 80058f2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058f6:	428a      	cmp	r2, r1
 80058f8:	d00d      	beq.n	8005916 <HAL_TIM_OC_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058fa:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058fc:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80058fe:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005904:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005906:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005908:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800590a:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800590c:	e010      	b.n	8005930 <HAL_TIM_OC_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 800590e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005914:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005916:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005918:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800591a:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800591c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005920:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005926:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005928:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800592a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800592c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800592e:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005930:	2301      	movs	r3, #1
 8005932:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005934:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005938:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800593c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005940:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005944:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800594c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005950:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005954:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005958:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800595c:	2000      	movs	r0, #0
}
 800595e:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8005960:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8005964:	f7fe f85a 	bl	8003a1c <HAL_TIM_OC_MspInit>
 8005968:	e7a4      	b.n	80058b4 <HAL_TIM_OC_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800596a:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800596c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800596e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005974:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8005976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800597a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800597c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005980:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005982:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005984:	68e3      	ldr	r3, [r4, #12]
 8005986:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005988:	6863      	ldr	r3, [r4, #4]
 800598a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800598c:	6963      	ldr	r3, [r4, #20]
 800598e:	6313      	str	r3, [r2, #48]	; 0x30
 8005990:	e7ce      	b.n	8005930 <HAL_TIM_OC_Init+0x90>
    return HAL_ERROR;
 8005992:	2001      	movs	r0, #1
}
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40010000 	.word	0x40010000

0800599c <HAL_TIM_PWM_MspInit>:
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop

080059a0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d076      	beq.n	8005a92 <HAL_TIM_PWM_Init+0xf2>
{
 80059a4:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80059a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80059aa:	4604      	mov	r4, r0
 80059ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d055      	beq.n	8005a60 <HAL_TIM_PWM_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059b4:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059b6:	4938      	ldr	r1, [pc, #224]	; (8005a98 <HAL_TIM_PWM_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80059b8:	2302      	movs	r3, #2
 80059ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059be:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80059c0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059c2:	d052      	beq.n	8005a6a <HAL_TIM_PWM_Init+0xca>
 80059c4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80059c8:	d021      	beq.n	8005a0e <HAL_TIM_PWM_Init+0x6e>
 80059ca:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80059ce:	428a      	cmp	r2, r1
 80059d0:	d01d      	beq.n	8005a0e <HAL_TIM_PWM_Init+0x6e>
 80059d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059d6:	428a      	cmp	r2, r1
 80059d8:	d019      	beq.n	8005a0e <HAL_TIM_PWM_Init+0x6e>
 80059da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059de:	428a      	cmp	r2, r1
 80059e0:	d015      	beq.n	8005a0e <HAL_TIM_PWM_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059e2:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80059e6:	428a      	cmp	r2, r1
 80059e8:	d015      	beq.n	8005a16 <HAL_TIM_PWM_Init+0x76>
 80059ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059ee:	428a      	cmp	r2, r1
 80059f0:	d011      	beq.n	8005a16 <HAL_TIM_PWM_Init+0x76>
 80059f2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059f6:	428a      	cmp	r2, r1
 80059f8:	d00d      	beq.n	8005a16 <HAL_TIM_PWM_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059fa:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059fc:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80059fe:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a04:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005a06:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a08:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a0a:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a0c:	e010      	b.n	8005a30 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8005a0e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a14:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a16:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a18:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a1a:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a20:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a26:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005a28:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005a2a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a2c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a2e:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005a30:	2301      	movs	r3, #1
 8005a32:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a34:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a38:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005a3c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005a40:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005a44:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a50:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005a54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005a58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005a5c:	2000      	movs	r0, #0
}
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8005a60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005a64:	f7ff ff9a 	bl	800599c <HAL_TIM_PWM_MspInit>
 8005a68:	e7a4      	b.n	80059b4 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8005a6a:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a6c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a6e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a74:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a7a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a80:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005a82:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a84:	68e3      	ldr	r3, [r4, #12]
 8005a86:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a88:	6863      	ldr	r3, [r4, #4]
 8005a8a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005a8c:	6963      	ldr	r3, [r4, #20]
 8005a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8005a90:	e7ce      	b.n	8005a30 <HAL_TIM_PWM_Init+0x90>
    return HAL_ERROR;
 8005a92:	2001      	movs	r0, #1
}
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40010000 	.word	0x40010000

08005a9c <HAL_TIM_PWM_Start>:
 8005a9c:	2900      	cmp	r1, #0
 8005a9e:	d136      	bne.n	8005b0e <HAL_TIM_PWM_Start+0x72>
 8005aa0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d13a      	bne.n	8005b1e <HAL_TIM_PWM_Start+0x82>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8005aae:	6803      	ldr	r3, [r0, #0]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	6a18      	ldr	r0, [r3, #32]
 8005ab4:	f001 011f 	and.w	r1, r1, #31
 8005ab8:	fa02 f101 	lsl.w	r1, r2, r1
 8005abc:	ea20 0001 	bic.w	r0, r0, r1
 8005ac0:	b410      	push	{r4}
 8005ac2:	6218      	str	r0, [r3, #32]
 8005ac4:	6a1a      	ldr	r2, [r3, #32]
 8005ac6:	4c27      	ldr	r4, [pc, #156]	; (8005b64 <HAL_TIM_PWM_Start+0xc8>)
 8005ac8:	4311      	orrs	r1, r2
 8005aca:	42a3      	cmp	r3, r4
 8005acc:	6219      	str	r1, [r3, #32]
 8005ace:	d02c      	beq.n	8005b2a <HAL_TIM_PWM_Start+0x8e>
 8005ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad4:	d00e      	beq.n	8005af4 <HAL_TIM_PWM_Start+0x58>
 8005ad6:	4a24      	ldr	r2, [pc, #144]	; (8005b68 <HAL_TIM_PWM_Start+0xcc>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d00b      	beq.n	8005af4 <HAL_TIM_PWM_Start+0x58>
 8005adc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d007      	beq.n	8005af4 <HAL_TIM_PWM_Start+0x58>
 8005ae4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <HAL_TIM_PWM_Start+0x58>
 8005aec:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d104      	bne.n	8005afe <HAL_TIM_PWM_Start+0x62>
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	f002 0207 	and.w	r2, r2, #7
 8005afa:	2a06      	cmp	r2, #6
 8005afc:	d01e      	beq.n	8005b3c <HAL_TIM_PWM_Start+0xa0>
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b04:	f042 0201 	orr.w	r2, r2, #1
 8005b08:	2000      	movs	r0, #0
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	4770      	bx	lr
 8005b0e:	2904      	cmp	r1, #4
 8005b10:	d018      	beq.n	8005b44 <HAL_TIM_PWM_Start+0xa8>
 8005b12:	2908      	cmp	r1, #8
 8005b14:	d01e      	beq.n	8005b54 <HAL_TIM_PWM_Start+0xb8>
 8005b16:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d001      	beq.n	8005b22 <HAL_TIM_PWM_Start+0x86>
 8005b1e:	2001      	movs	r0, #1
 8005b20:	4770      	bx	lr
 8005b22:	2302      	movs	r3, #2
 8005b24:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8005b28:	e7c1      	b.n	8005aae <HAL_TIM_PWM_Start+0x12>
 8005b2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b30:	645a      	str	r2, [r3, #68]	; 0x44
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	f002 0207 	and.w	r2, r2, #7
 8005b38:	2a06      	cmp	r2, #6
 8005b3a:	d1e0      	bne.n	8005afe <HAL_TIM_PWM_Start+0x62>
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d1e8      	bne.n	8005b1e <HAL_TIM_PWM_Start+0x82>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8005b52:	e7ac      	b.n	8005aae <HAL_TIM_PWM_Start+0x12>
 8005b54:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d1e0      	bne.n	8005b1e <HAL_TIM_PWM_Start+0x82>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8005b62:	e7a4      	b.n	8005aae <HAL_TIM_PWM_Start+0x12>
 8005b64:	40010000 	.word	0x40010000
 8005b68:	40000400 	.word	0x40000400

08005b6c <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8005b6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	f000 809a 	beq.w	8005caa <HAL_TIM_OC_ConfigChannel+0x13e>
 8005b76:	2301      	movs	r3, #1
{
 8005b78:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005b7a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005b7e:	2a0c      	cmp	r2, #12
 8005b80:	d808      	bhi.n	8005b94 <HAL_TIM_OC_ConfigChannel+0x28>
 8005b82:	e8df f002 	tbb	[pc, r2]
 8005b86:	072f      	.short	0x072f
 8005b88:	07500707 	.word	0x07500707
 8005b8c:	07710707 	.word	0x07710707
 8005b90:	0707      	.short	0x0707
 8005b92:	0d          	.byte	0x0d
 8005b93:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8005b94:	2200      	movs	r2, #0
  __HAL_LOCK(htim);
 8005b96:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005b98:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ba0:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ba2:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ba6:	6a13      	ldr	r3, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ba8:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005baa:	4e5a      	ldr	r6, [pc, #360]	; (8005d14 <HAL_TIM_OC_ConfigChannel+0x1a8>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bb0:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 8005bb2:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005bb4:	6853      	ldr	r3, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8005bb6:	69d5      	ldr	r5, [r2, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8005bb8:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bbc:	f425 45e6 	bic.w	r5, r5, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc0:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bc2:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc6:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bca:	f000 808e 	beq.w	8005cea <HAL_TIM_OC_ConfigChannel+0x17e>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bce:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005bd0:	6053      	str	r3, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005bd2:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005bd4:	6411      	str	r1, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd6:	6214      	str	r4, [r2, #32]
  __HAL_UNLOCK(htim);
 8005bd8:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005bda:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005bdc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005be4:	6802      	ldr	r2, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8005be6:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bea:	6a13      	ldr	r3, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005bec:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bee:	4e49      	ldr	r6, [pc, #292]	; (8005d14 <HAL_TIM_OC_ConfigChannel+0x1a8>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bf0:	f023 0301 	bic.w	r3, r3, #1
 8005bf4:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 8005bf6:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005bf8:	6853      	ldr	r3, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8005bfa:	6995      	ldr	r5, [r2, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8005bfc:	f024 0402 	bic.w	r4, r4, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c00:	f025 0573 	bic.w	r5, r5, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c04:	42b2      	cmp	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 8005c06:	ea44 040e 	orr.w	r4, r4, lr
  tmpccmrx |= OC_Config->OCMode;
 8005c0a:	ea45 0507 	orr.w	r5, r5, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c0e:	d04f      	beq.n	8005cb0 <HAL_TIM_OC_ConfigChannel+0x144>
  TIMx->CCR1 = OC_Config->Pulse;
 8005c10:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005c12:	6053      	str	r3, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005c14:	6195      	str	r5, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005c16:	6351      	str	r1, [r2, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8005c18:	6214      	str	r4, [r2, #32]
  __HAL_UNLOCK(htim);
 8005c1a:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005c1c:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005c1e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c26:	6802      	ldr	r2, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c28:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c2c:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c2e:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c30:	4e38      	ldr	r6, [pc, #224]	; (8005d14 <HAL_TIM_OC_ConfigChannel+0x1a8>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c32:	f025 0510 	bic.w	r5, r5, #16
 8005c36:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 8005c38:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005c3a:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8005c3c:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8005c3e:	f024 0420 	bic.w	r4, r4, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c42:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c46:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c48:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c4c:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c50:	d03c      	beq.n	8005ccc <HAL_TIM_OC_ConfigChannel+0x160>
  TIMx->CCR2 = OC_Config->Pulse;
 8005c52:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005c54:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005c56:	6197      	str	r7, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005c58:	6391      	str	r1, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005c5a:	6214      	str	r4, [r2, #32]
  __HAL_UNLOCK(htim);
 8005c5c:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005c5e:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005c60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c68:	6802      	ldr	r2, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c6a:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c6e:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005c70:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c72:	4e28      	ldr	r6, [pc, #160]	; (8005d14 <HAL_TIM_OC_ConfigChannel+0x1a8>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c74:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8005c78:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 8005c7a:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005c7c:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8005c7e:	69d3      	ldr	r3, [r2, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8005c80:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c84:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c88:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c8a:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8005c8e:	ea47 0703 	orr.w	r7, r7, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c92:	d030      	beq.n	8005cf6 <HAL_TIM_OC_ConfigChannel+0x18a>
  TIMx->CCR3 = OC_Config->Pulse;
 8005c94:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005c96:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005c98:	61d7      	str	r7, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005c9a:	63d1      	str	r1, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005c9c:	6214      	str	r4, [r2, #32]
  __HAL_UNLOCK(htim);
 8005c9e:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005ca0:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005ca2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8005caa:	2302      	movs	r3, #2
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cb0:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8005cb4:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cb6:	698e      	ldr	r6, [r1, #24]
 8005cb8:	694b      	ldr	r3, [r1, #20]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cba:	f024 0408 	bic.w	r4, r4, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005cbe:	433c      	orrs	r4, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cc0:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cc2:	f024 0404 	bic.w	r4, r4, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cc6:	ea43 030c 	orr.w	r3, r3, ip
 8005cca:	e7a1      	b.n	8005c10 <HAL_TIM_OC_ConfigChannel+0xa4>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ccc:	e9d1 3605 	ldrd	r3, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cd0:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cd4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cd6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cda:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cde:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ce0:	f024 0440 	bic.w	r4, r4, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ce4:	ea4c 0583 	orr.w	r5, ip, r3, lsl #2
 8005ce8:	e7b3      	b.n	8005c52 <HAL_TIM_OC_ConfigChannel+0xe6>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cea:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cf0:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8005cf4:	e76b      	b.n	8005bce <HAL_TIM_OC_ConfigChannel+0x62>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cf6:	e9d1 3605 	ldrd	r3, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cfa:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cfe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d00:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d04:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d08:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d0a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d0e:	ea4c 1503 	orr.w	r5, ip, r3, lsl #4
 8005d12:	e7bf      	b.n	8005c94 <HAL_TIM_OC_ConfigChannel+0x128>
 8005d14:	40010000 	.word	0x40010000

08005d18 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8005d18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	f000 80d4 	beq.w	8005eca <HAL_TIM_PWM_ConfigChannel+0x1b2>
 8005d22:	2301      	movs	r3, #1
{
 8005d24:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005d26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005d2a:	2a0c      	cmp	r2, #12
 8005d2c:	d808      	bhi.n	8005d40 <HAL_TIM_PWM_ConfigChannel+0x28>
 8005d2e:	e8df f002 	tbb	[pc, r2]
 8005d32:	073e      	.short	0x073e
 8005d34:	076d0707 	.word	0x076d0707
 8005d38:	079d0707 	.word	0x079d0707
 8005d3c:	0707      	.short	0x0707
 8005d3e:	0d          	.byte	0x0d
 8005d3f:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8005d40:	2200      	movs	r2, #0
  __HAL_LOCK(htim);
 8005d42:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005d44:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d4c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d4e:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d50:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d52:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d54:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8005f34 <HAL_TIM_PWM_ConfigChannel+0x21c>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d58:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8005d5c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005d5e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005d60:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005d64:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8005d66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d6a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d6e:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d70:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d74:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d78:	f000 80c7 	beq.w	8005f0a <HAL_TIM_PWM_ConfigChannel+0x1f2>
  TIMx->CCR4 = OC_Config->Pulse;
 8005d7c:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005d7e:	f8c3 e004 	str.w	lr, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005d82:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005d84:	641d      	str	r5, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8005d86:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d88:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d8a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d8c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8005d90:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d92:	69d9      	ldr	r1, [r3, #28]
 8005d94:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005d98:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d9a:	69da      	ldr	r2, [r3, #28]
 8005d9c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005da0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005da2:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005da4:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005da6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dae:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8005db0:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005db4:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005db6:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005db8:	4e5e      	ldr	r6, [pc, #376]	; (8005f34 <HAL_TIM_PWM_ConfigChannel+0x21c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dba:	f025 0501 	bic.w	r5, r5, #1
 8005dbe:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005dc0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005dc2:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005dc6:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8005dc8:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dcc:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dd0:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8005dd2:	ea42 020e 	orr.w	r2, r2, lr
  tmpccmrx |= OC_Config->OCMode;
 8005dd6:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dda:	d079      	beq.n	8005ed0 <HAL_TIM_PWM_ConfigChannel+0x1b8>
  TIMx->CCR1 = OC_Config->Pulse;
 8005ddc:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005dde:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005de2:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005de4:	635d      	str	r5, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8005de6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005de8:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dea:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dec:	f044 0408 	orr.w	r4, r4, #8
 8005df0:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005df2:	6999      	ldr	r1, [r3, #24]
 8005df4:	f021 0104 	bic.w	r1, r1, #4
 8005df8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dfa:	699a      	ldr	r2, [r3, #24]
 8005dfc:	432a      	orrs	r2, r5
 8005dfe:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005e00:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005e02:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005e04:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e0c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e0e:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e10:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e12:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e14:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8005f34 <HAL_TIM_PWM_ConfigChannel+0x21c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e18:	f025 0510 	bic.w	r5, r5, #16
 8005e1c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005e1e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005e20:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005e24:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8005e26:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e2a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e2e:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e30:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e34:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e38:	d058      	beq.n	8005eec <HAL_TIM_PWM_ConfigChannel+0x1d4>
  TIMx->CCR2 = OC_Config->Pulse;
 8005e3a:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005e3c:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005e40:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005e42:	639d      	str	r5, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005e44:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e46:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e48:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e4a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8005e4e:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e50:	6999      	ldr	r1, [r3, #24]
 8005e52:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005e56:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e58:	699a      	ldr	r2, [r3, #24]
 8005e5a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005e5e:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005e60:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005e62:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005e64:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e6c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e6e:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e70:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005e72:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e74:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 8005f34 <HAL_TIM_PWM_ConfigChannel+0x21c>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e78:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8005e7c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005e7e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005e80:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005e84:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8005e86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e8a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e8e:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e90:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8005e94:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e98:	d03d      	beq.n	8005f16 <HAL_TIM_PWM_ConfigChannel+0x1fe>
  TIMx->CCR3 = OC_Config->Pulse;
 8005e9a:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005e9c:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005ea0:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005ea2:	63dd      	str	r5, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005ea4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ea6:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ea8:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005eaa:	f044 0408 	orr.w	r4, r4, #8
 8005eae:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eb0:	69d9      	ldr	r1, [r3, #28]
 8005eb2:	f021 0104 	bic.w	r1, r1, #4
 8005eb6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eb8:	69da      	ldr	r2, [r3, #28]
 8005eba:	432a      	orrs	r2, r5
 8005ebc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005ebe:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005ec0:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005ec2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8005eca:	2302      	movs	r3, #2
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	4770      	bx	lr
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ed0:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpccer |= OC_Config->OCNPolarity;
 8005ed4:	68cf      	ldr	r7, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ed6:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eda:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8005ede:	433a      	orrs	r2, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ee0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ee2:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ee6:	ea45 0c0c 	orr.w	ip, r5, ip
 8005eea:	e777      	b.n	8005ddc <HAL_TIM_PWM_ConfigChannel+0xc4>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005eec:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ef0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ef2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ef6:	f42c 6c40 	bic.w	ip, ip, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005efa:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005efe:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f04:	ea4c 0c85 	orr.w	ip, ip, r5, lsl #2
 8005f08:	e797      	b.n	8005e3a <HAL_TIM_PWM_ConfigChannel+0x122>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f0a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f0c:	f42e 4e80 	bic.w	lr, lr, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f10:	ea4e 1e85 	orr.w	lr, lr, r5, lsl #6
 8005f14:	e732      	b.n	8005d7c <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f16:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f1a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f20:	f42c 5c40 	bic.w	ip, ip, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f24:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f28:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f2e:	ea4c 1c05 	orr.w	ip, ip, r5, lsl #4
 8005f32:	e7b2      	b.n	8005e9a <HAL_TIM_PWM_ConfigChannel+0x182>
 8005f34:	40010000 	.word	0x40010000

08005f38 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005f38:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d075      	beq.n	800602c <HAL_TIM_ConfigClockSource+0xf4>
 8005f40:	4602      	mov	r2, r0
{
 8005f42:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8005f44:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8005f46:	6814      	ldr	r4, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005f48:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005f4c:	2001      	movs	r0, #1
 8005f4e:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005f52:	68a5      	ldr	r5, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8005f54:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f56:	f425 457f 	bic.w	r5, r5, #65280	; 0xff00
 8005f5a:	f025 0577 	bic.w	r5, r5, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8005f5e:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8005f60:	60a5      	str	r5, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8005f62:	d065      	beq.n	8006030 <HAL_TIM_ConfigClockSource+0xf8>
 8005f64:	d824      	bhi.n	8005fb0 <HAL_TIM_ConfigClockSource+0x78>
 8005f66:	2b40      	cmp	r3, #64	; 0x40
 8005f68:	d07c      	beq.n	8006064 <HAL_TIM_ConfigClockSource+0x12c>
 8005f6a:	d94b      	bls.n	8006004 <HAL_TIM_ConfigClockSource+0xcc>
 8005f6c:	2b50      	cmp	r3, #80	; 0x50
 8005f6e:	d117      	bne.n	8005fa0 <HAL_TIM_ConfigClockSource+0x68>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f70:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f72:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f74:	6848      	ldr	r0, [r1, #4]
 8005f76:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f78:	f026 0601 	bic.w	r6, r6, #1
 8005f7c:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f7e:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f80:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8005f88:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f8a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f8e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005f90:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f92:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f98:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f9c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005f9e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005fa0:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8005fa2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005fa4:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005fa8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8005fac:	bcf0      	pop	{r4, r5, r6, r7}
 8005fae:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb4:	d038      	beq.n	8006028 <HAL_TIM_ConfigClockSource+0xf0>
 8005fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fba:	d110      	bne.n	8005fde <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fbc:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8005fc0:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8005fc2:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fc4:	432b      	orrs	r3, r5
 8005fc6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fca:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fce:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fd0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fd2:	68a3      	ldr	r3, [r4, #8]
 8005fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fd8:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005fda:	2000      	movs	r0, #0
      break;
 8005fdc:	e7e0      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8005fde:	2b70      	cmp	r3, #112	; 0x70
 8005fe0:	d1de      	bne.n	8005fa0 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fe2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8005fe6:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8005fe8:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fea:	432b      	orrs	r3, r5
 8005fec:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ff0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ff4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005ff6:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005ff8:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ffa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005ffe:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006000:	2000      	movs	r0, #0
      break;
 8006002:	e7cd      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8006004:	2b20      	cmp	r3, #32
 8006006:	d002      	beq.n	800600e <HAL_TIM_ConfigClockSource+0xd6>
 8006008:	d90a      	bls.n	8006020 <HAL_TIM_ConfigClockSource+0xe8>
 800600a:	2b30      	cmp	r3, #48	; 0x30
 800600c:	d1c8      	bne.n	8005fa0 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 800600e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006010:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006014:	430b      	orrs	r3, r1
 8006016:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800601a:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800601c:	2000      	movs	r0, #0
}
 800601e:	e7bf      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8006020:	f033 0110 	bics.w	r1, r3, #16
 8006024:	d1bc      	bne.n	8005fa0 <HAL_TIM_ConfigClockSource+0x68>
 8006026:	e7f2      	b.n	800600e <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8006028:	2000      	movs	r0, #0
 800602a:	e7b9      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 800602c:	2002      	movs	r0, #2
}
 800602e:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006030:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006032:	684d      	ldr	r5, [r1, #4]
 8006034:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006036:	f020 0010 	bic.w	r0, r0, #16
 800603a:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800603c:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 800603e:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006040:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006044:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006048:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800604c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006050:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8006052:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006054:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800605a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800605e:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006060:	2000      	movs	r0, #0
}
 8006062:	e79d      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x68>
  tmpccer = TIMx->CCER;
 8006064:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006066:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006068:	6848      	ldr	r0, [r1, #4]
 800606a:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800606c:	f026 0601 	bic.w	r6, r6, #1
 8006070:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006072:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006074:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006078:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800607c:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800607e:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006082:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006084:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006086:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800608c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8006090:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006092:	2000      	movs	r0, #0
}
 8006094:	e784      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x68>
 8006096:	bf00      	nop

08006098 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006098:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800609c:	2b01      	cmp	r3, #1
 800609e:	d02e      	beq.n	80060fe <HAL_TIMEx_MasterConfigSynchronization+0x66>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a0:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80060a2:	2202      	movs	r2, #2
{
 80060a4:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80060a6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80060aa:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060ac:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ae:	4d15      	ldr	r5, [pc, #84]	; (8006104 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80060b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060b4:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060b6:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 80060b8:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 80060ba:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060bc:	d011      	beq.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80060be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c2:	d00e      	beq.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80060c4:	4a10      	ldr	r2, [pc, #64]	; (8006108 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00b      	beq.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80060ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d007      	beq.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80060d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d003      	beq.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80060da:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80060de:	4293      	cmp	r3, r2
 80060e0:	d104      	bne.n	80060ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060e2:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060e4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060e8:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060ea:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80060ec:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80060ee:	2201      	movs	r2, #1
 80060f0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80060f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80060f8:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80060fa:	4618      	mov	r0, r3
}
 80060fc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80060fe:	2002      	movs	r0, #2
}
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40010000 	.word	0x40010000
 8006108:	40000400 	.word	0x40000400

0800610c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800610c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d022      	beq.n	800615a <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
{
 8006114:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006116:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800611a:	4604      	mov	r4, r0
 800611c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006120:	e9d1 2000 	ldrd	r2, r0, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006124:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800612a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800612c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006130:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006134:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006136:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800613a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800613c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006140:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006142:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006144:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800614a:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 800614c:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800614e:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8006150:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c

  return HAL_OK;
 8006154:	4608      	mov	r0, r1
}
 8006156:	bc30      	pop	{r4, r5}
 8006158:	4770      	bx	lr
  __HAL_LOCK(htim);
 800615a:	2002      	movs	r0, #2
}
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop

08006160 <HAL_HalfDuplex_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006160:	2800      	cmp	r0, #0
 8006162:	f000 8094 	beq.w	800628e <HAL_HalfDuplex_Init+0x12e>
{
 8006166:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006168:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800616c:	4604      	mov	r4, r0
 800616e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 8086 	beq.w	8006284 <HAL_HalfDuplex_Init+0x124>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006178:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800617a:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 800617c:	2224      	movs	r2, #36	; 0x24
 800617e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8006182:	68d8      	ldr	r0, [r3, #12]
 8006184:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006188:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800618c:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800618e:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006190:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006192:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8006196:	4329      	orrs	r1, r5
 8006198:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800619a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800619c:	6965      	ldr	r5, [r4, #20]
 800619e:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 80061a0:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061a4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80061a6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061aa:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80061ac:	430a      	orrs	r2, r1
 80061ae:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061b0:	695a      	ldr	r2, [r3, #20]
 80061b2:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061b4:	4937      	ldr	r1, [pc, #220]	; (8006294 <HAL_HalfDuplex_Init+0x134>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80061ba:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061bc:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061be:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061c0:	d039      	beq.n	8006236 <HAL_HalfDuplex_Init+0xd6>
 80061c2:	4a35      	ldr	r2, [pc, #212]	; (8006298 <HAL_HalfDuplex_Init+0x138>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d036      	beq.n	8006236 <HAL_HalfDuplex_Init+0xd6>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061c8:	f7fe fe52 	bl	8004e70 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061cc:	69e3      	ldr	r3, [r4, #28]
 80061ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061d2:	d036      	beq.n	8006242 <HAL_HalfDuplex_Init+0xe2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061d4:	6863      	ldr	r3, [r4, #4]
 80061d6:	4e31      	ldr	r6, [pc, #196]	; (800629c <HAL_HalfDuplex_Init+0x13c>)
 80061d8:	2119      	movs	r1, #25
 80061da:	009a      	lsls	r2, r3, #2
 80061dc:	fba0 0101 	umull	r0, r1, r0, r1
 80061e0:	0f9b      	lsrs	r3, r3, #30
 80061e2:	f7fa fd39 	bl	8000c58 <__aeabi_uldivmod>
 80061e6:	fba6 2500 	umull	r2, r5, r6, r0
 80061ea:	096d      	lsrs	r5, r5, #5
 80061ec:	2164      	movs	r1, #100	; 0x64
 80061ee:	fb01 0215 	mls	r2, r1, r5, r0
 80061f2:	0112      	lsls	r2, r2, #4
 80061f4:	3232      	adds	r2, #50	; 0x32
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	fba6 1202 	umull	r1, r2, r6, r2
 80061fc:	012d      	lsls	r5, r5, #4
 80061fe:	eb05 1252 	add.w	r2, r5, r2, lsr #5
 8006202:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006204:	691a      	ldr	r2, [r3, #16]
 8006206:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800620a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800620c:	695a      	ldr	r2, [r3, #20]
 800620e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8006212:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006214:	695a      	ldr	r2, [r3, #20]
 8006216:	f042 0208 	orr.w	r2, r2, #8
 800621a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800621c:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800621e:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8006220:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8006222:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006226:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006228:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800622a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800622e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8006232:	4628      	mov	r0, r5
}
 8006234:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8006236:	f7fe fe2b 	bl	8004e90 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800623a:	69e3      	ldr	r3, [r4, #28]
 800623c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006240:	d1c8      	bne.n	80061d4 <HAL_HalfDuplex_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006242:	6862      	ldr	r2, [r4, #4]
 8006244:	4e15      	ldr	r6, [pc, #84]	; (800629c <HAL_HalfDuplex_Init+0x13c>)
 8006246:	1892      	adds	r2, r2, r2
 8006248:	f04f 0300 	mov.w	r3, #0
 800624c:	f04f 0119 	mov.w	r1, #25
 8006250:	415b      	adcs	r3, r3
 8006252:	fba0 0101 	umull	r0, r1, r0, r1
 8006256:	f7fa fcff 	bl	8000c58 <__aeabi_uldivmod>
 800625a:	fba6 2100 	umull	r2, r1, r6, r0
 800625e:	094d      	lsrs	r5, r1, #5
 8006260:	2164      	movs	r1, #100	; 0x64
 8006262:	fb01 0215 	mls	r2, r1, r5, r0
 8006266:	00d2      	lsls	r2, r2, #3
 8006268:	3232      	adds	r2, #50	; 0x32
 800626a:	fba6 1202 	umull	r1, r2, r6, r2
 800626e:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8006272:	0912      	lsrs	r2, r2, #4
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800627a:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800627e:	440a      	add	r2, r1
 8006280:	609a      	str	r2, [r3, #8]
 8006282:	e7bf      	b.n	8006204 <HAL_HalfDuplex_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8006284:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8006288:	f7fd fc62 	bl	8003b50 <HAL_UART_MspInit>
 800628c:	e774      	b.n	8006178 <HAL_HalfDuplex_Init+0x18>
    return HAL_ERROR;
 800628e:	2001      	movs	r0, #1
}
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	40011000 	.word	0x40011000
 8006298:	40011400 	.word	0x40011400
 800629c:	51eb851f 	.word	0x51eb851f

080062a0 <HAL_UART_Transmit>:
{
 80062a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80062a6:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80062aa:	2820      	cmp	r0, #32
 80062ac:	d177      	bne.n	800639e <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 80062ae:	4688      	mov	r8, r1
 80062b0:	2900      	cmp	r1, #0
 80062b2:	d040      	beq.n	8006336 <HAL_UART_Transmit+0x96>
 80062b4:	4617      	mov	r7, r2
 80062b6:	2a00      	cmp	r2, #0
 80062b8:	d03d      	beq.n	8006336 <HAL_UART_Transmit+0x96>
 80062ba:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 80062bc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d06c      	beq.n	800639e <HAL_UART_Transmit+0xfe>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062c4:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 80062c6:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c8:	f04f 0900 	mov.w	r9, #0
 80062cc:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    __HAL_LOCK(huart);
 80062d0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80062d8:	f7fd fd72 	bl	8003dc0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062dc:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 80062de:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80062e4:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80062e6:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e8:	d05c      	beq.n	80063a4 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 80062ea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80062ec:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80062ee:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80062f0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d07e      	beq.n	80063f6 <HAL_UART_Transmit+0x156>
 80062f8:	6822      	ldr	r2, [r4, #0]
 80062fa:	1c69      	adds	r1, r5, #1
 80062fc:	d11e      	bne.n	800633c <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062fe:	6813      	ldr	r3, [r2, #0]
 8006300:	061b      	lsls	r3, r3, #24
 8006302:	d5fc      	bpl.n	80062fe <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8006304:	f1b8 0f00 	cmp.w	r8, #0
 8006308:	d044      	beq.n	8006394 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800630a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800630e:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8006310:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006312:	3b01      	subs	r3, #1
 8006314:	b29b      	uxth	r3, r3
 8006316:	84e3      	strh	r3, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006318:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800631a:	b29b      	uxth	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1ec      	bne.n	80062fa <HAL_UART_Transmit+0x5a>
 8006320:	1c68      	adds	r0, r5, #1
 8006322:	d145      	bne.n	80063b0 <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006324:	6813      	ldr	r3, [r2, #0]
 8006326:	0659      	lsls	r1, r3, #25
 8006328:	d5fc      	bpl.n	8006324 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 800632a:	2320      	movs	r3, #32
 800632c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8006330:	2000      	movs	r0, #0
}
 8006332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8006336:	2001      	movs	r0, #1
}
 8006338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800633c:	6813      	ldr	r3, [r2, #0]
 800633e:	061f      	lsls	r7, r3, #24
 8006340:	d4e0      	bmi.n	8006304 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006342:	b12d      	cbz	r5, 8006350 <HAL_UART_Transmit+0xb0>
 8006344:	f7fd fd3c 	bl	8003dc0 <HAL_GetTick>
 8006348:	1b80      	subs	r0, r0, r6
 800634a:	4285      	cmp	r5, r0
 800634c:	6822      	ldr	r2, [r4, #0]
 800634e:	d2d4      	bcs.n	80062fa <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	f102 030c 	add.w	r3, r2, #12
 8006354:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006358:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	f102 000c 	add.w	r0, r2, #12
 8006360:	e840 3100 	strex	r1, r3, [r0]
 8006364:	2900      	cmp	r1, #0
 8006366:	d1f3      	bne.n	8006350 <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	f102 0314 	add.w	r3, r2, #20
 800636c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006370:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	f102 0014 	add.w	r0, r2, #20
 8006378:	e840 3100 	strex	r1, r3, [r0]
 800637c:	2900      	cmp	r1, #0
 800637e:	d1f3      	bne.n	8006368 <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 8006380:	2320      	movs	r3, #32
 8006382:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8006386:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 800638a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      return HAL_TIMEOUT;
 800638e:	2003      	movs	r0, #3
}
 8006390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006394:	f839 3b02 	ldrh.w	r3, [r9], #2
 8006398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639c:	e7b7      	b.n	800630e <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 800639e:	2002      	movs	r0, #2
}
 80063a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a4:	6923      	ldr	r3, [r4, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d19f      	bne.n	80062ea <HAL_UART_Transmit+0x4a>
 80063aa:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 80063ac:	4698      	mov	r8, r3
 80063ae:	e79c      	b.n	80062ea <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063b0:	6813      	ldr	r3, [r2, #0]
 80063b2:	065b      	lsls	r3, r3, #25
 80063b4:	d4b9      	bmi.n	800632a <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063b6:	b12d      	cbz	r5, 80063c4 <HAL_UART_Transmit+0x124>
 80063b8:	f7fd fd02 	bl	8003dc0 <HAL_GetTick>
 80063bc:	1b80      	subs	r0, r0, r6
 80063be:	4285      	cmp	r5, r0
 80063c0:	6822      	ldr	r2, [r4, #0]
 80063c2:	d2ad      	bcs.n	8006320 <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	f102 030c 	add.w	r3, r2, #12
 80063c8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	f102 000c 	add.w	r0, r2, #12
 80063d4:	e840 3100 	strex	r1, r3, [r0]
 80063d8:	2900      	cmp	r1, #0
 80063da:	d1f3      	bne.n	80063c4 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	f102 0314 	add.w	r3, r2, #20
 80063e0:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e8:	f102 0014 	add.w	r0, r2, #20
 80063ec:	e840 3100 	strex	r1, r3, [r0]
 80063f0:	2900      	cmp	r1, #0
 80063f2:	d1f3      	bne.n	80063dc <HAL_UART_Transmit+0x13c>
 80063f4:	e7c4      	b.n	8006380 <HAL_UART_Transmit+0xe0>
 80063f6:	6822      	ldr	r2, [r4, #0]
 80063f8:	e792      	b.n	8006320 <HAL_UART_Transmit+0x80>
 80063fa:	bf00      	nop

080063fc <__errno>:
 80063fc:	4b01      	ldr	r3, [pc, #4]	; (8006404 <__errno+0x8>)
 80063fe:	6818      	ldr	r0, [r3, #0]
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	20002014 	.word	0x20002014

08006408 <__libc_init_array>:
 8006408:	b570      	push	{r4, r5, r6, lr}
 800640a:	4d0d      	ldr	r5, [pc, #52]	; (8006440 <__libc_init_array+0x38>)
 800640c:	4c0d      	ldr	r4, [pc, #52]	; (8006444 <__libc_init_array+0x3c>)
 800640e:	1b64      	subs	r4, r4, r5
 8006410:	10a4      	asrs	r4, r4, #2
 8006412:	2600      	movs	r6, #0
 8006414:	42a6      	cmp	r6, r4
 8006416:	d109      	bne.n	800642c <__libc_init_array+0x24>
 8006418:	4d0b      	ldr	r5, [pc, #44]	; (8006448 <__libc_init_array+0x40>)
 800641a:	4c0c      	ldr	r4, [pc, #48]	; (800644c <__libc_init_array+0x44>)
 800641c:	f004 fb4a 	bl	800aab4 <_init>
 8006420:	1b64      	subs	r4, r4, r5
 8006422:	10a4      	asrs	r4, r4, #2
 8006424:	2600      	movs	r6, #0
 8006426:	42a6      	cmp	r6, r4
 8006428:	d105      	bne.n	8006436 <__libc_init_array+0x2e>
 800642a:	bd70      	pop	{r4, r5, r6, pc}
 800642c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006430:	4798      	blx	r3
 8006432:	3601      	adds	r6, #1
 8006434:	e7ee      	b.n	8006414 <__libc_init_array+0xc>
 8006436:	f855 3b04 	ldr.w	r3, [r5], #4
 800643a:	4798      	blx	r3
 800643c:	3601      	adds	r6, #1
 800643e:	e7f2      	b.n	8006426 <__libc_init_array+0x1e>
 8006440:	0800b238 	.word	0x0800b238
 8006444:	0800b238 	.word	0x0800b238
 8006448:	0800b238 	.word	0x0800b238
 800644c:	0800b23c 	.word	0x0800b23c

08006450 <memset>:
 8006450:	4402      	add	r2, r0
 8006452:	4603      	mov	r3, r0
 8006454:	4293      	cmp	r3, r2
 8006456:	d100      	bne.n	800645a <memset+0xa>
 8006458:	4770      	bx	lr
 800645a:	f803 1b01 	strb.w	r1, [r3], #1
 800645e:	e7f9      	b.n	8006454 <memset+0x4>

08006460 <__cvt>:
 8006460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006464:	ec55 4b10 	vmov	r4, r5, d0
 8006468:	2d00      	cmp	r5, #0
 800646a:	460e      	mov	r6, r1
 800646c:	4619      	mov	r1, r3
 800646e:	462b      	mov	r3, r5
 8006470:	bfbb      	ittet	lt
 8006472:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006476:	461d      	movlt	r5, r3
 8006478:	2300      	movge	r3, #0
 800647a:	232d      	movlt	r3, #45	; 0x2d
 800647c:	700b      	strb	r3, [r1, #0]
 800647e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006480:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006484:	4691      	mov	r9, r2
 8006486:	f023 0820 	bic.w	r8, r3, #32
 800648a:	bfbc      	itt	lt
 800648c:	4622      	movlt	r2, r4
 800648e:	4614      	movlt	r4, r2
 8006490:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006494:	d005      	beq.n	80064a2 <__cvt+0x42>
 8006496:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800649a:	d100      	bne.n	800649e <__cvt+0x3e>
 800649c:	3601      	adds	r6, #1
 800649e:	2102      	movs	r1, #2
 80064a0:	e000      	b.n	80064a4 <__cvt+0x44>
 80064a2:	2103      	movs	r1, #3
 80064a4:	ab03      	add	r3, sp, #12
 80064a6:	9301      	str	r3, [sp, #4]
 80064a8:	ab02      	add	r3, sp, #8
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	ec45 4b10 	vmov	d0, r4, r5
 80064b0:	4653      	mov	r3, sl
 80064b2:	4632      	mov	r2, r6
 80064b4:	f000 fcec 	bl	8006e90 <_dtoa_r>
 80064b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80064bc:	4607      	mov	r7, r0
 80064be:	d102      	bne.n	80064c6 <__cvt+0x66>
 80064c0:	f019 0f01 	tst.w	r9, #1
 80064c4:	d022      	beq.n	800650c <__cvt+0xac>
 80064c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064ca:	eb07 0906 	add.w	r9, r7, r6
 80064ce:	d110      	bne.n	80064f2 <__cvt+0x92>
 80064d0:	783b      	ldrb	r3, [r7, #0]
 80064d2:	2b30      	cmp	r3, #48	; 0x30
 80064d4:	d10a      	bne.n	80064ec <__cvt+0x8c>
 80064d6:	2200      	movs	r2, #0
 80064d8:	2300      	movs	r3, #0
 80064da:	4620      	mov	r0, r4
 80064dc:	4629      	mov	r1, r5
 80064de:	f7fa fafb 	bl	8000ad8 <__aeabi_dcmpeq>
 80064e2:	b918      	cbnz	r0, 80064ec <__cvt+0x8c>
 80064e4:	f1c6 0601 	rsb	r6, r6, #1
 80064e8:	f8ca 6000 	str.w	r6, [sl]
 80064ec:	f8da 3000 	ldr.w	r3, [sl]
 80064f0:	4499      	add	r9, r3
 80064f2:	2200      	movs	r2, #0
 80064f4:	2300      	movs	r3, #0
 80064f6:	4620      	mov	r0, r4
 80064f8:	4629      	mov	r1, r5
 80064fa:	f7fa faed 	bl	8000ad8 <__aeabi_dcmpeq>
 80064fe:	b108      	cbz	r0, 8006504 <__cvt+0xa4>
 8006500:	f8cd 900c 	str.w	r9, [sp, #12]
 8006504:	2230      	movs	r2, #48	; 0x30
 8006506:	9b03      	ldr	r3, [sp, #12]
 8006508:	454b      	cmp	r3, r9
 800650a:	d307      	bcc.n	800651c <__cvt+0xbc>
 800650c:	9b03      	ldr	r3, [sp, #12]
 800650e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006510:	1bdb      	subs	r3, r3, r7
 8006512:	4638      	mov	r0, r7
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	b004      	add	sp, #16
 8006518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800651c:	1c59      	adds	r1, r3, #1
 800651e:	9103      	str	r1, [sp, #12]
 8006520:	701a      	strb	r2, [r3, #0]
 8006522:	e7f0      	b.n	8006506 <__cvt+0xa6>

08006524 <__exponent>:
 8006524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006526:	4603      	mov	r3, r0
 8006528:	2900      	cmp	r1, #0
 800652a:	bfb8      	it	lt
 800652c:	4249      	neglt	r1, r1
 800652e:	f803 2b02 	strb.w	r2, [r3], #2
 8006532:	bfb4      	ite	lt
 8006534:	222d      	movlt	r2, #45	; 0x2d
 8006536:	222b      	movge	r2, #43	; 0x2b
 8006538:	2909      	cmp	r1, #9
 800653a:	7042      	strb	r2, [r0, #1]
 800653c:	dd2a      	ble.n	8006594 <__exponent+0x70>
 800653e:	f10d 0407 	add.w	r4, sp, #7
 8006542:	46a4      	mov	ip, r4
 8006544:	270a      	movs	r7, #10
 8006546:	46a6      	mov	lr, r4
 8006548:	460a      	mov	r2, r1
 800654a:	fb91 f6f7 	sdiv	r6, r1, r7
 800654e:	fb07 1516 	mls	r5, r7, r6, r1
 8006552:	3530      	adds	r5, #48	; 0x30
 8006554:	2a63      	cmp	r2, #99	; 0x63
 8006556:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800655a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800655e:	4631      	mov	r1, r6
 8006560:	dcf1      	bgt.n	8006546 <__exponent+0x22>
 8006562:	3130      	adds	r1, #48	; 0x30
 8006564:	f1ae 0502 	sub.w	r5, lr, #2
 8006568:	f804 1c01 	strb.w	r1, [r4, #-1]
 800656c:	1c44      	adds	r4, r0, #1
 800656e:	4629      	mov	r1, r5
 8006570:	4561      	cmp	r1, ip
 8006572:	d30a      	bcc.n	800658a <__exponent+0x66>
 8006574:	f10d 0209 	add.w	r2, sp, #9
 8006578:	eba2 020e 	sub.w	r2, r2, lr
 800657c:	4565      	cmp	r5, ip
 800657e:	bf88      	it	hi
 8006580:	2200      	movhi	r2, #0
 8006582:	4413      	add	r3, r2
 8006584:	1a18      	subs	r0, r3, r0
 8006586:	b003      	add	sp, #12
 8006588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800658a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800658e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006592:	e7ed      	b.n	8006570 <__exponent+0x4c>
 8006594:	2330      	movs	r3, #48	; 0x30
 8006596:	3130      	adds	r1, #48	; 0x30
 8006598:	7083      	strb	r3, [r0, #2]
 800659a:	70c1      	strb	r1, [r0, #3]
 800659c:	1d03      	adds	r3, r0, #4
 800659e:	e7f1      	b.n	8006584 <__exponent+0x60>

080065a0 <_printf_float>:
 80065a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a4:	ed2d 8b02 	vpush	{d8}
 80065a8:	b08d      	sub	sp, #52	; 0x34
 80065aa:	460c      	mov	r4, r1
 80065ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80065b0:	4616      	mov	r6, r2
 80065b2:	461f      	mov	r7, r3
 80065b4:	4605      	mov	r5, r0
 80065b6:	f001 fa57 	bl	8007a68 <_localeconv_r>
 80065ba:	f8d0 a000 	ldr.w	sl, [r0]
 80065be:	4650      	mov	r0, sl
 80065c0:	f7f9 fe0e 	bl	80001e0 <strlen>
 80065c4:	2300      	movs	r3, #0
 80065c6:	930a      	str	r3, [sp, #40]	; 0x28
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	9305      	str	r3, [sp, #20]
 80065cc:	f8d8 3000 	ldr.w	r3, [r8]
 80065d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80065d4:	3307      	adds	r3, #7
 80065d6:	f023 0307 	bic.w	r3, r3, #7
 80065da:	f103 0208 	add.w	r2, r3, #8
 80065de:	f8c8 2000 	str.w	r2, [r8]
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80065ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065f2:	9307      	str	r3, [sp, #28]
 80065f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80065f8:	ee08 0a10 	vmov	s16, r0
 80065fc:	4b9f      	ldr	r3, [pc, #636]	; (800687c <_printf_float+0x2dc>)
 80065fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006602:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006606:	f7fa fa99 	bl	8000b3c <__aeabi_dcmpun>
 800660a:	bb88      	cbnz	r0, 8006670 <_printf_float+0xd0>
 800660c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006610:	4b9a      	ldr	r3, [pc, #616]	; (800687c <_printf_float+0x2dc>)
 8006612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006616:	f7fa fa73 	bl	8000b00 <__aeabi_dcmple>
 800661a:	bb48      	cbnz	r0, 8006670 <_printf_float+0xd0>
 800661c:	2200      	movs	r2, #0
 800661e:	2300      	movs	r3, #0
 8006620:	4640      	mov	r0, r8
 8006622:	4649      	mov	r1, r9
 8006624:	f7fa fa62 	bl	8000aec <__aeabi_dcmplt>
 8006628:	b110      	cbz	r0, 8006630 <_printf_float+0x90>
 800662a:	232d      	movs	r3, #45	; 0x2d
 800662c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006630:	4b93      	ldr	r3, [pc, #588]	; (8006880 <_printf_float+0x2e0>)
 8006632:	4894      	ldr	r0, [pc, #592]	; (8006884 <_printf_float+0x2e4>)
 8006634:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006638:	bf94      	ite	ls
 800663a:	4698      	movls	r8, r3
 800663c:	4680      	movhi	r8, r0
 800663e:	2303      	movs	r3, #3
 8006640:	6123      	str	r3, [r4, #16]
 8006642:	9b05      	ldr	r3, [sp, #20]
 8006644:	f023 0204 	bic.w	r2, r3, #4
 8006648:	6022      	str	r2, [r4, #0]
 800664a:	f04f 0900 	mov.w	r9, #0
 800664e:	9700      	str	r7, [sp, #0]
 8006650:	4633      	mov	r3, r6
 8006652:	aa0b      	add	r2, sp, #44	; 0x2c
 8006654:	4621      	mov	r1, r4
 8006656:	4628      	mov	r0, r5
 8006658:	f000 f9d8 	bl	8006a0c <_printf_common>
 800665c:	3001      	adds	r0, #1
 800665e:	f040 8090 	bne.w	8006782 <_printf_float+0x1e2>
 8006662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006666:	b00d      	add	sp, #52	; 0x34
 8006668:	ecbd 8b02 	vpop	{d8}
 800666c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006670:	4642      	mov	r2, r8
 8006672:	464b      	mov	r3, r9
 8006674:	4640      	mov	r0, r8
 8006676:	4649      	mov	r1, r9
 8006678:	f7fa fa60 	bl	8000b3c <__aeabi_dcmpun>
 800667c:	b140      	cbz	r0, 8006690 <_printf_float+0xf0>
 800667e:	464b      	mov	r3, r9
 8006680:	2b00      	cmp	r3, #0
 8006682:	bfbc      	itt	lt
 8006684:	232d      	movlt	r3, #45	; 0x2d
 8006686:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800668a:	487f      	ldr	r0, [pc, #508]	; (8006888 <_printf_float+0x2e8>)
 800668c:	4b7f      	ldr	r3, [pc, #508]	; (800688c <_printf_float+0x2ec>)
 800668e:	e7d1      	b.n	8006634 <_printf_float+0x94>
 8006690:	6863      	ldr	r3, [r4, #4]
 8006692:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006696:	9206      	str	r2, [sp, #24]
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	d13f      	bne.n	800671c <_printf_float+0x17c>
 800669c:	2306      	movs	r3, #6
 800669e:	6063      	str	r3, [r4, #4]
 80066a0:	9b05      	ldr	r3, [sp, #20]
 80066a2:	6861      	ldr	r1, [r4, #4]
 80066a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80066a8:	2300      	movs	r3, #0
 80066aa:	9303      	str	r3, [sp, #12]
 80066ac:	ab0a      	add	r3, sp, #40	; 0x28
 80066ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80066b2:	ab09      	add	r3, sp, #36	; 0x24
 80066b4:	ec49 8b10 	vmov	d0, r8, r9
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	6022      	str	r2, [r4, #0]
 80066bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80066c0:	4628      	mov	r0, r5
 80066c2:	f7ff fecd 	bl	8006460 <__cvt>
 80066c6:	9b06      	ldr	r3, [sp, #24]
 80066c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066ca:	2b47      	cmp	r3, #71	; 0x47
 80066cc:	4680      	mov	r8, r0
 80066ce:	d108      	bne.n	80066e2 <_printf_float+0x142>
 80066d0:	1cc8      	adds	r0, r1, #3
 80066d2:	db02      	blt.n	80066da <_printf_float+0x13a>
 80066d4:	6863      	ldr	r3, [r4, #4]
 80066d6:	4299      	cmp	r1, r3
 80066d8:	dd41      	ble.n	800675e <_printf_float+0x1be>
 80066da:	f1ab 0b02 	sub.w	fp, fp, #2
 80066de:	fa5f fb8b 	uxtb.w	fp, fp
 80066e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066e6:	d820      	bhi.n	800672a <_printf_float+0x18a>
 80066e8:	3901      	subs	r1, #1
 80066ea:	465a      	mov	r2, fp
 80066ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066f0:	9109      	str	r1, [sp, #36]	; 0x24
 80066f2:	f7ff ff17 	bl	8006524 <__exponent>
 80066f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066f8:	1813      	adds	r3, r2, r0
 80066fa:	2a01      	cmp	r2, #1
 80066fc:	4681      	mov	r9, r0
 80066fe:	6123      	str	r3, [r4, #16]
 8006700:	dc02      	bgt.n	8006708 <_printf_float+0x168>
 8006702:	6822      	ldr	r2, [r4, #0]
 8006704:	07d2      	lsls	r2, r2, #31
 8006706:	d501      	bpl.n	800670c <_printf_float+0x16c>
 8006708:	3301      	adds	r3, #1
 800670a:	6123      	str	r3, [r4, #16]
 800670c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006710:	2b00      	cmp	r3, #0
 8006712:	d09c      	beq.n	800664e <_printf_float+0xae>
 8006714:	232d      	movs	r3, #45	; 0x2d
 8006716:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800671a:	e798      	b.n	800664e <_printf_float+0xae>
 800671c:	9a06      	ldr	r2, [sp, #24]
 800671e:	2a47      	cmp	r2, #71	; 0x47
 8006720:	d1be      	bne.n	80066a0 <_printf_float+0x100>
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1bc      	bne.n	80066a0 <_printf_float+0x100>
 8006726:	2301      	movs	r3, #1
 8006728:	e7b9      	b.n	800669e <_printf_float+0xfe>
 800672a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800672e:	d118      	bne.n	8006762 <_printf_float+0x1c2>
 8006730:	2900      	cmp	r1, #0
 8006732:	6863      	ldr	r3, [r4, #4]
 8006734:	dd0b      	ble.n	800674e <_printf_float+0x1ae>
 8006736:	6121      	str	r1, [r4, #16]
 8006738:	b913      	cbnz	r3, 8006740 <_printf_float+0x1a0>
 800673a:	6822      	ldr	r2, [r4, #0]
 800673c:	07d0      	lsls	r0, r2, #31
 800673e:	d502      	bpl.n	8006746 <_printf_float+0x1a6>
 8006740:	3301      	adds	r3, #1
 8006742:	440b      	add	r3, r1
 8006744:	6123      	str	r3, [r4, #16]
 8006746:	65a1      	str	r1, [r4, #88]	; 0x58
 8006748:	f04f 0900 	mov.w	r9, #0
 800674c:	e7de      	b.n	800670c <_printf_float+0x16c>
 800674e:	b913      	cbnz	r3, 8006756 <_printf_float+0x1b6>
 8006750:	6822      	ldr	r2, [r4, #0]
 8006752:	07d2      	lsls	r2, r2, #31
 8006754:	d501      	bpl.n	800675a <_printf_float+0x1ba>
 8006756:	3302      	adds	r3, #2
 8006758:	e7f4      	b.n	8006744 <_printf_float+0x1a4>
 800675a:	2301      	movs	r3, #1
 800675c:	e7f2      	b.n	8006744 <_printf_float+0x1a4>
 800675e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006764:	4299      	cmp	r1, r3
 8006766:	db05      	blt.n	8006774 <_printf_float+0x1d4>
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	6121      	str	r1, [r4, #16]
 800676c:	07d8      	lsls	r0, r3, #31
 800676e:	d5ea      	bpl.n	8006746 <_printf_float+0x1a6>
 8006770:	1c4b      	adds	r3, r1, #1
 8006772:	e7e7      	b.n	8006744 <_printf_float+0x1a4>
 8006774:	2900      	cmp	r1, #0
 8006776:	bfd4      	ite	le
 8006778:	f1c1 0202 	rsble	r2, r1, #2
 800677c:	2201      	movgt	r2, #1
 800677e:	4413      	add	r3, r2
 8006780:	e7e0      	b.n	8006744 <_printf_float+0x1a4>
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	055a      	lsls	r2, r3, #21
 8006786:	d407      	bmi.n	8006798 <_printf_float+0x1f8>
 8006788:	6923      	ldr	r3, [r4, #16]
 800678a:	4642      	mov	r2, r8
 800678c:	4631      	mov	r1, r6
 800678e:	4628      	mov	r0, r5
 8006790:	47b8      	blx	r7
 8006792:	3001      	adds	r0, #1
 8006794:	d12c      	bne.n	80067f0 <_printf_float+0x250>
 8006796:	e764      	b.n	8006662 <_printf_float+0xc2>
 8006798:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800679c:	f240 80e0 	bls.w	8006960 <_printf_float+0x3c0>
 80067a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067a4:	2200      	movs	r2, #0
 80067a6:	2300      	movs	r3, #0
 80067a8:	f7fa f996 	bl	8000ad8 <__aeabi_dcmpeq>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	d034      	beq.n	800681a <_printf_float+0x27a>
 80067b0:	4a37      	ldr	r2, [pc, #220]	; (8006890 <_printf_float+0x2f0>)
 80067b2:	2301      	movs	r3, #1
 80067b4:	4631      	mov	r1, r6
 80067b6:	4628      	mov	r0, r5
 80067b8:	47b8      	blx	r7
 80067ba:	3001      	adds	r0, #1
 80067bc:	f43f af51 	beq.w	8006662 <_printf_float+0xc2>
 80067c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067c4:	429a      	cmp	r2, r3
 80067c6:	db02      	blt.n	80067ce <_printf_float+0x22e>
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	07d8      	lsls	r0, r3, #31
 80067cc:	d510      	bpl.n	80067f0 <_printf_float+0x250>
 80067ce:	ee18 3a10 	vmov	r3, s16
 80067d2:	4652      	mov	r2, sl
 80067d4:	4631      	mov	r1, r6
 80067d6:	4628      	mov	r0, r5
 80067d8:	47b8      	blx	r7
 80067da:	3001      	adds	r0, #1
 80067dc:	f43f af41 	beq.w	8006662 <_printf_float+0xc2>
 80067e0:	f04f 0800 	mov.w	r8, #0
 80067e4:	f104 091a 	add.w	r9, r4, #26
 80067e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ea:	3b01      	subs	r3, #1
 80067ec:	4543      	cmp	r3, r8
 80067ee:	dc09      	bgt.n	8006804 <_printf_float+0x264>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	079b      	lsls	r3, r3, #30
 80067f4:	f100 8105 	bmi.w	8006a02 <_printf_float+0x462>
 80067f8:	68e0      	ldr	r0, [r4, #12]
 80067fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067fc:	4298      	cmp	r0, r3
 80067fe:	bfb8      	it	lt
 8006800:	4618      	movlt	r0, r3
 8006802:	e730      	b.n	8006666 <_printf_float+0xc6>
 8006804:	2301      	movs	r3, #1
 8006806:	464a      	mov	r2, r9
 8006808:	4631      	mov	r1, r6
 800680a:	4628      	mov	r0, r5
 800680c:	47b8      	blx	r7
 800680e:	3001      	adds	r0, #1
 8006810:	f43f af27 	beq.w	8006662 <_printf_float+0xc2>
 8006814:	f108 0801 	add.w	r8, r8, #1
 8006818:	e7e6      	b.n	80067e8 <_printf_float+0x248>
 800681a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800681c:	2b00      	cmp	r3, #0
 800681e:	dc39      	bgt.n	8006894 <_printf_float+0x2f4>
 8006820:	4a1b      	ldr	r2, [pc, #108]	; (8006890 <_printf_float+0x2f0>)
 8006822:	2301      	movs	r3, #1
 8006824:	4631      	mov	r1, r6
 8006826:	4628      	mov	r0, r5
 8006828:	47b8      	blx	r7
 800682a:	3001      	adds	r0, #1
 800682c:	f43f af19 	beq.w	8006662 <_printf_float+0xc2>
 8006830:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006834:	4313      	orrs	r3, r2
 8006836:	d102      	bne.n	800683e <_printf_float+0x29e>
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	07d9      	lsls	r1, r3, #31
 800683c:	d5d8      	bpl.n	80067f0 <_printf_float+0x250>
 800683e:	ee18 3a10 	vmov	r3, s16
 8006842:	4652      	mov	r2, sl
 8006844:	4631      	mov	r1, r6
 8006846:	4628      	mov	r0, r5
 8006848:	47b8      	blx	r7
 800684a:	3001      	adds	r0, #1
 800684c:	f43f af09 	beq.w	8006662 <_printf_float+0xc2>
 8006850:	f04f 0900 	mov.w	r9, #0
 8006854:	f104 0a1a 	add.w	sl, r4, #26
 8006858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800685a:	425b      	negs	r3, r3
 800685c:	454b      	cmp	r3, r9
 800685e:	dc01      	bgt.n	8006864 <_printf_float+0x2c4>
 8006860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006862:	e792      	b.n	800678a <_printf_float+0x1ea>
 8006864:	2301      	movs	r3, #1
 8006866:	4652      	mov	r2, sl
 8006868:	4631      	mov	r1, r6
 800686a:	4628      	mov	r0, r5
 800686c:	47b8      	blx	r7
 800686e:	3001      	adds	r0, #1
 8006870:	f43f aef7 	beq.w	8006662 <_printf_float+0xc2>
 8006874:	f109 0901 	add.w	r9, r9, #1
 8006878:	e7ee      	b.n	8006858 <_printf_float+0x2b8>
 800687a:	bf00      	nop
 800687c:	7fefffff 	.word	0x7fefffff
 8006880:	0800ac68 	.word	0x0800ac68
 8006884:	0800ac6c 	.word	0x0800ac6c
 8006888:	0800ac74 	.word	0x0800ac74
 800688c:	0800ac70 	.word	0x0800ac70
 8006890:	0800ac78 	.word	0x0800ac78
 8006894:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006896:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006898:	429a      	cmp	r2, r3
 800689a:	bfa8      	it	ge
 800689c:	461a      	movge	r2, r3
 800689e:	2a00      	cmp	r2, #0
 80068a0:	4691      	mov	r9, r2
 80068a2:	dc37      	bgt.n	8006914 <_printf_float+0x374>
 80068a4:	f04f 0b00 	mov.w	fp, #0
 80068a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068ac:	f104 021a 	add.w	r2, r4, #26
 80068b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068b2:	9305      	str	r3, [sp, #20]
 80068b4:	eba3 0309 	sub.w	r3, r3, r9
 80068b8:	455b      	cmp	r3, fp
 80068ba:	dc33      	bgt.n	8006924 <_printf_float+0x384>
 80068bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068c0:	429a      	cmp	r2, r3
 80068c2:	db3b      	blt.n	800693c <_printf_float+0x39c>
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	07da      	lsls	r2, r3, #31
 80068c8:	d438      	bmi.n	800693c <_printf_float+0x39c>
 80068ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068cc:	9b05      	ldr	r3, [sp, #20]
 80068ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	eba2 0901 	sub.w	r9, r2, r1
 80068d6:	4599      	cmp	r9, r3
 80068d8:	bfa8      	it	ge
 80068da:	4699      	movge	r9, r3
 80068dc:	f1b9 0f00 	cmp.w	r9, #0
 80068e0:	dc35      	bgt.n	800694e <_printf_float+0x3ae>
 80068e2:	f04f 0800 	mov.w	r8, #0
 80068e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068ea:	f104 0a1a 	add.w	sl, r4, #26
 80068ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068f2:	1a9b      	subs	r3, r3, r2
 80068f4:	eba3 0309 	sub.w	r3, r3, r9
 80068f8:	4543      	cmp	r3, r8
 80068fa:	f77f af79 	ble.w	80067f0 <_printf_float+0x250>
 80068fe:	2301      	movs	r3, #1
 8006900:	4652      	mov	r2, sl
 8006902:	4631      	mov	r1, r6
 8006904:	4628      	mov	r0, r5
 8006906:	47b8      	blx	r7
 8006908:	3001      	adds	r0, #1
 800690a:	f43f aeaa 	beq.w	8006662 <_printf_float+0xc2>
 800690e:	f108 0801 	add.w	r8, r8, #1
 8006912:	e7ec      	b.n	80068ee <_printf_float+0x34e>
 8006914:	4613      	mov	r3, r2
 8006916:	4631      	mov	r1, r6
 8006918:	4642      	mov	r2, r8
 800691a:	4628      	mov	r0, r5
 800691c:	47b8      	blx	r7
 800691e:	3001      	adds	r0, #1
 8006920:	d1c0      	bne.n	80068a4 <_printf_float+0x304>
 8006922:	e69e      	b.n	8006662 <_printf_float+0xc2>
 8006924:	2301      	movs	r3, #1
 8006926:	4631      	mov	r1, r6
 8006928:	4628      	mov	r0, r5
 800692a:	9205      	str	r2, [sp, #20]
 800692c:	47b8      	blx	r7
 800692e:	3001      	adds	r0, #1
 8006930:	f43f ae97 	beq.w	8006662 <_printf_float+0xc2>
 8006934:	9a05      	ldr	r2, [sp, #20]
 8006936:	f10b 0b01 	add.w	fp, fp, #1
 800693a:	e7b9      	b.n	80068b0 <_printf_float+0x310>
 800693c:	ee18 3a10 	vmov	r3, s16
 8006940:	4652      	mov	r2, sl
 8006942:	4631      	mov	r1, r6
 8006944:	4628      	mov	r0, r5
 8006946:	47b8      	blx	r7
 8006948:	3001      	adds	r0, #1
 800694a:	d1be      	bne.n	80068ca <_printf_float+0x32a>
 800694c:	e689      	b.n	8006662 <_printf_float+0xc2>
 800694e:	9a05      	ldr	r2, [sp, #20]
 8006950:	464b      	mov	r3, r9
 8006952:	4442      	add	r2, r8
 8006954:	4631      	mov	r1, r6
 8006956:	4628      	mov	r0, r5
 8006958:	47b8      	blx	r7
 800695a:	3001      	adds	r0, #1
 800695c:	d1c1      	bne.n	80068e2 <_printf_float+0x342>
 800695e:	e680      	b.n	8006662 <_printf_float+0xc2>
 8006960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006962:	2a01      	cmp	r2, #1
 8006964:	dc01      	bgt.n	800696a <_printf_float+0x3ca>
 8006966:	07db      	lsls	r3, r3, #31
 8006968:	d538      	bpl.n	80069dc <_printf_float+0x43c>
 800696a:	2301      	movs	r3, #1
 800696c:	4642      	mov	r2, r8
 800696e:	4631      	mov	r1, r6
 8006970:	4628      	mov	r0, r5
 8006972:	47b8      	blx	r7
 8006974:	3001      	adds	r0, #1
 8006976:	f43f ae74 	beq.w	8006662 <_printf_float+0xc2>
 800697a:	ee18 3a10 	vmov	r3, s16
 800697e:	4652      	mov	r2, sl
 8006980:	4631      	mov	r1, r6
 8006982:	4628      	mov	r0, r5
 8006984:	47b8      	blx	r7
 8006986:	3001      	adds	r0, #1
 8006988:	f43f ae6b 	beq.w	8006662 <_printf_float+0xc2>
 800698c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006990:	2200      	movs	r2, #0
 8006992:	2300      	movs	r3, #0
 8006994:	f7fa f8a0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006998:	b9d8      	cbnz	r0, 80069d2 <_printf_float+0x432>
 800699a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800699c:	f108 0201 	add.w	r2, r8, #1
 80069a0:	3b01      	subs	r3, #1
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	47b8      	blx	r7
 80069a8:	3001      	adds	r0, #1
 80069aa:	d10e      	bne.n	80069ca <_printf_float+0x42a>
 80069ac:	e659      	b.n	8006662 <_printf_float+0xc2>
 80069ae:	2301      	movs	r3, #1
 80069b0:	4652      	mov	r2, sl
 80069b2:	4631      	mov	r1, r6
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b8      	blx	r7
 80069b8:	3001      	adds	r0, #1
 80069ba:	f43f ae52 	beq.w	8006662 <_printf_float+0xc2>
 80069be:	f108 0801 	add.w	r8, r8, #1
 80069c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c4:	3b01      	subs	r3, #1
 80069c6:	4543      	cmp	r3, r8
 80069c8:	dcf1      	bgt.n	80069ae <_printf_float+0x40e>
 80069ca:	464b      	mov	r3, r9
 80069cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069d0:	e6dc      	b.n	800678c <_printf_float+0x1ec>
 80069d2:	f04f 0800 	mov.w	r8, #0
 80069d6:	f104 0a1a 	add.w	sl, r4, #26
 80069da:	e7f2      	b.n	80069c2 <_printf_float+0x422>
 80069dc:	2301      	movs	r3, #1
 80069de:	4642      	mov	r2, r8
 80069e0:	e7df      	b.n	80069a2 <_printf_float+0x402>
 80069e2:	2301      	movs	r3, #1
 80069e4:	464a      	mov	r2, r9
 80069e6:	4631      	mov	r1, r6
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b8      	blx	r7
 80069ec:	3001      	adds	r0, #1
 80069ee:	f43f ae38 	beq.w	8006662 <_printf_float+0xc2>
 80069f2:	f108 0801 	add.w	r8, r8, #1
 80069f6:	68e3      	ldr	r3, [r4, #12]
 80069f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069fa:	1a5b      	subs	r3, r3, r1
 80069fc:	4543      	cmp	r3, r8
 80069fe:	dcf0      	bgt.n	80069e2 <_printf_float+0x442>
 8006a00:	e6fa      	b.n	80067f8 <_printf_float+0x258>
 8006a02:	f04f 0800 	mov.w	r8, #0
 8006a06:	f104 0919 	add.w	r9, r4, #25
 8006a0a:	e7f4      	b.n	80069f6 <_printf_float+0x456>

08006a0c <_printf_common>:
 8006a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a10:	4616      	mov	r6, r2
 8006a12:	4699      	mov	r9, r3
 8006a14:	688a      	ldr	r2, [r1, #8]
 8006a16:	690b      	ldr	r3, [r1, #16]
 8006a18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	bfb8      	it	lt
 8006a20:	4613      	movlt	r3, r2
 8006a22:	6033      	str	r3, [r6, #0]
 8006a24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a28:	4607      	mov	r7, r0
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	b10a      	cbz	r2, 8006a32 <_printf_common+0x26>
 8006a2e:	3301      	adds	r3, #1
 8006a30:	6033      	str	r3, [r6, #0]
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	0699      	lsls	r1, r3, #26
 8006a36:	bf42      	ittt	mi
 8006a38:	6833      	ldrmi	r3, [r6, #0]
 8006a3a:	3302      	addmi	r3, #2
 8006a3c:	6033      	strmi	r3, [r6, #0]
 8006a3e:	6825      	ldr	r5, [r4, #0]
 8006a40:	f015 0506 	ands.w	r5, r5, #6
 8006a44:	d106      	bne.n	8006a54 <_printf_common+0x48>
 8006a46:	f104 0a19 	add.w	sl, r4, #25
 8006a4a:	68e3      	ldr	r3, [r4, #12]
 8006a4c:	6832      	ldr	r2, [r6, #0]
 8006a4e:	1a9b      	subs	r3, r3, r2
 8006a50:	42ab      	cmp	r3, r5
 8006a52:	dc26      	bgt.n	8006aa2 <_printf_common+0x96>
 8006a54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a58:	1e13      	subs	r3, r2, #0
 8006a5a:	6822      	ldr	r2, [r4, #0]
 8006a5c:	bf18      	it	ne
 8006a5e:	2301      	movne	r3, #1
 8006a60:	0692      	lsls	r2, r2, #26
 8006a62:	d42b      	bmi.n	8006abc <_printf_common+0xb0>
 8006a64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a68:	4649      	mov	r1, r9
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	47c0      	blx	r8
 8006a6e:	3001      	adds	r0, #1
 8006a70:	d01e      	beq.n	8006ab0 <_printf_common+0xa4>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	68e5      	ldr	r5, [r4, #12]
 8006a76:	6832      	ldr	r2, [r6, #0]
 8006a78:	f003 0306 	and.w	r3, r3, #6
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	bf08      	it	eq
 8006a80:	1aad      	subeq	r5, r5, r2
 8006a82:	68a3      	ldr	r3, [r4, #8]
 8006a84:	6922      	ldr	r2, [r4, #16]
 8006a86:	bf0c      	ite	eq
 8006a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a8c:	2500      	movne	r5, #0
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	bfc4      	itt	gt
 8006a92:	1a9b      	subgt	r3, r3, r2
 8006a94:	18ed      	addgt	r5, r5, r3
 8006a96:	2600      	movs	r6, #0
 8006a98:	341a      	adds	r4, #26
 8006a9a:	42b5      	cmp	r5, r6
 8006a9c:	d11a      	bne.n	8006ad4 <_printf_common+0xc8>
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	e008      	b.n	8006ab4 <_printf_common+0xa8>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	4652      	mov	r2, sl
 8006aa6:	4649      	mov	r1, r9
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	47c0      	blx	r8
 8006aac:	3001      	adds	r0, #1
 8006aae:	d103      	bne.n	8006ab8 <_printf_common+0xac>
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab8:	3501      	adds	r5, #1
 8006aba:	e7c6      	b.n	8006a4a <_printf_common+0x3e>
 8006abc:	18e1      	adds	r1, r4, r3
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	2030      	movs	r0, #48	; 0x30
 8006ac2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ac6:	4422      	add	r2, r4
 8006ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006acc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ad0:	3302      	adds	r3, #2
 8006ad2:	e7c7      	b.n	8006a64 <_printf_common+0x58>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	4622      	mov	r2, r4
 8006ad8:	4649      	mov	r1, r9
 8006ada:	4638      	mov	r0, r7
 8006adc:	47c0      	blx	r8
 8006ade:	3001      	adds	r0, #1
 8006ae0:	d0e6      	beq.n	8006ab0 <_printf_common+0xa4>
 8006ae2:	3601      	adds	r6, #1
 8006ae4:	e7d9      	b.n	8006a9a <_printf_common+0x8e>
	...

08006ae8 <_printf_i>:
 8006ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aec:	460c      	mov	r4, r1
 8006aee:	4691      	mov	r9, r2
 8006af0:	7e27      	ldrb	r7, [r4, #24]
 8006af2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006af4:	2f78      	cmp	r7, #120	; 0x78
 8006af6:	4680      	mov	r8, r0
 8006af8:	469a      	mov	sl, r3
 8006afa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006afe:	d807      	bhi.n	8006b10 <_printf_i+0x28>
 8006b00:	2f62      	cmp	r7, #98	; 0x62
 8006b02:	d80a      	bhi.n	8006b1a <_printf_i+0x32>
 8006b04:	2f00      	cmp	r7, #0
 8006b06:	f000 80d8 	beq.w	8006cba <_printf_i+0x1d2>
 8006b0a:	2f58      	cmp	r7, #88	; 0x58
 8006b0c:	f000 80a3 	beq.w	8006c56 <_printf_i+0x16e>
 8006b10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b18:	e03a      	b.n	8006b90 <_printf_i+0xa8>
 8006b1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b1e:	2b15      	cmp	r3, #21
 8006b20:	d8f6      	bhi.n	8006b10 <_printf_i+0x28>
 8006b22:	a001      	add	r0, pc, #4	; (adr r0, 8006b28 <_printf_i+0x40>)
 8006b24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b28:	08006b81 	.word	0x08006b81
 8006b2c:	08006b95 	.word	0x08006b95
 8006b30:	08006b11 	.word	0x08006b11
 8006b34:	08006b11 	.word	0x08006b11
 8006b38:	08006b11 	.word	0x08006b11
 8006b3c:	08006b11 	.word	0x08006b11
 8006b40:	08006b95 	.word	0x08006b95
 8006b44:	08006b11 	.word	0x08006b11
 8006b48:	08006b11 	.word	0x08006b11
 8006b4c:	08006b11 	.word	0x08006b11
 8006b50:	08006b11 	.word	0x08006b11
 8006b54:	08006ca1 	.word	0x08006ca1
 8006b58:	08006bc5 	.word	0x08006bc5
 8006b5c:	08006c83 	.word	0x08006c83
 8006b60:	08006b11 	.word	0x08006b11
 8006b64:	08006b11 	.word	0x08006b11
 8006b68:	08006cc3 	.word	0x08006cc3
 8006b6c:	08006b11 	.word	0x08006b11
 8006b70:	08006bc5 	.word	0x08006bc5
 8006b74:	08006b11 	.word	0x08006b11
 8006b78:	08006b11 	.word	0x08006b11
 8006b7c:	08006c8b 	.word	0x08006c8b
 8006b80:	680b      	ldr	r3, [r1, #0]
 8006b82:	1d1a      	adds	r2, r3, #4
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	600a      	str	r2, [r1, #0]
 8006b88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b90:	2301      	movs	r3, #1
 8006b92:	e0a3      	b.n	8006cdc <_printf_i+0x1f4>
 8006b94:	6825      	ldr	r5, [r4, #0]
 8006b96:	6808      	ldr	r0, [r1, #0]
 8006b98:	062e      	lsls	r6, r5, #24
 8006b9a:	f100 0304 	add.w	r3, r0, #4
 8006b9e:	d50a      	bpl.n	8006bb6 <_printf_i+0xce>
 8006ba0:	6805      	ldr	r5, [r0, #0]
 8006ba2:	600b      	str	r3, [r1, #0]
 8006ba4:	2d00      	cmp	r5, #0
 8006ba6:	da03      	bge.n	8006bb0 <_printf_i+0xc8>
 8006ba8:	232d      	movs	r3, #45	; 0x2d
 8006baa:	426d      	negs	r5, r5
 8006bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bb0:	485e      	ldr	r0, [pc, #376]	; (8006d2c <_printf_i+0x244>)
 8006bb2:	230a      	movs	r3, #10
 8006bb4:	e019      	b.n	8006bea <_printf_i+0x102>
 8006bb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006bba:	6805      	ldr	r5, [r0, #0]
 8006bbc:	600b      	str	r3, [r1, #0]
 8006bbe:	bf18      	it	ne
 8006bc0:	b22d      	sxthne	r5, r5
 8006bc2:	e7ef      	b.n	8006ba4 <_printf_i+0xbc>
 8006bc4:	680b      	ldr	r3, [r1, #0]
 8006bc6:	6825      	ldr	r5, [r4, #0]
 8006bc8:	1d18      	adds	r0, r3, #4
 8006bca:	6008      	str	r0, [r1, #0]
 8006bcc:	0628      	lsls	r0, r5, #24
 8006bce:	d501      	bpl.n	8006bd4 <_printf_i+0xec>
 8006bd0:	681d      	ldr	r5, [r3, #0]
 8006bd2:	e002      	b.n	8006bda <_printf_i+0xf2>
 8006bd4:	0669      	lsls	r1, r5, #25
 8006bd6:	d5fb      	bpl.n	8006bd0 <_printf_i+0xe8>
 8006bd8:	881d      	ldrh	r5, [r3, #0]
 8006bda:	4854      	ldr	r0, [pc, #336]	; (8006d2c <_printf_i+0x244>)
 8006bdc:	2f6f      	cmp	r7, #111	; 0x6f
 8006bde:	bf0c      	ite	eq
 8006be0:	2308      	moveq	r3, #8
 8006be2:	230a      	movne	r3, #10
 8006be4:	2100      	movs	r1, #0
 8006be6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bea:	6866      	ldr	r6, [r4, #4]
 8006bec:	60a6      	str	r6, [r4, #8]
 8006bee:	2e00      	cmp	r6, #0
 8006bf0:	bfa2      	ittt	ge
 8006bf2:	6821      	ldrge	r1, [r4, #0]
 8006bf4:	f021 0104 	bicge.w	r1, r1, #4
 8006bf8:	6021      	strge	r1, [r4, #0]
 8006bfa:	b90d      	cbnz	r5, 8006c00 <_printf_i+0x118>
 8006bfc:	2e00      	cmp	r6, #0
 8006bfe:	d04d      	beq.n	8006c9c <_printf_i+0x1b4>
 8006c00:	4616      	mov	r6, r2
 8006c02:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c06:	fb03 5711 	mls	r7, r3, r1, r5
 8006c0a:	5dc7      	ldrb	r7, [r0, r7]
 8006c0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c10:	462f      	mov	r7, r5
 8006c12:	42bb      	cmp	r3, r7
 8006c14:	460d      	mov	r5, r1
 8006c16:	d9f4      	bls.n	8006c02 <_printf_i+0x11a>
 8006c18:	2b08      	cmp	r3, #8
 8006c1a:	d10b      	bne.n	8006c34 <_printf_i+0x14c>
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	07df      	lsls	r7, r3, #31
 8006c20:	d508      	bpl.n	8006c34 <_printf_i+0x14c>
 8006c22:	6923      	ldr	r3, [r4, #16]
 8006c24:	6861      	ldr	r1, [r4, #4]
 8006c26:	4299      	cmp	r1, r3
 8006c28:	bfde      	ittt	le
 8006c2a:	2330      	movle	r3, #48	; 0x30
 8006c2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c30:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006c34:	1b92      	subs	r2, r2, r6
 8006c36:	6122      	str	r2, [r4, #16]
 8006c38:	f8cd a000 	str.w	sl, [sp]
 8006c3c:	464b      	mov	r3, r9
 8006c3e:	aa03      	add	r2, sp, #12
 8006c40:	4621      	mov	r1, r4
 8006c42:	4640      	mov	r0, r8
 8006c44:	f7ff fee2 	bl	8006a0c <_printf_common>
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d14c      	bne.n	8006ce6 <_printf_i+0x1fe>
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c50:	b004      	add	sp, #16
 8006c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c56:	4835      	ldr	r0, [pc, #212]	; (8006d2c <_printf_i+0x244>)
 8006c58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	680e      	ldr	r6, [r1, #0]
 8006c60:	061f      	lsls	r7, r3, #24
 8006c62:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c66:	600e      	str	r6, [r1, #0]
 8006c68:	d514      	bpl.n	8006c94 <_printf_i+0x1ac>
 8006c6a:	07d9      	lsls	r1, r3, #31
 8006c6c:	bf44      	itt	mi
 8006c6e:	f043 0320 	orrmi.w	r3, r3, #32
 8006c72:	6023      	strmi	r3, [r4, #0]
 8006c74:	b91d      	cbnz	r5, 8006c7e <_printf_i+0x196>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	f023 0320 	bic.w	r3, r3, #32
 8006c7c:	6023      	str	r3, [r4, #0]
 8006c7e:	2310      	movs	r3, #16
 8006c80:	e7b0      	b.n	8006be4 <_printf_i+0xfc>
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	f043 0320 	orr.w	r3, r3, #32
 8006c88:	6023      	str	r3, [r4, #0]
 8006c8a:	2378      	movs	r3, #120	; 0x78
 8006c8c:	4828      	ldr	r0, [pc, #160]	; (8006d30 <_printf_i+0x248>)
 8006c8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c92:	e7e3      	b.n	8006c5c <_printf_i+0x174>
 8006c94:	065e      	lsls	r6, r3, #25
 8006c96:	bf48      	it	mi
 8006c98:	b2ad      	uxthmi	r5, r5
 8006c9a:	e7e6      	b.n	8006c6a <_printf_i+0x182>
 8006c9c:	4616      	mov	r6, r2
 8006c9e:	e7bb      	b.n	8006c18 <_printf_i+0x130>
 8006ca0:	680b      	ldr	r3, [r1, #0]
 8006ca2:	6826      	ldr	r6, [r4, #0]
 8006ca4:	6960      	ldr	r0, [r4, #20]
 8006ca6:	1d1d      	adds	r5, r3, #4
 8006ca8:	600d      	str	r5, [r1, #0]
 8006caa:	0635      	lsls	r5, r6, #24
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	d501      	bpl.n	8006cb4 <_printf_i+0x1cc>
 8006cb0:	6018      	str	r0, [r3, #0]
 8006cb2:	e002      	b.n	8006cba <_printf_i+0x1d2>
 8006cb4:	0671      	lsls	r1, r6, #25
 8006cb6:	d5fb      	bpl.n	8006cb0 <_printf_i+0x1c8>
 8006cb8:	8018      	strh	r0, [r3, #0]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	6123      	str	r3, [r4, #16]
 8006cbe:	4616      	mov	r6, r2
 8006cc0:	e7ba      	b.n	8006c38 <_printf_i+0x150>
 8006cc2:	680b      	ldr	r3, [r1, #0]
 8006cc4:	1d1a      	adds	r2, r3, #4
 8006cc6:	600a      	str	r2, [r1, #0]
 8006cc8:	681e      	ldr	r6, [r3, #0]
 8006cca:	6862      	ldr	r2, [r4, #4]
 8006ccc:	2100      	movs	r1, #0
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f7f9 fa8e 	bl	80001f0 <memchr>
 8006cd4:	b108      	cbz	r0, 8006cda <_printf_i+0x1f2>
 8006cd6:	1b80      	subs	r0, r0, r6
 8006cd8:	6060      	str	r0, [r4, #4]
 8006cda:	6863      	ldr	r3, [r4, #4]
 8006cdc:	6123      	str	r3, [r4, #16]
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce4:	e7a8      	b.n	8006c38 <_printf_i+0x150>
 8006ce6:	6923      	ldr	r3, [r4, #16]
 8006ce8:	4632      	mov	r2, r6
 8006cea:	4649      	mov	r1, r9
 8006cec:	4640      	mov	r0, r8
 8006cee:	47d0      	blx	sl
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	d0ab      	beq.n	8006c4c <_printf_i+0x164>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	079b      	lsls	r3, r3, #30
 8006cf8:	d413      	bmi.n	8006d22 <_printf_i+0x23a>
 8006cfa:	68e0      	ldr	r0, [r4, #12]
 8006cfc:	9b03      	ldr	r3, [sp, #12]
 8006cfe:	4298      	cmp	r0, r3
 8006d00:	bfb8      	it	lt
 8006d02:	4618      	movlt	r0, r3
 8006d04:	e7a4      	b.n	8006c50 <_printf_i+0x168>
 8006d06:	2301      	movs	r3, #1
 8006d08:	4632      	mov	r2, r6
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	4640      	mov	r0, r8
 8006d0e:	47d0      	blx	sl
 8006d10:	3001      	adds	r0, #1
 8006d12:	d09b      	beq.n	8006c4c <_printf_i+0x164>
 8006d14:	3501      	adds	r5, #1
 8006d16:	68e3      	ldr	r3, [r4, #12]
 8006d18:	9903      	ldr	r1, [sp, #12]
 8006d1a:	1a5b      	subs	r3, r3, r1
 8006d1c:	42ab      	cmp	r3, r5
 8006d1e:	dcf2      	bgt.n	8006d06 <_printf_i+0x21e>
 8006d20:	e7eb      	b.n	8006cfa <_printf_i+0x212>
 8006d22:	2500      	movs	r5, #0
 8006d24:	f104 0619 	add.w	r6, r4, #25
 8006d28:	e7f5      	b.n	8006d16 <_printf_i+0x22e>
 8006d2a:	bf00      	nop
 8006d2c:	0800ac7a 	.word	0x0800ac7a
 8006d30:	0800ac8b 	.word	0x0800ac8b

08006d34 <siprintf>:
 8006d34:	b40e      	push	{r1, r2, r3}
 8006d36:	b500      	push	{lr}
 8006d38:	b09c      	sub	sp, #112	; 0x70
 8006d3a:	ab1d      	add	r3, sp, #116	; 0x74
 8006d3c:	9002      	str	r0, [sp, #8]
 8006d3e:	9006      	str	r0, [sp, #24]
 8006d40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d44:	4809      	ldr	r0, [pc, #36]	; (8006d6c <siprintf+0x38>)
 8006d46:	9107      	str	r1, [sp, #28]
 8006d48:	9104      	str	r1, [sp, #16]
 8006d4a:	4909      	ldr	r1, [pc, #36]	; (8006d70 <siprintf+0x3c>)
 8006d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d50:	9105      	str	r1, [sp, #20]
 8006d52:	6800      	ldr	r0, [r0, #0]
 8006d54:	9301      	str	r3, [sp, #4]
 8006d56:	a902      	add	r1, sp, #8
 8006d58:	f001 fb34 	bl	80083c4 <_svfiprintf_r>
 8006d5c:	9b02      	ldr	r3, [sp, #8]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	701a      	strb	r2, [r3, #0]
 8006d62:	b01c      	add	sp, #112	; 0x70
 8006d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d68:	b003      	add	sp, #12
 8006d6a:	4770      	bx	lr
 8006d6c:	20002014 	.word	0x20002014
 8006d70:	ffff0208 	.word	0xffff0208

08006d74 <quorem>:
 8006d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d78:	6903      	ldr	r3, [r0, #16]
 8006d7a:	690c      	ldr	r4, [r1, #16]
 8006d7c:	42a3      	cmp	r3, r4
 8006d7e:	4607      	mov	r7, r0
 8006d80:	f2c0 8081 	blt.w	8006e86 <quorem+0x112>
 8006d84:	3c01      	subs	r4, #1
 8006d86:	f101 0814 	add.w	r8, r1, #20
 8006d8a:	f100 0514 	add.w	r5, r0, #20
 8006d8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d92:	9301      	str	r3, [sp, #4]
 8006d94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006da4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006da8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006dac:	d331      	bcc.n	8006e12 <quorem+0x9e>
 8006dae:	f04f 0e00 	mov.w	lr, #0
 8006db2:	4640      	mov	r0, r8
 8006db4:	46ac      	mov	ip, r5
 8006db6:	46f2      	mov	sl, lr
 8006db8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006dbc:	b293      	uxth	r3, r2
 8006dbe:	fb06 e303 	mla	r3, r6, r3, lr
 8006dc2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	ebaa 0303 	sub.w	r3, sl, r3
 8006dcc:	0c12      	lsrs	r2, r2, #16
 8006dce:	f8dc a000 	ldr.w	sl, [ip]
 8006dd2:	fb06 e202 	mla	r2, r6, r2, lr
 8006dd6:	fa13 f38a 	uxtah	r3, r3, sl
 8006dda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006dde:	fa1f fa82 	uxth.w	sl, r2
 8006de2:	f8dc 2000 	ldr.w	r2, [ip]
 8006de6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006dea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006df4:	4581      	cmp	r9, r0
 8006df6:	f84c 3b04 	str.w	r3, [ip], #4
 8006dfa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006dfe:	d2db      	bcs.n	8006db8 <quorem+0x44>
 8006e00:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e04:	b92b      	cbnz	r3, 8006e12 <quorem+0x9e>
 8006e06:	9b01      	ldr	r3, [sp, #4]
 8006e08:	3b04      	subs	r3, #4
 8006e0a:	429d      	cmp	r5, r3
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	d32e      	bcc.n	8006e6e <quorem+0xfa>
 8006e10:	613c      	str	r4, [r7, #16]
 8006e12:	4638      	mov	r0, r7
 8006e14:	f001 f8c0 	bl	8007f98 <__mcmp>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	db24      	blt.n	8006e66 <quorem+0xf2>
 8006e1c:	3601      	adds	r6, #1
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f04f 0c00 	mov.w	ip, #0
 8006e24:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e28:	f8d0 e000 	ldr.w	lr, [r0]
 8006e2c:	b293      	uxth	r3, r2
 8006e2e:	ebac 0303 	sub.w	r3, ip, r3
 8006e32:	0c12      	lsrs	r2, r2, #16
 8006e34:	fa13 f38e 	uxtah	r3, r3, lr
 8006e38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e46:	45c1      	cmp	r9, r8
 8006e48:	f840 3b04 	str.w	r3, [r0], #4
 8006e4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e50:	d2e8      	bcs.n	8006e24 <quorem+0xb0>
 8006e52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e5a:	b922      	cbnz	r2, 8006e66 <quorem+0xf2>
 8006e5c:	3b04      	subs	r3, #4
 8006e5e:	429d      	cmp	r5, r3
 8006e60:	461a      	mov	r2, r3
 8006e62:	d30a      	bcc.n	8006e7a <quorem+0x106>
 8006e64:	613c      	str	r4, [r7, #16]
 8006e66:	4630      	mov	r0, r6
 8006e68:	b003      	add	sp, #12
 8006e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6e:	6812      	ldr	r2, [r2, #0]
 8006e70:	3b04      	subs	r3, #4
 8006e72:	2a00      	cmp	r2, #0
 8006e74:	d1cc      	bne.n	8006e10 <quorem+0x9c>
 8006e76:	3c01      	subs	r4, #1
 8006e78:	e7c7      	b.n	8006e0a <quorem+0x96>
 8006e7a:	6812      	ldr	r2, [r2, #0]
 8006e7c:	3b04      	subs	r3, #4
 8006e7e:	2a00      	cmp	r2, #0
 8006e80:	d1f0      	bne.n	8006e64 <quorem+0xf0>
 8006e82:	3c01      	subs	r4, #1
 8006e84:	e7eb      	b.n	8006e5e <quorem+0xea>
 8006e86:	2000      	movs	r0, #0
 8006e88:	e7ee      	b.n	8006e68 <quorem+0xf4>
 8006e8a:	0000      	movs	r0, r0
 8006e8c:	0000      	movs	r0, r0
	...

08006e90 <_dtoa_r>:
 8006e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e94:	ed2d 8b02 	vpush	{d8}
 8006e98:	ec57 6b10 	vmov	r6, r7, d0
 8006e9c:	b095      	sub	sp, #84	; 0x54
 8006e9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ea0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006ea4:	9105      	str	r1, [sp, #20]
 8006ea6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006eaa:	4604      	mov	r4, r0
 8006eac:	9209      	str	r2, [sp, #36]	; 0x24
 8006eae:	930f      	str	r3, [sp, #60]	; 0x3c
 8006eb0:	b975      	cbnz	r5, 8006ed0 <_dtoa_r+0x40>
 8006eb2:	2010      	movs	r0, #16
 8006eb4:	f000 fddc 	bl	8007a70 <malloc>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	6260      	str	r0, [r4, #36]	; 0x24
 8006ebc:	b920      	cbnz	r0, 8006ec8 <_dtoa_r+0x38>
 8006ebe:	4bb2      	ldr	r3, [pc, #712]	; (8007188 <_dtoa_r+0x2f8>)
 8006ec0:	21ea      	movs	r1, #234	; 0xea
 8006ec2:	48b2      	ldr	r0, [pc, #712]	; (800718c <_dtoa_r+0x2fc>)
 8006ec4:	f001 fb8e 	bl	80085e4 <__assert_func>
 8006ec8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ecc:	6005      	str	r5, [r0, #0]
 8006ece:	60c5      	str	r5, [r0, #12]
 8006ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ed2:	6819      	ldr	r1, [r3, #0]
 8006ed4:	b151      	cbz	r1, 8006eec <_dtoa_r+0x5c>
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	604a      	str	r2, [r1, #4]
 8006eda:	2301      	movs	r3, #1
 8006edc:	4093      	lsls	r3, r2
 8006ede:	608b      	str	r3, [r1, #8]
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f000 fe1b 	bl	8007b1c <_Bfree>
 8006ee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	1e3b      	subs	r3, r7, #0
 8006eee:	bfb9      	ittee	lt
 8006ef0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ef4:	9303      	strlt	r3, [sp, #12]
 8006ef6:	2300      	movge	r3, #0
 8006ef8:	f8c8 3000 	strge.w	r3, [r8]
 8006efc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006f00:	4ba3      	ldr	r3, [pc, #652]	; (8007190 <_dtoa_r+0x300>)
 8006f02:	bfbc      	itt	lt
 8006f04:	2201      	movlt	r2, #1
 8006f06:	f8c8 2000 	strlt.w	r2, [r8]
 8006f0a:	ea33 0309 	bics.w	r3, r3, r9
 8006f0e:	d11b      	bne.n	8006f48 <_dtoa_r+0xb8>
 8006f10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f12:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f1c:	4333      	orrs	r3, r6
 8006f1e:	f000 857a 	beq.w	8007a16 <_dtoa_r+0xb86>
 8006f22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f24:	b963      	cbnz	r3, 8006f40 <_dtoa_r+0xb0>
 8006f26:	4b9b      	ldr	r3, [pc, #620]	; (8007194 <_dtoa_r+0x304>)
 8006f28:	e024      	b.n	8006f74 <_dtoa_r+0xe4>
 8006f2a:	4b9b      	ldr	r3, [pc, #620]	; (8007198 <_dtoa_r+0x308>)
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	9800      	ldr	r0, [sp, #0]
 8006f36:	b015      	add	sp, #84	; 0x54
 8006f38:	ecbd 8b02 	vpop	{d8}
 8006f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f40:	4b94      	ldr	r3, [pc, #592]	; (8007194 <_dtoa_r+0x304>)
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	3303      	adds	r3, #3
 8006f46:	e7f3      	b.n	8006f30 <_dtoa_r+0xa0>
 8006f48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	ec51 0b17 	vmov	r0, r1, d7
 8006f52:	2300      	movs	r3, #0
 8006f54:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006f58:	f7f9 fdbe 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f5c:	4680      	mov	r8, r0
 8006f5e:	b158      	cbz	r0, 8006f78 <_dtoa_r+0xe8>
 8006f60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f62:	2301      	movs	r3, #1
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 8551 	beq.w	8007a10 <_dtoa_r+0xb80>
 8006f6e:	488b      	ldr	r0, [pc, #556]	; (800719c <_dtoa_r+0x30c>)
 8006f70:	6018      	str	r0, [r3, #0]
 8006f72:	1e43      	subs	r3, r0, #1
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	e7dd      	b.n	8006f34 <_dtoa_r+0xa4>
 8006f78:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006f7c:	aa12      	add	r2, sp, #72	; 0x48
 8006f7e:	a913      	add	r1, sp, #76	; 0x4c
 8006f80:	4620      	mov	r0, r4
 8006f82:	f001 f8ad 	bl	80080e0 <__d2b>
 8006f86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f8a:	4683      	mov	fp, r0
 8006f8c:	2d00      	cmp	r5, #0
 8006f8e:	d07c      	beq.n	800708a <_dtoa_r+0x1fa>
 8006f90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f92:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006f96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f9a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006f9e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006fa2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006fa6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006faa:	4b7d      	ldr	r3, [pc, #500]	; (80071a0 <_dtoa_r+0x310>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	4630      	mov	r0, r6
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	f7f9 f971 	bl	8000298 <__aeabi_dsub>
 8006fb6:	a36e      	add	r3, pc, #440	; (adr r3, 8007170 <_dtoa_r+0x2e0>)
 8006fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbc:	f7f9 fb24 	bl	8000608 <__aeabi_dmul>
 8006fc0:	a36d      	add	r3, pc, #436	; (adr r3, 8007178 <_dtoa_r+0x2e8>)
 8006fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc6:	f7f9 f969 	bl	800029c <__adddf3>
 8006fca:	4606      	mov	r6, r0
 8006fcc:	4628      	mov	r0, r5
 8006fce:	460f      	mov	r7, r1
 8006fd0:	f7f9 fab0 	bl	8000534 <__aeabi_i2d>
 8006fd4:	a36a      	add	r3, pc, #424	; (adr r3, 8007180 <_dtoa_r+0x2f0>)
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f7f9 fb15 	bl	8000608 <__aeabi_dmul>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	f7f9 f959 	bl	800029c <__adddf3>
 8006fea:	4606      	mov	r6, r0
 8006fec:	460f      	mov	r7, r1
 8006fee:	f7f9 fdbb 	bl	8000b68 <__aeabi_d2iz>
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	4682      	mov	sl, r0
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	4639      	mov	r1, r7
 8006ffc:	f7f9 fd76 	bl	8000aec <__aeabi_dcmplt>
 8007000:	b148      	cbz	r0, 8007016 <_dtoa_r+0x186>
 8007002:	4650      	mov	r0, sl
 8007004:	f7f9 fa96 	bl	8000534 <__aeabi_i2d>
 8007008:	4632      	mov	r2, r6
 800700a:	463b      	mov	r3, r7
 800700c:	f7f9 fd64 	bl	8000ad8 <__aeabi_dcmpeq>
 8007010:	b908      	cbnz	r0, 8007016 <_dtoa_r+0x186>
 8007012:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007016:	f1ba 0f16 	cmp.w	sl, #22
 800701a:	d854      	bhi.n	80070c6 <_dtoa_r+0x236>
 800701c:	4b61      	ldr	r3, [pc, #388]	; (80071a4 <_dtoa_r+0x314>)
 800701e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007026:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800702a:	f7f9 fd5f 	bl	8000aec <__aeabi_dcmplt>
 800702e:	2800      	cmp	r0, #0
 8007030:	d04b      	beq.n	80070ca <_dtoa_r+0x23a>
 8007032:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007036:	2300      	movs	r3, #0
 8007038:	930e      	str	r3, [sp, #56]	; 0x38
 800703a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800703c:	1b5d      	subs	r5, r3, r5
 800703e:	1e6b      	subs	r3, r5, #1
 8007040:	9304      	str	r3, [sp, #16]
 8007042:	bf43      	ittte	mi
 8007044:	2300      	movmi	r3, #0
 8007046:	f1c5 0801 	rsbmi	r8, r5, #1
 800704a:	9304      	strmi	r3, [sp, #16]
 800704c:	f04f 0800 	movpl.w	r8, #0
 8007050:	f1ba 0f00 	cmp.w	sl, #0
 8007054:	db3b      	blt.n	80070ce <_dtoa_r+0x23e>
 8007056:	9b04      	ldr	r3, [sp, #16]
 8007058:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800705c:	4453      	add	r3, sl
 800705e:	9304      	str	r3, [sp, #16]
 8007060:	2300      	movs	r3, #0
 8007062:	9306      	str	r3, [sp, #24]
 8007064:	9b05      	ldr	r3, [sp, #20]
 8007066:	2b09      	cmp	r3, #9
 8007068:	d869      	bhi.n	800713e <_dtoa_r+0x2ae>
 800706a:	2b05      	cmp	r3, #5
 800706c:	bfc4      	itt	gt
 800706e:	3b04      	subgt	r3, #4
 8007070:	9305      	strgt	r3, [sp, #20]
 8007072:	9b05      	ldr	r3, [sp, #20]
 8007074:	f1a3 0302 	sub.w	r3, r3, #2
 8007078:	bfcc      	ite	gt
 800707a:	2500      	movgt	r5, #0
 800707c:	2501      	movle	r5, #1
 800707e:	2b03      	cmp	r3, #3
 8007080:	d869      	bhi.n	8007156 <_dtoa_r+0x2c6>
 8007082:	e8df f003 	tbb	[pc, r3]
 8007086:	4e2c      	.short	0x4e2c
 8007088:	5a4c      	.short	0x5a4c
 800708a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800708e:	441d      	add	r5, r3
 8007090:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007094:	2b20      	cmp	r3, #32
 8007096:	bfc1      	itttt	gt
 8007098:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800709c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80070a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80070a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80070a8:	bfda      	itte	le
 80070aa:	f1c3 0320 	rsble	r3, r3, #32
 80070ae:	fa06 f003 	lslle.w	r0, r6, r3
 80070b2:	4318      	orrgt	r0, r3
 80070b4:	f7f9 fa2e 	bl	8000514 <__aeabi_ui2d>
 80070b8:	2301      	movs	r3, #1
 80070ba:	4606      	mov	r6, r0
 80070bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80070c0:	3d01      	subs	r5, #1
 80070c2:	9310      	str	r3, [sp, #64]	; 0x40
 80070c4:	e771      	b.n	8006faa <_dtoa_r+0x11a>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e7b6      	b.n	8007038 <_dtoa_r+0x1a8>
 80070ca:	900e      	str	r0, [sp, #56]	; 0x38
 80070cc:	e7b5      	b.n	800703a <_dtoa_r+0x1aa>
 80070ce:	f1ca 0300 	rsb	r3, sl, #0
 80070d2:	9306      	str	r3, [sp, #24]
 80070d4:	2300      	movs	r3, #0
 80070d6:	eba8 080a 	sub.w	r8, r8, sl
 80070da:	930d      	str	r3, [sp, #52]	; 0x34
 80070dc:	e7c2      	b.n	8007064 <_dtoa_r+0x1d4>
 80070de:	2300      	movs	r3, #0
 80070e0:	9308      	str	r3, [sp, #32]
 80070e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	dc39      	bgt.n	800715c <_dtoa_r+0x2cc>
 80070e8:	f04f 0901 	mov.w	r9, #1
 80070ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80070f0:	464b      	mov	r3, r9
 80070f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80070f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80070f8:	2200      	movs	r2, #0
 80070fa:	6042      	str	r2, [r0, #4]
 80070fc:	2204      	movs	r2, #4
 80070fe:	f102 0614 	add.w	r6, r2, #20
 8007102:	429e      	cmp	r6, r3
 8007104:	6841      	ldr	r1, [r0, #4]
 8007106:	d92f      	bls.n	8007168 <_dtoa_r+0x2d8>
 8007108:	4620      	mov	r0, r4
 800710a:	f000 fcc7 	bl	8007a9c <_Balloc>
 800710e:	9000      	str	r0, [sp, #0]
 8007110:	2800      	cmp	r0, #0
 8007112:	d14b      	bne.n	80071ac <_dtoa_r+0x31c>
 8007114:	4b24      	ldr	r3, [pc, #144]	; (80071a8 <_dtoa_r+0x318>)
 8007116:	4602      	mov	r2, r0
 8007118:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800711c:	e6d1      	b.n	8006ec2 <_dtoa_r+0x32>
 800711e:	2301      	movs	r3, #1
 8007120:	e7de      	b.n	80070e0 <_dtoa_r+0x250>
 8007122:	2300      	movs	r3, #0
 8007124:	9308      	str	r3, [sp, #32]
 8007126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007128:	eb0a 0903 	add.w	r9, sl, r3
 800712c:	f109 0301 	add.w	r3, r9, #1
 8007130:	2b01      	cmp	r3, #1
 8007132:	9301      	str	r3, [sp, #4]
 8007134:	bfb8      	it	lt
 8007136:	2301      	movlt	r3, #1
 8007138:	e7dd      	b.n	80070f6 <_dtoa_r+0x266>
 800713a:	2301      	movs	r3, #1
 800713c:	e7f2      	b.n	8007124 <_dtoa_r+0x294>
 800713e:	2501      	movs	r5, #1
 8007140:	2300      	movs	r3, #0
 8007142:	9305      	str	r3, [sp, #20]
 8007144:	9508      	str	r5, [sp, #32]
 8007146:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800714a:	2200      	movs	r2, #0
 800714c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007150:	2312      	movs	r3, #18
 8007152:	9209      	str	r2, [sp, #36]	; 0x24
 8007154:	e7cf      	b.n	80070f6 <_dtoa_r+0x266>
 8007156:	2301      	movs	r3, #1
 8007158:	9308      	str	r3, [sp, #32]
 800715a:	e7f4      	b.n	8007146 <_dtoa_r+0x2b6>
 800715c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007160:	f8cd 9004 	str.w	r9, [sp, #4]
 8007164:	464b      	mov	r3, r9
 8007166:	e7c6      	b.n	80070f6 <_dtoa_r+0x266>
 8007168:	3101      	adds	r1, #1
 800716a:	6041      	str	r1, [r0, #4]
 800716c:	0052      	lsls	r2, r2, #1
 800716e:	e7c6      	b.n	80070fe <_dtoa_r+0x26e>
 8007170:	636f4361 	.word	0x636f4361
 8007174:	3fd287a7 	.word	0x3fd287a7
 8007178:	8b60c8b3 	.word	0x8b60c8b3
 800717c:	3fc68a28 	.word	0x3fc68a28
 8007180:	509f79fb 	.word	0x509f79fb
 8007184:	3fd34413 	.word	0x3fd34413
 8007188:	0800aca9 	.word	0x0800aca9
 800718c:	0800acc0 	.word	0x0800acc0
 8007190:	7ff00000 	.word	0x7ff00000
 8007194:	0800aca5 	.word	0x0800aca5
 8007198:	0800ac9c 	.word	0x0800ac9c
 800719c:	0800ac79 	.word	0x0800ac79
 80071a0:	3ff80000 	.word	0x3ff80000
 80071a4:	0800adb8 	.word	0x0800adb8
 80071a8:	0800ad1f 	.word	0x0800ad1f
 80071ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071ae:	9a00      	ldr	r2, [sp, #0]
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	9b01      	ldr	r3, [sp, #4]
 80071b4:	2b0e      	cmp	r3, #14
 80071b6:	f200 80ad 	bhi.w	8007314 <_dtoa_r+0x484>
 80071ba:	2d00      	cmp	r5, #0
 80071bc:	f000 80aa 	beq.w	8007314 <_dtoa_r+0x484>
 80071c0:	f1ba 0f00 	cmp.w	sl, #0
 80071c4:	dd36      	ble.n	8007234 <_dtoa_r+0x3a4>
 80071c6:	4ac3      	ldr	r2, [pc, #780]	; (80074d4 <_dtoa_r+0x644>)
 80071c8:	f00a 030f 	and.w	r3, sl, #15
 80071cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071d0:	ed93 7b00 	vldr	d7, [r3]
 80071d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80071d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80071dc:	eeb0 8a47 	vmov.f32	s16, s14
 80071e0:	eef0 8a67 	vmov.f32	s17, s15
 80071e4:	d016      	beq.n	8007214 <_dtoa_r+0x384>
 80071e6:	4bbc      	ldr	r3, [pc, #752]	; (80074d8 <_dtoa_r+0x648>)
 80071e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071f0:	f7f9 fb34 	bl	800085c <__aeabi_ddiv>
 80071f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071f8:	f007 070f 	and.w	r7, r7, #15
 80071fc:	2503      	movs	r5, #3
 80071fe:	4eb6      	ldr	r6, [pc, #728]	; (80074d8 <_dtoa_r+0x648>)
 8007200:	b957      	cbnz	r7, 8007218 <_dtoa_r+0x388>
 8007202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007206:	ec53 2b18 	vmov	r2, r3, d8
 800720a:	f7f9 fb27 	bl	800085c <__aeabi_ddiv>
 800720e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007212:	e029      	b.n	8007268 <_dtoa_r+0x3d8>
 8007214:	2502      	movs	r5, #2
 8007216:	e7f2      	b.n	80071fe <_dtoa_r+0x36e>
 8007218:	07f9      	lsls	r1, r7, #31
 800721a:	d508      	bpl.n	800722e <_dtoa_r+0x39e>
 800721c:	ec51 0b18 	vmov	r0, r1, d8
 8007220:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007224:	f7f9 f9f0 	bl	8000608 <__aeabi_dmul>
 8007228:	ec41 0b18 	vmov	d8, r0, r1
 800722c:	3501      	adds	r5, #1
 800722e:	107f      	asrs	r7, r7, #1
 8007230:	3608      	adds	r6, #8
 8007232:	e7e5      	b.n	8007200 <_dtoa_r+0x370>
 8007234:	f000 80a6 	beq.w	8007384 <_dtoa_r+0x4f4>
 8007238:	f1ca 0600 	rsb	r6, sl, #0
 800723c:	4ba5      	ldr	r3, [pc, #660]	; (80074d4 <_dtoa_r+0x644>)
 800723e:	4fa6      	ldr	r7, [pc, #664]	; (80074d8 <_dtoa_r+0x648>)
 8007240:	f006 020f 	and.w	r2, r6, #15
 8007244:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007250:	f7f9 f9da 	bl	8000608 <__aeabi_dmul>
 8007254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007258:	1136      	asrs	r6, r6, #4
 800725a:	2300      	movs	r3, #0
 800725c:	2502      	movs	r5, #2
 800725e:	2e00      	cmp	r6, #0
 8007260:	f040 8085 	bne.w	800736e <_dtoa_r+0x4de>
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1d2      	bne.n	800720e <_dtoa_r+0x37e>
 8007268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 808c 	beq.w	8007388 <_dtoa_r+0x4f8>
 8007270:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007274:	4b99      	ldr	r3, [pc, #612]	; (80074dc <_dtoa_r+0x64c>)
 8007276:	2200      	movs	r2, #0
 8007278:	4630      	mov	r0, r6
 800727a:	4639      	mov	r1, r7
 800727c:	f7f9 fc36 	bl	8000aec <__aeabi_dcmplt>
 8007280:	2800      	cmp	r0, #0
 8007282:	f000 8081 	beq.w	8007388 <_dtoa_r+0x4f8>
 8007286:	9b01      	ldr	r3, [sp, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d07d      	beq.n	8007388 <_dtoa_r+0x4f8>
 800728c:	f1b9 0f00 	cmp.w	r9, #0
 8007290:	dd3c      	ble.n	800730c <_dtoa_r+0x47c>
 8007292:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007296:	9307      	str	r3, [sp, #28]
 8007298:	2200      	movs	r2, #0
 800729a:	4b91      	ldr	r3, [pc, #580]	; (80074e0 <_dtoa_r+0x650>)
 800729c:	4630      	mov	r0, r6
 800729e:	4639      	mov	r1, r7
 80072a0:	f7f9 f9b2 	bl	8000608 <__aeabi_dmul>
 80072a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072a8:	3501      	adds	r5, #1
 80072aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80072ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80072b2:	4628      	mov	r0, r5
 80072b4:	f7f9 f93e 	bl	8000534 <__aeabi_i2d>
 80072b8:	4632      	mov	r2, r6
 80072ba:	463b      	mov	r3, r7
 80072bc:	f7f9 f9a4 	bl	8000608 <__aeabi_dmul>
 80072c0:	4b88      	ldr	r3, [pc, #544]	; (80074e4 <_dtoa_r+0x654>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	f7f8 ffea 	bl	800029c <__adddf3>
 80072c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80072cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072d0:	9303      	str	r3, [sp, #12]
 80072d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d15c      	bne.n	8007392 <_dtoa_r+0x502>
 80072d8:	4b83      	ldr	r3, [pc, #524]	; (80074e8 <_dtoa_r+0x658>)
 80072da:	2200      	movs	r2, #0
 80072dc:	4630      	mov	r0, r6
 80072de:	4639      	mov	r1, r7
 80072e0:	f7f8 ffda 	bl	8000298 <__aeabi_dsub>
 80072e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072e8:	4606      	mov	r6, r0
 80072ea:	460f      	mov	r7, r1
 80072ec:	f7f9 fc1c 	bl	8000b28 <__aeabi_dcmpgt>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	f040 8296 	bne.w	8007822 <_dtoa_r+0x992>
 80072f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80072fa:	4630      	mov	r0, r6
 80072fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007300:	4639      	mov	r1, r7
 8007302:	f7f9 fbf3 	bl	8000aec <__aeabi_dcmplt>
 8007306:	2800      	cmp	r0, #0
 8007308:	f040 8288 	bne.w	800781c <_dtoa_r+0x98c>
 800730c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007310:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007314:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007316:	2b00      	cmp	r3, #0
 8007318:	f2c0 8158 	blt.w	80075cc <_dtoa_r+0x73c>
 800731c:	f1ba 0f0e 	cmp.w	sl, #14
 8007320:	f300 8154 	bgt.w	80075cc <_dtoa_r+0x73c>
 8007324:	4b6b      	ldr	r3, [pc, #428]	; (80074d4 <_dtoa_r+0x644>)
 8007326:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800732a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800732e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007330:	2b00      	cmp	r3, #0
 8007332:	f280 80e3 	bge.w	80074fc <_dtoa_r+0x66c>
 8007336:	9b01      	ldr	r3, [sp, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	f300 80df 	bgt.w	80074fc <_dtoa_r+0x66c>
 800733e:	f040 826d 	bne.w	800781c <_dtoa_r+0x98c>
 8007342:	4b69      	ldr	r3, [pc, #420]	; (80074e8 <_dtoa_r+0x658>)
 8007344:	2200      	movs	r2, #0
 8007346:	4640      	mov	r0, r8
 8007348:	4649      	mov	r1, r9
 800734a:	f7f9 f95d 	bl	8000608 <__aeabi_dmul>
 800734e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007352:	f7f9 fbdf 	bl	8000b14 <__aeabi_dcmpge>
 8007356:	9e01      	ldr	r6, [sp, #4]
 8007358:	4637      	mov	r7, r6
 800735a:	2800      	cmp	r0, #0
 800735c:	f040 8243 	bne.w	80077e6 <_dtoa_r+0x956>
 8007360:	9d00      	ldr	r5, [sp, #0]
 8007362:	2331      	movs	r3, #49	; 0x31
 8007364:	f805 3b01 	strb.w	r3, [r5], #1
 8007368:	f10a 0a01 	add.w	sl, sl, #1
 800736c:	e23f      	b.n	80077ee <_dtoa_r+0x95e>
 800736e:	07f2      	lsls	r2, r6, #31
 8007370:	d505      	bpl.n	800737e <_dtoa_r+0x4ee>
 8007372:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007376:	f7f9 f947 	bl	8000608 <__aeabi_dmul>
 800737a:	3501      	adds	r5, #1
 800737c:	2301      	movs	r3, #1
 800737e:	1076      	asrs	r6, r6, #1
 8007380:	3708      	adds	r7, #8
 8007382:	e76c      	b.n	800725e <_dtoa_r+0x3ce>
 8007384:	2502      	movs	r5, #2
 8007386:	e76f      	b.n	8007268 <_dtoa_r+0x3d8>
 8007388:	9b01      	ldr	r3, [sp, #4]
 800738a:	f8cd a01c 	str.w	sl, [sp, #28]
 800738e:	930c      	str	r3, [sp, #48]	; 0x30
 8007390:	e78d      	b.n	80072ae <_dtoa_r+0x41e>
 8007392:	9900      	ldr	r1, [sp, #0]
 8007394:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007398:	4b4e      	ldr	r3, [pc, #312]	; (80074d4 <_dtoa_r+0x644>)
 800739a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800739e:	4401      	add	r1, r0
 80073a0:	9102      	str	r1, [sp, #8]
 80073a2:	9908      	ldr	r1, [sp, #32]
 80073a4:	eeb0 8a47 	vmov.f32	s16, s14
 80073a8:	eef0 8a67 	vmov.f32	s17, s15
 80073ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073b4:	2900      	cmp	r1, #0
 80073b6:	d045      	beq.n	8007444 <_dtoa_r+0x5b4>
 80073b8:	494c      	ldr	r1, [pc, #304]	; (80074ec <_dtoa_r+0x65c>)
 80073ba:	2000      	movs	r0, #0
 80073bc:	f7f9 fa4e 	bl	800085c <__aeabi_ddiv>
 80073c0:	ec53 2b18 	vmov	r2, r3, d8
 80073c4:	f7f8 ff68 	bl	8000298 <__aeabi_dsub>
 80073c8:	9d00      	ldr	r5, [sp, #0]
 80073ca:	ec41 0b18 	vmov	d8, r0, r1
 80073ce:	4639      	mov	r1, r7
 80073d0:	4630      	mov	r0, r6
 80073d2:	f7f9 fbc9 	bl	8000b68 <__aeabi_d2iz>
 80073d6:	900c      	str	r0, [sp, #48]	; 0x30
 80073d8:	f7f9 f8ac 	bl	8000534 <__aeabi_i2d>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	4630      	mov	r0, r6
 80073e2:	4639      	mov	r1, r7
 80073e4:	f7f8 ff58 	bl	8000298 <__aeabi_dsub>
 80073e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073ea:	3330      	adds	r3, #48	; 0x30
 80073ec:	f805 3b01 	strb.w	r3, [r5], #1
 80073f0:	ec53 2b18 	vmov	r2, r3, d8
 80073f4:	4606      	mov	r6, r0
 80073f6:	460f      	mov	r7, r1
 80073f8:	f7f9 fb78 	bl	8000aec <__aeabi_dcmplt>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d165      	bne.n	80074cc <_dtoa_r+0x63c>
 8007400:	4632      	mov	r2, r6
 8007402:	463b      	mov	r3, r7
 8007404:	4935      	ldr	r1, [pc, #212]	; (80074dc <_dtoa_r+0x64c>)
 8007406:	2000      	movs	r0, #0
 8007408:	f7f8 ff46 	bl	8000298 <__aeabi_dsub>
 800740c:	ec53 2b18 	vmov	r2, r3, d8
 8007410:	f7f9 fb6c 	bl	8000aec <__aeabi_dcmplt>
 8007414:	2800      	cmp	r0, #0
 8007416:	f040 80b9 	bne.w	800758c <_dtoa_r+0x6fc>
 800741a:	9b02      	ldr	r3, [sp, #8]
 800741c:	429d      	cmp	r5, r3
 800741e:	f43f af75 	beq.w	800730c <_dtoa_r+0x47c>
 8007422:	4b2f      	ldr	r3, [pc, #188]	; (80074e0 <_dtoa_r+0x650>)
 8007424:	ec51 0b18 	vmov	r0, r1, d8
 8007428:	2200      	movs	r2, #0
 800742a:	f7f9 f8ed 	bl	8000608 <__aeabi_dmul>
 800742e:	4b2c      	ldr	r3, [pc, #176]	; (80074e0 <_dtoa_r+0x650>)
 8007430:	ec41 0b18 	vmov	d8, r0, r1
 8007434:	2200      	movs	r2, #0
 8007436:	4630      	mov	r0, r6
 8007438:	4639      	mov	r1, r7
 800743a:	f7f9 f8e5 	bl	8000608 <__aeabi_dmul>
 800743e:	4606      	mov	r6, r0
 8007440:	460f      	mov	r7, r1
 8007442:	e7c4      	b.n	80073ce <_dtoa_r+0x53e>
 8007444:	ec51 0b17 	vmov	r0, r1, d7
 8007448:	f7f9 f8de 	bl	8000608 <__aeabi_dmul>
 800744c:	9b02      	ldr	r3, [sp, #8]
 800744e:	9d00      	ldr	r5, [sp, #0]
 8007450:	930c      	str	r3, [sp, #48]	; 0x30
 8007452:	ec41 0b18 	vmov	d8, r0, r1
 8007456:	4639      	mov	r1, r7
 8007458:	4630      	mov	r0, r6
 800745a:	f7f9 fb85 	bl	8000b68 <__aeabi_d2iz>
 800745e:	9011      	str	r0, [sp, #68]	; 0x44
 8007460:	f7f9 f868 	bl	8000534 <__aeabi_i2d>
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	4630      	mov	r0, r6
 800746a:	4639      	mov	r1, r7
 800746c:	f7f8 ff14 	bl	8000298 <__aeabi_dsub>
 8007470:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007472:	3330      	adds	r3, #48	; 0x30
 8007474:	f805 3b01 	strb.w	r3, [r5], #1
 8007478:	9b02      	ldr	r3, [sp, #8]
 800747a:	429d      	cmp	r5, r3
 800747c:	4606      	mov	r6, r0
 800747e:	460f      	mov	r7, r1
 8007480:	f04f 0200 	mov.w	r2, #0
 8007484:	d134      	bne.n	80074f0 <_dtoa_r+0x660>
 8007486:	4b19      	ldr	r3, [pc, #100]	; (80074ec <_dtoa_r+0x65c>)
 8007488:	ec51 0b18 	vmov	r0, r1, d8
 800748c:	f7f8 ff06 	bl	800029c <__adddf3>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4630      	mov	r0, r6
 8007496:	4639      	mov	r1, r7
 8007498:	f7f9 fb46 	bl	8000b28 <__aeabi_dcmpgt>
 800749c:	2800      	cmp	r0, #0
 800749e:	d175      	bne.n	800758c <_dtoa_r+0x6fc>
 80074a0:	ec53 2b18 	vmov	r2, r3, d8
 80074a4:	4911      	ldr	r1, [pc, #68]	; (80074ec <_dtoa_r+0x65c>)
 80074a6:	2000      	movs	r0, #0
 80074a8:	f7f8 fef6 	bl	8000298 <__aeabi_dsub>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	4630      	mov	r0, r6
 80074b2:	4639      	mov	r1, r7
 80074b4:	f7f9 fb1a 	bl	8000aec <__aeabi_dcmplt>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	f43f af27 	beq.w	800730c <_dtoa_r+0x47c>
 80074be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074c0:	1e6b      	subs	r3, r5, #1
 80074c2:	930c      	str	r3, [sp, #48]	; 0x30
 80074c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80074c8:	2b30      	cmp	r3, #48	; 0x30
 80074ca:	d0f8      	beq.n	80074be <_dtoa_r+0x62e>
 80074cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80074d0:	e04a      	b.n	8007568 <_dtoa_r+0x6d8>
 80074d2:	bf00      	nop
 80074d4:	0800adb8 	.word	0x0800adb8
 80074d8:	0800ad90 	.word	0x0800ad90
 80074dc:	3ff00000 	.word	0x3ff00000
 80074e0:	40240000 	.word	0x40240000
 80074e4:	401c0000 	.word	0x401c0000
 80074e8:	40140000 	.word	0x40140000
 80074ec:	3fe00000 	.word	0x3fe00000
 80074f0:	4baf      	ldr	r3, [pc, #700]	; (80077b0 <_dtoa_r+0x920>)
 80074f2:	f7f9 f889 	bl	8000608 <__aeabi_dmul>
 80074f6:	4606      	mov	r6, r0
 80074f8:	460f      	mov	r7, r1
 80074fa:	e7ac      	b.n	8007456 <_dtoa_r+0x5c6>
 80074fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007500:	9d00      	ldr	r5, [sp, #0]
 8007502:	4642      	mov	r2, r8
 8007504:	464b      	mov	r3, r9
 8007506:	4630      	mov	r0, r6
 8007508:	4639      	mov	r1, r7
 800750a:	f7f9 f9a7 	bl	800085c <__aeabi_ddiv>
 800750e:	f7f9 fb2b 	bl	8000b68 <__aeabi_d2iz>
 8007512:	9002      	str	r0, [sp, #8]
 8007514:	f7f9 f80e 	bl	8000534 <__aeabi_i2d>
 8007518:	4642      	mov	r2, r8
 800751a:	464b      	mov	r3, r9
 800751c:	f7f9 f874 	bl	8000608 <__aeabi_dmul>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	4630      	mov	r0, r6
 8007526:	4639      	mov	r1, r7
 8007528:	f7f8 feb6 	bl	8000298 <__aeabi_dsub>
 800752c:	9e02      	ldr	r6, [sp, #8]
 800752e:	9f01      	ldr	r7, [sp, #4]
 8007530:	3630      	adds	r6, #48	; 0x30
 8007532:	f805 6b01 	strb.w	r6, [r5], #1
 8007536:	9e00      	ldr	r6, [sp, #0]
 8007538:	1bae      	subs	r6, r5, r6
 800753a:	42b7      	cmp	r7, r6
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	d137      	bne.n	80075b2 <_dtoa_r+0x722>
 8007542:	f7f8 feab 	bl	800029c <__adddf3>
 8007546:	4642      	mov	r2, r8
 8007548:	464b      	mov	r3, r9
 800754a:	4606      	mov	r6, r0
 800754c:	460f      	mov	r7, r1
 800754e:	f7f9 faeb 	bl	8000b28 <__aeabi_dcmpgt>
 8007552:	b9c8      	cbnz	r0, 8007588 <_dtoa_r+0x6f8>
 8007554:	4642      	mov	r2, r8
 8007556:	464b      	mov	r3, r9
 8007558:	4630      	mov	r0, r6
 800755a:	4639      	mov	r1, r7
 800755c:	f7f9 fabc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007560:	b110      	cbz	r0, 8007568 <_dtoa_r+0x6d8>
 8007562:	9b02      	ldr	r3, [sp, #8]
 8007564:	07d9      	lsls	r1, r3, #31
 8007566:	d40f      	bmi.n	8007588 <_dtoa_r+0x6f8>
 8007568:	4620      	mov	r0, r4
 800756a:	4659      	mov	r1, fp
 800756c:	f000 fad6 	bl	8007b1c <_Bfree>
 8007570:	2300      	movs	r3, #0
 8007572:	702b      	strb	r3, [r5, #0]
 8007574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007576:	f10a 0001 	add.w	r0, sl, #1
 800757a:	6018      	str	r0, [r3, #0]
 800757c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800757e:	2b00      	cmp	r3, #0
 8007580:	f43f acd8 	beq.w	8006f34 <_dtoa_r+0xa4>
 8007584:	601d      	str	r5, [r3, #0]
 8007586:	e4d5      	b.n	8006f34 <_dtoa_r+0xa4>
 8007588:	f8cd a01c 	str.w	sl, [sp, #28]
 800758c:	462b      	mov	r3, r5
 800758e:	461d      	mov	r5, r3
 8007590:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007594:	2a39      	cmp	r2, #57	; 0x39
 8007596:	d108      	bne.n	80075aa <_dtoa_r+0x71a>
 8007598:	9a00      	ldr	r2, [sp, #0]
 800759a:	429a      	cmp	r2, r3
 800759c:	d1f7      	bne.n	800758e <_dtoa_r+0x6fe>
 800759e:	9a07      	ldr	r2, [sp, #28]
 80075a0:	9900      	ldr	r1, [sp, #0]
 80075a2:	3201      	adds	r2, #1
 80075a4:	9207      	str	r2, [sp, #28]
 80075a6:	2230      	movs	r2, #48	; 0x30
 80075a8:	700a      	strb	r2, [r1, #0]
 80075aa:	781a      	ldrb	r2, [r3, #0]
 80075ac:	3201      	adds	r2, #1
 80075ae:	701a      	strb	r2, [r3, #0]
 80075b0:	e78c      	b.n	80074cc <_dtoa_r+0x63c>
 80075b2:	4b7f      	ldr	r3, [pc, #508]	; (80077b0 <_dtoa_r+0x920>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	f7f9 f827 	bl	8000608 <__aeabi_dmul>
 80075ba:	2200      	movs	r2, #0
 80075bc:	2300      	movs	r3, #0
 80075be:	4606      	mov	r6, r0
 80075c0:	460f      	mov	r7, r1
 80075c2:	f7f9 fa89 	bl	8000ad8 <__aeabi_dcmpeq>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d09b      	beq.n	8007502 <_dtoa_r+0x672>
 80075ca:	e7cd      	b.n	8007568 <_dtoa_r+0x6d8>
 80075cc:	9a08      	ldr	r2, [sp, #32]
 80075ce:	2a00      	cmp	r2, #0
 80075d0:	f000 80c4 	beq.w	800775c <_dtoa_r+0x8cc>
 80075d4:	9a05      	ldr	r2, [sp, #20]
 80075d6:	2a01      	cmp	r2, #1
 80075d8:	f300 80a8 	bgt.w	800772c <_dtoa_r+0x89c>
 80075dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075de:	2a00      	cmp	r2, #0
 80075e0:	f000 80a0 	beq.w	8007724 <_dtoa_r+0x894>
 80075e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80075e8:	9e06      	ldr	r6, [sp, #24]
 80075ea:	4645      	mov	r5, r8
 80075ec:	9a04      	ldr	r2, [sp, #16]
 80075ee:	2101      	movs	r1, #1
 80075f0:	441a      	add	r2, r3
 80075f2:	4620      	mov	r0, r4
 80075f4:	4498      	add	r8, r3
 80075f6:	9204      	str	r2, [sp, #16]
 80075f8:	f000 fb4c 	bl	8007c94 <__i2b>
 80075fc:	4607      	mov	r7, r0
 80075fe:	2d00      	cmp	r5, #0
 8007600:	dd0b      	ble.n	800761a <_dtoa_r+0x78a>
 8007602:	9b04      	ldr	r3, [sp, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	dd08      	ble.n	800761a <_dtoa_r+0x78a>
 8007608:	42ab      	cmp	r3, r5
 800760a:	9a04      	ldr	r2, [sp, #16]
 800760c:	bfa8      	it	ge
 800760e:	462b      	movge	r3, r5
 8007610:	eba8 0803 	sub.w	r8, r8, r3
 8007614:	1aed      	subs	r5, r5, r3
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	9304      	str	r3, [sp, #16]
 800761a:	9b06      	ldr	r3, [sp, #24]
 800761c:	b1fb      	cbz	r3, 800765e <_dtoa_r+0x7ce>
 800761e:	9b08      	ldr	r3, [sp, #32]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 809f 	beq.w	8007764 <_dtoa_r+0x8d4>
 8007626:	2e00      	cmp	r6, #0
 8007628:	dd11      	ble.n	800764e <_dtoa_r+0x7be>
 800762a:	4639      	mov	r1, r7
 800762c:	4632      	mov	r2, r6
 800762e:	4620      	mov	r0, r4
 8007630:	f000 fbec 	bl	8007e0c <__pow5mult>
 8007634:	465a      	mov	r2, fp
 8007636:	4601      	mov	r1, r0
 8007638:	4607      	mov	r7, r0
 800763a:	4620      	mov	r0, r4
 800763c:	f000 fb40 	bl	8007cc0 <__multiply>
 8007640:	4659      	mov	r1, fp
 8007642:	9007      	str	r0, [sp, #28]
 8007644:	4620      	mov	r0, r4
 8007646:	f000 fa69 	bl	8007b1c <_Bfree>
 800764a:	9b07      	ldr	r3, [sp, #28]
 800764c:	469b      	mov	fp, r3
 800764e:	9b06      	ldr	r3, [sp, #24]
 8007650:	1b9a      	subs	r2, r3, r6
 8007652:	d004      	beq.n	800765e <_dtoa_r+0x7ce>
 8007654:	4659      	mov	r1, fp
 8007656:	4620      	mov	r0, r4
 8007658:	f000 fbd8 	bl	8007e0c <__pow5mult>
 800765c:	4683      	mov	fp, r0
 800765e:	2101      	movs	r1, #1
 8007660:	4620      	mov	r0, r4
 8007662:	f000 fb17 	bl	8007c94 <__i2b>
 8007666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007668:	2b00      	cmp	r3, #0
 800766a:	4606      	mov	r6, r0
 800766c:	dd7c      	ble.n	8007768 <_dtoa_r+0x8d8>
 800766e:	461a      	mov	r2, r3
 8007670:	4601      	mov	r1, r0
 8007672:	4620      	mov	r0, r4
 8007674:	f000 fbca 	bl	8007e0c <__pow5mult>
 8007678:	9b05      	ldr	r3, [sp, #20]
 800767a:	2b01      	cmp	r3, #1
 800767c:	4606      	mov	r6, r0
 800767e:	dd76      	ble.n	800776e <_dtoa_r+0x8de>
 8007680:	2300      	movs	r3, #0
 8007682:	9306      	str	r3, [sp, #24]
 8007684:	6933      	ldr	r3, [r6, #16]
 8007686:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800768a:	6918      	ldr	r0, [r3, #16]
 800768c:	f000 fab2 	bl	8007bf4 <__hi0bits>
 8007690:	f1c0 0020 	rsb	r0, r0, #32
 8007694:	9b04      	ldr	r3, [sp, #16]
 8007696:	4418      	add	r0, r3
 8007698:	f010 001f 	ands.w	r0, r0, #31
 800769c:	f000 8086 	beq.w	80077ac <_dtoa_r+0x91c>
 80076a0:	f1c0 0320 	rsb	r3, r0, #32
 80076a4:	2b04      	cmp	r3, #4
 80076a6:	dd7f      	ble.n	80077a8 <_dtoa_r+0x918>
 80076a8:	f1c0 001c 	rsb	r0, r0, #28
 80076ac:	9b04      	ldr	r3, [sp, #16]
 80076ae:	4403      	add	r3, r0
 80076b0:	4480      	add	r8, r0
 80076b2:	4405      	add	r5, r0
 80076b4:	9304      	str	r3, [sp, #16]
 80076b6:	f1b8 0f00 	cmp.w	r8, #0
 80076ba:	dd05      	ble.n	80076c8 <_dtoa_r+0x838>
 80076bc:	4659      	mov	r1, fp
 80076be:	4642      	mov	r2, r8
 80076c0:	4620      	mov	r0, r4
 80076c2:	f000 fbfd 	bl	8007ec0 <__lshift>
 80076c6:	4683      	mov	fp, r0
 80076c8:	9b04      	ldr	r3, [sp, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	dd05      	ble.n	80076da <_dtoa_r+0x84a>
 80076ce:	4631      	mov	r1, r6
 80076d0:	461a      	mov	r2, r3
 80076d2:	4620      	mov	r0, r4
 80076d4:	f000 fbf4 	bl	8007ec0 <__lshift>
 80076d8:	4606      	mov	r6, r0
 80076da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d069      	beq.n	80077b4 <_dtoa_r+0x924>
 80076e0:	4631      	mov	r1, r6
 80076e2:	4658      	mov	r0, fp
 80076e4:	f000 fc58 	bl	8007f98 <__mcmp>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	da63      	bge.n	80077b4 <_dtoa_r+0x924>
 80076ec:	2300      	movs	r3, #0
 80076ee:	4659      	mov	r1, fp
 80076f0:	220a      	movs	r2, #10
 80076f2:	4620      	mov	r0, r4
 80076f4:	f000 fa34 	bl	8007b60 <__multadd>
 80076f8:	9b08      	ldr	r3, [sp, #32]
 80076fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80076fe:	4683      	mov	fp, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 818f 	beq.w	8007a24 <_dtoa_r+0xb94>
 8007706:	4639      	mov	r1, r7
 8007708:	2300      	movs	r3, #0
 800770a:	220a      	movs	r2, #10
 800770c:	4620      	mov	r0, r4
 800770e:	f000 fa27 	bl	8007b60 <__multadd>
 8007712:	f1b9 0f00 	cmp.w	r9, #0
 8007716:	4607      	mov	r7, r0
 8007718:	f300 808e 	bgt.w	8007838 <_dtoa_r+0x9a8>
 800771c:	9b05      	ldr	r3, [sp, #20]
 800771e:	2b02      	cmp	r3, #2
 8007720:	dc50      	bgt.n	80077c4 <_dtoa_r+0x934>
 8007722:	e089      	b.n	8007838 <_dtoa_r+0x9a8>
 8007724:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007726:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800772a:	e75d      	b.n	80075e8 <_dtoa_r+0x758>
 800772c:	9b01      	ldr	r3, [sp, #4]
 800772e:	1e5e      	subs	r6, r3, #1
 8007730:	9b06      	ldr	r3, [sp, #24]
 8007732:	42b3      	cmp	r3, r6
 8007734:	bfbf      	itttt	lt
 8007736:	9b06      	ldrlt	r3, [sp, #24]
 8007738:	9606      	strlt	r6, [sp, #24]
 800773a:	1af2      	sublt	r2, r6, r3
 800773c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800773e:	bfb6      	itet	lt
 8007740:	189b      	addlt	r3, r3, r2
 8007742:	1b9e      	subge	r6, r3, r6
 8007744:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007746:	9b01      	ldr	r3, [sp, #4]
 8007748:	bfb8      	it	lt
 800774a:	2600      	movlt	r6, #0
 800774c:	2b00      	cmp	r3, #0
 800774e:	bfb5      	itete	lt
 8007750:	eba8 0503 	sublt.w	r5, r8, r3
 8007754:	9b01      	ldrge	r3, [sp, #4]
 8007756:	2300      	movlt	r3, #0
 8007758:	4645      	movge	r5, r8
 800775a:	e747      	b.n	80075ec <_dtoa_r+0x75c>
 800775c:	9e06      	ldr	r6, [sp, #24]
 800775e:	9f08      	ldr	r7, [sp, #32]
 8007760:	4645      	mov	r5, r8
 8007762:	e74c      	b.n	80075fe <_dtoa_r+0x76e>
 8007764:	9a06      	ldr	r2, [sp, #24]
 8007766:	e775      	b.n	8007654 <_dtoa_r+0x7c4>
 8007768:	9b05      	ldr	r3, [sp, #20]
 800776a:	2b01      	cmp	r3, #1
 800776c:	dc18      	bgt.n	80077a0 <_dtoa_r+0x910>
 800776e:	9b02      	ldr	r3, [sp, #8]
 8007770:	b9b3      	cbnz	r3, 80077a0 <_dtoa_r+0x910>
 8007772:	9b03      	ldr	r3, [sp, #12]
 8007774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007778:	b9a3      	cbnz	r3, 80077a4 <_dtoa_r+0x914>
 800777a:	9b03      	ldr	r3, [sp, #12]
 800777c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007780:	0d1b      	lsrs	r3, r3, #20
 8007782:	051b      	lsls	r3, r3, #20
 8007784:	b12b      	cbz	r3, 8007792 <_dtoa_r+0x902>
 8007786:	9b04      	ldr	r3, [sp, #16]
 8007788:	3301      	adds	r3, #1
 800778a:	9304      	str	r3, [sp, #16]
 800778c:	f108 0801 	add.w	r8, r8, #1
 8007790:	2301      	movs	r3, #1
 8007792:	9306      	str	r3, [sp, #24]
 8007794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007796:	2b00      	cmp	r3, #0
 8007798:	f47f af74 	bne.w	8007684 <_dtoa_r+0x7f4>
 800779c:	2001      	movs	r0, #1
 800779e:	e779      	b.n	8007694 <_dtoa_r+0x804>
 80077a0:	2300      	movs	r3, #0
 80077a2:	e7f6      	b.n	8007792 <_dtoa_r+0x902>
 80077a4:	9b02      	ldr	r3, [sp, #8]
 80077a6:	e7f4      	b.n	8007792 <_dtoa_r+0x902>
 80077a8:	d085      	beq.n	80076b6 <_dtoa_r+0x826>
 80077aa:	4618      	mov	r0, r3
 80077ac:	301c      	adds	r0, #28
 80077ae:	e77d      	b.n	80076ac <_dtoa_r+0x81c>
 80077b0:	40240000 	.word	0x40240000
 80077b4:	9b01      	ldr	r3, [sp, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	dc38      	bgt.n	800782c <_dtoa_r+0x99c>
 80077ba:	9b05      	ldr	r3, [sp, #20]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	dd35      	ble.n	800782c <_dtoa_r+0x99c>
 80077c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80077c4:	f1b9 0f00 	cmp.w	r9, #0
 80077c8:	d10d      	bne.n	80077e6 <_dtoa_r+0x956>
 80077ca:	4631      	mov	r1, r6
 80077cc:	464b      	mov	r3, r9
 80077ce:	2205      	movs	r2, #5
 80077d0:	4620      	mov	r0, r4
 80077d2:	f000 f9c5 	bl	8007b60 <__multadd>
 80077d6:	4601      	mov	r1, r0
 80077d8:	4606      	mov	r6, r0
 80077da:	4658      	mov	r0, fp
 80077dc:	f000 fbdc 	bl	8007f98 <__mcmp>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	f73f adbd 	bgt.w	8007360 <_dtoa_r+0x4d0>
 80077e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e8:	9d00      	ldr	r5, [sp, #0]
 80077ea:	ea6f 0a03 	mvn.w	sl, r3
 80077ee:	f04f 0800 	mov.w	r8, #0
 80077f2:	4631      	mov	r1, r6
 80077f4:	4620      	mov	r0, r4
 80077f6:	f000 f991 	bl	8007b1c <_Bfree>
 80077fa:	2f00      	cmp	r7, #0
 80077fc:	f43f aeb4 	beq.w	8007568 <_dtoa_r+0x6d8>
 8007800:	f1b8 0f00 	cmp.w	r8, #0
 8007804:	d005      	beq.n	8007812 <_dtoa_r+0x982>
 8007806:	45b8      	cmp	r8, r7
 8007808:	d003      	beq.n	8007812 <_dtoa_r+0x982>
 800780a:	4641      	mov	r1, r8
 800780c:	4620      	mov	r0, r4
 800780e:	f000 f985 	bl	8007b1c <_Bfree>
 8007812:	4639      	mov	r1, r7
 8007814:	4620      	mov	r0, r4
 8007816:	f000 f981 	bl	8007b1c <_Bfree>
 800781a:	e6a5      	b.n	8007568 <_dtoa_r+0x6d8>
 800781c:	2600      	movs	r6, #0
 800781e:	4637      	mov	r7, r6
 8007820:	e7e1      	b.n	80077e6 <_dtoa_r+0x956>
 8007822:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007824:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007828:	4637      	mov	r7, r6
 800782a:	e599      	b.n	8007360 <_dtoa_r+0x4d0>
 800782c:	9b08      	ldr	r3, [sp, #32]
 800782e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 80fd 	beq.w	8007a32 <_dtoa_r+0xba2>
 8007838:	2d00      	cmp	r5, #0
 800783a:	dd05      	ble.n	8007848 <_dtoa_r+0x9b8>
 800783c:	4639      	mov	r1, r7
 800783e:	462a      	mov	r2, r5
 8007840:	4620      	mov	r0, r4
 8007842:	f000 fb3d 	bl	8007ec0 <__lshift>
 8007846:	4607      	mov	r7, r0
 8007848:	9b06      	ldr	r3, [sp, #24]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d05c      	beq.n	8007908 <_dtoa_r+0xa78>
 800784e:	6879      	ldr	r1, [r7, #4]
 8007850:	4620      	mov	r0, r4
 8007852:	f000 f923 	bl	8007a9c <_Balloc>
 8007856:	4605      	mov	r5, r0
 8007858:	b928      	cbnz	r0, 8007866 <_dtoa_r+0x9d6>
 800785a:	4b80      	ldr	r3, [pc, #512]	; (8007a5c <_dtoa_r+0xbcc>)
 800785c:	4602      	mov	r2, r0
 800785e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007862:	f7ff bb2e 	b.w	8006ec2 <_dtoa_r+0x32>
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	3202      	adds	r2, #2
 800786a:	0092      	lsls	r2, r2, #2
 800786c:	f107 010c 	add.w	r1, r7, #12
 8007870:	300c      	adds	r0, #12
 8007872:	f000 f905 	bl	8007a80 <memcpy>
 8007876:	2201      	movs	r2, #1
 8007878:	4629      	mov	r1, r5
 800787a:	4620      	mov	r0, r4
 800787c:	f000 fb20 	bl	8007ec0 <__lshift>
 8007880:	9b00      	ldr	r3, [sp, #0]
 8007882:	3301      	adds	r3, #1
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	9b00      	ldr	r3, [sp, #0]
 8007888:	444b      	add	r3, r9
 800788a:	9307      	str	r3, [sp, #28]
 800788c:	9b02      	ldr	r3, [sp, #8]
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	46b8      	mov	r8, r7
 8007894:	9306      	str	r3, [sp, #24]
 8007896:	4607      	mov	r7, r0
 8007898:	9b01      	ldr	r3, [sp, #4]
 800789a:	4631      	mov	r1, r6
 800789c:	3b01      	subs	r3, #1
 800789e:	4658      	mov	r0, fp
 80078a0:	9302      	str	r3, [sp, #8]
 80078a2:	f7ff fa67 	bl	8006d74 <quorem>
 80078a6:	4603      	mov	r3, r0
 80078a8:	3330      	adds	r3, #48	; 0x30
 80078aa:	9004      	str	r0, [sp, #16]
 80078ac:	4641      	mov	r1, r8
 80078ae:	4658      	mov	r0, fp
 80078b0:	9308      	str	r3, [sp, #32]
 80078b2:	f000 fb71 	bl	8007f98 <__mcmp>
 80078b6:	463a      	mov	r2, r7
 80078b8:	4681      	mov	r9, r0
 80078ba:	4631      	mov	r1, r6
 80078bc:	4620      	mov	r0, r4
 80078be:	f000 fb87 	bl	8007fd0 <__mdiff>
 80078c2:	68c2      	ldr	r2, [r0, #12]
 80078c4:	9b08      	ldr	r3, [sp, #32]
 80078c6:	4605      	mov	r5, r0
 80078c8:	bb02      	cbnz	r2, 800790c <_dtoa_r+0xa7c>
 80078ca:	4601      	mov	r1, r0
 80078cc:	4658      	mov	r0, fp
 80078ce:	f000 fb63 	bl	8007f98 <__mcmp>
 80078d2:	9b08      	ldr	r3, [sp, #32]
 80078d4:	4602      	mov	r2, r0
 80078d6:	4629      	mov	r1, r5
 80078d8:	4620      	mov	r0, r4
 80078da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80078de:	f000 f91d 	bl	8007b1c <_Bfree>
 80078e2:	9b05      	ldr	r3, [sp, #20]
 80078e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078e6:	9d01      	ldr	r5, [sp, #4]
 80078e8:	ea43 0102 	orr.w	r1, r3, r2
 80078ec:	9b06      	ldr	r3, [sp, #24]
 80078ee:	430b      	orrs	r3, r1
 80078f0:	9b08      	ldr	r3, [sp, #32]
 80078f2:	d10d      	bne.n	8007910 <_dtoa_r+0xa80>
 80078f4:	2b39      	cmp	r3, #57	; 0x39
 80078f6:	d029      	beq.n	800794c <_dtoa_r+0xabc>
 80078f8:	f1b9 0f00 	cmp.w	r9, #0
 80078fc:	dd01      	ble.n	8007902 <_dtoa_r+0xa72>
 80078fe:	9b04      	ldr	r3, [sp, #16]
 8007900:	3331      	adds	r3, #49	; 0x31
 8007902:	9a02      	ldr	r2, [sp, #8]
 8007904:	7013      	strb	r3, [r2, #0]
 8007906:	e774      	b.n	80077f2 <_dtoa_r+0x962>
 8007908:	4638      	mov	r0, r7
 800790a:	e7b9      	b.n	8007880 <_dtoa_r+0x9f0>
 800790c:	2201      	movs	r2, #1
 800790e:	e7e2      	b.n	80078d6 <_dtoa_r+0xa46>
 8007910:	f1b9 0f00 	cmp.w	r9, #0
 8007914:	db06      	blt.n	8007924 <_dtoa_r+0xa94>
 8007916:	9905      	ldr	r1, [sp, #20]
 8007918:	ea41 0909 	orr.w	r9, r1, r9
 800791c:	9906      	ldr	r1, [sp, #24]
 800791e:	ea59 0101 	orrs.w	r1, r9, r1
 8007922:	d120      	bne.n	8007966 <_dtoa_r+0xad6>
 8007924:	2a00      	cmp	r2, #0
 8007926:	ddec      	ble.n	8007902 <_dtoa_r+0xa72>
 8007928:	4659      	mov	r1, fp
 800792a:	2201      	movs	r2, #1
 800792c:	4620      	mov	r0, r4
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	f000 fac6 	bl	8007ec0 <__lshift>
 8007934:	4631      	mov	r1, r6
 8007936:	4683      	mov	fp, r0
 8007938:	f000 fb2e 	bl	8007f98 <__mcmp>
 800793c:	2800      	cmp	r0, #0
 800793e:	9b01      	ldr	r3, [sp, #4]
 8007940:	dc02      	bgt.n	8007948 <_dtoa_r+0xab8>
 8007942:	d1de      	bne.n	8007902 <_dtoa_r+0xa72>
 8007944:	07da      	lsls	r2, r3, #31
 8007946:	d5dc      	bpl.n	8007902 <_dtoa_r+0xa72>
 8007948:	2b39      	cmp	r3, #57	; 0x39
 800794a:	d1d8      	bne.n	80078fe <_dtoa_r+0xa6e>
 800794c:	9a02      	ldr	r2, [sp, #8]
 800794e:	2339      	movs	r3, #57	; 0x39
 8007950:	7013      	strb	r3, [r2, #0]
 8007952:	462b      	mov	r3, r5
 8007954:	461d      	mov	r5, r3
 8007956:	3b01      	subs	r3, #1
 8007958:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800795c:	2a39      	cmp	r2, #57	; 0x39
 800795e:	d050      	beq.n	8007a02 <_dtoa_r+0xb72>
 8007960:	3201      	adds	r2, #1
 8007962:	701a      	strb	r2, [r3, #0]
 8007964:	e745      	b.n	80077f2 <_dtoa_r+0x962>
 8007966:	2a00      	cmp	r2, #0
 8007968:	dd03      	ble.n	8007972 <_dtoa_r+0xae2>
 800796a:	2b39      	cmp	r3, #57	; 0x39
 800796c:	d0ee      	beq.n	800794c <_dtoa_r+0xabc>
 800796e:	3301      	adds	r3, #1
 8007970:	e7c7      	b.n	8007902 <_dtoa_r+0xa72>
 8007972:	9a01      	ldr	r2, [sp, #4]
 8007974:	9907      	ldr	r1, [sp, #28]
 8007976:	f802 3c01 	strb.w	r3, [r2, #-1]
 800797a:	428a      	cmp	r2, r1
 800797c:	d02a      	beq.n	80079d4 <_dtoa_r+0xb44>
 800797e:	4659      	mov	r1, fp
 8007980:	2300      	movs	r3, #0
 8007982:	220a      	movs	r2, #10
 8007984:	4620      	mov	r0, r4
 8007986:	f000 f8eb 	bl	8007b60 <__multadd>
 800798a:	45b8      	cmp	r8, r7
 800798c:	4683      	mov	fp, r0
 800798e:	f04f 0300 	mov.w	r3, #0
 8007992:	f04f 020a 	mov.w	r2, #10
 8007996:	4641      	mov	r1, r8
 8007998:	4620      	mov	r0, r4
 800799a:	d107      	bne.n	80079ac <_dtoa_r+0xb1c>
 800799c:	f000 f8e0 	bl	8007b60 <__multadd>
 80079a0:	4680      	mov	r8, r0
 80079a2:	4607      	mov	r7, r0
 80079a4:	9b01      	ldr	r3, [sp, #4]
 80079a6:	3301      	adds	r3, #1
 80079a8:	9301      	str	r3, [sp, #4]
 80079aa:	e775      	b.n	8007898 <_dtoa_r+0xa08>
 80079ac:	f000 f8d8 	bl	8007b60 <__multadd>
 80079b0:	4639      	mov	r1, r7
 80079b2:	4680      	mov	r8, r0
 80079b4:	2300      	movs	r3, #0
 80079b6:	220a      	movs	r2, #10
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 f8d1 	bl	8007b60 <__multadd>
 80079be:	4607      	mov	r7, r0
 80079c0:	e7f0      	b.n	80079a4 <_dtoa_r+0xb14>
 80079c2:	f1b9 0f00 	cmp.w	r9, #0
 80079c6:	9a00      	ldr	r2, [sp, #0]
 80079c8:	bfcc      	ite	gt
 80079ca:	464d      	movgt	r5, r9
 80079cc:	2501      	movle	r5, #1
 80079ce:	4415      	add	r5, r2
 80079d0:	f04f 0800 	mov.w	r8, #0
 80079d4:	4659      	mov	r1, fp
 80079d6:	2201      	movs	r2, #1
 80079d8:	4620      	mov	r0, r4
 80079da:	9301      	str	r3, [sp, #4]
 80079dc:	f000 fa70 	bl	8007ec0 <__lshift>
 80079e0:	4631      	mov	r1, r6
 80079e2:	4683      	mov	fp, r0
 80079e4:	f000 fad8 	bl	8007f98 <__mcmp>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	dcb2      	bgt.n	8007952 <_dtoa_r+0xac2>
 80079ec:	d102      	bne.n	80079f4 <_dtoa_r+0xb64>
 80079ee:	9b01      	ldr	r3, [sp, #4]
 80079f0:	07db      	lsls	r3, r3, #31
 80079f2:	d4ae      	bmi.n	8007952 <_dtoa_r+0xac2>
 80079f4:	462b      	mov	r3, r5
 80079f6:	461d      	mov	r5, r3
 80079f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079fc:	2a30      	cmp	r2, #48	; 0x30
 80079fe:	d0fa      	beq.n	80079f6 <_dtoa_r+0xb66>
 8007a00:	e6f7      	b.n	80077f2 <_dtoa_r+0x962>
 8007a02:	9a00      	ldr	r2, [sp, #0]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d1a5      	bne.n	8007954 <_dtoa_r+0xac4>
 8007a08:	f10a 0a01 	add.w	sl, sl, #1
 8007a0c:	2331      	movs	r3, #49	; 0x31
 8007a0e:	e779      	b.n	8007904 <_dtoa_r+0xa74>
 8007a10:	4b13      	ldr	r3, [pc, #76]	; (8007a60 <_dtoa_r+0xbd0>)
 8007a12:	f7ff baaf 	b.w	8006f74 <_dtoa_r+0xe4>
 8007a16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f47f aa86 	bne.w	8006f2a <_dtoa_r+0x9a>
 8007a1e:	4b11      	ldr	r3, [pc, #68]	; (8007a64 <_dtoa_r+0xbd4>)
 8007a20:	f7ff baa8 	b.w	8006f74 <_dtoa_r+0xe4>
 8007a24:	f1b9 0f00 	cmp.w	r9, #0
 8007a28:	dc03      	bgt.n	8007a32 <_dtoa_r+0xba2>
 8007a2a:	9b05      	ldr	r3, [sp, #20]
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	f73f aec9 	bgt.w	80077c4 <_dtoa_r+0x934>
 8007a32:	9d00      	ldr	r5, [sp, #0]
 8007a34:	4631      	mov	r1, r6
 8007a36:	4658      	mov	r0, fp
 8007a38:	f7ff f99c 	bl	8006d74 <quorem>
 8007a3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007a40:	f805 3b01 	strb.w	r3, [r5], #1
 8007a44:	9a00      	ldr	r2, [sp, #0]
 8007a46:	1aaa      	subs	r2, r5, r2
 8007a48:	4591      	cmp	r9, r2
 8007a4a:	ddba      	ble.n	80079c2 <_dtoa_r+0xb32>
 8007a4c:	4659      	mov	r1, fp
 8007a4e:	2300      	movs	r3, #0
 8007a50:	220a      	movs	r2, #10
 8007a52:	4620      	mov	r0, r4
 8007a54:	f000 f884 	bl	8007b60 <__multadd>
 8007a58:	4683      	mov	fp, r0
 8007a5a:	e7eb      	b.n	8007a34 <_dtoa_r+0xba4>
 8007a5c:	0800ad1f 	.word	0x0800ad1f
 8007a60:	0800ac78 	.word	0x0800ac78
 8007a64:	0800ac9c 	.word	0x0800ac9c

08007a68 <_localeconv_r>:
 8007a68:	4800      	ldr	r0, [pc, #0]	; (8007a6c <_localeconv_r+0x4>)
 8007a6a:	4770      	bx	lr
 8007a6c:	20002168 	.word	0x20002168

08007a70 <malloc>:
 8007a70:	4b02      	ldr	r3, [pc, #8]	; (8007a7c <malloc+0xc>)
 8007a72:	4601      	mov	r1, r0
 8007a74:	6818      	ldr	r0, [r3, #0]
 8007a76:	f000 bbef 	b.w	8008258 <_malloc_r>
 8007a7a:	bf00      	nop
 8007a7c:	20002014 	.word	0x20002014

08007a80 <memcpy>:
 8007a80:	440a      	add	r2, r1
 8007a82:	4291      	cmp	r1, r2
 8007a84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007a88:	d100      	bne.n	8007a8c <memcpy+0xc>
 8007a8a:	4770      	bx	lr
 8007a8c:	b510      	push	{r4, lr}
 8007a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a96:	4291      	cmp	r1, r2
 8007a98:	d1f9      	bne.n	8007a8e <memcpy+0xe>
 8007a9a:	bd10      	pop	{r4, pc}

08007a9c <_Balloc>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	460d      	mov	r5, r1
 8007aa4:	b976      	cbnz	r6, 8007ac4 <_Balloc+0x28>
 8007aa6:	2010      	movs	r0, #16
 8007aa8:	f7ff ffe2 	bl	8007a70 <malloc>
 8007aac:	4602      	mov	r2, r0
 8007aae:	6260      	str	r0, [r4, #36]	; 0x24
 8007ab0:	b920      	cbnz	r0, 8007abc <_Balloc+0x20>
 8007ab2:	4b18      	ldr	r3, [pc, #96]	; (8007b14 <_Balloc+0x78>)
 8007ab4:	4818      	ldr	r0, [pc, #96]	; (8007b18 <_Balloc+0x7c>)
 8007ab6:	2166      	movs	r1, #102	; 0x66
 8007ab8:	f000 fd94 	bl	80085e4 <__assert_func>
 8007abc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ac0:	6006      	str	r6, [r0, #0]
 8007ac2:	60c6      	str	r6, [r0, #12]
 8007ac4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ac6:	68f3      	ldr	r3, [r6, #12]
 8007ac8:	b183      	cbz	r3, 8007aec <_Balloc+0x50>
 8007aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ad2:	b9b8      	cbnz	r0, 8007b04 <_Balloc+0x68>
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	fa01 f605 	lsl.w	r6, r1, r5
 8007ada:	1d72      	adds	r2, r6, #5
 8007adc:	0092      	lsls	r2, r2, #2
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f000 fb5a 	bl	8008198 <_calloc_r>
 8007ae4:	b160      	cbz	r0, 8007b00 <_Balloc+0x64>
 8007ae6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007aea:	e00e      	b.n	8007b0a <_Balloc+0x6e>
 8007aec:	2221      	movs	r2, #33	; 0x21
 8007aee:	2104      	movs	r1, #4
 8007af0:	4620      	mov	r0, r4
 8007af2:	f000 fb51 	bl	8008198 <_calloc_r>
 8007af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007af8:	60f0      	str	r0, [r6, #12]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e4      	bne.n	8007aca <_Balloc+0x2e>
 8007b00:	2000      	movs	r0, #0
 8007b02:	bd70      	pop	{r4, r5, r6, pc}
 8007b04:	6802      	ldr	r2, [r0, #0]
 8007b06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b10:	e7f7      	b.n	8007b02 <_Balloc+0x66>
 8007b12:	bf00      	nop
 8007b14:	0800aca9 	.word	0x0800aca9
 8007b18:	0800ad30 	.word	0x0800ad30

08007b1c <_Bfree>:
 8007b1c:	b570      	push	{r4, r5, r6, lr}
 8007b1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b20:	4605      	mov	r5, r0
 8007b22:	460c      	mov	r4, r1
 8007b24:	b976      	cbnz	r6, 8007b44 <_Bfree+0x28>
 8007b26:	2010      	movs	r0, #16
 8007b28:	f7ff ffa2 	bl	8007a70 <malloc>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	6268      	str	r0, [r5, #36]	; 0x24
 8007b30:	b920      	cbnz	r0, 8007b3c <_Bfree+0x20>
 8007b32:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <_Bfree+0x3c>)
 8007b34:	4809      	ldr	r0, [pc, #36]	; (8007b5c <_Bfree+0x40>)
 8007b36:	218a      	movs	r1, #138	; 0x8a
 8007b38:	f000 fd54 	bl	80085e4 <__assert_func>
 8007b3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b40:	6006      	str	r6, [r0, #0]
 8007b42:	60c6      	str	r6, [r0, #12]
 8007b44:	b13c      	cbz	r4, 8007b56 <_Bfree+0x3a>
 8007b46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b48:	6862      	ldr	r2, [r4, #4]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b50:	6021      	str	r1, [r4, #0]
 8007b52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b56:	bd70      	pop	{r4, r5, r6, pc}
 8007b58:	0800aca9 	.word	0x0800aca9
 8007b5c:	0800ad30 	.word	0x0800ad30

08007b60 <__multadd>:
 8007b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b64:	690e      	ldr	r6, [r1, #16]
 8007b66:	4607      	mov	r7, r0
 8007b68:	4698      	mov	r8, r3
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	f101 0014 	add.w	r0, r1, #20
 8007b70:	2300      	movs	r3, #0
 8007b72:	6805      	ldr	r5, [r0, #0]
 8007b74:	b2a9      	uxth	r1, r5
 8007b76:	fb02 8101 	mla	r1, r2, r1, r8
 8007b7a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007b7e:	0c2d      	lsrs	r5, r5, #16
 8007b80:	fb02 c505 	mla	r5, r2, r5, ip
 8007b84:	b289      	uxth	r1, r1
 8007b86:	3301      	adds	r3, #1
 8007b88:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007b8c:	429e      	cmp	r6, r3
 8007b8e:	f840 1b04 	str.w	r1, [r0], #4
 8007b92:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007b96:	dcec      	bgt.n	8007b72 <__multadd+0x12>
 8007b98:	f1b8 0f00 	cmp.w	r8, #0
 8007b9c:	d022      	beq.n	8007be4 <__multadd+0x84>
 8007b9e:	68a3      	ldr	r3, [r4, #8]
 8007ba0:	42b3      	cmp	r3, r6
 8007ba2:	dc19      	bgt.n	8007bd8 <__multadd+0x78>
 8007ba4:	6861      	ldr	r1, [r4, #4]
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	3101      	adds	r1, #1
 8007baa:	f7ff ff77 	bl	8007a9c <_Balloc>
 8007bae:	4605      	mov	r5, r0
 8007bb0:	b928      	cbnz	r0, 8007bbe <__multadd+0x5e>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	4b0d      	ldr	r3, [pc, #52]	; (8007bec <__multadd+0x8c>)
 8007bb6:	480e      	ldr	r0, [pc, #56]	; (8007bf0 <__multadd+0x90>)
 8007bb8:	21b5      	movs	r1, #181	; 0xb5
 8007bba:	f000 fd13 	bl	80085e4 <__assert_func>
 8007bbe:	6922      	ldr	r2, [r4, #16]
 8007bc0:	3202      	adds	r2, #2
 8007bc2:	f104 010c 	add.w	r1, r4, #12
 8007bc6:	0092      	lsls	r2, r2, #2
 8007bc8:	300c      	adds	r0, #12
 8007bca:	f7ff ff59 	bl	8007a80 <memcpy>
 8007bce:	4621      	mov	r1, r4
 8007bd0:	4638      	mov	r0, r7
 8007bd2:	f7ff ffa3 	bl	8007b1c <_Bfree>
 8007bd6:	462c      	mov	r4, r5
 8007bd8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007bdc:	3601      	adds	r6, #1
 8007bde:	f8c3 8014 	str.w	r8, [r3, #20]
 8007be2:	6126      	str	r6, [r4, #16]
 8007be4:	4620      	mov	r0, r4
 8007be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bea:	bf00      	nop
 8007bec:	0800ad1f 	.word	0x0800ad1f
 8007bf0:	0800ad30 	.word	0x0800ad30

08007bf4 <__hi0bits>:
 8007bf4:	0c03      	lsrs	r3, r0, #16
 8007bf6:	041b      	lsls	r3, r3, #16
 8007bf8:	b9d3      	cbnz	r3, 8007c30 <__hi0bits+0x3c>
 8007bfa:	0400      	lsls	r0, r0, #16
 8007bfc:	2310      	movs	r3, #16
 8007bfe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c02:	bf04      	itt	eq
 8007c04:	0200      	lsleq	r0, r0, #8
 8007c06:	3308      	addeq	r3, #8
 8007c08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c0c:	bf04      	itt	eq
 8007c0e:	0100      	lsleq	r0, r0, #4
 8007c10:	3304      	addeq	r3, #4
 8007c12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c16:	bf04      	itt	eq
 8007c18:	0080      	lsleq	r0, r0, #2
 8007c1a:	3302      	addeq	r3, #2
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	db05      	blt.n	8007c2c <__hi0bits+0x38>
 8007c20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c24:	f103 0301 	add.w	r3, r3, #1
 8007c28:	bf08      	it	eq
 8007c2a:	2320      	moveq	r3, #32
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	4770      	bx	lr
 8007c30:	2300      	movs	r3, #0
 8007c32:	e7e4      	b.n	8007bfe <__hi0bits+0xa>

08007c34 <__lo0bits>:
 8007c34:	6803      	ldr	r3, [r0, #0]
 8007c36:	f013 0207 	ands.w	r2, r3, #7
 8007c3a:	4601      	mov	r1, r0
 8007c3c:	d00b      	beq.n	8007c56 <__lo0bits+0x22>
 8007c3e:	07da      	lsls	r2, r3, #31
 8007c40:	d424      	bmi.n	8007c8c <__lo0bits+0x58>
 8007c42:	0798      	lsls	r0, r3, #30
 8007c44:	bf49      	itett	mi
 8007c46:	085b      	lsrmi	r3, r3, #1
 8007c48:	089b      	lsrpl	r3, r3, #2
 8007c4a:	2001      	movmi	r0, #1
 8007c4c:	600b      	strmi	r3, [r1, #0]
 8007c4e:	bf5c      	itt	pl
 8007c50:	600b      	strpl	r3, [r1, #0]
 8007c52:	2002      	movpl	r0, #2
 8007c54:	4770      	bx	lr
 8007c56:	b298      	uxth	r0, r3
 8007c58:	b9b0      	cbnz	r0, 8007c88 <__lo0bits+0x54>
 8007c5a:	0c1b      	lsrs	r3, r3, #16
 8007c5c:	2010      	movs	r0, #16
 8007c5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c62:	bf04      	itt	eq
 8007c64:	0a1b      	lsreq	r3, r3, #8
 8007c66:	3008      	addeq	r0, #8
 8007c68:	071a      	lsls	r2, r3, #28
 8007c6a:	bf04      	itt	eq
 8007c6c:	091b      	lsreq	r3, r3, #4
 8007c6e:	3004      	addeq	r0, #4
 8007c70:	079a      	lsls	r2, r3, #30
 8007c72:	bf04      	itt	eq
 8007c74:	089b      	lsreq	r3, r3, #2
 8007c76:	3002      	addeq	r0, #2
 8007c78:	07da      	lsls	r2, r3, #31
 8007c7a:	d403      	bmi.n	8007c84 <__lo0bits+0x50>
 8007c7c:	085b      	lsrs	r3, r3, #1
 8007c7e:	f100 0001 	add.w	r0, r0, #1
 8007c82:	d005      	beq.n	8007c90 <__lo0bits+0x5c>
 8007c84:	600b      	str	r3, [r1, #0]
 8007c86:	4770      	bx	lr
 8007c88:	4610      	mov	r0, r2
 8007c8a:	e7e8      	b.n	8007c5e <__lo0bits+0x2a>
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	4770      	bx	lr
 8007c90:	2020      	movs	r0, #32
 8007c92:	4770      	bx	lr

08007c94 <__i2b>:
 8007c94:	b510      	push	{r4, lr}
 8007c96:	460c      	mov	r4, r1
 8007c98:	2101      	movs	r1, #1
 8007c9a:	f7ff feff 	bl	8007a9c <_Balloc>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	b928      	cbnz	r0, 8007cae <__i2b+0x1a>
 8007ca2:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <__i2b+0x24>)
 8007ca4:	4805      	ldr	r0, [pc, #20]	; (8007cbc <__i2b+0x28>)
 8007ca6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007caa:	f000 fc9b 	bl	80085e4 <__assert_func>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	6144      	str	r4, [r0, #20]
 8007cb2:	6103      	str	r3, [r0, #16]
 8007cb4:	bd10      	pop	{r4, pc}
 8007cb6:	bf00      	nop
 8007cb8:	0800ad1f 	.word	0x0800ad1f
 8007cbc:	0800ad30 	.word	0x0800ad30

08007cc0 <__multiply>:
 8007cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc4:	4614      	mov	r4, r2
 8007cc6:	690a      	ldr	r2, [r1, #16]
 8007cc8:	6923      	ldr	r3, [r4, #16]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	bfb8      	it	lt
 8007cce:	460b      	movlt	r3, r1
 8007cd0:	460d      	mov	r5, r1
 8007cd2:	bfbc      	itt	lt
 8007cd4:	4625      	movlt	r5, r4
 8007cd6:	461c      	movlt	r4, r3
 8007cd8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007cdc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007ce0:	68ab      	ldr	r3, [r5, #8]
 8007ce2:	6869      	ldr	r1, [r5, #4]
 8007ce4:	eb0a 0709 	add.w	r7, sl, r9
 8007ce8:	42bb      	cmp	r3, r7
 8007cea:	b085      	sub	sp, #20
 8007cec:	bfb8      	it	lt
 8007cee:	3101      	addlt	r1, #1
 8007cf0:	f7ff fed4 	bl	8007a9c <_Balloc>
 8007cf4:	b930      	cbnz	r0, 8007d04 <__multiply+0x44>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	4b42      	ldr	r3, [pc, #264]	; (8007e04 <__multiply+0x144>)
 8007cfa:	4843      	ldr	r0, [pc, #268]	; (8007e08 <__multiply+0x148>)
 8007cfc:	f240 115d 	movw	r1, #349	; 0x15d
 8007d00:	f000 fc70 	bl	80085e4 <__assert_func>
 8007d04:	f100 0614 	add.w	r6, r0, #20
 8007d08:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007d0c:	4633      	mov	r3, r6
 8007d0e:	2200      	movs	r2, #0
 8007d10:	4543      	cmp	r3, r8
 8007d12:	d31e      	bcc.n	8007d52 <__multiply+0x92>
 8007d14:	f105 0c14 	add.w	ip, r5, #20
 8007d18:	f104 0314 	add.w	r3, r4, #20
 8007d1c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007d20:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007d24:	9202      	str	r2, [sp, #8]
 8007d26:	ebac 0205 	sub.w	r2, ip, r5
 8007d2a:	3a15      	subs	r2, #21
 8007d2c:	f022 0203 	bic.w	r2, r2, #3
 8007d30:	3204      	adds	r2, #4
 8007d32:	f105 0115 	add.w	r1, r5, #21
 8007d36:	458c      	cmp	ip, r1
 8007d38:	bf38      	it	cc
 8007d3a:	2204      	movcc	r2, #4
 8007d3c:	9201      	str	r2, [sp, #4]
 8007d3e:	9a02      	ldr	r2, [sp, #8]
 8007d40:	9303      	str	r3, [sp, #12]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d808      	bhi.n	8007d58 <__multiply+0x98>
 8007d46:	2f00      	cmp	r7, #0
 8007d48:	dc55      	bgt.n	8007df6 <__multiply+0x136>
 8007d4a:	6107      	str	r7, [r0, #16]
 8007d4c:	b005      	add	sp, #20
 8007d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d52:	f843 2b04 	str.w	r2, [r3], #4
 8007d56:	e7db      	b.n	8007d10 <__multiply+0x50>
 8007d58:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d5c:	f1ba 0f00 	cmp.w	sl, #0
 8007d60:	d020      	beq.n	8007da4 <__multiply+0xe4>
 8007d62:	f105 0e14 	add.w	lr, r5, #20
 8007d66:	46b1      	mov	r9, r6
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007d6e:	f8d9 b000 	ldr.w	fp, [r9]
 8007d72:	b2a1      	uxth	r1, r4
 8007d74:	fa1f fb8b 	uxth.w	fp, fp
 8007d78:	fb0a b101 	mla	r1, sl, r1, fp
 8007d7c:	4411      	add	r1, r2
 8007d7e:	f8d9 2000 	ldr.w	r2, [r9]
 8007d82:	0c24      	lsrs	r4, r4, #16
 8007d84:	0c12      	lsrs	r2, r2, #16
 8007d86:	fb0a 2404 	mla	r4, sl, r4, r2
 8007d8a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007d8e:	b289      	uxth	r1, r1
 8007d90:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007d94:	45f4      	cmp	ip, lr
 8007d96:	f849 1b04 	str.w	r1, [r9], #4
 8007d9a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007d9e:	d8e4      	bhi.n	8007d6a <__multiply+0xaa>
 8007da0:	9901      	ldr	r1, [sp, #4]
 8007da2:	5072      	str	r2, [r6, r1]
 8007da4:	9a03      	ldr	r2, [sp, #12]
 8007da6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007daa:	3304      	adds	r3, #4
 8007dac:	f1b9 0f00 	cmp.w	r9, #0
 8007db0:	d01f      	beq.n	8007df2 <__multiply+0x132>
 8007db2:	6834      	ldr	r4, [r6, #0]
 8007db4:	f105 0114 	add.w	r1, r5, #20
 8007db8:	46b6      	mov	lr, r6
 8007dba:	f04f 0a00 	mov.w	sl, #0
 8007dbe:	880a      	ldrh	r2, [r1, #0]
 8007dc0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007dc4:	fb09 b202 	mla	r2, r9, r2, fp
 8007dc8:	4492      	add	sl, r2
 8007dca:	b2a4      	uxth	r4, r4
 8007dcc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007dd0:	f84e 4b04 	str.w	r4, [lr], #4
 8007dd4:	f851 4b04 	ldr.w	r4, [r1], #4
 8007dd8:	f8be 2000 	ldrh.w	r2, [lr]
 8007ddc:	0c24      	lsrs	r4, r4, #16
 8007dde:	fb09 2404 	mla	r4, r9, r4, r2
 8007de2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007de6:	458c      	cmp	ip, r1
 8007de8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007dec:	d8e7      	bhi.n	8007dbe <__multiply+0xfe>
 8007dee:	9a01      	ldr	r2, [sp, #4]
 8007df0:	50b4      	str	r4, [r6, r2]
 8007df2:	3604      	adds	r6, #4
 8007df4:	e7a3      	b.n	8007d3e <__multiply+0x7e>
 8007df6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1a5      	bne.n	8007d4a <__multiply+0x8a>
 8007dfe:	3f01      	subs	r7, #1
 8007e00:	e7a1      	b.n	8007d46 <__multiply+0x86>
 8007e02:	bf00      	nop
 8007e04:	0800ad1f 	.word	0x0800ad1f
 8007e08:	0800ad30 	.word	0x0800ad30

08007e0c <__pow5mult>:
 8007e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e10:	4615      	mov	r5, r2
 8007e12:	f012 0203 	ands.w	r2, r2, #3
 8007e16:	4606      	mov	r6, r0
 8007e18:	460f      	mov	r7, r1
 8007e1a:	d007      	beq.n	8007e2c <__pow5mult+0x20>
 8007e1c:	4c25      	ldr	r4, [pc, #148]	; (8007eb4 <__pow5mult+0xa8>)
 8007e1e:	3a01      	subs	r2, #1
 8007e20:	2300      	movs	r3, #0
 8007e22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e26:	f7ff fe9b 	bl	8007b60 <__multadd>
 8007e2a:	4607      	mov	r7, r0
 8007e2c:	10ad      	asrs	r5, r5, #2
 8007e2e:	d03d      	beq.n	8007eac <__pow5mult+0xa0>
 8007e30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e32:	b97c      	cbnz	r4, 8007e54 <__pow5mult+0x48>
 8007e34:	2010      	movs	r0, #16
 8007e36:	f7ff fe1b 	bl	8007a70 <malloc>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	6270      	str	r0, [r6, #36]	; 0x24
 8007e3e:	b928      	cbnz	r0, 8007e4c <__pow5mult+0x40>
 8007e40:	4b1d      	ldr	r3, [pc, #116]	; (8007eb8 <__pow5mult+0xac>)
 8007e42:	481e      	ldr	r0, [pc, #120]	; (8007ebc <__pow5mult+0xb0>)
 8007e44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e48:	f000 fbcc 	bl	80085e4 <__assert_func>
 8007e4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e50:	6004      	str	r4, [r0, #0]
 8007e52:	60c4      	str	r4, [r0, #12]
 8007e54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e5c:	b94c      	cbnz	r4, 8007e72 <__pow5mult+0x66>
 8007e5e:	f240 2171 	movw	r1, #625	; 0x271
 8007e62:	4630      	mov	r0, r6
 8007e64:	f7ff ff16 	bl	8007c94 <__i2b>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e6e:	4604      	mov	r4, r0
 8007e70:	6003      	str	r3, [r0, #0]
 8007e72:	f04f 0900 	mov.w	r9, #0
 8007e76:	07eb      	lsls	r3, r5, #31
 8007e78:	d50a      	bpl.n	8007e90 <__pow5mult+0x84>
 8007e7a:	4639      	mov	r1, r7
 8007e7c:	4622      	mov	r2, r4
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f7ff ff1e 	bl	8007cc0 <__multiply>
 8007e84:	4639      	mov	r1, r7
 8007e86:	4680      	mov	r8, r0
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f7ff fe47 	bl	8007b1c <_Bfree>
 8007e8e:	4647      	mov	r7, r8
 8007e90:	106d      	asrs	r5, r5, #1
 8007e92:	d00b      	beq.n	8007eac <__pow5mult+0xa0>
 8007e94:	6820      	ldr	r0, [r4, #0]
 8007e96:	b938      	cbnz	r0, 8007ea8 <__pow5mult+0x9c>
 8007e98:	4622      	mov	r2, r4
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f7ff ff0f 	bl	8007cc0 <__multiply>
 8007ea2:	6020      	str	r0, [r4, #0]
 8007ea4:	f8c0 9000 	str.w	r9, [r0]
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	e7e4      	b.n	8007e76 <__pow5mult+0x6a>
 8007eac:	4638      	mov	r0, r7
 8007eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb2:	bf00      	nop
 8007eb4:	0800ae80 	.word	0x0800ae80
 8007eb8:	0800aca9 	.word	0x0800aca9
 8007ebc:	0800ad30 	.word	0x0800ad30

08007ec0 <__lshift>:
 8007ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	6849      	ldr	r1, [r1, #4]
 8007ec8:	6923      	ldr	r3, [r4, #16]
 8007eca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ece:	68a3      	ldr	r3, [r4, #8]
 8007ed0:	4607      	mov	r7, r0
 8007ed2:	4691      	mov	r9, r2
 8007ed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ed8:	f108 0601 	add.w	r6, r8, #1
 8007edc:	42b3      	cmp	r3, r6
 8007ede:	db0b      	blt.n	8007ef8 <__lshift+0x38>
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7ff fddb 	bl	8007a9c <_Balloc>
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	b948      	cbnz	r0, 8007efe <__lshift+0x3e>
 8007eea:	4602      	mov	r2, r0
 8007eec:	4b28      	ldr	r3, [pc, #160]	; (8007f90 <__lshift+0xd0>)
 8007eee:	4829      	ldr	r0, [pc, #164]	; (8007f94 <__lshift+0xd4>)
 8007ef0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ef4:	f000 fb76 	bl	80085e4 <__assert_func>
 8007ef8:	3101      	adds	r1, #1
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	e7ee      	b.n	8007edc <__lshift+0x1c>
 8007efe:	2300      	movs	r3, #0
 8007f00:	f100 0114 	add.w	r1, r0, #20
 8007f04:	f100 0210 	add.w	r2, r0, #16
 8007f08:	4618      	mov	r0, r3
 8007f0a:	4553      	cmp	r3, sl
 8007f0c:	db33      	blt.n	8007f76 <__lshift+0xb6>
 8007f0e:	6920      	ldr	r0, [r4, #16]
 8007f10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f14:	f104 0314 	add.w	r3, r4, #20
 8007f18:	f019 091f 	ands.w	r9, r9, #31
 8007f1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f24:	d02b      	beq.n	8007f7e <__lshift+0xbe>
 8007f26:	f1c9 0e20 	rsb	lr, r9, #32
 8007f2a:	468a      	mov	sl, r1
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	fa00 f009 	lsl.w	r0, r0, r9
 8007f34:	4302      	orrs	r2, r0
 8007f36:	f84a 2b04 	str.w	r2, [sl], #4
 8007f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f3e:	459c      	cmp	ip, r3
 8007f40:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f44:	d8f3      	bhi.n	8007f2e <__lshift+0x6e>
 8007f46:	ebac 0304 	sub.w	r3, ip, r4
 8007f4a:	3b15      	subs	r3, #21
 8007f4c:	f023 0303 	bic.w	r3, r3, #3
 8007f50:	3304      	adds	r3, #4
 8007f52:	f104 0015 	add.w	r0, r4, #21
 8007f56:	4584      	cmp	ip, r0
 8007f58:	bf38      	it	cc
 8007f5a:	2304      	movcc	r3, #4
 8007f5c:	50ca      	str	r2, [r1, r3]
 8007f5e:	b10a      	cbz	r2, 8007f64 <__lshift+0xa4>
 8007f60:	f108 0602 	add.w	r6, r8, #2
 8007f64:	3e01      	subs	r6, #1
 8007f66:	4638      	mov	r0, r7
 8007f68:	612e      	str	r6, [r5, #16]
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	f7ff fdd6 	bl	8007b1c <_Bfree>
 8007f70:	4628      	mov	r0, r5
 8007f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f76:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	e7c5      	b.n	8007f0a <__lshift+0x4a>
 8007f7e:	3904      	subs	r1, #4
 8007f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f84:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f88:	459c      	cmp	ip, r3
 8007f8a:	d8f9      	bhi.n	8007f80 <__lshift+0xc0>
 8007f8c:	e7ea      	b.n	8007f64 <__lshift+0xa4>
 8007f8e:	bf00      	nop
 8007f90:	0800ad1f 	.word	0x0800ad1f
 8007f94:	0800ad30 	.word	0x0800ad30

08007f98 <__mcmp>:
 8007f98:	b530      	push	{r4, r5, lr}
 8007f9a:	6902      	ldr	r2, [r0, #16]
 8007f9c:	690c      	ldr	r4, [r1, #16]
 8007f9e:	1b12      	subs	r2, r2, r4
 8007fa0:	d10e      	bne.n	8007fc0 <__mcmp+0x28>
 8007fa2:	f100 0314 	add.w	r3, r0, #20
 8007fa6:	3114      	adds	r1, #20
 8007fa8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007fac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007fb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007fb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007fb8:	42a5      	cmp	r5, r4
 8007fba:	d003      	beq.n	8007fc4 <__mcmp+0x2c>
 8007fbc:	d305      	bcc.n	8007fca <__mcmp+0x32>
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	bd30      	pop	{r4, r5, pc}
 8007fc4:	4283      	cmp	r3, r0
 8007fc6:	d3f3      	bcc.n	8007fb0 <__mcmp+0x18>
 8007fc8:	e7fa      	b.n	8007fc0 <__mcmp+0x28>
 8007fca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fce:	e7f7      	b.n	8007fc0 <__mcmp+0x28>

08007fd0 <__mdiff>:
 8007fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	4606      	mov	r6, r0
 8007fd8:	4611      	mov	r1, r2
 8007fda:	4620      	mov	r0, r4
 8007fdc:	4617      	mov	r7, r2
 8007fde:	f7ff ffdb 	bl	8007f98 <__mcmp>
 8007fe2:	1e05      	subs	r5, r0, #0
 8007fe4:	d110      	bne.n	8008008 <__mdiff+0x38>
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f7ff fd57 	bl	8007a9c <_Balloc>
 8007fee:	b930      	cbnz	r0, 8007ffe <__mdiff+0x2e>
 8007ff0:	4b39      	ldr	r3, [pc, #228]	; (80080d8 <__mdiff+0x108>)
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	f240 2132 	movw	r1, #562	; 0x232
 8007ff8:	4838      	ldr	r0, [pc, #224]	; (80080dc <__mdiff+0x10c>)
 8007ffa:	f000 faf3 	bl	80085e4 <__assert_func>
 8007ffe:	2301      	movs	r3, #1
 8008000:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008008:	bfa4      	itt	ge
 800800a:	463b      	movge	r3, r7
 800800c:	4627      	movge	r7, r4
 800800e:	4630      	mov	r0, r6
 8008010:	6879      	ldr	r1, [r7, #4]
 8008012:	bfa6      	itte	ge
 8008014:	461c      	movge	r4, r3
 8008016:	2500      	movge	r5, #0
 8008018:	2501      	movlt	r5, #1
 800801a:	f7ff fd3f 	bl	8007a9c <_Balloc>
 800801e:	b920      	cbnz	r0, 800802a <__mdiff+0x5a>
 8008020:	4b2d      	ldr	r3, [pc, #180]	; (80080d8 <__mdiff+0x108>)
 8008022:	4602      	mov	r2, r0
 8008024:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008028:	e7e6      	b.n	8007ff8 <__mdiff+0x28>
 800802a:	693e      	ldr	r6, [r7, #16]
 800802c:	60c5      	str	r5, [r0, #12]
 800802e:	6925      	ldr	r5, [r4, #16]
 8008030:	f107 0114 	add.w	r1, r7, #20
 8008034:	f104 0914 	add.w	r9, r4, #20
 8008038:	f100 0e14 	add.w	lr, r0, #20
 800803c:	f107 0210 	add.w	r2, r7, #16
 8008040:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008044:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008048:	46f2      	mov	sl, lr
 800804a:	2700      	movs	r7, #0
 800804c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008050:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008054:	fa1f f883 	uxth.w	r8, r3
 8008058:	fa17 f78b 	uxtah	r7, r7, fp
 800805c:	0c1b      	lsrs	r3, r3, #16
 800805e:	eba7 0808 	sub.w	r8, r7, r8
 8008062:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008066:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800806a:	fa1f f888 	uxth.w	r8, r8
 800806e:	141f      	asrs	r7, r3, #16
 8008070:	454d      	cmp	r5, r9
 8008072:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008076:	f84a 3b04 	str.w	r3, [sl], #4
 800807a:	d8e7      	bhi.n	800804c <__mdiff+0x7c>
 800807c:	1b2b      	subs	r3, r5, r4
 800807e:	3b15      	subs	r3, #21
 8008080:	f023 0303 	bic.w	r3, r3, #3
 8008084:	3304      	adds	r3, #4
 8008086:	3415      	adds	r4, #21
 8008088:	42a5      	cmp	r5, r4
 800808a:	bf38      	it	cc
 800808c:	2304      	movcc	r3, #4
 800808e:	4419      	add	r1, r3
 8008090:	4473      	add	r3, lr
 8008092:	469e      	mov	lr, r3
 8008094:	460d      	mov	r5, r1
 8008096:	4565      	cmp	r5, ip
 8008098:	d30e      	bcc.n	80080b8 <__mdiff+0xe8>
 800809a:	f10c 0203 	add.w	r2, ip, #3
 800809e:	1a52      	subs	r2, r2, r1
 80080a0:	f022 0203 	bic.w	r2, r2, #3
 80080a4:	3903      	subs	r1, #3
 80080a6:	458c      	cmp	ip, r1
 80080a8:	bf38      	it	cc
 80080aa:	2200      	movcc	r2, #0
 80080ac:	441a      	add	r2, r3
 80080ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80080b2:	b17b      	cbz	r3, 80080d4 <__mdiff+0x104>
 80080b4:	6106      	str	r6, [r0, #16]
 80080b6:	e7a5      	b.n	8008004 <__mdiff+0x34>
 80080b8:	f855 8b04 	ldr.w	r8, [r5], #4
 80080bc:	fa17 f488 	uxtah	r4, r7, r8
 80080c0:	1422      	asrs	r2, r4, #16
 80080c2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80080c6:	b2a4      	uxth	r4, r4
 80080c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80080cc:	f84e 4b04 	str.w	r4, [lr], #4
 80080d0:	1417      	asrs	r7, r2, #16
 80080d2:	e7e0      	b.n	8008096 <__mdiff+0xc6>
 80080d4:	3e01      	subs	r6, #1
 80080d6:	e7ea      	b.n	80080ae <__mdiff+0xde>
 80080d8:	0800ad1f 	.word	0x0800ad1f
 80080dc:	0800ad30 	.word	0x0800ad30

080080e0 <__d2b>:
 80080e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080e4:	4689      	mov	r9, r1
 80080e6:	2101      	movs	r1, #1
 80080e8:	ec57 6b10 	vmov	r6, r7, d0
 80080ec:	4690      	mov	r8, r2
 80080ee:	f7ff fcd5 	bl	8007a9c <_Balloc>
 80080f2:	4604      	mov	r4, r0
 80080f4:	b930      	cbnz	r0, 8008104 <__d2b+0x24>
 80080f6:	4602      	mov	r2, r0
 80080f8:	4b25      	ldr	r3, [pc, #148]	; (8008190 <__d2b+0xb0>)
 80080fa:	4826      	ldr	r0, [pc, #152]	; (8008194 <__d2b+0xb4>)
 80080fc:	f240 310a 	movw	r1, #778	; 0x30a
 8008100:	f000 fa70 	bl	80085e4 <__assert_func>
 8008104:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008108:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800810c:	bb35      	cbnz	r5, 800815c <__d2b+0x7c>
 800810e:	2e00      	cmp	r6, #0
 8008110:	9301      	str	r3, [sp, #4]
 8008112:	d028      	beq.n	8008166 <__d2b+0x86>
 8008114:	4668      	mov	r0, sp
 8008116:	9600      	str	r6, [sp, #0]
 8008118:	f7ff fd8c 	bl	8007c34 <__lo0bits>
 800811c:	9900      	ldr	r1, [sp, #0]
 800811e:	b300      	cbz	r0, 8008162 <__d2b+0x82>
 8008120:	9a01      	ldr	r2, [sp, #4]
 8008122:	f1c0 0320 	rsb	r3, r0, #32
 8008126:	fa02 f303 	lsl.w	r3, r2, r3
 800812a:	430b      	orrs	r3, r1
 800812c:	40c2      	lsrs	r2, r0
 800812e:	6163      	str	r3, [r4, #20]
 8008130:	9201      	str	r2, [sp, #4]
 8008132:	9b01      	ldr	r3, [sp, #4]
 8008134:	61a3      	str	r3, [r4, #24]
 8008136:	2b00      	cmp	r3, #0
 8008138:	bf14      	ite	ne
 800813a:	2202      	movne	r2, #2
 800813c:	2201      	moveq	r2, #1
 800813e:	6122      	str	r2, [r4, #16]
 8008140:	b1d5      	cbz	r5, 8008178 <__d2b+0x98>
 8008142:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008146:	4405      	add	r5, r0
 8008148:	f8c9 5000 	str.w	r5, [r9]
 800814c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008150:	f8c8 0000 	str.w	r0, [r8]
 8008154:	4620      	mov	r0, r4
 8008156:	b003      	add	sp, #12
 8008158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800815c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008160:	e7d5      	b.n	800810e <__d2b+0x2e>
 8008162:	6161      	str	r1, [r4, #20]
 8008164:	e7e5      	b.n	8008132 <__d2b+0x52>
 8008166:	a801      	add	r0, sp, #4
 8008168:	f7ff fd64 	bl	8007c34 <__lo0bits>
 800816c:	9b01      	ldr	r3, [sp, #4]
 800816e:	6163      	str	r3, [r4, #20]
 8008170:	2201      	movs	r2, #1
 8008172:	6122      	str	r2, [r4, #16]
 8008174:	3020      	adds	r0, #32
 8008176:	e7e3      	b.n	8008140 <__d2b+0x60>
 8008178:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800817c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008180:	f8c9 0000 	str.w	r0, [r9]
 8008184:	6918      	ldr	r0, [r3, #16]
 8008186:	f7ff fd35 	bl	8007bf4 <__hi0bits>
 800818a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800818e:	e7df      	b.n	8008150 <__d2b+0x70>
 8008190:	0800ad1f 	.word	0x0800ad1f
 8008194:	0800ad30 	.word	0x0800ad30

08008198 <_calloc_r>:
 8008198:	b513      	push	{r0, r1, r4, lr}
 800819a:	434a      	muls	r2, r1
 800819c:	4611      	mov	r1, r2
 800819e:	9201      	str	r2, [sp, #4]
 80081a0:	f000 f85a 	bl	8008258 <_malloc_r>
 80081a4:	4604      	mov	r4, r0
 80081a6:	b118      	cbz	r0, 80081b0 <_calloc_r+0x18>
 80081a8:	9a01      	ldr	r2, [sp, #4]
 80081aa:	2100      	movs	r1, #0
 80081ac:	f7fe f950 	bl	8006450 <memset>
 80081b0:	4620      	mov	r0, r4
 80081b2:	b002      	add	sp, #8
 80081b4:	bd10      	pop	{r4, pc}
	...

080081b8 <_free_r>:
 80081b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081ba:	2900      	cmp	r1, #0
 80081bc:	d048      	beq.n	8008250 <_free_r+0x98>
 80081be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081c2:	9001      	str	r0, [sp, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f1a1 0404 	sub.w	r4, r1, #4
 80081ca:	bfb8      	it	lt
 80081cc:	18e4      	addlt	r4, r4, r3
 80081ce:	f000 fa65 	bl	800869c <__malloc_lock>
 80081d2:	4a20      	ldr	r2, [pc, #128]	; (8008254 <_free_r+0x9c>)
 80081d4:	9801      	ldr	r0, [sp, #4]
 80081d6:	6813      	ldr	r3, [r2, #0]
 80081d8:	4615      	mov	r5, r2
 80081da:	b933      	cbnz	r3, 80081ea <_free_r+0x32>
 80081dc:	6063      	str	r3, [r4, #4]
 80081de:	6014      	str	r4, [r2, #0]
 80081e0:	b003      	add	sp, #12
 80081e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081e6:	f000 ba5f 	b.w	80086a8 <__malloc_unlock>
 80081ea:	42a3      	cmp	r3, r4
 80081ec:	d90b      	bls.n	8008206 <_free_r+0x4e>
 80081ee:	6821      	ldr	r1, [r4, #0]
 80081f0:	1862      	adds	r2, r4, r1
 80081f2:	4293      	cmp	r3, r2
 80081f4:	bf04      	itt	eq
 80081f6:	681a      	ldreq	r2, [r3, #0]
 80081f8:	685b      	ldreq	r3, [r3, #4]
 80081fa:	6063      	str	r3, [r4, #4]
 80081fc:	bf04      	itt	eq
 80081fe:	1852      	addeq	r2, r2, r1
 8008200:	6022      	streq	r2, [r4, #0]
 8008202:	602c      	str	r4, [r5, #0]
 8008204:	e7ec      	b.n	80081e0 <_free_r+0x28>
 8008206:	461a      	mov	r2, r3
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	b10b      	cbz	r3, 8008210 <_free_r+0x58>
 800820c:	42a3      	cmp	r3, r4
 800820e:	d9fa      	bls.n	8008206 <_free_r+0x4e>
 8008210:	6811      	ldr	r1, [r2, #0]
 8008212:	1855      	adds	r5, r2, r1
 8008214:	42a5      	cmp	r5, r4
 8008216:	d10b      	bne.n	8008230 <_free_r+0x78>
 8008218:	6824      	ldr	r4, [r4, #0]
 800821a:	4421      	add	r1, r4
 800821c:	1854      	adds	r4, r2, r1
 800821e:	42a3      	cmp	r3, r4
 8008220:	6011      	str	r1, [r2, #0]
 8008222:	d1dd      	bne.n	80081e0 <_free_r+0x28>
 8008224:	681c      	ldr	r4, [r3, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	6053      	str	r3, [r2, #4]
 800822a:	4421      	add	r1, r4
 800822c:	6011      	str	r1, [r2, #0]
 800822e:	e7d7      	b.n	80081e0 <_free_r+0x28>
 8008230:	d902      	bls.n	8008238 <_free_r+0x80>
 8008232:	230c      	movs	r3, #12
 8008234:	6003      	str	r3, [r0, #0]
 8008236:	e7d3      	b.n	80081e0 <_free_r+0x28>
 8008238:	6825      	ldr	r5, [r4, #0]
 800823a:	1961      	adds	r1, r4, r5
 800823c:	428b      	cmp	r3, r1
 800823e:	bf04      	itt	eq
 8008240:	6819      	ldreq	r1, [r3, #0]
 8008242:	685b      	ldreq	r3, [r3, #4]
 8008244:	6063      	str	r3, [r4, #4]
 8008246:	bf04      	itt	eq
 8008248:	1949      	addeq	r1, r1, r5
 800824a:	6021      	streq	r1, [r4, #0]
 800824c:	6054      	str	r4, [r2, #4]
 800824e:	e7c7      	b.n	80081e0 <_free_r+0x28>
 8008250:	b003      	add	sp, #12
 8008252:	bd30      	pop	{r4, r5, pc}
 8008254:	20002218 	.word	0x20002218

08008258 <_malloc_r>:
 8008258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825a:	1ccd      	adds	r5, r1, #3
 800825c:	f025 0503 	bic.w	r5, r5, #3
 8008260:	3508      	adds	r5, #8
 8008262:	2d0c      	cmp	r5, #12
 8008264:	bf38      	it	cc
 8008266:	250c      	movcc	r5, #12
 8008268:	2d00      	cmp	r5, #0
 800826a:	4606      	mov	r6, r0
 800826c:	db01      	blt.n	8008272 <_malloc_r+0x1a>
 800826e:	42a9      	cmp	r1, r5
 8008270:	d903      	bls.n	800827a <_malloc_r+0x22>
 8008272:	230c      	movs	r3, #12
 8008274:	6033      	str	r3, [r6, #0]
 8008276:	2000      	movs	r0, #0
 8008278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800827a:	f000 fa0f 	bl	800869c <__malloc_lock>
 800827e:	4921      	ldr	r1, [pc, #132]	; (8008304 <_malloc_r+0xac>)
 8008280:	680a      	ldr	r2, [r1, #0]
 8008282:	4614      	mov	r4, r2
 8008284:	b99c      	cbnz	r4, 80082ae <_malloc_r+0x56>
 8008286:	4f20      	ldr	r7, [pc, #128]	; (8008308 <_malloc_r+0xb0>)
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	b923      	cbnz	r3, 8008296 <_malloc_r+0x3e>
 800828c:	4621      	mov	r1, r4
 800828e:	4630      	mov	r0, r6
 8008290:	f000 f998 	bl	80085c4 <_sbrk_r>
 8008294:	6038      	str	r0, [r7, #0]
 8008296:	4629      	mov	r1, r5
 8008298:	4630      	mov	r0, r6
 800829a:	f000 f993 	bl	80085c4 <_sbrk_r>
 800829e:	1c43      	adds	r3, r0, #1
 80082a0:	d123      	bne.n	80082ea <_malloc_r+0x92>
 80082a2:	230c      	movs	r3, #12
 80082a4:	6033      	str	r3, [r6, #0]
 80082a6:	4630      	mov	r0, r6
 80082a8:	f000 f9fe 	bl	80086a8 <__malloc_unlock>
 80082ac:	e7e3      	b.n	8008276 <_malloc_r+0x1e>
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	1b5b      	subs	r3, r3, r5
 80082b2:	d417      	bmi.n	80082e4 <_malloc_r+0x8c>
 80082b4:	2b0b      	cmp	r3, #11
 80082b6:	d903      	bls.n	80082c0 <_malloc_r+0x68>
 80082b8:	6023      	str	r3, [r4, #0]
 80082ba:	441c      	add	r4, r3
 80082bc:	6025      	str	r5, [r4, #0]
 80082be:	e004      	b.n	80082ca <_malloc_r+0x72>
 80082c0:	6863      	ldr	r3, [r4, #4]
 80082c2:	42a2      	cmp	r2, r4
 80082c4:	bf0c      	ite	eq
 80082c6:	600b      	streq	r3, [r1, #0]
 80082c8:	6053      	strne	r3, [r2, #4]
 80082ca:	4630      	mov	r0, r6
 80082cc:	f000 f9ec 	bl	80086a8 <__malloc_unlock>
 80082d0:	f104 000b 	add.w	r0, r4, #11
 80082d4:	1d23      	adds	r3, r4, #4
 80082d6:	f020 0007 	bic.w	r0, r0, #7
 80082da:	1ac2      	subs	r2, r0, r3
 80082dc:	d0cc      	beq.n	8008278 <_malloc_r+0x20>
 80082de:	1a1b      	subs	r3, r3, r0
 80082e0:	50a3      	str	r3, [r4, r2]
 80082e2:	e7c9      	b.n	8008278 <_malloc_r+0x20>
 80082e4:	4622      	mov	r2, r4
 80082e6:	6864      	ldr	r4, [r4, #4]
 80082e8:	e7cc      	b.n	8008284 <_malloc_r+0x2c>
 80082ea:	1cc4      	adds	r4, r0, #3
 80082ec:	f024 0403 	bic.w	r4, r4, #3
 80082f0:	42a0      	cmp	r0, r4
 80082f2:	d0e3      	beq.n	80082bc <_malloc_r+0x64>
 80082f4:	1a21      	subs	r1, r4, r0
 80082f6:	4630      	mov	r0, r6
 80082f8:	f000 f964 	bl	80085c4 <_sbrk_r>
 80082fc:	3001      	adds	r0, #1
 80082fe:	d1dd      	bne.n	80082bc <_malloc_r+0x64>
 8008300:	e7cf      	b.n	80082a2 <_malloc_r+0x4a>
 8008302:	bf00      	nop
 8008304:	20002218 	.word	0x20002218
 8008308:	2000221c 	.word	0x2000221c

0800830c <__ssputs_r>:
 800830c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008310:	688e      	ldr	r6, [r1, #8]
 8008312:	429e      	cmp	r6, r3
 8008314:	4682      	mov	sl, r0
 8008316:	460c      	mov	r4, r1
 8008318:	4690      	mov	r8, r2
 800831a:	461f      	mov	r7, r3
 800831c:	d838      	bhi.n	8008390 <__ssputs_r+0x84>
 800831e:	898a      	ldrh	r2, [r1, #12]
 8008320:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008324:	d032      	beq.n	800838c <__ssputs_r+0x80>
 8008326:	6825      	ldr	r5, [r4, #0]
 8008328:	6909      	ldr	r1, [r1, #16]
 800832a:	eba5 0901 	sub.w	r9, r5, r1
 800832e:	6965      	ldr	r5, [r4, #20]
 8008330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008338:	3301      	adds	r3, #1
 800833a:	444b      	add	r3, r9
 800833c:	106d      	asrs	r5, r5, #1
 800833e:	429d      	cmp	r5, r3
 8008340:	bf38      	it	cc
 8008342:	461d      	movcc	r5, r3
 8008344:	0553      	lsls	r3, r2, #21
 8008346:	d531      	bpl.n	80083ac <__ssputs_r+0xa0>
 8008348:	4629      	mov	r1, r5
 800834a:	f7ff ff85 	bl	8008258 <_malloc_r>
 800834e:	4606      	mov	r6, r0
 8008350:	b950      	cbnz	r0, 8008368 <__ssputs_r+0x5c>
 8008352:	230c      	movs	r3, #12
 8008354:	f8ca 3000 	str.w	r3, [sl]
 8008358:	89a3      	ldrh	r3, [r4, #12]
 800835a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800835e:	81a3      	strh	r3, [r4, #12]
 8008360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008368:	6921      	ldr	r1, [r4, #16]
 800836a:	464a      	mov	r2, r9
 800836c:	f7ff fb88 	bl	8007a80 <memcpy>
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800837a:	81a3      	strh	r3, [r4, #12]
 800837c:	6126      	str	r6, [r4, #16]
 800837e:	6165      	str	r5, [r4, #20]
 8008380:	444e      	add	r6, r9
 8008382:	eba5 0509 	sub.w	r5, r5, r9
 8008386:	6026      	str	r6, [r4, #0]
 8008388:	60a5      	str	r5, [r4, #8]
 800838a:	463e      	mov	r6, r7
 800838c:	42be      	cmp	r6, r7
 800838e:	d900      	bls.n	8008392 <__ssputs_r+0x86>
 8008390:	463e      	mov	r6, r7
 8008392:	4632      	mov	r2, r6
 8008394:	6820      	ldr	r0, [r4, #0]
 8008396:	4641      	mov	r1, r8
 8008398:	f000 f966 	bl	8008668 <memmove>
 800839c:	68a3      	ldr	r3, [r4, #8]
 800839e:	6822      	ldr	r2, [r4, #0]
 80083a0:	1b9b      	subs	r3, r3, r6
 80083a2:	4432      	add	r2, r6
 80083a4:	60a3      	str	r3, [r4, #8]
 80083a6:	6022      	str	r2, [r4, #0]
 80083a8:	2000      	movs	r0, #0
 80083aa:	e7db      	b.n	8008364 <__ssputs_r+0x58>
 80083ac:	462a      	mov	r2, r5
 80083ae:	f000 f981 	bl	80086b4 <_realloc_r>
 80083b2:	4606      	mov	r6, r0
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d1e1      	bne.n	800837c <__ssputs_r+0x70>
 80083b8:	6921      	ldr	r1, [r4, #16]
 80083ba:	4650      	mov	r0, sl
 80083bc:	f7ff fefc 	bl	80081b8 <_free_r>
 80083c0:	e7c7      	b.n	8008352 <__ssputs_r+0x46>
	...

080083c4 <_svfiprintf_r>:
 80083c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c8:	4698      	mov	r8, r3
 80083ca:	898b      	ldrh	r3, [r1, #12]
 80083cc:	061b      	lsls	r3, r3, #24
 80083ce:	b09d      	sub	sp, #116	; 0x74
 80083d0:	4607      	mov	r7, r0
 80083d2:	460d      	mov	r5, r1
 80083d4:	4614      	mov	r4, r2
 80083d6:	d50e      	bpl.n	80083f6 <_svfiprintf_r+0x32>
 80083d8:	690b      	ldr	r3, [r1, #16]
 80083da:	b963      	cbnz	r3, 80083f6 <_svfiprintf_r+0x32>
 80083dc:	2140      	movs	r1, #64	; 0x40
 80083de:	f7ff ff3b 	bl	8008258 <_malloc_r>
 80083e2:	6028      	str	r0, [r5, #0]
 80083e4:	6128      	str	r0, [r5, #16]
 80083e6:	b920      	cbnz	r0, 80083f2 <_svfiprintf_r+0x2e>
 80083e8:	230c      	movs	r3, #12
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083f0:	e0d1      	b.n	8008596 <_svfiprintf_r+0x1d2>
 80083f2:	2340      	movs	r3, #64	; 0x40
 80083f4:	616b      	str	r3, [r5, #20]
 80083f6:	2300      	movs	r3, #0
 80083f8:	9309      	str	r3, [sp, #36]	; 0x24
 80083fa:	2320      	movs	r3, #32
 80083fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008400:	f8cd 800c 	str.w	r8, [sp, #12]
 8008404:	2330      	movs	r3, #48	; 0x30
 8008406:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80085b0 <_svfiprintf_r+0x1ec>
 800840a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800840e:	f04f 0901 	mov.w	r9, #1
 8008412:	4623      	mov	r3, r4
 8008414:	469a      	mov	sl, r3
 8008416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800841a:	b10a      	cbz	r2, 8008420 <_svfiprintf_r+0x5c>
 800841c:	2a25      	cmp	r2, #37	; 0x25
 800841e:	d1f9      	bne.n	8008414 <_svfiprintf_r+0x50>
 8008420:	ebba 0b04 	subs.w	fp, sl, r4
 8008424:	d00b      	beq.n	800843e <_svfiprintf_r+0x7a>
 8008426:	465b      	mov	r3, fp
 8008428:	4622      	mov	r2, r4
 800842a:	4629      	mov	r1, r5
 800842c:	4638      	mov	r0, r7
 800842e:	f7ff ff6d 	bl	800830c <__ssputs_r>
 8008432:	3001      	adds	r0, #1
 8008434:	f000 80aa 	beq.w	800858c <_svfiprintf_r+0x1c8>
 8008438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800843a:	445a      	add	r2, fp
 800843c:	9209      	str	r2, [sp, #36]	; 0x24
 800843e:	f89a 3000 	ldrb.w	r3, [sl]
 8008442:	2b00      	cmp	r3, #0
 8008444:	f000 80a2 	beq.w	800858c <_svfiprintf_r+0x1c8>
 8008448:	2300      	movs	r3, #0
 800844a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800844e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008452:	f10a 0a01 	add.w	sl, sl, #1
 8008456:	9304      	str	r3, [sp, #16]
 8008458:	9307      	str	r3, [sp, #28]
 800845a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800845e:	931a      	str	r3, [sp, #104]	; 0x68
 8008460:	4654      	mov	r4, sl
 8008462:	2205      	movs	r2, #5
 8008464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008468:	4851      	ldr	r0, [pc, #324]	; (80085b0 <_svfiprintf_r+0x1ec>)
 800846a:	f7f7 fec1 	bl	80001f0 <memchr>
 800846e:	9a04      	ldr	r2, [sp, #16]
 8008470:	b9d8      	cbnz	r0, 80084aa <_svfiprintf_r+0xe6>
 8008472:	06d0      	lsls	r0, r2, #27
 8008474:	bf44      	itt	mi
 8008476:	2320      	movmi	r3, #32
 8008478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800847c:	0711      	lsls	r1, r2, #28
 800847e:	bf44      	itt	mi
 8008480:	232b      	movmi	r3, #43	; 0x2b
 8008482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008486:	f89a 3000 	ldrb.w	r3, [sl]
 800848a:	2b2a      	cmp	r3, #42	; 0x2a
 800848c:	d015      	beq.n	80084ba <_svfiprintf_r+0xf6>
 800848e:	9a07      	ldr	r2, [sp, #28]
 8008490:	4654      	mov	r4, sl
 8008492:	2000      	movs	r0, #0
 8008494:	f04f 0c0a 	mov.w	ip, #10
 8008498:	4621      	mov	r1, r4
 800849a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800849e:	3b30      	subs	r3, #48	; 0x30
 80084a0:	2b09      	cmp	r3, #9
 80084a2:	d94e      	bls.n	8008542 <_svfiprintf_r+0x17e>
 80084a4:	b1b0      	cbz	r0, 80084d4 <_svfiprintf_r+0x110>
 80084a6:	9207      	str	r2, [sp, #28]
 80084a8:	e014      	b.n	80084d4 <_svfiprintf_r+0x110>
 80084aa:	eba0 0308 	sub.w	r3, r0, r8
 80084ae:	fa09 f303 	lsl.w	r3, r9, r3
 80084b2:	4313      	orrs	r3, r2
 80084b4:	9304      	str	r3, [sp, #16]
 80084b6:	46a2      	mov	sl, r4
 80084b8:	e7d2      	b.n	8008460 <_svfiprintf_r+0x9c>
 80084ba:	9b03      	ldr	r3, [sp, #12]
 80084bc:	1d19      	adds	r1, r3, #4
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	9103      	str	r1, [sp, #12]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	bfbb      	ittet	lt
 80084c6:	425b      	neglt	r3, r3
 80084c8:	f042 0202 	orrlt.w	r2, r2, #2
 80084cc:	9307      	strge	r3, [sp, #28]
 80084ce:	9307      	strlt	r3, [sp, #28]
 80084d0:	bfb8      	it	lt
 80084d2:	9204      	strlt	r2, [sp, #16]
 80084d4:	7823      	ldrb	r3, [r4, #0]
 80084d6:	2b2e      	cmp	r3, #46	; 0x2e
 80084d8:	d10c      	bne.n	80084f4 <_svfiprintf_r+0x130>
 80084da:	7863      	ldrb	r3, [r4, #1]
 80084dc:	2b2a      	cmp	r3, #42	; 0x2a
 80084de:	d135      	bne.n	800854c <_svfiprintf_r+0x188>
 80084e0:	9b03      	ldr	r3, [sp, #12]
 80084e2:	1d1a      	adds	r2, r3, #4
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	9203      	str	r2, [sp, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	bfb8      	it	lt
 80084ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80084f0:	3402      	adds	r4, #2
 80084f2:	9305      	str	r3, [sp, #20]
 80084f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80085c0 <_svfiprintf_r+0x1fc>
 80084f8:	7821      	ldrb	r1, [r4, #0]
 80084fa:	2203      	movs	r2, #3
 80084fc:	4650      	mov	r0, sl
 80084fe:	f7f7 fe77 	bl	80001f0 <memchr>
 8008502:	b140      	cbz	r0, 8008516 <_svfiprintf_r+0x152>
 8008504:	2340      	movs	r3, #64	; 0x40
 8008506:	eba0 000a 	sub.w	r0, r0, sl
 800850a:	fa03 f000 	lsl.w	r0, r3, r0
 800850e:	9b04      	ldr	r3, [sp, #16]
 8008510:	4303      	orrs	r3, r0
 8008512:	3401      	adds	r4, #1
 8008514:	9304      	str	r3, [sp, #16]
 8008516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800851a:	4826      	ldr	r0, [pc, #152]	; (80085b4 <_svfiprintf_r+0x1f0>)
 800851c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008520:	2206      	movs	r2, #6
 8008522:	f7f7 fe65 	bl	80001f0 <memchr>
 8008526:	2800      	cmp	r0, #0
 8008528:	d038      	beq.n	800859c <_svfiprintf_r+0x1d8>
 800852a:	4b23      	ldr	r3, [pc, #140]	; (80085b8 <_svfiprintf_r+0x1f4>)
 800852c:	bb1b      	cbnz	r3, 8008576 <_svfiprintf_r+0x1b2>
 800852e:	9b03      	ldr	r3, [sp, #12]
 8008530:	3307      	adds	r3, #7
 8008532:	f023 0307 	bic.w	r3, r3, #7
 8008536:	3308      	adds	r3, #8
 8008538:	9303      	str	r3, [sp, #12]
 800853a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800853c:	4433      	add	r3, r6
 800853e:	9309      	str	r3, [sp, #36]	; 0x24
 8008540:	e767      	b.n	8008412 <_svfiprintf_r+0x4e>
 8008542:	fb0c 3202 	mla	r2, ip, r2, r3
 8008546:	460c      	mov	r4, r1
 8008548:	2001      	movs	r0, #1
 800854a:	e7a5      	b.n	8008498 <_svfiprintf_r+0xd4>
 800854c:	2300      	movs	r3, #0
 800854e:	3401      	adds	r4, #1
 8008550:	9305      	str	r3, [sp, #20]
 8008552:	4619      	mov	r1, r3
 8008554:	f04f 0c0a 	mov.w	ip, #10
 8008558:	4620      	mov	r0, r4
 800855a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800855e:	3a30      	subs	r2, #48	; 0x30
 8008560:	2a09      	cmp	r2, #9
 8008562:	d903      	bls.n	800856c <_svfiprintf_r+0x1a8>
 8008564:	2b00      	cmp	r3, #0
 8008566:	d0c5      	beq.n	80084f4 <_svfiprintf_r+0x130>
 8008568:	9105      	str	r1, [sp, #20]
 800856a:	e7c3      	b.n	80084f4 <_svfiprintf_r+0x130>
 800856c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008570:	4604      	mov	r4, r0
 8008572:	2301      	movs	r3, #1
 8008574:	e7f0      	b.n	8008558 <_svfiprintf_r+0x194>
 8008576:	ab03      	add	r3, sp, #12
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	462a      	mov	r2, r5
 800857c:	4b0f      	ldr	r3, [pc, #60]	; (80085bc <_svfiprintf_r+0x1f8>)
 800857e:	a904      	add	r1, sp, #16
 8008580:	4638      	mov	r0, r7
 8008582:	f7fe f80d 	bl	80065a0 <_printf_float>
 8008586:	1c42      	adds	r2, r0, #1
 8008588:	4606      	mov	r6, r0
 800858a:	d1d6      	bne.n	800853a <_svfiprintf_r+0x176>
 800858c:	89ab      	ldrh	r3, [r5, #12]
 800858e:	065b      	lsls	r3, r3, #25
 8008590:	f53f af2c 	bmi.w	80083ec <_svfiprintf_r+0x28>
 8008594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008596:	b01d      	add	sp, #116	; 0x74
 8008598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859c:	ab03      	add	r3, sp, #12
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	462a      	mov	r2, r5
 80085a2:	4b06      	ldr	r3, [pc, #24]	; (80085bc <_svfiprintf_r+0x1f8>)
 80085a4:	a904      	add	r1, sp, #16
 80085a6:	4638      	mov	r0, r7
 80085a8:	f7fe fa9e 	bl	8006ae8 <_printf_i>
 80085ac:	e7eb      	b.n	8008586 <_svfiprintf_r+0x1c2>
 80085ae:	bf00      	nop
 80085b0:	0800ae8c 	.word	0x0800ae8c
 80085b4:	0800ae96 	.word	0x0800ae96
 80085b8:	080065a1 	.word	0x080065a1
 80085bc:	0800830d 	.word	0x0800830d
 80085c0:	0800ae92 	.word	0x0800ae92

080085c4 <_sbrk_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	4d06      	ldr	r5, [pc, #24]	; (80085e0 <_sbrk_r+0x1c>)
 80085c8:	2300      	movs	r3, #0
 80085ca:	4604      	mov	r4, r0
 80085cc:	4608      	mov	r0, r1
 80085ce:	602b      	str	r3, [r5, #0]
 80085d0:	f7fb fb4c 	bl	8003c6c <_sbrk>
 80085d4:	1c43      	adds	r3, r0, #1
 80085d6:	d102      	bne.n	80085de <_sbrk_r+0x1a>
 80085d8:	682b      	ldr	r3, [r5, #0]
 80085da:	b103      	cbz	r3, 80085de <_sbrk_r+0x1a>
 80085dc:	6023      	str	r3, [r4, #0]
 80085de:	bd38      	pop	{r3, r4, r5, pc}
 80085e0:	2000e868 	.word	0x2000e868

080085e4 <__assert_func>:
 80085e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085e6:	4614      	mov	r4, r2
 80085e8:	461a      	mov	r2, r3
 80085ea:	4b09      	ldr	r3, [pc, #36]	; (8008610 <__assert_func+0x2c>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4605      	mov	r5, r0
 80085f0:	68d8      	ldr	r0, [r3, #12]
 80085f2:	b14c      	cbz	r4, 8008608 <__assert_func+0x24>
 80085f4:	4b07      	ldr	r3, [pc, #28]	; (8008614 <__assert_func+0x30>)
 80085f6:	9100      	str	r1, [sp, #0]
 80085f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085fc:	4906      	ldr	r1, [pc, #24]	; (8008618 <__assert_func+0x34>)
 80085fe:	462b      	mov	r3, r5
 8008600:	f000 f80e 	bl	8008620 <fiprintf>
 8008604:	f000 faa4 	bl	8008b50 <abort>
 8008608:	4b04      	ldr	r3, [pc, #16]	; (800861c <__assert_func+0x38>)
 800860a:	461c      	mov	r4, r3
 800860c:	e7f3      	b.n	80085f6 <__assert_func+0x12>
 800860e:	bf00      	nop
 8008610:	20002014 	.word	0x20002014
 8008614:	0800ae9d 	.word	0x0800ae9d
 8008618:	0800aeaa 	.word	0x0800aeaa
 800861c:	0800aed8 	.word	0x0800aed8

08008620 <fiprintf>:
 8008620:	b40e      	push	{r1, r2, r3}
 8008622:	b503      	push	{r0, r1, lr}
 8008624:	4601      	mov	r1, r0
 8008626:	ab03      	add	r3, sp, #12
 8008628:	4805      	ldr	r0, [pc, #20]	; (8008640 <fiprintf+0x20>)
 800862a:	f853 2b04 	ldr.w	r2, [r3], #4
 800862e:	6800      	ldr	r0, [r0, #0]
 8008630:	9301      	str	r3, [sp, #4]
 8008632:	f000 f88f 	bl	8008754 <_vfiprintf_r>
 8008636:	b002      	add	sp, #8
 8008638:	f85d eb04 	ldr.w	lr, [sp], #4
 800863c:	b003      	add	sp, #12
 800863e:	4770      	bx	lr
 8008640:	20002014 	.word	0x20002014

08008644 <__ascii_mbtowc>:
 8008644:	b082      	sub	sp, #8
 8008646:	b901      	cbnz	r1, 800864a <__ascii_mbtowc+0x6>
 8008648:	a901      	add	r1, sp, #4
 800864a:	b142      	cbz	r2, 800865e <__ascii_mbtowc+0x1a>
 800864c:	b14b      	cbz	r3, 8008662 <__ascii_mbtowc+0x1e>
 800864e:	7813      	ldrb	r3, [r2, #0]
 8008650:	600b      	str	r3, [r1, #0]
 8008652:	7812      	ldrb	r2, [r2, #0]
 8008654:	1e10      	subs	r0, r2, #0
 8008656:	bf18      	it	ne
 8008658:	2001      	movne	r0, #1
 800865a:	b002      	add	sp, #8
 800865c:	4770      	bx	lr
 800865e:	4610      	mov	r0, r2
 8008660:	e7fb      	b.n	800865a <__ascii_mbtowc+0x16>
 8008662:	f06f 0001 	mvn.w	r0, #1
 8008666:	e7f8      	b.n	800865a <__ascii_mbtowc+0x16>

08008668 <memmove>:
 8008668:	4288      	cmp	r0, r1
 800866a:	b510      	push	{r4, lr}
 800866c:	eb01 0402 	add.w	r4, r1, r2
 8008670:	d902      	bls.n	8008678 <memmove+0x10>
 8008672:	4284      	cmp	r4, r0
 8008674:	4623      	mov	r3, r4
 8008676:	d807      	bhi.n	8008688 <memmove+0x20>
 8008678:	1e43      	subs	r3, r0, #1
 800867a:	42a1      	cmp	r1, r4
 800867c:	d008      	beq.n	8008690 <memmove+0x28>
 800867e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008682:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008686:	e7f8      	b.n	800867a <memmove+0x12>
 8008688:	4402      	add	r2, r0
 800868a:	4601      	mov	r1, r0
 800868c:	428a      	cmp	r2, r1
 800868e:	d100      	bne.n	8008692 <memmove+0x2a>
 8008690:	bd10      	pop	{r4, pc}
 8008692:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008696:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800869a:	e7f7      	b.n	800868c <memmove+0x24>

0800869c <__malloc_lock>:
 800869c:	4801      	ldr	r0, [pc, #4]	; (80086a4 <__malloc_lock+0x8>)
 800869e:	f000 bc17 	b.w	8008ed0 <__retarget_lock_acquire_recursive>
 80086a2:	bf00      	nop
 80086a4:	2000e870 	.word	0x2000e870

080086a8 <__malloc_unlock>:
 80086a8:	4801      	ldr	r0, [pc, #4]	; (80086b0 <__malloc_unlock+0x8>)
 80086aa:	f000 bc12 	b.w	8008ed2 <__retarget_lock_release_recursive>
 80086ae:	bf00      	nop
 80086b0:	2000e870 	.word	0x2000e870

080086b4 <_realloc_r>:
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b6:	4607      	mov	r7, r0
 80086b8:	4614      	mov	r4, r2
 80086ba:	460e      	mov	r6, r1
 80086bc:	b921      	cbnz	r1, 80086c8 <_realloc_r+0x14>
 80086be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80086c2:	4611      	mov	r1, r2
 80086c4:	f7ff bdc8 	b.w	8008258 <_malloc_r>
 80086c8:	b922      	cbnz	r2, 80086d4 <_realloc_r+0x20>
 80086ca:	f7ff fd75 	bl	80081b8 <_free_r>
 80086ce:	4625      	mov	r5, r4
 80086d0:	4628      	mov	r0, r5
 80086d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086d4:	f000 fc62 	bl	8008f9c <_malloc_usable_size_r>
 80086d8:	42a0      	cmp	r0, r4
 80086da:	d20f      	bcs.n	80086fc <_realloc_r+0x48>
 80086dc:	4621      	mov	r1, r4
 80086de:	4638      	mov	r0, r7
 80086e0:	f7ff fdba 	bl	8008258 <_malloc_r>
 80086e4:	4605      	mov	r5, r0
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d0f2      	beq.n	80086d0 <_realloc_r+0x1c>
 80086ea:	4631      	mov	r1, r6
 80086ec:	4622      	mov	r2, r4
 80086ee:	f7ff f9c7 	bl	8007a80 <memcpy>
 80086f2:	4631      	mov	r1, r6
 80086f4:	4638      	mov	r0, r7
 80086f6:	f7ff fd5f 	bl	80081b8 <_free_r>
 80086fa:	e7e9      	b.n	80086d0 <_realloc_r+0x1c>
 80086fc:	4635      	mov	r5, r6
 80086fe:	e7e7      	b.n	80086d0 <_realloc_r+0x1c>

08008700 <__sfputc_r>:
 8008700:	6893      	ldr	r3, [r2, #8]
 8008702:	3b01      	subs	r3, #1
 8008704:	2b00      	cmp	r3, #0
 8008706:	b410      	push	{r4}
 8008708:	6093      	str	r3, [r2, #8]
 800870a:	da08      	bge.n	800871e <__sfputc_r+0x1e>
 800870c:	6994      	ldr	r4, [r2, #24]
 800870e:	42a3      	cmp	r3, r4
 8008710:	db01      	blt.n	8008716 <__sfputc_r+0x16>
 8008712:	290a      	cmp	r1, #10
 8008714:	d103      	bne.n	800871e <__sfputc_r+0x1e>
 8008716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800871a:	f000 b94b 	b.w	80089b4 <__swbuf_r>
 800871e:	6813      	ldr	r3, [r2, #0]
 8008720:	1c58      	adds	r0, r3, #1
 8008722:	6010      	str	r0, [r2, #0]
 8008724:	7019      	strb	r1, [r3, #0]
 8008726:	4608      	mov	r0, r1
 8008728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800872c:	4770      	bx	lr

0800872e <__sfputs_r>:
 800872e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008730:	4606      	mov	r6, r0
 8008732:	460f      	mov	r7, r1
 8008734:	4614      	mov	r4, r2
 8008736:	18d5      	adds	r5, r2, r3
 8008738:	42ac      	cmp	r4, r5
 800873a:	d101      	bne.n	8008740 <__sfputs_r+0x12>
 800873c:	2000      	movs	r0, #0
 800873e:	e007      	b.n	8008750 <__sfputs_r+0x22>
 8008740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008744:	463a      	mov	r2, r7
 8008746:	4630      	mov	r0, r6
 8008748:	f7ff ffda 	bl	8008700 <__sfputc_r>
 800874c:	1c43      	adds	r3, r0, #1
 800874e:	d1f3      	bne.n	8008738 <__sfputs_r+0xa>
 8008750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008754 <_vfiprintf_r>:
 8008754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008758:	460d      	mov	r5, r1
 800875a:	b09d      	sub	sp, #116	; 0x74
 800875c:	4614      	mov	r4, r2
 800875e:	4698      	mov	r8, r3
 8008760:	4606      	mov	r6, r0
 8008762:	b118      	cbz	r0, 800876c <_vfiprintf_r+0x18>
 8008764:	6983      	ldr	r3, [r0, #24]
 8008766:	b90b      	cbnz	r3, 800876c <_vfiprintf_r+0x18>
 8008768:	f000 fb14 	bl	8008d94 <__sinit>
 800876c:	4b89      	ldr	r3, [pc, #548]	; (8008994 <_vfiprintf_r+0x240>)
 800876e:	429d      	cmp	r5, r3
 8008770:	d11b      	bne.n	80087aa <_vfiprintf_r+0x56>
 8008772:	6875      	ldr	r5, [r6, #4]
 8008774:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008776:	07d9      	lsls	r1, r3, #31
 8008778:	d405      	bmi.n	8008786 <_vfiprintf_r+0x32>
 800877a:	89ab      	ldrh	r3, [r5, #12]
 800877c:	059a      	lsls	r2, r3, #22
 800877e:	d402      	bmi.n	8008786 <_vfiprintf_r+0x32>
 8008780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008782:	f000 fba5 	bl	8008ed0 <__retarget_lock_acquire_recursive>
 8008786:	89ab      	ldrh	r3, [r5, #12]
 8008788:	071b      	lsls	r3, r3, #28
 800878a:	d501      	bpl.n	8008790 <_vfiprintf_r+0x3c>
 800878c:	692b      	ldr	r3, [r5, #16]
 800878e:	b9eb      	cbnz	r3, 80087cc <_vfiprintf_r+0x78>
 8008790:	4629      	mov	r1, r5
 8008792:	4630      	mov	r0, r6
 8008794:	f000 f96e 	bl	8008a74 <__swsetup_r>
 8008798:	b1c0      	cbz	r0, 80087cc <_vfiprintf_r+0x78>
 800879a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800879c:	07dc      	lsls	r4, r3, #31
 800879e:	d50e      	bpl.n	80087be <_vfiprintf_r+0x6a>
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087a4:	b01d      	add	sp, #116	; 0x74
 80087a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087aa:	4b7b      	ldr	r3, [pc, #492]	; (8008998 <_vfiprintf_r+0x244>)
 80087ac:	429d      	cmp	r5, r3
 80087ae:	d101      	bne.n	80087b4 <_vfiprintf_r+0x60>
 80087b0:	68b5      	ldr	r5, [r6, #8]
 80087b2:	e7df      	b.n	8008774 <_vfiprintf_r+0x20>
 80087b4:	4b79      	ldr	r3, [pc, #484]	; (800899c <_vfiprintf_r+0x248>)
 80087b6:	429d      	cmp	r5, r3
 80087b8:	bf08      	it	eq
 80087ba:	68f5      	ldreq	r5, [r6, #12]
 80087bc:	e7da      	b.n	8008774 <_vfiprintf_r+0x20>
 80087be:	89ab      	ldrh	r3, [r5, #12]
 80087c0:	0598      	lsls	r0, r3, #22
 80087c2:	d4ed      	bmi.n	80087a0 <_vfiprintf_r+0x4c>
 80087c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087c6:	f000 fb84 	bl	8008ed2 <__retarget_lock_release_recursive>
 80087ca:	e7e9      	b.n	80087a0 <_vfiprintf_r+0x4c>
 80087cc:	2300      	movs	r3, #0
 80087ce:	9309      	str	r3, [sp, #36]	; 0x24
 80087d0:	2320      	movs	r3, #32
 80087d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80087da:	2330      	movs	r3, #48	; 0x30
 80087dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80089a0 <_vfiprintf_r+0x24c>
 80087e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087e4:	f04f 0901 	mov.w	r9, #1
 80087e8:	4623      	mov	r3, r4
 80087ea:	469a      	mov	sl, r3
 80087ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087f0:	b10a      	cbz	r2, 80087f6 <_vfiprintf_r+0xa2>
 80087f2:	2a25      	cmp	r2, #37	; 0x25
 80087f4:	d1f9      	bne.n	80087ea <_vfiprintf_r+0x96>
 80087f6:	ebba 0b04 	subs.w	fp, sl, r4
 80087fa:	d00b      	beq.n	8008814 <_vfiprintf_r+0xc0>
 80087fc:	465b      	mov	r3, fp
 80087fe:	4622      	mov	r2, r4
 8008800:	4629      	mov	r1, r5
 8008802:	4630      	mov	r0, r6
 8008804:	f7ff ff93 	bl	800872e <__sfputs_r>
 8008808:	3001      	adds	r0, #1
 800880a:	f000 80aa 	beq.w	8008962 <_vfiprintf_r+0x20e>
 800880e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008810:	445a      	add	r2, fp
 8008812:	9209      	str	r2, [sp, #36]	; 0x24
 8008814:	f89a 3000 	ldrb.w	r3, [sl]
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 80a2 	beq.w	8008962 <_vfiprintf_r+0x20e>
 800881e:	2300      	movs	r3, #0
 8008820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008828:	f10a 0a01 	add.w	sl, sl, #1
 800882c:	9304      	str	r3, [sp, #16]
 800882e:	9307      	str	r3, [sp, #28]
 8008830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008834:	931a      	str	r3, [sp, #104]	; 0x68
 8008836:	4654      	mov	r4, sl
 8008838:	2205      	movs	r2, #5
 800883a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800883e:	4858      	ldr	r0, [pc, #352]	; (80089a0 <_vfiprintf_r+0x24c>)
 8008840:	f7f7 fcd6 	bl	80001f0 <memchr>
 8008844:	9a04      	ldr	r2, [sp, #16]
 8008846:	b9d8      	cbnz	r0, 8008880 <_vfiprintf_r+0x12c>
 8008848:	06d1      	lsls	r1, r2, #27
 800884a:	bf44      	itt	mi
 800884c:	2320      	movmi	r3, #32
 800884e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008852:	0713      	lsls	r3, r2, #28
 8008854:	bf44      	itt	mi
 8008856:	232b      	movmi	r3, #43	; 0x2b
 8008858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800885c:	f89a 3000 	ldrb.w	r3, [sl]
 8008860:	2b2a      	cmp	r3, #42	; 0x2a
 8008862:	d015      	beq.n	8008890 <_vfiprintf_r+0x13c>
 8008864:	9a07      	ldr	r2, [sp, #28]
 8008866:	4654      	mov	r4, sl
 8008868:	2000      	movs	r0, #0
 800886a:	f04f 0c0a 	mov.w	ip, #10
 800886e:	4621      	mov	r1, r4
 8008870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008874:	3b30      	subs	r3, #48	; 0x30
 8008876:	2b09      	cmp	r3, #9
 8008878:	d94e      	bls.n	8008918 <_vfiprintf_r+0x1c4>
 800887a:	b1b0      	cbz	r0, 80088aa <_vfiprintf_r+0x156>
 800887c:	9207      	str	r2, [sp, #28]
 800887e:	e014      	b.n	80088aa <_vfiprintf_r+0x156>
 8008880:	eba0 0308 	sub.w	r3, r0, r8
 8008884:	fa09 f303 	lsl.w	r3, r9, r3
 8008888:	4313      	orrs	r3, r2
 800888a:	9304      	str	r3, [sp, #16]
 800888c:	46a2      	mov	sl, r4
 800888e:	e7d2      	b.n	8008836 <_vfiprintf_r+0xe2>
 8008890:	9b03      	ldr	r3, [sp, #12]
 8008892:	1d19      	adds	r1, r3, #4
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	9103      	str	r1, [sp, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	bfbb      	ittet	lt
 800889c:	425b      	neglt	r3, r3
 800889e:	f042 0202 	orrlt.w	r2, r2, #2
 80088a2:	9307      	strge	r3, [sp, #28]
 80088a4:	9307      	strlt	r3, [sp, #28]
 80088a6:	bfb8      	it	lt
 80088a8:	9204      	strlt	r2, [sp, #16]
 80088aa:	7823      	ldrb	r3, [r4, #0]
 80088ac:	2b2e      	cmp	r3, #46	; 0x2e
 80088ae:	d10c      	bne.n	80088ca <_vfiprintf_r+0x176>
 80088b0:	7863      	ldrb	r3, [r4, #1]
 80088b2:	2b2a      	cmp	r3, #42	; 0x2a
 80088b4:	d135      	bne.n	8008922 <_vfiprintf_r+0x1ce>
 80088b6:	9b03      	ldr	r3, [sp, #12]
 80088b8:	1d1a      	adds	r2, r3, #4
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	9203      	str	r2, [sp, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	bfb8      	it	lt
 80088c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80088c6:	3402      	adds	r4, #2
 80088c8:	9305      	str	r3, [sp, #20]
 80088ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80089b0 <_vfiprintf_r+0x25c>
 80088ce:	7821      	ldrb	r1, [r4, #0]
 80088d0:	2203      	movs	r2, #3
 80088d2:	4650      	mov	r0, sl
 80088d4:	f7f7 fc8c 	bl	80001f0 <memchr>
 80088d8:	b140      	cbz	r0, 80088ec <_vfiprintf_r+0x198>
 80088da:	2340      	movs	r3, #64	; 0x40
 80088dc:	eba0 000a 	sub.w	r0, r0, sl
 80088e0:	fa03 f000 	lsl.w	r0, r3, r0
 80088e4:	9b04      	ldr	r3, [sp, #16]
 80088e6:	4303      	orrs	r3, r0
 80088e8:	3401      	adds	r4, #1
 80088ea:	9304      	str	r3, [sp, #16]
 80088ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f0:	482c      	ldr	r0, [pc, #176]	; (80089a4 <_vfiprintf_r+0x250>)
 80088f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088f6:	2206      	movs	r2, #6
 80088f8:	f7f7 fc7a 	bl	80001f0 <memchr>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d03f      	beq.n	8008980 <_vfiprintf_r+0x22c>
 8008900:	4b29      	ldr	r3, [pc, #164]	; (80089a8 <_vfiprintf_r+0x254>)
 8008902:	bb1b      	cbnz	r3, 800894c <_vfiprintf_r+0x1f8>
 8008904:	9b03      	ldr	r3, [sp, #12]
 8008906:	3307      	adds	r3, #7
 8008908:	f023 0307 	bic.w	r3, r3, #7
 800890c:	3308      	adds	r3, #8
 800890e:	9303      	str	r3, [sp, #12]
 8008910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008912:	443b      	add	r3, r7
 8008914:	9309      	str	r3, [sp, #36]	; 0x24
 8008916:	e767      	b.n	80087e8 <_vfiprintf_r+0x94>
 8008918:	fb0c 3202 	mla	r2, ip, r2, r3
 800891c:	460c      	mov	r4, r1
 800891e:	2001      	movs	r0, #1
 8008920:	e7a5      	b.n	800886e <_vfiprintf_r+0x11a>
 8008922:	2300      	movs	r3, #0
 8008924:	3401      	adds	r4, #1
 8008926:	9305      	str	r3, [sp, #20]
 8008928:	4619      	mov	r1, r3
 800892a:	f04f 0c0a 	mov.w	ip, #10
 800892e:	4620      	mov	r0, r4
 8008930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008934:	3a30      	subs	r2, #48	; 0x30
 8008936:	2a09      	cmp	r2, #9
 8008938:	d903      	bls.n	8008942 <_vfiprintf_r+0x1ee>
 800893a:	2b00      	cmp	r3, #0
 800893c:	d0c5      	beq.n	80088ca <_vfiprintf_r+0x176>
 800893e:	9105      	str	r1, [sp, #20]
 8008940:	e7c3      	b.n	80088ca <_vfiprintf_r+0x176>
 8008942:	fb0c 2101 	mla	r1, ip, r1, r2
 8008946:	4604      	mov	r4, r0
 8008948:	2301      	movs	r3, #1
 800894a:	e7f0      	b.n	800892e <_vfiprintf_r+0x1da>
 800894c:	ab03      	add	r3, sp, #12
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	462a      	mov	r2, r5
 8008952:	4b16      	ldr	r3, [pc, #88]	; (80089ac <_vfiprintf_r+0x258>)
 8008954:	a904      	add	r1, sp, #16
 8008956:	4630      	mov	r0, r6
 8008958:	f7fd fe22 	bl	80065a0 <_printf_float>
 800895c:	4607      	mov	r7, r0
 800895e:	1c78      	adds	r0, r7, #1
 8008960:	d1d6      	bne.n	8008910 <_vfiprintf_r+0x1bc>
 8008962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008964:	07d9      	lsls	r1, r3, #31
 8008966:	d405      	bmi.n	8008974 <_vfiprintf_r+0x220>
 8008968:	89ab      	ldrh	r3, [r5, #12]
 800896a:	059a      	lsls	r2, r3, #22
 800896c:	d402      	bmi.n	8008974 <_vfiprintf_r+0x220>
 800896e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008970:	f000 faaf 	bl	8008ed2 <__retarget_lock_release_recursive>
 8008974:	89ab      	ldrh	r3, [r5, #12]
 8008976:	065b      	lsls	r3, r3, #25
 8008978:	f53f af12 	bmi.w	80087a0 <_vfiprintf_r+0x4c>
 800897c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800897e:	e711      	b.n	80087a4 <_vfiprintf_r+0x50>
 8008980:	ab03      	add	r3, sp, #12
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	462a      	mov	r2, r5
 8008986:	4b09      	ldr	r3, [pc, #36]	; (80089ac <_vfiprintf_r+0x258>)
 8008988:	a904      	add	r1, sp, #16
 800898a:	4630      	mov	r0, r6
 800898c:	f7fe f8ac 	bl	8006ae8 <_printf_i>
 8008990:	e7e4      	b.n	800895c <_vfiprintf_r+0x208>
 8008992:	bf00      	nop
 8008994:	0800b004 	.word	0x0800b004
 8008998:	0800b024 	.word	0x0800b024
 800899c:	0800afe4 	.word	0x0800afe4
 80089a0:	0800ae8c 	.word	0x0800ae8c
 80089a4:	0800ae96 	.word	0x0800ae96
 80089a8:	080065a1 	.word	0x080065a1
 80089ac:	0800872f 	.word	0x0800872f
 80089b0:	0800ae92 	.word	0x0800ae92

080089b4 <__swbuf_r>:
 80089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b6:	460e      	mov	r6, r1
 80089b8:	4614      	mov	r4, r2
 80089ba:	4605      	mov	r5, r0
 80089bc:	b118      	cbz	r0, 80089c6 <__swbuf_r+0x12>
 80089be:	6983      	ldr	r3, [r0, #24]
 80089c0:	b90b      	cbnz	r3, 80089c6 <__swbuf_r+0x12>
 80089c2:	f000 f9e7 	bl	8008d94 <__sinit>
 80089c6:	4b21      	ldr	r3, [pc, #132]	; (8008a4c <__swbuf_r+0x98>)
 80089c8:	429c      	cmp	r4, r3
 80089ca:	d12b      	bne.n	8008a24 <__swbuf_r+0x70>
 80089cc:	686c      	ldr	r4, [r5, #4]
 80089ce:	69a3      	ldr	r3, [r4, #24]
 80089d0:	60a3      	str	r3, [r4, #8]
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	071a      	lsls	r2, r3, #28
 80089d6:	d52f      	bpl.n	8008a38 <__swbuf_r+0x84>
 80089d8:	6923      	ldr	r3, [r4, #16]
 80089da:	b36b      	cbz	r3, 8008a38 <__swbuf_r+0x84>
 80089dc:	6923      	ldr	r3, [r4, #16]
 80089de:	6820      	ldr	r0, [r4, #0]
 80089e0:	1ac0      	subs	r0, r0, r3
 80089e2:	6963      	ldr	r3, [r4, #20]
 80089e4:	b2f6      	uxtb	r6, r6
 80089e6:	4283      	cmp	r3, r0
 80089e8:	4637      	mov	r7, r6
 80089ea:	dc04      	bgt.n	80089f6 <__swbuf_r+0x42>
 80089ec:	4621      	mov	r1, r4
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 f93c 	bl	8008c6c <_fflush_r>
 80089f4:	bb30      	cbnz	r0, 8008a44 <__swbuf_r+0x90>
 80089f6:	68a3      	ldr	r3, [r4, #8]
 80089f8:	3b01      	subs	r3, #1
 80089fa:	60a3      	str	r3, [r4, #8]
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	1c5a      	adds	r2, r3, #1
 8008a00:	6022      	str	r2, [r4, #0]
 8008a02:	701e      	strb	r6, [r3, #0]
 8008a04:	6963      	ldr	r3, [r4, #20]
 8008a06:	3001      	adds	r0, #1
 8008a08:	4283      	cmp	r3, r0
 8008a0a:	d004      	beq.n	8008a16 <__swbuf_r+0x62>
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	07db      	lsls	r3, r3, #31
 8008a10:	d506      	bpl.n	8008a20 <__swbuf_r+0x6c>
 8008a12:	2e0a      	cmp	r6, #10
 8008a14:	d104      	bne.n	8008a20 <__swbuf_r+0x6c>
 8008a16:	4621      	mov	r1, r4
 8008a18:	4628      	mov	r0, r5
 8008a1a:	f000 f927 	bl	8008c6c <_fflush_r>
 8008a1e:	b988      	cbnz	r0, 8008a44 <__swbuf_r+0x90>
 8008a20:	4638      	mov	r0, r7
 8008a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a24:	4b0a      	ldr	r3, [pc, #40]	; (8008a50 <__swbuf_r+0x9c>)
 8008a26:	429c      	cmp	r4, r3
 8008a28:	d101      	bne.n	8008a2e <__swbuf_r+0x7a>
 8008a2a:	68ac      	ldr	r4, [r5, #8]
 8008a2c:	e7cf      	b.n	80089ce <__swbuf_r+0x1a>
 8008a2e:	4b09      	ldr	r3, [pc, #36]	; (8008a54 <__swbuf_r+0xa0>)
 8008a30:	429c      	cmp	r4, r3
 8008a32:	bf08      	it	eq
 8008a34:	68ec      	ldreq	r4, [r5, #12]
 8008a36:	e7ca      	b.n	80089ce <__swbuf_r+0x1a>
 8008a38:	4621      	mov	r1, r4
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	f000 f81a 	bl	8008a74 <__swsetup_r>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d0cb      	beq.n	80089dc <__swbuf_r+0x28>
 8008a44:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008a48:	e7ea      	b.n	8008a20 <__swbuf_r+0x6c>
 8008a4a:	bf00      	nop
 8008a4c:	0800b004 	.word	0x0800b004
 8008a50:	0800b024 	.word	0x0800b024
 8008a54:	0800afe4 	.word	0x0800afe4

08008a58 <__ascii_wctomb>:
 8008a58:	b149      	cbz	r1, 8008a6e <__ascii_wctomb+0x16>
 8008a5a:	2aff      	cmp	r2, #255	; 0xff
 8008a5c:	bf85      	ittet	hi
 8008a5e:	238a      	movhi	r3, #138	; 0x8a
 8008a60:	6003      	strhi	r3, [r0, #0]
 8008a62:	700a      	strbls	r2, [r1, #0]
 8008a64:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008a68:	bf98      	it	ls
 8008a6a:	2001      	movls	r0, #1
 8008a6c:	4770      	bx	lr
 8008a6e:	4608      	mov	r0, r1
 8008a70:	4770      	bx	lr
	...

08008a74 <__swsetup_r>:
 8008a74:	4b32      	ldr	r3, [pc, #200]	; (8008b40 <__swsetup_r+0xcc>)
 8008a76:	b570      	push	{r4, r5, r6, lr}
 8008a78:	681d      	ldr	r5, [r3, #0]
 8008a7a:	4606      	mov	r6, r0
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	b125      	cbz	r5, 8008a8a <__swsetup_r+0x16>
 8008a80:	69ab      	ldr	r3, [r5, #24]
 8008a82:	b913      	cbnz	r3, 8008a8a <__swsetup_r+0x16>
 8008a84:	4628      	mov	r0, r5
 8008a86:	f000 f985 	bl	8008d94 <__sinit>
 8008a8a:	4b2e      	ldr	r3, [pc, #184]	; (8008b44 <__swsetup_r+0xd0>)
 8008a8c:	429c      	cmp	r4, r3
 8008a8e:	d10f      	bne.n	8008ab0 <__swsetup_r+0x3c>
 8008a90:	686c      	ldr	r4, [r5, #4]
 8008a92:	89a3      	ldrh	r3, [r4, #12]
 8008a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a98:	0719      	lsls	r1, r3, #28
 8008a9a:	d42c      	bmi.n	8008af6 <__swsetup_r+0x82>
 8008a9c:	06dd      	lsls	r5, r3, #27
 8008a9e:	d411      	bmi.n	8008ac4 <__swsetup_r+0x50>
 8008aa0:	2309      	movs	r3, #9
 8008aa2:	6033      	str	r3, [r6, #0]
 8008aa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008aa8:	81a3      	strh	r3, [r4, #12]
 8008aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008aae:	e03e      	b.n	8008b2e <__swsetup_r+0xba>
 8008ab0:	4b25      	ldr	r3, [pc, #148]	; (8008b48 <__swsetup_r+0xd4>)
 8008ab2:	429c      	cmp	r4, r3
 8008ab4:	d101      	bne.n	8008aba <__swsetup_r+0x46>
 8008ab6:	68ac      	ldr	r4, [r5, #8]
 8008ab8:	e7eb      	b.n	8008a92 <__swsetup_r+0x1e>
 8008aba:	4b24      	ldr	r3, [pc, #144]	; (8008b4c <__swsetup_r+0xd8>)
 8008abc:	429c      	cmp	r4, r3
 8008abe:	bf08      	it	eq
 8008ac0:	68ec      	ldreq	r4, [r5, #12]
 8008ac2:	e7e6      	b.n	8008a92 <__swsetup_r+0x1e>
 8008ac4:	0758      	lsls	r0, r3, #29
 8008ac6:	d512      	bpl.n	8008aee <__swsetup_r+0x7a>
 8008ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008aca:	b141      	cbz	r1, 8008ade <__swsetup_r+0x6a>
 8008acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ad0:	4299      	cmp	r1, r3
 8008ad2:	d002      	beq.n	8008ada <__swsetup_r+0x66>
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	f7ff fb6f 	bl	80081b8 <_free_r>
 8008ada:	2300      	movs	r3, #0
 8008adc:	6363      	str	r3, [r4, #52]	; 0x34
 8008ade:	89a3      	ldrh	r3, [r4, #12]
 8008ae0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ae4:	81a3      	strh	r3, [r4, #12]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	6063      	str	r3, [r4, #4]
 8008aea:	6923      	ldr	r3, [r4, #16]
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	f043 0308 	orr.w	r3, r3, #8
 8008af4:	81a3      	strh	r3, [r4, #12]
 8008af6:	6923      	ldr	r3, [r4, #16]
 8008af8:	b94b      	cbnz	r3, 8008b0e <__swsetup_r+0x9a>
 8008afa:	89a3      	ldrh	r3, [r4, #12]
 8008afc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b04:	d003      	beq.n	8008b0e <__swsetup_r+0x9a>
 8008b06:	4621      	mov	r1, r4
 8008b08:	4630      	mov	r0, r6
 8008b0a:	f000 fa07 	bl	8008f1c <__smakebuf_r>
 8008b0e:	89a0      	ldrh	r0, [r4, #12]
 8008b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b14:	f010 0301 	ands.w	r3, r0, #1
 8008b18:	d00a      	beq.n	8008b30 <__swsetup_r+0xbc>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60a3      	str	r3, [r4, #8]
 8008b1e:	6963      	ldr	r3, [r4, #20]
 8008b20:	425b      	negs	r3, r3
 8008b22:	61a3      	str	r3, [r4, #24]
 8008b24:	6923      	ldr	r3, [r4, #16]
 8008b26:	b943      	cbnz	r3, 8008b3a <__swsetup_r+0xc6>
 8008b28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b2c:	d1ba      	bne.n	8008aa4 <__swsetup_r+0x30>
 8008b2e:	bd70      	pop	{r4, r5, r6, pc}
 8008b30:	0781      	lsls	r1, r0, #30
 8008b32:	bf58      	it	pl
 8008b34:	6963      	ldrpl	r3, [r4, #20]
 8008b36:	60a3      	str	r3, [r4, #8]
 8008b38:	e7f4      	b.n	8008b24 <__swsetup_r+0xb0>
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	e7f7      	b.n	8008b2e <__swsetup_r+0xba>
 8008b3e:	bf00      	nop
 8008b40:	20002014 	.word	0x20002014
 8008b44:	0800b004 	.word	0x0800b004
 8008b48:	0800b024 	.word	0x0800b024
 8008b4c:	0800afe4 	.word	0x0800afe4

08008b50 <abort>:
 8008b50:	b508      	push	{r3, lr}
 8008b52:	2006      	movs	r0, #6
 8008b54:	f000 fa52 	bl	8008ffc <raise>
 8008b58:	2001      	movs	r0, #1
 8008b5a:	f7fb f857 	bl	8003c0c <_exit>
	...

08008b60 <__sflush_r>:
 8008b60:	898a      	ldrh	r2, [r1, #12]
 8008b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b66:	4605      	mov	r5, r0
 8008b68:	0710      	lsls	r0, r2, #28
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	d458      	bmi.n	8008c20 <__sflush_r+0xc0>
 8008b6e:	684b      	ldr	r3, [r1, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	dc05      	bgt.n	8008b80 <__sflush_r+0x20>
 8008b74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	dc02      	bgt.n	8008b80 <__sflush_r+0x20>
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b82:	2e00      	cmp	r6, #0
 8008b84:	d0f9      	beq.n	8008b7a <__sflush_r+0x1a>
 8008b86:	2300      	movs	r3, #0
 8008b88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b8c:	682f      	ldr	r7, [r5, #0]
 8008b8e:	602b      	str	r3, [r5, #0]
 8008b90:	d032      	beq.n	8008bf8 <__sflush_r+0x98>
 8008b92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b94:	89a3      	ldrh	r3, [r4, #12]
 8008b96:	075a      	lsls	r2, r3, #29
 8008b98:	d505      	bpl.n	8008ba6 <__sflush_r+0x46>
 8008b9a:	6863      	ldr	r3, [r4, #4]
 8008b9c:	1ac0      	subs	r0, r0, r3
 8008b9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ba0:	b10b      	cbz	r3, 8008ba6 <__sflush_r+0x46>
 8008ba2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ba4:	1ac0      	subs	r0, r0, r3
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	4602      	mov	r2, r0
 8008baa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bac:	6a21      	ldr	r1, [r4, #32]
 8008bae:	4628      	mov	r0, r5
 8008bb0:	47b0      	blx	r6
 8008bb2:	1c43      	adds	r3, r0, #1
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	d106      	bne.n	8008bc6 <__sflush_r+0x66>
 8008bb8:	6829      	ldr	r1, [r5, #0]
 8008bba:	291d      	cmp	r1, #29
 8008bbc:	d82c      	bhi.n	8008c18 <__sflush_r+0xb8>
 8008bbe:	4a2a      	ldr	r2, [pc, #168]	; (8008c68 <__sflush_r+0x108>)
 8008bc0:	40ca      	lsrs	r2, r1
 8008bc2:	07d6      	lsls	r6, r2, #31
 8008bc4:	d528      	bpl.n	8008c18 <__sflush_r+0xb8>
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	6062      	str	r2, [r4, #4]
 8008bca:	04d9      	lsls	r1, r3, #19
 8008bcc:	6922      	ldr	r2, [r4, #16]
 8008bce:	6022      	str	r2, [r4, #0]
 8008bd0:	d504      	bpl.n	8008bdc <__sflush_r+0x7c>
 8008bd2:	1c42      	adds	r2, r0, #1
 8008bd4:	d101      	bne.n	8008bda <__sflush_r+0x7a>
 8008bd6:	682b      	ldr	r3, [r5, #0]
 8008bd8:	b903      	cbnz	r3, 8008bdc <__sflush_r+0x7c>
 8008bda:	6560      	str	r0, [r4, #84]	; 0x54
 8008bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bde:	602f      	str	r7, [r5, #0]
 8008be0:	2900      	cmp	r1, #0
 8008be2:	d0ca      	beq.n	8008b7a <__sflush_r+0x1a>
 8008be4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008be8:	4299      	cmp	r1, r3
 8008bea:	d002      	beq.n	8008bf2 <__sflush_r+0x92>
 8008bec:	4628      	mov	r0, r5
 8008bee:	f7ff fae3 	bl	80081b8 <_free_r>
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	6360      	str	r0, [r4, #52]	; 0x34
 8008bf6:	e7c1      	b.n	8008b7c <__sflush_r+0x1c>
 8008bf8:	6a21      	ldr	r1, [r4, #32]
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	47b0      	blx	r6
 8008c00:	1c41      	adds	r1, r0, #1
 8008c02:	d1c7      	bne.n	8008b94 <__sflush_r+0x34>
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d0c4      	beq.n	8008b94 <__sflush_r+0x34>
 8008c0a:	2b1d      	cmp	r3, #29
 8008c0c:	d001      	beq.n	8008c12 <__sflush_r+0xb2>
 8008c0e:	2b16      	cmp	r3, #22
 8008c10:	d101      	bne.n	8008c16 <__sflush_r+0xb6>
 8008c12:	602f      	str	r7, [r5, #0]
 8008c14:	e7b1      	b.n	8008b7a <__sflush_r+0x1a>
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c1c:	81a3      	strh	r3, [r4, #12]
 8008c1e:	e7ad      	b.n	8008b7c <__sflush_r+0x1c>
 8008c20:	690f      	ldr	r7, [r1, #16]
 8008c22:	2f00      	cmp	r7, #0
 8008c24:	d0a9      	beq.n	8008b7a <__sflush_r+0x1a>
 8008c26:	0793      	lsls	r3, r2, #30
 8008c28:	680e      	ldr	r6, [r1, #0]
 8008c2a:	bf08      	it	eq
 8008c2c:	694b      	ldreq	r3, [r1, #20]
 8008c2e:	600f      	str	r7, [r1, #0]
 8008c30:	bf18      	it	ne
 8008c32:	2300      	movne	r3, #0
 8008c34:	eba6 0807 	sub.w	r8, r6, r7
 8008c38:	608b      	str	r3, [r1, #8]
 8008c3a:	f1b8 0f00 	cmp.w	r8, #0
 8008c3e:	dd9c      	ble.n	8008b7a <__sflush_r+0x1a>
 8008c40:	6a21      	ldr	r1, [r4, #32]
 8008c42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c44:	4643      	mov	r3, r8
 8008c46:	463a      	mov	r2, r7
 8008c48:	4628      	mov	r0, r5
 8008c4a:	47b0      	blx	r6
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	dc06      	bgt.n	8008c5e <__sflush_r+0xfe>
 8008c50:	89a3      	ldrh	r3, [r4, #12]
 8008c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c56:	81a3      	strh	r3, [r4, #12]
 8008c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c5c:	e78e      	b.n	8008b7c <__sflush_r+0x1c>
 8008c5e:	4407      	add	r7, r0
 8008c60:	eba8 0800 	sub.w	r8, r8, r0
 8008c64:	e7e9      	b.n	8008c3a <__sflush_r+0xda>
 8008c66:	bf00      	nop
 8008c68:	20400001 	.word	0x20400001

08008c6c <_fflush_r>:
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	690b      	ldr	r3, [r1, #16]
 8008c70:	4605      	mov	r5, r0
 8008c72:	460c      	mov	r4, r1
 8008c74:	b913      	cbnz	r3, 8008c7c <_fflush_r+0x10>
 8008c76:	2500      	movs	r5, #0
 8008c78:	4628      	mov	r0, r5
 8008c7a:	bd38      	pop	{r3, r4, r5, pc}
 8008c7c:	b118      	cbz	r0, 8008c86 <_fflush_r+0x1a>
 8008c7e:	6983      	ldr	r3, [r0, #24]
 8008c80:	b90b      	cbnz	r3, 8008c86 <_fflush_r+0x1a>
 8008c82:	f000 f887 	bl	8008d94 <__sinit>
 8008c86:	4b14      	ldr	r3, [pc, #80]	; (8008cd8 <_fflush_r+0x6c>)
 8008c88:	429c      	cmp	r4, r3
 8008c8a:	d11b      	bne.n	8008cc4 <_fflush_r+0x58>
 8008c8c:	686c      	ldr	r4, [r5, #4]
 8008c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d0ef      	beq.n	8008c76 <_fflush_r+0xa>
 8008c96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c98:	07d0      	lsls	r0, r2, #31
 8008c9a:	d404      	bmi.n	8008ca6 <_fflush_r+0x3a>
 8008c9c:	0599      	lsls	r1, r3, #22
 8008c9e:	d402      	bmi.n	8008ca6 <_fflush_r+0x3a>
 8008ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ca2:	f000 f915 	bl	8008ed0 <__retarget_lock_acquire_recursive>
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	4621      	mov	r1, r4
 8008caa:	f7ff ff59 	bl	8008b60 <__sflush_r>
 8008cae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cb0:	07da      	lsls	r2, r3, #31
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	d4e0      	bmi.n	8008c78 <_fflush_r+0xc>
 8008cb6:	89a3      	ldrh	r3, [r4, #12]
 8008cb8:	059b      	lsls	r3, r3, #22
 8008cba:	d4dd      	bmi.n	8008c78 <_fflush_r+0xc>
 8008cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cbe:	f000 f908 	bl	8008ed2 <__retarget_lock_release_recursive>
 8008cc2:	e7d9      	b.n	8008c78 <_fflush_r+0xc>
 8008cc4:	4b05      	ldr	r3, [pc, #20]	; (8008cdc <_fflush_r+0x70>)
 8008cc6:	429c      	cmp	r4, r3
 8008cc8:	d101      	bne.n	8008cce <_fflush_r+0x62>
 8008cca:	68ac      	ldr	r4, [r5, #8]
 8008ccc:	e7df      	b.n	8008c8e <_fflush_r+0x22>
 8008cce:	4b04      	ldr	r3, [pc, #16]	; (8008ce0 <_fflush_r+0x74>)
 8008cd0:	429c      	cmp	r4, r3
 8008cd2:	bf08      	it	eq
 8008cd4:	68ec      	ldreq	r4, [r5, #12]
 8008cd6:	e7da      	b.n	8008c8e <_fflush_r+0x22>
 8008cd8:	0800b004 	.word	0x0800b004
 8008cdc:	0800b024 	.word	0x0800b024
 8008ce0:	0800afe4 	.word	0x0800afe4

08008ce4 <std>:
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	b510      	push	{r4, lr}
 8008ce8:	4604      	mov	r4, r0
 8008cea:	e9c0 3300 	strd	r3, r3, [r0]
 8008cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cf2:	6083      	str	r3, [r0, #8]
 8008cf4:	8181      	strh	r1, [r0, #12]
 8008cf6:	6643      	str	r3, [r0, #100]	; 0x64
 8008cf8:	81c2      	strh	r2, [r0, #14]
 8008cfa:	6183      	str	r3, [r0, #24]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	2208      	movs	r2, #8
 8008d00:	305c      	adds	r0, #92	; 0x5c
 8008d02:	f7fd fba5 	bl	8006450 <memset>
 8008d06:	4b05      	ldr	r3, [pc, #20]	; (8008d1c <std+0x38>)
 8008d08:	6263      	str	r3, [r4, #36]	; 0x24
 8008d0a:	4b05      	ldr	r3, [pc, #20]	; (8008d20 <std+0x3c>)
 8008d0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d0e:	4b05      	ldr	r3, [pc, #20]	; (8008d24 <std+0x40>)
 8008d10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d12:	4b05      	ldr	r3, [pc, #20]	; (8008d28 <std+0x44>)
 8008d14:	6224      	str	r4, [r4, #32]
 8008d16:	6323      	str	r3, [r4, #48]	; 0x30
 8008d18:	bd10      	pop	{r4, pc}
 8008d1a:	bf00      	nop
 8008d1c:	08009035 	.word	0x08009035
 8008d20:	08009057 	.word	0x08009057
 8008d24:	0800908f 	.word	0x0800908f
 8008d28:	080090b3 	.word	0x080090b3

08008d2c <_cleanup_r>:
 8008d2c:	4901      	ldr	r1, [pc, #4]	; (8008d34 <_cleanup_r+0x8>)
 8008d2e:	f000 b8af 	b.w	8008e90 <_fwalk_reent>
 8008d32:	bf00      	nop
 8008d34:	08008c6d 	.word	0x08008c6d

08008d38 <__sfmoreglue>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	1e4a      	subs	r2, r1, #1
 8008d3c:	2568      	movs	r5, #104	; 0x68
 8008d3e:	4355      	muls	r5, r2
 8008d40:	460e      	mov	r6, r1
 8008d42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d46:	f7ff fa87 	bl	8008258 <_malloc_r>
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	b140      	cbz	r0, 8008d60 <__sfmoreglue+0x28>
 8008d4e:	2100      	movs	r1, #0
 8008d50:	e9c0 1600 	strd	r1, r6, [r0]
 8008d54:	300c      	adds	r0, #12
 8008d56:	60a0      	str	r0, [r4, #8]
 8008d58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d5c:	f7fd fb78 	bl	8006450 <memset>
 8008d60:	4620      	mov	r0, r4
 8008d62:	bd70      	pop	{r4, r5, r6, pc}

08008d64 <__sfp_lock_acquire>:
 8008d64:	4801      	ldr	r0, [pc, #4]	; (8008d6c <__sfp_lock_acquire+0x8>)
 8008d66:	f000 b8b3 	b.w	8008ed0 <__retarget_lock_acquire_recursive>
 8008d6a:	bf00      	nop
 8008d6c:	2000e874 	.word	0x2000e874

08008d70 <__sfp_lock_release>:
 8008d70:	4801      	ldr	r0, [pc, #4]	; (8008d78 <__sfp_lock_release+0x8>)
 8008d72:	f000 b8ae 	b.w	8008ed2 <__retarget_lock_release_recursive>
 8008d76:	bf00      	nop
 8008d78:	2000e874 	.word	0x2000e874

08008d7c <__sinit_lock_acquire>:
 8008d7c:	4801      	ldr	r0, [pc, #4]	; (8008d84 <__sinit_lock_acquire+0x8>)
 8008d7e:	f000 b8a7 	b.w	8008ed0 <__retarget_lock_acquire_recursive>
 8008d82:	bf00      	nop
 8008d84:	2000e86f 	.word	0x2000e86f

08008d88 <__sinit_lock_release>:
 8008d88:	4801      	ldr	r0, [pc, #4]	; (8008d90 <__sinit_lock_release+0x8>)
 8008d8a:	f000 b8a2 	b.w	8008ed2 <__retarget_lock_release_recursive>
 8008d8e:	bf00      	nop
 8008d90:	2000e86f 	.word	0x2000e86f

08008d94 <__sinit>:
 8008d94:	b510      	push	{r4, lr}
 8008d96:	4604      	mov	r4, r0
 8008d98:	f7ff fff0 	bl	8008d7c <__sinit_lock_acquire>
 8008d9c:	69a3      	ldr	r3, [r4, #24]
 8008d9e:	b11b      	cbz	r3, 8008da8 <__sinit+0x14>
 8008da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008da4:	f7ff bff0 	b.w	8008d88 <__sinit_lock_release>
 8008da8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008dac:	6523      	str	r3, [r4, #80]	; 0x50
 8008dae:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <__sinit+0x68>)
 8008db0:	4a13      	ldr	r2, [pc, #76]	; (8008e00 <__sinit+0x6c>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008db6:	42a3      	cmp	r3, r4
 8008db8:	bf04      	itt	eq
 8008dba:	2301      	moveq	r3, #1
 8008dbc:	61a3      	streq	r3, [r4, #24]
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f000 f820 	bl	8008e04 <__sfp>
 8008dc4:	6060      	str	r0, [r4, #4]
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f000 f81c 	bl	8008e04 <__sfp>
 8008dcc:	60a0      	str	r0, [r4, #8]
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 f818 	bl	8008e04 <__sfp>
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	60e0      	str	r0, [r4, #12]
 8008dd8:	2104      	movs	r1, #4
 8008dda:	6860      	ldr	r0, [r4, #4]
 8008ddc:	f7ff ff82 	bl	8008ce4 <std>
 8008de0:	68a0      	ldr	r0, [r4, #8]
 8008de2:	2201      	movs	r2, #1
 8008de4:	2109      	movs	r1, #9
 8008de6:	f7ff ff7d 	bl	8008ce4 <std>
 8008dea:	68e0      	ldr	r0, [r4, #12]
 8008dec:	2202      	movs	r2, #2
 8008dee:	2112      	movs	r1, #18
 8008df0:	f7ff ff78 	bl	8008ce4 <std>
 8008df4:	2301      	movs	r3, #1
 8008df6:	61a3      	str	r3, [r4, #24]
 8008df8:	e7d2      	b.n	8008da0 <__sinit+0xc>
 8008dfa:	bf00      	nop
 8008dfc:	0800ac64 	.word	0x0800ac64
 8008e00:	08008d2d 	.word	0x08008d2d

08008e04 <__sfp>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	4607      	mov	r7, r0
 8008e08:	f7ff ffac 	bl	8008d64 <__sfp_lock_acquire>
 8008e0c:	4b1e      	ldr	r3, [pc, #120]	; (8008e88 <__sfp+0x84>)
 8008e0e:	681e      	ldr	r6, [r3, #0]
 8008e10:	69b3      	ldr	r3, [r6, #24]
 8008e12:	b913      	cbnz	r3, 8008e1a <__sfp+0x16>
 8008e14:	4630      	mov	r0, r6
 8008e16:	f7ff ffbd 	bl	8008d94 <__sinit>
 8008e1a:	3648      	adds	r6, #72	; 0x48
 8008e1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	d503      	bpl.n	8008e2c <__sfp+0x28>
 8008e24:	6833      	ldr	r3, [r6, #0]
 8008e26:	b30b      	cbz	r3, 8008e6c <__sfp+0x68>
 8008e28:	6836      	ldr	r6, [r6, #0]
 8008e2a:	e7f7      	b.n	8008e1c <__sfp+0x18>
 8008e2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e30:	b9d5      	cbnz	r5, 8008e68 <__sfp+0x64>
 8008e32:	4b16      	ldr	r3, [pc, #88]	; (8008e8c <__sfp+0x88>)
 8008e34:	60e3      	str	r3, [r4, #12]
 8008e36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e3a:	6665      	str	r5, [r4, #100]	; 0x64
 8008e3c:	f000 f847 	bl	8008ece <__retarget_lock_init_recursive>
 8008e40:	f7ff ff96 	bl	8008d70 <__sfp_lock_release>
 8008e44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e4c:	6025      	str	r5, [r4, #0]
 8008e4e:	61a5      	str	r5, [r4, #24]
 8008e50:	2208      	movs	r2, #8
 8008e52:	4629      	mov	r1, r5
 8008e54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e58:	f7fd fafa 	bl	8006450 <memset>
 8008e5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e64:	4620      	mov	r0, r4
 8008e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e68:	3468      	adds	r4, #104	; 0x68
 8008e6a:	e7d9      	b.n	8008e20 <__sfp+0x1c>
 8008e6c:	2104      	movs	r1, #4
 8008e6e:	4638      	mov	r0, r7
 8008e70:	f7ff ff62 	bl	8008d38 <__sfmoreglue>
 8008e74:	4604      	mov	r4, r0
 8008e76:	6030      	str	r0, [r6, #0]
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d1d5      	bne.n	8008e28 <__sfp+0x24>
 8008e7c:	f7ff ff78 	bl	8008d70 <__sfp_lock_release>
 8008e80:	230c      	movs	r3, #12
 8008e82:	603b      	str	r3, [r7, #0]
 8008e84:	e7ee      	b.n	8008e64 <__sfp+0x60>
 8008e86:	bf00      	nop
 8008e88:	0800ac64 	.word	0x0800ac64
 8008e8c:	ffff0001 	.word	0xffff0001

08008e90 <_fwalk_reent>:
 8008e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e94:	4606      	mov	r6, r0
 8008e96:	4688      	mov	r8, r1
 8008e98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e9c:	2700      	movs	r7, #0
 8008e9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ea2:	f1b9 0901 	subs.w	r9, r9, #1
 8008ea6:	d505      	bpl.n	8008eb4 <_fwalk_reent+0x24>
 8008ea8:	6824      	ldr	r4, [r4, #0]
 8008eaa:	2c00      	cmp	r4, #0
 8008eac:	d1f7      	bne.n	8008e9e <_fwalk_reent+0xe>
 8008eae:	4638      	mov	r0, r7
 8008eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eb4:	89ab      	ldrh	r3, [r5, #12]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d907      	bls.n	8008eca <_fwalk_reent+0x3a>
 8008eba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	d003      	beq.n	8008eca <_fwalk_reent+0x3a>
 8008ec2:	4629      	mov	r1, r5
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	47c0      	blx	r8
 8008ec8:	4307      	orrs	r7, r0
 8008eca:	3568      	adds	r5, #104	; 0x68
 8008ecc:	e7e9      	b.n	8008ea2 <_fwalk_reent+0x12>

08008ece <__retarget_lock_init_recursive>:
 8008ece:	4770      	bx	lr

08008ed0 <__retarget_lock_acquire_recursive>:
 8008ed0:	4770      	bx	lr

08008ed2 <__retarget_lock_release_recursive>:
 8008ed2:	4770      	bx	lr

08008ed4 <__swhatbuf_r>:
 8008ed4:	b570      	push	{r4, r5, r6, lr}
 8008ed6:	460e      	mov	r6, r1
 8008ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008edc:	2900      	cmp	r1, #0
 8008ede:	b096      	sub	sp, #88	; 0x58
 8008ee0:	4614      	mov	r4, r2
 8008ee2:	461d      	mov	r5, r3
 8008ee4:	da07      	bge.n	8008ef6 <__swhatbuf_r+0x22>
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	602b      	str	r3, [r5, #0]
 8008eea:	89b3      	ldrh	r3, [r6, #12]
 8008eec:	061a      	lsls	r2, r3, #24
 8008eee:	d410      	bmi.n	8008f12 <__swhatbuf_r+0x3e>
 8008ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ef4:	e00e      	b.n	8008f14 <__swhatbuf_r+0x40>
 8008ef6:	466a      	mov	r2, sp
 8008ef8:	f000 f902 	bl	8009100 <_fstat_r>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	dbf2      	blt.n	8008ee6 <__swhatbuf_r+0x12>
 8008f00:	9a01      	ldr	r2, [sp, #4]
 8008f02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f0a:	425a      	negs	r2, r3
 8008f0c:	415a      	adcs	r2, r3
 8008f0e:	602a      	str	r2, [r5, #0]
 8008f10:	e7ee      	b.n	8008ef0 <__swhatbuf_r+0x1c>
 8008f12:	2340      	movs	r3, #64	; 0x40
 8008f14:	2000      	movs	r0, #0
 8008f16:	6023      	str	r3, [r4, #0]
 8008f18:	b016      	add	sp, #88	; 0x58
 8008f1a:	bd70      	pop	{r4, r5, r6, pc}

08008f1c <__smakebuf_r>:
 8008f1c:	898b      	ldrh	r3, [r1, #12]
 8008f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f20:	079d      	lsls	r5, r3, #30
 8008f22:	4606      	mov	r6, r0
 8008f24:	460c      	mov	r4, r1
 8008f26:	d507      	bpl.n	8008f38 <__smakebuf_r+0x1c>
 8008f28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f2c:	6023      	str	r3, [r4, #0]
 8008f2e:	6123      	str	r3, [r4, #16]
 8008f30:	2301      	movs	r3, #1
 8008f32:	6163      	str	r3, [r4, #20]
 8008f34:	b002      	add	sp, #8
 8008f36:	bd70      	pop	{r4, r5, r6, pc}
 8008f38:	ab01      	add	r3, sp, #4
 8008f3a:	466a      	mov	r2, sp
 8008f3c:	f7ff ffca 	bl	8008ed4 <__swhatbuf_r>
 8008f40:	9900      	ldr	r1, [sp, #0]
 8008f42:	4605      	mov	r5, r0
 8008f44:	4630      	mov	r0, r6
 8008f46:	f7ff f987 	bl	8008258 <_malloc_r>
 8008f4a:	b948      	cbnz	r0, 8008f60 <__smakebuf_r+0x44>
 8008f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f50:	059a      	lsls	r2, r3, #22
 8008f52:	d4ef      	bmi.n	8008f34 <__smakebuf_r+0x18>
 8008f54:	f023 0303 	bic.w	r3, r3, #3
 8008f58:	f043 0302 	orr.w	r3, r3, #2
 8008f5c:	81a3      	strh	r3, [r4, #12]
 8008f5e:	e7e3      	b.n	8008f28 <__smakebuf_r+0xc>
 8008f60:	4b0d      	ldr	r3, [pc, #52]	; (8008f98 <__smakebuf_r+0x7c>)
 8008f62:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	6020      	str	r0, [r4, #0]
 8008f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f6c:	81a3      	strh	r3, [r4, #12]
 8008f6e:	9b00      	ldr	r3, [sp, #0]
 8008f70:	6163      	str	r3, [r4, #20]
 8008f72:	9b01      	ldr	r3, [sp, #4]
 8008f74:	6120      	str	r0, [r4, #16]
 8008f76:	b15b      	cbz	r3, 8008f90 <__smakebuf_r+0x74>
 8008f78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f000 f8d1 	bl	8009124 <_isatty_r>
 8008f82:	b128      	cbz	r0, 8008f90 <__smakebuf_r+0x74>
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	f023 0303 	bic.w	r3, r3, #3
 8008f8a:	f043 0301 	orr.w	r3, r3, #1
 8008f8e:	81a3      	strh	r3, [r4, #12]
 8008f90:	89a0      	ldrh	r0, [r4, #12]
 8008f92:	4305      	orrs	r5, r0
 8008f94:	81a5      	strh	r5, [r4, #12]
 8008f96:	e7cd      	b.n	8008f34 <__smakebuf_r+0x18>
 8008f98:	08008d2d 	.word	0x08008d2d

08008f9c <_malloc_usable_size_r>:
 8008f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fa0:	1f18      	subs	r0, r3, #4
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	bfbc      	itt	lt
 8008fa6:	580b      	ldrlt	r3, [r1, r0]
 8008fa8:	18c0      	addlt	r0, r0, r3
 8008faa:	4770      	bx	lr

08008fac <_raise_r>:
 8008fac:	291f      	cmp	r1, #31
 8008fae:	b538      	push	{r3, r4, r5, lr}
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	460d      	mov	r5, r1
 8008fb4:	d904      	bls.n	8008fc0 <_raise_r+0x14>
 8008fb6:	2316      	movs	r3, #22
 8008fb8:	6003      	str	r3, [r0, #0]
 8008fba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fbe:	bd38      	pop	{r3, r4, r5, pc}
 8008fc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008fc2:	b112      	cbz	r2, 8008fca <_raise_r+0x1e>
 8008fc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fc8:	b94b      	cbnz	r3, 8008fde <_raise_r+0x32>
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f000 f830 	bl	8009030 <_getpid_r>
 8008fd0:	462a      	mov	r2, r5
 8008fd2:	4601      	mov	r1, r0
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fda:	f000 b817 	b.w	800900c <_kill_r>
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d00a      	beq.n	8008ff8 <_raise_r+0x4c>
 8008fe2:	1c59      	adds	r1, r3, #1
 8008fe4:	d103      	bne.n	8008fee <_raise_r+0x42>
 8008fe6:	2316      	movs	r3, #22
 8008fe8:	6003      	str	r3, [r0, #0]
 8008fea:	2001      	movs	r0, #1
 8008fec:	e7e7      	b.n	8008fbe <_raise_r+0x12>
 8008fee:	2400      	movs	r4, #0
 8008ff0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	4798      	blx	r3
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	e7e0      	b.n	8008fbe <_raise_r+0x12>

08008ffc <raise>:
 8008ffc:	4b02      	ldr	r3, [pc, #8]	; (8009008 <raise+0xc>)
 8008ffe:	4601      	mov	r1, r0
 8009000:	6818      	ldr	r0, [r3, #0]
 8009002:	f7ff bfd3 	b.w	8008fac <_raise_r>
 8009006:	bf00      	nop
 8009008:	20002014 	.word	0x20002014

0800900c <_kill_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4d07      	ldr	r5, [pc, #28]	; (800902c <_kill_r+0x20>)
 8009010:	2300      	movs	r3, #0
 8009012:	4604      	mov	r4, r0
 8009014:	4608      	mov	r0, r1
 8009016:	4611      	mov	r1, r2
 8009018:	602b      	str	r3, [r5, #0]
 800901a:	f7fa fdef 	bl	8003bfc <_kill>
 800901e:	1c43      	adds	r3, r0, #1
 8009020:	d102      	bne.n	8009028 <_kill_r+0x1c>
 8009022:	682b      	ldr	r3, [r5, #0]
 8009024:	b103      	cbz	r3, 8009028 <_kill_r+0x1c>
 8009026:	6023      	str	r3, [r4, #0]
 8009028:	bd38      	pop	{r3, r4, r5, pc}
 800902a:	bf00      	nop
 800902c:	2000e868 	.word	0x2000e868

08009030 <_getpid_r>:
 8009030:	f7fa bde2 	b.w	8003bf8 <_getpid>

08009034 <__sread>:
 8009034:	b510      	push	{r4, lr}
 8009036:	460c      	mov	r4, r1
 8009038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800903c:	f000 f894 	bl	8009168 <_read_r>
 8009040:	2800      	cmp	r0, #0
 8009042:	bfab      	itete	ge
 8009044:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009046:	89a3      	ldrhlt	r3, [r4, #12]
 8009048:	181b      	addge	r3, r3, r0
 800904a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800904e:	bfac      	ite	ge
 8009050:	6563      	strge	r3, [r4, #84]	; 0x54
 8009052:	81a3      	strhlt	r3, [r4, #12]
 8009054:	bd10      	pop	{r4, pc}

08009056 <__swrite>:
 8009056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800905a:	461f      	mov	r7, r3
 800905c:	898b      	ldrh	r3, [r1, #12]
 800905e:	05db      	lsls	r3, r3, #23
 8009060:	4605      	mov	r5, r0
 8009062:	460c      	mov	r4, r1
 8009064:	4616      	mov	r6, r2
 8009066:	d505      	bpl.n	8009074 <__swrite+0x1e>
 8009068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800906c:	2302      	movs	r3, #2
 800906e:	2200      	movs	r2, #0
 8009070:	f000 f868 	bl	8009144 <_lseek_r>
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800907a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800907e:	81a3      	strh	r3, [r4, #12]
 8009080:	4632      	mov	r2, r6
 8009082:	463b      	mov	r3, r7
 8009084:	4628      	mov	r0, r5
 8009086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800908a:	f000 b817 	b.w	80090bc <_write_r>

0800908e <__sseek>:
 800908e:	b510      	push	{r4, lr}
 8009090:	460c      	mov	r4, r1
 8009092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009096:	f000 f855 	bl	8009144 <_lseek_r>
 800909a:	1c43      	adds	r3, r0, #1
 800909c:	89a3      	ldrh	r3, [r4, #12]
 800909e:	bf15      	itete	ne
 80090a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80090a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090aa:	81a3      	strheq	r3, [r4, #12]
 80090ac:	bf18      	it	ne
 80090ae:	81a3      	strhne	r3, [r4, #12]
 80090b0:	bd10      	pop	{r4, pc}

080090b2 <__sclose>:
 80090b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b6:	f000 b813 	b.w	80090e0 <_close_r>
	...

080090bc <_write_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4d07      	ldr	r5, [pc, #28]	; (80090dc <_write_r+0x20>)
 80090c0:	4604      	mov	r4, r0
 80090c2:	4608      	mov	r0, r1
 80090c4:	4611      	mov	r1, r2
 80090c6:	2200      	movs	r2, #0
 80090c8:	602a      	str	r2, [r5, #0]
 80090ca:	461a      	mov	r2, r3
 80090cc:	f7fa fdb2 	bl	8003c34 <_write>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d102      	bne.n	80090da <_write_r+0x1e>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	b103      	cbz	r3, 80090da <_write_r+0x1e>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	2000e868 	.word	0x2000e868

080090e0 <_close_r>:
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	4d06      	ldr	r5, [pc, #24]	; (80090fc <_close_r+0x1c>)
 80090e4:	2300      	movs	r3, #0
 80090e6:	4604      	mov	r4, r0
 80090e8:	4608      	mov	r0, r1
 80090ea:	602b      	str	r3, [r5, #0]
 80090ec:	f7fa fdb0 	bl	8003c50 <_close>
 80090f0:	1c43      	adds	r3, r0, #1
 80090f2:	d102      	bne.n	80090fa <_close_r+0x1a>
 80090f4:	682b      	ldr	r3, [r5, #0]
 80090f6:	b103      	cbz	r3, 80090fa <_close_r+0x1a>
 80090f8:	6023      	str	r3, [r4, #0]
 80090fa:	bd38      	pop	{r3, r4, r5, pc}
 80090fc:	2000e868 	.word	0x2000e868

08009100 <_fstat_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	4d07      	ldr	r5, [pc, #28]	; (8009120 <_fstat_r+0x20>)
 8009104:	2300      	movs	r3, #0
 8009106:	4604      	mov	r4, r0
 8009108:	4608      	mov	r0, r1
 800910a:	4611      	mov	r1, r2
 800910c:	602b      	str	r3, [r5, #0]
 800910e:	f7fa fda3 	bl	8003c58 <_fstat>
 8009112:	1c43      	adds	r3, r0, #1
 8009114:	d102      	bne.n	800911c <_fstat_r+0x1c>
 8009116:	682b      	ldr	r3, [r5, #0]
 8009118:	b103      	cbz	r3, 800911c <_fstat_r+0x1c>
 800911a:	6023      	str	r3, [r4, #0]
 800911c:	bd38      	pop	{r3, r4, r5, pc}
 800911e:	bf00      	nop
 8009120:	2000e868 	.word	0x2000e868

08009124 <_isatty_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	4d06      	ldr	r5, [pc, #24]	; (8009140 <_isatty_r+0x1c>)
 8009128:	2300      	movs	r3, #0
 800912a:	4604      	mov	r4, r0
 800912c:	4608      	mov	r0, r1
 800912e:	602b      	str	r3, [r5, #0]
 8009130:	f7fa fd98 	bl	8003c64 <_isatty>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d102      	bne.n	800913e <_isatty_r+0x1a>
 8009138:	682b      	ldr	r3, [r5, #0]
 800913a:	b103      	cbz	r3, 800913e <_isatty_r+0x1a>
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	2000e868 	.word	0x2000e868

08009144 <_lseek_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4d07      	ldr	r5, [pc, #28]	; (8009164 <_lseek_r+0x20>)
 8009148:	4604      	mov	r4, r0
 800914a:	4608      	mov	r0, r1
 800914c:	4611      	mov	r1, r2
 800914e:	2200      	movs	r2, #0
 8009150:	602a      	str	r2, [r5, #0]
 8009152:	461a      	mov	r2, r3
 8009154:	f7fa fd88 	bl	8003c68 <_lseek>
 8009158:	1c43      	adds	r3, r0, #1
 800915a:	d102      	bne.n	8009162 <_lseek_r+0x1e>
 800915c:	682b      	ldr	r3, [r5, #0]
 800915e:	b103      	cbz	r3, 8009162 <_lseek_r+0x1e>
 8009160:	6023      	str	r3, [r4, #0]
 8009162:	bd38      	pop	{r3, r4, r5, pc}
 8009164:	2000e868 	.word	0x2000e868

08009168 <_read_r>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	4d07      	ldr	r5, [pc, #28]	; (8009188 <_read_r+0x20>)
 800916c:	4604      	mov	r4, r0
 800916e:	4608      	mov	r0, r1
 8009170:	4611      	mov	r1, r2
 8009172:	2200      	movs	r2, #0
 8009174:	602a      	str	r2, [r5, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	f7fa fd4e 	bl	8003c18 <_read>
 800917c:	1c43      	adds	r3, r0, #1
 800917e:	d102      	bne.n	8009186 <_read_r+0x1e>
 8009180:	682b      	ldr	r3, [r5, #0]
 8009182:	b103      	cbz	r3, 8009186 <_read_r+0x1e>
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	bd38      	pop	{r3, r4, r5, pc}
 8009188:	2000e868 	.word	0x2000e868
 800918c:	00000000 	.word	0x00000000

08009190 <sin>:
 8009190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009192:	ec53 2b10 	vmov	r2, r3, d0
 8009196:	4826      	ldr	r0, [pc, #152]	; (8009230 <sin+0xa0>)
 8009198:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800919c:	4281      	cmp	r1, r0
 800919e:	dc07      	bgt.n	80091b0 <sin+0x20>
 80091a0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009228 <sin+0x98>
 80091a4:	2000      	movs	r0, #0
 80091a6:	f001 faaf 	bl	800a708 <__kernel_sin>
 80091aa:	ec51 0b10 	vmov	r0, r1, d0
 80091ae:	e007      	b.n	80091c0 <sin+0x30>
 80091b0:	4820      	ldr	r0, [pc, #128]	; (8009234 <sin+0xa4>)
 80091b2:	4281      	cmp	r1, r0
 80091b4:	dd09      	ble.n	80091ca <sin+0x3a>
 80091b6:	ee10 0a10 	vmov	r0, s0
 80091ba:	4619      	mov	r1, r3
 80091bc:	f7f7 f86c 	bl	8000298 <__aeabi_dsub>
 80091c0:	ec41 0b10 	vmov	d0, r0, r1
 80091c4:	b005      	add	sp, #20
 80091c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80091ca:	4668      	mov	r0, sp
 80091cc:	f000 fbd4 	bl	8009978 <__ieee754_rem_pio2>
 80091d0:	f000 0003 	and.w	r0, r0, #3
 80091d4:	2801      	cmp	r0, #1
 80091d6:	d008      	beq.n	80091ea <sin+0x5a>
 80091d8:	2802      	cmp	r0, #2
 80091da:	d00d      	beq.n	80091f8 <sin+0x68>
 80091dc:	b9d0      	cbnz	r0, 8009214 <sin+0x84>
 80091de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091e2:	ed9d 0b00 	vldr	d0, [sp]
 80091e6:	2001      	movs	r0, #1
 80091e8:	e7dd      	b.n	80091a6 <sin+0x16>
 80091ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091ee:	ed9d 0b00 	vldr	d0, [sp]
 80091f2:	f000 fe81 	bl	8009ef8 <__kernel_cos>
 80091f6:	e7d8      	b.n	80091aa <sin+0x1a>
 80091f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091fc:	ed9d 0b00 	vldr	d0, [sp]
 8009200:	2001      	movs	r0, #1
 8009202:	f001 fa81 	bl	800a708 <__kernel_sin>
 8009206:	ec53 2b10 	vmov	r2, r3, d0
 800920a:	ee10 0a10 	vmov	r0, s0
 800920e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009212:	e7d5      	b.n	80091c0 <sin+0x30>
 8009214:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009218:	ed9d 0b00 	vldr	d0, [sp]
 800921c:	f000 fe6c 	bl	8009ef8 <__kernel_cos>
 8009220:	e7f1      	b.n	8009206 <sin+0x76>
 8009222:	bf00      	nop
 8009224:	f3af 8000 	nop.w
	...
 8009230:	3fe921fb 	.word	0x3fe921fb
 8009234:	7fefffff 	.word	0x7fefffff

08009238 <asin>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	ed2d 8b02 	vpush	{d8}
 800923e:	ec55 4b10 	vmov	r4, r5, d0
 8009242:	f000 f871 	bl	8009328 <__ieee754_asin>
 8009246:	4b16      	ldr	r3, [pc, #88]	; (80092a0 <asin+0x68>)
 8009248:	eeb0 8a40 	vmov.f32	s16, s0
 800924c:	eef0 8a60 	vmov.f32	s17, s1
 8009250:	f993 3000 	ldrsb.w	r3, [r3]
 8009254:	3301      	adds	r3, #1
 8009256:	d01c      	beq.n	8009292 <asin+0x5a>
 8009258:	4622      	mov	r2, r4
 800925a:	462b      	mov	r3, r5
 800925c:	4620      	mov	r0, r4
 800925e:	4629      	mov	r1, r5
 8009260:	f7f7 fc6c 	bl	8000b3c <__aeabi_dcmpun>
 8009264:	b9a8      	cbnz	r0, 8009292 <asin+0x5a>
 8009266:	ec45 4b10 	vmov	d0, r4, r5
 800926a:	f001 fb0b 	bl	800a884 <fabs>
 800926e:	4b0d      	ldr	r3, [pc, #52]	; (80092a4 <asin+0x6c>)
 8009270:	ec51 0b10 	vmov	r0, r1, d0
 8009274:	2200      	movs	r2, #0
 8009276:	f7f7 fc57 	bl	8000b28 <__aeabi_dcmpgt>
 800927a:	b150      	cbz	r0, 8009292 <asin+0x5a>
 800927c:	f7fd f8be 	bl	80063fc <__errno>
 8009280:	ecbd 8b02 	vpop	{d8}
 8009284:	2321      	movs	r3, #33	; 0x21
 8009286:	6003      	str	r3, [r0, #0]
 8009288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800928c:	4806      	ldr	r0, [pc, #24]	; (80092a8 <asin+0x70>)
 800928e:	f001 bb83 	b.w	800a998 <nan>
 8009292:	eeb0 0a48 	vmov.f32	s0, s16
 8009296:	eef0 0a68 	vmov.f32	s1, s17
 800929a:	ecbd 8b02 	vpop	{d8}
 800929e:	bd38      	pop	{r3, r4, r5, pc}
 80092a0:	200021e4 	.word	0x200021e4
 80092a4:	3ff00000 	.word	0x3ff00000
 80092a8:	0800aed8 	.word	0x0800aed8

080092ac <fmod>:
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	ed2d 8b02 	vpush	{d8}
 80092b2:	ec57 6b10 	vmov	r6, r7, d0
 80092b6:	ec55 4b11 	vmov	r4, r5, d1
 80092ba:	f000 fa49 	bl	8009750 <__ieee754_fmod>
 80092be:	4b18      	ldr	r3, [pc, #96]	; (8009320 <fmod+0x74>)
 80092c0:	eeb0 8a40 	vmov.f32	s16, s0
 80092c4:	eef0 8a60 	vmov.f32	s17, s1
 80092c8:	f993 3000 	ldrsb.w	r3, [r3]
 80092cc:	3301      	adds	r3, #1
 80092ce:	d020      	beq.n	8009312 <fmod+0x66>
 80092d0:	4622      	mov	r2, r4
 80092d2:	462b      	mov	r3, r5
 80092d4:	4620      	mov	r0, r4
 80092d6:	4629      	mov	r1, r5
 80092d8:	f7f7 fc30 	bl	8000b3c <__aeabi_dcmpun>
 80092dc:	b9c8      	cbnz	r0, 8009312 <fmod+0x66>
 80092de:	4632      	mov	r2, r6
 80092e0:	463b      	mov	r3, r7
 80092e2:	4630      	mov	r0, r6
 80092e4:	4639      	mov	r1, r7
 80092e6:	f7f7 fc29 	bl	8000b3c <__aeabi_dcmpun>
 80092ea:	b990      	cbnz	r0, 8009312 <fmod+0x66>
 80092ec:	2200      	movs	r2, #0
 80092ee:	2300      	movs	r3, #0
 80092f0:	4620      	mov	r0, r4
 80092f2:	4629      	mov	r1, r5
 80092f4:	f7f7 fbf0 	bl	8000ad8 <__aeabi_dcmpeq>
 80092f8:	b158      	cbz	r0, 8009312 <fmod+0x66>
 80092fa:	f7fd f87f 	bl	80063fc <__errno>
 80092fe:	2321      	movs	r3, #33	; 0x21
 8009300:	6003      	str	r3, [r0, #0]
 8009302:	2200      	movs	r2, #0
 8009304:	2300      	movs	r3, #0
 8009306:	4610      	mov	r0, r2
 8009308:	4619      	mov	r1, r3
 800930a:	f7f7 faa7 	bl	800085c <__aeabi_ddiv>
 800930e:	ec41 0b18 	vmov	d8, r0, r1
 8009312:	eeb0 0a48 	vmov.f32	s0, s16
 8009316:	eef0 0a68 	vmov.f32	s1, s17
 800931a:	ecbd 8b02 	vpop	{d8}
 800931e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009320:	200021e4 	.word	0x200021e4
 8009324:	00000000 	.word	0x00000000

08009328 <__ieee754_asin>:
 8009328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800932c:	ed2d 8b04 	vpush	{d8-d9}
 8009330:	ec55 4b10 	vmov	r4, r5, d0
 8009334:	4bcc      	ldr	r3, [pc, #816]	; (8009668 <__ieee754_asin+0x340>)
 8009336:	b083      	sub	sp, #12
 8009338:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800933c:	4598      	cmp	r8, r3
 800933e:	9501      	str	r5, [sp, #4]
 8009340:	dd35      	ble.n	80093ae <__ieee754_asin+0x86>
 8009342:	ee10 3a10 	vmov	r3, s0
 8009346:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800934a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800934e:	ea58 0303 	orrs.w	r3, r8, r3
 8009352:	d117      	bne.n	8009384 <__ieee754_asin+0x5c>
 8009354:	a3aa      	add	r3, pc, #680	; (adr r3, 8009600 <__ieee754_asin+0x2d8>)
 8009356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935a:	ee10 0a10 	vmov	r0, s0
 800935e:	4629      	mov	r1, r5
 8009360:	f7f7 f952 	bl	8000608 <__aeabi_dmul>
 8009364:	a3a8      	add	r3, pc, #672	; (adr r3, 8009608 <__ieee754_asin+0x2e0>)
 8009366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936a:	4606      	mov	r6, r0
 800936c:	460f      	mov	r7, r1
 800936e:	4620      	mov	r0, r4
 8009370:	4629      	mov	r1, r5
 8009372:	f7f7 f949 	bl	8000608 <__aeabi_dmul>
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	4630      	mov	r0, r6
 800937c:	4639      	mov	r1, r7
 800937e:	f7f6 ff8d 	bl	800029c <__adddf3>
 8009382:	e00b      	b.n	800939c <__ieee754_asin+0x74>
 8009384:	ee10 2a10 	vmov	r2, s0
 8009388:	462b      	mov	r3, r5
 800938a:	ee10 0a10 	vmov	r0, s0
 800938e:	4629      	mov	r1, r5
 8009390:	f7f6 ff82 	bl	8000298 <__aeabi_dsub>
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	f7f7 fa60 	bl	800085c <__aeabi_ddiv>
 800939c:	4604      	mov	r4, r0
 800939e:	460d      	mov	r5, r1
 80093a0:	ec45 4b10 	vmov	d0, r4, r5
 80093a4:	b003      	add	sp, #12
 80093a6:	ecbd 8b04 	vpop	{d8-d9}
 80093aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ae:	4baf      	ldr	r3, [pc, #700]	; (800966c <__ieee754_asin+0x344>)
 80093b0:	4598      	cmp	r8, r3
 80093b2:	dc11      	bgt.n	80093d8 <__ieee754_asin+0xb0>
 80093b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80093b8:	f280 80ae 	bge.w	8009518 <__ieee754_asin+0x1f0>
 80093bc:	a394      	add	r3, pc, #592	; (adr r3, 8009610 <__ieee754_asin+0x2e8>)
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	ee10 0a10 	vmov	r0, s0
 80093c6:	4629      	mov	r1, r5
 80093c8:	f7f6 ff68 	bl	800029c <__adddf3>
 80093cc:	4ba8      	ldr	r3, [pc, #672]	; (8009670 <__ieee754_asin+0x348>)
 80093ce:	2200      	movs	r2, #0
 80093d0:	f7f7 fbaa 	bl	8000b28 <__aeabi_dcmpgt>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d1e3      	bne.n	80093a0 <__ieee754_asin+0x78>
 80093d8:	ec45 4b10 	vmov	d0, r4, r5
 80093dc:	f001 fa52 	bl	800a884 <fabs>
 80093e0:	49a3      	ldr	r1, [pc, #652]	; (8009670 <__ieee754_asin+0x348>)
 80093e2:	ec53 2b10 	vmov	r2, r3, d0
 80093e6:	2000      	movs	r0, #0
 80093e8:	f7f6 ff56 	bl	8000298 <__aeabi_dsub>
 80093ec:	4ba1      	ldr	r3, [pc, #644]	; (8009674 <__ieee754_asin+0x34c>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	f7f7 f90a 	bl	8000608 <__aeabi_dmul>
 80093f4:	a388      	add	r3, pc, #544	; (adr r3, 8009618 <__ieee754_asin+0x2f0>)
 80093f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fa:	4604      	mov	r4, r0
 80093fc:	460d      	mov	r5, r1
 80093fe:	f7f7 f903 	bl	8000608 <__aeabi_dmul>
 8009402:	a387      	add	r3, pc, #540	; (adr r3, 8009620 <__ieee754_asin+0x2f8>)
 8009404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009408:	f7f6 ff48 	bl	800029c <__adddf3>
 800940c:	4622      	mov	r2, r4
 800940e:	462b      	mov	r3, r5
 8009410:	f7f7 f8fa 	bl	8000608 <__aeabi_dmul>
 8009414:	a384      	add	r3, pc, #528	; (adr r3, 8009628 <__ieee754_asin+0x300>)
 8009416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941a:	f7f6 ff3d 	bl	8000298 <__aeabi_dsub>
 800941e:	4622      	mov	r2, r4
 8009420:	462b      	mov	r3, r5
 8009422:	f7f7 f8f1 	bl	8000608 <__aeabi_dmul>
 8009426:	a382      	add	r3, pc, #520	; (adr r3, 8009630 <__ieee754_asin+0x308>)
 8009428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942c:	f7f6 ff36 	bl	800029c <__adddf3>
 8009430:	4622      	mov	r2, r4
 8009432:	462b      	mov	r3, r5
 8009434:	f7f7 f8e8 	bl	8000608 <__aeabi_dmul>
 8009438:	a37f      	add	r3, pc, #508	; (adr r3, 8009638 <__ieee754_asin+0x310>)
 800943a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943e:	f7f6 ff2b 	bl	8000298 <__aeabi_dsub>
 8009442:	4622      	mov	r2, r4
 8009444:	462b      	mov	r3, r5
 8009446:	f7f7 f8df 	bl	8000608 <__aeabi_dmul>
 800944a:	a37d      	add	r3, pc, #500	; (adr r3, 8009640 <__ieee754_asin+0x318>)
 800944c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009450:	f7f6 ff24 	bl	800029c <__adddf3>
 8009454:	4622      	mov	r2, r4
 8009456:	462b      	mov	r3, r5
 8009458:	f7f7 f8d6 	bl	8000608 <__aeabi_dmul>
 800945c:	a37a      	add	r3, pc, #488	; (adr r3, 8009648 <__ieee754_asin+0x320>)
 800945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009462:	ec41 0b18 	vmov	d8, r0, r1
 8009466:	4620      	mov	r0, r4
 8009468:	4629      	mov	r1, r5
 800946a:	f7f7 f8cd 	bl	8000608 <__aeabi_dmul>
 800946e:	a378      	add	r3, pc, #480	; (adr r3, 8009650 <__ieee754_asin+0x328>)
 8009470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009474:	f7f6 ff10 	bl	8000298 <__aeabi_dsub>
 8009478:	4622      	mov	r2, r4
 800947a:	462b      	mov	r3, r5
 800947c:	f7f7 f8c4 	bl	8000608 <__aeabi_dmul>
 8009480:	a375      	add	r3, pc, #468	; (adr r3, 8009658 <__ieee754_asin+0x330>)
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	f7f6 ff09 	bl	800029c <__adddf3>
 800948a:	4622      	mov	r2, r4
 800948c:	462b      	mov	r3, r5
 800948e:	f7f7 f8bb 	bl	8000608 <__aeabi_dmul>
 8009492:	a373      	add	r3, pc, #460	; (adr r3, 8009660 <__ieee754_asin+0x338>)
 8009494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009498:	f7f6 fefe 	bl	8000298 <__aeabi_dsub>
 800949c:	4622      	mov	r2, r4
 800949e:	462b      	mov	r3, r5
 80094a0:	f7f7 f8b2 	bl	8000608 <__aeabi_dmul>
 80094a4:	4b72      	ldr	r3, [pc, #456]	; (8009670 <__ieee754_asin+0x348>)
 80094a6:	2200      	movs	r2, #0
 80094a8:	f7f6 fef8 	bl	800029c <__adddf3>
 80094ac:	ec45 4b10 	vmov	d0, r4, r5
 80094b0:	4606      	mov	r6, r0
 80094b2:	460f      	mov	r7, r1
 80094b4:	f000 fc6a 	bl	8009d8c <__ieee754_sqrt>
 80094b8:	4b6f      	ldr	r3, [pc, #444]	; (8009678 <__ieee754_asin+0x350>)
 80094ba:	4598      	cmp	r8, r3
 80094bc:	ec5b ab10 	vmov	sl, fp, d0
 80094c0:	f340 80dc 	ble.w	800967c <__ieee754_asin+0x354>
 80094c4:	4632      	mov	r2, r6
 80094c6:	463b      	mov	r3, r7
 80094c8:	ec51 0b18 	vmov	r0, r1, d8
 80094cc:	f7f7 f9c6 	bl	800085c <__aeabi_ddiv>
 80094d0:	4652      	mov	r2, sl
 80094d2:	465b      	mov	r3, fp
 80094d4:	f7f7 f898 	bl	8000608 <__aeabi_dmul>
 80094d8:	4652      	mov	r2, sl
 80094da:	465b      	mov	r3, fp
 80094dc:	f7f6 fede 	bl	800029c <__adddf3>
 80094e0:	4602      	mov	r2, r0
 80094e2:	460b      	mov	r3, r1
 80094e4:	f7f6 feda 	bl	800029c <__adddf3>
 80094e8:	a347      	add	r3, pc, #284	; (adr r3, 8009608 <__ieee754_asin+0x2e0>)
 80094ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ee:	f7f6 fed3 	bl	8000298 <__aeabi_dsub>
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	a142      	add	r1, pc, #264	; (adr r1, 8009600 <__ieee754_asin+0x2d8>)
 80094f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094fc:	f7f6 fecc 	bl	8000298 <__aeabi_dsub>
 8009500:	9b01      	ldr	r3, [sp, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	bfdc      	itt	le
 8009506:	4602      	movle	r2, r0
 8009508:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800950c:	4604      	mov	r4, r0
 800950e:	460d      	mov	r5, r1
 8009510:	bfdc      	itt	le
 8009512:	4614      	movle	r4, r2
 8009514:	461d      	movle	r5, r3
 8009516:	e743      	b.n	80093a0 <__ieee754_asin+0x78>
 8009518:	ee10 2a10 	vmov	r2, s0
 800951c:	ee10 0a10 	vmov	r0, s0
 8009520:	462b      	mov	r3, r5
 8009522:	4629      	mov	r1, r5
 8009524:	f7f7 f870 	bl	8000608 <__aeabi_dmul>
 8009528:	a33b      	add	r3, pc, #236	; (adr r3, 8009618 <__ieee754_asin+0x2f0>)
 800952a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952e:	4606      	mov	r6, r0
 8009530:	460f      	mov	r7, r1
 8009532:	f7f7 f869 	bl	8000608 <__aeabi_dmul>
 8009536:	a33a      	add	r3, pc, #232	; (adr r3, 8009620 <__ieee754_asin+0x2f8>)
 8009538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953c:	f7f6 feae 	bl	800029c <__adddf3>
 8009540:	4632      	mov	r2, r6
 8009542:	463b      	mov	r3, r7
 8009544:	f7f7 f860 	bl	8000608 <__aeabi_dmul>
 8009548:	a337      	add	r3, pc, #220	; (adr r3, 8009628 <__ieee754_asin+0x300>)
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	f7f6 fea3 	bl	8000298 <__aeabi_dsub>
 8009552:	4632      	mov	r2, r6
 8009554:	463b      	mov	r3, r7
 8009556:	f7f7 f857 	bl	8000608 <__aeabi_dmul>
 800955a:	a335      	add	r3, pc, #212	; (adr r3, 8009630 <__ieee754_asin+0x308>)
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	f7f6 fe9c 	bl	800029c <__adddf3>
 8009564:	4632      	mov	r2, r6
 8009566:	463b      	mov	r3, r7
 8009568:	f7f7 f84e 	bl	8000608 <__aeabi_dmul>
 800956c:	a332      	add	r3, pc, #200	; (adr r3, 8009638 <__ieee754_asin+0x310>)
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	f7f6 fe91 	bl	8000298 <__aeabi_dsub>
 8009576:	4632      	mov	r2, r6
 8009578:	463b      	mov	r3, r7
 800957a:	f7f7 f845 	bl	8000608 <__aeabi_dmul>
 800957e:	a330      	add	r3, pc, #192	; (adr r3, 8009640 <__ieee754_asin+0x318>)
 8009580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009584:	f7f6 fe8a 	bl	800029c <__adddf3>
 8009588:	4632      	mov	r2, r6
 800958a:	463b      	mov	r3, r7
 800958c:	f7f7 f83c 	bl	8000608 <__aeabi_dmul>
 8009590:	a32d      	add	r3, pc, #180	; (adr r3, 8009648 <__ieee754_asin+0x320>)
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	4680      	mov	r8, r0
 8009598:	4689      	mov	r9, r1
 800959a:	4630      	mov	r0, r6
 800959c:	4639      	mov	r1, r7
 800959e:	f7f7 f833 	bl	8000608 <__aeabi_dmul>
 80095a2:	a32b      	add	r3, pc, #172	; (adr r3, 8009650 <__ieee754_asin+0x328>)
 80095a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a8:	f7f6 fe76 	bl	8000298 <__aeabi_dsub>
 80095ac:	4632      	mov	r2, r6
 80095ae:	463b      	mov	r3, r7
 80095b0:	f7f7 f82a 	bl	8000608 <__aeabi_dmul>
 80095b4:	a328      	add	r3, pc, #160	; (adr r3, 8009658 <__ieee754_asin+0x330>)
 80095b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ba:	f7f6 fe6f 	bl	800029c <__adddf3>
 80095be:	4632      	mov	r2, r6
 80095c0:	463b      	mov	r3, r7
 80095c2:	f7f7 f821 	bl	8000608 <__aeabi_dmul>
 80095c6:	a326      	add	r3, pc, #152	; (adr r3, 8009660 <__ieee754_asin+0x338>)
 80095c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095cc:	f7f6 fe64 	bl	8000298 <__aeabi_dsub>
 80095d0:	4632      	mov	r2, r6
 80095d2:	463b      	mov	r3, r7
 80095d4:	f7f7 f818 	bl	8000608 <__aeabi_dmul>
 80095d8:	4b25      	ldr	r3, [pc, #148]	; (8009670 <__ieee754_asin+0x348>)
 80095da:	2200      	movs	r2, #0
 80095dc:	f7f6 fe5e 	bl	800029c <__adddf3>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4640      	mov	r0, r8
 80095e6:	4649      	mov	r1, r9
 80095e8:	f7f7 f938 	bl	800085c <__aeabi_ddiv>
 80095ec:	4622      	mov	r2, r4
 80095ee:	462b      	mov	r3, r5
 80095f0:	f7f7 f80a 	bl	8000608 <__aeabi_dmul>
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	4620      	mov	r0, r4
 80095fa:	4629      	mov	r1, r5
 80095fc:	e6bf      	b.n	800937e <__ieee754_asin+0x56>
 80095fe:	bf00      	nop
 8009600:	54442d18 	.word	0x54442d18
 8009604:	3ff921fb 	.word	0x3ff921fb
 8009608:	33145c07 	.word	0x33145c07
 800960c:	3c91a626 	.word	0x3c91a626
 8009610:	8800759c 	.word	0x8800759c
 8009614:	7e37e43c 	.word	0x7e37e43c
 8009618:	0dfdf709 	.word	0x0dfdf709
 800961c:	3f023de1 	.word	0x3f023de1
 8009620:	7501b288 	.word	0x7501b288
 8009624:	3f49efe0 	.word	0x3f49efe0
 8009628:	b5688f3b 	.word	0xb5688f3b
 800962c:	3fa48228 	.word	0x3fa48228
 8009630:	0e884455 	.word	0x0e884455
 8009634:	3fc9c155 	.word	0x3fc9c155
 8009638:	03eb6f7d 	.word	0x03eb6f7d
 800963c:	3fd4d612 	.word	0x3fd4d612
 8009640:	55555555 	.word	0x55555555
 8009644:	3fc55555 	.word	0x3fc55555
 8009648:	b12e9282 	.word	0xb12e9282
 800964c:	3fb3b8c5 	.word	0x3fb3b8c5
 8009650:	1b8d0159 	.word	0x1b8d0159
 8009654:	3fe6066c 	.word	0x3fe6066c
 8009658:	9c598ac8 	.word	0x9c598ac8
 800965c:	40002ae5 	.word	0x40002ae5
 8009660:	1c8a2d4b 	.word	0x1c8a2d4b
 8009664:	40033a27 	.word	0x40033a27
 8009668:	3fefffff 	.word	0x3fefffff
 800966c:	3fdfffff 	.word	0x3fdfffff
 8009670:	3ff00000 	.word	0x3ff00000
 8009674:	3fe00000 	.word	0x3fe00000
 8009678:	3fef3332 	.word	0x3fef3332
 800967c:	ee10 2a10 	vmov	r2, s0
 8009680:	ee10 0a10 	vmov	r0, s0
 8009684:	465b      	mov	r3, fp
 8009686:	4659      	mov	r1, fp
 8009688:	f7f6 fe08 	bl	800029c <__adddf3>
 800968c:	4632      	mov	r2, r6
 800968e:	463b      	mov	r3, r7
 8009690:	ec41 0b19 	vmov	d9, r0, r1
 8009694:	ec51 0b18 	vmov	r0, r1, d8
 8009698:	f7f7 f8e0 	bl	800085c <__aeabi_ddiv>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	ec51 0b19 	vmov	r0, r1, d9
 80096a4:	f7f6 ffb0 	bl	8000608 <__aeabi_dmul>
 80096a8:	f04f 0800 	mov.w	r8, #0
 80096ac:	4606      	mov	r6, r0
 80096ae:	460f      	mov	r7, r1
 80096b0:	4642      	mov	r2, r8
 80096b2:	465b      	mov	r3, fp
 80096b4:	4640      	mov	r0, r8
 80096b6:	4659      	mov	r1, fp
 80096b8:	f7f6 ffa6 	bl	8000608 <__aeabi_dmul>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	4620      	mov	r0, r4
 80096c2:	4629      	mov	r1, r5
 80096c4:	f7f6 fde8 	bl	8000298 <__aeabi_dsub>
 80096c8:	4642      	mov	r2, r8
 80096ca:	4604      	mov	r4, r0
 80096cc:	460d      	mov	r5, r1
 80096ce:	465b      	mov	r3, fp
 80096d0:	4650      	mov	r0, sl
 80096d2:	4659      	mov	r1, fp
 80096d4:	f7f6 fde2 	bl	800029c <__adddf3>
 80096d8:	4602      	mov	r2, r0
 80096da:	460b      	mov	r3, r1
 80096dc:	4620      	mov	r0, r4
 80096de:	4629      	mov	r1, r5
 80096e0:	f7f7 f8bc 	bl	800085c <__aeabi_ddiv>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	f7f6 fdd8 	bl	800029c <__adddf3>
 80096ec:	4602      	mov	r2, r0
 80096ee:	460b      	mov	r3, r1
 80096f0:	a113      	add	r1, pc, #76	; (adr r1, 8009740 <__ieee754_asin+0x418>)
 80096f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096f6:	f7f6 fdcf 	bl	8000298 <__aeabi_dsub>
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	4630      	mov	r0, r6
 8009700:	4639      	mov	r1, r7
 8009702:	f7f6 fdc9 	bl	8000298 <__aeabi_dsub>
 8009706:	4642      	mov	r2, r8
 8009708:	4604      	mov	r4, r0
 800970a:	460d      	mov	r5, r1
 800970c:	465b      	mov	r3, fp
 800970e:	4640      	mov	r0, r8
 8009710:	4659      	mov	r1, fp
 8009712:	f7f6 fdc3 	bl	800029c <__adddf3>
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	a10b      	add	r1, pc, #44	; (adr r1, 8009748 <__ieee754_asin+0x420>)
 800971c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009720:	f7f6 fdba 	bl	8000298 <__aeabi_dsub>
 8009724:	4602      	mov	r2, r0
 8009726:	460b      	mov	r3, r1
 8009728:	4620      	mov	r0, r4
 800972a:	4629      	mov	r1, r5
 800972c:	f7f6 fdb4 	bl	8000298 <__aeabi_dsub>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	a104      	add	r1, pc, #16	; (adr r1, 8009748 <__ieee754_asin+0x420>)
 8009736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800973a:	e6df      	b.n	80094fc <__ieee754_asin+0x1d4>
 800973c:	f3af 8000 	nop.w
 8009740:	33145c07 	.word	0x33145c07
 8009744:	3c91a626 	.word	0x3c91a626
 8009748:	54442d18 	.word	0x54442d18
 800974c:	3fe921fb 	.word	0x3fe921fb

08009750 <__ieee754_fmod>:
 8009750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009754:	ec53 2b11 	vmov	r2, r3, d1
 8009758:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800975c:	ea5e 0402 	orrs.w	r4, lr, r2
 8009760:	ec51 0b10 	vmov	r0, r1, d0
 8009764:	ee11 7a10 	vmov	r7, s2
 8009768:	ee11 ca10 	vmov	ip, s2
 800976c:	461e      	mov	r6, r3
 800976e:	d00d      	beq.n	800978c <__ieee754_fmod+0x3c>
 8009770:	4c7a      	ldr	r4, [pc, #488]	; (800995c <__ieee754_fmod+0x20c>)
 8009772:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8009776:	45a0      	cmp	r8, r4
 8009778:	4689      	mov	r9, r1
 800977a:	dc07      	bgt.n	800978c <__ieee754_fmod+0x3c>
 800977c:	4254      	negs	r4, r2
 800977e:	4d78      	ldr	r5, [pc, #480]	; (8009960 <__ieee754_fmod+0x210>)
 8009780:	4314      	orrs	r4, r2
 8009782:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8009786:	42ac      	cmp	r4, r5
 8009788:	46ab      	mov	fp, r5
 800978a:	d909      	bls.n	80097a0 <__ieee754_fmod+0x50>
 800978c:	f7f6 ff3c 	bl	8000608 <__aeabi_dmul>
 8009790:	4602      	mov	r2, r0
 8009792:	460b      	mov	r3, r1
 8009794:	f7f7 f862 	bl	800085c <__aeabi_ddiv>
 8009798:	ec41 0b10 	vmov	d0, r0, r1
 800979c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a0:	45f0      	cmp	r8, lr
 80097a2:	ee10 aa10 	vmov	sl, s0
 80097a6:	ee10 4a10 	vmov	r4, s0
 80097aa:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80097ae:	dc0a      	bgt.n	80097c6 <__ieee754_fmod+0x76>
 80097b0:	dbf2      	blt.n	8009798 <__ieee754_fmod+0x48>
 80097b2:	4290      	cmp	r0, r2
 80097b4:	d3f0      	bcc.n	8009798 <__ieee754_fmod+0x48>
 80097b6:	d106      	bne.n	80097c6 <__ieee754_fmod+0x76>
 80097b8:	4a6a      	ldr	r2, [pc, #424]	; (8009964 <__ieee754_fmod+0x214>)
 80097ba:	0fed      	lsrs	r5, r5, #31
 80097bc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80097c0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80097c4:	e7e8      	b.n	8009798 <__ieee754_fmod+0x48>
 80097c6:	ea19 0f0b 	tst.w	r9, fp
 80097ca:	d14a      	bne.n	8009862 <__ieee754_fmod+0x112>
 80097cc:	f1b8 0f00 	cmp.w	r8, #0
 80097d0:	d13f      	bne.n	8009852 <__ieee754_fmod+0x102>
 80097d2:	4965      	ldr	r1, [pc, #404]	; (8009968 <__ieee754_fmod+0x218>)
 80097d4:	4653      	mov	r3, sl
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	dc38      	bgt.n	800984c <__ieee754_fmod+0xfc>
 80097da:	4b61      	ldr	r3, [pc, #388]	; (8009960 <__ieee754_fmod+0x210>)
 80097dc:	4033      	ands	r3, r6
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d14f      	bne.n	8009882 <__ieee754_fmod+0x132>
 80097e2:	f1be 0f00 	cmp.w	lr, #0
 80097e6:	d144      	bne.n	8009872 <__ieee754_fmod+0x122>
 80097e8:	4a5f      	ldr	r2, [pc, #380]	; (8009968 <__ieee754_fmod+0x218>)
 80097ea:	463b      	mov	r3, r7
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	dc3d      	bgt.n	800986c <__ieee754_fmod+0x11c>
 80097f0:	4b5e      	ldr	r3, [pc, #376]	; (800996c <__ieee754_fmod+0x21c>)
 80097f2:	4299      	cmp	r1, r3
 80097f4:	db4a      	blt.n	800988c <__ieee754_fmod+0x13c>
 80097f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097fe:	485b      	ldr	r0, [pc, #364]	; (800996c <__ieee754_fmod+0x21c>)
 8009800:	4282      	cmp	r2, r0
 8009802:	db57      	blt.n	80098b4 <__ieee754_fmod+0x164>
 8009804:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8009808:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800980c:	1a89      	subs	r1, r1, r2
 800980e:	1b98      	subs	r0, r3, r6
 8009810:	eba4 070c 	sub.w	r7, r4, ip
 8009814:	2900      	cmp	r1, #0
 8009816:	d164      	bne.n	80098e2 <__ieee754_fmod+0x192>
 8009818:	4564      	cmp	r4, ip
 800981a:	bf38      	it	cc
 800981c:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 8009820:	2800      	cmp	r0, #0
 8009822:	bfa4      	itt	ge
 8009824:	463c      	movge	r4, r7
 8009826:	4603      	movge	r3, r0
 8009828:	ea53 0104 	orrs.w	r1, r3, r4
 800982c:	d0c4      	beq.n	80097b8 <__ieee754_fmod+0x68>
 800982e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009832:	db6b      	blt.n	800990c <__ieee754_fmod+0x1bc>
 8009834:	494d      	ldr	r1, [pc, #308]	; (800996c <__ieee754_fmod+0x21c>)
 8009836:	428a      	cmp	r2, r1
 8009838:	db6e      	blt.n	8009918 <__ieee754_fmod+0x1c8>
 800983a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800983e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8009842:	431d      	orrs	r5, r3
 8009844:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8009848:	4620      	mov	r0, r4
 800984a:	e7a5      	b.n	8009798 <__ieee754_fmod+0x48>
 800984c:	3901      	subs	r1, #1
 800984e:	005b      	lsls	r3, r3, #1
 8009850:	e7c1      	b.n	80097d6 <__ieee754_fmod+0x86>
 8009852:	4946      	ldr	r1, [pc, #280]	; (800996c <__ieee754_fmod+0x21c>)
 8009854:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8009858:	2b00      	cmp	r3, #0
 800985a:	ddbe      	ble.n	80097da <__ieee754_fmod+0x8a>
 800985c:	3901      	subs	r1, #1
 800985e:	005b      	lsls	r3, r3, #1
 8009860:	e7fa      	b.n	8009858 <__ieee754_fmod+0x108>
 8009862:	ea4f 5128 	mov.w	r1, r8, asr #20
 8009866:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800986a:	e7b6      	b.n	80097da <__ieee754_fmod+0x8a>
 800986c:	3a01      	subs	r2, #1
 800986e:	005b      	lsls	r3, r3, #1
 8009870:	e7bc      	b.n	80097ec <__ieee754_fmod+0x9c>
 8009872:	4a3e      	ldr	r2, [pc, #248]	; (800996c <__ieee754_fmod+0x21c>)
 8009874:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8009878:	2b00      	cmp	r3, #0
 800987a:	ddb9      	ble.n	80097f0 <__ieee754_fmod+0xa0>
 800987c:	3a01      	subs	r2, #1
 800987e:	005b      	lsls	r3, r3, #1
 8009880:	e7fa      	b.n	8009878 <__ieee754_fmod+0x128>
 8009882:	ea4f 522e 	mov.w	r2, lr, asr #20
 8009886:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800988a:	e7b1      	b.n	80097f0 <__ieee754_fmod+0xa0>
 800988c:	1a5c      	subs	r4, r3, r1
 800988e:	2c1f      	cmp	r4, #31
 8009890:	dc0a      	bgt.n	80098a8 <__ieee754_fmod+0x158>
 8009892:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8009896:	fa08 f804 	lsl.w	r8, r8, r4
 800989a:	fa2a f303 	lsr.w	r3, sl, r3
 800989e:	ea43 0308 	orr.w	r3, r3, r8
 80098a2:	fa0a f404 	lsl.w	r4, sl, r4
 80098a6:	e7aa      	b.n	80097fe <__ieee754_fmod+0xae>
 80098a8:	4b31      	ldr	r3, [pc, #196]	; (8009970 <__ieee754_fmod+0x220>)
 80098aa:	1a5b      	subs	r3, r3, r1
 80098ac:	fa0a f303 	lsl.w	r3, sl, r3
 80098b0:	2400      	movs	r4, #0
 80098b2:	e7a4      	b.n	80097fe <__ieee754_fmod+0xae>
 80098b4:	eba0 0c02 	sub.w	ip, r0, r2
 80098b8:	f1bc 0f1f 	cmp.w	ip, #31
 80098bc:	dc0a      	bgt.n	80098d4 <__ieee754_fmod+0x184>
 80098be:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 80098c2:	fa0e fe0c 	lsl.w	lr, lr, ip
 80098c6:	fa27 f606 	lsr.w	r6, r7, r6
 80098ca:	ea46 060e 	orr.w	r6, r6, lr
 80098ce:	fa07 fc0c 	lsl.w	ip, r7, ip
 80098d2:	e79b      	b.n	800980c <__ieee754_fmod+0xbc>
 80098d4:	4e26      	ldr	r6, [pc, #152]	; (8009970 <__ieee754_fmod+0x220>)
 80098d6:	1ab6      	subs	r6, r6, r2
 80098d8:	fa07 f606 	lsl.w	r6, r7, r6
 80098dc:	f04f 0c00 	mov.w	ip, #0
 80098e0:	e794      	b.n	800980c <__ieee754_fmod+0xbc>
 80098e2:	4564      	cmp	r4, ip
 80098e4:	bf38      	it	cc
 80098e6:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 80098ea:	2800      	cmp	r0, #0
 80098ec:	da05      	bge.n	80098fa <__ieee754_fmod+0x1aa>
 80098ee:	0fe0      	lsrs	r0, r4, #31
 80098f0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80098f4:	0064      	lsls	r4, r4, #1
 80098f6:	3901      	subs	r1, #1
 80098f8:	e789      	b.n	800980e <__ieee754_fmod+0xbe>
 80098fa:	ea50 0307 	orrs.w	r3, r0, r7
 80098fe:	f43f af5b 	beq.w	80097b8 <__ieee754_fmod+0x68>
 8009902:	0ffb      	lsrs	r3, r7, #31
 8009904:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8009908:	007c      	lsls	r4, r7, #1
 800990a:	e7f4      	b.n	80098f6 <__ieee754_fmod+0x1a6>
 800990c:	0fe1      	lsrs	r1, r4, #31
 800990e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8009912:	0064      	lsls	r4, r4, #1
 8009914:	3a01      	subs	r2, #1
 8009916:	e78a      	b.n	800982e <__ieee754_fmod+0xde>
 8009918:	1a89      	subs	r1, r1, r2
 800991a:	2914      	cmp	r1, #20
 800991c:	dc0a      	bgt.n	8009934 <__ieee754_fmod+0x1e4>
 800991e:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8009922:	fa03 f202 	lsl.w	r2, r3, r2
 8009926:	40cc      	lsrs	r4, r1
 8009928:	4322      	orrs	r2, r4
 800992a:	410b      	asrs	r3, r1
 800992c:	ea43 0105 	orr.w	r1, r3, r5
 8009930:	4610      	mov	r0, r2
 8009932:	e731      	b.n	8009798 <__ieee754_fmod+0x48>
 8009934:	291f      	cmp	r1, #31
 8009936:	dc07      	bgt.n	8009948 <__ieee754_fmod+0x1f8>
 8009938:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800993c:	40cc      	lsrs	r4, r1
 800993e:	fa03 f202 	lsl.w	r2, r3, r2
 8009942:	4322      	orrs	r2, r4
 8009944:	462b      	mov	r3, r5
 8009946:	e7f1      	b.n	800992c <__ieee754_fmod+0x1dc>
 8009948:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800994c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009950:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8009954:	32e2      	adds	r2, #226	; 0xe2
 8009956:	fa43 f202 	asr.w	r2, r3, r2
 800995a:	e7f3      	b.n	8009944 <__ieee754_fmod+0x1f4>
 800995c:	7fefffff 	.word	0x7fefffff
 8009960:	7ff00000 	.word	0x7ff00000
 8009964:	0800b048 	.word	0x0800b048
 8009968:	fffffbed 	.word	0xfffffbed
 800996c:	fffffc02 	.word	0xfffffc02
 8009970:	fffffbe2 	.word	0xfffffbe2
 8009974:	00000000 	.word	0x00000000

08009978 <__ieee754_rem_pio2>:
 8009978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800997c:	ed2d 8b02 	vpush	{d8}
 8009980:	ec55 4b10 	vmov	r4, r5, d0
 8009984:	4bca      	ldr	r3, [pc, #808]	; (8009cb0 <__ieee754_rem_pio2+0x338>)
 8009986:	b08b      	sub	sp, #44	; 0x2c
 8009988:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800998c:	4598      	cmp	r8, r3
 800998e:	4682      	mov	sl, r0
 8009990:	9502      	str	r5, [sp, #8]
 8009992:	dc08      	bgt.n	80099a6 <__ieee754_rem_pio2+0x2e>
 8009994:	2200      	movs	r2, #0
 8009996:	2300      	movs	r3, #0
 8009998:	ed80 0b00 	vstr	d0, [r0]
 800999c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80099a0:	f04f 0b00 	mov.w	fp, #0
 80099a4:	e028      	b.n	80099f8 <__ieee754_rem_pio2+0x80>
 80099a6:	4bc3      	ldr	r3, [pc, #780]	; (8009cb4 <__ieee754_rem_pio2+0x33c>)
 80099a8:	4598      	cmp	r8, r3
 80099aa:	dc78      	bgt.n	8009a9e <__ieee754_rem_pio2+0x126>
 80099ac:	9b02      	ldr	r3, [sp, #8]
 80099ae:	4ec2      	ldr	r6, [pc, #776]	; (8009cb8 <__ieee754_rem_pio2+0x340>)
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	ee10 0a10 	vmov	r0, s0
 80099b6:	a3b0      	add	r3, pc, #704	; (adr r3, 8009c78 <__ieee754_rem_pio2+0x300>)
 80099b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099bc:	4629      	mov	r1, r5
 80099be:	dd39      	ble.n	8009a34 <__ieee754_rem_pio2+0xbc>
 80099c0:	f7f6 fc6a 	bl	8000298 <__aeabi_dsub>
 80099c4:	45b0      	cmp	r8, r6
 80099c6:	4604      	mov	r4, r0
 80099c8:	460d      	mov	r5, r1
 80099ca:	d01b      	beq.n	8009a04 <__ieee754_rem_pio2+0x8c>
 80099cc:	a3ac      	add	r3, pc, #688	; (adr r3, 8009c80 <__ieee754_rem_pio2+0x308>)
 80099ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d2:	f7f6 fc61 	bl	8000298 <__aeabi_dsub>
 80099d6:	4602      	mov	r2, r0
 80099d8:	460b      	mov	r3, r1
 80099da:	e9ca 2300 	strd	r2, r3, [sl]
 80099de:	4620      	mov	r0, r4
 80099e0:	4629      	mov	r1, r5
 80099e2:	f7f6 fc59 	bl	8000298 <__aeabi_dsub>
 80099e6:	a3a6      	add	r3, pc, #664	; (adr r3, 8009c80 <__ieee754_rem_pio2+0x308>)
 80099e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ec:	f7f6 fc54 	bl	8000298 <__aeabi_dsub>
 80099f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80099f4:	f04f 0b01 	mov.w	fp, #1
 80099f8:	4658      	mov	r0, fp
 80099fa:	b00b      	add	sp, #44	; 0x2c
 80099fc:	ecbd 8b02 	vpop	{d8}
 8009a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a04:	a3a0      	add	r3, pc, #640	; (adr r3, 8009c88 <__ieee754_rem_pio2+0x310>)
 8009a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0a:	f7f6 fc45 	bl	8000298 <__aeabi_dsub>
 8009a0e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009c90 <__ieee754_rem_pio2+0x318>)
 8009a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a14:	4604      	mov	r4, r0
 8009a16:	460d      	mov	r5, r1
 8009a18:	f7f6 fc3e 	bl	8000298 <__aeabi_dsub>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	e9ca 2300 	strd	r2, r3, [sl]
 8009a24:	4620      	mov	r0, r4
 8009a26:	4629      	mov	r1, r5
 8009a28:	f7f6 fc36 	bl	8000298 <__aeabi_dsub>
 8009a2c:	a398      	add	r3, pc, #608	; (adr r3, 8009c90 <__ieee754_rem_pio2+0x318>)
 8009a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a32:	e7db      	b.n	80099ec <__ieee754_rem_pio2+0x74>
 8009a34:	f7f6 fc32 	bl	800029c <__adddf3>
 8009a38:	45b0      	cmp	r8, r6
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	460d      	mov	r5, r1
 8009a3e:	d016      	beq.n	8009a6e <__ieee754_rem_pio2+0xf6>
 8009a40:	a38f      	add	r3, pc, #572	; (adr r3, 8009c80 <__ieee754_rem_pio2+0x308>)
 8009a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a46:	f7f6 fc29 	bl	800029c <__adddf3>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	e9ca 2300 	strd	r2, r3, [sl]
 8009a52:	4620      	mov	r0, r4
 8009a54:	4629      	mov	r1, r5
 8009a56:	f7f6 fc1f 	bl	8000298 <__aeabi_dsub>
 8009a5a:	a389      	add	r3, pc, #548	; (adr r3, 8009c80 <__ieee754_rem_pio2+0x308>)
 8009a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a60:	f7f6 fc1c 	bl	800029c <__adddf3>
 8009a64:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009a68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009a6c:	e7c4      	b.n	80099f8 <__ieee754_rem_pio2+0x80>
 8009a6e:	a386      	add	r3, pc, #536	; (adr r3, 8009c88 <__ieee754_rem_pio2+0x310>)
 8009a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a74:	f7f6 fc12 	bl	800029c <__adddf3>
 8009a78:	a385      	add	r3, pc, #532	; (adr r3, 8009c90 <__ieee754_rem_pio2+0x318>)
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	4604      	mov	r4, r0
 8009a80:	460d      	mov	r5, r1
 8009a82:	f7f6 fc0b 	bl	800029c <__adddf3>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	e9ca 2300 	strd	r2, r3, [sl]
 8009a8e:	4620      	mov	r0, r4
 8009a90:	4629      	mov	r1, r5
 8009a92:	f7f6 fc01 	bl	8000298 <__aeabi_dsub>
 8009a96:	a37e      	add	r3, pc, #504	; (adr r3, 8009c90 <__ieee754_rem_pio2+0x318>)
 8009a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9c:	e7e0      	b.n	8009a60 <__ieee754_rem_pio2+0xe8>
 8009a9e:	4b87      	ldr	r3, [pc, #540]	; (8009cbc <__ieee754_rem_pio2+0x344>)
 8009aa0:	4598      	cmp	r8, r3
 8009aa2:	f300 80d9 	bgt.w	8009c58 <__ieee754_rem_pio2+0x2e0>
 8009aa6:	f000 feed 	bl	800a884 <fabs>
 8009aaa:	ec55 4b10 	vmov	r4, r5, d0
 8009aae:	ee10 0a10 	vmov	r0, s0
 8009ab2:	a379      	add	r3, pc, #484	; (adr r3, 8009c98 <__ieee754_rem_pio2+0x320>)
 8009ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab8:	4629      	mov	r1, r5
 8009aba:	f7f6 fda5 	bl	8000608 <__aeabi_dmul>
 8009abe:	4b80      	ldr	r3, [pc, #512]	; (8009cc0 <__ieee754_rem_pio2+0x348>)
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f7f6 fbeb 	bl	800029c <__adddf3>
 8009ac6:	f7f7 f84f 	bl	8000b68 <__aeabi_d2iz>
 8009aca:	4683      	mov	fp, r0
 8009acc:	f7f6 fd32 	bl	8000534 <__aeabi_i2d>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	ec43 2b18 	vmov	d8, r2, r3
 8009ad8:	a367      	add	r3, pc, #412	; (adr r3, 8009c78 <__ieee754_rem_pio2+0x300>)
 8009ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ade:	f7f6 fd93 	bl	8000608 <__aeabi_dmul>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	4629      	mov	r1, r5
 8009aea:	f7f6 fbd5 	bl	8000298 <__aeabi_dsub>
 8009aee:	a364      	add	r3, pc, #400	; (adr r3, 8009c80 <__ieee754_rem_pio2+0x308>)
 8009af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af4:	4606      	mov	r6, r0
 8009af6:	460f      	mov	r7, r1
 8009af8:	ec51 0b18 	vmov	r0, r1, d8
 8009afc:	f7f6 fd84 	bl	8000608 <__aeabi_dmul>
 8009b00:	f1bb 0f1f 	cmp.w	fp, #31
 8009b04:	4604      	mov	r4, r0
 8009b06:	460d      	mov	r5, r1
 8009b08:	dc0d      	bgt.n	8009b26 <__ieee754_rem_pio2+0x1ae>
 8009b0a:	4b6e      	ldr	r3, [pc, #440]	; (8009cc4 <__ieee754_rem_pio2+0x34c>)
 8009b0c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8009b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b14:	4543      	cmp	r3, r8
 8009b16:	d006      	beq.n	8009b26 <__ieee754_rem_pio2+0x1ae>
 8009b18:	4622      	mov	r2, r4
 8009b1a:	462b      	mov	r3, r5
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	4639      	mov	r1, r7
 8009b20:	f7f6 fbba 	bl	8000298 <__aeabi_dsub>
 8009b24:	e00f      	b.n	8009b46 <__ieee754_rem_pio2+0x1ce>
 8009b26:	462b      	mov	r3, r5
 8009b28:	4622      	mov	r2, r4
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	4639      	mov	r1, r7
 8009b2e:	f7f6 fbb3 	bl	8000298 <__aeabi_dsub>
 8009b32:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009b36:	9303      	str	r3, [sp, #12]
 8009b38:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009b3c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009b40:	f1b8 0f10 	cmp.w	r8, #16
 8009b44:	dc02      	bgt.n	8009b4c <__ieee754_rem_pio2+0x1d4>
 8009b46:	e9ca 0100 	strd	r0, r1, [sl]
 8009b4a:	e039      	b.n	8009bc0 <__ieee754_rem_pio2+0x248>
 8009b4c:	a34e      	add	r3, pc, #312	; (adr r3, 8009c88 <__ieee754_rem_pio2+0x310>)
 8009b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b52:	ec51 0b18 	vmov	r0, r1, d8
 8009b56:	f7f6 fd57 	bl	8000608 <__aeabi_dmul>
 8009b5a:	4604      	mov	r4, r0
 8009b5c:	460d      	mov	r5, r1
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	4630      	mov	r0, r6
 8009b64:	4639      	mov	r1, r7
 8009b66:	f7f6 fb97 	bl	8000298 <__aeabi_dsub>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4680      	mov	r8, r0
 8009b70:	4689      	mov	r9, r1
 8009b72:	4630      	mov	r0, r6
 8009b74:	4639      	mov	r1, r7
 8009b76:	f7f6 fb8f 	bl	8000298 <__aeabi_dsub>
 8009b7a:	4622      	mov	r2, r4
 8009b7c:	462b      	mov	r3, r5
 8009b7e:	f7f6 fb8b 	bl	8000298 <__aeabi_dsub>
 8009b82:	a343      	add	r3, pc, #268	; (adr r3, 8009c90 <__ieee754_rem_pio2+0x318>)
 8009b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b88:	4604      	mov	r4, r0
 8009b8a:	460d      	mov	r5, r1
 8009b8c:	ec51 0b18 	vmov	r0, r1, d8
 8009b90:	f7f6 fd3a 	bl	8000608 <__aeabi_dmul>
 8009b94:	4622      	mov	r2, r4
 8009b96:	462b      	mov	r3, r5
 8009b98:	f7f6 fb7e 	bl	8000298 <__aeabi_dsub>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	460d      	mov	r5, r1
 8009ba4:	4640      	mov	r0, r8
 8009ba6:	4649      	mov	r1, r9
 8009ba8:	f7f6 fb76 	bl	8000298 <__aeabi_dsub>
 8009bac:	9a03      	ldr	r2, [sp, #12]
 8009bae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009bb2:	1ad3      	subs	r3, r2, r3
 8009bb4:	2b31      	cmp	r3, #49	; 0x31
 8009bb6:	dc24      	bgt.n	8009c02 <__ieee754_rem_pio2+0x28a>
 8009bb8:	e9ca 0100 	strd	r0, r1, [sl]
 8009bbc:	4646      	mov	r6, r8
 8009bbe:	464f      	mov	r7, r9
 8009bc0:	e9da 8900 	ldrd	r8, r9, [sl]
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	4642      	mov	r2, r8
 8009bc8:	464b      	mov	r3, r9
 8009bca:	4639      	mov	r1, r7
 8009bcc:	f7f6 fb64 	bl	8000298 <__aeabi_dsub>
 8009bd0:	462b      	mov	r3, r5
 8009bd2:	4622      	mov	r2, r4
 8009bd4:	f7f6 fb60 	bl	8000298 <__aeabi_dsub>
 8009bd8:	9b02      	ldr	r3, [sp, #8]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009be0:	f6bf af0a 	bge.w	80099f8 <__ieee754_rem_pio2+0x80>
 8009be4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009be8:	f8ca 3004 	str.w	r3, [sl, #4]
 8009bec:	f8ca 8000 	str.w	r8, [sl]
 8009bf0:	f8ca 0008 	str.w	r0, [sl, #8]
 8009bf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bf8:	f8ca 300c 	str.w	r3, [sl, #12]
 8009bfc:	f1cb 0b00 	rsb	fp, fp, #0
 8009c00:	e6fa      	b.n	80099f8 <__ieee754_rem_pio2+0x80>
 8009c02:	a327      	add	r3, pc, #156	; (adr r3, 8009ca0 <__ieee754_rem_pio2+0x328>)
 8009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c08:	ec51 0b18 	vmov	r0, r1, d8
 8009c0c:	f7f6 fcfc 	bl	8000608 <__aeabi_dmul>
 8009c10:	4604      	mov	r4, r0
 8009c12:	460d      	mov	r5, r1
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	4640      	mov	r0, r8
 8009c1a:	4649      	mov	r1, r9
 8009c1c:	f7f6 fb3c 	bl	8000298 <__aeabi_dsub>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	4606      	mov	r6, r0
 8009c26:	460f      	mov	r7, r1
 8009c28:	4640      	mov	r0, r8
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	f7f6 fb34 	bl	8000298 <__aeabi_dsub>
 8009c30:	4622      	mov	r2, r4
 8009c32:	462b      	mov	r3, r5
 8009c34:	f7f6 fb30 	bl	8000298 <__aeabi_dsub>
 8009c38:	a31b      	add	r3, pc, #108	; (adr r3, 8009ca8 <__ieee754_rem_pio2+0x330>)
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	4604      	mov	r4, r0
 8009c40:	460d      	mov	r5, r1
 8009c42:	ec51 0b18 	vmov	r0, r1, d8
 8009c46:	f7f6 fcdf 	bl	8000608 <__aeabi_dmul>
 8009c4a:	4622      	mov	r2, r4
 8009c4c:	462b      	mov	r3, r5
 8009c4e:	f7f6 fb23 	bl	8000298 <__aeabi_dsub>
 8009c52:	4604      	mov	r4, r0
 8009c54:	460d      	mov	r5, r1
 8009c56:	e75f      	b.n	8009b18 <__ieee754_rem_pio2+0x1a0>
 8009c58:	4b1b      	ldr	r3, [pc, #108]	; (8009cc8 <__ieee754_rem_pio2+0x350>)
 8009c5a:	4598      	cmp	r8, r3
 8009c5c:	dd36      	ble.n	8009ccc <__ieee754_rem_pio2+0x354>
 8009c5e:	ee10 2a10 	vmov	r2, s0
 8009c62:	462b      	mov	r3, r5
 8009c64:	4620      	mov	r0, r4
 8009c66:	4629      	mov	r1, r5
 8009c68:	f7f6 fb16 	bl	8000298 <__aeabi_dsub>
 8009c6c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009c70:	e9ca 0100 	strd	r0, r1, [sl]
 8009c74:	e694      	b.n	80099a0 <__ieee754_rem_pio2+0x28>
 8009c76:	bf00      	nop
 8009c78:	54400000 	.word	0x54400000
 8009c7c:	3ff921fb 	.word	0x3ff921fb
 8009c80:	1a626331 	.word	0x1a626331
 8009c84:	3dd0b461 	.word	0x3dd0b461
 8009c88:	1a600000 	.word	0x1a600000
 8009c8c:	3dd0b461 	.word	0x3dd0b461
 8009c90:	2e037073 	.word	0x2e037073
 8009c94:	3ba3198a 	.word	0x3ba3198a
 8009c98:	6dc9c883 	.word	0x6dc9c883
 8009c9c:	3fe45f30 	.word	0x3fe45f30
 8009ca0:	2e000000 	.word	0x2e000000
 8009ca4:	3ba3198a 	.word	0x3ba3198a
 8009ca8:	252049c1 	.word	0x252049c1
 8009cac:	397b839a 	.word	0x397b839a
 8009cb0:	3fe921fb 	.word	0x3fe921fb
 8009cb4:	4002d97b 	.word	0x4002d97b
 8009cb8:	3ff921fb 	.word	0x3ff921fb
 8009cbc:	413921fb 	.word	0x413921fb
 8009cc0:	3fe00000 	.word	0x3fe00000
 8009cc4:	0800b058 	.word	0x0800b058
 8009cc8:	7fefffff 	.word	0x7fefffff
 8009ccc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009cd0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009cd4:	ee10 0a10 	vmov	r0, s0
 8009cd8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009cdc:	ee10 6a10 	vmov	r6, s0
 8009ce0:	460f      	mov	r7, r1
 8009ce2:	f7f6 ff41 	bl	8000b68 <__aeabi_d2iz>
 8009ce6:	f7f6 fc25 	bl	8000534 <__aeabi_i2d>
 8009cea:	4602      	mov	r2, r0
 8009cec:	460b      	mov	r3, r1
 8009cee:	4630      	mov	r0, r6
 8009cf0:	4639      	mov	r1, r7
 8009cf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009cf6:	f7f6 facf 	bl	8000298 <__aeabi_dsub>
 8009cfa:	4b22      	ldr	r3, [pc, #136]	; (8009d84 <__ieee754_rem_pio2+0x40c>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f7f6 fc83 	bl	8000608 <__aeabi_dmul>
 8009d02:	460f      	mov	r7, r1
 8009d04:	4606      	mov	r6, r0
 8009d06:	f7f6 ff2f 	bl	8000b68 <__aeabi_d2iz>
 8009d0a:	f7f6 fc13 	bl	8000534 <__aeabi_i2d>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	460b      	mov	r3, r1
 8009d12:	4630      	mov	r0, r6
 8009d14:	4639      	mov	r1, r7
 8009d16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d1a:	f7f6 fabd 	bl	8000298 <__aeabi_dsub>
 8009d1e:	4b19      	ldr	r3, [pc, #100]	; (8009d84 <__ieee754_rem_pio2+0x40c>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	f7f6 fc71 	bl	8000608 <__aeabi_dmul>
 8009d26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d2a:	ad04      	add	r5, sp, #16
 8009d2c:	f04f 0803 	mov.w	r8, #3
 8009d30:	46a9      	mov	r9, r5
 8009d32:	2600      	movs	r6, #0
 8009d34:	2700      	movs	r7, #0
 8009d36:	4632      	mov	r2, r6
 8009d38:	463b      	mov	r3, r7
 8009d3a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009d3e:	46c3      	mov	fp, r8
 8009d40:	3d08      	subs	r5, #8
 8009d42:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009d46:	f7f6 fec7 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d1f3      	bne.n	8009d36 <__ieee754_rem_pio2+0x3be>
 8009d4e:	4b0e      	ldr	r3, [pc, #56]	; (8009d88 <__ieee754_rem_pio2+0x410>)
 8009d50:	9301      	str	r3, [sp, #4]
 8009d52:	2302      	movs	r3, #2
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	4622      	mov	r2, r4
 8009d58:	465b      	mov	r3, fp
 8009d5a:	4651      	mov	r1, sl
 8009d5c:	4648      	mov	r0, r9
 8009d5e:	f000 f993 	bl	800a088 <__kernel_rem_pio2>
 8009d62:	9b02      	ldr	r3, [sp, #8]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	4683      	mov	fp, r0
 8009d68:	f6bf ae46 	bge.w	80099f8 <__ieee754_rem_pio2+0x80>
 8009d6c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009d70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009d74:	f8ca 3004 	str.w	r3, [sl, #4]
 8009d78:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009d7c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009d80:	e73a      	b.n	8009bf8 <__ieee754_rem_pio2+0x280>
 8009d82:	bf00      	nop
 8009d84:	41700000 	.word	0x41700000
 8009d88:	0800b0d8 	.word	0x0800b0d8

08009d8c <__ieee754_sqrt>:
 8009d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d90:	ec55 4b10 	vmov	r4, r5, d0
 8009d94:	4e56      	ldr	r6, [pc, #344]	; (8009ef0 <__ieee754_sqrt+0x164>)
 8009d96:	43ae      	bics	r6, r5
 8009d98:	ee10 0a10 	vmov	r0, s0
 8009d9c:	ee10 3a10 	vmov	r3, s0
 8009da0:	4629      	mov	r1, r5
 8009da2:	462a      	mov	r2, r5
 8009da4:	d110      	bne.n	8009dc8 <__ieee754_sqrt+0x3c>
 8009da6:	ee10 2a10 	vmov	r2, s0
 8009daa:	462b      	mov	r3, r5
 8009dac:	f7f6 fc2c 	bl	8000608 <__aeabi_dmul>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	4620      	mov	r0, r4
 8009db6:	4629      	mov	r1, r5
 8009db8:	f7f6 fa70 	bl	800029c <__adddf3>
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	460d      	mov	r5, r1
 8009dc0:	ec45 4b10 	vmov	d0, r4, r5
 8009dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc8:	2d00      	cmp	r5, #0
 8009dca:	dc10      	bgt.n	8009dee <__ieee754_sqrt+0x62>
 8009dcc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009dd0:	4330      	orrs	r0, r6
 8009dd2:	d0f5      	beq.n	8009dc0 <__ieee754_sqrt+0x34>
 8009dd4:	b15d      	cbz	r5, 8009dee <__ieee754_sqrt+0x62>
 8009dd6:	ee10 2a10 	vmov	r2, s0
 8009dda:	462b      	mov	r3, r5
 8009ddc:	ee10 0a10 	vmov	r0, s0
 8009de0:	f7f6 fa5a 	bl	8000298 <__aeabi_dsub>
 8009de4:	4602      	mov	r2, r0
 8009de6:	460b      	mov	r3, r1
 8009de8:	f7f6 fd38 	bl	800085c <__aeabi_ddiv>
 8009dec:	e7e6      	b.n	8009dbc <__ieee754_sqrt+0x30>
 8009dee:	1509      	asrs	r1, r1, #20
 8009df0:	d076      	beq.n	8009ee0 <__ieee754_sqrt+0x154>
 8009df2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009df6:	07ce      	lsls	r6, r1, #31
 8009df8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009dfc:	bf5e      	ittt	pl
 8009dfe:	0fda      	lsrpl	r2, r3, #31
 8009e00:	005b      	lslpl	r3, r3, #1
 8009e02:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009e06:	0fda      	lsrs	r2, r3, #31
 8009e08:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009e0c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009e10:	2000      	movs	r0, #0
 8009e12:	106d      	asrs	r5, r5, #1
 8009e14:	005b      	lsls	r3, r3, #1
 8009e16:	f04f 0e16 	mov.w	lr, #22
 8009e1a:	4684      	mov	ip, r0
 8009e1c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e20:	eb0c 0401 	add.w	r4, ip, r1
 8009e24:	4294      	cmp	r4, r2
 8009e26:	bfde      	ittt	le
 8009e28:	1b12      	suble	r2, r2, r4
 8009e2a:	eb04 0c01 	addle.w	ip, r4, r1
 8009e2e:	1840      	addle	r0, r0, r1
 8009e30:	0052      	lsls	r2, r2, #1
 8009e32:	f1be 0e01 	subs.w	lr, lr, #1
 8009e36:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009e3a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009e3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e42:	d1ed      	bne.n	8009e20 <__ieee754_sqrt+0x94>
 8009e44:	4671      	mov	r1, lr
 8009e46:	2720      	movs	r7, #32
 8009e48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009e4c:	4562      	cmp	r2, ip
 8009e4e:	eb04 060e 	add.w	r6, r4, lr
 8009e52:	dc02      	bgt.n	8009e5a <__ieee754_sqrt+0xce>
 8009e54:	d113      	bne.n	8009e7e <__ieee754_sqrt+0xf2>
 8009e56:	429e      	cmp	r6, r3
 8009e58:	d811      	bhi.n	8009e7e <__ieee754_sqrt+0xf2>
 8009e5a:	2e00      	cmp	r6, #0
 8009e5c:	eb06 0e04 	add.w	lr, r6, r4
 8009e60:	da43      	bge.n	8009eea <__ieee754_sqrt+0x15e>
 8009e62:	f1be 0f00 	cmp.w	lr, #0
 8009e66:	db40      	blt.n	8009eea <__ieee754_sqrt+0x15e>
 8009e68:	f10c 0801 	add.w	r8, ip, #1
 8009e6c:	eba2 020c 	sub.w	r2, r2, ip
 8009e70:	429e      	cmp	r6, r3
 8009e72:	bf88      	it	hi
 8009e74:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8009e78:	1b9b      	subs	r3, r3, r6
 8009e7a:	4421      	add	r1, r4
 8009e7c:	46c4      	mov	ip, r8
 8009e7e:	0052      	lsls	r2, r2, #1
 8009e80:	3f01      	subs	r7, #1
 8009e82:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009e86:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009e8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e8e:	d1dd      	bne.n	8009e4c <__ieee754_sqrt+0xc0>
 8009e90:	4313      	orrs	r3, r2
 8009e92:	d006      	beq.n	8009ea2 <__ieee754_sqrt+0x116>
 8009e94:	1c4c      	adds	r4, r1, #1
 8009e96:	bf13      	iteet	ne
 8009e98:	3101      	addne	r1, #1
 8009e9a:	3001      	addeq	r0, #1
 8009e9c:	4639      	moveq	r1, r7
 8009e9e:	f021 0101 	bicne.w	r1, r1, #1
 8009ea2:	1043      	asrs	r3, r0, #1
 8009ea4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009ea8:	0849      	lsrs	r1, r1, #1
 8009eaa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009eae:	07c2      	lsls	r2, r0, #31
 8009eb0:	bf48      	it	mi
 8009eb2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009eb6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009eba:	460c      	mov	r4, r1
 8009ebc:	463d      	mov	r5, r7
 8009ebe:	e77f      	b.n	8009dc0 <__ieee754_sqrt+0x34>
 8009ec0:	0ada      	lsrs	r2, r3, #11
 8009ec2:	3815      	subs	r0, #21
 8009ec4:	055b      	lsls	r3, r3, #21
 8009ec6:	2a00      	cmp	r2, #0
 8009ec8:	d0fa      	beq.n	8009ec0 <__ieee754_sqrt+0x134>
 8009eca:	02d7      	lsls	r7, r2, #11
 8009ecc:	d50a      	bpl.n	8009ee4 <__ieee754_sqrt+0x158>
 8009ece:	f1c1 0420 	rsb	r4, r1, #32
 8009ed2:	fa23 f404 	lsr.w	r4, r3, r4
 8009ed6:	1e4d      	subs	r5, r1, #1
 8009ed8:	408b      	lsls	r3, r1
 8009eda:	4322      	orrs	r2, r4
 8009edc:	1b41      	subs	r1, r0, r5
 8009ede:	e788      	b.n	8009df2 <__ieee754_sqrt+0x66>
 8009ee0:	4608      	mov	r0, r1
 8009ee2:	e7f0      	b.n	8009ec6 <__ieee754_sqrt+0x13a>
 8009ee4:	0052      	lsls	r2, r2, #1
 8009ee6:	3101      	adds	r1, #1
 8009ee8:	e7ef      	b.n	8009eca <__ieee754_sqrt+0x13e>
 8009eea:	46e0      	mov	r8, ip
 8009eec:	e7be      	b.n	8009e6c <__ieee754_sqrt+0xe0>
 8009eee:	bf00      	nop
 8009ef0:	7ff00000 	.word	0x7ff00000
 8009ef4:	00000000 	.word	0x00000000

08009ef8 <__kernel_cos>:
 8009ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	ec57 6b10 	vmov	r6, r7, d0
 8009f00:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009f04:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009f08:	ed8d 1b00 	vstr	d1, [sp]
 8009f0c:	da07      	bge.n	8009f1e <__kernel_cos+0x26>
 8009f0e:	ee10 0a10 	vmov	r0, s0
 8009f12:	4639      	mov	r1, r7
 8009f14:	f7f6 fe28 	bl	8000b68 <__aeabi_d2iz>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	f000 8088 	beq.w	800a02e <__kernel_cos+0x136>
 8009f1e:	4632      	mov	r2, r6
 8009f20:	463b      	mov	r3, r7
 8009f22:	4630      	mov	r0, r6
 8009f24:	4639      	mov	r1, r7
 8009f26:	f7f6 fb6f 	bl	8000608 <__aeabi_dmul>
 8009f2a:	4b51      	ldr	r3, [pc, #324]	; (800a070 <__kernel_cos+0x178>)
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	4604      	mov	r4, r0
 8009f30:	460d      	mov	r5, r1
 8009f32:	f7f6 fb69 	bl	8000608 <__aeabi_dmul>
 8009f36:	a340      	add	r3, pc, #256	; (adr r3, 800a038 <__kernel_cos+0x140>)
 8009f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3c:	4682      	mov	sl, r0
 8009f3e:	468b      	mov	fp, r1
 8009f40:	4620      	mov	r0, r4
 8009f42:	4629      	mov	r1, r5
 8009f44:	f7f6 fb60 	bl	8000608 <__aeabi_dmul>
 8009f48:	a33d      	add	r3, pc, #244	; (adr r3, 800a040 <__kernel_cos+0x148>)
 8009f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4e:	f7f6 f9a5 	bl	800029c <__adddf3>
 8009f52:	4622      	mov	r2, r4
 8009f54:	462b      	mov	r3, r5
 8009f56:	f7f6 fb57 	bl	8000608 <__aeabi_dmul>
 8009f5a:	a33b      	add	r3, pc, #236	; (adr r3, 800a048 <__kernel_cos+0x150>)
 8009f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f60:	f7f6 f99a 	bl	8000298 <__aeabi_dsub>
 8009f64:	4622      	mov	r2, r4
 8009f66:	462b      	mov	r3, r5
 8009f68:	f7f6 fb4e 	bl	8000608 <__aeabi_dmul>
 8009f6c:	a338      	add	r3, pc, #224	; (adr r3, 800a050 <__kernel_cos+0x158>)
 8009f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f72:	f7f6 f993 	bl	800029c <__adddf3>
 8009f76:	4622      	mov	r2, r4
 8009f78:	462b      	mov	r3, r5
 8009f7a:	f7f6 fb45 	bl	8000608 <__aeabi_dmul>
 8009f7e:	a336      	add	r3, pc, #216	; (adr r3, 800a058 <__kernel_cos+0x160>)
 8009f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f84:	f7f6 f988 	bl	8000298 <__aeabi_dsub>
 8009f88:	4622      	mov	r2, r4
 8009f8a:	462b      	mov	r3, r5
 8009f8c:	f7f6 fb3c 	bl	8000608 <__aeabi_dmul>
 8009f90:	a333      	add	r3, pc, #204	; (adr r3, 800a060 <__kernel_cos+0x168>)
 8009f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f96:	f7f6 f981 	bl	800029c <__adddf3>
 8009f9a:	4622      	mov	r2, r4
 8009f9c:	462b      	mov	r3, r5
 8009f9e:	f7f6 fb33 	bl	8000608 <__aeabi_dmul>
 8009fa2:	4622      	mov	r2, r4
 8009fa4:	462b      	mov	r3, r5
 8009fa6:	f7f6 fb2f 	bl	8000608 <__aeabi_dmul>
 8009faa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fae:	4604      	mov	r4, r0
 8009fb0:	460d      	mov	r5, r1
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	4639      	mov	r1, r7
 8009fb6:	f7f6 fb27 	bl	8000608 <__aeabi_dmul>
 8009fba:	460b      	mov	r3, r1
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f7f6 f969 	bl	8000298 <__aeabi_dsub>
 8009fc6:	4b2b      	ldr	r3, [pc, #172]	; (800a074 <__kernel_cos+0x17c>)
 8009fc8:	4598      	cmp	r8, r3
 8009fca:	4606      	mov	r6, r0
 8009fcc:	460f      	mov	r7, r1
 8009fce:	dc10      	bgt.n	8009ff2 <__kernel_cos+0xfa>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	4650      	mov	r0, sl
 8009fd6:	4659      	mov	r1, fp
 8009fd8:	f7f6 f95e 	bl	8000298 <__aeabi_dsub>
 8009fdc:	460b      	mov	r3, r1
 8009fde:	4926      	ldr	r1, [pc, #152]	; (800a078 <__kernel_cos+0x180>)
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	f7f6 f958 	bl	8000298 <__aeabi_dsub>
 8009fe8:	ec41 0b10 	vmov	d0, r0, r1
 8009fec:	b003      	add	sp, #12
 8009fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff2:	4b22      	ldr	r3, [pc, #136]	; (800a07c <__kernel_cos+0x184>)
 8009ff4:	4920      	ldr	r1, [pc, #128]	; (800a078 <__kernel_cos+0x180>)
 8009ff6:	4598      	cmp	r8, r3
 8009ff8:	bfcc      	ite	gt
 8009ffa:	4d21      	ldrgt	r5, [pc, #132]	; (800a080 <__kernel_cos+0x188>)
 8009ffc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a000:	2400      	movs	r4, #0
 800a002:	4622      	mov	r2, r4
 800a004:	462b      	mov	r3, r5
 800a006:	2000      	movs	r0, #0
 800a008:	f7f6 f946 	bl	8000298 <__aeabi_dsub>
 800a00c:	4622      	mov	r2, r4
 800a00e:	4680      	mov	r8, r0
 800a010:	4689      	mov	r9, r1
 800a012:	462b      	mov	r3, r5
 800a014:	4650      	mov	r0, sl
 800a016:	4659      	mov	r1, fp
 800a018:	f7f6 f93e 	bl	8000298 <__aeabi_dsub>
 800a01c:	4632      	mov	r2, r6
 800a01e:	463b      	mov	r3, r7
 800a020:	f7f6 f93a 	bl	8000298 <__aeabi_dsub>
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	4640      	mov	r0, r8
 800a02a:	4649      	mov	r1, r9
 800a02c:	e7da      	b.n	8009fe4 <__kernel_cos+0xec>
 800a02e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a068 <__kernel_cos+0x170>
 800a032:	e7db      	b.n	8009fec <__kernel_cos+0xf4>
 800a034:	f3af 8000 	nop.w
 800a038:	be8838d4 	.word	0xbe8838d4
 800a03c:	bda8fae9 	.word	0xbda8fae9
 800a040:	bdb4b1c4 	.word	0xbdb4b1c4
 800a044:	3e21ee9e 	.word	0x3e21ee9e
 800a048:	809c52ad 	.word	0x809c52ad
 800a04c:	3e927e4f 	.word	0x3e927e4f
 800a050:	19cb1590 	.word	0x19cb1590
 800a054:	3efa01a0 	.word	0x3efa01a0
 800a058:	16c15177 	.word	0x16c15177
 800a05c:	3f56c16c 	.word	0x3f56c16c
 800a060:	5555554c 	.word	0x5555554c
 800a064:	3fa55555 	.word	0x3fa55555
 800a068:	00000000 	.word	0x00000000
 800a06c:	3ff00000 	.word	0x3ff00000
 800a070:	3fe00000 	.word	0x3fe00000
 800a074:	3fd33332 	.word	0x3fd33332
 800a078:	3ff00000 	.word	0x3ff00000
 800a07c:	3fe90000 	.word	0x3fe90000
 800a080:	3fd20000 	.word	0x3fd20000
 800a084:	00000000 	.word	0x00000000

0800a088 <__kernel_rem_pio2>:
 800a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	ed2d 8b02 	vpush	{d8}
 800a090:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a094:	f112 0f14 	cmn.w	r2, #20
 800a098:	9308      	str	r3, [sp, #32]
 800a09a:	9101      	str	r1, [sp, #4]
 800a09c:	4bc6      	ldr	r3, [pc, #792]	; (800a3b8 <__kernel_rem_pio2+0x330>)
 800a09e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a0a0:	9009      	str	r0, [sp, #36]	; 0x24
 800a0a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a0a6:	9304      	str	r3, [sp, #16]
 800a0a8:	9b08      	ldr	r3, [sp, #32]
 800a0aa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a0ae:	bfa8      	it	ge
 800a0b0:	1ed4      	subge	r4, r2, #3
 800a0b2:	9306      	str	r3, [sp, #24]
 800a0b4:	bfb2      	itee	lt
 800a0b6:	2400      	movlt	r4, #0
 800a0b8:	2318      	movge	r3, #24
 800a0ba:	fb94 f4f3 	sdivge	r4, r4, r3
 800a0be:	f06f 0317 	mvn.w	r3, #23
 800a0c2:	fb04 3303 	mla	r3, r4, r3, r3
 800a0c6:	eb03 0a02 	add.w	sl, r3, r2
 800a0ca:	9b04      	ldr	r3, [sp, #16]
 800a0cc:	9a06      	ldr	r2, [sp, #24]
 800a0ce:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a3a8 <__kernel_rem_pio2+0x320>
 800a0d2:	eb03 0802 	add.w	r8, r3, r2
 800a0d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a0d8:	1aa7      	subs	r7, r4, r2
 800a0da:	ae20      	add	r6, sp, #128	; 0x80
 800a0dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a0e0:	2500      	movs	r5, #0
 800a0e2:	4545      	cmp	r5, r8
 800a0e4:	dd18      	ble.n	800a118 <__kernel_rem_pio2+0x90>
 800a0e6:	9b08      	ldr	r3, [sp, #32]
 800a0e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a0ec:	aa20      	add	r2, sp, #128	; 0x80
 800a0ee:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800a3a8 <__kernel_rem_pio2+0x320>
 800a0f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a0f6:	f1c3 0301 	rsb	r3, r3, #1
 800a0fa:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a0fe:	9307      	str	r3, [sp, #28]
 800a100:	9b07      	ldr	r3, [sp, #28]
 800a102:	9a04      	ldr	r2, [sp, #16]
 800a104:	4443      	add	r3, r8
 800a106:	429a      	cmp	r2, r3
 800a108:	db2f      	blt.n	800a16a <__kernel_rem_pio2+0xe2>
 800a10a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a10e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a112:	462f      	mov	r7, r5
 800a114:	2600      	movs	r6, #0
 800a116:	e01b      	b.n	800a150 <__kernel_rem_pio2+0xc8>
 800a118:	42ef      	cmn	r7, r5
 800a11a:	d407      	bmi.n	800a12c <__kernel_rem_pio2+0xa4>
 800a11c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a120:	f7f6 fa08 	bl	8000534 <__aeabi_i2d>
 800a124:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a128:	3501      	adds	r5, #1
 800a12a:	e7da      	b.n	800a0e2 <__kernel_rem_pio2+0x5a>
 800a12c:	ec51 0b18 	vmov	r0, r1, d8
 800a130:	e7f8      	b.n	800a124 <__kernel_rem_pio2+0x9c>
 800a132:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a136:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a13a:	f7f6 fa65 	bl	8000608 <__aeabi_dmul>
 800a13e:	4602      	mov	r2, r0
 800a140:	460b      	mov	r3, r1
 800a142:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a146:	f7f6 f8a9 	bl	800029c <__adddf3>
 800a14a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a14e:	3601      	adds	r6, #1
 800a150:	9b06      	ldr	r3, [sp, #24]
 800a152:	429e      	cmp	r6, r3
 800a154:	f1a7 0708 	sub.w	r7, r7, #8
 800a158:	ddeb      	ble.n	800a132 <__kernel_rem_pio2+0xaa>
 800a15a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a15e:	3508      	adds	r5, #8
 800a160:	ecab 7b02 	vstmia	fp!, {d7}
 800a164:	f108 0801 	add.w	r8, r8, #1
 800a168:	e7ca      	b.n	800a100 <__kernel_rem_pio2+0x78>
 800a16a:	9b04      	ldr	r3, [sp, #16]
 800a16c:	aa0c      	add	r2, sp, #48	; 0x30
 800a16e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a172:	930b      	str	r3, [sp, #44]	; 0x2c
 800a174:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a176:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a17a:	9c04      	ldr	r4, [sp, #16]
 800a17c:	930a      	str	r3, [sp, #40]	; 0x28
 800a17e:	ab98      	add	r3, sp, #608	; 0x260
 800a180:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a184:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a188:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800a18c:	f8cd b008 	str.w	fp, [sp, #8]
 800a190:	4625      	mov	r5, r4
 800a192:	2d00      	cmp	r5, #0
 800a194:	dc78      	bgt.n	800a288 <__kernel_rem_pio2+0x200>
 800a196:	ec47 6b10 	vmov	d0, r6, r7
 800a19a:	4650      	mov	r0, sl
 800a19c:	f000 fc04 	bl	800a9a8 <scalbn>
 800a1a0:	ec57 6b10 	vmov	r6, r7, d0
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a1aa:	ee10 0a10 	vmov	r0, s0
 800a1ae:	4639      	mov	r1, r7
 800a1b0:	f7f6 fa2a 	bl	8000608 <__aeabi_dmul>
 800a1b4:	ec41 0b10 	vmov	d0, r0, r1
 800a1b8:	f000 fb6e 	bl	800a898 <floor>
 800a1bc:	4b7f      	ldr	r3, [pc, #508]	; (800a3bc <__kernel_rem_pio2+0x334>)
 800a1be:	ec51 0b10 	vmov	r0, r1, d0
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f7f6 fa20 	bl	8000608 <__aeabi_dmul>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	4639      	mov	r1, r7
 800a1d0:	f7f6 f862 	bl	8000298 <__aeabi_dsub>
 800a1d4:	460f      	mov	r7, r1
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	f7f6 fcc6 	bl	8000b68 <__aeabi_d2iz>
 800a1dc:	9007      	str	r0, [sp, #28]
 800a1de:	f7f6 f9a9 	bl	8000534 <__aeabi_i2d>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	4639      	mov	r1, r7
 800a1ea:	f7f6 f855 	bl	8000298 <__aeabi_dsub>
 800a1ee:	f1ba 0f00 	cmp.w	sl, #0
 800a1f2:	4606      	mov	r6, r0
 800a1f4:	460f      	mov	r7, r1
 800a1f6:	dd70      	ble.n	800a2da <__kernel_rem_pio2+0x252>
 800a1f8:	1e62      	subs	r2, r4, #1
 800a1fa:	ab0c      	add	r3, sp, #48	; 0x30
 800a1fc:	9d07      	ldr	r5, [sp, #28]
 800a1fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a202:	f1ca 0118 	rsb	r1, sl, #24
 800a206:	fa40 f301 	asr.w	r3, r0, r1
 800a20a:	441d      	add	r5, r3
 800a20c:	408b      	lsls	r3, r1
 800a20e:	1ac0      	subs	r0, r0, r3
 800a210:	ab0c      	add	r3, sp, #48	; 0x30
 800a212:	9507      	str	r5, [sp, #28]
 800a214:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a218:	f1ca 0317 	rsb	r3, sl, #23
 800a21c:	fa40 f303 	asr.w	r3, r0, r3
 800a220:	9302      	str	r3, [sp, #8]
 800a222:	9b02      	ldr	r3, [sp, #8]
 800a224:	2b00      	cmp	r3, #0
 800a226:	dd66      	ble.n	800a2f6 <__kernel_rem_pio2+0x26e>
 800a228:	9b07      	ldr	r3, [sp, #28]
 800a22a:	2200      	movs	r2, #0
 800a22c:	3301      	adds	r3, #1
 800a22e:	9307      	str	r3, [sp, #28]
 800a230:	4615      	mov	r5, r2
 800a232:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a236:	4294      	cmp	r4, r2
 800a238:	f300 8099 	bgt.w	800a36e <__kernel_rem_pio2+0x2e6>
 800a23c:	f1ba 0f00 	cmp.w	sl, #0
 800a240:	dd07      	ble.n	800a252 <__kernel_rem_pio2+0x1ca>
 800a242:	f1ba 0f01 	cmp.w	sl, #1
 800a246:	f000 80a5 	beq.w	800a394 <__kernel_rem_pio2+0x30c>
 800a24a:	f1ba 0f02 	cmp.w	sl, #2
 800a24e:	f000 80c1 	beq.w	800a3d4 <__kernel_rem_pio2+0x34c>
 800a252:	9b02      	ldr	r3, [sp, #8]
 800a254:	2b02      	cmp	r3, #2
 800a256:	d14e      	bne.n	800a2f6 <__kernel_rem_pio2+0x26e>
 800a258:	4632      	mov	r2, r6
 800a25a:	463b      	mov	r3, r7
 800a25c:	4958      	ldr	r1, [pc, #352]	; (800a3c0 <__kernel_rem_pio2+0x338>)
 800a25e:	2000      	movs	r0, #0
 800a260:	f7f6 f81a 	bl	8000298 <__aeabi_dsub>
 800a264:	4606      	mov	r6, r0
 800a266:	460f      	mov	r7, r1
 800a268:	2d00      	cmp	r5, #0
 800a26a:	d044      	beq.n	800a2f6 <__kernel_rem_pio2+0x26e>
 800a26c:	4650      	mov	r0, sl
 800a26e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a3b0 <__kernel_rem_pio2+0x328>
 800a272:	f000 fb99 	bl	800a9a8 <scalbn>
 800a276:	4630      	mov	r0, r6
 800a278:	4639      	mov	r1, r7
 800a27a:	ec53 2b10 	vmov	r2, r3, d0
 800a27e:	f7f6 f80b 	bl	8000298 <__aeabi_dsub>
 800a282:	4606      	mov	r6, r0
 800a284:	460f      	mov	r7, r1
 800a286:	e036      	b.n	800a2f6 <__kernel_rem_pio2+0x26e>
 800a288:	4b4e      	ldr	r3, [pc, #312]	; (800a3c4 <__kernel_rem_pio2+0x33c>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	4630      	mov	r0, r6
 800a28e:	4639      	mov	r1, r7
 800a290:	f7f6 f9ba 	bl	8000608 <__aeabi_dmul>
 800a294:	f7f6 fc68 	bl	8000b68 <__aeabi_d2iz>
 800a298:	f7f6 f94c 	bl	8000534 <__aeabi_i2d>
 800a29c:	4b4a      	ldr	r3, [pc, #296]	; (800a3c8 <__kernel_rem_pio2+0x340>)
 800a29e:	2200      	movs	r2, #0
 800a2a0:	4680      	mov	r8, r0
 800a2a2:	4689      	mov	r9, r1
 800a2a4:	f7f6 f9b0 	bl	8000608 <__aeabi_dmul>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	4639      	mov	r1, r7
 800a2b0:	f7f5 fff2 	bl	8000298 <__aeabi_dsub>
 800a2b4:	f7f6 fc58 	bl	8000b68 <__aeabi_d2iz>
 800a2b8:	9b02      	ldr	r3, [sp, #8]
 800a2ba:	f843 0b04 	str.w	r0, [r3], #4
 800a2be:	3d01      	subs	r5, #1
 800a2c0:	9302      	str	r3, [sp, #8]
 800a2c2:	ab70      	add	r3, sp, #448	; 0x1c0
 800a2c4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2cc:	4640      	mov	r0, r8
 800a2ce:	4649      	mov	r1, r9
 800a2d0:	f7f5 ffe4 	bl	800029c <__adddf3>
 800a2d4:	4606      	mov	r6, r0
 800a2d6:	460f      	mov	r7, r1
 800a2d8:	e75b      	b.n	800a192 <__kernel_rem_pio2+0x10a>
 800a2da:	d105      	bne.n	800a2e8 <__kernel_rem_pio2+0x260>
 800a2dc:	1e63      	subs	r3, r4, #1
 800a2de:	aa0c      	add	r2, sp, #48	; 0x30
 800a2e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a2e4:	15c3      	asrs	r3, r0, #23
 800a2e6:	e79b      	b.n	800a220 <__kernel_rem_pio2+0x198>
 800a2e8:	4b38      	ldr	r3, [pc, #224]	; (800a3cc <__kernel_rem_pio2+0x344>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f7f6 fc12 	bl	8000b14 <__aeabi_dcmpge>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	d139      	bne.n	800a368 <__kernel_rem_pio2+0x2e0>
 800a2f4:	9002      	str	r0, [sp, #8]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	4639      	mov	r1, r7
 800a2fe:	f7f6 fbeb 	bl	8000ad8 <__aeabi_dcmpeq>
 800a302:	2800      	cmp	r0, #0
 800a304:	f000 80b4 	beq.w	800a470 <__kernel_rem_pio2+0x3e8>
 800a308:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800a30c:	465b      	mov	r3, fp
 800a30e:	2200      	movs	r2, #0
 800a310:	9904      	ldr	r1, [sp, #16]
 800a312:	428b      	cmp	r3, r1
 800a314:	da65      	bge.n	800a3e2 <__kernel_rem_pio2+0x35a>
 800a316:	2a00      	cmp	r2, #0
 800a318:	d07b      	beq.n	800a412 <__kernel_rem_pio2+0x38a>
 800a31a:	ab0c      	add	r3, sp, #48	; 0x30
 800a31c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a320:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a324:	2b00      	cmp	r3, #0
 800a326:	f000 80a0 	beq.w	800a46a <__kernel_rem_pio2+0x3e2>
 800a32a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800a3b0 <__kernel_rem_pio2+0x328>
 800a32e:	4650      	mov	r0, sl
 800a330:	f000 fb3a 	bl	800a9a8 <scalbn>
 800a334:	4f23      	ldr	r7, [pc, #140]	; (800a3c4 <__kernel_rem_pio2+0x33c>)
 800a336:	ec55 4b10 	vmov	r4, r5, d0
 800a33a:	46d8      	mov	r8, fp
 800a33c:	2600      	movs	r6, #0
 800a33e:	f1b8 0f00 	cmp.w	r8, #0
 800a342:	f280 80cf 	bge.w	800a4e4 <__kernel_rem_pio2+0x45c>
 800a346:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800a3a8 <__kernel_rem_pio2+0x320>
 800a34a:	465f      	mov	r7, fp
 800a34c:	f04f 0800 	mov.w	r8, #0
 800a350:	2f00      	cmp	r7, #0
 800a352:	f2c0 80fd 	blt.w	800a550 <__kernel_rem_pio2+0x4c8>
 800a356:	ab70      	add	r3, sp, #448	; 0x1c0
 800a358:	f8df a074 	ldr.w	sl, [pc, #116]	; 800a3d0 <__kernel_rem_pio2+0x348>
 800a35c:	ec55 4b18 	vmov	r4, r5, d8
 800a360:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800a364:	2600      	movs	r6, #0
 800a366:	e0e5      	b.n	800a534 <__kernel_rem_pio2+0x4ac>
 800a368:	2302      	movs	r3, #2
 800a36a:	9302      	str	r3, [sp, #8]
 800a36c:	e75c      	b.n	800a228 <__kernel_rem_pio2+0x1a0>
 800a36e:	f8db 3000 	ldr.w	r3, [fp]
 800a372:	b955      	cbnz	r5, 800a38a <__kernel_rem_pio2+0x302>
 800a374:	b123      	cbz	r3, 800a380 <__kernel_rem_pio2+0x2f8>
 800a376:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a37a:	f8cb 3000 	str.w	r3, [fp]
 800a37e:	2301      	movs	r3, #1
 800a380:	3201      	adds	r2, #1
 800a382:	f10b 0b04 	add.w	fp, fp, #4
 800a386:	461d      	mov	r5, r3
 800a388:	e755      	b.n	800a236 <__kernel_rem_pio2+0x1ae>
 800a38a:	1acb      	subs	r3, r1, r3
 800a38c:	f8cb 3000 	str.w	r3, [fp]
 800a390:	462b      	mov	r3, r5
 800a392:	e7f5      	b.n	800a380 <__kernel_rem_pio2+0x2f8>
 800a394:	1e62      	subs	r2, r4, #1
 800a396:	ab0c      	add	r3, sp, #48	; 0x30
 800a398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a39c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a3a0:	a90c      	add	r1, sp, #48	; 0x30
 800a3a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a3a6:	e754      	b.n	800a252 <__kernel_rem_pio2+0x1ca>
	...
 800a3b4:	3ff00000 	.word	0x3ff00000
 800a3b8:	0800b220 	.word	0x0800b220
 800a3bc:	40200000 	.word	0x40200000
 800a3c0:	3ff00000 	.word	0x3ff00000
 800a3c4:	3e700000 	.word	0x3e700000
 800a3c8:	41700000 	.word	0x41700000
 800a3cc:	3fe00000 	.word	0x3fe00000
 800a3d0:	0800b1e0 	.word	0x0800b1e0
 800a3d4:	1e62      	subs	r2, r4, #1
 800a3d6:	ab0c      	add	r3, sp, #48	; 0x30
 800a3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3dc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a3e0:	e7de      	b.n	800a3a0 <__kernel_rem_pio2+0x318>
 800a3e2:	a90c      	add	r1, sp, #48	; 0x30
 800a3e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	e790      	b.n	800a310 <__kernel_rem_pio2+0x288>
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a3f4:	2900      	cmp	r1, #0
 800a3f6:	d0fa      	beq.n	800a3ee <__kernel_rem_pio2+0x366>
 800a3f8:	9a08      	ldr	r2, [sp, #32]
 800a3fa:	18e3      	adds	r3, r4, r3
 800a3fc:	18a6      	adds	r6, r4, r2
 800a3fe:	aa20      	add	r2, sp, #128	; 0x80
 800a400:	1c65      	adds	r5, r4, #1
 800a402:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a406:	9302      	str	r3, [sp, #8]
 800a408:	9b02      	ldr	r3, [sp, #8]
 800a40a:	42ab      	cmp	r3, r5
 800a40c:	da04      	bge.n	800a418 <__kernel_rem_pio2+0x390>
 800a40e:	461c      	mov	r4, r3
 800a410:	e6b5      	b.n	800a17e <__kernel_rem_pio2+0xf6>
 800a412:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a414:	2301      	movs	r3, #1
 800a416:	e7eb      	b.n	800a3f0 <__kernel_rem_pio2+0x368>
 800a418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a41a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a41e:	f7f6 f889 	bl	8000534 <__aeabi_i2d>
 800a422:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a428:	46b3      	mov	fp, r6
 800a42a:	461c      	mov	r4, r3
 800a42c:	2700      	movs	r7, #0
 800a42e:	f04f 0800 	mov.w	r8, #0
 800a432:	f04f 0900 	mov.w	r9, #0
 800a436:	9b06      	ldr	r3, [sp, #24]
 800a438:	429f      	cmp	r7, r3
 800a43a:	dd06      	ble.n	800a44a <__kernel_rem_pio2+0x3c2>
 800a43c:	ab70      	add	r3, sp, #448	; 0x1c0
 800a43e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a442:	e9c3 8900 	strd	r8, r9, [r3]
 800a446:	3501      	adds	r5, #1
 800a448:	e7de      	b.n	800a408 <__kernel_rem_pio2+0x380>
 800a44a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a44e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a452:	f7f6 f8d9 	bl	8000608 <__aeabi_dmul>
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	4640      	mov	r0, r8
 800a45c:	4649      	mov	r1, r9
 800a45e:	f7f5 ff1d 	bl	800029c <__adddf3>
 800a462:	3701      	adds	r7, #1
 800a464:	4680      	mov	r8, r0
 800a466:	4689      	mov	r9, r1
 800a468:	e7e5      	b.n	800a436 <__kernel_rem_pio2+0x3ae>
 800a46a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a46e:	e754      	b.n	800a31a <__kernel_rem_pio2+0x292>
 800a470:	ec47 6b10 	vmov	d0, r6, r7
 800a474:	f1ca 0000 	rsb	r0, sl, #0
 800a478:	f000 fa96 	bl	800a9a8 <scalbn>
 800a47c:	ec57 6b10 	vmov	r6, r7, d0
 800a480:	4b9f      	ldr	r3, [pc, #636]	; (800a700 <__kernel_rem_pio2+0x678>)
 800a482:	ee10 0a10 	vmov	r0, s0
 800a486:	2200      	movs	r2, #0
 800a488:	4639      	mov	r1, r7
 800a48a:	f7f6 fb43 	bl	8000b14 <__aeabi_dcmpge>
 800a48e:	b300      	cbz	r0, 800a4d2 <__kernel_rem_pio2+0x44a>
 800a490:	4b9c      	ldr	r3, [pc, #624]	; (800a704 <__kernel_rem_pio2+0x67c>)
 800a492:	2200      	movs	r2, #0
 800a494:	4630      	mov	r0, r6
 800a496:	4639      	mov	r1, r7
 800a498:	f7f6 f8b6 	bl	8000608 <__aeabi_dmul>
 800a49c:	f7f6 fb64 	bl	8000b68 <__aeabi_d2iz>
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	f7f6 f847 	bl	8000534 <__aeabi_i2d>
 800a4a6:	4b96      	ldr	r3, [pc, #600]	; (800a700 <__kernel_rem_pio2+0x678>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f7f6 f8ad 	bl	8000608 <__aeabi_dmul>
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	4639      	mov	r1, r7
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	f7f5 feef 	bl	8000298 <__aeabi_dsub>
 800a4ba:	f7f6 fb55 	bl	8000b68 <__aeabi_d2iz>
 800a4be:	f104 0b01 	add.w	fp, r4, #1
 800a4c2:	ab0c      	add	r3, sp, #48	; 0x30
 800a4c4:	f10a 0a18 	add.w	sl, sl, #24
 800a4c8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a4cc:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800a4d0:	e72b      	b.n	800a32a <__kernel_rem_pio2+0x2a2>
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	4639      	mov	r1, r7
 800a4d6:	f7f6 fb47 	bl	8000b68 <__aeabi_d2iz>
 800a4da:	ab0c      	add	r3, sp, #48	; 0x30
 800a4dc:	46a3      	mov	fp, r4
 800a4de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a4e2:	e722      	b.n	800a32a <__kernel_rem_pio2+0x2a2>
 800a4e4:	ab70      	add	r3, sp, #448	; 0x1c0
 800a4e6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800a4ea:	ab0c      	add	r3, sp, #48	; 0x30
 800a4ec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a4f0:	f7f6 f820 	bl	8000534 <__aeabi_i2d>
 800a4f4:	4622      	mov	r2, r4
 800a4f6:	462b      	mov	r3, r5
 800a4f8:	f7f6 f886 	bl	8000608 <__aeabi_dmul>
 800a4fc:	4632      	mov	r2, r6
 800a4fe:	e9c9 0100 	strd	r0, r1, [r9]
 800a502:	463b      	mov	r3, r7
 800a504:	4620      	mov	r0, r4
 800a506:	4629      	mov	r1, r5
 800a508:	f7f6 f87e 	bl	8000608 <__aeabi_dmul>
 800a50c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a510:	4604      	mov	r4, r0
 800a512:	460d      	mov	r5, r1
 800a514:	e713      	b.n	800a33e <__kernel_rem_pio2+0x2b6>
 800a516:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a51a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a51e:	f7f6 f873 	bl	8000608 <__aeabi_dmul>
 800a522:	4602      	mov	r2, r0
 800a524:	460b      	mov	r3, r1
 800a526:	4620      	mov	r0, r4
 800a528:	4629      	mov	r1, r5
 800a52a:	f7f5 feb7 	bl	800029c <__adddf3>
 800a52e:	3601      	adds	r6, #1
 800a530:	4604      	mov	r4, r0
 800a532:	460d      	mov	r5, r1
 800a534:	9b04      	ldr	r3, [sp, #16]
 800a536:	429e      	cmp	r6, r3
 800a538:	dc01      	bgt.n	800a53e <__kernel_rem_pio2+0x4b6>
 800a53a:	45b0      	cmp	r8, r6
 800a53c:	daeb      	bge.n	800a516 <__kernel_rem_pio2+0x48e>
 800a53e:	ab48      	add	r3, sp, #288	; 0x120
 800a540:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a544:	e9c3 4500 	strd	r4, r5, [r3]
 800a548:	3f01      	subs	r7, #1
 800a54a:	f108 0801 	add.w	r8, r8, #1
 800a54e:	e6ff      	b.n	800a350 <__kernel_rem_pio2+0x2c8>
 800a550:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a552:	2b02      	cmp	r3, #2
 800a554:	dc0b      	bgt.n	800a56e <__kernel_rem_pio2+0x4e6>
 800a556:	2b00      	cmp	r3, #0
 800a558:	dc6e      	bgt.n	800a638 <__kernel_rem_pio2+0x5b0>
 800a55a:	d045      	beq.n	800a5e8 <__kernel_rem_pio2+0x560>
 800a55c:	9b07      	ldr	r3, [sp, #28]
 800a55e:	f003 0007 	and.w	r0, r3, #7
 800a562:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a566:	ecbd 8b02 	vpop	{d8}
 800a56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a570:	2b03      	cmp	r3, #3
 800a572:	d1f3      	bne.n	800a55c <__kernel_rem_pio2+0x4d4>
 800a574:	ab48      	add	r3, sp, #288	; 0x120
 800a576:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800a57a:	46d0      	mov	r8, sl
 800a57c:	46d9      	mov	r9, fp
 800a57e:	f1b9 0f00 	cmp.w	r9, #0
 800a582:	f1a8 0808 	sub.w	r8, r8, #8
 800a586:	dc64      	bgt.n	800a652 <__kernel_rem_pio2+0x5ca>
 800a588:	465c      	mov	r4, fp
 800a58a:	2c01      	cmp	r4, #1
 800a58c:	f1aa 0a08 	sub.w	sl, sl, #8
 800a590:	dc7e      	bgt.n	800a690 <__kernel_rem_pio2+0x608>
 800a592:	2000      	movs	r0, #0
 800a594:	2100      	movs	r1, #0
 800a596:	f1bb 0f01 	cmp.w	fp, #1
 800a59a:	f300 8097 	bgt.w	800a6cc <__kernel_rem_pio2+0x644>
 800a59e:	9b02      	ldr	r3, [sp, #8]
 800a5a0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800a5a4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f040 8099 	bne.w	800a6e0 <__kernel_rem_pio2+0x658>
 800a5ae:	9b01      	ldr	r3, [sp, #4]
 800a5b0:	e9c3 5600 	strd	r5, r6, [r3]
 800a5b4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a5b8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a5bc:	e7ce      	b.n	800a55c <__kernel_rem_pio2+0x4d4>
 800a5be:	ab48      	add	r3, sp, #288	; 0x120
 800a5c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c8:	f7f5 fe68 	bl	800029c <__adddf3>
 800a5cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a5d0:	f1bb 0f00 	cmp.w	fp, #0
 800a5d4:	daf3      	bge.n	800a5be <__kernel_rem_pio2+0x536>
 800a5d6:	9b02      	ldr	r3, [sp, #8]
 800a5d8:	b113      	cbz	r3, 800a5e0 <__kernel_rem_pio2+0x558>
 800a5da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5de:	4619      	mov	r1, r3
 800a5e0:	9b01      	ldr	r3, [sp, #4]
 800a5e2:	e9c3 0100 	strd	r0, r1, [r3]
 800a5e6:	e7b9      	b.n	800a55c <__kernel_rem_pio2+0x4d4>
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	e7f0      	b.n	800a5d0 <__kernel_rem_pio2+0x548>
 800a5ee:	ab48      	add	r3, sp, #288	; 0x120
 800a5f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f8:	f7f5 fe50 	bl	800029c <__adddf3>
 800a5fc:	3c01      	subs	r4, #1
 800a5fe:	2c00      	cmp	r4, #0
 800a600:	daf5      	bge.n	800a5ee <__kernel_rem_pio2+0x566>
 800a602:	9b02      	ldr	r3, [sp, #8]
 800a604:	b1e3      	cbz	r3, 800a640 <__kernel_rem_pio2+0x5b8>
 800a606:	4602      	mov	r2, r0
 800a608:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a60c:	9c01      	ldr	r4, [sp, #4]
 800a60e:	e9c4 2300 	strd	r2, r3, [r4]
 800a612:	4602      	mov	r2, r0
 800a614:	460b      	mov	r3, r1
 800a616:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800a61a:	f7f5 fe3d 	bl	8000298 <__aeabi_dsub>
 800a61e:	ad4a      	add	r5, sp, #296	; 0x128
 800a620:	2401      	movs	r4, #1
 800a622:	45a3      	cmp	fp, r4
 800a624:	da0f      	bge.n	800a646 <__kernel_rem_pio2+0x5be>
 800a626:	9b02      	ldr	r3, [sp, #8]
 800a628:	b113      	cbz	r3, 800a630 <__kernel_rem_pio2+0x5a8>
 800a62a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a62e:	4619      	mov	r1, r3
 800a630:	9b01      	ldr	r3, [sp, #4]
 800a632:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a636:	e791      	b.n	800a55c <__kernel_rem_pio2+0x4d4>
 800a638:	465c      	mov	r4, fp
 800a63a:	2000      	movs	r0, #0
 800a63c:	2100      	movs	r1, #0
 800a63e:	e7de      	b.n	800a5fe <__kernel_rem_pio2+0x576>
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	e7e2      	b.n	800a60c <__kernel_rem_pio2+0x584>
 800a646:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a64a:	f7f5 fe27 	bl	800029c <__adddf3>
 800a64e:	3401      	adds	r4, #1
 800a650:	e7e7      	b.n	800a622 <__kernel_rem_pio2+0x59a>
 800a652:	e9d8 4500 	ldrd	r4, r5, [r8]
 800a656:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800a65a:	4620      	mov	r0, r4
 800a65c:	4632      	mov	r2, r6
 800a65e:	463b      	mov	r3, r7
 800a660:	4629      	mov	r1, r5
 800a662:	f7f5 fe1b 	bl	800029c <__adddf3>
 800a666:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a66a:	4602      	mov	r2, r0
 800a66c:	460b      	mov	r3, r1
 800a66e:	4620      	mov	r0, r4
 800a670:	4629      	mov	r1, r5
 800a672:	f7f5 fe11 	bl	8000298 <__aeabi_dsub>
 800a676:	4632      	mov	r2, r6
 800a678:	463b      	mov	r3, r7
 800a67a:	f7f5 fe0f 	bl	800029c <__adddf3>
 800a67e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a682:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800a686:	ed88 7b00 	vstr	d7, [r8]
 800a68a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a68e:	e776      	b.n	800a57e <__kernel_rem_pio2+0x4f6>
 800a690:	e9da 8900 	ldrd	r8, r9, [sl]
 800a694:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a698:	4640      	mov	r0, r8
 800a69a:	4632      	mov	r2, r6
 800a69c:	463b      	mov	r3, r7
 800a69e:	4649      	mov	r1, r9
 800a6a0:	f7f5 fdfc 	bl	800029c <__adddf3>
 800a6a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4640      	mov	r0, r8
 800a6ae:	4649      	mov	r1, r9
 800a6b0:	f7f5 fdf2 	bl	8000298 <__aeabi_dsub>
 800a6b4:	4632      	mov	r2, r6
 800a6b6:	463b      	mov	r3, r7
 800a6b8:	f7f5 fdf0 	bl	800029c <__adddf3>
 800a6bc:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a6c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a6c4:	ed8a 7b00 	vstr	d7, [sl]
 800a6c8:	3c01      	subs	r4, #1
 800a6ca:	e75e      	b.n	800a58a <__kernel_rem_pio2+0x502>
 800a6cc:	ab48      	add	r3, sp, #288	; 0x120
 800a6ce:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d6:	f7f5 fde1 	bl	800029c <__adddf3>
 800a6da:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a6de:	e75a      	b.n	800a596 <__kernel_rem_pio2+0x50e>
 800a6e0:	9b01      	ldr	r3, [sp, #4]
 800a6e2:	9a01      	ldr	r2, [sp, #4]
 800a6e4:	601d      	str	r5, [r3, #0]
 800a6e6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a6ea:	605c      	str	r4, [r3, #4]
 800a6ec:	609f      	str	r7, [r3, #8]
 800a6ee:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a6f2:	60d3      	str	r3, [r2, #12]
 800a6f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6f8:	6110      	str	r0, [r2, #16]
 800a6fa:	6153      	str	r3, [r2, #20]
 800a6fc:	e72e      	b.n	800a55c <__kernel_rem_pio2+0x4d4>
 800a6fe:	bf00      	nop
 800a700:	41700000 	.word	0x41700000
 800a704:	3e700000 	.word	0x3e700000

0800a708 <__kernel_sin>:
 800a708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70c:	ed2d 8b04 	vpush	{d8-d9}
 800a710:	eeb0 8a41 	vmov.f32	s16, s2
 800a714:	eef0 8a61 	vmov.f32	s17, s3
 800a718:	ec55 4b10 	vmov	r4, r5, d0
 800a71c:	b083      	sub	sp, #12
 800a71e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a722:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a726:	9001      	str	r0, [sp, #4]
 800a728:	da06      	bge.n	800a738 <__kernel_sin+0x30>
 800a72a:	ee10 0a10 	vmov	r0, s0
 800a72e:	4629      	mov	r1, r5
 800a730:	f7f6 fa1a 	bl	8000b68 <__aeabi_d2iz>
 800a734:	2800      	cmp	r0, #0
 800a736:	d051      	beq.n	800a7dc <__kernel_sin+0xd4>
 800a738:	4622      	mov	r2, r4
 800a73a:	462b      	mov	r3, r5
 800a73c:	4620      	mov	r0, r4
 800a73e:	4629      	mov	r1, r5
 800a740:	f7f5 ff62 	bl	8000608 <__aeabi_dmul>
 800a744:	4682      	mov	sl, r0
 800a746:	468b      	mov	fp, r1
 800a748:	4602      	mov	r2, r0
 800a74a:	460b      	mov	r3, r1
 800a74c:	4620      	mov	r0, r4
 800a74e:	4629      	mov	r1, r5
 800a750:	f7f5 ff5a 	bl	8000608 <__aeabi_dmul>
 800a754:	a341      	add	r3, pc, #260	; (adr r3, 800a85c <__kernel_sin+0x154>)
 800a756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75a:	4680      	mov	r8, r0
 800a75c:	4689      	mov	r9, r1
 800a75e:	4650      	mov	r0, sl
 800a760:	4659      	mov	r1, fp
 800a762:	f7f5 ff51 	bl	8000608 <__aeabi_dmul>
 800a766:	a33f      	add	r3, pc, #252	; (adr r3, 800a864 <__kernel_sin+0x15c>)
 800a768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76c:	f7f5 fd94 	bl	8000298 <__aeabi_dsub>
 800a770:	4652      	mov	r2, sl
 800a772:	465b      	mov	r3, fp
 800a774:	f7f5 ff48 	bl	8000608 <__aeabi_dmul>
 800a778:	a33c      	add	r3, pc, #240	; (adr r3, 800a86c <__kernel_sin+0x164>)
 800a77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77e:	f7f5 fd8d 	bl	800029c <__adddf3>
 800a782:	4652      	mov	r2, sl
 800a784:	465b      	mov	r3, fp
 800a786:	f7f5 ff3f 	bl	8000608 <__aeabi_dmul>
 800a78a:	a33a      	add	r3, pc, #232	; (adr r3, 800a874 <__kernel_sin+0x16c>)
 800a78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a790:	f7f5 fd82 	bl	8000298 <__aeabi_dsub>
 800a794:	4652      	mov	r2, sl
 800a796:	465b      	mov	r3, fp
 800a798:	f7f5 ff36 	bl	8000608 <__aeabi_dmul>
 800a79c:	a337      	add	r3, pc, #220	; (adr r3, 800a87c <__kernel_sin+0x174>)
 800a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a2:	f7f5 fd7b 	bl	800029c <__adddf3>
 800a7a6:	9b01      	ldr	r3, [sp, #4]
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	460f      	mov	r7, r1
 800a7ac:	b9eb      	cbnz	r3, 800a7ea <__kernel_sin+0xe2>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	4650      	mov	r0, sl
 800a7b4:	4659      	mov	r1, fp
 800a7b6:	f7f5 ff27 	bl	8000608 <__aeabi_dmul>
 800a7ba:	a325      	add	r3, pc, #148	; (adr r3, 800a850 <__kernel_sin+0x148>)
 800a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c0:	f7f5 fd6a 	bl	8000298 <__aeabi_dsub>
 800a7c4:	4642      	mov	r2, r8
 800a7c6:	464b      	mov	r3, r9
 800a7c8:	f7f5 ff1e 	bl	8000608 <__aeabi_dmul>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	4629      	mov	r1, r5
 800a7d4:	f7f5 fd62 	bl	800029c <__adddf3>
 800a7d8:	4604      	mov	r4, r0
 800a7da:	460d      	mov	r5, r1
 800a7dc:	ec45 4b10 	vmov	d0, r4, r5
 800a7e0:	b003      	add	sp, #12
 800a7e2:	ecbd 8b04 	vpop	{d8-d9}
 800a7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ea:	4b1b      	ldr	r3, [pc, #108]	; (800a858 <__kernel_sin+0x150>)
 800a7ec:	ec51 0b18 	vmov	r0, r1, d8
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f7f5 ff09 	bl	8000608 <__aeabi_dmul>
 800a7f6:	4632      	mov	r2, r6
 800a7f8:	ec41 0b19 	vmov	d9, r0, r1
 800a7fc:	463b      	mov	r3, r7
 800a7fe:	4640      	mov	r0, r8
 800a800:	4649      	mov	r1, r9
 800a802:	f7f5 ff01 	bl	8000608 <__aeabi_dmul>
 800a806:	4602      	mov	r2, r0
 800a808:	460b      	mov	r3, r1
 800a80a:	ec51 0b19 	vmov	r0, r1, d9
 800a80e:	f7f5 fd43 	bl	8000298 <__aeabi_dsub>
 800a812:	4652      	mov	r2, sl
 800a814:	465b      	mov	r3, fp
 800a816:	f7f5 fef7 	bl	8000608 <__aeabi_dmul>
 800a81a:	ec53 2b18 	vmov	r2, r3, d8
 800a81e:	f7f5 fd3b 	bl	8000298 <__aeabi_dsub>
 800a822:	a30b      	add	r3, pc, #44	; (adr r3, 800a850 <__kernel_sin+0x148>)
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	4606      	mov	r6, r0
 800a82a:	460f      	mov	r7, r1
 800a82c:	4640      	mov	r0, r8
 800a82e:	4649      	mov	r1, r9
 800a830:	f7f5 feea 	bl	8000608 <__aeabi_dmul>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4630      	mov	r0, r6
 800a83a:	4639      	mov	r1, r7
 800a83c:	f7f5 fd2e 	bl	800029c <__adddf3>
 800a840:	4602      	mov	r2, r0
 800a842:	460b      	mov	r3, r1
 800a844:	4620      	mov	r0, r4
 800a846:	4629      	mov	r1, r5
 800a848:	f7f5 fd26 	bl	8000298 <__aeabi_dsub>
 800a84c:	e7c4      	b.n	800a7d8 <__kernel_sin+0xd0>
 800a84e:	bf00      	nop
 800a850:	55555549 	.word	0x55555549
 800a854:	3fc55555 	.word	0x3fc55555
 800a858:	3fe00000 	.word	0x3fe00000
 800a85c:	5acfd57c 	.word	0x5acfd57c
 800a860:	3de5d93a 	.word	0x3de5d93a
 800a864:	8a2b9ceb 	.word	0x8a2b9ceb
 800a868:	3e5ae5e6 	.word	0x3e5ae5e6
 800a86c:	57b1fe7d 	.word	0x57b1fe7d
 800a870:	3ec71de3 	.word	0x3ec71de3
 800a874:	19c161d5 	.word	0x19c161d5
 800a878:	3f2a01a0 	.word	0x3f2a01a0
 800a87c:	1110f8a6 	.word	0x1110f8a6
 800a880:	3f811111 	.word	0x3f811111

0800a884 <fabs>:
 800a884:	ec51 0b10 	vmov	r0, r1, d0
 800a888:	ee10 2a10 	vmov	r2, s0
 800a88c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a890:	ec43 2b10 	vmov	d0, r2, r3
 800a894:	4770      	bx	lr
	...

0800a898 <floor>:
 800a898:	ec51 0b10 	vmov	r0, r1, d0
 800a89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a8a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a8a8:	2e13      	cmp	r6, #19
 800a8aa:	ee10 5a10 	vmov	r5, s0
 800a8ae:	ee10 8a10 	vmov	r8, s0
 800a8b2:	460c      	mov	r4, r1
 800a8b4:	dc32      	bgt.n	800a91c <floor+0x84>
 800a8b6:	2e00      	cmp	r6, #0
 800a8b8:	da14      	bge.n	800a8e4 <floor+0x4c>
 800a8ba:	a333      	add	r3, pc, #204	; (adr r3, 800a988 <floor+0xf0>)
 800a8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c0:	f7f5 fcec 	bl	800029c <__adddf3>
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	f7f6 f92e 	bl	8000b28 <__aeabi_dcmpgt>
 800a8cc:	b138      	cbz	r0, 800a8de <floor+0x46>
 800a8ce:	2c00      	cmp	r4, #0
 800a8d0:	da57      	bge.n	800a982 <floor+0xea>
 800a8d2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a8d6:	431d      	orrs	r5, r3
 800a8d8:	d001      	beq.n	800a8de <floor+0x46>
 800a8da:	4c2d      	ldr	r4, [pc, #180]	; (800a990 <floor+0xf8>)
 800a8dc:	2500      	movs	r5, #0
 800a8de:	4621      	mov	r1, r4
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	e025      	b.n	800a930 <floor+0x98>
 800a8e4:	4f2b      	ldr	r7, [pc, #172]	; (800a994 <floor+0xfc>)
 800a8e6:	4137      	asrs	r7, r6
 800a8e8:	ea01 0307 	and.w	r3, r1, r7
 800a8ec:	4303      	orrs	r3, r0
 800a8ee:	d01f      	beq.n	800a930 <floor+0x98>
 800a8f0:	a325      	add	r3, pc, #148	; (adr r3, 800a988 <floor+0xf0>)
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	f7f5 fcd1 	bl	800029c <__adddf3>
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	f7f6 f913 	bl	8000b28 <__aeabi_dcmpgt>
 800a902:	2800      	cmp	r0, #0
 800a904:	d0eb      	beq.n	800a8de <floor+0x46>
 800a906:	2c00      	cmp	r4, #0
 800a908:	bfbe      	ittt	lt
 800a90a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a90e:	fa43 f606 	asrlt.w	r6, r3, r6
 800a912:	19a4      	addlt	r4, r4, r6
 800a914:	ea24 0407 	bic.w	r4, r4, r7
 800a918:	2500      	movs	r5, #0
 800a91a:	e7e0      	b.n	800a8de <floor+0x46>
 800a91c:	2e33      	cmp	r6, #51	; 0x33
 800a91e:	dd0b      	ble.n	800a938 <floor+0xa0>
 800a920:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a924:	d104      	bne.n	800a930 <floor+0x98>
 800a926:	ee10 2a10 	vmov	r2, s0
 800a92a:	460b      	mov	r3, r1
 800a92c:	f7f5 fcb6 	bl	800029c <__adddf3>
 800a930:	ec41 0b10 	vmov	d0, r0, r1
 800a934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a938:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a93c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a940:	fa23 f707 	lsr.w	r7, r3, r7
 800a944:	4207      	tst	r7, r0
 800a946:	d0f3      	beq.n	800a930 <floor+0x98>
 800a948:	a30f      	add	r3, pc, #60	; (adr r3, 800a988 <floor+0xf0>)
 800a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94e:	f7f5 fca5 	bl	800029c <__adddf3>
 800a952:	2200      	movs	r2, #0
 800a954:	2300      	movs	r3, #0
 800a956:	f7f6 f8e7 	bl	8000b28 <__aeabi_dcmpgt>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d0bf      	beq.n	800a8de <floor+0x46>
 800a95e:	2c00      	cmp	r4, #0
 800a960:	da02      	bge.n	800a968 <floor+0xd0>
 800a962:	2e14      	cmp	r6, #20
 800a964:	d103      	bne.n	800a96e <floor+0xd6>
 800a966:	3401      	adds	r4, #1
 800a968:	ea25 0507 	bic.w	r5, r5, r7
 800a96c:	e7b7      	b.n	800a8de <floor+0x46>
 800a96e:	2301      	movs	r3, #1
 800a970:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a974:	fa03 f606 	lsl.w	r6, r3, r6
 800a978:	4435      	add	r5, r6
 800a97a:	4545      	cmp	r5, r8
 800a97c:	bf38      	it	cc
 800a97e:	18e4      	addcc	r4, r4, r3
 800a980:	e7f2      	b.n	800a968 <floor+0xd0>
 800a982:	2500      	movs	r5, #0
 800a984:	462c      	mov	r4, r5
 800a986:	e7aa      	b.n	800a8de <floor+0x46>
 800a988:	8800759c 	.word	0x8800759c
 800a98c:	7e37e43c 	.word	0x7e37e43c
 800a990:	bff00000 	.word	0xbff00000
 800a994:	000fffff 	.word	0x000fffff

0800a998 <nan>:
 800a998:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a9a0 <nan+0x8>
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	00000000 	.word	0x00000000
 800a9a4:	7ff80000 	.word	0x7ff80000

0800a9a8 <scalbn>:
 800a9a8:	b570      	push	{r4, r5, r6, lr}
 800a9aa:	ec55 4b10 	vmov	r4, r5, d0
 800a9ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	462b      	mov	r3, r5
 800a9b6:	b99a      	cbnz	r2, 800a9e0 <scalbn+0x38>
 800a9b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a9bc:	4323      	orrs	r3, r4
 800a9be:	d036      	beq.n	800aa2e <scalbn+0x86>
 800a9c0:	4b39      	ldr	r3, [pc, #228]	; (800aaa8 <scalbn+0x100>)
 800a9c2:	4629      	mov	r1, r5
 800a9c4:	ee10 0a10 	vmov	r0, s0
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f7f5 fe1d 	bl	8000608 <__aeabi_dmul>
 800a9ce:	4b37      	ldr	r3, [pc, #220]	; (800aaac <scalbn+0x104>)
 800a9d0:	429e      	cmp	r6, r3
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	460d      	mov	r5, r1
 800a9d6:	da10      	bge.n	800a9fa <scalbn+0x52>
 800a9d8:	a32b      	add	r3, pc, #172	; (adr r3, 800aa88 <scalbn+0xe0>)
 800a9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9de:	e03a      	b.n	800aa56 <scalbn+0xae>
 800a9e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a9e4:	428a      	cmp	r2, r1
 800a9e6:	d10c      	bne.n	800aa02 <scalbn+0x5a>
 800a9e8:	ee10 2a10 	vmov	r2, s0
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	f7f5 fc54 	bl	800029c <__adddf3>
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	460d      	mov	r5, r1
 800a9f8:	e019      	b.n	800aa2e <scalbn+0x86>
 800a9fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a9fe:	460b      	mov	r3, r1
 800aa00:	3a36      	subs	r2, #54	; 0x36
 800aa02:	4432      	add	r2, r6
 800aa04:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aa08:	428a      	cmp	r2, r1
 800aa0a:	dd08      	ble.n	800aa1e <scalbn+0x76>
 800aa0c:	2d00      	cmp	r5, #0
 800aa0e:	a120      	add	r1, pc, #128	; (adr r1, 800aa90 <scalbn+0xe8>)
 800aa10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa14:	da1c      	bge.n	800aa50 <scalbn+0xa8>
 800aa16:	a120      	add	r1, pc, #128	; (adr r1, 800aa98 <scalbn+0xf0>)
 800aa18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa1c:	e018      	b.n	800aa50 <scalbn+0xa8>
 800aa1e:	2a00      	cmp	r2, #0
 800aa20:	dd08      	ble.n	800aa34 <scalbn+0x8c>
 800aa22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa2e:	ec45 4b10 	vmov	d0, r4, r5
 800aa32:	bd70      	pop	{r4, r5, r6, pc}
 800aa34:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aa38:	da19      	bge.n	800aa6e <scalbn+0xc6>
 800aa3a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aa3e:	429e      	cmp	r6, r3
 800aa40:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800aa44:	dd0a      	ble.n	800aa5c <scalbn+0xb4>
 800aa46:	a112      	add	r1, pc, #72	; (adr r1, 800aa90 <scalbn+0xe8>)
 800aa48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1e2      	bne.n	800aa16 <scalbn+0x6e>
 800aa50:	a30f      	add	r3, pc, #60	; (adr r3, 800aa90 <scalbn+0xe8>)
 800aa52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa56:	f7f5 fdd7 	bl	8000608 <__aeabi_dmul>
 800aa5a:	e7cb      	b.n	800a9f4 <scalbn+0x4c>
 800aa5c:	a10a      	add	r1, pc, #40	; (adr r1, 800aa88 <scalbn+0xe0>)
 800aa5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d0b8      	beq.n	800a9d8 <scalbn+0x30>
 800aa66:	a10e      	add	r1, pc, #56	; (adr r1, 800aaa0 <scalbn+0xf8>)
 800aa68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa6c:	e7b4      	b.n	800a9d8 <scalbn+0x30>
 800aa6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa72:	3236      	adds	r2, #54	; 0x36
 800aa74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	4b0c      	ldr	r3, [pc, #48]	; (800aab0 <scalbn+0x108>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	e7e8      	b.n	800aa56 <scalbn+0xae>
 800aa84:	f3af 8000 	nop.w
 800aa88:	c2f8f359 	.word	0xc2f8f359
 800aa8c:	01a56e1f 	.word	0x01a56e1f
 800aa90:	8800759c 	.word	0x8800759c
 800aa94:	7e37e43c 	.word	0x7e37e43c
 800aa98:	8800759c 	.word	0x8800759c
 800aa9c:	fe37e43c 	.word	0xfe37e43c
 800aaa0:	c2f8f359 	.word	0xc2f8f359
 800aaa4:	81a56e1f 	.word	0x81a56e1f
 800aaa8:	43500000 	.word	0x43500000
 800aaac:	ffff3cb0 	.word	0xffff3cb0
 800aab0:	3c900000 	.word	0x3c900000

0800aab4 <_init>:
 800aab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab6:	bf00      	nop
 800aab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaba:	bc08      	pop	{r3}
 800aabc:	469e      	mov	lr, r3
 800aabe:	4770      	bx	lr

0800aac0 <_fini>:
 800aac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac2:	bf00      	nop
 800aac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aac6:	bc08      	pop	{r3}
 800aac8:	469e      	mov	lr, r3
 800aaca:	4770      	bx	lr
