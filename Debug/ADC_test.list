
ADC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b220  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e8  0800b3c0  0800b3c0  0001b3c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bca8  0800bca8  000221fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bca8  0800bca8  0001bca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcb0  0800bcb0  000221fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcb0  0800bcb0  0001bcb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcb4  0800bcb4  0001bcb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000021fc  20000000  0800bcb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022f8  200021fc  0800deb4  000221fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044f4  0800deb4  000244f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000221fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019988  00000000  00000000  0002222c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000312f  00000000  00000000  0003bbb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  0003ece8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  0003fe60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a42a  00000000  00000000  00040eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015478  00000000  00000000  0005b2da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dcc8  00000000  00000000  00070752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e41a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d00  00000000  00000000  0010e470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200021fc 	.word	0x200021fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b3a8 	.word	0x0800b3a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20002200 	.word	0x20002200
 80001dc:	0800b3a8 	.word	0x0800b3a8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <as5048a_read>:
/*
 * @brief Read 16-bit data at selected register.
 * @param SPI slave select pin.
 * @param AS5048A register
 */
uint16_t as5048a_read(uint16_t ss, uint16_t reg) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	460a      	mov	r2, r1
 8000f5a:	80fb      	strh	r3, [r7, #6]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	80bb      	strh	r3, [r7, #4]
	uint8_t data[2];

	uint16_t cmd = CMD_READ | reg;
 8000f60:	88bb      	ldrh	r3, [r7, #4]
 8000f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f66:	81fb      	strh	r3, [r7, #14]
	cmd |= ((uint16_t) calcEvenParity(cmd) << 15);
 8000f68:	89fb      	ldrh	r3, [r7, #14]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f8ea 	bl	8001144 <calcEvenParity>
 8000f70:	4603      	mov	r3, r0
 8000f72:	03db      	lsls	r3, r3, #15
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	81fb      	strh	r3, [r7, #14]

	data[1] = cmd & 0xFF;
 8000f80:	89fb      	ldrh	r3, [r7, #14]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	737b      	strb	r3, [r7, #13]
	data[0] = (cmd >> 8) & 0xFF;
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_RESET);
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	2200      	movs	r2, #0
 8000f94:	4619      	mov	r1, r3
 8000f96:	4822      	ldr	r0, [pc, #136]	; (8001020 <as5048a_read+0xd0>)
 8000f98:	f004 f954 	bl	8005244 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 2, 0xFFFF);
 8000f9c:	f107 010c 	add.w	r1, r7, #12
 8000fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	481f      	ldr	r0, [pc, #124]	; (8001024 <as5048a_read+0xd4>)
 8000fa8:	f004 fe63 	bl	8005c72 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8000fac:	bf00      	nop
 8000fae:	481d      	ldr	r0, [pc, #116]	; (8001024 <as5048a_read+0xd4>)
 8000fb0:	f005 fa4e 	bl	8006450 <HAL_SPI_GetState>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d1f9      	bne.n	8000fae <as5048a_read+0x5e>
	}
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_SET);
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4817      	ldr	r0, [pc, #92]	; (8001020 <as5048a_read+0xd0>)
 8000fc2:	f004 f93f 	bl	8005244 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f002 ff12 	bl	8003df0 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_RESET);
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4813      	ldr	r0, [pc, #76]	; (8001020 <as5048a_read+0xd0>)
 8000fd4:	f004 f936 	bl	8005244 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 2, 0xFFFF);
 8000fd8:	f107 010c 	add.w	r1, r7, #12
 8000fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	4810      	ldr	r0, [pc, #64]	; (8001024 <as5048a_read+0xd4>)
 8000fe4:	f004 ff81 	bl	8005eea <HAL_SPI_Receive>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8000fe8:	bf00      	nop
 8000fea:	480e      	ldr	r0, [pc, #56]	; (8001024 <as5048a_read+0xd4>)
 8000fec:	f005 fa30 	bl	8006450 <HAL_SPI_GetState>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d1f9      	bne.n	8000fea <as5048a_read+0x9a>
	}
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_SET);
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4808      	ldr	r0, [pc, #32]	; (8001020 <as5048a_read+0xd0>)
 8000ffe:	f004 f921 	bl	8005244 <HAL_GPIO_WritePin>

	return (((data[0] & 0xFF) << 8) | (data[1] & 0xFF)) & ~0xC000; //wat
 8001002:	7b3b      	ldrb	r3, [r7, #12]
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	b21a      	sxth	r2, r3
 8001008:	7b7b      	ldrb	r3, [r7, #13]
 800100a:	b21b      	sxth	r3, r3
 800100c:	4313      	orrs	r3, r2
 800100e:	b21b      	sxth	r3, r3
 8001010:	b29b      	uxth	r3, r3
 8001012:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001016:	b29b      	uxth	r3, r3
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40020400 	.word	0x40020400
 8001024:	200043ec 	.word	0x200043ec

08001028 <as5048a_getRawRotation>:

/*
 * @brief Get raw rotation as 16-bit value.
 * @param SPI slave select pin.
 */
uint16_t as5048a_getRawRotation(uint16_t ss) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
	return as5048a_read(ss, REG_ANGLE);
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff89 	bl	8000f50 <as5048a_read>
 800103e:	4603      	mov	r3, r0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <as5048a_init>:

/*
 * @brief Initialize the SPI by setting all encoder pins high.
 */
void as5048a_init(MotorDriver *driver) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PINBUS_ENC, driver->PIN_ENC, GPIO_PIN_SET);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	2201      	movs	r2, #1
 8001056:	4619      	mov	r1, r3
 8001058:	480e      	ldr	r0, [pc, #56]	; (8001094 <as5048a_init+0x4c>)
 800105a:	f004 f8f3 	bl	8005244 <HAL_GPIO_WritePin>

	driver->zero_pos = as5048a_getRawRotation(driver->PIN_ENC);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ffe0 	bl	8001028 <as5048a_getRawRotation>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	825a      	strh	r2, [r3, #18]
	driver->zero_pos_map = as5048a_readToAngle(driver->zero_pos);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	8a5b      	ldrh	r3, [r3, #18]
 8001074:	4618      	mov	r0, r3
 8001076:	f000 f845 	bl	8001104 <as5048a_readToAngle>
 800107a:	eef0 7a40 	vmov.f32	s15, s0
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	edc3 7a06 	vstr	s15, [r3, #24]

//
//	HAL_GPIO_WritePin(GPIOB, PIN_ENC_X, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOB, PIN_ENC_Y, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOB, PIN_ENC_Z, GPIO_PIN_SET);
	HAL_Delay(1);
 8001084:	2001      	movs	r0, #1
 8001086:	f002 feb3 	bl	8003df0 <HAL_Delay>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40020400 	.word	0x40020400

08001098 <as5048a_normalize>:

/*
 * @brief Normalized the input angle, meaning that the angle starts at 0˙ and ends at 360˙
 * @param unnormalized input angle
 */
float as5048a_normalize(float angle) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0a01 	vstr	s0, [r7, #4]
	//angle += 180;
	angle = fmod(angle, 360);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff fa58 	bl	8000558 <__aeabi_f2d>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80010f8 <as5048a_normalize+0x60>
 80010b0:	ec43 2b10 	vmov	d0, r2, r3
 80010b4:	f009 fae2 	bl	800a67c <fmod>
 80010b8:	ec53 2b10 	vmov	r2, r3, d0
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fd7a 	bl	8000bb8 <__aeabi_d2f>
 80010c4:	4603      	mov	r3, r0
 80010c6:	607b      	str	r3, [r7, #4]
	if (angle < 0) {
 80010c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d4:	d507      	bpl.n	80010e6 <as5048a_normalize+0x4e>
		angle += 360;
 80010d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010da:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001100 <as5048a_normalize+0x68>
 80010de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010e2:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	//angle -= 180;
	return angle;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	ee07 3a90 	vmov	s15, r3
}
 80010ec:	eeb0 0a67 	vmov.f32	s0, s15
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	00000000 	.word	0x00000000
 80010fc:	40768000 	.word	0x40768000
 8001100:	43b40000 	.word	0x43b40000

08001104 <as5048a_readToAngle>:

/*
 * @brief Convert raw data from getRawRotation to angles in degrees.
 * @param Raw angular data input.
 */
float as5048a_readToAngle(uint16_t angle) {
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	80fb      	strh	r3, [r7, #6]
	return 2 * ((float) angle * ((float) 360 / 16383) - 180);
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001118:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800113c <as5048a_readToAngle+0x38>
 800111c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001120:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001140 <as5048a_readToAngle+0x3c>
 8001124:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001128:	ee77 7aa7 	vadd.f32	s15, s15, s15
}
 800112c:	eeb0 0a67 	vmov.f32	s0, s15
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	3cb402d0 	.word	0x3cb402d0
 8001140:	43340000 	.word	0x43340000

08001144 <calcEvenParity>:

uint8_t calcEvenParity(uint16_t value) {
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 16; i++) {
 8001152:	2300      	movs	r3, #0
 8001154:	73bb      	strb	r3, [r7, #14]
 8001156:	e00d      	b.n	8001174 <calcEvenParity+0x30>
		if (value & 0x1) {
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <calcEvenParity+0x24>
			cnt++;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	3301      	adds	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
		}

		value >>= 1;
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	085b      	lsrs	r3, r3, #1
 800116c:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 16; i++) {
 800116e:	7bbb      	ldrb	r3, [r7, #14]
 8001170:	3301      	adds	r3, #1
 8001172:	73bb      	strb	r3, [r7, #14]
 8001174:	7bbb      	ldrb	r3, [r7, #14]
 8001176:	2b0f      	cmp	r3, #15
 8001178:	d9ee      	bls.n	8001158 <calcEvenParity+0x14>
	}
	return cnt & 0x1;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	b2db      	uxtb	r3, r3
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <as5048a_getAngle>:
//}
/**
 * @brief Get angle from encoder on selected motor.
 *
 */
void as5048a_getAngle(MotorDriver *driver) {
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
	driver->curr_angle = as5048a_getRawRotation(driver->PIN_ENC);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff44 	bl	8001028 <as5048a_getRawRotation>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	821a      	strh	r2, [r3, #16]
	driver->curr_angle_map = as5048a_readToAngle(driver->curr_angle);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	8a1b      	ldrh	r3, [r3, #16]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ffa9 	bl	8001104 <as5048a_readToAngle>
 80011b2:	eef0 7a40 	vmov.f32	s15, s0
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	edc3 7a05 	vstr	s15, [r3, #20]

	driver->angle = driver->curr_angle_map - driver->zero_pos_map;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	ed93 7a05 	vldr	s14, [r3, #20]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	edd3 7a06 	vldr	s15, [r3, #24]
 80011c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	edc3 7a07 	vstr	s15, [r3, #28]
	driver->angle = as5048a_normalize(driver->angle);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	edd3 7a07 	vldr	s15, [r3, #28]
 80011d8:	eeb0 0a67 	vmov.f32	s0, s15
 80011dc:	f7ff ff5c 	bl	8001098 <as5048a_normalize>
 80011e0:	eef0 7a40 	vmov.f32	s15, s0
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <bmi270_spi_init>:
uint16_t factor_zx_div = 512; //2^9

/*
 * @brief Initialization sequence for BMI270 as described on p. 20 in datasheet.
 */
void bmi270_spi_init() {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
	uint8_t chip_id = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80011fe:	2201      	movs	r2, #1
 8001200:	2101      	movs	r1, #1
 8001202:	4818      	ldr	r0, [pc, #96]	; (8001264 <bmi270_spi_init+0x70>)
 8001204:	f004 f81e 	bl	8005244 <HAL_GPIO_WritePin>
	chip_id = bmi270_spi_read_8(0x00);
 8001208:	2000      	movs	r0, #0
 800120a:	f000 f953 	bl	80014b4 <bmi270_spi_read_8>
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	if (chip_id != 0x24) {
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b24      	cmp	r3, #36	; 0x24
 8001216:	d003      	beq.n	8001220 <bmi270_spi_init+0x2c>
		if(!USE_IMU_VIS){
			bmi270_print(0x0000);
 8001218:	2000      	movs	r0, #0
 800121a:	f000 fb5d 	bl	80018d8 <bmi270_print>
		bmi270_spi_write_8(REG_INIT_CTRL, 0x00); //prepare config load INIT_CTRL = 0x00
		bmi270_spi_write_burst(REG_INIT_DATA, bmi270_config_file,
				bmi270_config_size); //burst write to reg INIT_DATA. Start with byte 0.
		bmi270_spi_write_8(REG_INIT_CTRL, 0x01);//complete config load INIT_CTRL = 0x01
	}
}
 800121e:	e01c      	b.n	800125a <bmi270_spi_init+0x66>
	} else if (chip_id == 0x24) {
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b24      	cmp	r3, #36	; 0x24
 8001224:	d119      	bne.n	800125a <bmi270_spi_init+0x66>
			bmi270_print(0xFF00);
 8001226:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 800122a:	f000 fb55 	bl	80018d8 <bmi270_print>
		bmi270_spi_write_8(REG_PWR_CONF, 0x00); //Disable PWR_CONF.adv_power_save
 800122e:	2100      	movs	r1, #0
 8001230:	207c      	movs	r0, #124	; 0x7c
 8001232:	f000 f8db 	bl	80013ec <bmi270_spi_write_8>
		HAL_Delay(1);								//wait for 450us
 8001236:	2001      	movs	r0, #1
 8001238:	f002 fdda 	bl	8003df0 <HAL_Delay>
		bmi270_spi_write_8(REG_INIT_CTRL, 0x00); //prepare config load INIT_CTRL = 0x00
 800123c:	2100      	movs	r1, #0
 800123e:	2059      	movs	r0, #89	; 0x59
 8001240:	f000 f8d4 	bl	80013ec <bmi270_spi_write_8>
		bmi270_spi_write_burst(REG_INIT_DATA, bmi270_config_file,
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <bmi270_spi_init+0x74>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <bmi270_spi_init+0x78>)
 800124c:	205e      	movs	r0, #94	; 0x5e
 800124e:	f000 f8f9 	bl	8001444 <bmi270_spi_write_burst>
		bmi270_spi_write_8(REG_INIT_CTRL, 0x01);//complete config load INIT_CTRL = 0x01
 8001252:	2101      	movs	r1, #1
 8001254:	2059      	movs	r0, #89	; 0x59
 8001256:	f000 f8c9 	bl	80013ec <bmi270_spi_write_8>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020400 	.word	0x40020400
 8001268:	20002000 	.word	0x20002000
 800126c:	20000000 	.word	0x20000000

08001270 <bmi270_pwr_conf>:
 *@param Power mode:
 *			0 = low power mode
 *			1 = normal power mode
 *			2 = performance power mode
 */
void bmi270_pwr_conf(uint8_t pwr_mode) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
	if (pwr_mode == BMI270_PWR_MODE_LOW) {
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10c      	bne.n	800129a <bmi270_pwr_conf+0x2a>
		bmi270_spi_write_8(REG_PWR_CTRL, 0x04); //enable acquisiton of acceleration data. disable the auxiliary interface, gyroscope data, temperature sensor data
 8001280:	2104      	movs	r1, #4
 8001282:	207d      	movs	r0, #125	; 0x7d
 8001284:	f000 f8b2 	bl	80013ec <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_ACC_CONF, 0x17); //disable the acc_filter_perf bit; set acc_bwp to 2 repetitions; set acc_odr to 50 Hz
 8001288:	2117      	movs	r1, #23
 800128a:	2040      	movs	r0, #64	; 0x40
 800128c:	f000 f8ae 	bl	80013ec <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_PWR_CONF, 0x03); //enable the adv_power_save bit; leave the fifo_self_wakeup enabled
 8001290:	2103      	movs	r1, #3
 8001292:	207c      	movs	r0, #124	; 0x7c
 8001294:	f000 f8aa 	bl	80013ec <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_PWR_CTRL, 0x0E); //enable acquisiton of acceleration, gyroscope and temperature sensor data. disable the auxiliary interface.
		bmi270_spi_write_8(REG_ACC_CONF, 0xA8); //enable the acc_filter_perf bit; set acc_bwp to normal mode; set acc_odr to 100 Hz
		bmi270_spi_write_8(REG_GYR_CONF, 0xE9); //enable the gyr_filter_perf bit; enable gyr_noise_perf bit; set gyr_bwp to normal mode; set gyr_odr to 200 Hz
		bmi270_spi_write_8(REG_PWR_CONF, 0x02); //disable the adv_power_save bit; leave the fifo_self_wakeup enabled
	}
}
 8001298:	e026      	b.n	80012e8 <bmi270_pwr_conf+0x78>
	} else if (pwr_mode == BMI270_PWR_MODE_NORM) {
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d110      	bne.n	80012c2 <bmi270_pwr_conf+0x52>
		bmi270_spi_write_8(REG_PWR_CTRL, 0x0E); //enable acquisiton of acceleration, gyroscope and temperature sensor data. disable the auxiliary interface.
 80012a0:	210e      	movs	r1, #14
 80012a2:	207d      	movs	r0, #125	; 0x7d
 80012a4:	f000 f8a2 	bl	80013ec <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_ACC_CONF, 0xA8); //enable the acc_filter_perf bit; set acc_bwp to normal mode; set acc_odr to 100 Hz
 80012a8:	21a8      	movs	r1, #168	; 0xa8
 80012aa:	2040      	movs	r0, #64	; 0x40
 80012ac:	f000 f89e 	bl	80013ec <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_GYR_CONF, 0xA9); //enable the gyr_filter_perf bit; set gyr_bwp to normal mode; set gyr_odr to 200 Hz
 80012b0:	21a9      	movs	r1, #169	; 0xa9
 80012b2:	2042      	movs	r0, #66	; 0x42
 80012b4:	f000 f89a 	bl	80013ec <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_PWR_CONF, 0x02); //disable the adv_power_save bit; leave the fifo_self_wakeup enabled
 80012b8:	2102      	movs	r1, #2
 80012ba:	207c      	movs	r0, #124	; 0x7c
 80012bc:	f000 f896 	bl	80013ec <bmi270_spi_write_8>
}
 80012c0:	e012      	b.n	80012e8 <bmi270_pwr_conf+0x78>
	} else if (pwr_mode == BMI270_PWR_MODE_PERF) {
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d10f      	bne.n	80012e8 <bmi270_pwr_conf+0x78>
		bmi270_spi_write_8(REG_PWR_CTRL, 0x0E); //enable acquisiton of acceleration, gyroscope and temperature sensor data. disable the auxiliary interface.
 80012c8:	210e      	movs	r1, #14
 80012ca:	207d      	movs	r0, #125	; 0x7d
 80012cc:	f000 f88e 	bl	80013ec <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_ACC_CONF, 0xA8); //enable the acc_filter_perf bit; set acc_bwp to normal mode; set acc_odr to 100 Hz
 80012d0:	21a8      	movs	r1, #168	; 0xa8
 80012d2:	2040      	movs	r0, #64	; 0x40
 80012d4:	f000 f88a 	bl	80013ec <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_GYR_CONF, 0xE9); //enable the gyr_filter_perf bit; enable gyr_noise_perf bit; set gyr_bwp to normal mode; set gyr_odr to 200 Hz
 80012d8:	21e9      	movs	r1, #233	; 0xe9
 80012da:	2042      	movs	r0, #66	; 0x42
 80012dc:	f000 f886 	bl	80013ec <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_PWR_CONF, 0x02); //disable the adv_power_save bit; leave the fifo_self_wakeup enabled
 80012e0:	2102      	movs	r1, #2
 80012e2:	207c      	movs	r0, #124	; 0x7c
 80012e4:	f000 f882 	bl	80013ec <bmi270_spi_write_8>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <bmi270_read_gyro>:

/*
 * @brief Read 2 bytes of gyroscope data in dps from the BMI270
 * @param Which axis to read
 */
uint16_t bmi270_read_gyro(uint8_t axis){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
	uint16_t data;
	data = bmi270_spi_read_8(2 * axis + REG_DATA_14);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	3309      	adds	r3, #9
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f8d5 	bl	80014b4 <bmi270_spi_read_8>
 800130a:	4603      	mov	r3, r0
 800130c:	81fb      	strh	r3, [r7, #14]
	data |= bmi270_spi_read_8(2 * axis + REG_DATA_14 + 1)<<8;
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	3309      	adds	r3, #9
 8001312:	b2db      	uxtb	r3, r3
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	3301      	adds	r3, #1
 800131a:	b2db      	uxtb	r3, r3
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f8c9 	bl	80014b4 <bmi270_spi_read_8>
 8001322:	4603      	mov	r3, r0
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b21a      	sxth	r2, r3
 8001328:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800132c:	4313      	orrs	r3, r2
 800132e:	b21b      	sxth	r3, r3
 8001330:	81fb      	strh	r3, [r7, #14]
	return data;
 8001332:	89fb      	ldrh	r3, [r7, #14]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <bmi270_read_accel>:

/*
 * @brief Read 2 bytes of accelerometer data in dps from the BMI270
 * @param Which axis to read
 */
uint16_t bmi270_read_accel(uint8_t axis){
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
	uint16_t data;
	data = bmi270_spi_read_8(2 * axis + REG_DATA_8);
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	3306      	adds	r3, #6
 800134a:	b2db      	uxtb	r3, r3
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f8af 	bl	80014b4 <bmi270_spi_read_8>
 8001356:	4603      	mov	r3, r0
 8001358:	81fb      	strh	r3, [r7, #14]
	data |= (bmi270_spi_read_8(2 * axis + REG_DATA_8 + 1)<<8);
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	3306      	adds	r3, #6
 800135e:	b2db      	uxtb	r3, r3
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	b2db      	uxtb	r3, r3
 8001364:	3301      	adds	r3, #1
 8001366:	b2db      	uxtb	r3, r3
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f8a3 	bl	80014b4 <bmi270_spi_read_8>
 800136e:	4603      	mov	r3, r0
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b21a      	sxth	r2, r3
 8001374:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001378:	4313      	orrs	r3, r2
 800137a:	b21b      	sxth	r3, r3
 800137c:	81fb      	strh	r3, [r7, #14]
	return data;
 800137e:	89fb      	ldrh	r3, [r7, #14]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <bmi270_spi_init_check>:

/*
 * @brief Check the correct initialization status as described on p.21 in datasheet.
 */
void bmi270_spi_init_check() {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
	sprintf((char*) buff, "BMI270: initialization sequence complete\r\n");
 800138e:	4914      	ldr	r1, [pc, #80]	; (80013e0 <bmi270_spi_init_check+0x58>)
 8001390:	4814      	ldr	r0, [pc, #80]	; (80013e4 <bmi270_spi_init_check+0x5c>)
 8001392:	f006 ff0d 	bl	80081b0 <siprintf>
	HAL_UART_Transmit(&huart2, buff, strlen(buff), 200);
 8001396:	4813      	ldr	r0, [pc, #76]	; (80013e4 <bmi270_spi_init_check+0x5c>)
 8001398:	f7fe ff22 	bl	80001e0 <strlen>
 800139c:	4603      	mov	r3, r0
 800139e:	b29a      	uxth	r2, r3
 80013a0:	23c8      	movs	r3, #200	; 0xc8
 80013a2:	4910      	ldr	r1, [pc, #64]	; (80013e4 <bmi270_spi_init_check+0x5c>)
 80013a4:	4810      	ldr	r0, [pc, #64]	; (80013e8 <bmi270_spi_init_check+0x60>)
 80013a6:	f005 ff9e 	bl	80072e6 <HAL_UART_Transmit>
	HAL_Delay(150); //wait >140 ms
 80013aa:	2096      	movs	r0, #150	; 0x96
 80013ac:	f002 fd20 	bl	8003df0 <HAL_Delay>
	uint16_t init_status = bmi270_spi_read_8(REG_INTERNAL_STATUS);
 80013b0:	2021      	movs	r0, #33	; 0x21
 80013b2:	f000 f87f 	bl	80014b4 <bmi270_spi_read_8>
 80013b6:	4603      	mov	r3, r0
 80013b8:	80fb      	strh	r3, [r7, #6]
	init_status = init_status & 0x0F;
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	f003 030f 	and.w	r3, r3, #15
 80013c0:	80fb      	strh	r3, [r7, #6]
	init_status = init_status | 0xC000;
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80013c8:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80013cc:	80fb      	strh	r3, [r7, #6]

	bmi270_print(init_status);
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 fa81 	bl	80018d8 <bmi270_print>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	0800b3c0 	.word	0x0800b3c0
 80013e4:	2000224c 	.word	0x2000224c
 80013e8:	20004494 	.word	0x20004494

080013ec <bmi270_spi_write_8>:
/*
 * @brief Writes 8 bits of data to SDI -pin on BMI270.
 * @param Which BMI270-register to perform the read on
 * @param 8-bit data to be written into the selected register
 */
void bmi270_spi_write_8(uint8_t reg, uint8_t data) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	4613      	mov	r3, r2
 80013fa:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = reg | 0x00; //write command
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	2101      	movs	r1, #1
 8001404:	480d      	ldr	r0, [pc, #52]	; (800143c <bmi270_spi_write_8+0x50>)
 8001406:	f003 ff1d 	bl	8005244 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 800140a:	f107 010f 	add.w	r1, r7, #15
 800140e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001412:	2201      	movs	r2, #1
 8001414:	480a      	ldr	r0, [pc, #40]	; (8001440 <bmi270_spi_write_8+0x54>)
 8001416:	f004 fc2c 	bl	8005c72 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 800141a:	1db9      	adds	r1, r7, #6
 800141c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001420:	2201      	movs	r2, #1
 8001422:	4807      	ldr	r0, [pc, #28]	; (8001440 <bmi270_spi_write_8+0x54>)
 8001424:	f004 fc25 	bl	8005c72 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
 800142a:	2101      	movs	r1, #1
 800142c:	4803      	ldr	r0, [pc, #12]	; (800143c <bmi270_spi_write_8+0x50>)
 800142e:	f003 ff09 	bl	8005244 <HAL_GPIO_WritePin>
}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40020400 	.word	0x40020400
 8001440:	200043ec 	.word	0x200043ec

08001444 <bmi270_spi_write_burst>:
 * @brief Writes burst of 8-bit array to SDI-pin on BMI270.
 * @param Which BMI270-register to perform the read on
 * @param Array to be written into the selected register
 * @param Size of input array (pre-defined)
 */
void bmi270_spi_write_burst(uint8_t reg, uint8_t data[], uint16_t data_size) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
 8001450:	4613      	mov	r3, r2
 8001452:	80bb      	strh	r3, [r7, #4]
	uint8_t cmd = reg | 0x00; //write command
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	737b      	strb	r3, [r7, #13]
	uint16_t i;

	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	2101      	movs	r1, #1
 800145c:	4813      	ldr	r0, [pc, #76]	; (80014ac <bmi270_spi_write_burst+0x68>)
 800145e:	f003 fef1 	bl	8005244 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001462:	f107 010d 	add.w	r1, r7, #13
 8001466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800146a:	2201      	movs	r2, #1
 800146c:	4810      	ldr	r0, [pc, #64]	; (80014b0 <bmi270_spi_write_burst+0x6c>)
 800146e:	f004 fc00 	bl	8005c72 <HAL_SPI_Transmit>
	for (i = 0; i < data_size; i++) {
 8001472:	2300      	movs	r3, #0
 8001474:	81fb      	strh	r3, [r7, #14]
 8001476:	e00b      	b.n	8001490 <bmi270_spi_write_burst+0x4c>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) &data[i], 1, 0xFFFF);
 8001478:	89fb      	ldrh	r3, [r7, #14]
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	18d1      	adds	r1, r2, r3
 800147e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001482:	2201      	movs	r2, #1
 8001484:	480a      	ldr	r0, [pc, #40]	; (80014b0 <bmi270_spi_write_burst+0x6c>)
 8001486:	f004 fbf4 	bl	8005c72 <HAL_SPI_Transmit>
	for (i = 0; i < data_size; i++) {
 800148a:	89fb      	ldrh	r3, [r7, #14]
 800148c:	3301      	adds	r3, #1
 800148e:	81fb      	strh	r3, [r7, #14]
 8001490:	89fa      	ldrh	r2, [r7, #14]
 8001492:	88bb      	ldrh	r3, [r7, #4]
 8001494:	429a      	cmp	r2, r3
 8001496:	d3ef      	bcc.n	8001478 <bmi270_spi_write_burst+0x34>
	}
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	2101      	movs	r1, #1
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <bmi270_spi_write_burst+0x68>)
 800149e:	f003 fed1 	bl	8005244 <HAL_GPIO_WritePin>
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40020400 	.word	0x40020400
 80014b0:	200043ec 	.word	0x200043ec

080014b4 <bmi270_spi_read_8>:

/*
 * @brief Read 8 bits of data from SDO-pin on BMI270.
 * @param Which BMI270-register to perform the read on
 */
uint8_t bmi270_spi_read_8(uint8_t reg) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy = 0x00;
 80014be:	2300      	movs	r3, #0
 80014c0:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0x00;
 80014c2:	2300      	movs	r3, #0
 80014c4:	73bb      	strb	r3, [r7, #14]
	uint8_t cmd = reg | 0x80;
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2101      	movs	r1, #1
 80014d4:	4812      	ldr	r0, [pc, #72]	; (8001520 <bmi270_spi_read_8+0x6c>)
 80014d6:	f003 feb5 	bl	8005244 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80014da:	f107 010d 	add.w	r1, r7, #13
 80014de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014e2:	2201      	movs	r2, #1
 80014e4:	480f      	ldr	r0, [pc, #60]	; (8001524 <bmi270_spi_read_8+0x70>)
 80014e6:	f004 fbc4 	bl	8005c72 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 80014ea:	f107 010f 	add.w	r1, r7, #15
 80014ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014f2:	2201      	movs	r2, #1
 80014f4:	480b      	ldr	r0, [pc, #44]	; (8001524 <bmi270_spi_read_8+0x70>)
 80014f6:	f004 fcf8 	bl	8005eea <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 80014fa:	f107 010e 	add.w	r1, r7, #14
 80014fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001502:	2201      	movs	r2, #1
 8001504:	4807      	ldr	r0, [pc, #28]	; (8001524 <bmi270_spi_read_8+0x70>)
 8001506:	f004 fcf0 	bl	8005eea <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	2101      	movs	r1, #1
 800150e:	4804      	ldr	r0, [pc, #16]	; (8001520 <bmi270_spi_read_8+0x6c>)
 8001510:	f003 fe98 	bl	8005244 <HAL_GPIO_WritePin>

	return data;
 8001514:	7bbb      	ldrb	r3, [r7, #14]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40020400 	.word	0x40020400
 8001524:	200043ec 	.word	0x200043ec

08001528 <bmi270_getGyroConf>:

void bmi270_getGyroConf(IMU *Imu){
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	uint8_t read_data = bmi270_spi_read_8(REG_GYR_CONF);
 8001530:	2042      	movs	r0, #66	; 0x42
 8001532:	f7ff ffbf 	bl	80014b4 <bmi270_spi_read_8>
 8001536:	4603      	mov	r3, r0
 8001538:	73fb      	strb	r3, [r7, #15]
	Imu->gyr_odr = read_data&0x0F;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	f003 030f 	and.w	r3, r3, #15
 8001540:	b2da      	uxtb	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	Imu->gyr_bwp = read_data&0x30;
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800154e:	b2da      	uxtb	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	Imu->gyr_noise_perf = read_data&0x40;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800155c:	b2da      	uxtb	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Imu->gyr_filter_perf = read_data&0x80;
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800156a:	b2da      	uxtb	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <bmi270_setGyroConf>:

/**
 * @brief Set the 3dB low pass filter for the gyroscope
 *
 */
void bmi270_setGyroConf(IMU *Imu){
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
	bmi270_spi_write_8(REG_GYR_CONF, Imu->gyr_odr);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001588:	4619      	mov	r1, r3
 800158a:	2042      	movs	r0, #66	; 0x42
 800158c:	f7ff ff2e 	bl	80013ec <bmi270_spi_write_8>
	bmi270_spi_write_8(REG_GYR_CONF, Imu->gyr_bwp);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001596:	4619      	mov	r1, r3
 8001598:	2042      	movs	r0, #66	; 0x42
 800159a:	f7ff ff27 	bl	80013ec <bmi270_spi_write_8>
	bmi270_spi_write_8(REG_GYR_CONF, Imu->gyr_noise_perf);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80015a4:	4619      	mov	r1, r3
 80015a6:	2042      	movs	r0, #66	; 0x42
 80015a8:	f7ff ff20 	bl	80013ec <bmi270_spi_write_8>
	bmi270_spi_write_8(REG_GYR_CONF, Imu->gyr_filter_perf);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80015b2:	4619      	mov	r1, r3
 80015b4:	2042      	movs	r0, #66	; 0x42
 80015b6:	f7ff ff19 	bl	80013ec <bmi270_spi_write_8>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <bmi270_getAccConf>:

void bmi270_getAccConf(IMU *Imu){
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
	uint8_t read_data = bmi270_spi_read_8(REG_ACC_CONF);
 80015ca:	2040      	movs	r0, #64	; 0x40
 80015cc:	f7ff ff72 	bl	80014b4 <bmi270_spi_read_8>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]
	Imu->acc_odr = read_data&0x0F;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Imu->acc_bwp = read_data&0x70;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	Imu->acc_filter_perf = read_data&0x80;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <bmi270_setAccConf>:

void bmi270_setAccConf(IMU *Imu){
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
	bmi270_spi_write_8(REG_ACC_CONF, Imu->acc_odr);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001614:	4619      	mov	r1, r3
 8001616:	2040      	movs	r0, #64	; 0x40
 8001618:	f7ff fee8 	bl	80013ec <bmi270_spi_write_8>
	bmi270_spi_write_8(REG_ACC_CONF, Imu->acc_bwp);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8001622:	4619      	mov	r1, r3
 8001624:	2040      	movs	r0, #64	; 0x40
 8001626:	f7ff fee1 	bl	80013ec <bmi270_spi_write_8>
	bmi270_spi_write_8(REG_ACC_CONF, Imu->acc_filter_perf);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001630:	4619      	mov	r1, r3
 8001632:	2040      	movs	r0, #64	; 0x40
 8001634:	f7ff feda 	bl	80013ec <bmi270_spi_write_8>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <bmi270_getGyroRange>:

/*
 * @brief Read the currently active gyroscope range in the BMI270
 */
void bmi270_getGyroRange(IMU *Imu){
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	switch(bmi270_spi_read_8(REG_GYR_RANGE)){ //read gyro range
 8001648:	2043      	movs	r0, #67	; 0x43
 800164a:	f7ff ff33 	bl	80014b4 <bmi270_spi_read_8>
 800164e:	4603      	mov	r3, r0
 8001650:	2b04      	cmp	r3, #4
 8001652:	d821      	bhi.n	8001698 <bmi270_getGyroRange+0x58>
 8001654:	a201      	add	r2, pc, #4	; (adr r2, 800165c <bmi270_getGyroRange+0x1c>)
 8001656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165a:	bf00      	nop
 800165c:	08001671 	.word	0x08001671
 8001660:	08001679 	.word	0x08001679
 8001664:	08001681 	.word	0x08001681
 8001668:	08001689 	.word	0x08001689
 800166c:	08001691 	.word	0x08001691
	case range_2000:
		Imu->gyr_range = BMI270_GYRO_2000_DPS;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <bmi270_getGyroRange+0x60>)
 8001674:	601a      	str	r2, [r3, #0]
		break;
 8001676:	e00f      	b.n	8001698 <bmi270_getGyroRange+0x58>
	case range_1000:
		Imu->gyr_range = BMI270_GYRO_1000_DPS;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <bmi270_getGyroRange+0x64>)
 800167c:	601a      	str	r2, [r3, #0]
		break;
 800167e:	e00b      	b.n	8001698 <bmi270_getGyroRange+0x58>
	case range_500:
		Imu->gyr_range = BMI270_GYRO_500_DPS;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <bmi270_getGyroRange+0x68>)
 8001684:	601a      	str	r2, [r3, #0]
		break;
 8001686:	e007      	b.n	8001698 <bmi270_getGyroRange+0x58>
	case range_250:
		Imu->gyr_range = BMI270_GYRO_250_DPS;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a08      	ldr	r2, [pc, #32]	; (80016ac <bmi270_getGyroRange+0x6c>)
 800168c:	601a      	str	r2, [r3, #0]
		break;
 800168e:	e003      	b.n	8001698 <bmi270_getGyroRange+0x58>
	case range_125:
		Imu->gyr_range = BMI270_GYRO_125_DPS;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <bmi270_getGyroRange+0x70>)
 8001694:	601a      	str	r2, [r3, #0]
		break;
 8001696:	bf00      	nop
	}
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	4183126f 	.word	0x4183126f
 80016a4:	4203126f 	.word	0x4203126f
 80016a8:	4283126f 	.word	0x4283126f
 80016ac:	4303126f 	.word	0x4303126f
 80016b0:	4383126f 	.word	0x4383126f

080016b4 <bmi270_getAccelRange>:

/*
 * @brief Read the currently active accelerometer range in the BMI270
 */
void bmi270_getAccelRange(IMU *Imu){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	switch(bmi270_spi_read_8(REG_ACC_RANGE)){ //read accel range
 80016bc:	2041      	movs	r0, #65	; 0x41
 80016be:	f7ff fef9 	bl	80014b4 <bmi270_spi_read_8>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d81f      	bhi.n	8001708 <bmi270_getAccelRange+0x54>
 80016c8:	a201      	add	r2, pc, #4	; (adr r2, 80016d0 <bmi270_getAccelRange+0x1c>)
 80016ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ce:	bf00      	nop
 80016d0:	080016e1 	.word	0x080016e1
 80016d4:	080016eb 	.word	0x080016eb
 80016d8:	080016f5 	.word	0x080016f5
 80016dc:	080016ff 	.word	0x080016ff
	case range_2g:
		Imu->acc_range = BMI270_ACCEL_2G;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80016e6:	605a      	str	r2, [r3, #4]
		break;
 80016e8:	e00e      	b.n	8001708 <bmi270_getAccelRange+0x54>
	case range_4g:
		Imu->acc_range = BMI270_ACCEL_4G;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80016f0:	605a      	str	r2, [r3, #4]
		break;
 80016f2:	e009      	b.n	8001708 <bmi270_getAccelRange+0x54>
	case range_8g:
		Imu->acc_range = BMI270_ACCEL_8G;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80016fa:	605a      	str	r2, [r3, #4]
		break;
 80016fc:	e004      	b.n	8001708 <bmi270_getAccelRange+0x54>
	case range_16g:
		Imu->acc_range = BMI270_ACCEL_16G;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001704:	605a      	str	r2, [r3, #4]
		break;
 8001706:	bf00      	nop
	}
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <bmi270_calibrateInit>:

void bmi270_calibrateInit(IMU *Imu, float lim){
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	ed87 0a00 	vstr	s0, [r7]
	Imu->calibration_c = 0;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	Imu->gyr_lim_min_x = lim;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	62da      	str	r2, [r3, #44]	; 0x2c
	Imu->gyr_lim_min_y = lim;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	631a      	str	r2, [r3, #48]	; 0x30
	Imu->gyr_lim_min_z = lim;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	635a      	str	r2, [r3, #52]	; 0x34
	Imu->gyr_lim_max_x = lim;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	639a      	str	r2, [r3, #56]	; 0x38
	Imu->gyr_lim_max_y = lim;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	63da      	str	r2, [r3, #60]	; 0x3c
	Imu->gyr_lim_max_z = lim;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <bmi270_calibrateNoise>:


void bmi270_calibrateNoise(IMU *Imu){
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	if(Imu->calibration_c < BMI270_CALIBRATION_TIM){
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001762:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001766:	d265      	bcs.n	8001834 <bmi270_calibrateNoise+0xe0>
		if(Imu->gyr_x < 0){
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	edd3 7a02 	vldr	s15, [r3, #8]
 800176e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	d50b      	bpl.n	8001790 <bmi270_calibrateNoise+0x3c>
			Imu->gyr_lim_min_x += Imu->gyr_x;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	edd3 7a02 	vldr	s15, [r3, #8]
 8001784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 800178e:	e00a      	b.n	80017a6 <bmi270_calibrateNoise+0x52>
		} else {
			Imu->gyr_lim_max_x += Imu->gyr_x;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	edd3 7a02 	vldr	s15, [r3, #8]
 800179c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		}

		if(Imu->gyr_y < 0){
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80017ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b4:	d50b      	bpl.n	80017ce <bmi270_calibrateNoise+0x7a>
			Imu->gyr_lim_min_y += Imu->gyr_y;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	edd3 7a03 	vldr	s15, [r3, #12]
 80017c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 80017cc:	e00a      	b.n	80017e4 <bmi270_calibrateNoise+0x90>
		} else {
			Imu->gyr_lim_max_y += Imu->gyr_y;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80017da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		}

		if(Imu->gyr_z < 0){
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80017ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f2:	d50b      	bpl.n	800180c <bmi270_calibrateNoise+0xb8>
			Imu->gyr_lim_min_z += Imu->gyr_z;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 800180a:	e00a      	b.n	8001822 <bmi270_calibrateNoise+0xce>
		} else {
			Imu->gyr_lim_max_z += Imu->gyr_z;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	edd3 7a04 	vldr	s15, [r3, #16]
 8001818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		}
		Imu->calibration_c++;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001828:	3301      	adds	r3, #1
 800182a:	b29a      	uxth	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		Imu->gyr_lim_max_x /= (float)BMI270_CALIBRATION_TIM;
		Imu->gyr_lim_max_y /= (float)BMI270_CALIBRATION_TIM;
		Imu->gyr_lim_max_z /= (float)BMI270_CALIBRATION_TIM;
		Imu->calibration_c++; 									//calibration lock
	}
}
 8001832:	e049      	b.n	80018c8 <bmi270_calibrateNoise+0x174>
	else if(Imu->calibration_c == BMI270_CALIBRATION_TIM){
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800183a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800183e:	d143      	bne.n	80018c8 <bmi270_calibrateNoise+0x174>
		Imu->gyr_lim_min_x /= (float)BMI270_CALIBRATION_TIM;	//set limits from mean
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001846:	eddf 6a23 	vldr	s13, [pc, #140]	; 80018d4 <bmi270_calibrateNoise+0x180>
 800184a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		Imu->gyr_lim_min_y /= (float)BMI270_CALIBRATION_TIM;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800185a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80018d4 <bmi270_calibrateNoise+0x180>
 800185e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		Imu->gyr_lim_min_z /= (float)BMI270_CALIBRATION_TIM;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800186e:	eddf 6a19 	vldr	s13, [pc, #100]	; 80018d4 <bmi270_calibrateNoise+0x180>
 8001872:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		Imu->gyr_lim_max_x /= (float)BMI270_CALIBRATION_TIM;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001882:	eddf 6a14 	vldr	s13, [pc, #80]	; 80018d4 <bmi270_calibrateNoise+0x180>
 8001886:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		Imu->gyr_lim_max_y /= (float)BMI270_CALIBRATION_TIM;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001896:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80018d4 <bmi270_calibrateNoise+0x180>
 800189a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		Imu->gyr_lim_max_z /= (float)BMI270_CALIBRATION_TIM;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80018aa:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80018d4 <bmi270_calibrateNoise+0x180>
 80018ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		Imu->calibration_c++; 									//calibration lock
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018be:	3301      	adds	r3, #1
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	43960000 	.word	0x43960000

080018d8 <bmi270_print>:



void bmi270_print(uint16_t code) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	80fb      	strh	r3, [r7, #6]
	if ((uint16_t*) code != NULL) {
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d009      	beq.n	80018fc <bmi270_print+0x24>
		sprintf((char*) buff, "BMI270: %s\r\n", bmi270_codeToStr(code));
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f81a 	bl	8001924 <bmi270_codeToStr>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	4908      	ldr	r1, [pc, #32]	; (8001918 <bmi270_print+0x40>)
 80018f6:	4809      	ldr	r0, [pc, #36]	; (800191c <bmi270_print+0x44>)
 80018f8:	f006 fc5a 	bl	80081b0 <siprintf>
	}

	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), 200);
 80018fc:	4807      	ldr	r0, [pc, #28]	; (800191c <bmi270_print+0x44>)
 80018fe:	f7fe fc6f 	bl	80001e0 <strlen>
 8001902:	4603      	mov	r3, r0
 8001904:	b29a      	uxth	r2, r3
 8001906:	23c8      	movs	r3, #200	; 0xc8
 8001908:	4904      	ldr	r1, [pc, #16]	; (800191c <bmi270_print+0x44>)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <bmi270_print+0x48>)
 800190c:	f005 fceb 	bl	80072e6 <HAL_UART_Transmit>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	0800b3ec 	.word	0x0800b3ec
 800191c:	2000224c 	.word	0x2000224c
 8001920:	20004494 	.word	0x20004494

08001924 <bmi270_codeToStr>:

const char* bmi270_codeToStr(uint16_t code) {
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	80fb      	strh	r3, [r7, #6]

	//error codes
	switch (code) {
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	f64f 7201 	movw	r2, #65281	; 0xff01
 8001934:	4293      	cmp	r3, r2
 8001936:	d049      	beq.n	80019cc <bmi270_codeToStr+0xa8>
 8001938:	f64f 7201 	movw	r2, #65281	; 0xff01
 800193c:	4293      	cmp	r3, r2
 800193e:	dc47      	bgt.n	80019d0 <bmi270_codeToStr+0xac>
 8001940:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8001944:	d040      	beq.n	80019c8 <bmi270_codeToStr+0xa4>
 8001946:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800194a:	dc41      	bgt.n	80019d0 <bmi270_codeToStr+0xac>
 800194c:	f24c 0207 	movw	r2, #49159	; 0xc007
 8001950:	4293      	cmp	r3, r2
 8001952:	dc3d      	bgt.n	80019d0 <bmi270_codeToStr+0xac>
 8001954:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001958:	da08      	bge.n	800196c <bmi270_codeToStr+0x48>
 800195a:	2b02      	cmp	r3, #2
 800195c:	d022      	beq.n	80019a4 <bmi270_codeToStr+0x80>
 800195e:	2b02      	cmp	r3, #2
 8001960:	dc36      	bgt.n	80019d0 <bmi270_codeToStr+0xac>
 8001962:	2b00      	cmp	r3, #0
 8001964:	d01a      	beq.n	800199c <bmi270_codeToStr+0x78>
 8001966:	2b01      	cmp	r3, #1
 8001968:	d01a      	beq.n	80019a0 <bmi270_codeToStr+0x7c>
 800196a:	e031      	b.n	80019d0 <bmi270_codeToStr+0xac>
 800196c:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
 8001970:	2b07      	cmp	r3, #7
 8001972:	d82d      	bhi.n	80019d0 <bmi270_codeToStr+0xac>
 8001974:	a201      	add	r2, pc, #4	; (adr r2, 800197c <bmi270_codeToStr+0x58>)
 8001976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197a:	bf00      	nop
 800197c:	080019a9 	.word	0x080019a9
 8001980:	080019ad 	.word	0x080019ad
 8001984:	080019b1 	.word	0x080019b1
 8001988:	080019b5 	.word	0x080019b5
 800198c:	080019b9 	.word	0x080019b9
 8001990:	080019bd 	.word	0x080019bd
 8001994:	080019c1 	.word	0x080019c1
 8001998:	080019c5 	.word	0x080019c5
	case 0x0000:
		return "CHIP_ID error";
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <bmi270_codeToStr+0xb8>)
 800199e:	e017      	b.n	80019d0 <bmi270_codeToStr+0xac>
	case 0x0001:
		return "Initialization error";
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <bmi270_codeToStr+0xbc>)
 80019a2:	e015      	b.n	80019d0 <bmi270_codeToStr+0xac>
	case 0x0002:
		return "";
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <bmi270_codeToStr+0xc0>)
 80019a6:	e013      	b.n	80019d0 <bmi270_codeToStr+0xac>

		//REG_INTERNAL_STATUS codes
	case 0xc000:
		return "REG_INTERNAL_STATUS: not_init";
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <bmi270_codeToStr+0xc4>)
 80019aa:	e011      	b.n	80019d0 <bmi270_codeToStr+0xac>
	case 0xc001:
		return "REG_INTERNAL_STATUS: init_ok";
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <bmi270_codeToStr+0xc8>)
 80019ae:	e00f      	b.n	80019d0 <bmi270_codeToStr+0xac>
	case 0xc002:
		return "REG_INTERNAL_STATUS: init_err";
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <bmi270_codeToStr+0xcc>)
 80019b2:	e00d      	b.n	80019d0 <bmi270_codeToStr+0xac>
	case 0xc003:
		return "REG_INTERNAL_STATUS: drv_error";
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <bmi270_codeToStr+0xd0>)
 80019b6:	e00b      	b.n	80019d0 <bmi270_codeToStr+0xac>
	case 0xc004:
		return "REG_INTERNAL_STATUS: sns_stop";
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <bmi270_codeToStr+0xd4>)
 80019ba:	e009      	b.n	80019d0 <bmi270_codeToStr+0xac>
	case 0xc005:
		return "REG_INTERNAL_STATUS: nvm_error";
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <bmi270_codeToStr+0xd8>)
 80019be:	e007      	b.n	80019d0 <bmi270_codeToStr+0xac>
	case 0xc006:
		return "REG_INTERNAL_STATUS: start_up_error";
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <bmi270_codeToStr+0xdc>)
 80019c2:	e005      	b.n	80019d0 <bmi270_codeToStr+0xac>
	case 0xc007:
		return "REG_INTERNAL_STATUS: compat_error";
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <bmi270_codeToStr+0xe0>)
 80019c6:	e003      	b.n	80019d0 <bmi270_codeToStr+0xac>

		//other codes
	case 0xFF00:
		return "CHIP_ID == 0x24";
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <bmi270_codeToStr+0xe4>)
 80019ca:	e001      	b.n	80019d0 <bmi270_codeToStr+0xac>
	case 0xFF01:
		return "Initialization sequence OK!";
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <bmi270_codeToStr+0xe8>)
 80019ce:	e7ff      	b.n	80019d0 <bmi270_codeToStr+0xac>
	}
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	0800b3fc 	.word	0x0800b3fc
 80019e0:	0800b40c 	.word	0x0800b40c
 80019e4:	0800b424 	.word	0x0800b424
 80019e8:	0800b428 	.word	0x0800b428
 80019ec:	0800b448 	.word	0x0800b448
 80019f0:	0800b468 	.word	0x0800b468
 80019f4:	0800b488 	.word	0x0800b488
 80019f8:	0800b4a8 	.word	0x0800b4a8
 80019fc:	0800b4c8 	.word	0x0800b4c8
 8001a00:	0800b4e8 	.word	0x0800b4e8
 8001a04:	0800b50c 	.word	0x0800b50c
 8001a08:	0800b530 	.word	0x0800b530
 8001a0c:	0800b540 	.word	0x0800b540

08001a10 <drv8313_init>:
 * 1: Set nRESET and nSLEEP to inactive HIGH to enable the three phase H-bridge.
 * 2: Read the nFAULT pin. If the pin is active HIGH, the initialization stops. If inactive LOW, the procedure continues.
 * 3: Pass references to timers and timer channels so that the PWM function of each timer may be used.
 * 4: Start PWM.
 */
uint8_t drv8313_init(MotorDriver *driver, TIM_HandleTypeDef *htim) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(PINBUS_DRV8313, PIN_nSLEEP, GPIO_PIN_SET); /* Enable the unit by setting nRESET + nSLEEP to HIGH*/
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a20:	481c      	ldr	r0, [pc, #112]	; (8001a94 <drv8313_init+0x84>)
 8001a22:	f003 fc0f 	bl	8005244 <HAL_GPIO_WritePin>
	HAL_Delay(1); //Misread prevention delay.
 8001a26:	2001      	movs	r0, #1
 8001a28:	f002 f9e2 	bl	8003df0 <HAL_Delay>
	if (!HAL_GPIO_ReadPin(PINBUS_DRV8313, PIN_nFAULT)) {
 8001a2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a30:	4818      	ldr	r0, [pc, #96]	; (8001a94 <drv8313_init+0x84>)
 8001a32:	f003 fbef 	bl	8005214 <HAL_GPIO_ReadPin>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <drv8313_init+0x30>
		return 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e024      	b.n	8001a8a <drv8313_init+0x7a>
	}

	driver->timer = htim;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	609a      	str	r2, [r3, #8]

	driver->pwm_ch1 = TIM_CHANNEL_1;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	731a      	strb	r2, [r3, #12]
	driver->pwm_ch2 = TIM_CHANNEL_2;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2204      	movs	r2, #4
 8001a50:	735a      	strb	r2, [r3, #13]
	driver->pwm_ch3 = TIM_CHANNEL_3;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2208      	movs	r2, #8
 8001a56:	739a      	strb	r2, [r3, #14]

	HAL_TIM_PWM_Start(driver->timer, driver->pwm_ch1);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7b1b      	ldrb	r3, [r3, #12]
 8001a60:	4619      	mov	r1, r3
 8001a62:	4610      	mov	r0, r2
 8001a64:	f004 ff2a 	bl	80068bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(driver->timer, driver->pwm_ch2);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7b5b      	ldrb	r3, [r3, #13]
 8001a70:	4619      	mov	r1, r3
 8001a72:	4610      	mov	r0, r2
 8001a74:	f004 ff22 	bl	80068bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(driver->timer, driver->pwm_ch3);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7b9b      	ldrb	r3, [r3, #14]
 8001a80:	4619      	mov	r1, r3
 8001a82:	4610      	mov	r0, r2
 8001a84:	f004 ff1a 	bl	80068bc <HAL_TIM_PWM_Start>

	return 1;
 8001a88:	2301      	movs	r3, #1

}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40020400 	.word	0x40020400

08001a98 <drv8313_test>:
//	driver->timer->Instance->CCR2 = ontime;
//	driver->timer->Instance->CCR3 = ontime;
//
//}

void drv8313_test(MotorDriver *driver){
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	uint16_t prd = driver->timer->Init.Period;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	81fb      	strh	r3, [r7, #14]
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	0000      	movs	r0, r0
	...

08001ab8 <setSampleFreq_ms>:
#include "Quaternions.h"

/*
 * @brief Set the sample frequency based on the while loop cycle time (in milliseconds)
 */
void setSampleFreq_ms() {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	sampleFreq = 1 / (0.001 * while_t);
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <setSampleFreq_ms+0x48>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd49 	bl	8000558 <__aeabi_f2d>
 8001ac6:	a30c      	add	r3, pc, #48	; (adr r3, 8001af8 <setSampleFreq_ms+0x40>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fd9c 	bl	8000608 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	f04f 0000 	mov.w	r0, #0
 8001ad8:	490a      	ldr	r1, [pc, #40]	; (8001b04 <setSampleFreq_ms+0x4c>)
 8001ada:	f7fe febf 	bl	800085c <__aeabi_ddiv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f867 	bl	8000bb8 <__aeabi_d2f>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4a06      	ldr	r2, [pc, #24]	; (8001b08 <setSampleFreq_ms+0x50>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	f3af 8000 	nop.w
 8001af8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001afc:	3f50624d 	.word	0x3f50624d
 8001b00:	20002008 	.word	0x20002008
 8001b04:	3ff00000 	.word	0x3ff00000
 8001b08:	20002244 	.word	0x20002244

08001b0c <filterUpdate>:
 * @param Current angular rate on z-axis from gyroscope
 * @param Current acceleration on x-axis from accelerometer
 * @param Current acceleration on y-axis from accelerometer
 * @param Current acceleration on z-axis from accelerometer
 */
void filterUpdate(float gx, float gy, float gz, float ax, float ay, float az) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b09c      	sub	sp, #112	; 0x70
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	ed87 0a05 	vstr	s0, [r7, #20]
 8001b16:	edc7 0a04 	vstr	s1, [r7, #16]
 8001b1a:	ed87 1a03 	vstr	s2, [r7, #12]
 8001b1e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001b22:	ed87 2a01 	vstr	s4, [r7, #4]
 8001b26:	edc7 2a00 	vstr	s5, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1,
			q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001b2a:	4bee      	ldr	r3, [pc, #952]	; (8001ee4 <filterUpdate+0x3d8>)
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	eeb1 7a67 	vneg.f32	s14, s15
 8001b34:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b3c:	4bea      	ldr	r3, [pc, #936]	; (8001ee8 <filterUpdate+0x3dc>)
 8001b3e:	edd3 6a00 	vldr	s13, [r3]
 8001b42:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b4e:	4be7      	ldr	r3, [pc, #924]	; (8001eec <filterUpdate+0x3e0>)
 8001b50:	edd3 6a00 	vldr	s13, [r3]
 8001b54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b60:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b68:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001b6c:	4be0      	ldr	r3, [pc, #896]	; (8001ef0 <filterUpdate+0x3e4>)
 8001b6e:	ed93 7a00 	vldr	s14, [r3]
 8001b72:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b7a:	4bdb      	ldr	r3, [pc, #876]	; (8001ee8 <filterUpdate+0x3dc>)
 8001b7c:	edd3 6a00 	vldr	s13, [r3]
 8001b80:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b8c:	4bd7      	ldr	r3, [pc, #860]	; (8001eec <filterUpdate+0x3e0>)
 8001b8e:	edd3 6a00 	vldr	s13, [r3]
 8001b92:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ba6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001baa:	4bd1      	ldr	r3, [pc, #836]	; (8001ef0 <filterUpdate+0x3e4>)
 8001bac:	ed93 7a00 	vldr	s14, [r3]
 8001bb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb8:	4bca      	ldr	r3, [pc, #808]	; (8001ee4 <filterUpdate+0x3d8>)
 8001bba:	edd3 6a00 	vldr	s13, [r3]
 8001bbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bca:	4bc8      	ldr	r3, [pc, #800]	; (8001eec <filterUpdate+0x3e0>)
 8001bcc:	edd3 6a00 	vldr	s13, [r3]
 8001bd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bdc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001be8:	4bc1      	ldr	r3, [pc, #772]	; (8001ef0 <filterUpdate+0x3e4>)
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf6:	4bbb      	ldr	r3, [pc, #748]	; (8001ee4 <filterUpdate+0x3d8>)
 8001bf8:	edd3 6a00 	vldr	s13, [r3]
 8001bfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c08:	4bb7      	ldr	r3, [pc, #732]	; (8001ee8 <filterUpdate+0x3dc>)
 8001c0a:	edd3 6a00 	vldr	s13, [r3]
 8001c0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c22:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001c26:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c32:	d10e      	bne.n	8001c52 <filterUpdate+0x146>
 8001c34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c40:	d107      	bne.n	8001c52 <filterUpdate+0x146>
 8001c42:	edd7 7a00 	vldr	s15, [r7]
 8001c46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	f000 81e1 	beq.w	8002014 <filterUpdate+0x508>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001c52:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c56:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c5e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c66:	edd7 7a00 	vldr	s15, [r7]
 8001c6a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c72:	eeb0 0a67 	vmov.f32	s0, s15
 8001c76:	f000 fb6d 	bl	8002354 <invSqrt>
 8001c7a:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8001c7e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c82:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8a:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8001c8e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c92:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9a:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;
 8001c9e:	ed97 7a00 	vldr	s14, [r7]
 8001ca2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001caa:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8001cae:	4b90      	ldr	r3, [pc, #576]	; (8001ef0 <filterUpdate+0x3e4>)
 8001cb0:	edd3 7a00 	vldr	s15, [r3]
 8001cb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cb8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 8001cbc:	4b89      	ldr	r3, [pc, #548]	; (8001ee4 <filterUpdate+0x3d8>)
 8001cbe:	edd3 7a00 	vldr	s15, [r3]
 8001cc2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cc6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 8001cca:	4b87      	ldr	r3, [pc, #540]	; (8001ee8 <filterUpdate+0x3dc>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cd4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8001cd8:	4b84      	ldr	r3, [pc, #528]	; (8001eec <filterUpdate+0x3e0>)
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ce2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 8001ce6:	4b82      	ldr	r3, [pc, #520]	; (8001ef0 <filterUpdate+0x3e4>)
 8001ce8:	edd3 7a00 	vldr	s15, [r3]
 8001cec:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8001cf8:	4b7a      	ldr	r3, [pc, #488]	; (8001ee4 <filterUpdate+0x3d8>)
 8001cfa:	edd3 7a00 	vldr	s15, [r3]
 8001cfe:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d06:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 8001d0a:	4b77      	ldr	r3, [pc, #476]	; (8001ee8 <filterUpdate+0x3dc>)
 8001d0c:	edd3 7a00 	vldr	s15, [r3]
 8001d10:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d18:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8001d1c:	4b71      	ldr	r3, [pc, #452]	; (8001ee4 <filterUpdate+0x3d8>)
 8001d1e:	edd3 7a00 	vldr	s15, [r3]
 8001d22:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001d26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d2a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 8001d2e:	4b6e      	ldr	r3, [pc, #440]	; (8001ee8 <filterUpdate+0x3dc>)
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8001d40:	4b6b      	ldr	r3, [pc, #428]	; (8001ef0 <filterUpdate+0x3e4>)
 8001d42:	ed93 7a00 	vldr	s14, [r3]
 8001d46:	4b6a      	ldr	r3, [pc, #424]	; (8001ef0 <filterUpdate+0x3e4>)
 8001d48:	edd3 7a00 	vldr	s15, [r3]
 8001d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d50:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8001d54:	4b63      	ldr	r3, [pc, #396]	; (8001ee4 <filterUpdate+0x3d8>)
 8001d56:	ed93 7a00 	vldr	s14, [r3]
 8001d5a:	4b62      	ldr	r3, [pc, #392]	; (8001ee4 <filterUpdate+0x3d8>)
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d64:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8001d68:	4b5f      	ldr	r3, [pc, #380]	; (8001ee8 <filterUpdate+0x3dc>)
 8001d6a:	ed93 7a00 	vldr	s14, [r3]
 8001d6e:	4b5e      	ldr	r3, [pc, #376]	; (8001ee8 <filterUpdate+0x3dc>)
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d78:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8001d7c:	4b5b      	ldr	r3, [pc, #364]	; (8001eec <filterUpdate+0x3e0>)
 8001d7e:	ed93 7a00 	vldr	s14, [r3]
 8001d82:	4b5a      	ldr	r3, [pc, #360]	; (8001eec <filterUpdate+0x3e0>)
 8001d84:	edd3 7a00 	vldr	s15, [r3]
 8001d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8001d90:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001d94:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d9c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001da0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001da4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dac:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001db0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001db4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dbc:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001dc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dcc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1
 8001dd0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001dd4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ddc:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001de0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001df0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001df4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001df8:	4b3a      	ldr	r3, [pc, #232]	; (8001ee4 <filterUpdate+0x3d8>)
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e06:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001e0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e16:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e1a:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8001e1e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001e22:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e2e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001e32:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e3e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001e42:	edd7 7a00 	vldr	s15, [r7]
 8001e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1
 8001e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4e:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
 8001e52:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e56:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001e5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e5e:	4b22      	ldr	r3, [pc, #136]	; (8001ee8 <filterUpdate+0x3dc>)
 8001e60:	edd3 7a00 	vldr	s15, [r3]
 8001e64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e68:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001e6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e78:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001e7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001e80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e88:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001e8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e98:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001e9c:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8001ea0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001ea4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eb0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001eb4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001eb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ec0:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001ec4:	edd7 7a00 	vldr	s15, [r7]
 8001ec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
 8001ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed0:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8001ed4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ed8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001edc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ee0:	e008      	b.n	8001ef4 <filterUpdate+0x3e8>
 8001ee2:	bf00      	nop
 8001ee4:	20002218 	.word	0x20002218
 8001ee8:	2000221c 	.word	0x2000221c
 8001eec:	20002220 	.word	0x20002220
 8001ef0:	20002004 	.word	0x20002004
 8001ef4:	4bab      	ldr	r3, [pc, #684]	; (80021a4 <filterUpdate+0x698>)
 8001ef6:	edd3 7a00 	vldr	s15, [r3]
 8001efa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001efe:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001f02:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f0e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f12:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001f16:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001f1a:	4ba2      	ldr	r3, [pc, #648]	; (80021a4 <filterUpdate+0x698>)
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f28:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001f2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f38:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001f3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f40:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f44:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f50:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f60:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f68:	eeb0 0a67 	vmov.f32	s0, s15
 8001f6c:	f000 f9f2 	bl	8002354 <invSqrt>
 8001f70:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 8001f74:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001f78:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 8001f84:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f88:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f90:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 8001f94:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f98:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa0:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8001fa4:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fa8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb0:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 8001fb4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001fb8:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80021a8 <filterUpdate+0x69c>
 8001fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc0:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8001fcc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fd0:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80021a8 <filterUpdate+0x69c>
 8001fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd8:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8001fe4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fe8:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80021a8 <filterUpdate+0x69c>
 8001fec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ff8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 8001ffc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002000:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80021a8 <filterUpdate+0x69c>
 8002004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002008:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800200c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002010:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / (uint16_t) sampleFreq);
 8002014:	4b65      	ldr	r3, [pc, #404]	; (80021ac <filterUpdate+0x6a0>)
 8002016:	edd3 7a00 	vldr	s15, [r3]
 800201a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800201e:	ee17 3a90 	vmov	r3, s15
 8002022:	b29b      	uxth	r3, r3
 8002024:	ee07 3a90 	vmov	s15, r3
 8002028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800202c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002034:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002038:	ee27 7a27 	vmul.f32	s14, s14, s15
 800203c:	4b5c      	ldr	r3, [pc, #368]	; (80021b0 <filterUpdate+0x6a4>)
 800203e:	edd3 7a00 	vldr	s15, [r3]
 8002042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002046:	4b5a      	ldr	r3, [pc, #360]	; (80021b0 <filterUpdate+0x6a4>)
 8002048:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / (uint16_t) sampleFreq);
 800204c:	4b57      	ldr	r3, [pc, #348]	; (80021ac <filterUpdate+0x6a0>)
 800204e:	edd3 7a00 	vldr	s15, [r3]
 8002052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002056:	ee17 3a90 	vmov	r3, s15
 800205a:	b29b      	uxth	r3, r3
 800205c:	ee07 3a90 	vmov	s15, r3
 8002060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800206c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002070:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002074:	4b4f      	ldr	r3, [pc, #316]	; (80021b4 <filterUpdate+0x6a8>)
 8002076:	edd3 7a00 	vldr	s15, [r3]
 800207a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207e:	4b4d      	ldr	r3, [pc, #308]	; (80021b4 <filterUpdate+0x6a8>)
 8002080:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / (uint16_t) sampleFreq);
 8002084:	4b49      	ldr	r3, [pc, #292]	; (80021ac <filterUpdate+0x6a0>)
 8002086:	edd3 7a00 	vldr	s15, [r3]
 800208a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800208e:	ee17 3a90 	vmov	r3, s15
 8002092:	b29b      	uxth	r3, r3
 8002094:	ee07 3a90 	vmov	s15, r3
 8002098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020a4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80020a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ac:	4b42      	ldr	r3, [pc, #264]	; (80021b8 <filterUpdate+0x6ac>)
 80020ae:	edd3 7a00 	vldr	s15, [r3]
 80020b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b6:	4b40      	ldr	r3, [pc, #256]	; (80021b8 <filterUpdate+0x6ac>)
 80020b8:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / (uint16_t) sampleFreq);
 80020bc:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <filterUpdate+0x6a0>)
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020c6:	ee17 3a90 	vmov	r3, s15
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	ee07 3a90 	vmov	s15, r3
 80020d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020dc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80020e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020e4:	4b2f      	ldr	r3, [pc, #188]	; (80021a4 <filterUpdate+0x698>)
 80020e6:	edd3 7a00 	vldr	s15, [r3]
 80020ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ee:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <filterUpdate+0x698>)
 80020f0:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80020f4:	4b2e      	ldr	r3, [pc, #184]	; (80021b0 <filterUpdate+0x6a4>)
 80020f6:	ed93 7a00 	vldr	s14, [r3]
 80020fa:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <filterUpdate+0x6a4>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002104:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <filterUpdate+0x6a8>)
 8002106:	edd3 6a00 	vldr	s13, [r3]
 800210a:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <filterUpdate+0x6a8>)
 800210c:	edd3 7a00 	vldr	s15, [r3]
 8002110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002114:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002118:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <filterUpdate+0x6ac>)
 800211a:	edd3 6a00 	vldr	s13, [r3]
 800211e:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <filterUpdate+0x6ac>)
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002128:	ee37 7a27 	vadd.f32	s14, s14, s15
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <filterUpdate+0x698>)
 800212e:	edd3 6a00 	vldr	s13, [r3]
 8002132:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <filterUpdate+0x698>)
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800213c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002140:	eeb0 0a67 	vmov.f32	s0, s15
 8002144:	f000 f906 	bl	8002354 <invSqrt>
 8002148:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 800214c:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <filterUpdate+0x6a4>)
 800214e:	ed93 7a00 	vldr	s14, [r3]
 8002152:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <filterUpdate+0x6a4>)
 800215c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002160:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <filterUpdate+0x6a8>)
 8002162:	ed93 7a00 	vldr	s14, [r3]
 8002166:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800216a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <filterUpdate+0x6a8>)
 8002170:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002174:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <filterUpdate+0x6ac>)
 8002176:	ed93 7a00 	vldr	s14, [r3]
 800217a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800217e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002182:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <filterUpdate+0x6ac>)
 8002184:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <filterUpdate+0x698>)
 800218a:	ed93 7a00 	vldr	s14, [r3]
 800218e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002196:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <filterUpdate+0x698>)
 8002198:	edc3 7a00 	vstr	s15, [r3]
}
 800219c:	bf00      	nop
 800219e:	3770      	adds	r7, #112	; 0x70
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20002220 	.word	0x20002220
 80021a8:	3dcccccd 	.word	0x3dcccccd
 80021ac:	20002244 	.word	0x20002244
 80021b0:	20002004 	.word	0x20002004
 80021b4:	20002218 	.word	0x20002218
 80021b8:	2000221c 	.word	0x2000221c

080021bc <ToEulerAngles>:
 * @param Real component
 * @param i-component
 * @param j-component
 * @param k-component
 */
struct EulerAngles ToEulerAngles(float _q0, float _q1, float _q2, float _q3) {
 80021bc:	b5b0      	push	{r4, r5, r7, lr}
 80021be:	b08e      	sub	sp, #56	; 0x38
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	ed87 0a07 	vstr	s0, [r7, #28]
 80021c6:	edc7 0a06 	vstr	s1, [r7, #24]
 80021ca:	ed87 1a05 	vstr	s2, [r7, #20]
 80021ce:	edc7 1a04 	vstr	s3, [r7, #16]
	struct EulerAngles angles;

	// roll (x-axis rotation)
	angles.x = atan2(2 * (_q0 * _q1 + _q2 * _q3),
 80021d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80021d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80021da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021de:	edd7 6a05 	vldr	s13, [r7, #20]
 80021e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80021e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021f2:	ee17 0a90 	vmov	r0, s15
 80021f6:	f7fe f9af 	bl	8000558 <__aeabi_f2d>
 80021fa:	4604      	mov	r4, r0
 80021fc:	460d      	mov	r5, r1
			_q0 * _q0 - _q1 * _q1 - _q2 * _q2 + _q3 * _q3);
 80021fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002202:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002206:	edd7 7a06 	vldr	s15, [r7, #24]
 800220a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800220e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002212:	edd7 7a05 	vldr	s15, [r7, #20]
 8002216:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800221a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800221e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002222:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002226:	ee77 7a27 	vadd.f32	s15, s14, s15
	angles.x = atan2(2 * (_q0 * _q1 + _q2 * _q3),
 800222a:	ee17 0a90 	vmov	r0, s15
 800222e:	f7fe f993 	bl	8000558 <__aeabi_f2d>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	ec43 2b11 	vmov	d1, r2, r3
 800223a:	ec45 4b10 	vmov	d0, r4, r5
 800223e:	f008 fa1b 	bl	800a678 <atan2>
 8002242:	ec53 2b10 	vmov	r2, r3, d0
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	f7fe fcb5 	bl	8000bb8 <__aeabi_d2f>
 800224e:	4603      	mov	r3, r0
 8002250:	623b      	str	r3, [r7, #32]

	// pitch (y-axis rotation)
	angles.y = -asin(2 * (_q1 * _q3 - _q0 * _q2));
 8002252:	ed97 7a06 	vldr	s14, [r7, #24]
 8002256:	edd7 7a04 	vldr	s15, [r7, #16]
 800225a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800225e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002262:	edd7 7a05 	vldr	s15, [r7, #20]
 8002266:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800226a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800226e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002272:	ee17 0a90 	vmov	r0, s15
 8002276:	f7fe f96f 	bl	8000558 <__aeabi_f2d>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	ec43 2b10 	vmov	d0, r2, r3
 8002282:	f008 f9bf 	bl	800a604 <asin>
 8002286:	ec53 2b10 	vmov	r2, r3, d0
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	f7fe fc93 	bl	8000bb8 <__aeabi_d2f>
 8002292:	4603      	mov	r3, r0
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eef1 7a67 	vneg.f32	s15, s15
 800229c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
//		angles.y = copysign(M_PI / 2, sinp); // use 90 degrees if out of range
//	else
//		angles.y = asin(sinp);

	// yaw (z-axis rotation)
	angles.z = atan2(2 * (_q0 * _q3 + _q1 * _q2),
 80022a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80022a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80022a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ac:	edd7 6a06 	vldr	s13, [r7, #24]
 80022b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80022b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022c0:	ee17 0a90 	vmov	r0, s15
 80022c4:	f7fe f948 	bl	8000558 <__aeabi_f2d>
 80022c8:	4604      	mov	r4, r0
 80022ca:	460d      	mov	r5, r1
			_q0 * _q0 + _q1 * _q1 - _q2 * _q2 - _q3 * _q3);
 80022cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80022d0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80022d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80022d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80022e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80022f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022f4:	ee77 7a67 	vsub.f32	s15, s14, s15
	angles.z = atan2(2 * (_q0 * _q3 + _q1 * _q2),
 80022f8:	ee17 0a90 	vmov	r0, s15
 80022fc:	f7fe f92c 	bl	8000558 <__aeabi_f2d>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	ec43 2b11 	vmov	d1, r2, r3
 8002308:	ec45 4b10 	vmov	d0, r4, r5
 800230c:	f008 f9b4 	bl	800a678 <atan2>
 8002310:	ec53 2b10 	vmov	r2, r3, d0
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	f7fe fc4e 	bl	8000bb8 <__aeabi_d2f>
 800231c:	4603      	mov	r3, r0
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28

	return angles;
 8002320:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002324:	f107 0220 	add.w	r2, r7, #32
 8002328:	ca07      	ldmia	r2, {r0, r1, r2}
 800232a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800232e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002334:	ee06 1a90 	vmov	s13, r1
 8002338:	ee07 2a10 	vmov	s14, r2
 800233c:	ee07 3a90 	vmov	s15, r3
}
 8002340:	eeb0 0a66 	vmov.f32	s0, s13
 8002344:	eef0 0a47 	vmov.f32	s1, s14
 8002348:	eeb0 1a67 	vmov.f32	s2, s15
 800234c:	3738      	adds	r7, #56	; 0x38
 800234e:	46bd      	mov	sp, r7
 8002350:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002354 <invSqrt>:

/*
 * @brief Fast inverse Square root
 * @param The input value which will be converted to its inverse sqrt
 */
float invSqrt(float x) {
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800235e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002362:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800236a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 8002372:	f107 0310 	add.w	r3, r7, #16
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i >> 1);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	105a      	asrs	r2, r3, #1
 800237e:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <invSqrt+0x9c>)
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800238c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002390:	edd7 7a05 	vldr	s15, [r7, #20]
 8002394:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002398:	edd7 7a04 	vldr	s15, [r7, #16]
 800239c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80023a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80023ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b0:	edc7 7a04 	vstr	s15, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80023b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80023b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80023bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80023c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80023cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80023d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d8:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	ee07 3a90 	vmov	s15, r3
}
 80023e2:	eeb0 0a67 	vmov.f32	s0, s15
 80023e6:	371c      	adds	r7, #28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	5f3759df 	.word	0x5f3759df
 80023f4:	00000000 	.word	0x00000000

080023f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023fc:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8002400:	af2e      	add	r7, sp, #184	; 0xb8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002402:	f001 fc83 	bl	8003d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002406:	f000 fcb7 	bl	8002d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800240a:	f001 f835 	bl	8003478 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800240e:	f000 ffe9 	bl	80033e4 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8002412:	f001 f811 	bl	8003438 <MX_DMA_Init>
  MX_ADC1_Init();
 8002416:	f000 fd19 	bl	8002e4c <MX_ADC1_Init>
  MX_TIM1_Init();
 800241a:	f000 fe0f 	bl	800303c <MX_TIM1_Init>
  MX_SPI1_Init();
 800241e:	f000 fdd7 	bl	8002fd0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002422:	f000 fea7 	bl	8003174 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002426:	f000 ff15 	bl	8003254 <MX_TIM3_Init>
  MX_TIM5_Init();
 800242a:	f000 ff83 	bl	8003334 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

	if (!USE_IMU_VIS) {
		sprintf((char*) buff, "\r\n###########################\r\n");
 800242e:	49c9      	ldr	r1, [pc, #804]	; (8002754 <main+0x35c>)
 8002430:	48c9      	ldr	r0, [pc, #804]	; (8002758 <main+0x360>)
 8002432:	f005 febd 	bl	80081b0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) buff, strlen((char*) buff),
 8002436:	48c8      	ldr	r0, [pc, #800]	; (8002758 <main+0x360>)
 8002438:	f7fd fed2 	bl	80001e0 <strlen>
 800243c:	4603      	mov	r3, r0
 800243e:	b29a      	uxth	r2, r3
 8002440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002444:	49c4      	ldr	r1, [pc, #784]	; (8002758 <main+0x360>)
 8002446:	48c5      	ldr	r0, [pc, #788]	; (800275c <main+0x364>)
 8002448:	f004 ff4d 	bl	80072e6 <HAL_UART_Transmit>

	MotorDriver MotorX;
	MotorDriver MotorY;
	MotorDriver MotorZ;

	MotorX.PIN_ENC = PIN_ENC_X;
 800244c:	2310      	movs	r3, #16
 800244e:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
	MotorY.PIN_ENC = PIN_ENC_Y;
 8002452:	2320      	movs	r3, #32
 8002454:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
	MotorZ.PIN_ENC = PIN_ENC_Z;
 8002458:	2340      	movs	r3, #64	; 0x40
 800245a:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

	if (USE_DRV8313) {

		/* Initialize motor structs and start PWM*/
		drv8313_init(&MotorX, &htim1);
 800245e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002462:	49bf      	ldr	r1, [pc, #764]	; (8002760 <main+0x368>)
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fad3 	bl	8001a10 <drv8313_init>
		drv8313_init(&MotorY, &htim2);
 800246a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800246e:	49bd      	ldr	r1, [pc, #756]	; (8002764 <main+0x36c>)
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff facd 	bl	8001a10 <drv8313_init>
		drv8313_init(&MotorZ, &htim3);
 8002476:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800247a:	49bb      	ldr	r1, [pc, #748]	; (8002768 <main+0x370>)
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fac7 	bl	8001a10 <drv8313_init>

		if (ADC_TYPE == ADC_DMA) {
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_read, ADC_CHANNELS);
 8002482:	2209      	movs	r2, #9
 8002484:	49b9      	ldr	r1, [pc, #740]	; (800276c <main+0x374>)
 8002486:	48ba      	ldr	r0, [pc, #744]	; (8002770 <main+0x378>)
 8002488:	f001 fd1a 	bl	8003ec0 <HAL_ADC_Start_DMA>
		} else if (ADC_TYPE == ADC_INT) {
		}

		adc_ratio = 1/(float)adc_max;
 800248c:	4bb9      	ldr	r3, [pc, #740]	; (8002774 <main+0x37c>)
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	ee07 3a90 	vmov	s15, r3
 8002494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002498:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800249c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024a0:	4bb5      	ldr	r3, [pc, #724]	; (8002778 <main+0x380>)
 80024a2:	edc3 7a00 	vstr	s15, [r3]
	}

	if (USE_BMI270) {
		bmi270_spi_init();
 80024a6:	f7fe fea5 	bl	80011f4 <bmi270_spi_init>
		if (!USE_IMU_VIS) {
			bmi270_spi_init_check();
 80024aa:	f7fe ff6d 	bl	8001388 <bmi270_spi_init_check>
		}

		bmi270_pwr_conf(BMI270_PWR_MODE_PERF);
 80024ae:	2002      	movs	r0, #2
 80024b0:	f7fe fede 	bl	8001270 <bmi270_pwr_conf>
		bmi270_spi_write_8(REG_GYR_RANGE, range_2000);
 80024b4:	2100      	movs	r1, #0
 80024b6:	2043      	movs	r0, #67	; 0x43
 80024b8:	f7fe ff98 	bl	80013ec <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_ACC_RANGE, range_8g);
 80024bc:	2102      	movs	r1, #2
 80024be:	2041      	movs	r0, #65	; 0x41
 80024c0:	f7fe ff94 	bl	80013ec <bmi270_spi_write_8>

		bmi270_getGyroRange(&Imu);
 80024c4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff f8b9 	bl	8001640 <bmi270_getGyroRange>
		bmi270_getAccelRange(&Imu);
 80024ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f8ee 	bl	80016b4 <bmi270_getAccelRange>

		bmi270_calibrateInit(&Imu, 0);
 80024d8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80024dc:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 800277c <main+0x384>
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff f915 	bl	8001710 <bmi270_calibrateInit>

		Imu.gyr_odr = gyr_odr_25; /* Set gyro 3dB LP-filter cutoff to 50Hz */
 80024e6:	2306      	movs	r3, #6
 80024e8:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
		Imu.gyr_bwp = gyr_osr2;
 80024ec:	2301      	movs	r3, #1
 80024ee:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
		Imu.gyr_noise_perf = gyr_ulp;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f887 3148 	strb.w	r3, [r7, #328]	; 0x148
		Imu.gyr_filter_perf = gyr_ulp;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f887 3149 	strb.w	r3, [r7, #329]	; 0x149
		bmi270_setGyroConf(&Imu);
 80024fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff f839 	bl	800157a <bmi270_setGyroConf>
		bmi270_getGyroConf(&Imu);
 8002508:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff f80b 	bl	8001528 <bmi270_getGyroConf>

		Imu.acc_odr = acc_odr_12p5; /* Set accel 3dB LP-filter cutoff to 50Hz */
 8002512:	2305      	movs	r3, #5
 8002514:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
		Imu.acc_bwp = acc_res_avg128;
 8002518:	2307      	movs	r3, #7
 800251a:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
		Imu.acc_filter_perf = acc_ulp;
 800251e:	2300      	movs	r3, #0
 8002520:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
		bmi270_setAccConf(&Imu);
 8002524:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff f86c 	bl	8001606 <bmi270_setAccConf>
		bmi270_getAccConf(&Imu);
 800252e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff f845 	bl	80015c2 <bmi270_getAccConf>
	}

	if (USE_AS5048A) {
		/* Initialize encoders for each motor*/
		as5048a_init(&MotorX);
 8002538:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe fd83 	bl	8001048 <as5048a_init>
		as5048a_init(&MotorY);
 8002542:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002546:	4618      	mov	r0, r3
 8002548:	f7fe fd7e 	bl	8001048 <as5048a_init>
		as5048a_init(&MotorZ);
 800254c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fd79 	bl	8001048 <as5048a_init>
	}

	setSampleFreq_ms();
 8002556:	f7ff faaf 	bl	8001ab8 <setSampleFreq_ms>

	TIM5->PSC = 84;
 800255a:	4b89      	ldr	r3, [pc, #548]	; (8002780 <main+0x388>)
 800255c:	2254      	movs	r2, #84	; 0x54
 800255e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM5->ARR = 999999;
 8002560:	4b87      	ldr	r3, [pc, #540]	; (8002780 <main+0x388>)
 8002562:	4a88      	ldr	r2, [pc, #544]	; (8002784 <main+0x38c>)
 8002564:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_TIM_Base_Start(&htim5);
 8002566:	4888      	ldr	r0, [pc, #544]	; (8002788 <main+0x390>)
 8002568:	f004 f8b0 	bl	80066cc <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		us_t = __HAL_TIM_GET_COUNTER(&htim5);
 800256c:	4b86      	ldr	r3, [pc, #536]	; (8002788 <main+0x390>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	4a86      	ldr	r2, [pc, #536]	; (800278c <main+0x394>)
 8002574:	6013      	str	r3, [r2, #0]
//		setSampleFreq_us();
		t1 = HAL_GetTick();
 8002576:	f001 fc2f 	bl	8003dd8 <HAL_GetTick>
 800257a:	4603      	mov	r3, r0
 800257c:	4a84      	ldr	r2, [pc, #528]	; (8002790 <main+0x398>)
 800257e:	6013      	str	r3, [r2, #0]
		setSampleFreq_ms();
 8002580:	f7ff fa9a 	bl	8001ab8 <setSampleFreq_ms>

		if (USE_AS5048A) {

			as5048a_getAngle(&MotorX);
 8002584:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe fe00 	bl	800118e <as5048a_getAngle>
			as5048a_getAngle(&MotorY);
 800258e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fdfb 	bl	800118e <as5048a_getAngle>
			as5048a_getAngle(&MotorZ);
 8002598:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800259c:	4618      	mov	r0, r3
 800259e:	f7fe fdf6 	bl	800118e <as5048a_getAngle>

		}

		if (USE_DRV8313 && !USE_IMU_VIS) {
			drv8313_test(&MotorX);
 80025a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fa76 	bl	8001a98 <drv8313_test>

			if (ADC_TYPE == ADC_DMA) {
				while (adcConvComplete == 0) { /* ADC interrupt wait */
 80025ac:	bf00      	nop
 80025ae:	4b79      	ldr	r3, [pc, #484]	; (8002794 <main+0x39c>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0fa      	beq.n	80025ae <main+0x1b6>
				}
				adcConvComplete = 0;
 80025b8:	4b76      	ldr	r3, [pc, #472]	; (8002794 <main+0x39c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]

				MotorX.i_a = adc_read[0];
 80025be:	4b6b      	ldr	r3, [pc, #428]	; (800276c <main+0x374>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
				MotorX.i_b = adc_read[1];
 80025c8:	4b68      	ldr	r3, [pc, #416]	; (800276c <main+0x374>)
 80025ca:	885b      	ldrh	r3, [r3, #2]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4

				MotorY.i_a = adc_read[3];
 80025d2:	4b66      	ldr	r3, [pc, #408]	; (800276c <main+0x374>)
 80025d4:	88db      	ldrh	r3, [r3, #6]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
				MotorY.i_b = adc_read[4];
 80025dc:	4b63      	ldr	r3, [pc, #396]	; (800276c <main+0x374>)
 80025de:	891b      	ldrh	r3, [r3, #8]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4

				MotorZ.i_a = adc_read[6];
 80025e6:	4b61      	ldr	r3, [pc, #388]	; (800276c <main+0x374>)
 80025e8:	899b      	ldrh	r3, [r3, #12]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
				MotorZ.i_b = adc_read[7];
 80025f0:	4b5e      	ldr	r3, [pc, #376]	; (800276c <main+0x374>)
 80025f2:	89db      	ldrh	r3, [r3, #14]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4

				ina_ref = adc_read[2]*adc_ratio*adc_ref;
 80025fa:	4b5c      	ldr	r3, [pc, #368]	; (800276c <main+0x374>)
 80025fc:	889b      	ldrh	r3, [r3, #4]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	ee07 3a90 	vmov	s15, r3
 8002604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002608:	4b5b      	ldr	r3, [pc, #364]	; (8002778 <main+0x380>)
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002612:	4b61      	ldr	r3, [pc, #388]	; (8002798 <main+0x3a0>)
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261c:	4b5f      	ldr	r3, [pc, #380]	; (800279c <main+0x3a4>)
 800261e:	edc3 7a00 	vstr	s15, [r3]

		}


		if (USE_BMI270) {
			Imu.gyr_x = (int16_t) bmi270_read_gyro(AXIS_X) / Imu.gyr_range;
 8002622:	2000      	movs	r0, #0
 8002624:	f7fe fe64 	bl	80012f0 <bmi270_read_gyro>
 8002628:	4603      	mov	r3, r0
 800262a:	b21b      	sxth	r3, r3
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002634:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 8002638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800263c:	edc7 7a42 	vstr	s15, [r7, #264]	; 0x108
			Imu.gyr_y = (int16_t) bmi270_read_gyro(AXIS_Y) / Imu.gyr_range;
 8002640:	2001      	movs	r0, #1
 8002642:	f7fe fe55 	bl	80012f0 <bmi270_read_gyro>
 8002646:	4603      	mov	r3, r0
 8002648:	b21b      	sxth	r3, r3
 800264a:	ee07 3a90 	vmov	s15, r3
 800264e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002652:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 8002656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800265a:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
			Imu.gyr_z = (int16_t) bmi270_read_gyro(AXIS_Z) / Imu.gyr_range;
 800265e:	2002      	movs	r0, #2
 8002660:	f7fe fe46 	bl	80012f0 <bmi270_read_gyro>
 8002664:	4603      	mov	r3, r0
 8002666:	b21b      	sxth	r3, r3
 8002668:	ee07 3a90 	vmov	s15, r3
 800266c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002670:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 8002674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002678:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110

			if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 800267c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002680:	4847      	ldr	r0, [pc, #284]	; (80027a0 <main+0x3a8>)
 8002682:	f002 fdc7 	bl	8005214 <HAL_GPIO_ReadPin>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10f      	bne.n	80026ac <main+0x2b4>
				q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
 800268c:	4b45      	ldr	r3, [pc, #276]	; (80027a4 <main+0x3ac>)
 800268e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	4b44      	ldr	r3, [pc, #272]	; (80027a8 <main+0x3b0>)
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	4b43      	ldr	r3, [pc, #268]	; (80027ac <main+0x3b4>)
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	4b42      	ldr	r3, [pc, #264]	; (80027b0 <main+0x3b8>)
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
			}

			bmi270_calibrateNoise(&Imu);
 80026ac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff f84f 	bl	8001754 <bmi270_calibrateNoise>
			//gyro limiter. Prevents yaw drift programmatically, with some success.
			if (Imu.calibration_c >= BMI270_CALIBRATION_TIM) {
 80026b6:	f8b7 3144 	ldrh.w	r3, [r7, #324]	; 0x144
 80026ba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80026be:	d379      	bcc.n	80027b4 <main+0x3bc>
				if (Imu.gyr_x > -Imu.gyr_lim_min_x
 80026c0:	ed97 7a42 	vldr	s14, [r7, #264]	; 0x108
 80026c4:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 80026c8:	eef1 7a67 	vneg.f32	s15, s15
 80026cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d4:	dd0c      	ble.n	80026f0 <main+0x2f8>
						&& Imu.gyr_x < Imu.gyr_lim_max_x) {
 80026d6:	ed97 7a42 	vldr	s14, [r7, #264]	; 0x108
 80026da:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 80026de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e6:	d503      	bpl.n	80026f0 <main+0x2f8>
					Imu.gyr_x = 0.0f;
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				}
				if (Imu.gyr_y > -Imu.gyr_lim_min_y
 80026f0:	ed97 7a43 	vldr	s14, [r7, #268]	; 0x10c
 80026f4:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 80026f8:	eef1 7a67 	vneg.f32	s15, s15
 80026fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002704:	dd0c      	ble.n	8002720 <main+0x328>
						&& Imu.gyr_y < Imu.gyr_lim_max_x) {
 8002706:	ed97 7a43 	vldr	s14, [r7, #268]	; 0x10c
 800270a:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 800270e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002716:	d503      	bpl.n	8002720 <main+0x328>
					Imu.gyr_y = 0.0f;
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				}
				if (Imu.gyr_z > -Imu.gyr_lim_min_z
 8002720:	ed97 7a44 	vldr	s14, [r7, #272]	; 0x110
 8002724:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8002728:	eef1 7a67 	vneg.f32	s15, s15
 800272c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002734:	dd3e      	ble.n	80027b4 <main+0x3bc>
						&& Imu.gyr_z < Imu.gyr_lim_max_z) {
 8002736:	ed97 7a44 	vldr	s14, [r7, #272]	; 0x110
 800273a:	edd7 7a50 	vldr	s15, [r7, #320]	; 0x140
 800273e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002746:	d535      	bpl.n	80027b4 <main+0x3bc>
					Imu.gyr_z = 0.0f;
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002750:	e030      	b.n	80027b4 <main+0x3bc>
 8002752:	bf00      	nop
 8002754:	0800b55c 	.word	0x0800b55c
 8002758:	2000224c 	.word	0x2000224c
 800275c:	20004494 	.word	0x20004494
 8002760:	200043a4 	.word	0x200043a4
 8002764:	20004448 	.word	0x20004448
 8002768:	20004298 	.word	0x20004298
 800276c:	200042e0 	.word	0x200042e0
 8002770:	200042f4 	.word	0x200042f4
 8002774:	20002014 	.word	0x20002014
 8002778:	20004444 	.word	0x20004444
 800277c:	00000000 	.word	0x00000000
 8002780:	40000c00 	.word	0x40000c00
 8002784:	000f423f 	.word	0x000f423f
 8002788:	20004250 	.word	0x20004250
 800278c:	20002228 	.word	0x20002228
 8002790:	200043a0 	.word	0x200043a0
 8002794:	2000222d 	.word	0x2000222d
 8002798:	20002010 	.word	0x20002010
 800279c:	20002230 	.word	0x20002230
 80027a0:	40020800 	.word	0x40020800
 80027a4:	20002004 	.word	0x20002004
 80027a8:	20002218 	.word	0x20002218
 80027ac:	2000221c 	.word	0x2000221c
 80027b0:	20002220 	.word	0x20002220
				}
			}

			Imu.acc_x = (int16_t) bmi270_read_accel(AXIS_X) / Imu.acc_range;
 80027b4:	2000      	movs	r0, #0
 80027b6:	f7fe fdc1 	bl	800133c <bmi270_read_accel>
 80027ba:	4603      	mov	r3, r0
 80027bc:	b21b      	sxth	r3, r3
 80027be:	ee07 3a90 	vmov	s15, r3
 80027c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80027c6:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 80027ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ce:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
			Imu.acc_y = (int16_t) bmi270_read_accel(AXIS_Y) / Imu.acc_range;
 80027d2:	2001      	movs	r0, #1
 80027d4:	f7fe fdb2 	bl	800133c <bmi270_read_accel>
 80027d8:	4603      	mov	r3, r0
 80027da:	b21b      	sxth	r3, r3
 80027dc:	ee07 3a90 	vmov	s15, r3
 80027e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80027e4:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 80027e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ec:	edc7 7a46 	vstr	s15, [r7, #280]	; 0x118
			Imu.acc_z = (int16_t) bmi270_read_accel(AXIS_Z) / Imu.acc_range;
 80027f0:	2002      	movs	r0, #2
 80027f2:	f7fe fda3 	bl	800133c <bmi270_read_accel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	b21b      	sxth	r3, r3
 80027fa:	ee07 3a90 	vmov	s15, r3
 80027fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002802:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 8002806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800280a:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
		}

		//Wait before updating quaternion. This avoids div by zero in different Quaternion functions.
		if (/*waitFilterUpdate >= 1 &&*/!USE_SIM
				&& (USE_BMI270 || USE_ICM20602)) {
			filterUpdate(Imu.gyr_x * DEG_TO_RAD, Imu.gyr_y * DEG_TO_RAD,
 800280e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd fea0 	bl	8000558 <__aeabi_f2d>
 8002818:	a3ec      	add	r3, pc, #944	; (adr r3, 8002bcc <main+0x7d4>)
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	f7fd fef3 	bl	8000608 <__aeabi_dmul>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	f7fe f9c5 	bl	8000bb8 <__aeabi_d2f>
 800282e:	4604      	mov	r4, r0
 8002830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002834:	4618      	mov	r0, r3
 8002836:	f7fd fe8f 	bl	8000558 <__aeabi_f2d>
 800283a:	a3e4      	add	r3, pc, #912	; (adr r3, 8002bcc <main+0x7d4>)
 800283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002840:	f7fd fee2 	bl	8000608 <__aeabi_dmul>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	f7fe f9b4 	bl	8000bb8 <__aeabi_d2f>
 8002850:	4605      	mov	r5, r0
					Imu.gyr_z * DEG_TO_RAD, Imu.acc_x, Imu.acc_y, Imu.acc_z);
 8002852:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002856:	4618      	mov	r0, r3
 8002858:	f7fd fe7e 	bl	8000558 <__aeabi_f2d>
 800285c:	a3db      	add	r3, pc, #876	; (adr r3, 8002bcc <main+0x7d4>)
 800285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002862:	f7fd fed1 	bl	8000608 <__aeabi_dmul>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
			filterUpdate(Imu.gyr_x * DEG_TO_RAD, Imu.gyr_y * DEG_TO_RAD,
 800286a:	4610      	mov	r0, r2
 800286c:	4619      	mov	r1, r3
 800286e:	f7fe f9a3 	bl	8000bb8 <__aeabi_d2f>
 8002872:	4603      	mov	r3, r0
 8002874:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002878:	ed97 7a46 	vldr	s14, [r7, #280]	; 0x118
 800287c:	edd7 6a47 	vldr	s13, [r7, #284]	; 0x11c
 8002880:	eef0 2a66 	vmov.f32	s5, s13
 8002884:	eeb0 2a47 	vmov.f32	s4, s14
 8002888:	eef0 1a67 	vmov.f32	s3, s15
 800288c:	ee01 3a10 	vmov	s2, r3
 8002890:	ee00 5a90 	vmov	s1, r5
 8002894:	ee00 4a10 	vmov	s0, r4
 8002898:	f7ff f938 	bl	8001b0c <filterUpdate>
			ay_s = 0.0;
			az_s = 0.0;
			filterUpdate(gx_s * DEG_TO_RAD, gy_s * DEG_TO_RAD,
					gz_s * DEG_TO_RAD, ax_s, ay_s, az_s);
		}
		waitFilterUpdate++;
 800289c:	4bbe      	ldr	r3, [pc, #760]	; (8002b98 <main+0x7a0>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	3301      	adds	r3, #1
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	4bbc      	ldr	r3, [pc, #752]	; (8002b98 <main+0x7a0>)
 80028a6:	701a      	strb	r2, [r3, #0]

		if (USE_ICM20602 || USE_BMI270) {
			Euler = ToEulerAngles(q0, q1, q2, q3);
 80028a8:	4bbc      	ldr	r3, [pc, #752]	; (8002b9c <main+0x7a4>)
 80028aa:	edd3 7a00 	vldr	s15, [r3]
 80028ae:	4bbc      	ldr	r3, [pc, #752]	; (8002ba0 <main+0x7a8>)
 80028b0:	ed93 7a00 	vldr	s14, [r3]
 80028b4:	4bbb      	ldr	r3, [pc, #748]	; (8002ba4 <main+0x7ac>)
 80028b6:	edd3 6a00 	vldr	s13, [r3]
 80028ba:	4bbb      	ldr	r3, [pc, #748]	; (8002ba8 <main+0x7b0>)
 80028bc:	ed93 6a00 	vldr	s12, [r3]
 80028c0:	eef0 1a46 	vmov.f32	s3, s12
 80028c4:	eeb0 1a66 	vmov.f32	s2, s13
 80028c8:	eef0 0a47 	vmov.f32	s1, s14
 80028cc:	eeb0 0a67 	vmov.f32	s0, s15
 80028d0:	f7ff fc74 	bl	80021bc <ToEulerAngles>
 80028d4:	eef0 6a40 	vmov.f32	s13, s0
 80028d8:	eeb0 7a60 	vmov.f32	s14, s1
 80028dc:	eef0 7a41 	vmov.f32	s15, s2
 80028e0:	edc7 6a54 	vstr	s13, [r7, #336]	; 0x150
 80028e4:	ed87 7a55 	vstr	s14, [r7, #340]	; 0x154
 80028e8:	edc7 7a56 	vstr	s15, [r7, #344]	; 0x158
			Imu.roll = Euler.x * RAD_TO_DEG;
 80028ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fd fe31 	bl	8000558 <__aeabi_f2d>
 80028f6:	a3a6      	add	r3, pc, #664	; (adr r3, 8002b90 <main+0x798>)
 80028f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fc:	f7fd fe84 	bl	8000608 <__aeabi_dmul>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	f7fe f956 	bl	8000bb8 <__aeabi_d2f>
 800290c:	4603      	mov	r3, r0
 800290e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			Imu.pitch = Euler.y * RAD_TO_DEG;
 8002912:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002916:	4618      	mov	r0, r3
 8002918:	f7fd fe1e 	bl	8000558 <__aeabi_f2d>
 800291c:	a39c      	add	r3, pc, #624	; (adr r3, 8002b90 <main+0x798>)
 800291e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002922:	f7fd fe71 	bl	8000608 <__aeabi_dmul>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4610      	mov	r0, r2
 800292c:	4619      	mov	r1, r3
 800292e:	f7fe f943 	bl	8000bb8 <__aeabi_d2f>
 8002932:	4603      	mov	r3, r0
 8002934:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			Imu.yaw = Euler.z * RAD_TO_DEG;
 8002938:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fe0b 	bl	8000558 <__aeabi_f2d>
 8002942:	a393      	add	r3, pc, #588	; (adr r3, 8002b90 <main+0x798>)
 8002944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002948:	f7fd fe5e 	bl	8000608 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	f7fe f930 	bl	8000bb8 <__aeabi_d2f>
 8002958:	4603      	mov	r3, r0
 800295a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		}

		if (USE_PRINT) {
			uint16_t len = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
			if (!USE_IMU_VIS && !loop_cnt) {
 8002964:	4b91      	ldr	r3, [pc, #580]	; (8002bac <main+0x7b4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	f040 81b6 	bne.w	8002cda <main+0x8e2>
				if (USE_AS5048A) {
					len += sprintf((char*) buff + len,
 800296e:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8002972:	4a8f      	ldr	r2, [pc, #572]	; (8002bb0 <main+0x7b8>)
 8002974:	189e      	adds	r6, r3, r2
									"Angle: %.3f\t Zero pos: %.3f\r\n"
									"MotorY\r\n"
									"Angle: %.3f\t Zero pos: %.3f\r\n"
									"MotorZ\r\n"
									"Angle: %.3f\t Zero pos: %.3f\r\n",
							MotorX.angle, MotorX.zero_pos_map, MotorY.angle,
 8002976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
					len += sprintf((char*) buff + len,
 800297a:	4618      	mov	r0, r3
 800297c:	f7fd fdec 	bl	8000558 <__aeabi_f2d>
 8002980:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
							MotorX.angle, MotorX.zero_pos_map, MotorY.angle,
 8002984:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
					len += sprintf((char*) buff + len,
 8002988:	4618      	mov	r0, r3
 800298a:	f7fd fde5 	bl	8000558 <__aeabi_f2d>
 800298e:	4604      	mov	r4, r0
 8002990:	460d      	mov	r5, r1
							MotorX.angle, MotorX.zero_pos_map, MotorY.angle,
 8002992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
					len += sprintf((char*) buff + len,
 8002996:	4618      	mov	r0, r3
 8002998:	f7fd fdde 	bl	8000558 <__aeabi_f2d>
 800299c:	4680      	mov	r8, r0
 800299e:	4689      	mov	r9, r1
							MotorY.zero_pos_map, MotorZ.angle,
 80029a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
					len += sprintf((char*) buff + len,
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fd fdd7 	bl	8000558 <__aeabi_f2d>
 80029aa:	4682      	mov	sl, r0
 80029ac:	468b      	mov	fp, r1
							MotorY.zero_pos_map, MotorZ.angle,
 80029ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
					len += sprintf((char*) buff + len,
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fd fdd0 	bl	8000558 <__aeabi_f2d>
 80029b8:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
							MotorZ.zero_pos_map);
 80029bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
					len += sprintf((char*) buff + len,
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fdc9 	bl	8000558 <__aeabi_f2d>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80029ce:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 80029d2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80029d6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80029da:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80029de:	e9cd 4500 	strd	r4, r5, [sp]
 80029e2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80029e6:	4973      	ldr	r1, [pc, #460]	; (8002bb4 <main+0x7bc>)
 80029e8:	4630      	mov	r0, r6
 80029ea:	f005 fbe1 	bl	80081b0 <siprintf>
 80029ee:	4603      	mov	r3, r0
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 80029f6:	4413      	add	r3, r2
 80029f8:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
				}
				if (USE_DRV8313) {
					len += sprintf((char*) buff + len,
 80029fc:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8002a00:	4a6b      	ldr	r2, [pc, #428]	; (8002bb0 <main+0x7b8>)
 8002a02:	189c      	adds	r4, r3, r2
									"MotorY\r\n"
									"i_a: %u\ti_b: %u\r\n"
									"MotorZ\r\n"
									"i_a: %u\ti_b: %u\r\n"
									"INA181 ref. voltage: %.3f\r\n",
									MotorX.i_a, MotorX.i_b,
 8002a04:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
					len += sprintf((char*) buff + len,
 8002a08:	4698      	mov	r8, r3
									MotorX.i_a, MotorX.i_b,
 8002a0a:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
					len += sprintf((char*) buff + len,
 8002a0e:	4699      	mov	r9, r3
									MotorY.i_a, MotorY.i_b,
 8002a10:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
					len += sprintf((char*) buff + len,
 8002a14:	461d      	mov	r5, r3
									MotorY.i_a, MotorY.i_b,
 8002a16:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
					len += sprintf((char*) buff + len,
 8002a1a:	461e      	mov	r6, r3
									MotorZ.i_a, MotorZ.i_b,
 8002a1c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
					len += sprintf((char*) buff + len,
 8002a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
									MotorZ.i_a, MotorZ.i_b,
 8002a24:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
					len += sprintf((char*) buff + len,
 8002a28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a2c:	4b62      	ldr	r3, [pc, #392]	; (8002bb8 <main+0x7c0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fd91 	bl	8000558 <__aeabi_f2d>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002a3e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002a42:	9203      	str	r2, [sp, #12]
 8002a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a48:	9302      	str	r3, [sp, #8]
 8002a4a:	9601      	str	r6, [sp, #4]
 8002a4c:	9500      	str	r5, [sp, #0]
 8002a4e:	464b      	mov	r3, r9
 8002a50:	4642      	mov	r2, r8
 8002a52:	495a      	ldr	r1, [pc, #360]	; (8002bbc <main+0x7c4>)
 8002a54:	4620      	mov	r0, r4
 8002a56:	f005 fbab 	bl	80081b0 <siprintf>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8002a62:	4413      	add	r3, r2
 8002a64:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
									ina_ref);
				}
				if (USE_BMI270 || USE_ICM20602) {
					len +=
							sprintf((char*) buff + len,
 8002a68:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8002a6c:	4a50      	ldr	r2, [pc, #320]	; (8002bb0 <main+0x7b8>)
 8002a6e:	4413      	add	r3, r2
 8002a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
											"gyr_lim_max_x: %f\tgyr_lim_max_y: %f\tgyr_lim_max_z: %f\r\n"
											"gyroscope x: %f˚/s, y: %f˚/s, z: %f˚/s\r\n"
											"accelerometer x: %f m/s2, y: %f m/s2, z: %f m/s2\r\n"
											"q0: %f, q1: %f, q2: %f, q3: %f\r\n"
											"roll: %f, pitch: %f, yaw: %f\r\n",
									Imu.acc_range, Imu.gyr_range, while_t,
 8002a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
							sprintf((char*) buff + len,
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fd fd6d 	bl	8000558 <__aeabi_f2d>
 8002a7e:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
									Imu.acc_range, Imu.gyr_range, while_t,
 8002a82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
							sprintf((char*) buff + len,
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fd fd66 	bl	8000558 <__aeabi_f2d>
 8002a8c:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
 8002a90:	4b4b      	ldr	r3, [pc, #300]	; (8002bc0 <main+0x7c8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fd fd5f 	bl	8000558 <__aeabi_f2d>
 8002a9a:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
 8002a9e:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <main+0x7cc>)
 8002aa0:	681e      	ldr	r6, [r3, #0]
 8002aa2:	4b49      	ldr	r3, [pc, #292]	; (8002bc8 <main+0x7d0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fd fd56 	bl	8000558 <__aeabi_f2d>
 8002aac:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
									us_t_prev, sampleFreq, Imu.gyr_lim_min_x,
 8002ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
							sprintf((char*) buff + len,
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fd4f 	bl	8000558 <__aeabi_f2d>
 8002aba:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
									Imu.gyr_lim_min_y, Imu.gyr_lim_min_z,
 8002abe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
							sprintf((char*) buff + len,
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fd fd48 	bl	8000558 <__aeabi_f2d>
 8002ac8:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
									Imu.gyr_lim_min_y, Imu.gyr_lim_min_z,
 8002acc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
							sprintf((char*) buff + len,
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fd fd41 	bl	8000558 <__aeabi_f2d>
 8002ad6:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
									Imu.gyr_lim_max_x, Imu.gyr_lim_max_y,
 8002ada:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
							sprintf((char*) buff + len,
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd fd3a 	bl	8000558 <__aeabi_f2d>
 8002ae4:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
									Imu.gyr_lim_max_x, Imu.gyr_lim_max_y,
 8002ae8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
							sprintf((char*) buff + len,
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fd33 	bl	8000558 <__aeabi_f2d>
 8002af2:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
									Imu.gyr_lim_max_z, Imu.gyr_x, Imu.gyr_y,
 8002af6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
							sprintf((char*) buff + len,
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fd fd2c 	bl	8000558 <__aeabi_f2d>
 8002b00:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
									Imu.gyr_lim_max_z, Imu.gyr_x, Imu.gyr_y,
 8002b04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
							sprintf((char*) buff + len,
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd fd25 	bl	8000558 <__aeabi_f2d>
 8002b0e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
									Imu.gyr_lim_max_z, Imu.gyr_x, Imu.gyr_y,
 8002b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
							sprintf((char*) buff + len,
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fd1e 	bl	8000558 <__aeabi_f2d>
 8002b1c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
									Imu.gyr_z, Imu.acc_x, Imu.acc_y, Imu.acc_z,
 8002b20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
							sprintf((char*) buff + len,
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fd fd17 	bl	8000558 <__aeabi_f2d>
 8002b2a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
									Imu.gyr_z, Imu.acc_x, Imu.acc_y, Imu.acc_z,
 8002b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
							sprintf((char*) buff + len,
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fd10 	bl	8000558 <__aeabi_f2d>
 8002b38:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
									Imu.gyr_z, Imu.acc_x, Imu.acc_y, Imu.acc_z,
 8002b3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
							sprintf((char*) buff + len,
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fd fd09 	bl	8000558 <__aeabi_f2d>
 8002b46:	e9c7 0108 	strd	r0, r1, [r7, #32]
									Imu.gyr_z, Imu.acc_x, Imu.acc_y, Imu.acc_z,
 8002b4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
							sprintf((char*) buff + len,
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd fd02 	bl	8000558 <__aeabi_f2d>
 8002b54:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002b58:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <main+0x7a4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fd fcfb 	bl	8000558 <__aeabi_f2d>
 8002b62:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <main+0x7a8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fd fcf4 	bl	8000558 <__aeabi_f2d>
 8002b70:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <main+0x7ac>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fd fced 	bl	8000558 <__aeabi_f2d>
 8002b7e:	e9c7 0100 	strd	r0, r1, [r7]
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <main+0x7b0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	e024      	b.n	8002bd4 <main+0x7dc>
 8002b8a:	bf00      	nop
 8002b8c:	f3af 8000 	nop.w
 8002b90:	1aa9cdba 	.word	0x1aa9cdba
 8002b94:	404ca5dc 	.word	0x404ca5dc
 8002b98:	2000222c 	.word	0x2000222c
 8002b9c:	20002004 	.word	0x20002004
 8002ba0:	20002218 	.word	0x20002218
 8002ba4:	2000221c 	.word	0x2000221c
 8002ba8:	20002220 	.word	0x20002220
 8002bac:	20002234 	.word	0x20002234
 8002bb0:	2000224c 	.word	0x2000224c
 8002bb4:	0800b57c 	.word	0x0800b57c
 8002bb8:	20002230 	.word	0x20002230
 8002bbc:	0800b614 	.word	0x0800b614
 8002bc0:	20002008 	.word	0x20002008
 8002bc4:	2000200c 	.word	0x2000200c
 8002bc8:	20002244 	.word	0x20002244
 8002bcc:	a226e211 	.word	0xa226e211
 8002bd0:	3f91df46 	.word	0x3f91df46
 8002bd4:	f7fd fcc0 	bl	8000558 <__aeabi_f2d>
 8002bd8:	4682      	mov	sl, r0
 8002bda:	468b      	mov	fp, r1
									q0, q1, q2, q3, Imu.roll, Imu.pitch,
 8002bdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
							sprintf((char*) buff + len,
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fd fcb9 	bl	8000558 <__aeabi_f2d>
 8002be6:	4680      	mov	r8, r0
 8002be8:	4689      	mov	r9, r1
									q0, q1, q2, q3, Imu.roll, Imu.pitch,
 8002bea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
							sprintf((char*) buff + len,
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd fcb2 	bl	8000558 <__aeabi_f2d>
 8002bf4:	4604      	mov	r4, r0
 8002bf6:	460d      	mov	r5, r1
									Imu.yaw);
 8002bf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
							sprintf((char*) buff + len,
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd fcab 	bl	8000558 <__aeabi_f2d>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	e9cd 232c 	strd	r2, r3, [sp, #176]	; 0xb0
 8002c0a:	e9cd 452a 	strd	r4, r5, [sp, #168]	; 0xa8
 8002c0e:	e9cd 8928 	strd	r8, r9, [sp, #160]	; 0xa0
 8002c12:	e9cd ab26 	strd	sl, fp, [sp, #152]	; 0x98
 8002c16:	ed97 7b00 	vldr	d7, [r7]
 8002c1a:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 8002c1e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c22:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8002c26:	ed97 7b04 	vldr	d7, [r7, #16]
 8002c2a:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8002c2e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002c32:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8002c36:	ed97 7b08 	vldr	d7, [r7, #32]
 8002c3a:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8002c3e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002c42:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8002c46:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002c4a:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8002c4e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002c52:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8002c56:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002c5a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002c5e:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002c62:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002c66:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002c6a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002c6e:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002c72:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002c76:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002c7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002c7e:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8002c82:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002c86:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8002c8a:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002c8e:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002c92:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002c96:	9604      	str	r6, [sp, #16]
 8002c98:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8002c9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002ca0:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8002ca4:	ed8d 7b00 	vstr	d7, [sp]
 8002ca8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002cac:	4926      	ldr	r1, [pc, #152]	; (8002d48 <main+0x950>)
 8002cae:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002cb2:	f005 fa7d 	bl	80081b0 <siprintf>
 8002cb6:	4603      	mov	r3, r0
					len +=
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
				}
				HAL_UART_Transmit(&huart2, (uint8_t*) buff,
						strlen((char*) buff),
 8002cc4:	4821      	ldr	r0, [pc, #132]	; (8002d4c <main+0x954>)
 8002cc6:	f7fd fa8b 	bl	80001e0 <strlen>
 8002cca:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) buff,
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cd2:	491e      	ldr	r1, [pc, #120]	; (8002d4c <main+0x954>)
 8002cd4:	481e      	ldr	r0, [pc, #120]	; (8002d50 <main+0x958>)
 8002cd6:	f004 fb06 	bl	80072e6 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
			}

		}

		HAL_Delay(sampleDelay);
 8002cda:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <main+0x95c>)
 8002cdc:	edd3 7a00 	vldr	s15, [r3]
 8002ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ce4:	ee17 0a90 	vmov	r0, s15
 8002ce8:	f001 f882 	bl	8003df0 <HAL_Delay>

		loop_cnt++;
 8002cec:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <main+0x960>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	4a19      	ldr	r2, [pc, #100]	; (8002d58 <main+0x960>)
 8002cf4:	6013      	str	r3, [r2, #0]
		loop_cnt %= print_flag;
 8002cf6:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <main+0x960>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <main+0x964>)
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d02:	fb02 f201 	mul.w	r2, r2, r1
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	4a13      	ldr	r2, [pc, #76]	; (8002d58 <main+0x960>)
 8002d0a:	6013      	str	r3, [r2, #0]
		/* millisecond timer */
		t2 = HAL_GetTick();
 8002d0c:	f001 f864 	bl	8003dd8 <HAL_GetTick>
 8002d10:	4603      	mov	r3, r0
 8002d12:	4a13      	ldr	r2, [pc, #76]	; (8002d60 <main+0x968>)
 8002d14:	6013      	str	r3, [r2, #0]
		while_t = t2 - t1;
 8002d16:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <main+0x968>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <main+0x96c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	ee07 3a90 	vmov	s15, r3
 8002d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <main+0x970>)
 8002d2a:	edc3 7a00 	vstr	s15, [r3]
		/* microsecond timer */
		us_t = __HAL_TIM_GET_COUNTER(&htim5) - us_t;
 8002d2e:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <main+0x974>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d34:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <main+0x978>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	4a0d      	ldr	r2, [pc, #52]	; (8002d70 <main+0x978>)
 8002d3c:	6013      	str	r3, [r2, #0]
		us_t_prev = us_t;
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <main+0x978>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a0c      	ldr	r2, [pc, #48]	; (8002d74 <main+0x97c>)
 8002d44:	6013      	str	r3, [r2, #0]
		us_t = __HAL_TIM_GET_COUNTER(&htim5);
 8002d46:	e411      	b.n	800256c <main+0x174>
 8002d48:	0800b6a4 	.word	0x0800b6a4
 8002d4c:	2000224c 	.word	0x2000224c
 8002d50:	20004494 	.word	0x20004494
 8002d54:	20002224 	.word	0x20002224
 8002d58:	20002234 	.word	0x20002234
 8002d5c:	20002018 	.word	0x20002018
 8002d60:	2000424c 	.word	0x2000424c
 8002d64:	200043a0 	.word	0x200043a0
 8002d68:	20002008 	.word	0x20002008
 8002d6c:	20004250 	.word	0x20004250
 8002d70:	20002228 	.word	0x20002228
 8002d74:	2000200c 	.word	0x2000200c

08002d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b094      	sub	sp, #80	; 0x50
 8002d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d7e:	f107 0320 	add.w	r3, r7, #32
 8002d82:	2230      	movs	r2, #48	; 0x30
 8002d84:	2100      	movs	r1, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f004 fda0 	bl	80078cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d8c:	f107 030c 	add.w	r3, r7, #12
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	4b28      	ldr	r3, [pc, #160]	; (8002e44 <SystemClock_Config+0xcc>)
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	4a27      	ldr	r2, [pc, #156]	; (8002e44 <SystemClock_Config+0xcc>)
 8002da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002daa:	6413      	str	r3, [r2, #64]	; 0x40
 8002dac:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <SystemClock_Config+0xcc>)
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002db8:	2300      	movs	r3, #0
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	4b22      	ldr	r3, [pc, #136]	; (8002e48 <SystemClock_Config+0xd0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002dc4:	4a20      	ldr	r2, [pc, #128]	; (8002e48 <SystemClock_Config+0xd0>)
 8002dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <SystemClock_Config+0xd0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002de0:	2310      	movs	r3, #16
 8002de2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002de4:	2302      	movs	r3, #2
 8002de6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002de8:	2300      	movs	r3, #0
 8002dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002dec:	2308      	movs	r3, #8
 8002dee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002df0:	2354      	movs	r3, #84	; 0x54
 8002df2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002df4:	2302      	movs	r3, #2
 8002df6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002df8:	2307      	movs	r3, #7
 8002dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dfc:	f107 0320 	add.w	r3, r7, #32
 8002e00:	4618      	mov	r0, r3
 8002e02:	f002 fa39 	bl	8005278 <HAL_RCC_OscConfig>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002e0c:	f000 fbc2 	bl	8003594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e10:	230f      	movs	r3, #15
 8002e12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e14:	2302      	movs	r3, #2
 8002e16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e26:	f107 030c 	add.w	r3, r7, #12
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f002 fc9b 	bl	8005768 <HAL_RCC_ClockConfig>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002e38:	f000 fbac 	bl	8003594 <Error_Handler>
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	3750      	adds	r7, #80	; 0x50
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40007000 	.word	0x40007000

08002e4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e52:	463b      	mov	r3, r7
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002e5e:	4b59      	ldr	r3, [pc, #356]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002e60:	4a59      	ldr	r2, [pc, #356]	; (8002fc8 <MX_ADC1_Init+0x17c>)
 8002e62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002e64:	4b57      	ldr	r3, [pc, #348]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002e66:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e6c:	4b55      	ldr	r3, [pc, #340]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002e72:	4b54      	ldr	r3, [pc, #336]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e78:	4b52      	ldr	r3, [pc, #328]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e7e:	4b51      	ldr	r3, [pc, #324]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e86:	4b4f      	ldr	r3, [pc, #316]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e8c:	4b4d      	ldr	r3, [pc, #308]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002e8e:	4a4f      	ldr	r2, [pc, #316]	; (8002fcc <MX_ADC1_Init+0x180>)
 8002e90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e92:	4b4c      	ldr	r3, [pc, #304]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8002e98:	4b4a      	ldr	r3, [pc, #296]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002e9a:	2209      	movs	r2, #9
 8002e9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002e9e:	4b49      	ldr	r3, [pc, #292]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ea6:	4b47      	ldr	r3, [pc, #284]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002eac:	4845      	ldr	r0, [pc, #276]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002eae:	f000 ffc3 	bl	8003e38 <HAL_ADC_Init>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002eb8:	f000 fb6c 	bl	8003594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ec8:	463b      	mov	r3, r7
 8002eca:	4619      	mov	r1, r3
 8002ecc:	483d      	ldr	r0, [pc, #244]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002ece:	f001 f8fb 	bl	80040c8 <HAL_ADC_ConfigChannel>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002ed8:	f000 fb5c 	bl	8003594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002edc:	2304      	movs	r3, #4
 8002ede:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ee4:	463b      	mov	r3, r7
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4836      	ldr	r0, [pc, #216]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002eea:	f001 f8ed 	bl	80040c8 <HAL_ADC_ConfigChannel>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002ef4:	f000 fb4e 	bl	8003594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002ef8:	2309      	movs	r3, #9
 8002efa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002efc:	2303      	movs	r3, #3
 8002efe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f00:	463b      	mov	r3, r7
 8002f02:	4619      	mov	r1, r3
 8002f04:	482f      	ldr	r0, [pc, #188]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002f06:	f001 f8df 	bl	80040c8 <HAL_ADC_ConfigChannel>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002f10:	f000 fb40 	bl	8003594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002f14:	230a      	movs	r3, #10
 8002f16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002f18:	2304      	movs	r3, #4
 8002f1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f1c:	463b      	mov	r3, r7
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4828      	ldr	r0, [pc, #160]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002f22:	f001 f8d1 	bl	80040c8 <HAL_ADC_ConfigChannel>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002f2c:	f000 fb32 	bl	8003594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002f30:	230b      	movs	r3, #11
 8002f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002f34:	2305      	movs	r3, #5
 8002f36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f38:	463b      	mov	r3, r7
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4821      	ldr	r0, [pc, #132]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002f3e:	f001 f8c3 	bl	80040c8 <HAL_ADC_ConfigChannel>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002f48:	f000 fb24 	bl	8003594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002f4c:	230c      	movs	r3, #12
 8002f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002f50:	2306      	movs	r3, #6
 8002f52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f54:	463b      	mov	r3, r7
 8002f56:	4619      	mov	r1, r3
 8002f58:	481a      	ldr	r0, [pc, #104]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002f5a:	f001 f8b5 	bl	80040c8 <HAL_ADC_ConfigChannel>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002f64:	f000 fb16 	bl	8003594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002f68:	230d      	movs	r3, #13
 8002f6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f70:	463b      	mov	r3, r7
 8002f72:	4619      	mov	r1, r3
 8002f74:	4813      	ldr	r0, [pc, #76]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002f76:	f001 f8a7 	bl	80040c8 <HAL_ADC_ConfigChannel>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002f80:	f000 fb08 	bl	8003594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002f84:	230e      	movs	r3, #14
 8002f86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002f88:	2308      	movs	r3, #8
 8002f8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f8c:	463b      	mov	r3, r7
 8002f8e:	4619      	mov	r1, r3
 8002f90:	480c      	ldr	r0, [pc, #48]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002f92:	f001 f899 	bl	80040c8 <HAL_ADC_ConfigChannel>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002f9c:	f000 fafa 	bl	8003594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002fa0:	230f      	movs	r3, #15
 8002fa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002fa4:	2309      	movs	r3, #9
 8002fa6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fa8:	463b      	mov	r3, r7
 8002faa:	4619      	mov	r1, r3
 8002fac:	4805      	ldr	r0, [pc, #20]	; (8002fc4 <MX_ADC1_Init+0x178>)
 8002fae:	f001 f88b 	bl	80040c8 <HAL_ADC_ConfigChannel>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002fb8:	f000 faec 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002fbc:	bf00      	nop
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	200042f4 	.word	0x200042f4
 8002fc8:	40012000 	.word	0x40012000
 8002fcc:	0f000001 	.word	0x0f000001

08002fd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002fd4:	4b17      	ldr	r3, [pc, #92]	; (8003034 <MX_SPI1_Init+0x64>)
 8002fd6:	4a18      	ldr	r2, [pc, #96]	; (8003038 <MX_SPI1_Init+0x68>)
 8002fd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <MX_SPI1_Init+0x64>)
 8002fdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fe0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002fe2:	4b14      	ldr	r3, [pc, #80]	; (8003034 <MX_SPI1_Init+0x64>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fe8:	4b12      	ldr	r3, [pc, #72]	; (8003034 <MX_SPI1_Init+0x64>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <MX_SPI1_Init+0x64>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <MX_SPI1_Init+0x64>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ffa:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <MX_SPI1_Init+0x64>)
 8002ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003000:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003002:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <MX_SPI1_Init+0x64>)
 8003004:	2218      	movs	r2, #24
 8003006:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <MX_SPI1_Init+0x64>)
 800300a:	2200      	movs	r2, #0
 800300c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <MX_SPI1_Init+0x64>)
 8003010:	2200      	movs	r2, #0
 8003012:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003014:	4b07      	ldr	r3, [pc, #28]	; (8003034 <MX_SPI1_Init+0x64>)
 8003016:	2200      	movs	r2, #0
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <MX_SPI1_Init+0x64>)
 800301c:	220a      	movs	r2, #10
 800301e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003020:	4804      	ldr	r0, [pc, #16]	; (8003034 <MX_SPI1_Init+0x64>)
 8003022:	f002 fd9d 	bl	8005b60 <HAL_SPI_Init>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800302c:	f000 fab2 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	200043ec 	.word	0x200043ec
 8003038:	40013000 	.word	0x40013000

0800303c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b092      	sub	sp, #72	; 0x48
 8003040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003042:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800304c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
 800305c:	615a      	str	r2, [r3, #20]
 800305e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003060:	1d3b      	adds	r3, r7, #4
 8003062:	2220      	movs	r2, #32
 8003064:	2100      	movs	r1, #0
 8003066:	4618      	mov	r0, r3
 8003068:	f004 fc30 	bl	80078cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800306c:	4b3f      	ldr	r3, [pc, #252]	; (800316c <MX_TIM1_Init+0x130>)
 800306e:	4a40      	ldr	r2, [pc, #256]	; (8003170 <MX_TIM1_Init+0x134>)
 8003070:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 8003072:	4b3e      	ldr	r3, [pc, #248]	; (800316c <MX_TIM1_Init+0x130>)
 8003074:	2202      	movs	r2, #2
 8003076:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003078:	4b3c      	ldr	r3, [pc, #240]	; (800316c <MX_TIM1_Init+0x130>)
 800307a:	2220      	movs	r2, #32
 800307c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2047;
 800307e:	4b3b      	ldr	r3, [pc, #236]	; (800316c <MX_TIM1_Init+0x130>)
 8003080:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003084:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003086:	4b39      	ldr	r3, [pc, #228]	; (800316c <MX_TIM1_Init+0x130>)
 8003088:	2200      	movs	r2, #0
 800308a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800308c:	4b37      	ldr	r3, [pc, #220]	; (800316c <MX_TIM1_Init+0x130>)
 800308e:	2200      	movs	r2, #0
 8003090:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003092:	4b36      	ldr	r3, [pc, #216]	; (800316c <MX_TIM1_Init+0x130>)
 8003094:	2200      	movs	r2, #0
 8003096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003098:	4834      	ldr	r0, [pc, #208]	; (800316c <MX_TIM1_Init+0x130>)
 800309a:	f003 fbc0 	bl	800681e <HAL_TIM_PWM_Init>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80030a4:	f000 fa76 	bl	8003594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030a8:	2300      	movs	r3, #0
 80030aa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030b4:	4619      	mov	r1, r3
 80030b6:	482d      	ldr	r0, [pc, #180]	; (800316c <MX_TIM1_Init+0x130>)
 80030b8:	f004 f800 	bl	80070bc <HAL_TIMEx_MasterConfigSynchronization>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80030c2:	f000 fa67 	bl	8003594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030c6:	2360      	movs	r3, #96	; 0x60
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030ce:	2300      	movs	r3, #0
 80030d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80030d2:	2300      	movs	r3, #0
 80030d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030d6:	2300      	movs	r3, #0
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030da:	2300      	movs	r3, #0
 80030dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030de:	2300      	movs	r3, #0
 80030e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030e6:	2200      	movs	r2, #0
 80030e8:	4619      	mov	r1, r3
 80030ea:	4820      	ldr	r0, [pc, #128]	; (800316c <MX_TIM1_Init+0x130>)
 80030ec:	f003 fcf2 	bl	8006ad4 <HAL_TIM_PWM_ConfigChannel>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80030f6:	f000 fa4d 	bl	8003594 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030fe:	2204      	movs	r2, #4
 8003100:	4619      	mov	r1, r3
 8003102:	481a      	ldr	r0, [pc, #104]	; (800316c <MX_TIM1_Init+0x130>)
 8003104:	f003 fce6 	bl	8006ad4 <HAL_TIM_PWM_ConfigChannel>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800310e:	f000 fa41 	bl	8003594 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003116:	2208      	movs	r2, #8
 8003118:	4619      	mov	r1, r3
 800311a:	4814      	ldr	r0, [pc, #80]	; (800316c <MX_TIM1_Init+0x130>)
 800311c:	f003 fcda 	bl	8006ad4 <HAL_TIM_PWM_ConfigChannel>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8003126:	f000 fa35 	bl	8003594 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800312a:	2300      	movs	r3, #0
 800312c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800312e:	2300      	movs	r3, #0
 8003130:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800313e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003142:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003144:	2300      	movs	r3, #0
 8003146:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003148:	1d3b      	adds	r3, r7, #4
 800314a:	4619      	mov	r1, r3
 800314c:	4807      	ldr	r0, [pc, #28]	; (800316c <MX_TIM1_Init+0x130>)
 800314e:	f004 f823 	bl	8007198 <HAL_TIMEx_ConfigBreakDeadTime>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8003158:	f000 fa1c 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800315c:	4803      	ldr	r0, [pc, #12]	; (800316c <MX_TIM1_Init+0x130>)
 800315e:	f000 fbad 	bl	80038bc <HAL_TIM_MspPostInit>

}
 8003162:	bf00      	nop
 8003164:	3748      	adds	r7, #72	; 0x48
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	200043a4 	.word	0x200043a4
 8003170:	40010000 	.word	0x40010000

08003174 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	; 0x28
 8003178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800317a:	f107 0320 	add.w	r3, r7, #32
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003184:	1d3b      	adds	r3, r7, #4
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	609a      	str	r2, [r3, #8]
 800318e:	60da      	str	r2, [r3, #12]
 8003190:	611a      	str	r2, [r3, #16]
 8003192:	615a      	str	r2, [r3, #20]
 8003194:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003196:	4b2e      	ldr	r3, [pc, #184]	; (8003250 <MX_TIM2_Init+0xdc>)
 8003198:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800319c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2100;
 800319e:	4b2c      	ldr	r3, [pc, #176]	; (8003250 <MX_TIM2_Init+0xdc>)
 80031a0:	f640 0234 	movw	r2, #2100	; 0x834
 80031a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80031a6:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <MX_TIM2_Init+0xdc>)
 80031a8:	2220      	movs	r2, #32
 80031aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80031ac:	4b28      	ldr	r3, [pc, #160]	; (8003250 <MX_TIM2_Init+0xdc>)
 80031ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031b4:	4b26      	ldr	r3, [pc, #152]	; (8003250 <MX_TIM2_Init+0xdc>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ba:	4b25      	ldr	r3, [pc, #148]	; (8003250 <MX_TIM2_Init+0xdc>)
 80031bc:	2200      	movs	r2, #0
 80031be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80031c0:	4823      	ldr	r0, [pc, #140]	; (8003250 <MX_TIM2_Init+0xdc>)
 80031c2:	f003 fb2c 	bl	800681e <HAL_TIM_PWM_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80031cc:	f000 f9e2 	bl	8003594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031d0:	2300      	movs	r3, #0
 80031d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031d8:	f107 0320 	add.w	r3, r7, #32
 80031dc:	4619      	mov	r1, r3
 80031de:	481c      	ldr	r0, [pc, #112]	; (8003250 <MX_TIM2_Init+0xdc>)
 80031e0:	f003 ff6c 	bl	80070bc <HAL_TIMEx_MasterConfigSynchronization>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80031ea:	f000 f9d3 	bl	8003594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031ee:	2360      	movs	r3, #96	; 0x60
 80031f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	2200      	movs	r2, #0
 8003202:	4619      	mov	r1, r3
 8003204:	4812      	ldr	r0, [pc, #72]	; (8003250 <MX_TIM2_Init+0xdc>)
 8003206:	f003 fc65 	bl	8006ad4 <HAL_TIM_PWM_ConfigChannel>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003210:	f000 f9c0 	bl	8003594 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	2204      	movs	r2, #4
 8003218:	4619      	mov	r1, r3
 800321a:	480d      	ldr	r0, [pc, #52]	; (8003250 <MX_TIM2_Init+0xdc>)
 800321c:	f003 fc5a 	bl	8006ad4 <HAL_TIM_PWM_ConfigChannel>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8003226:	f000 f9b5 	bl	8003594 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800322a:	1d3b      	adds	r3, r7, #4
 800322c:	2208      	movs	r2, #8
 800322e:	4619      	mov	r1, r3
 8003230:	4807      	ldr	r0, [pc, #28]	; (8003250 <MX_TIM2_Init+0xdc>)
 8003232:	f003 fc4f 	bl	8006ad4 <HAL_TIM_PWM_ConfigChannel>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 800323c:	f000 f9aa 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003240:	4803      	ldr	r0, [pc, #12]	; (8003250 <MX_TIM2_Init+0xdc>)
 8003242:	f000 fb3b 	bl	80038bc <HAL_TIM_MspPostInit>

}
 8003246:	bf00      	nop
 8003248:	3728      	adds	r7, #40	; 0x28
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20004448 	.word	0x20004448

08003254 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	; 0x28
 8003258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800325a:	f107 0320 	add.w	r3, r7, #32
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003264:	1d3b      	adds	r3, r7, #4
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	605a      	str	r2, [r3, #4]
 800326c:	609a      	str	r2, [r3, #8]
 800326e:	60da      	str	r2, [r3, #12]
 8003270:	611a      	str	r2, [r3, #16]
 8003272:	615a      	str	r2, [r3, #20]
 8003274:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003276:	4b2d      	ldr	r3, [pc, #180]	; (800332c <MX_TIM3_Init+0xd8>)
 8003278:	4a2d      	ldr	r2, [pc, #180]	; (8003330 <MX_TIM3_Init+0xdc>)
 800327a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2100;
 800327c:	4b2b      	ldr	r3, [pc, #172]	; (800332c <MX_TIM3_Init+0xd8>)
 800327e:	f640 0234 	movw	r2, #2100	; 0x834
 8003282:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003284:	4b29      	ldr	r3, [pc, #164]	; (800332c <MX_TIM3_Init+0xd8>)
 8003286:	2220      	movs	r2, #32
 8003288:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800328a:	4b28      	ldr	r3, [pc, #160]	; (800332c <MX_TIM3_Init+0xd8>)
 800328c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003290:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003292:	4b26      	ldr	r3, [pc, #152]	; (800332c <MX_TIM3_Init+0xd8>)
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003298:	4b24      	ldr	r3, [pc, #144]	; (800332c <MX_TIM3_Init+0xd8>)
 800329a:	2200      	movs	r2, #0
 800329c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800329e:	4823      	ldr	r0, [pc, #140]	; (800332c <MX_TIM3_Init+0xd8>)
 80032a0:	f003 fabd 	bl	800681e <HAL_TIM_PWM_Init>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80032aa:	f000 f973 	bl	8003594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ae:	2300      	movs	r3, #0
 80032b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032b6:	f107 0320 	add.w	r3, r7, #32
 80032ba:	4619      	mov	r1, r3
 80032bc:	481b      	ldr	r0, [pc, #108]	; (800332c <MX_TIM3_Init+0xd8>)
 80032be:	f003 fefd 	bl	80070bc <HAL_TIMEx_MasterConfigSynchronization>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80032c8:	f000 f964 	bl	8003594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032cc:	2360      	movs	r3, #96	; 0x60
 80032ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032d4:	2300      	movs	r3, #0
 80032d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032dc:	1d3b      	adds	r3, r7, #4
 80032de:	2200      	movs	r2, #0
 80032e0:	4619      	mov	r1, r3
 80032e2:	4812      	ldr	r0, [pc, #72]	; (800332c <MX_TIM3_Init+0xd8>)
 80032e4:	f003 fbf6 	bl	8006ad4 <HAL_TIM_PWM_ConfigChannel>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80032ee:	f000 f951 	bl	8003594 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032f2:	1d3b      	adds	r3, r7, #4
 80032f4:	2204      	movs	r2, #4
 80032f6:	4619      	mov	r1, r3
 80032f8:	480c      	ldr	r0, [pc, #48]	; (800332c <MX_TIM3_Init+0xd8>)
 80032fa:	f003 fbeb 	bl	8006ad4 <HAL_TIM_PWM_ConfigChannel>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003304:	f000 f946 	bl	8003594 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	2208      	movs	r2, #8
 800330c:	4619      	mov	r1, r3
 800330e:	4807      	ldr	r0, [pc, #28]	; (800332c <MX_TIM3_Init+0xd8>)
 8003310:	f003 fbe0 	bl	8006ad4 <HAL_TIM_PWM_ConfigChannel>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 800331a:	f000 f93b 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800331e:	4803      	ldr	r0, [pc, #12]	; (800332c <MX_TIM3_Init+0xd8>)
 8003320:	f000 facc 	bl	80038bc <HAL_TIM_MspPostInit>

}
 8003324:	bf00      	nop
 8003326:	3728      	adds	r7, #40	; 0x28
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20004298 	.word	0x20004298
 8003330:	40000400 	.word	0x40000400

08003334 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	; 0x28
 8003338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800333a:	f107 0320 	add.w	r3, r7, #32
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003344:	1d3b      	adds	r3, r7, #4
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	605a      	str	r2, [r3, #4]
 800334c:	609a      	str	r2, [r3, #8]
 800334e:	60da      	str	r2, [r3, #12]
 8003350:	611a      	str	r2, [r3, #16]
 8003352:	615a      	str	r2, [r3, #20]
 8003354:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <MX_TIM5_Init+0xa4>)
 8003358:	4a20      	ldr	r2, [pc, #128]	; (80033dc <MX_TIM5_Init+0xa8>)
 800335a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84;
 800335c:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <MX_TIM5_Init+0xa4>)
 800335e:	2254      	movs	r2, #84	; 0x54
 8003360:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003362:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <MX_TIM5_Init+0xa4>)
 8003364:	2200      	movs	r2, #0
 8003366:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999999;
 8003368:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <MX_TIM5_Init+0xa4>)
 800336a:	4a1d      	ldr	r2, [pc, #116]	; (80033e0 <MX_TIM5_Init+0xac>)
 800336c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800336e:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <MX_TIM5_Init+0xa4>)
 8003370:	2200      	movs	r2, #0
 8003372:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003374:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <MX_TIM5_Init+0xa4>)
 8003376:	2200      	movs	r2, #0
 8003378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 800337a:	4817      	ldr	r0, [pc, #92]	; (80033d8 <MX_TIM5_Init+0xa4>)
 800337c:	f003 fa00 	bl	8006780 <HAL_TIM_OC_Init>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8003386:	f000 f905 	bl	8003594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800338a:	2300      	movs	r3, #0
 800338c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003392:	f107 0320 	add.w	r3, r7, #32
 8003396:	4619      	mov	r1, r3
 8003398:	480f      	ldr	r0, [pc, #60]	; (80033d8 <MX_TIM5_Init+0xa4>)
 800339a:	f003 fe8f 	bl	80070bc <HAL_TIMEx_MasterConfigSynchronization>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80033a4:	f000 f8f6 	bl	8003594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80033a8:	2300      	movs	r3, #0
 80033aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	220c      	movs	r2, #12
 80033bc:	4619      	mov	r1, r3
 80033be:	4806      	ldr	r0, [pc, #24]	; (80033d8 <MX_TIM5_Init+0xa4>)
 80033c0:	f003 fb2c 	bl	8006a1c <HAL_TIM_OC_ConfigChannel>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80033ca:	f000 f8e3 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80033ce:	bf00      	nop
 80033d0:	3728      	adds	r7, #40	; 0x28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20004250 	.word	0x20004250
 80033dc:	40000c00 	.word	0x40000c00
 80033e0:	000f423f 	.word	0x000f423f

080033e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033e8:	4b11      	ldr	r3, [pc, #68]	; (8003430 <MX_USART2_UART_Init+0x4c>)
 80033ea:	4a12      	ldr	r2, [pc, #72]	; (8003434 <MX_USART2_UART_Init+0x50>)
 80033ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033ee:	4b10      	ldr	r3, [pc, #64]	; (8003430 <MX_USART2_UART_Init+0x4c>)
 80033f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033f6:	4b0e      	ldr	r3, [pc, #56]	; (8003430 <MX_USART2_UART_Init+0x4c>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <MX_USART2_UART_Init+0x4c>)
 80033fe:	2200      	movs	r2, #0
 8003400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003402:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <MX_USART2_UART_Init+0x4c>)
 8003404:	2200      	movs	r2, #0
 8003406:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <MX_USART2_UART_Init+0x4c>)
 800340a:	220c      	movs	r2, #12
 800340c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <MX_USART2_UART_Init+0x4c>)
 8003410:	2200      	movs	r2, #0
 8003412:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <MX_USART2_UART_Init+0x4c>)
 8003416:	2200      	movs	r2, #0
 8003418:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 800341a:	4805      	ldr	r0, [pc, #20]	; (8003430 <MX_USART2_UART_Init+0x4c>)
 800341c:	f003 ff0e 	bl	800723c <HAL_HalfDuplex_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003426:	f000 f8b5 	bl	8003594 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20004494 	.word	0x20004494
 8003434:	40004400 	.word	0x40004400

08003438 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	607b      	str	r3, [r7, #4]
 8003442:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <MX_DMA_Init+0x3c>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	4a0b      	ldr	r2, [pc, #44]	; (8003474 <MX_DMA_Init+0x3c>)
 8003448:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800344c:	6313      	str	r3, [r2, #48]	; 0x30
 800344e:	4b09      	ldr	r3, [pc, #36]	; (8003474 <MX_DMA_Init+0x3c>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003456:	607b      	str	r3, [r7, #4]
 8003458:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800345a:	2200      	movs	r2, #0
 800345c:	2100      	movs	r1, #0
 800345e:	2038      	movs	r0, #56	; 0x38
 8003460:	f001 f9ad 	bl	80047be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003464:	2038      	movs	r0, #56	; 0x38
 8003466:	f001 f9c6 	bl	80047f6 <HAL_NVIC_EnableIRQ>

}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800

08003478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	; 0x28
 800347c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347e:	f107 0314 	add.w	r3, r7, #20
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	605a      	str	r2, [r3, #4]
 8003488:	609a      	str	r2, [r3, #8]
 800348a:	60da      	str	r2, [r3, #12]
 800348c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	4b35      	ldr	r3, [pc, #212]	; (8003568 <MX_GPIO_Init+0xf0>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4a34      	ldr	r2, [pc, #208]	; (8003568 <MX_GPIO_Init+0xf0>)
 8003498:	f043 0304 	orr.w	r3, r3, #4
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	4b32      	ldr	r3, [pc, #200]	; (8003568 <MX_GPIO_Init+0xf0>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	4b2e      	ldr	r3, [pc, #184]	; (8003568 <MX_GPIO_Init+0xf0>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	4a2d      	ldr	r2, [pc, #180]	; (8003568 <MX_GPIO_Init+0xf0>)
 80034b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ba:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <MX_GPIO_Init+0xf0>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	4b27      	ldr	r3, [pc, #156]	; (8003568 <MX_GPIO_Init+0xf0>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	4a26      	ldr	r2, [pc, #152]	; (8003568 <MX_GPIO_Init+0xf0>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	6313      	str	r3, [r2, #48]	; 0x30
 80034d6:	4b24      	ldr	r3, [pc, #144]	; (8003568 <MX_GPIO_Init+0xf0>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	4b20      	ldr	r3, [pc, #128]	; (8003568 <MX_GPIO_Init+0xf0>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	4a1f      	ldr	r2, [pc, #124]	; (8003568 <MX_GPIO_Init+0xf0>)
 80034ec:	f043 0302 	orr.w	r3, r3, #2
 80034f0:	6313      	str	r3, [r2, #48]	; 0x30
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <MX_GPIO_Init+0xf0>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	607b      	str	r3, [r7, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5
 80034fe:	2200      	movs	r2, #0
 8003500:	f242 0171 	movw	r1, #8305	; 0x2071
 8003504:	4819      	ldr	r0, [pc, #100]	; (800356c <MX_GPIO_Init+0xf4>)
 8003506:	f001 fe9d 	bl	8005244 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800350a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800350e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003510:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800351a:	f107 0314 	add.w	r3, r7, #20
 800351e:	4619      	mov	r1, r3
 8003520:	4813      	ldr	r0, [pc, #76]	; (8003570 <MX_GPIO_Init+0xf8>)
 8003522:	f001 fcf3 	bl	8004f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5
 8003526:	f242 0371 	movw	r3, #8305	; 0x2071
 800352a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800352c:	2301      	movs	r3, #1
 800352e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003534:	2300      	movs	r3, #0
 8003536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003538:	f107 0314 	add.w	r3, r7, #20
 800353c:	4619      	mov	r1, r3
 800353e:	480b      	ldr	r0, [pc, #44]	; (800356c <MX_GPIO_Init+0xf4>)
 8003540:	f001 fce4 	bl	8004f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003544:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003552:	f107 0314 	add.w	r3, r7, #20
 8003556:	4619      	mov	r1, r3
 8003558:	4804      	ldr	r0, [pc, #16]	; (800356c <MX_GPIO_Init+0xf4>)
 800355a:	f001 fcd7 	bl	8004f0c <HAL_GPIO_Init>

}
 800355e:	bf00      	nop
 8003560:	3728      	adds	r7, #40	; 0x28
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40023800 	.word	0x40023800
 800356c:	40020400 	.word	0x40020400
 8003570:	40020800 	.word	0x40020800

08003574 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	adcConvComplete = 1;
 800357c:	4b04      	ldr	r3, [pc, #16]	; (8003590 <HAL_ADC_ConvCpltCallback+0x1c>)
 800357e:	2201      	movs	r2, #1
 8003580:	701a      	strb	r2, [r3, #0]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	2000222d 	.word	0x2000222d

08003594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003598:	b672      	cpsid	i
}
 800359a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800359c:	e7fe      	b.n	800359c <Error_Handler+0x8>
	...

080035a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	4b10      	ldr	r3, [pc, #64]	; (80035ec <HAL_MspInit+0x4c>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	4a0f      	ldr	r2, [pc, #60]	; (80035ec <HAL_MspInit+0x4c>)
 80035b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b4:	6453      	str	r3, [r2, #68]	; 0x44
 80035b6:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <HAL_MspInit+0x4c>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035be:	607b      	str	r3, [r7, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	603b      	str	r3, [r7, #0]
 80035c6:	4b09      	ldr	r3, [pc, #36]	; (80035ec <HAL_MspInit+0x4c>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	4a08      	ldr	r2, [pc, #32]	; (80035ec <HAL_MspInit+0x4c>)
 80035cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d0:	6413      	str	r3, [r2, #64]	; 0x40
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_MspInit+0x4c>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	603b      	str	r3, [r7, #0]
 80035dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80035de:	2007      	movs	r0, #7
 80035e0:	f001 f8e2 	bl	80047a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40023800 	.word	0x40023800

080035f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08c      	sub	sp, #48	; 0x30
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f8:	f107 031c 	add.w	r3, r7, #28
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a49      	ldr	r2, [pc, #292]	; (8003734 <HAL_ADC_MspInit+0x144>)
 800360e:	4293      	cmp	r3, r2
 8003610:	f040 808c 	bne.w	800372c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003614:	2300      	movs	r3, #0
 8003616:	61bb      	str	r3, [r7, #24]
 8003618:	4b47      	ldr	r3, [pc, #284]	; (8003738 <HAL_ADC_MspInit+0x148>)
 800361a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361c:	4a46      	ldr	r2, [pc, #280]	; (8003738 <HAL_ADC_MspInit+0x148>)
 800361e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003622:	6453      	str	r3, [r2, #68]	; 0x44
 8003624:	4b44      	ldr	r3, [pc, #272]	; (8003738 <HAL_ADC_MspInit+0x148>)
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	4b40      	ldr	r3, [pc, #256]	; (8003738 <HAL_ADC_MspInit+0x148>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	4a3f      	ldr	r2, [pc, #252]	; (8003738 <HAL_ADC_MspInit+0x148>)
 800363a:	f043 0304 	orr.w	r3, r3, #4
 800363e:	6313      	str	r3, [r2, #48]	; 0x30
 8003640:	4b3d      	ldr	r3, [pc, #244]	; (8003738 <HAL_ADC_MspInit+0x148>)
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800364c:	2300      	movs	r3, #0
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	4b39      	ldr	r3, [pc, #228]	; (8003738 <HAL_ADC_MspInit+0x148>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	4a38      	ldr	r2, [pc, #224]	; (8003738 <HAL_ADC_MspInit+0x148>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6313      	str	r3, [r2, #48]	; 0x30
 800365c:	4b36      	ldr	r3, [pc, #216]	; (8003738 <HAL_ADC_MspInit+0x148>)
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	4b32      	ldr	r3, [pc, #200]	; (8003738 <HAL_ADC_MspInit+0x148>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	4a31      	ldr	r2, [pc, #196]	; (8003738 <HAL_ADC_MspInit+0x148>)
 8003672:	f043 0302 	orr.w	r3, r3, #2
 8003676:	6313      	str	r3, [r2, #48]	; 0x30
 8003678:	4b2f      	ldr	r3, [pc, #188]	; (8003738 <HAL_ADC_MspInit+0x148>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003684:	233f      	movs	r3, #63	; 0x3f
 8003686:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003688:	2303      	movs	r3, #3
 800368a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	2300      	movs	r3, #0
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003690:	f107 031c 	add.w	r3, r7, #28
 8003694:	4619      	mov	r1, r3
 8003696:	4829      	ldr	r0, [pc, #164]	; (800373c <HAL_ADC_MspInit+0x14c>)
 8003698:	f001 fc38 	bl	8004f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800369c:	2311      	movs	r3, #17
 800369e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036a0:	2303      	movs	r3, #3
 80036a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a8:	f107 031c 	add.w	r3, r7, #28
 80036ac:	4619      	mov	r1, r3
 80036ae:	4824      	ldr	r0, [pc, #144]	; (8003740 <HAL_ADC_MspInit+0x150>)
 80036b0:	f001 fc2c 	bl	8004f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80036b4:	2302      	movs	r3, #2
 80036b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036b8:	2303      	movs	r3, #3
 80036ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c0:	f107 031c 	add.w	r3, r7, #28
 80036c4:	4619      	mov	r1, r3
 80036c6:	481f      	ldr	r0, [pc, #124]	; (8003744 <HAL_ADC_MspInit+0x154>)
 80036c8:	f001 fc20 	bl	8004f0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80036cc:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <HAL_ADC_MspInit+0x158>)
 80036ce:	4a1f      	ldr	r2, [pc, #124]	; (800374c <HAL_ADC_MspInit+0x15c>)
 80036d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80036d2:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_ADC_MspInit+0x158>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_ADC_MspInit+0x158>)
 80036da:	2200      	movs	r2, #0
 80036dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80036de:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <HAL_ADC_MspInit+0x158>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80036e4:	4b18      	ldr	r3, [pc, #96]	; (8003748 <HAL_ADC_MspInit+0x158>)
 80036e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036ec:	4b16      	ldr	r3, [pc, #88]	; (8003748 <HAL_ADC_MspInit+0x158>)
 80036ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036f4:	4b14      	ldr	r3, [pc, #80]	; (8003748 <HAL_ADC_MspInit+0x158>)
 80036f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80036fc:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_ADC_MspInit+0x158>)
 80036fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003702:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003704:	4b10      	ldr	r3, [pc, #64]	; (8003748 <HAL_ADC_MspInit+0x158>)
 8003706:	2200      	movs	r2, #0
 8003708:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800370a:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <HAL_ADC_MspInit+0x158>)
 800370c:	2200      	movs	r2, #0
 800370e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003710:	480d      	ldr	r0, [pc, #52]	; (8003748 <HAL_ADC_MspInit+0x158>)
 8003712:	f001 f88b 	bl	800482c <HAL_DMA_Init>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800371c:	f7ff ff3a 	bl	8003594 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a09      	ldr	r2, [pc, #36]	; (8003748 <HAL_ADC_MspInit+0x158>)
 8003724:	639a      	str	r2, [r3, #56]	; 0x38
 8003726:	4a08      	ldr	r2, [pc, #32]	; (8003748 <HAL_ADC_MspInit+0x158>)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800372c:	bf00      	nop
 800372e:	3730      	adds	r7, #48	; 0x30
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40012000 	.word	0x40012000
 8003738:	40023800 	.word	0x40023800
 800373c:	40020800 	.word	0x40020800
 8003740:	40020000 	.word	0x40020000
 8003744:	40020400 	.word	0x40020400
 8003748:	20004340 	.word	0x20004340
 800374c:	40026410 	.word	0x40026410

08003750 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	; 0x28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003758:	f107 0314 	add.w	r3, r7, #20
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a19      	ldr	r2, [pc, #100]	; (80037d4 <HAL_SPI_MspInit+0x84>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d12b      	bne.n	80037ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	4b18      	ldr	r3, [pc, #96]	; (80037d8 <HAL_SPI_MspInit+0x88>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	4a17      	ldr	r2, [pc, #92]	; (80037d8 <HAL_SPI_MspInit+0x88>)
 800377c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003780:	6453      	str	r3, [r2, #68]	; 0x44
 8003782:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <HAL_SPI_MspInit+0x88>)
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800378a:	613b      	str	r3, [r7, #16]
 800378c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <HAL_SPI_MspInit+0x88>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	4a10      	ldr	r2, [pc, #64]	; (80037d8 <HAL_SPI_MspInit+0x88>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	6313      	str	r3, [r2, #48]	; 0x30
 800379e:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <HAL_SPI_MspInit+0x88>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80037aa:	23e0      	movs	r3, #224	; 0xe0
 80037ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ae:	2302      	movs	r3, #2
 80037b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b6:	2303      	movs	r3, #3
 80037b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037ba:	2305      	movs	r3, #5
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037be:	f107 0314 	add.w	r3, r7, #20
 80037c2:	4619      	mov	r1, r3
 80037c4:	4805      	ldr	r0, [pc, #20]	; (80037dc <HAL_SPI_MspInit+0x8c>)
 80037c6:	f001 fba1 	bl	8004f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80037ca:	bf00      	nop
 80037cc:	3728      	adds	r7, #40	; 0x28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40013000 	.word	0x40013000
 80037d8:	40023800 	.word	0x40023800
 80037dc:	40020000 	.word	0x40020000

080037e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1f      	ldr	r2, [pc, #124]	; (800386c <HAL_TIM_PWM_MspInit+0x8c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d10e      	bne.n	8003810 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	4b1e      	ldr	r3, [pc, #120]	; (8003870 <HAL_TIM_PWM_MspInit+0x90>)
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	4a1d      	ldr	r2, [pc, #116]	; (8003870 <HAL_TIM_PWM_MspInit+0x90>)
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	6453      	str	r3, [r2, #68]	; 0x44
 8003802:	4b1b      	ldr	r3, [pc, #108]	; (8003870 <HAL_TIM_PWM_MspInit+0x90>)
 8003804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800380e:	e026      	b.n	800385e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003818:	d10e      	bne.n	8003838 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800381a:	2300      	movs	r3, #0
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	4b14      	ldr	r3, [pc, #80]	; (8003870 <HAL_TIM_PWM_MspInit+0x90>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	4a13      	ldr	r2, [pc, #76]	; (8003870 <HAL_TIM_PWM_MspInit+0x90>)
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	6413      	str	r3, [r2, #64]	; 0x40
 800382a:	4b11      	ldr	r3, [pc, #68]	; (8003870 <HAL_TIM_PWM_MspInit+0x90>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	613b      	str	r3, [r7, #16]
 8003834:	693b      	ldr	r3, [r7, #16]
}
 8003836:	e012      	b.n	800385e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a0d      	ldr	r2, [pc, #52]	; (8003874 <HAL_TIM_PWM_MspInit+0x94>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d10d      	bne.n	800385e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <HAL_TIM_PWM_MspInit+0x90>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	4a09      	ldr	r2, [pc, #36]	; (8003870 <HAL_TIM_PWM_MspInit+0x90>)
 800384c:	f043 0302 	orr.w	r3, r3, #2
 8003850:	6413      	str	r3, [r2, #64]	; 0x40
 8003852:	4b07      	ldr	r3, [pc, #28]	; (8003870 <HAL_TIM_PWM_MspInit+0x90>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40010000 	.word	0x40010000
 8003870:	40023800 	.word	0x40023800
 8003874:	40000400 	.word	0x40000400

08003878 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a0b      	ldr	r2, [pc, #44]	; (80038b4 <HAL_TIM_OC_MspInit+0x3c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d10d      	bne.n	80038a6 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_TIM_OC_MspInit+0x40>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <HAL_TIM_OC_MspInit+0x40>)
 8003894:	f043 0308 	orr.w	r3, r3, #8
 8003898:	6413      	str	r3, [r2, #64]	; 0x40
 800389a:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <HAL_TIM_OC_MspInit+0x40>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40000c00 	.word	0x40000c00
 80038b8:	40023800 	.word	0x40023800

080038bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08c      	sub	sp, #48	; 0x30
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c4:	f107 031c 	add.w	r3, r7, #28
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	609a      	str	r2, [r3, #8]
 80038d0:	60da      	str	r2, [r3, #12]
 80038d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a47      	ldr	r2, [pc, #284]	; (80039f8 <HAL_TIM_MspPostInit+0x13c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d11f      	bne.n	800391e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	4b46      	ldr	r3, [pc, #280]	; (80039fc <HAL_TIM_MspPostInit+0x140>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	4a45      	ldr	r2, [pc, #276]	; (80039fc <HAL_TIM_MspPostInit+0x140>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	6313      	str	r3, [r2, #48]	; 0x30
 80038ee:	4b43      	ldr	r3, [pc, #268]	; (80039fc <HAL_TIM_MspPostInit+0x140>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80038fa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80038fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003900:	2302      	movs	r3, #2
 8003902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	2300      	movs	r3, #0
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003908:	2300      	movs	r3, #0
 800390a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800390c:	2301      	movs	r3, #1
 800390e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003910:	f107 031c 	add.w	r3, r7, #28
 8003914:	4619      	mov	r1, r3
 8003916:	483a      	ldr	r0, [pc, #232]	; (8003a00 <HAL_TIM_MspPostInit+0x144>)
 8003918:	f001 faf8 	bl	8004f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800391c:	e067      	b.n	80039ee <HAL_TIM_MspPostInit+0x132>
  else if(htim->Instance==TIM2)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003926:	d13e      	bne.n	80039a6 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	4b33      	ldr	r3, [pc, #204]	; (80039fc <HAL_TIM_MspPostInit+0x140>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	4a32      	ldr	r2, [pc, #200]	; (80039fc <HAL_TIM_MspPostInit+0x140>)
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	6313      	str	r3, [r2, #48]	; 0x30
 8003938:	4b30      	ldr	r3, [pc, #192]	; (80039fc <HAL_TIM_MspPostInit+0x140>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	4b2c      	ldr	r3, [pc, #176]	; (80039fc <HAL_TIM_MspPostInit+0x140>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	4a2b      	ldr	r2, [pc, #172]	; (80039fc <HAL_TIM_MspPostInit+0x140>)
 800394e:	f043 0302 	orr.w	r3, r3, #2
 8003952:	6313      	str	r3, [r2, #48]	; 0x30
 8003954:	4b29      	ldr	r3, [pc, #164]	; (80039fc <HAL_TIM_MspPostInit+0x140>)
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8003960:	f248 0302 	movw	r3, #32770	; 0x8002
 8003964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003966:	2302      	movs	r3, #2
 8003968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	2300      	movs	r3, #0
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396e:	2300      	movs	r3, #0
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003972:	2301      	movs	r3, #1
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003976:	f107 031c 	add.w	r3, r7, #28
 800397a:	4619      	mov	r1, r3
 800397c:	4820      	ldr	r0, [pc, #128]	; (8003a00 <HAL_TIM_MspPostInit+0x144>)
 800397e:	f001 fac5 	bl	8004f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003988:	2302      	movs	r3, #2
 800398a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003990:	2300      	movs	r3, #0
 8003992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003994:	2301      	movs	r3, #1
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003998:	f107 031c 	add.w	r3, r7, #28
 800399c:	4619      	mov	r1, r3
 800399e:	4819      	ldr	r0, [pc, #100]	; (8003a04 <HAL_TIM_MspPostInit+0x148>)
 80039a0:	f001 fab4 	bl	8004f0c <HAL_GPIO_Init>
}
 80039a4:	e023      	b.n	80039ee <HAL_TIM_MspPostInit+0x132>
  else if(htim->Instance==TIM3)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <HAL_TIM_MspPostInit+0x14c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d11e      	bne.n	80039ee <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	4b11      	ldr	r3, [pc, #68]	; (80039fc <HAL_TIM_MspPostInit+0x140>)
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	4a10      	ldr	r2, [pc, #64]	; (80039fc <HAL_TIM_MspPostInit+0x140>)
 80039ba:	f043 0304 	orr.w	r3, r3, #4
 80039be:	6313      	str	r3, [r2, #48]	; 0x30
 80039c0:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <HAL_TIM_MspPostInit+0x140>)
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80039cc:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80039d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d2:	2302      	movs	r3, #2
 80039d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039da:	2300      	movs	r3, #0
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039de:	2302      	movs	r3, #2
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039e2:	f107 031c 	add.w	r3, r7, #28
 80039e6:	4619      	mov	r1, r3
 80039e8:	4808      	ldr	r0, [pc, #32]	; (8003a0c <HAL_TIM_MspPostInit+0x150>)
 80039ea:	f001 fa8f 	bl	8004f0c <HAL_GPIO_Init>
}
 80039ee:	bf00      	nop
 80039f0:	3730      	adds	r7, #48	; 0x30
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40010000 	.word	0x40010000
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40020000 	.word	0x40020000
 8003a04:	40020400 	.word	0x40020400
 8003a08:	40000400 	.word	0x40000400
 8003a0c:	40020800 	.word	0x40020800

08003a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08a      	sub	sp, #40	; 0x28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a18:	f107 0314 	add.w	r3, r7, #20
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	60da      	str	r2, [r3, #12]
 8003a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a19      	ldr	r2, [pc, #100]	; (8003a94 <HAL_UART_MspInit+0x84>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d12b      	bne.n	8003a8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	4b18      	ldr	r3, [pc, #96]	; (8003a98 <HAL_UART_MspInit+0x88>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	4a17      	ldr	r2, [pc, #92]	; (8003a98 <HAL_UART_MspInit+0x88>)
 8003a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a40:	6413      	str	r3, [r2, #64]	; 0x40
 8003a42:	4b15      	ldr	r3, [pc, #84]	; (8003a98 <HAL_UART_MspInit+0x88>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <HAL_UART_MspInit+0x88>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	4a10      	ldr	r2, [pc, #64]	; (8003a98 <HAL_UART_MspInit+0x88>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5e:	4b0e      	ldr	r3, [pc, #56]	; (8003a98 <HAL_UART_MspInit+0x88>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a6a:	2304      	movs	r3, #4
 8003a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a6e:	2312      	movs	r3, #18
 8003a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a76:	2303      	movs	r3, #3
 8003a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a7a:	2307      	movs	r3, #7
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7e:	f107 0314 	add.w	r3, r7, #20
 8003a82:	4619      	mov	r1, r3
 8003a84:	4805      	ldr	r0, [pc, #20]	; (8003a9c <HAL_UART_MspInit+0x8c>)
 8003a86:	f001 fa41 	bl	8004f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a8a:	bf00      	nop
 8003a8c:	3728      	adds	r7, #40	; 0x28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40004400 	.word	0x40004400
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40020000 	.word	0x40020000

08003aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003aa4:	e7fe      	b.n	8003aa4 <NMI_Handler+0x4>

08003aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003aaa:	e7fe      	b.n	8003aaa <HardFault_Handler+0x4>

08003aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ab0:	e7fe      	b.n	8003ab0 <MemManage_Handler+0x4>

08003ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ab6:	e7fe      	b.n	8003ab6 <BusFault_Handler+0x4>

08003ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003abc:	e7fe      	b.n	8003abc <UsageFault_Handler+0x4>

08003abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ada:	b480      	push	{r7}
 8003adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aec:	f000 f960 	bl	8003db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003af0:	bf00      	nop
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003af8:	4802      	ldr	r0, [pc, #8]	; (8003b04 <DMA2_Stream0_IRQHandler+0x10>)
 8003afa:	f000 ff9d 	bl	8004a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003afe:	bf00      	nop
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20004340 	.word	0x20004340

08003b08 <_getpid>:
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	4618      	mov	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <_kill>:
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
 8003b22:	f003 fea9 	bl	8007878 <__errno>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2216      	movs	r2, #22
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <_exit>:
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff ffe7 	bl	8003b18 <_kill>
 8003b4a:	e7fe      	b.n	8003b4a <_exit+0x12>

08003b4c <_read>:
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	e00a      	b.n	8003b74 <_read+0x28>
 8003b5e:	f3af 8000 	nop.w
 8003b62:	4601      	mov	r1, r0
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	60ba      	str	r2, [r7, #8]
 8003b6a:	b2ca      	uxtb	r2, r1
 8003b6c:	701a      	strb	r2, [r3, #0]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	3301      	adds	r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	dbf0      	blt.n	8003b5e <_read+0x12>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <_write>:
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b086      	sub	sp, #24
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	e009      	b.n	8003bac <_write+0x26>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	60ba      	str	r2, [r7, #8]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f3af 8000 	nop.w
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	dbf1      	blt.n	8003b98 <_write+0x12>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <_close>:
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bca:	4618      	mov	r0, r3
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <_fstat>:
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	6039      	str	r1, [r7, #0]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003be6:	605a      	str	r2, [r3, #4]
 8003be8:	2300      	movs	r3, #0
 8003bea:	4618      	mov	r0, r3
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <_isatty>:
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	2301      	movs	r3, #1
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <_lseek>:
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003c30:	4a14      	ldr	r2, [pc, #80]	; (8003c84 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8003c32:	4b15      	ldr	r3, [pc, #84]	; (8003c88 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003c3c:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <_sbrk+0x64>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003c44:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <_sbrk+0x64>)
 8003c46:	4a12      	ldr	r2, [pc, #72]	; (8003c90 <_sbrk+0x68>)
 8003c48:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003c4a:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <_sbrk+0x64>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4413      	add	r3, r2
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d207      	bcs.n	8003c68 <_sbrk+0x40>
		errno = ENOMEM;
 8003c58:	f003 fe0e 	bl	8007878 <__errno>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	220c      	movs	r2, #12
 8003c60:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c66:	e009      	b.n	8003c7c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003c68:	4b08      	ldr	r3, [pc, #32]	; (8003c8c <_sbrk+0x64>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003c6e:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <_sbrk+0x64>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	4a05      	ldr	r2, [pc, #20]	; (8003c8c <_sbrk+0x64>)
 8003c78:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20018000 	.word	0x20018000
 8003c88:	00000400 	.word	0x00000400
 8003c8c:	20002238 	.word	0x20002238
 8003c90:	200044f8 	.word	0x200044f8

08003c94 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <SystemInit+0x20>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9e:	4a05      	ldr	r2, [pc, #20]	; (8003cb4 <SystemInit+0x20>)
 8003ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <Reset_Handler>:
 8003cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cf0 <LoopFillZerobss+0x12>
 8003cbc:	480d      	ldr	r0, [pc, #52]	; (8003cf4 <LoopFillZerobss+0x16>)
 8003cbe:	490e      	ldr	r1, [pc, #56]	; (8003cf8 <LoopFillZerobss+0x1a>)
 8003cc0:	4a0e      	ldr	r2, [pc, #56]	; (8003cfc <LoopFillZerobss+0x1e>)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e002      	b.n	8003ccc <LoopCopyDataInit>

08003cc6 <CopyDataInit>:
 8003cc6:	58d4      	ldr	r4, [r2, r3]
 8003cc8:	50c4      	str	r4, [r0, r3]
 8003cca:	3304      	adds	r3, #4

08003ccc <LoopCopyDataInit>:
 8003ccc:	18c4      	adds	r4, r0, r3
 8003cce:	428c      	cmp	r4, r1
 8003cd0:	d3f9      	bcc.n	8003cc6 <CopyDataInit>
 8003cd2:	4a0b      	ldr	r2, [pc, #44]	; (8003d00 <LoopFillZerobss+0x22>)
 8003cd4:	4c0b      	ldr	r4, [pc, #44]	; (8003d04 <LoopFillZerobss+0x26>)
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e001      	b.n	8003cde <LoopFillZerobss>

08003cda <FillZerobss>:
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	3204      	adds	r2, #4

08003cde <LoopFillZerobss>:
 8003cde:	42a2      	cmp	r2, r4
 8003ce0:	d3fb      	bcc.n	8003cda <FillZerobss>
 8003ce2:	f7ff ffd7 	bl	8003c94 <SystemInit>
 8003ce6:	f003 fdcd 	bl	8007884 <__libc_init_array>
 8003cea:	f7fe fb85 	bl	80023f8 <main>
 8003cee:	4770      	bx	lr
 8003cf0:	20018000 	.word	0x20018000
 8003cf4:	20000000 	.word	0x20000000
 8003cf8:	200021fc 	.word	0x200021fc
 8003cfc:	0800bcb8 	.word	0x0800bcb8
 8003d00:	200021fc 	.word	0x200021fc
 8003d04:	200044f4 	.word	0x200044f4

08003d08 <ADC_IRQHandler>:
 8003d08:	e7fe      	b.n	8003d08 <ADC_IRQHandler>
	...

08003d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d10:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <HAL_Init+0x40>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a0d      	ldr	r2, [pc, #52]	; (8003d4c <HAL_Init+0x40>)
 8003d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <HAL_Init+0x40>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a0a      	ldr	r2, [pc, #40]	; (8003d4c <HAL_Init+0x40>)
 8003d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d28:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <HAL_Init+0x40>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a07      	ldr	r2, [pc, #28]	; (8003d4c <HAL_Init+0x40>)
 8003d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d34:	2003      	movs	r0, #3
 8003d36:	f000 fd37 	bl	80047a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	f000 f808 	bl	8003d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d40:	f7ff fc2e 	bl	80035a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40023c00 	.word	0x40023c00

08003d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d58:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <HAL_InitTick+0x54>)
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <HAL_InitTick+0x58>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	4619      	mov	r1, r3
 8003d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fd4f 	bl	8004812 <HAL_SYSTICK_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e00e      	b.n	8003d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b0f      	cmp	r3, #15
 8003d82:	d80a      	bhi.n	8003d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d84:	2200      	movs	r2, #0
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d8c:	f000 fd17 	bl	80047be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d90:	4a06      	ldr	r2, [pc, #24]	; (8003dac <HAL_InitTick+0x5c>)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	e000      	b.n	8003d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	2000201c 	.word	0x2000201c
 8003da8:	20002024 	.word	0x20002024
 8003dac:	20002020 	.word	0x20002020

08003db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_IncTick+0x20>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	461a      	mov	r2, r3
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <HAL_IncTick+0x24>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	4a04      	ldr	r2, [pc, #16]	; (8003dd4 <HAL_IncTick+0x24>)
 8003dc2:	6013      	str	r3, [r2, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20002024 	.word	0x20002024
 8003dd4:	200044e0 	.word	0x200044e0

08003dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return uwTick;
 8003ddc:	4b03      	ldr	r3, [pc, #12]	; (8003dec <HAL_GetTick+0x14>)
 8003dde:	681b      	ldr	r3, [r3, #0]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	200044e0 	.word	0x200044e0

08003df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003df8:	f7ff ffee 	bl	8003dd8 <HAL_GetTick>
 8003dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e08:	d005      	beq.n	8003e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <HAL_Delay+0x44>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4413      	add	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e16:	bf00      	nop
 8003e18:	f7ff ffde 	bl	8003dd8 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d8f7      	bhi.n	8003e18 <HAL_Delay+0x28>
  {
  }
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20002024 	.word	0x20002024

08003e38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e033      	b.n	8003eb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d109      	bne.n	8003e6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff fbca 	bl	80035f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d118      	bne.n	8003ea8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e7e:	f023 0302 	bic.w	r3, r3, #2
 8003e82:	f043 0202 	orr.w	r2, r3, #2
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fa3e 	bl	800430c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f023 0303 	bic.w	r3, r3, #3
 8003e9e:	f043 0201 	orr.w	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ea6:	e001      	b.n	8003eac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d101      	bne.n	8003ede <HAL_ADC_Start_DMA+0x1e>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e0ce      	b.n	800407c <HAL_ADC_Start_DMA+0x1bc>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d018      	beq.n	8003f26 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f04:	4b5f      	ldr	r3, [pc, #380]	; (8004084 <HAL_ADC_Start_DMA+0x1c4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a5f      	ldr	r2, [pc, #380]	; (8004088 <HAL_ADC_Start_DMA+0x1c8>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	0c9a      	lsrs	r2, r3, #18
 8003f10:	4613      	mov	r3, r2
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	4413      	add	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003f18:	e002      	b.n	8003f20 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f9      	bne.n	8003f1a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f34:	d107      	bne.n	8003f46 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f44:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	f040 8086 	bne.w	8004062 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f5e:	f023 0301 	bic.w	r3, r3, #1
 8003f62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d007      	beq.n	8003f88 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f94:	d106      	bne.n	8003fa4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	f023 0206 	bic.w	r2, r3, #6
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	645a      	str	r2, [r3, #68]	; 0x44
 8003fa2:	e002      	b.n	8003faa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fb2:	4b36      	ldr	r3, [pc, #216]	; (800408c <HAL_ADC_Start_DMA+0x1cc>)
 8003fb4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	4a35      	ldr	r2, [pc, #212]	; (8004090 <HAL_ADC_Start_DMA+0x1d0>)
 8003fbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	4a34      	ldr	r2, [pc, #208]	; (8004094 <HAL_ADC_Start_DMA+0x1d4>)
 8003fc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	4a33      	ldr	r2, [pc, #204]	; (8004098 <HAL_ADC_Start_DMA+0x1d8>)
 8003fcc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003fd6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003fe6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	334c      	adds	r3, #76	; 0x4c
 8004002:	4619      	mov	r1, r3
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f000 fcbe 	bl	8004988 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10f      	bne.n	8004038 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d129      	bne.n	800407a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004034:	609a      	str	r2, [r3, #8]
 8004036:	e020      	b.n	800407a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a17      	ldr	r2, [pc, #92]	; (800409c <HAL_ADC_Start_DMA+0x1dc>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d11b      	bne.n	800407a <HAL_ADC_Start_DMA+0x1ba>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d114      	bne.n	800407a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	e00b      	b.n	800407a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f043 0210 	orr.w	r2, r3, #16
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	f043 0201 	orr.w	r2, r3, #1
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	2000201c 	.word	0x2000201c
 8004088:	431bde83 	.word	0x431bde83
 800408c:	40012300 	.word	0x40012300
 8004090:	08004505 	.word	0x08004505
 8004094:	080045bf 	.word	0x080045bf
 8004098:	080045db 	.word	0x080045db
 800409c:	40012000 	.word	0x40012000

080040a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x1c>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e105      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x228>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b09      	cmp	r3, #9
 80040f2:	d925      	bls.n	8004140 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68d9      	ldr	r1, [r3, #12]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	4613      	mov	r3, r2
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	4413      	add	r3, r2
 8004108:	3b1e      	subs	r3, #30
 800410a:	2207      	movs	r2, #7
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43da      	mvns	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	400a      	ands	r2, r1
 8004118:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68d9      	ldr	r1, [r3, #12]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	b29b      	uxth	r3, r3
 800412a:	4618      	mov	r0, r3
 800412c:	4603      	mov	r3, r0
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	4403      	add	r3, r0
 8004132:	3b1e      	subs	r3, #30
 8004134:	409a      	lsls	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	60da      	str	r2, [r3, #12]
 800413e:	e022      	b.n	8004186 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6919      	ldr	r1, [r3, #16]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	b29b      	uxth	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	4613      	mov	r3, r2
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	4413      	add	r3, r2
 8004154:	2207      	movs	r2, #7
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	43da      	mvns	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	400a      	ands	r2, r1
 8004162:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6919      	ldr	r1, [r3, #16]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	b29b      	uxth	r3, r3
 8004174:	4618      	mov	r0, r3
 8004176:	4603      	mov	r3, r0
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	4403      	add	r3, r0
 800417c:	409a      	lsls	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b06      	cmp	r3, #6
 800418c:	d824      	bhi.n	80041d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	3b05      	subs	r3, #5
 80041a0:	221f      	movs	r2, #31
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	43da      	mvns	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	400a      	ands	r2, r1
 80041ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	4618      	mov	r0, r3
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	3b05      	subs	r3, #5
 80041ca:	fa00 f203 	lsl.w	r2, r0, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	635a      	str	r2, [r3, #52]	; 0x34
 80041d6:	e04c      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b0c      	cmp	r3, #12
 80041de:	d824      	bhi.n	800422a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	4613      	mov	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	3b23      	subs	r3, #35	; 0x23
 80041f2:	221f      	movs	r2, #31
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	43da      	mvns	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	400a      	ands	r2, r1
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	b29b      	uxth	r3, r3
 800420e:	4618      	mov	r0, r3
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	3b23      	subs	r3, #35	; 0x23
 800421c:	fa00 f203 	lsl.w	r2, r0, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
 8004228:	e023      	b.n	8004272 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	3b41      	subs	r3, #65	; 0x41
 800423c:	221f      	movs	r2, #31
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	43da      	mvns	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	400a      	ands	r2, r1
 800424a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	b29b      	uxth	r3, r3
 8004258:	4618      	mov	r0, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	3b41      	subs	r3, #65	; 0x41
 8004266:	fa00 f203 	lsl.w	r2, r0, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004272:	4b22      	ldr	r3, [pc, #136]	; (80042fc <HAL_ADC_ConfigChannel+0x234>)
 8004274:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a21      	ldr	r2, [pc, #132]	; (8004300 <HAL_ADC_ConfigChannel+0x238>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d109      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x1cc>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b12      	cmp	r3, #18
 8004286:	d105      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a19      	ldr	r2, [pc, #100]	; (8004300 <HAL_ADC_ConfigChannel+0x238>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d123      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x21e>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d003      	beq.n	80042ae <HAL_ADC_ConfigChannel+0x1e6>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b11      	cmp	r3, #17
 80042ac:	d11b      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b10      	cmp	r3, #16
 80042c0:	d111      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042c2:	4b10      	ldr	r3, [pc, #64]	; (8004304 <HAL_ADC_ConfigChannel+0x23c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a10      	ldr	r2, [pc, #64]	; (8004308 <HAL_ADC_ConfigChannel+0x240>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	0c9a      	lsrs	r2, r3, #18
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042d8:	e002      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	3b01      	subs	r3, #1
 80042de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f9      	bne.n	80042da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	40012300 	.word	0x40012300
 8004300:	40012000 	.word	0x40012000
 8004304:	2000201c 	.word	0x2000201c
 8004308:	431bde83 	.word	0x431bde83

0800430c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004314:	4b79      	ldr	r3, [pc, #484]	; (80044fc <ADC_Init+0x1f0>)
 8004316:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	431a      	orrs	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6859      	ldr	r1, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	021a      	lsls	r2, r3, #8
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004364:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6859      	ldr	r1, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004386:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6899      	ldr	r1, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439e:	4a58      	ldr	r2, [pc, #352]	; (8004500 <ADC_Init+0x1f4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d022      	beq.n	80043ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6899      	ldr	r1, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6899      	ldr	r1, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	e00f      	b.n	800440a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004408:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0202 	bic.w	r2, r2, #2
 8004418:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6899      	ldr	r1, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	7e1b      	ldrb	r3, [r3, #24]
 8004424:	005a      	lsls	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01b      	beq.n	8004470 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004446:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004456:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6859      	ldr	r1, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	3b01      	subs	r3, #1
 8004464:	035a      	lsls	r2, r3, #13
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	605a      	str	r2, [r3, #4]
 800446e:	e007      	b.n	8004480 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800447e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800448e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	3b01      	subs	r3, #1
 800449c:	051a      	lsls	r2, r3, #20
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6899      	ldr	r1, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044c2:	025a      	lsls	r2, r3, #9
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6899      	ldr	r1, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	029a      	lsls	r2, r3, #10
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	609a      	str	r2, [r3, #8]
}
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	40012300 	.word	0x40012300
 8004500:	0f000001 	.word	0x0f000001

08004504 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800451a:	2b00      	cmp	r3, #0
 800451c:	d13c      	bne.n	8004598 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d12b      	bne.n	8004590 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800453c:	2b00      	cmp	r3, #0
 800453e:	d127      	bne.n	8004590 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800454a:	2b00      	cmp	r3, #0
 800454c:	d006      	beq.n	800455c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004558:	2b00      	cmp	r3, #0
 800455a:	d119      	bne.n	8004590 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0220 	bic.w	r2, r2, #32
 800456a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f043 0201 	orr.w	r2, r3, #1
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f7fe ffef 	bl	8003574 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004596:	e00e      	b.n	80045b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f7ff fd85 	bl	80040b4 <HAL_ADC_ErrorCallback>
}
 80045aa:	e004      	b.n	80045b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	4798      	blx	r3
}
 80045b6:	bf00      	nop
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7ff fd67 	bl	80040a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045d2:	bf00      	nop
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2240      	movs	r2, #64	; 0x40
 80045ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	f043 0204 	orr.w	r2, r3, #4
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7ff fd5a 	bl	80040b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <__NVIC_SetPriorityGrouping+0x44>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004624:	4013      	ands	r3, r2
 8004626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800463a:	4a04      	ldr	r2, [pc, #16]	; (800464c <__NVIC_SetPriorityGrouping+0x44>)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	60d3      	str	r3, [r2, #12]
}
 8004640:	bf00      	nop
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	e000ed00 	.word	0xe000ed00

08004650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004654:	4b04      	ldr	r3, [pc, #16]	; (8004668 <__NVIC_GetPriorityGrouping+0x18>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	0a1b      	lsrs	r3, r3, #8
 800465a:	f003 0307 	and.w	r3, r3, #7
}
 800465e:	4618      	mov	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	e000ed00 	.word	0xe000ed00

0800466c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467a:	2b00      	cmp	r3, #0
 800467c:	db0b      	blt.n	8004696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	f003 021f 	and.w	r2, r3, #31
 8004684:	4907      	ldr	r1, [pc, #28]	; (80046a4 <__NVIC_EnableIRQ+0x38>)
 8004686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	2001      	movs	r0, #1
 800468e:	fa00 f202 	lsl.w	r2, r0, r2
 8004692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	e000e100 	.word	0xe000e100

080046a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	6039      	str	r1, [r7, #0]
 80046b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	db0a      	blt.n	80046d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	490c      	ldr	r1, [pc, #48]	; (80046f4 <__NVIC_SetPriority+0x4c>)
 80046c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c6:	0112      	lsls	r2, r2, #4
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	440b      	add	r3, r1
 80046cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046d0:	e00a      	b.n	80046e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	4908      	ldr	r1, [pc, #32]	; (80046f8 <__NVIC_SetPriority+0x50>)
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	3b04      	subs	r3, #4
 80046e0:	0112      	lsls	r2, r2, #4
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	440b      	add	r3, r1
 80046e6:	761a      	strb	r2, [r3, #24]
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	e000e100 	.word	0xe000e100
 80046f8:	e000ed00 	.word	0xe000ed00

080046fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b089      	sub	sp, #36	; 0x24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f1c3 0307 	rsb	r3, r3, #7
 8004716:	2b04      	cmp	r3, #4
 8004718:	bf28      	it	cs
 800471a:	2304      	movcs	r3, #4
 800471c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	3304      	adds	r3, #4
 8004722:	2b06      	cmp	r3, #6
 8004724:	d902      	bls.n	800472c <NVIC_EncodePriority+0x30>
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	3b03      	subs	r3, #3
 800472a:	e000      	b.n	800472e <NVIC_EncodePriority+0x32>
 800472c:	2300      	movs	r3, #0
 800472e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43da      	mvns	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	401a      	ands	r2, r3
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004744:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	fa01 f303 	lsl.w	r3, r1, r3
 800474e:	43d9      	mvns	r1, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004754:	4313      	orrs	r3, r2
         );
}
 8004756:	4618      	mov	r0, r3
 8004758:	3724      	adds	r7, #36	; 0x24
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
	...

08004764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3b01      	subs	r3, #1
 8004770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004774:	d301      	bcc.n	800477a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004776:	2301      	movs	r3, #1
 8004778:	e00f      	b.n	800479a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800477a:	4a0a      	ldr	r2, [pc, #40]	; (80047a4 <SysTick_Config+0x40>)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3b01      	subs	r3, #1
 8004780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004782:	210f      	movs	r1, #15
 8004784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004788:	f7ff ff8e 	bl	80046a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <SysTick_Config+0x40>)
 800478e:	2200      	movs	r2, #0
 8004790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004792:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <SysTick_Config+0x40>)
 8004794:	2207      	movs	r2, #7
 8004796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	e000e010 	.word	0xe000e010

080047a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ff29 	bl	8004608 <__NVIC_SetPriorityGrouping>
}
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047be:	b580      	push	{r7, lr}
 80047c0:	b086      	sub	sp, #24
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	4603      	mov	r3, r0
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
 80047ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047d0:	f7ff ff3e 	bl	8004650 <__NVIC_GetPriorityGrouping>
 80047d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	6978      	ldr	r0, [r7, #20]
 80047dc:	f7ff ff8e 	bl	80046fc <NVIC_EncodePriority>
 80047e0:	4602      	mov	r2, r0
 80047e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047e6:	4611      	mov	r1, r2
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff ff5d 	bl	80046a8 <__NVIC_SetPriority>
}
 80047ee:	bf00      	nop
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b082      	sub	sp, #8
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	4603      	mov	r3, r0
 80047fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff ff31 	bl	800466c <__NVIC_EnableIRQ>
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff ffa2 	bl	8004764 <SysTick_Config>
 8004820:	4603      	mov	r3, r0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004838:	f7ff face 	bl	8003dd8 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e099      	b.n	800497c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0201 	bic.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004868:	e00f      	b.n	800488a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800486a:	f7ff fab5 	bl	8003dd8 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b05      	cmp	r3, #5
 8004876:	d908      	bls.n	800488a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2203      	movs	r2, #3
 8004882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e078      	b.n	800497c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e8      	bne.n	800486a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4b38      	ldr	r3, [pc, #224]	; (8004984 <HAL_DMA_Init+0x158>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d107      	bne.n	80048f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ec:	4313      	orrs	r3, r2
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f023 0307 	bic.w	r3, r3, #7
 800490a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	2b04      	cmp	r3, #4
 800491c:	d117      	bne.n	800494e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00e      	beq.n	800494e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fa6f 	bl	8004e14 <DMA_CheckFifoParam>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2240      	movs	r2, #64	; 0x40
 8004940:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800494a:	2301      	movs	r3, #1
 800494c:	e016      	b.n	800497c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fa26 	bl	8004da8 <DMA_CalcBaseAndBitshift>
 800495c:	4603      	mov	r3, r0
 800495e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004964:	223f      	movs	r2, #63	; 0x3f
 8004966:	409a      	lsls	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	f010803f 	.word	0xf010803f

08004988 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_DMA_Start_IT+0x26>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e040      	b.n	8004a30 <HAL_DMA_Start_IT+0xa8>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d12f      	bne.n	8004a22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2202      	movs	r2, #2
 80049c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f9b8 	bl	8004d4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e0:	223f      	movs	r2, #63	; 0x3f
 80049e2:	409a      	lsls	r2, r3
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0216 	orr.w	r2, r2, #22
 80049f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d007      	beq.n	8004a10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0208 	orr.w	r2, r2, #8
 8004a0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	e005      	b.n	8004a2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a44:	4b92      	ldr	r3, [pc, #584]	; (8004c90 <HAL_DMA_IRQHandler+0x258>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a92      	ldr	r2, [pc, #584]	; (8004c94 <HAL_DMA_IRQHandler+0x25c>)
 8004a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4e:	0a9b      	lsrs	r3, r3, #10
 8004a50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a62:	2208      	movs	r2, #8
 8004a64:	409a      	lsls	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01a      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d013      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0204 	bic.w	r2, r2, #4
 8004a8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a90:	2208      	movs	r2, #8
 8004a92:	409a      	lsls	r2, r3
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9c:	f043 0201 	orr.w	r2, r3, #1
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	409a      	lsls	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d012      	beq.n	8004ada <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00b      	beq.n	8004ada <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	409a      	lsls	r2, r3
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad2:	f043 0202 	orr.w	r2, r3, #2
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ade:	2204      	movs	r2, #4
 8004ae0:	409a      	lsls	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d012      	beq.n	8004b10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00b      	beq.n	8004b10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afc:	2204      	movs	r2, #4
 8004afe:	409a      	lsls	r2, r3
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b08:	f043 0204 	orr.w	r2, r3, #4
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b14:	2210      	movs	r2, #16
 8004b16:	409a      	lsls	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d043      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d03c      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b32:	2210      	movs	r2, #16
 8004b34:	409a      	lsls	r2, r3
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d018      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d108      	bne.n	8004b68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d024      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	4798      	blx	r3
 8004b66:	e01f      	b.n	8004ba8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01b      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	4798      	blx	r3
 8004b78:	e016      	b.n	8004ba8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d107      	bne.n	8004b98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0208 	bic.w	r2, r2, #8
 8004b96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bac:	2220      	movs	r2, #32
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 808e 	beq.w	8004cd6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0310 	and.w	r3, r3, #16
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 8086 	beq.w	8004cd6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bce:	2220      	movs	r2, #32
 8004bd0:	409a      	lsls	r2, r3
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b05      	cmp	r3, #5
 8004be0:	d136      	bne.n	8004c50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0216 	bic.w	r2, r2, #22
 8004bf0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695a      	ldr	r2, [r3, #20]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d103      	bne.n	8004c12 <HAL_DMA_IRQHandler+0x1da>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d007      	beq.n	8004c22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0208 	bic.w	r2, r2, #8
 8004c20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c26:	223f      	movs	r2, #63	; 0x3f
 8004c28:	409a      	lsls	r2, r3
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d07d      	beq.n	8004d42 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	4798      	blx	r3
        }
        return;
 8004c4e:	e078      	b.n	8004d42 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d01c      	beq.n	8004c98 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d108      	bne.n	8004c7e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d030      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	4798      	blx	r3
 8004c7c:	e02b      	b.n	8004cd6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d027      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	4798      	blx	r3
 8004c8e:	e022      	b.n	8004cd6 <HAL_DMA_IRQHandler+0x29e>
 8004c90:	2000201c 	.word	0x2000201c
 8004c94:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10f      	bne.n	8004cc6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0210 	bic.w	r2, r2, #16
 8004cb4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d032      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d022      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2205      	movs	r2, #5
 8004cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0201 	bic.w	r2, r2, #1
 8004d00:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	3301      	adds	r3, #1
 8004d06:	60bb      	str	r3, [r7, #8]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d307      	bcc.n	8004d1e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f2      	bne.n	8004d02 <HAL_DMA_IRQHandler+0x2ca>
 8004d1c:	e000      	b.n	8004d20 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004d1e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	4798      	blx	r3
 8004d40:	e000      	b.n	8004d44 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004d42:	bf00      	nop
    }
  }
}
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop

08004d4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b40      	cmp	r3, #64	; 0x40
 8004d78:	d108      	bne.n	8004d8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d8a:	e007      	b.n	8004d9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	60da      	str	r2, [r3, #12]
}
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	3b10      	subs	r3, #16
 8004db8:	4a14      	ldr	r2, [pc, #80]	; (8004e0c <DMA_CalcBaseAndBitshift+0x64>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	091b      	lsrs	r3, r3, #4
 8004dc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004dc2:	4a13      	ldr	r2, [pc, #76]	; (8004e10 <DMA_CalcBaseAndBitshift+0x68>)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d909      	bls.n	8004dea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	1d1a      	adds	r2, r3, #4
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	659a      	str	r2, [r3, #88]	; 0x58
 8004de8:	e007      	b.n	8004dfa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004df2:	f023 0303 	bic.w	r3, r3, #3
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	aaaaaaab 	.word	0xaaaaaaab
 8004e10:	0800b838 	.word	0x0800b838

08004e14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d11f      	bne.n	8004e6e <DMA_CheckFifoParam+0x5a>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d856      	bhi.n	8004ee2 <DMA_CheckFifoParam+0xce>
 8004e34:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <DMA_CheckFifoParam+0x28>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e4d 	.word	0x08004e4d
 8004e40:	08004e5f 	.word	0x08004e5f
 8004e44:	08004e4d 	.word	0x08004e4d
 8004e48:	08004ee3 	.word	0x08004ee3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d046      	beq.n	8004ee6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e5c:	e043      	b.n	8004ee6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e66:	d140      	bne.n	8004eea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e6c:	e03d      	b.n	8004eea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e76:	d121      	bne.n	8004ebc <DMA_CheckFifoParam+0xa8>
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d837      	bhi.n	8004eee <DMA_CheckFifoParam+0xda>
 8004e7e:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <DMA_CheckFifoParam+0x70>)
 8004e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e84:	08004e95 	.word	0x08004e95
 8004e88:	08004e9b 	.word	0x08004e9b
 8004e8c:	08004e95 	.word	0x08004e95
 8004e90:	08004ead 	.word	0x08004ead
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	73fb      	strb	r3, [r7, #15]
      break;
 8004e98:	e030      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d025      	beq.n	8004ef2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eaa:	e022      	b.n	8004ef2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004eb4:	d11f      	bne.n	8004ef6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004eba:	e01c      	b.n	8004ef6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d903      	bls.n	8004eca <DMA_CheckFifoParam+0xb6>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d003      	beq.n	8004ed0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ec8:	e018      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8004ece:	e015      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00e      	beq.n	8004efa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee0:	e00b      	b.n	8004efa <DMA_CheckFifoParam+0xe6>
      break;
 8004ee2:	bf00      	nop
 8004ee4:	e00a      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      break;
 8004ee6:	bf00      	nop
 8004ee8:	e008      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      break;
 8004eea:	bf00      	nop
 8004eec:	e006      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      break;
 8004eee:	bf00      	nop
 8004ef0:	e004      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      break;
 8004ef2:	bf00      	nop
 8004ef4:	e002      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      break;   
 8004ef6:	bf00      	nop
 8004ef8:	e000      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      break;
 8004efa:	bf00      	nop
    }
  } 
  
  return status; 
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop

08004f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b089      	sub	sp, #36	; 0x24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f22:	2300      	movs	r3, #0
 8004f24:	61fb      	str	r3, [r7, #28]
 8004f26:	e159      	b.n	80051dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f28:	2201      	movs	r2, #1
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	f040 8148 	bne.w	80051d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d005      	beq.n	8004f5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d130      	bne.n	8004fc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	2203      	movs	r2, #3
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4013      	ands	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f94:	2201      	movs	r2, #1
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	091b      	lsrs	r3, r3, #4
 8004faa:	f003 0201 	and.w	r2, r3, #1
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f003 0303 	and.w	r3, r3, #3
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d017      	beq.n	8004ffc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	2203      	movs	r2, #3
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f003 0303 	and.w	r3, r3, #3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d123      	bne.n	8005050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	08da      	lsrs	r2, r3, #3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3208      	adds	r2, #8
 8005010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	220f      	movs	r2, #15
 8005020:	fa02 f303 	lsl.w	r3, r2, r3
 8005024:	43db      	mvns	r3, r3
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	4013      	ands	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4313      	orrs	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	08da      	lsrs	r2, r3, #3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3208      	adds	r2, #8
 800504a:	69b9      	ldr	r1, [r7, #24]
 800504c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	2203      	movs	r2, #3
 800505c:	fa02 f303 	lsl.w	r3, r2, r3
 8005060:	43db      	mvns	r3, r3
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	4013      	ands	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f003 0203 	and.w	r2, r3, #3
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4313      	orrs	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80a2 	beq.w	80051d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	4b57      	ldr	r3, [pc, #348]	; (80051f4 <HAL_GPIO_Init+0x2e8>)
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	4a56      	ldr	r2, [pc, #344]	; (80051f4 <HAL_GPIO_Init+0x2e8>)
 800509c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050a0:	6453      	str	r3, [r2, #68]	; 0x44
 80050a2:	4b54      	ldr	r3, [pc, #336]	; (80051f4 <HAL_GPIO_Init+0x2e8>)
 80050a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050ae:	4a52      	ldr	r2, [pc, #328]	; (80051f8 <HAL_GPIO_Init+0x2ec>)
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	089b      	lsrs	r3, r3, #2
 80050b4:	3302      	adds	r3, #2
 80050b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	220f      	movs	r2, #15
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	43db      	mvns	r3, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4013      	ands	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a49      	ldr	r2, [pc, #292]	; (80051fc <HAL_GPIO_Init+0x2f0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d019      	beq.n	800510e <HAL_GPIO_Init+0x202>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a48      	ldr	r2, [pc, #288]	; (8005200 <HAL_GPIO_Init+0x2f4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <HAL_GPIO_Init+0x1fe>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a47      	ldr	r2, [pc, #284]	; (8005204 <HAL_GPIO_Init+0x2f8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00d      	beq.n	8005106 <HAL_GPIO_Init+0x1fa>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a46      	ldr	r2, [pc, #280]	; (8005208 <HAL_GPIO_Init+0x2fc>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d007      	beq.n	8005102 <HAL_GPIO_Init+0x1f6>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a45      	ldr	r2, [pc, #276]	; (800520c <HAL_GPIO_Init+0x300>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d101      	bne.n	80050fe <HAL_GPIO_Init+0x1f2>
 80050fa:	2304      	movs	r3, #4
 80050fc:	e008      	b.n	8005110 <HAL_GPIO_Init+0x204>
 80050fe:	2307      	movs	r3, #7
 8005100:	e006      	b.n	8005110 <HAL_GPIO_Init+0x204>
 8005102:	2303      	movs	r3, #3
 8005104:	e004      	b.n	8005110 <HAL_GPIO_Init+0x204>
 8005106:	2302      	movs	r3, #2
 8005108:	e002      	b.n	8005110 <HAL_GPIO_Init+0x204>
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <HAL_GPIO_Init+0x204>
 800510e:	2300      	movs	r3, #0
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	f002 0203 	and.w	r2, r2, #3
 8005116:	0092      	lsls	r2, r2, #2
 8005118:	4093      	lsls	r3, r2
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	4313      	orrs	r3, r2
 800511e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005120:	4935      	ldr	r1, [pc, #212]	; (80051f8 <HAL_GPIO_Init+0x2ec>)
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	089b      	lsrs	r3, r3, #2
 8005126:	3302      	adds	r3, #2
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800512e:	4b38      	ldr	r3, [pc, #224]	; (8005210 <HAL_GPIO_Init+0x304>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	43db      	mvns	r3, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4013      	ands	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005152:	4a2f      	ldr	r2, [pc, #188]	; (8005210 <HAL_GPIO_Init+0x304>)
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005158:	4b2d      	ldr	r3, [pc, #180]	; (8005210 <HAL_GPIO_Init+0x304>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	43db      	mvns	r3, r3
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4013      	ands	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800517c:	4a24      	ldr	r2, [pc, #144]	; (8005210 <HAL_GPIO_Init+0x304>)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005182:	4b23      	ldr	r3, [pc, #140]	; (8005210 <HAL_GPIO_Init+0x304>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	43db      	mvns	r3, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4013      	ands	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051a6:	4a1a      	ldr	r2, [pc, #104]	; (8005210 <HAL_GPIO_Init+0x304>)
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051ac:	4b18      	ldr	r3, [pc, #96]	; (8005210 <HAL_GPIO_Init+0x304>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	43db      	mvns	r3, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051d0:	4a0f      	ldr	r2, [pc, #60]	; (8005210 <HAL_GPIO_Init+0x304>)
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	3301      	adds	r3, #1
 80051da:	61fb      	str	r3, [r7, #28]
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	2b0f      	cmp	r3, #15
 80051e0:	f67f aea2 	bls.w	8004f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051e4:	bf00      	nop
 80051e6:	bf00      	nop
 80051e8:	3724      	adds	r7, #36	; 0x24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40023800 	.word	0x40023800
 80051f8:	40013800 	.word	0x40013800
 80051fc:	40020000 	.word	0x40020000
 8005200:	40020400 	.word	0x40020400
 8005204:	40020800 	.word	0x40020800
 8005208:	40020c00 	.word	0x40020c00
 800520c:	40021000 	.word	0x40021000
 8005210:	40013c00 	.word	0x40013c00

08005214 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	460b      	mov	r3, r1
 800521e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	887b      	ldrh	r3, [r7, #2]
 8005226:	4013      	ands	r3, r2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]
 8005230:	e001      	b.n	8005236 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005232:	2300      	movs	r3, #0
 8005234:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005236:	7bfb      	ldrb	r3, [r7, #15]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	807b      	strh	r3, [r7, #2]
 8005250:	4613      	mov	r3, r2
 8005252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005254:	787b      	ldrb	r3, [r7, #1]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800525a:	887a      	ldrh	r2, [r7, #2]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005260:	e003      	b.n	800526a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005262:	887b      	ldrh	r3, [r7, #2]
 8005264:	041a      	lsls	r2, r3, #16
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	619a      	str	r2, [r3, #24]
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
	...

08005278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e264      	b.n	8005754 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d075      	beq.n	8005382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005296:	4ba3      	ldr	r3, [pc, #652]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 030c 	and.w	r3, r3, #12
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d00c      	beq.n	80052bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052a2:	4ba0      	ldr	r3, [pc, #640]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d112      	bne.n	80052d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ae:	4b9d      	ldr	r3, [pc, #628]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ba:	d10b      	bne.n	80052d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052bc:	4b99      	ldr	r3, [pc, #612]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d05b      	beq.n	8005380 <HAL_RCC_OscConfig+0x108>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d157      	bne.n	8005380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e23f      	b.n	8005754 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052dc:	d106      	bne.n	80052ec <HAL_RCC_OscConfig+0x74>
 80052de:	4b91      	ldr	r3, [pc, #580]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a90      	ldr	r2, [pc, #576]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 80052e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	e01d      	b.n	8005328 <HAL_RCC_OscConfig+0xb0>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052f4:	d10c      	bne.n	8005310 <HAL_RCC_OscConfig+0x98>
 80052f6:	4b8b      	ldr	r3, [pc, #556]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a8a      	ldr	r2, [pc, #552]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 80052fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	4b88      	ldr	r3, [pc, #544]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a87      	ldr	r2, [pc, #540]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 8005308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	e00b      	b.n	8005328 <HAL_RCC_OscConfig+0xb0>
 8005310:	4b84      	ldr	r3, [pc, #528]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a83      	ldr	r2, [pc, #524]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 8005316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	4b81      	ldr	r3, [pc, #516]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a80      	ldr	r2, [pc, #512]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 8005322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d013      	beq.n	8005358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005330:	f7fe fd52 	bl	8003dd8 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005338:	f7fe fd4e 	bl	8003dd8 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b64      	cmp	r3, #100	; 0x64
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e204      	b.n	8005754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800534a:	4b76      	ldr	r3, [pc, #472]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f0      	beq.n	8005338 <HAL_RCC_OscConfig+0xc0>
 8005356:	e014      	b.n	8005382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005358:	f7fe fd3e 	bl	8003dd8 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005360:	f7fe fd3a 	bl	8003dd8 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b64      	cmp	r3, #100	; 0x64
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e1f0      	b.n	8005754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005372:	4b6c      	ldr	r3, [pc, #432]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f0      	bne.n	8005360 <HAL_RCC_OscConfig+0xe8>
 800537e:	e000      	b.n	8005382 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d063      	beq.n	8005456 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800538e:	4b65      	ldr	r3, [pc, #404]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00b      	beq.n	80053b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800539a:	4b62      	ldr	r3, [pc, #392]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d11c      	bne.n	80053e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053a6:	4b5f      	ldr	r3, [pc, #380]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d116      	bne.n	80053e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053b2:	4b5c      	ldr	r3, [pc, #368]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <HAL_RCC_OscConfig+0x152>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d001      	beq.n	80053ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e1c4      	b.n	8005754 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ca:	4b56      	ldr	r3, [pc, #344]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	4952      	ldr	r1, [pc, #328]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053de:	e03a      	b.n	8005456 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d020      	beq.n	800542a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053e8:	4b4f      	ldr	r3, [pc, #316]	; (8005528 <HAL_RCC_OscConfig+0x2b0>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ee:	f7fe fcf3 	bl	8003dd8 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053f6:	f7fe fcef 	bl	8003dd8 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e1a5      	b.n	8005754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005408:	4b46      	ldr	r3, [pc, #280]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0f0      	beq.n	80053f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005414:	4b43      	ldr	r3, [pc, #268]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	4940      	ldr	r1, [pc, #256]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 8005424:	4313      	orrs	r3, r2
 8005426:	600b      	str	r3, [r1, #0]
 8005428:	e015      	b.n	8005456 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800542a:	4b3f      	ldr	r3, [pc, #252]	; (8005528 <HAL_RCC_OscConfig+0x2b0>)
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005430:	f7fe fcd2 	bl	8003dd8 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005438:	f7fe fcce 	bl	8003dd8 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e184      	b.n	8005754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544a:	4b36      	ldr	r3, [pc, #216]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f0      	bne.n	8005438 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d030      	beq.n	80054c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d016      	beq.n	8005498 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800546a:	4b30      	ldr	r3, [pc, #192]	; (800552c <HAL_RCC_OscConfig+0x2b4>)
 800546c:	2201      	movs	r2, #1
 800546e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005470:	f7fe fcb2 	bl	8003dd8 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005478:	f7fe fcae 	bl	8003dd8 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e164      	b.n	8005754 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800548a:	4b26      	ldr	r3, [pc, #152]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 800548c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f0      	beq.n	8005478 <HAL_RCC_OscConfig+0x200>
 8005496:	e015      	b.n	80054c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005498:	4b24      	ldr	r3, [pc, #144]	; (800552c <HAL_RCC_OscConfig+0x2b4>)
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800549e:	f7fe fc9b 	bl	8003dd8 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054a6:	f7fe fc97 	bl	8003dd8 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e14d      	b.n	8005754 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b8:	4b1a      	ldr	r3, [pc, #104]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 80054ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1f0      	bne.n	80054a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80a0 	beq.w	8005612 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054d2:	2300      	movs	r3, #0
 80054d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054d6:	4b13      	ldr	r3, [pc, #76]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10f      	bne.n	8005502 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054e2:	2300      	movs	r3, #0
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	4b0f      	ldr	r3, [pc, #60]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	4a0e      	ldr	r2, [pc, #56]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 80054ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f0:	6413      	str	r3, [r2, #64]	; 0x40
 80054f2:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <HAL_RCC_OscConfig+0x2ac>)
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fa:	60bb      	str	r3, [r7, #8]
 80054fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054fe:	2301      	movs	r3, #1
 8005500:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005502:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <HAL_RCC_OscConfig+0x2b8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550a:	2b00      	cmp	r3, #0
 800550c:	d121      	bne.n	8005552 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800550e:	4b08      	ldr	r3, [pc, #32]	; (8005530 <HAL_RCC_OscConfig+0x2b8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a07      	ldr	r2, [pc, #28]	; (8005530 <HAL_RCC_OscConfig+0x2b8>)
 8005514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800551a:	f7fe fc5d 	bl	8003dd8 <HAL_GetTick>
 800551e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005520:	e011      	b.n	8005546 <HAL_RCC_OscConfig+0x2ce>
 8005522:	bf00      	nop
 8005524:	40023800 	.word	0x40023800
 8005528:	42470000 	.word	0x42470000
 800552c:	42470e80 	.word	0x42470e80
 8005530:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005534:	f7fe fc50 	bl	8003dd8 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e106      	b.n	8005754 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005546:	4b85      	ldr	r3, [pc, #532]	; (800575c <HAL_RCC_OscConfig+0x4e4>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0f0      	beq.n	8005534 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d106      	bne.n	8005568 <HAL_RCC_OscConfig+0x2f0>
 800555a:	4b81      	ldr	r3, [pc, #516]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 800555c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555e:	4a80      	ldr	r2, [pc, #512]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	6713      	str	r3, [r2, #112]	; 0x70
 8005566:	e01c      	b.n	80055a2 <HAL_RCC_OscConfig+0x32a>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	2b05      	cmp	r3, #5
 800556e:	d10c      	bne.n	800558a <HAL_RCC_OscConfig+0x312>
 8005570:	4b7b      	ldr	r3, [pc, #492]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 8005572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005574:	4a7a      	ldr	r2, [pc, #488]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 8005576:	f043 0304 	orr.w	r3, r3, #4
 800557a:	6713      	str	r3, [r2, #112]	; 0x70
 800557c:	4b78      	ldr	r3, [pc, #480]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 800557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005580:	4a77      	ldr	r2, [pc, #476]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 8005582:	f043 0301 	orr.w	r3, r3, #1
 8005586:	6713      	str	r3, [r2, #112]	; 0x70
 8005588:	e00b      	b.n	80055a2 <HAL_RCC_OscConfig+0x32a>
 800558a:	4b75      	ldr	r3, [pc, #468]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 800558c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558e:	4a74      	ldr	r2, [pc, #464]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 8005590:	f023 0301 	bic.w	r3, r3, #1
 8005594:	6713      	str	r3, [r2, #112]	; 0x70
 8005596:	4b72      	ldr	r3, [pc, #456]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 8005598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559a:	4a71      	ldr	r2, [pc, #452]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 800559c:	f023 0304 	bic.w	r3, r3, #4
 80055a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d015      	beq.n	80055d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055aa:	f7fe fc15 	bl	8003dd8 <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b0:	e00a      	b.n	80055c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055b2:	f7fe fc11 	bl	8003dd8 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e0c5      	b.n	8005754 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c8:	4b65      	ldr	r3, [pc, #404]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 80055ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0ee      	beq.n	80055b2 <HAL_RCC_OscConfig+0x33a>
 80055d4:	e014      	b.n	8005600 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055d6:	f7fe fbff 	bl	8003dd8 <HAL_GetTick>
 80055da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055dc:	e00a      	b.n	80055f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055de:	f7fe fbfb 	bl	8003dd8 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e0af      	b.n	8005754 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055f4:	4b5a      	ldr	r3, [pc, #360]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 80055f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1ee      	bne.n	80055de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005600:	7dfb      	ldrb	r3, [r7, #23]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d105      	bne.n	8005612 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005606:	4b56      	ldr	r3, [pc, #344]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	4a55      	ldr	r2, [pc, #340]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 800560c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005610:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 809b 	beq.w	8005752 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800561c:	4b50      	ldr	r3, [pc, #320]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f003 030c 	and.w	r3, r3, #12
 8005624:	2b08      	cmp	r3, #8
 8005626:	d05c      	beq.n	80056e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	2b02      	cmp	r3, #2
 800562e:	d141      	bne.n	80056b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005630:	4b4c      	ldr	r3, [pc, #304]	; (8005764 <HAL_RCC_OscConfig+0x4ec>)
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005636:	f7fe fbcf 	bl	8003dd8 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800563e:	f7fe fbcb 	bl	8003dd8 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e081      	b.n	8005754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005650:	4b43      	ldr	r3, [pc, #268]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f0      	bne.n	800563e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	019b      	lsls	r3, r3, #6
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	085b      	lsrs	r3, r3, #1
 8005674:	3b01      	subs	r3, #1
 8005676:	041b      	lsls	r3, r3, #16
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567e:	061b      	lsls	r3, r3, #24
 8005680:	4937      	ldr	r1, [pc, #220]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 8005682:	4313      	orrs	r3, r2
 8005684:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005686:	4b37      	ldr	r3, [pc, #220]	; (8005764 <HAL_RCC_OscConfig+0x4ec>)
 8005688:	2201      	movs	r2, #1
 800568a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800568c:	f7fe fba4 	bl	8003dd8 <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005694:	f7fe fba0 	bl	8003dd8 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e056      	b.n	8005754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056a6:	4b2e      	ldr	r3, [pc, #184]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0f0      	beq.n	8005694 <HAL_RCC_OscConfig+0x41c>
 80056b2:	e04e      	b.n	8005752 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b4:	4b2b      	ldr	r3, [pc, #172]	; (8005764 <HAL_RCC_OscConfig+0x4ec>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ba:	f7fe fb8d 	bl	8003dd8 <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056c2:	f7fe fb89 	bl	8003dd8 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e03f      	b.n	8005754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056d4:	4b22      	ldr	r3, [pc, #136]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1f0      	bne.n	80056c2 <HAL_RCC_OscConfig+0x44a>
 80056e0:	e037      	b.n	8005752 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e032      	b.n	8005754 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056ee:	4b1c      	ldr	r3, [pc, #112]	; (8005760 <HAL_RCC_OscConfig+0x4e8>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d028      	beq.n	800574e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005706:	429a      	cmp	r2, r3
 8005708:	d121      	bne.n	800574e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005714:	429a      	cmp	r2, r3
 8005716:	d11a      	bne.n	800574e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800571e:	4013      	ands	r3, r2
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005724:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005726:	4293      	cmp	r3, r2
 8005728:	d111      	bne.n	800574e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005734:	085b      	lsrs	r3, r3, #1
 8005736:	3b01      	subs	r3, #1
 8005738:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800573a:	429a      	cmp	r2, r3
 800573c:	d107      	bne.n	800574e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800574a:	429a      	cmp	r2, r3
 800574c:	d001      	beq.n	8005752 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40007000 	.word	0x40007000
 8005760:	40023800 	.word	0x40023800
 8005764:	42470060 	.word	0x42470060

08005768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e0cc      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800577c:	4b68      	ldr	r3, [pc, #416]	; (8005920 <HAL_RCC_ClockConfig+0x1b8>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d90c      	bls.n	80057a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800578a:	4b65      	ldr	r3, [pc, #404]	; (8005920 <HAL_RCC_ClockConfig+0x1b8>)
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005792:	4b63      	ldr	r3, [pc, #396]	; (8005920 <HAL_RCC_ClockConfig+0x1b8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	429a      	cmp	r2, r3
 800579e:	d001      	beq.n	80057a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e0b8      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d020      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d005      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057bc:	4b59      	ldr	r3, [pc, #356]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	4a58      	ldr	r2, [pc, #352]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80057c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057d4:	4b53      	ldr	r3, [pc, #332]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	4a52      	ldr	r2, [pc, #328]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80057da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057e0:	4b50      	ldr	r3, [pc, #320]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	494d      	ldr	r1, [pc, #308]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d044      	beq.n	8005888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d107      	bne.n	8005816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005806:	4b47      	ldr	r3, [pc, #284]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d119      	bne.n	8005846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e07f      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d003      	beq.n	8005826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005822:	2b03      	cmp	r3, #3
 8005824:	d107      	bne.n	8005836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005826:	4b3f      	ldr	r3, [pc, #252]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d109      	bne.n	8005846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e06f      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005836:	4b3b      	ldr	r3, [pc, #236]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e067      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005846:	4b37      	ldr	r3, [pc, #220]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f023 0203 	bic.w	r2, r3, #3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	4934      	ldr	r1, [pc, #208]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 8005854:	4313      	orrs	r3, r2
 8005856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005858:	f7fe fabe 	bl	8003dd8 <HAL_GetTick>
 800585c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585e:	e00a      	b.n	8005876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005860:	f7fe faba 	bl	8003dd8 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	f241 3288 	movw	r2, #5000	; 0x1388
 800586e:	4293      	cmp	r3, r2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e04f      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005876:	4b2b      	ldr	r3, [pc, #172]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 020c 	and.w	r2, r3, #12
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	429a      	cmp	r2, r3
 8005886:	d1eb      	bne.n	8005860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005888:	4b25      	ldr	r3, [pc, #148]	; (8005920 <HAL_RCC_ClockConfig+0x1b8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d20c      	bcs.n	80058b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005896:	4b22      	ldr	r3, [pc, #136]	; (8005920 <HAL_RCC_ClockConfig+0x1b8>)
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800589e:	4b20      	ldr	r3, [pc, #128]	; (8005920 <HAL_RCC_ClockConfig+0x1b8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d001      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e032      	b.n	8005916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058bc:	4b19      	ldr	r3, [pc, #100]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4916      	ldr	r1, [pc, #88]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058da:	4b12      	ldr	r3, [pc, #72]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	490e      	ldr	r1, [pc, #56]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058ee:	f000 f821 	bl	8005934 <HAL_RCC_GetSysClockFreq>
 80058f2:	4602      	mov	r2, r0
 80058f4:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	091b      	lsrs	r3, r3, #4
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	490a      	ldr	r1, [pc, #40]	; (8005928 <HAL_RCC_ClockConfig+0x1c0>)
 8005900:	5ccb      	ldrb	r3, [r1, r3]
 8005902:	fa22 f303 	lsr.w	r3, r2, r3
 8005906:	4a09      	ldr	r2, [pc, #36]	; (800592c <HAL_RCC_ClockConfig+0x1c4>)
 8005908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800590a:	4b09      	ldr	r3, [pc, #36]	; (8005930 <HAL_RCC_ClockConfig+0x1c8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe fa1e 	bl	8003d50 <HAL_InitTick>

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	40023c00 	.word	0x40023c00
 8005924:	40023800 	.word	0x40023800
 8005928:	0800b820 	.word	0x0800b820
 800592c:	2000201c 	.word	0x2000201c
 8005930:	20002020 	.word	0x20002020

08005934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005934:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	607b      	str	r3, [r7, #4]
 8005940:	2300      	movs	r3, #0
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	2300      	movs	r3, #0
 8005946:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800594c:	4b67      	ldr	r3, [pc, #412]	; (8005aec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f003 030c 	and.w	r3, r3, #12
 8005954:	2b08      	cmp	r3, #8
 8005956:	d00d      	beq.n	8005974 <HAL_RCC_GetSysClockFreq+0x40>
 8005958:	2b08      	cmp	r3, #8
 800595a:	f200 80bd 	bhi.w	8005ad8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <HAL_RCC_GetSysClockFreq+0x34>
 8005962:	2b04      	cmp	r3, #4
 8005964:	d003      	beq.n	800596e <HAL_RCC_GetSysClockFreq+0x3a>
 8005966:	e0b7      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005968:	4b61      	ldr	r3, [pc, #388]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800596a:	60bb      	str	r3, [r7, #8]
       break;
 800596c:	e0b7      	b.n	8005ade <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800596e:	4b61      	ldr	r3, [pc, #388]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005970:	60bb      	str	r3, [r7, #8]
      break;
 8005972:	e0b4      	b.n	8005ade <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005974:	4b5d      	ldr	r3, [pc, #372]	; (8005aec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800597c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800597e:	4b5b      	ldr	r3, [pc, #364]	; (8005aec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d04d      	beq.n	8005a26 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800598a:	4b58      	ldr	r3, [pc, #352]	; (8005aec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	099b      	lsrs	r3, r3, #6
 8005990:	461a      	mov	r2, r3
 8005992:	f04f 0300 	mov.w	r3, #0
 8005996:	f240 10ff 	movw	r0, #511	; 0x1ff
 800599a:	f04f 0100 	mov.w	r1, #0
 800599e:	ea02 0800 	and.w	r8, r2, r0
 80059a2:	ea03 0901 	and.w	r9, r3, r1
 80059a6:	4640      	mov	r0, r8
 80059a8:	4649      	mov	r1, r9
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	014b      	lsls	r3, r1, #5
 80059b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80059b8:	0142      	lsls	r2, r0, #5
 80059ba:	4610      	mov	r0, r2
 80059bc:	4619      	mov	r1, r3
 80059be:	ebb0 0008 	subs.w	r0, r0, r8
 80059c2:	eb61 0109 	sbc.w	r1, r1, r9
 80059c6:	f04f 0200 	mov.w	r2, #0
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	018b      	lsls	r3, r1, #6
 80059d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80059d4:	0182      	lsls	r2, r0, #6
 80059d6:	1a12      	subs	r2, r2, r0
 80059d8:	eb63 0301 	sbc.w	r3, r3, r1
 80059dc:	f04f 0000 	mov.w	r0, #0
 80059e0:	f04f 0100 	mov.w	r1, #0
 80059e4:	00d9      	lsls	r1, r3, #3
 80059e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059ea:	00d0      	lsls	r0, r2, #3
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	eb12 0208 	adds.w	r2, r2, r8
 80059f4:	eb43 0309 	adc.w	r3, r3, r9
 80059f8:	f04f 0000 	mov.w	r0, #0
 80059fc:	f04f 0100 	mov.w	r1, #0
 8005a00:	0259      	lsls	r1, r3, #9
 8005a02:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005a06:	0250      	lsls	r0, r2, #9
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4619      	mov	r1, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	461a      	mov	r2, r3
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	f7fb f91e 	bl	8000c58 <__aeabi_uldivmod>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4613      	mov	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	e04a      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a26:	4b31      	ldr	r3, [pc, #196]	; (8005aec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	099b      	lsrs	r3, r3, #6
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f04f 0300 	mov.w	r3, #0
 8005a32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a36:	f04f 0100 	mov.w	r1, #0
 8005a3a:	ea02 0400 	and.w	r4, r2, r0
 8005a3e:	ea03 0501 	and.w	r5, r3, r1
 8005a42:	4620      	mov	r0, r4
 8005a44:	4629      	mov	r1, r5
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	014b      	lsls	r3, r1, #5
 8005a50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a54:	0142      	lsls	r2, r0, #5
 8005a56:	4610      	mov	r0, r2
 8005a58:	4619      	mov	r1, r3
 8005a5a:	1b00      	subs	r0, r0, r4
 8005a5c:	eb61 0105 	sbc.w	r1, r1, r5
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	f04f 0300 	mov.w	r3, #0
 8005a68:	018b      	lsls	r3, r1, #6
 8005a6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a6e:	0182      	lsls	r2, r0, #6
 8005a70:	1a12      	subs	r2, r2, r0
 8005a72:	eb63 0301 	sbc.w	r3, r3, r1
 8005a76:	f04f 0000 	mov.w	r0, #0
 8005a7a:	f04f 0100 	mov.w	r1, #0
 8005a7e:	00d9      	lsls	r1, r3, #3
 8005a80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a84:	00d0      	lsls	r0, r2, #3
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	1912      	adds	r2, r2, r4
 8005a8c:	eb45 0303 	adc.w	r3, r5, r3
 8005a90:	f04f 0000 	mov.w	r0, #0
 8005a94:	f04f 0100 	mov.w	r1, #0
 8005a98:	0299      	lsls	r1, r3, #10
 8005a9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005a9e:	0290      	lsls	r0, r2, #10
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	f7fb f8d2 	bl	8000c58 <__aeabi_uldivmod>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4613      	mov	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005abc:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	0c1b      	lsrs	r3, r3, #16
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad4:	60bb      	str	r3, [r7, #8]
      break;
 8005ad6:	e002      	b.n	8005ade <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ad8:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ada:	60bb      	str	r3, [r7, #8]
      break;
 8005adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ade:	68bb      	ldr	r3, [r7, #8]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005aea:	bf00      	nop
 8005aec:	40023800 	.word	0x40023800
 8005af0:	00f42400 	.word	0x00f42400
 8005af4:	007a1200 	.word	0x007a1200

08005af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005afc:	4b03      	ldr	r3, [pc, #12]	; (8005b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005afe:	681b      	ldr	r3, [r3, #0]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	2000201c 	.word	0x2000201c

08005b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b14:	f7ff fff0 	bl	8005af8 <HAL_RCC_GetHCLKFreq>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	0a9b      	lsrs	r3, r3, #10
 8005b20:	f003 0307 	and.w	r3, r3, #7
 8005b24:	4903      	ldr	r1, [pc, #12]	; (8005b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b26:	5ccb      	ldrb	r3, [r1, r3]
 8005b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40023800 	.word	0x40023800
 8005b34:	0800b830 	.word	0x0800b830

08005b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b3c:	f7ff ffdc 	bl	8005af8 <HAL_RCC_GetHCLKFreq>
 8005b40:	4602      	mov	r2, r0
 8005b42:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	0b5b      	lsrs	r3, r3, #13
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	4903      	ldr	r1, [pc, #12]	; (8005b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b4e:	5ccb      	ldrb	r3, [r1, r3]
 8005b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	0800b830 	.word	0x0800b830

08005b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e07b      	b.n	8005c6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d108      	bne.n	8005b8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b82:	d009      	beq.n	8005b98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	61da      	str	r2, [r3, #28]
 8005b8a:	e005      	b.n	8005b98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7fd fdcc 	bl	8003750 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1c:	ea42 0103 	orr.w	r1, r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	0c1b      	lsrs	r3, r3, #16
 8005c36:	f003 0104 	and.w	r1, r3, #4
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	f003 0210 	and.w	r2, r3, #16
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69da      	ldr	r2, [r3, #28]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b088      	sub	sp, #32
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	60f8      	str	r0, [r7, #12]
 8005c7a:	60b9      	str	r1, [r7, #8]
 8005c7c:	603b      	str	r3, [r7, #0]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_SPI_Transmit+0x22>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e126      	b.n	8005ee2 <HAL_SPI_Transmit+0x270>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c9c:	f7fe f89c 	bl	8003dd8 <HAL_GetTick>
 8005ca0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ca2:	88fb      	ldrh	r3, [r7, #6]
 8005ca4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d002      	beq.n	8005cb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cb6:	e10b      	b.n	8005ed0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <HAL_SPI_Transmit+0x52>
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cc8:	e102      	b.n	8005ed0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2203      	movs	r2, #3
 8005cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	88fa      	ldrh	r2, [r7, #6]
 8005ce2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	88fa      	ldrh	r2, [r7, #6]
 8005ce8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d10:	d10f      	bne.n	8005d32 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3c:	2b40      	cmp	r3, #64	; 0x40
 8005d3e:	d007      	beq.n	8005d50 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d58:	d14b      	bne.n	8005df2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <HAL_SPI_Transmit+0xf6>
 8005d62:	8afb      	ldrh	r3, [r7, #22]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d13e      	bne.n	8005de6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	881a      	ldrh	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	1c9a      	adds	r2, r3, #2
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d8c:	e02b      	b.n	8005de6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d112      	bne.n	8005dc2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da0:	881a      	ldrh	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dac:	1c9a      	adds	r2, r3, #2
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	3b01      	subs	r3, #1
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8005dc0:	e011      	b.n	8005de6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dc2:	f7fe f809 	bl	8003dd8 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d803      	bhi.n	8005dda <HAL_SPI_Transmit+0x168>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dd8:	d102      	bne.n	8005de0 <HAL_SPI_Transmit+0x16e>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d102      	bne.n	8005de6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005de4:	e074      	b.n	8005ed0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1ce      	bne.n	8005d8e <HAL_SPI_Transmit+0x11c>
 8005df0:	e04c      	b.n	8005e8c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <HAL_SPI_Transmit+0x18e>
 8005dfa:	8afb      	ldrh	r3, [r7, #22]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d140      	bne.n	8005e82 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	330c      	adds	r3, #12
 8005e0a:	7812      	ldrb	r2, [r2, #0]
 8005e0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e26:	e02c      	b.n	8005e82 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d113      	bne.n	8005e5e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	330c      	adds	r3, #12
 8005e40:	7812      	ldrb	r2, [r2, #0]
 8005e42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e5c:	e011      	b.n	8005e82 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e5e:	f7fd ffbb 	bl	8003dd8 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d803      	bhi.n	8005e76 <HAL_SPI_Transmit+0x204>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e74:	d102      	bne.n	8005e7c <HAL_SPI_Transmit+0x20a>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d102      	bne.n	8005e82 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e80:	e026      	b.n	8005ed0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1cd      	bne.n	8005e28 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	6839      	ldr	r1, [r7, #0]
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 fbd9 	bl	8006648 <SPI_EndRxTxTransaction>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10a      	bne.n	8005ec0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005eaa:	2300      	movs	r3, #0
 8005eac:	613b      	str	r3, [r7, #16]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	613b      	str	r3, [r7, #16]
 8005ebe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	77fb      	strb	r3, [r7, #31]
 8005ecc:	e000      	b.n	8005ed0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005ece:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ee0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3720      	adds	r7, #32
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b088      	sub	sp, #32
 8005eee:	af02      	add	r7, sp, #8
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	603b      	str	r3, [r7, #0]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f06:	d112      	bne.n	8005f2e <HAL_SPI_Receive+0x44>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10e      	bne.n	8005f2e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2204      	movs	r2, #4
 8005f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f18:	88fa      	ldrh	r2, [r7, #6]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	68b9      	ldr	r1, [r7, #8]
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 f8f1 	bl	800610c <HAL_SPI_TransmitReceive>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	e0ea      	b.n	8006104 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_SPI_Receive+0x52>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e0e3      	b.n	8006104 <HAL_SPI_Receive+0x21a>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f44:	f7fd ff48 	bl	8003dd8 <HAL_GetTick>
 8005f48:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d002      	beq.n	8005f5c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005f56:	2302      	movs	r3, #2
 8005f58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f5a:	e0ca      	b.n	80060f2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <HAL_SPI_Receive+0x7e>
 8005f62:	88fb      	ldrh	r3, [r7, #6]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d102      	bne.n	8005f6e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f6c:	e0c1      	b.n	80060f2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2204      	movs	r2, #4
 8005f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	88fa      	ldrh	r2, [r7, #6]
 8005f86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	88fa      	ldrh	r2, [r7, #6]
 8005f8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb4:	d10f      	bne.n	8005fd6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005fd4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe0:	2b40      	cmp	r3, #64	; 0x40
 8005fe2:	d007      	beq.n	8005ff4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ff2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d162      	bne.n	80060c2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005ffc:	e02e      	b.n	800605c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b01      	cmp	r3, #1
 800600a:	d115      	bne.n	8006038 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f103 020c 	add.w	r2, r3, #12
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006018:	7812      	ldrb	r2, [r2, #0]
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006036:	e011      	b.n	800605c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006038:	f7fd fece 	bl	8003dd8 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d803      	bhi.n	8006050 <HAL_SPI_Receive+0x166>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800604e:	d102      	bne.n	8006056 <HAL_SPI_Receive+0x16c>
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d102      	bne.n	800605c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	75fb      	strb	r3, [r7, #23]
          goto error;
 800605a:	e04a      	b.n	80060f2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006060:	b29b      	uxth	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1cb      	bne.n	8005ffe <HAL_SPI_Receive+0x114>
 8006066:	e031      	b.n	80060cc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b01      	cmp	r3, #1
 8006074:	d113      	bne.n	800609e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	b292      	uxth	r2, r2
 8006082:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	1c9a      	adds	r2, r3, #2
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800609c:	e011      	b.n	80060c2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800609e:	f7fd fe9b 	bl	8003dd8 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d803      	bhi.n	80060b6 <HAL_SPI_Receive+0x1cc>
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060b4:	d102      	bne.n	80060bc <HAL_SPI_Receive+0x1d2>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d102      	bne.n	80060c2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80060c0:	e017      	b.n	80060f2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1cd      	bne.n	8006068 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	6839      	ldr	r1, [r7, #0]
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f000 fa53 	bl	800657c <SPI_EndRxTransaction>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2220      	movs	r2, #32
 80060e0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	75fb      	strb	r3, [r7, #23]
 80060ee:	e000      	b.n	80060f2 <HAL_SPI_Receive+0x208>
  }

error :
 80060f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006102:	7dfb      	ldrb	r3, [r7, #23]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08c      	sub	sp, #48	; 0x30
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800611a:	2301      	movs	r3, #1
 800611c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <HAL_SPI_TransmitReceive+0x26>
 800612e:	2302      	movs	r3, #2
 8006130:	e18a      	b.n	8006448 <HAL_SPI_TransmitReceive+0x33c>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800613a:	f7fd fe4d 	bl	8003dd8 <HAL_GetTick>
 800613e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006150:	887b      	ldrh	r3, [r7, #2]
 8006152:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006154:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006158:	2b01      	cmp	r3, #1
 800615a:	d00f      	beq.n	800617c <HAL_SPI_TransmitReceive+0x70>
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006162:	d107      	bne.n	8006174 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d103      	bne.n	8006174 <HAL_SPI_TransmitReceive+0x68>
 800616c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006170:	2b04      	cmp	r3, #4
 8006172:	d003      	beq.n	800617c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006174:	2302      	movs	r3, #2
 8006176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800617a:	e15b      	b.n	8006434 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d005      	beq.n	800618e <HAL_SPI_TransmitReceive+0x82>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <HAL_SPI_TransmitReceive+0x82>
 8006188:	887b      	ldrh	r3, [r7, #2]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d103      	bne.n	8006196 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006194:	e14e      	b.n	8006434 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d003      	beq.n	80061aa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2205      	movs	r2, #5
 80061a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	887a      	ldrh	r2, [r7, #2]
 80061ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	887a      	ldrh	r2, [r7, #2]
 80061c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	887a      	ldrh	r2, [r7, #2]
 80061cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	887a      	ldrh	r2, [r7, #2]
 80061d2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ea:	2b40      	cmp	r3, #64	; 0x40
 80061ec:	d007      	beq.n	80061fe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006206:	d178      	bne.n	80062fa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_SPI_TransmitReceive+0x10a>
 8006210:	8b7b      	ldrh	r3, [r7, #26]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d166      	bne.n	80062e4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621a:	881a      	ldrh	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	1c9a      	adds	r2, r3, #2
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006230:	b29b      	uxth	r3, r3
 8006232:	3b01      	subs	r3, #1
 8006234:	b29a      	uxth	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800623a:	e053      	b.n	80062e4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b02      	cmp	r3, #2
 8006248:	d11b      	bne.n	8006282 <HAL_SPI_TransmitReceive+0x176>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800624e:	b29b      	uxth	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d016      	beq.n	8006282 <HAL_SPI_TransmitReceive+0x176>
 8006254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006256:	2b01      	cmp	r3, #1
 8006258:	d113      	bne.n	8006282 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	881a      	ldrh	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626a:	1c9a      	adds	r2, r3, #2
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006274:	b29b      	uxth	r3, r3
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b01      	cmp	r3, #1
 800628e:	d119      	bne.n	80062c4 <HAL_SPI_TransmitReceive+0x1b8>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d014      	beq.n	80062c4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68da      	ldr	r2, [r3, #12]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	b292      	uxth	r2, r2
 80062a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ac:	1c9a      	adds	r2, r3, #2
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062c0:	2301      	movs	r3, #1
 80062c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062c4:	f7fd fd88 	bl	8003dd8 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d807      	bhi.n	80062e4 <HAL_SPI_TransmitReceive+0x1d8>
 80062d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062da:	d003      	beq.n	80062e4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80062e2:	e0a7      	b.n	8006434 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1a6      	bne.n	800623c <HAL_SPI_TransmitReceive+0x130>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1a1      	bne.n	800623c <HAL_SPI_TransmitReceive+0x130>
 80062f8:	e07c      	b.n	80063f4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d002      	beq.n	8006308 <HAL_SPI_TransmitReceive+0x1fc>
 8006302:	8b7b      	ldrh	r3, [r7, #26]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d16b      	bne.n	80063e0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	330c      	adds	r3, #12
 8006312:	7812      	ldrb	r2, [r2, #0]
 8006314:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006324:	b29b      	uxth	r3, r3
 8006326:	3b01      	subs	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800632e:	e057      	b.n	80063e0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b02      	cmp	r3, #2
 800633c:	d11c      	bne.n	8006378 <HAL_SPI_TransmitReceive+0x26c>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006342:	b29b      	uxth	r3, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d017      	beq.n	8006378 <HAL_SPI_TransmitReceive+0x26c>
 8006348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634a:	2b01      	cmp	r3, #1
 800634c:	d114      	bne.n	8006378 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	330c      	adds	r3, #12
 8006358:	7812      	ldrb	r2, [r2, #0]
 800635a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b01      	subs	r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b01      	cmp	r3, #1
 8006384:	d119      	bne.n	80063ba <HAL_SPI_TransmitReceive+0x2ae>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800638a:	b29b      	uxth	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d014      	beq.n	80063ba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063b6:	2301      	movs	r3, #1
 80063b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063ba:	f7fd fd0d 	bl	8003dd8 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d803      	bhi.n	80063d2 <HAL_SPI_TransmitReceive+0x2c6>
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063d0:	d102      	bne.n	80063d8 <HAL_SPI_TransmitReceive+0x2cc>
 80063d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d103      	bne.n	80063e0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80063de:	e029      	b.n	8006434 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1a2      	bne.n	8006330 <HAL_SPI_TransmitReceive+0x224>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d19d      	bne.n	8006330 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 f925 	bl	8006648 <SPI_EndRxTxTransaction>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d006      	beq.n	8006412 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2220      	movs	r2, #32
 800640e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006410:	e010      	b.n	8006434 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10b      	bne.n	8006432 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800641a:	2300      	movs	r3, #0
 800641c:	617b      	str	r3, [r7, #20]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	617b      	str	r3, [r7, #20]
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	e000      	b.n	8006434 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006432:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006444:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006448:	4618      	mov	r0, r3
 800644a:	3730      	adds	r7, #48	; 0x30
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800645e:	b2db      	uxtb	r3, r3
}
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	4613      	mov	r3, r2
 800647a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800647c:	f7fd fcac 	bl	8003dd8 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	4413      	add	r3, r2
 800648a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800648c:	f7fd fca4 	bl	8003dd8 <HAL_GetTick>
 8006490:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006492:	4b39      	ldr	r3, [pc, #228]	; (8006578 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	015b      	lsls	r3, r3, #5
 8006498:	0d1b      	lsrs	r3, r3, #20
 800649a:	69fa      	ldr	r2, [r7, #28]
 800649c:	fb02 f303 	mul.w	r3, r2, r3
 80064a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064a2:	e054      	b.n	800654e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064aa:	d050      	beq.n	800654e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064ac:	f7fd fc94 	bl	8003dd8 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	69fa      	ldr	r2, [r7, #28]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d902      	bls.n	80064c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d13d      	bne.n	800653e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064da:	d111      	bne.n	8006500 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e4:	d004      	beq.n	80064f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ee:	d107      	bne.n	8006500 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006508:	d10f      	bne.n	800652a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006528:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e017      	b.n	800656e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	3b01      	subs	r3, #1
 800654c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4013      	ands	r3, r2
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	429a      	cmp	r2, r3
 800655c:	bf0c      	ite	eq
 800655e:	2301      	moveq	r3, #1
 8006560:	2300      	movne	r3, #0
 8006562:	b2db      	uxtb	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	79fb      	ldrb	r3, [r7, #7]
 8006568:	429a      	cmp	r2, r3
 800656a:	d19b      	bne.n	80064a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3720      	adds	r7, #32
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	2000201c 	.word	0x2000201c

0800657c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af02      	add	r7, sp, #8
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006590:	d111      	bne.n	80065b6 <SPI_EndRxTransaction+0x3a>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800659a:	d004      	beq.n	80065a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065a4:	d107      	bne.n	80065b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065be:	d12a      	bne.n	8006616 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c8:	d012      	beq.n	80065f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2200      	movs	r2, #0
 80065d2:	2180      	movs	r1, #128	; 0x80
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f7ff ff49 	bl	800646c <SPI_WaitFlagStateUntilTimeout>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d02d      	beq.n	800663c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e4:	f043 0220 	orr.w	r2, r3, #32
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e026      	b.n	800663e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2200      	movs	r2, #0
 80065f8:	2101      	movs	r1, #1
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f7ff ff36 	bl	800646c <SPI_WaitFlagStateUntilTimeout>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d01a      	beq.n	800663c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660a:	f043 0220 	orr.w	r2, r3, #32
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e013      	b.n	800663e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2200      	movs	r2, #0
 800661e:	2101      	movs	r1, #1
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f7ff ff23 	bl	800646c <SPI_WaitFlagStateUntilTimeout>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d007      	beq.n	800663c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006630:	f043 0220 	orr.w	r2, r3, #32
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e000      	b.n	800663e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af02      	add	r7, sp, #8
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006654:	4b1b      	ldr	r3, [pc, #108]	; (80066c4 <SPI_EndRxTxTransaction+0x7c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1b      	ldr	r2, [pc, #108]	; (80066c8 <SPI_EndRxTxTransaction+0x80>)
 800665a:	fba2 2303 	umull	r2, r3, r2, r3
 800665e:	0d5b      	lsrs	r3, r3, #21
 8006660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006664:	fb02 f303 	mul.w	r3, r2, r3
 8006668:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006672:	d112      	bne.n	800669a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2200      	movs	r2, #0
 800667c:	2180      	movs	r1, #128	; 0x80
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f7ff fef4 	bl	800646c <SPI_WaitFlagStateUntilTimeout>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d016      	beq.n	80066b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668e:	f043 0220 	orr.w	r2, r3, #32
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e00f      	b.n	80066ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00a      	beq.n	80066b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b0:	2b80      	cmp	r3, #128	; 0x80
 80066b2:	d0f2      	beq.n	800669a <SPI_EndRxTxTransaction+0x52>
 80066b4:	e000      	b.n	80066b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80066b6:	bf00      	nop
  }

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	2000201c 	.word	0x2000201c
 80066c8:	165e9f81 	.word	0x165e9f81

080066cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d001      	beq.n	80066e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e03c      	b.n	800675e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a1e      	ldr	r2, [pc, #120]	; (800676c <HAL_TIM_Base_Start+0xa0>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d018      	beq.n	8006728 <HAL_TIM_Base_Start+0x5c>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066fe:	d013      	beq.n	8006728 <HAL_TIM_Base_Start+0x5c>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a1a      	ldr	r2, [pc, #104]	; (8006770 <HAL_TIM_Base_Start+0xa4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00e      	beq.n	8006728 <HAL_TIM_Base_Start+0x5c>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a19      	ldr	r2, [pc, #100]	; (8006774 <HAL_TIM_Base_Start+0xa8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d009      	beq.n	8006728 <HAL_TIM_Base_Start+0x5c>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a17      	ldr	r2, [pc, #92]	; (8006778 <HAL_TIM_Base_Start+0xac>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d004      	beq.n	8006728 <HAL_TIM_Base_Start+0x5c>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a16      	ldr	r2, [pc, #88]	; (800677c <HAL_TIM_Base_Start+0xb0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d111      	bne.n	800674c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2b06      	cmp	r3, #6
 8006738:	d010      	beq.n	800675c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f042 0201 	orr.w	r2, r2, #1
 8006748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800674a:	e007      	b.n	800675c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f042 0201 	orr.w	r2, r2, #1
 800675a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40010000 	.word	0x40010000
 8006770:	40000400 	.word	0x40000400
 8006774:	40000800 	.word	0x40000800
 8006778:	40000c00 	.word	0x40000c00
 800677c:	40014000 	.word	0x40014000

08006780 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e041      	b.n	8006816 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fd f866 	bl	8003878 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3304      	adds	r3, #4
 80067bc:	4619      	mov	r1, r3
 80067be:	4610      	mov	r0, r2
 80067c0:	f000 fa4a 	bl	8006c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b082      	sub	sp, #8
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e041      	b.n	80068b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d106      	bne.n	800684a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7fc ffcb 	bl	80037e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2202      	movs	r2, #2
 800684e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	3304      	adds	r3, #4
 800685a:	4619      	mov	r1, r3
 800685c:	4610      	mov	r0, r2
 800685e:	f000 f9fb 	bl	8006c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d109      	bne.n	80068e0 <HAL_TIM_PWM_Start+0x24>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	bf14      	ite	ne
 80068d8:	2301      	movne	r3, #1
 80068da:	2300      	moveq	r3, #0
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	e022      	b.n	8006926 <HAL_TIM_PWM_Start+0x6a>
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d109      	bne.n	80068fa <HAL_TIM_PWM_Start+0x3e>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	bf14      	ite	ne
 80068f2:	2301      	movne	r3, #1
 80068f4:	2300      	moveq	r3, #0
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	e015      	b.n	8006926 <HAL_TIM_PWM_Start+0x6a>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d109      	bne.n	8006914 <HAL_TIM_PWM_Start+0x58>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b01      	cmp	r3, #1
 800690a:	bf14      	ite	ne
 800690c:	2301      	movne	r3, #1
 800690e:	2300      	moveq	r3, #0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	e008      	b.n	8006926 <HAL_TIM_PWM_Start+0x6a>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b01      	cmp	r3, #1
 800691e:	bf14      	ite	ne
 8006920:	2301      	movne	r3, #1
 8006922:	2300      	moveq	r3, #0
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e068      	b.n	8006a00 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d104      	bne.n	800693e <HAL_TIM_PWM_Start+0x82>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800693c:	e013      	b.n	8006966 <HAL_TIM_PWM_Start+0xaa>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b04      	cmp	r3, #4
 8006942:	d104      	bne.n	800694e <HAL_TIM_PWM_Start+0x92>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800694c:	e00b      	b.n	8006966 <HAL_TIM_PWM_Start+0xaa>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b08      	cmp	r3, #8
 8006952:	d104      	bne.n	800695e <HAL_TIM_PWM_Start+0xa2>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800695c:	e003      	b.n	8006966 <HAL_TIM_PWM_Start+0xaa>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2202      	movs	r2, #2
 8006962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2201      	movs	r2, #1
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fb7e 	bl	8007070 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a23      	ldr	r2, [pc, #140]	; (8006a08 <HAL_TIM_PWM_Start+0x14c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d107      	bne.n	800698e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800698c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a1d      	ldr	r2, [pc, #116]	; (8006a08 <HAL_TIM_PWM_Start+0x14c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d018      	beq.n	80069ca <HAL_TIM_PWM_Start+0x10e>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a0:	d013      	beq.n	80069ca <HAL_TIM_PWM_Start+0x10e>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a19      	ldr	r2, [pc, #100]	; (8006a0c <HAL_TIM_PWM_Start+0x150>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d00e      	beq.n	80069ca <HAL_TIM_PWM_Start+0x10e>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a17      	ldr	r2, [pc, #92]	; (8006a10 <HAL_TIM_PWM_Start+0x154>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d009      	beq.n	80069ca <HAL_TIM_PWM_Start+0x10e>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a16      	ldr	r2, [pc, #88]	; (8006a14 <HAL_TIM_PWM_Start+0x158>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d004      	beq.n	80069ca <HAL_TIM_PWM_Start+0x10e>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a14      	ldr	r2, [pc, #80]	; (8006a18 <HAL_TIM_PWM_Start+0x15c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d111      	bne.n	80069ee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2b06      	cmp	r3, #6
 80069da:	d010      	beq.n	80069fe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0201 	orr.w	r2, r2, #1
 80069ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ec:	e007      	b.n	80069fe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f042 0201 	orr.w	r2, r2, #1
 80069fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	40010000 	.word	0x40010000
 8006a0c:	40000400 	.word	0x40000400
 8006a10:	40000800 	.word	0x40000800
 8006a14:	40000c00 	.word	0x40000c00
 8006a18:	40014000 	.word	0x40014000

08006a1c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <HAL_TIM_OC_ConfigChannel+0x1e>
 8006a36:	2302      	movs	r3, #2
 8006a38:	e048      	b.n	8006acc <HAL_TIM_OC_ConfigChannel+0xb0>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b0c      	cmp	r3, #12
 8006a46:	d839      	bhi.n	8006abc <HAL_TIM_OC_ConfigChannel+0xa0>
 8006a48:	a201      	add	r2, pc, #4	; (adr r2, 8006a50 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4e:	bf00      	nop
 8006a50:	08006a85 	.word	0x08006a85
 8006a54:	08006abd 	.word	0x08006abd
 8006a58:	08006abd 	.word	0x08006abd
 8006a5c:	08006abd 	.word	0x08006abd
 8006a60:	08006a93 	.word	0x08006a93
 8006a64:	08006abd 	.word	0x08006abd
 8006a68:	08006abd 	.word	0x08006abd
 8006a6c:	08006abd 	.word	0x08006abd
 8006a70:	08006aa1 	.word	0x08006aa1
 8006a74:	08006abd 	.word	0x08006abd
 8006a78:	08006abd 	.word	0x08006abd
 8006a7c:	08006abd 	.word	0x08006abd
 8006a80:	08006aaf 	.word	0x08006aaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 f964 	bl	8006d58 <TIM_OC1_SetConfig>
      break;
 8006a90:	e017      	b.n	8006ac2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68b9      	ldr	r1, [r7, #8]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 f9c3 	bl	8006e24 <TIM_OC2_SetConfig>
      break;
 8006a9e:	e010      	b.n	8006ac2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f000 fa28 	bl	8006efc <TIM_OC3_SetConfig>
      break;
 8006aac:	e009      	b.n	8006ac2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 fa8b 	bl	8006fd0 <TIM_OC4_SetConfig>
      break;
 8006aba:	e002      	b.n	8006ac2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d101      	bne.n	8006af2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006aee:	2302      	movs	r3, #2
 8006af0:	e0ae      	b.n	8006c50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b0c      	cmp	r3, #12
 8006afe:	f200 809f 	bhi.w	8006c40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b02:	a201      	add	r2, pc, #4	; (adr r2, 8006b08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b08:	08006b3d 	.word	0x08006b3d
 8006b0c:	08006c41 	.word	0x08006c41
 8006b10:	08006c41 	.word	0x08006c41
 8006b14:	08006c41 	.word	0x08006c41
 8006b18:	08006b7d 	.word	0x08006b7d
 8006b1c:	08006c41 	.word	0x08006c41
 8006b20:	08006c41 	.word	0x08006c41
 8006b24:	08006c41 	.word	0x08006c41
 8006b28:	08006bbf 	.word	0x08006bbf
 8006b2c:	08006c41 	.word	0x08006c41
 8006b30:	08006c41 	.word	0x08006c41
 8006b34:	08006c41 	.word	0x08006c41
 8006b38:	08006bff 	.word	0x08006bff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68b9      	ldr	r1, [r7, #8]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 f908 	bl	8006d58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699a      	ldr	r2, [r3, #24]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0208 	orr.w	r2, r2, #8
 8006b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699a      	ldr	r2, [r3, #24]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 0204 	bic.w	r2, r2, #4
 8006b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6999      	ldr	r1, [r3, #24]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	691a      	ldr	r2, [r3, #16]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	619a      	str	r2, [r3, #24]
      break;
 8006b7a:	e064      	b.n	8006c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68b9      	ldr	r1, [r7, #8]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 f94e 	bl	8006e24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699a      	ldr	r2, [r3, #24]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	699a      	ldr	r2, [r3, #24]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6999      	ldr	r1, [r3, #24]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	021a      	lsls	r2, r3, #8
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	619a      	str	r2, [r3, #24]
      break;
 8006bbc:	e043      	b.n	8006c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68b9      	ldr	r1, [r7, #8]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 f999 	bl	8006efc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f042 0208 	orr.w	r2, r2, #8
 8006bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69da      	ldr	r2, [r3, #28]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0204 	bic.w	r2, r2, #4
 8006be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69d9      	ldr	r1, [r3, #28]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	691a      	ldr	r2, [r3, #16]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	61da      	str	r2, [r3, #28]
      break;
 8006bfc:	e023      	b.n	8006c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68b9      	ldr	r1, [r7, #8]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 f9e3 	bl	8006fd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69da      	ldr	r2, [r3, #28]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69da      	ldr	r2, [r3, #28]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69d9      	ldr	r1, [r3, #28]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	021a      	lsls	r2, r3, #8
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	61da      	str	r2, [r3, #28]
      break;
 8006c3e:	e002      	b.n	8006c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	75fb      	strb	r3, [r7, #23]
      break;
 8006c44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a34      	ldr	r2, [pc, #208]	; (8006d3c <TIM_Base_SetConfig+0xe4>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00f      	beq.n	8006c90 <TIM_Base_SetConfig+0x38>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c76:	d00b      	beq.n	8006c90 <TIM_Base_SetConfig+0x38>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a31      	ldr	r2, [pc, #196]	; (8006d40 <TIM_Base_SetConfig+0xe8>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d007      	beq.n	8006c90 <TIM_Base_SetConfig+0x38>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a30      	ldr	r2, [pc, #192]	; (8006d44 <TIM_Base_SetConfig+0xec>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d003      	beq.n	8006c90 <TIM_Base_SetConfig+0x38>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a2f      	ldr	r2, [pc, #188]	; (8006d48 <TIM_Base_SetConfig+0xf0>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d108      	bne.n	8006ca2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a25      	ldr	r2, [pc, #148]	; (8006d3c <TIM_Base_SetConfig+0xe4>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d01b      	beq.n	8006ce2 <TIM_Base_SetConfig+0x8a>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb0:	d017      	beq.n	8006ce2 <TIM_Base_SetConfig+0x8a>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a22      	ldr	r2, [pc, #136]	; (8006d40 <TIM_Base_SetConfig+0xe8>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d013      	beq.n	8006ce2 <TIM_Base_SetConfig+0x8a>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a21      	ldr	r2, [pc, #132]	; (8006d44 <TIM_Base_SetConfig+0xec>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00f      	beq.n	8006ce2 <TIM_Base_SetConfig+0x8a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a20      	ldr	r2, [pc, #128]	; (8006d48 <TIM_Base_SetConfig+0xf0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d00b      	beq.n	8006ce2 <TIM_Base_SetConfig+0x8a>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a1f      	ldr	r2, [pc, #124]	; (8006d4c <TIM_Base_SetConfig+0xf4>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d007      	beq.n	8006ce2 <TIM_Base_SetConfig+0x8a>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a1e      	ldr	r2, [pc, #120]	; (8006d50 <TIM_Base_SetConfig+0xf8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d003      	beq.n	8006ce2 <TIM_Base_SetConfig+0x8a>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a1d      	ldr	r2, [pc, #116]	; (8006d54 <TIM_Base_SetConfig+0xfc>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d108      	bne.n	8006cf4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a08      	ldr	r2, [pc, #32]	; (8006d3c <TIM_Base_SetConfig+0xe4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d103      	bne.n	8006d28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	615a      	str	r2, [r3, #20]
}
 8006d2e:	bf00      	nop
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	40010000 	.word	0x40010000
 8006d40:	40000400 	.word	0x40000400
 8006d44:	40000800 	.word	0x40000800
 8006d48:	40000c00 	.word	0x40000c00
 8006d4c:	40014000 	.word	0x40014000
 8006d50:	40014400 	.word	0x40014400
 8006d54:	40014800 	.word	0x40014800

08006d58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	f023 0201 	bic.w	r2, r3, #1
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0303 	bic.w	r3, r3, #3
 8006d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f023 0302 	bic.w	r3, r3, #2
 8006da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a1c      	ldr	r2, [pc, #112]	; (8006e20 <TIM_OC1_SetConfig+0xc8>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d10c      	bne.n	8006dce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f023 0308 	bic.w	r3, r3, #8
 8006dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f023 0304 	bic.w	r3, r3, #4
 8006dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a13      	ldr	r2, [pc, #76]	; (8006e20 <TIM_OC1_SetConfig+0xc8>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d111      	bne.n	8006dfa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	621a      	str	r2, [r3, #32]
}
 8006e14:	bf00      	nop
 8006e16:	371c      	adds	r7, #28
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	40010000 	.word	0x40010000

08006e24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	f023 0210 	bic.w	r2, r3, #16
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	021b      	lsls	r3, r3, #8
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f023 0320 	bic.w	r3, r3, #32
 8006e6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	011b      	lsls	r3, r3, #4
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a1e      	ldr	r2, [pc, #120]	; (8006ef8 <TIM_OC2_SetConfig+0xd4>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d10d      	bne.n	8006ea0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	011b      	lsls	r3, r3, #4
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a15      	ldr	r2, [pc, #84]	; (8006ef8 <TIM_OC2_SetConfig+0xd4>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d113      	bne.n	8006ed0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	621a      	str	r2, [r3, #32]
}
 8006eea:	bf00      	nop
 8006eec:	371c      	adds	r7, #28
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	40010000 	.word	0x40010000

08006efc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 0303 	bic.w	r3, r3, #3
 8006f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	021b      	lsls	r3, r3, #8
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a1d      	ldr	r2, [pc, #116]	; (8006fcc <TIM_OC3_SetConfig+0xd0>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d10d      	bne.n	8006f76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	021b      	lsls	r3, r3, #8
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a14      	ldr	r2, [pc, #80]	; (8006fcc <TIM_OC3_SetConfig+0xd0>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d113      	bne.n	8006fa6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	011b      	lsls	r3, r3, #4
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	621a      	str	r2, [r3, #32]
}
 8006fc0:	bf00      	nop
 8006fc2:	371c      	adds	r7, #28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	40010000 	.word	0x40010000

08006fd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	021b      	lsls	r3, r3, #8
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	4313      	orrs	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800701a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	031b      	lsls	r3, r3, #12
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	4313      	orrs	r3, r2
 8007026:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a10      	ldr	r2, [pc, #64]	; (800706c <TIM_OC4_SetConfig+0x9c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d109      	bne.n	8007044 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007036:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	019b      	lsls	r3, r3, #6
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4313      	orrs	r3, r2
 8007042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	621a      	str	r2, [r3, #32]
}
 800705e:	bf00      	nop
 8007060:	371c      	adds	r7, #28
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	40010000 	.word	0x40010000

08007070 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f003 031f 	and.w	r3, r3, #31
 8007082:	2201      	movs	r2, #1
 8007084:	fa02 f303 	lsl.w	r3, r2, r3
 8007088:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6a1a      	ldr	r2, [r3, #32]
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	43db      	mvns	r3, r3
 8007092:	401a      	ands	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6a1a      	ldr	r2, [r3, #32]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f003 031f 	and.w	r3, r3, #31
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	fa01 f303 	lsl.w	r3, r1, r3
 80070a8:	431a      	orrs	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	621a      	str	r2, [r3, #32]
}
 80070ae:	bf00      	nop
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
	...

080070bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e050      	b.n	8007176 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a1c      	ldr	r2, [pc, #112]	; (8007184 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d018      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007120:	d013      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a18      	ldr	r2, [pc, #96]	; (8007188 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00e      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a16      	ldr	r2, [pc, #88]	; (800718c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d009      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a15      	ldr	r2, [pc, #84]	; (8007190 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d004      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a13      	ldr	r2, [pc, #76]	; (8007194 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d10c      	bne.n	8007164 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	4313      	orrs	r3, r2
 800715a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	40010000 	.word	0x40010000
 8007188:	40000400 	.word	0x40000400
 800718c:	40000800 	.word	0x40000800
 8007190:	40000c00 	.word	0x40000c00
 8007194:	40014000 	.word	0x40014000

08007198 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d101      	bne.n	80071b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80071b0:	2302      	movs	r3, #2
 80071b2:	e03d      	b.n	8007230 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	4313      	orrs	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	4313      	orrs	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	69db      	ldr	r3, [r3, #28]
 800721a:	4313      	orrs	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e047      	b.n	80072de <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d106      	bne.n	8007268 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fc fbd4 	bl	8003a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2224      	movs	r2, #36	; 0x24
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800727e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f931 	bl	80074e8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	691a      	ldr	r2, [r3, #16]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007294:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	695a      	ldr	r2, [r3, #20]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80072a4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	695a      	ldr	r2, [r3, #20]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f042 0208 	orr.w	r2, r2, #8
 80072b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b08a      	sub	sp, #40	; 0x28
 80072ea:	af02      	add	r7, sp, #8
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	603b      	str	r3, [r7, #0]
 80072f2:	4613      	mov	r3, r2
 80072f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b20      	cmp	r3, #32
 8007304:	d17c      	bne.n	8007400 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d002      	beq.n	8007312 <HAL_UART_Transmit+0x2c>
 800730c:	88fb      	ldrh	r3, [r7, #6]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e075      	b.n	8007402 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731c:	2b01      	cmp	r3, #1
 800731e:	d101      	bne.n	8007324 <HAL_UART_Transmit+0x3e>
 8007320:	2302      	movs	r3, #2
 8007322:	e06e      	b.n	8007402 <HAL_UART_Transmit+0x11c>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2221      	movs	r2, #33	; 0x21
 8007336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800733a:	f7fc fd4d 	bl	8003dd8 <HAL_GetTick>
 800733e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	88fa      	ldrh	r2, [r7, #6]
 8007344:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	88fa      	ldrh	r2, [r7, #6]
 800734a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007354:	d108      	bne.n	8007368 <HAL_UART_Transmit+0x82>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d104      	bne.n	8007368 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800735e:	2300      	movs	r3, #0
 8007360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	61bb      	str	r3, [r7, #24]
 8007366:	e003      	b.n	8007370 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800736c:	2300      	movs	r3, #0
 800736e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007378:	e02a      	b.n	80073d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	2200      	movs	r2, #0
 8007382:	2180      	movs	r1, #128	; 0x80
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 f840 	bl	800740a <UART_WaitOnFlagUntilTimeout>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e036      	b.n	8007402 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10b      	bne.n	80073b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	461a      	mov	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	3302      	adds	r3, #2
 80073ae:	61bb      	str	r3, [r7, #24]
 80073b0:	e007      	b.n	80073c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	781a      	ldrb	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	3301      	adds	r3, #1
 80073c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	3b01      	subs	r3, #1
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1cf      	bne.n	800737a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2200      	movs	r2, #0
 80073e2:	2140      	movs	r1, #64	; 0x40
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 f810 	bl	800740a <UART_WaitOnFlagUntilTimeout>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e006      	b.n	8007402 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80073fc:	2300      	movs	r3, #0
 80073fe:	e000      	b.n	8007402 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007400:	2302      	movs	r3, #2
  }
}
 8007402:	4618      	mov	r0, r3
 8007404:	3720      	adds	r7, #32
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b090      	sub	sp, #64	; 0x40
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	603b      	str	r3, [r7, #0]
 8007416:	4613      	mov	r3, r2
 8007418:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800741a:	e050      	b.n	80074be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800741c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007422:	d04c      	beq.n	80074be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007426:	2b00      	cmp	r3, #0
 8007428:	d007      	beq.n	800743a <UART_WaitOnFlagUntilTimeout+0x30>
 800742a:	f7fc fcd5 	bl	8003dd8 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007436:	429a      	cmp	r2, r3
 8007438:	d241      	bcs.n	80074be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	330c      	adds	r3, #12
 8007440:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	330c      	adds	r3, #12
 8007458:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800745a:	637a      	str	r2, [r7, #52]	; 0x34
 800745c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007462:	e841 2300 	strex	r3, r2, [r1]
 8007466:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1e5      	bne.n	800743a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3314      	adds	r3, #20
 8007474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	613b      	str	r3, [r7, #16]
   return(result);
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f023 0301 	bic.w	r3, r3, #1
 8007484:	63bb      	str	r3, [r7, #56]	; 0x38
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3314      	adds	r3, #20
 800748c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800748e:	623a      	str	r2, [r7, #32]
 8007490:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007492:	69f9      	ldr	r1, [r7, #28]
 8007494:	6a3a      	ldr	r2, [r7, #32]
 8007496:	e841 2300 	strex	r3, r2, [r1]
 800749a:	61bb      	str	r3, [r7, #24]
   return(result);
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1e5      	bne.n	800746e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e00f      	b.n	80074de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4013      	ands	r3, r2
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	bf0c      	ite	eq
 80074ce:	2301      	moveq	r3, #1
 80074d0:	2300      	movne	r3, #0
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d09f      	beq.n	800741c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3740      	adds	r7, #64	; 0x40
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
	...

080074e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ec:	b09f      	sub	sp, #124	; 0x7c
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074fe:	68d9      	ldr	r1, [r3, #12]
 8007500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	ea40 0301 	orr.w	r3, r0, r1
 8007508:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800750a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800750c:	689a      	ldr	r2, [r3, #8]
 800750e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	431a      	orrs	r2, r3
 8007514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	431a      	orrs	r2, r3
 800751a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	4313      	orrs	r3, r2
 8007520:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800752c:	f021 010c 	bic.w	r1, r1, #12
 8007530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007536:	430b      	orrs	r3, r1
 8007538:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800753a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007546:	6999      	ldr	r1, [r3, #24]
 8007548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	ea40 0301 	orr.w	r3, r0, r1
 8007550:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	4bc5      	ldr	r3, [pc, #788]	; (800786c <UART_SetConfig+0x384>)
 8007558:	429a      	cmp	r2, r3
 800755a:	d004      	beq.n	8007566 <UART_SetConfig+0x7e>
 800755c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	4bc3      	ldr	r3, [pc, #780]	; (8007870 <UART_SetConfig+0x388>)
 8007562:	429a      	cmp	r2, r3
 8007564:	d103      	bne.n	800756e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007566:	f7fe fae7 	bl	8005b38 <HAL_RCC_GetPCLK2Freq>
 800756a:	6778      	str	r0, [r7, #116]	; 0x74
 800756c:	e002      	b.n	8007574 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800756e:	f7fe facf 	bl	8005b10 <HAL_RCC_GetPCLK1Freq>
 8007572:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007576:	69db      	ldr	r3, [r3, #28]
 8007578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800757c:	f040 80b6 	bne.w	80076ec <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007582:	461c      	mov	r4, r3
 8007584:	f04f 0500 	mov.w	r5, #0
 8007588:	4622      	mov	r2, r4
 800758a:	462b      	mov	r3, r5
 800758c:	1891      	adds	r1, r2, r2
 800758e:	6439      	str	r1, [r7, #64]	; 0x40
 8007590:	415b      	adcs	r3, r3
 8007592:	647b      	str	r3, [r7, #68]	; 0x44
 8007594:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007598:	1912      	adds	r2, r2, r4
 800759a:	eb45 0303 	adc.w	r3, r5, r3
 800759e:	f04f 0000 	mov.w	r0, #0
 80075a2:	f04f 0100 	mov.w	r1, #0
 80075a6:	00d9      	lsls	r1, r3, #3
 80075a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075ac:	00d0      	lsls	r0, r2, #3
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	1911      	adds	r1, r2, r4
 80075b4:	6639      	str	r1, [r7, #96]	; 0x60
 80075b6:	416b      	adcs	r3, r5
 80075b8:	667b      	str	r3, [r7, #100]	; 0x64
 80075ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	461a      	mov	r2, r3
 80075c0:	f04f 0300 	mov.w	r3, #0
 80075c4:	1891      	adds	r1, r2, r2
 80075c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80075c8:	415b      	adcs	r3, r3
 80075ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80075d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80075d4:	f7f9 fb40 	bl	8000c58 <__aeabi_uldivmod>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4ba5      	ldr	r3, [pc, #660]	; (8007874 <UART_SetConfig+0x38c>)
 80075de:	fba3 2302 	umull	r2, r3, r3, r2
 80075e2:	095b      	lsrs	r3, r3, #5
 80075e4:	011e      	lsls	r6, r3, #4
 80075e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075e8:	461c      	mov	r4, r3
 80075ea:	f04f 0500 	mov.w	r5, #0
 80075ee:	4622      	mov	r2, r4
 80075f0:	462b      	mov	r3, r5
 80075f2:	1891      	adds	r1, r2, r2
 80075f4:	6339      	str	r1, [r7, #48]	; 0x30
 80075f6:	415b      	adcs	r3, r3
 80075f8:	637b      	str	r3, [r7, #52]	; 0x34
 80075fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80075fe:	1912      	adds	r2, r2, r4
 8007600:	eb45 0303 	adc.w	r3, r5, r3
 8007604:	f04f 0000 	mov.w	r0, #0
 8007608:	f04f 0100 	mov.w	r1, #0
 800760c:	00d9      	lsls	r1, r3, #3
 800760e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007612:	00d0      	lsls	r0, r2, #3
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	1911      	adds	r1, r2, r4
 800761a:	65b9      	str	r1, [r7, #88]	; 0x58
 800761c:	416b      	adcs	r3, r5
 800761e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	461a      	mov	r2, r3
 8007626:	f04f 0300 	mov.w	r3, #0
 800762a:	1891      	adds	r1, r2, r2
 800762c:	62b9      	str	r1, [r7, #40]	; 0x28
 800762e:	415b      	adcs	r3, r3
 8007630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007632:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007636:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800763a:	f7f9 fb0d 	bl	8000c58 <__aeabi_uldivmod>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	4b8c      	ldr	r3, [pc, #560]	; (8007874 <UART_SetConfig+0x38c>)
 8007644:	fba3 1302 	umull	r1, r3, r3, r2
 8007648:	095b      	lsrs	r3, r3, #5
 800764a:	2164      	movs	r1, #100	; 0x64
 800764c:	fb01 f303 	mul.w	r3, r1, r3
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	00db      	lsls	r3, r3, #3
 8007654:	3332      	adds	r3, #50	; 0x32
 8007656:	4a87      	ldr	r2, [pc, #540]	; (8007874 <UART_SetConfig+0x38c>)
 8007658:	fba2 2303 	umull	r2, r3, r2, r3
 800765c:	095b      	lsrs	r3, r3, #5
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007664:	441e      	add	r6, r3
 8007666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007668:	4618      	mov	r0, r3
 800766a:	f04f 0100 	mov.w	r1, #0
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	1894      	adds	r4, r2, r2
 8007674:	623c      	str	r4, [r7, #32]
 8007676:	415b      	adcs	r3, r3
 8007678:	627b      	str	r3, [r7, #36]	; 0x24
 800767a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800767e:	1812      	adds	r2, r2, r0
 8007680:	eb41 0303 	adc.w	r3, r1, r3
 8007684:	f04f 0400 	mov.w	r4, #0
 8007688:	f04f 0500 	mov.w	r5, #0
 800768c:	00dd      	lsls	r5, r3, #3
 800768e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007692:	00d4      	lsls	r4, r2, #3
 8007694:	4622      	mov	r2, r4
 8007696:	462b      	mov	r3, r5
 8007698:	1814      	adds	r4, r2, r0
 800769a:	653c      	str	r4, [r7, #80]	; 0x50
 800769c:	414b      	adcs	r3, r1
 800769e:	657b      	str	r3, [r7, #84]	; 0x54
 80076a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	461a      	mov	r2, r3
 80076a6:	f04f 0300 	mov.w	r3, #0
 80076aa:	1891      	adds	r1, r2, r2
 80076ac:	61b9      	str	r1, [r7, #24]
 80076ae:	415b      	adcs	r3, r3
 80076b0:	61fb      	str	r3, [r7, #28]
 80076b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80076ba:	f7f9 facd 	bl	8000c58 <__aeabi_uldivmod>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	4b6c      	ldr	r3, [pc, #432]	; (8007874 <UART_SetConfig+0x38c>)
 80076c4:	fba3 1302 	umull	r1, r3, r3, r2
 80076c8:	095b      	lsrs	r3, r3, #5
 80076ca:	2164      	movs	r1, #100	; 0x64
 80076cc:	fb01 f303 	mul.w	r3, r1, r3
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	3332      	adds	r3, #50	; 0x32
 80076d6:	4a67      	ldr	r2, [pc, #412]	; (8007874 <UART_SetConfig+0x38c>)
 80076d8:	fba2 2303 	umull	r2, r3, r2, r3
 80076dc:	095b      	lsrs	r3, r3, #5
 80076de:	f003 0207 	and.w	r2, r3, #7
 80076e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4432      	add	r2, r6
 80076e8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076ea:	e0b9      	b.n	8007860 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076ee:	461c      	mov	r4, r3
 80076f0:	f04f 0500 	mov.w	r5, #0
 80076f4:	4622      	mov	r2, r4
 80076f6:	462b      	mov	r3, r5
 80076f8:	1891      	adds	r1, r2, r2
 80076fa:	6139      	str	r1, [r7, #16]
 80076fc:	415b      	adcs	r3, r3
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007704:	1912      	adds	r2, r2, r4
 8007706:	eb45 0303 	adc.w	r3, r5, r3
 800770a:	f04f 0000 	mov.w	r0, #0
 800770e:	f04f 0100 	mov.w	r1, #0
 8007712:	00d9      	lsls	r1, r3, #3
 8007714:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007718:	00d0      	lsls	r0, r2, #3
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	eb12 0804 	adds.w	r8, r2, r4
 8007722:	eb43 0905 	adc.w	r9, r3, r5
 8007726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	4618      	mov	r0, r3
 800772c:	f04f 0100 	mov.w	r1, #0
 8007730:	f04f 0200 	mov.w	r2, #0
 8007734:	f04f 0300 	mov.w	r3, #0
 8007738:	008b      	lsls	r3, r1, #2
 800773a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800773e:	0082      	lsls	r2, r0, #2
 8007740:	4640      	mov	r0, r8
 8007742:	4649      	mov	r1, r9
 8007744:	f7f9 fa88 	bl	8000c58 <__aeabi_uldivmod>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	4b49      	ldr	r3, [pc, #292]	; (8007874 <UART_SetConfig+0x38c>)
 800774e:	fba3 2302 	umull	r2, r3, r3, r2
 8007752:	095b      	lsrs	r3, r3, #5
 8007754:	011e      	lsls	r6, r3, #4
 8007756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007758:	4618      	mov	r0, r3
 800775a:	f04f 0100 	mov.w	r1, #0
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	1894      	adds	r4, r2, r2
 8007764:	60bc      	str	r4, [r7, #8]
 8007766:	415b      	adcs	r3, r3
 8007768:	60fb      	str	r3, [r7, #12]
 800776a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800776e:	1812      	adds	r2, r2, r0
 8007770:	eb41 0303 	adc.w	r3, r1, r3
 8007774:	f04f 0400 	mov.w	r4, #0
 8007778:	f04f 0500 	mov.w	r5, #0
 800777c:	00dd      	lsls	r5, r3, #3
 800777e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007782:	00d4      	lsls	r4, r2, #3
 8007784:	4622      	mov	r2, r4
 8007786:	462b      	mov	r3, r5
 8007788:	1814      	adds	r4, r2, r0
 800778a:	64bc      	str	r4, [r7, #72]	; 0x48
 800778c:	414b      	adcs	r3, r1
 800778e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	4618      	mov	r0, r3
 8007796:	f04f 0100 	mov.w	r1, #0
 800779a:	f04f 0200 	mov.w	r2, #0
 800779e:	f04f 0300 	mov.w	r3, #0
 80077a2:	008b      	lsls	r3, r1, #2
 80077a4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80077a8:	0082      	lsls	r2, r0, #2
 80077aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80077ae:	f7f9 fa53 	bl	8000c58 <__aeabi_uldivmod>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4b2f      	ldr	r3, [pc, #188]	; (8007874 <UART_SetConfig+0x38c>)
 80077b8:	fba3 1302 	umull	r1, r3, r3, r2
 80077bc:	095b      	lsrs	r3, r3, #5
 80077be:	2164      	movs	r1, #100	; 0x64
 80077c0:	fb01 f303 	mul.w	r3, r1, r3
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	011b      	lsls	r3, r3, #4
 80077c8:	3332      	adds	r3, #50	; 0x32
 80077ca:	4a2a      	ldr	r2, [pc, #168]	; (8007874 <UART_SetConfig+0x38c>)
 80077cc:	fba2 2303 	umull	r2, r3, r2, r3
 80077d0:	095b      	lsrs	r3, r3, #5
 80077d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077d6:	441e      	add	r6, r3
 80077d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077da:	4618      	mov	r0, r3
 80077dc:	f04f 0100 	mov.w	r1, #0
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	1894      	adds	r4, r2, r2
 80077e6:	603c      	str	r4, [r7, #0]
 80077e8:	415b      	adcs	r3, r3
 80077ea:	607b      	str	r3, [r7, #4]
 80077ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077f0:	1812      	adds	r2, r2, r0
 80077f2:	eb41 0303 	adc.w	r3, r1, r3
 80077f6:	f04f 0400 	mov.w	r4, #0
 80077fa:	f04f 0500 	mov.w	r5, #0
 80077fe:	00dd      	lsls	r5, r3, #3
 8007800:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007804:	00d4      	lsls	r4, r2, #3
 8007806:	4622      	mov	r2, r4
 8007808:	462b      	mov	r3, r5
 800780a:	eb12 0a00 	adds.w	sl, r2, r0
 800780e:	eb43 0b01 	adc.w	fp, r3, r1
 8007812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	4618      	mov	r0, r3
 8007818:	f04f 0100 	mov.w	r1, #0
 800781c:	f04f 0200 	mov.w	r2, #0
 8007820:	f04f 0300 	mov.w	r3, #0
 8007824:	008b      	lsls	r3, r1, #2
 8007826:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800782a:	0082      	lsls	r2, r0, #2
 800782c:	4650      	mov	r0, sl
 800782e:	4659      	mov	r1, fp
 8007830:	f7f9 fa12 	bl	8000c58 <__aeabi_uldivmod>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4b0e      	ldr	r3, [pc, #56]	; (8007874 <UART_SetConfig+0x38c>)
 800783a:	fba3 1302 	umull	r1, r3, r3, r2
 800783e:	095b      	lsrs	r3, r3, #5
 8007840:	2164      	movs	r1, #100	; 0x64
 8007842:	fb01 f303 	mul.w	r3, r1, r3
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	011b      	lsls	r3, r3, #4
 800784a:	3332      	adds	r3, #50	; 0x32
 800784c:	4a09      	ldr	r2, [pc, #36]	; (8007874 <UART_SetConfig+0x38c>)
 800784e:	fba2 2303 	umull	r2, r3, r2, r3
 8007852:	095b      	lsrs	r3, r3, #5
 8007854:	f003 020f 	and.w	r2, r3, #15
 8007858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4432      	add	r2, r6
 800785e:	609a      	str	r2, [r3, #8]
}
 8007860:	bf00      	nop
 8007862:	377c      	adds	r7, #124	; 0x7c
 8007864:	46bd      	mov	sp, r7
 8007866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800786a:	bf00      	nop
 800786c:	40011000 	.word	0x40011000
 8007870:	40011400 	.word	0x40011400
 8007874:	51eb851f 	.word	0x51eb851f

08007878 <__errno>:
 8007878:	4b01      	ldr	r3, [pc, #4]	; (8007880 <__errno+0x8>)
 800787a:	6818      	ldr	r0, [r3, #0]
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	20002028 	.word	0x20002028

08007884 <__libc_init_array>:
 8007884:	b570      	push	{r4, r5, r6, lr}
 8007886:	4d0d      	ldr	r5, [pc, #52]	; (80078bc <__libc_init_array+0x38>)
 8007888:	4c0d      	ldr	r4, [pc, #52]	; (80078c0 <__libc_init_array+0x3c>)
 800788a:	1b64      	subs	r4, r4, r5
 800788c:	10a4      	asrs	r4, r4, #2
 800788e:	2600      	movs	r6, #0
 8007890:	42a6      	cmp	r6, r4
 8007892:	d109      	bne.n	80078a8 <__libc_init_array+0x24>
 8007894:	4d0b      	ldr	r5, [pc, #44]	; (80078c4 <__libc_init_array+0x40>)
 8007896:	4c0c      	ldr	r4, [pc, #48]	; (80078c8 <__libc_init_array+0x44>)
 8007898:	f003 fd86 	bl	800b3a8 <_init>
 800789c:	1b64      	subs	r4, r4, r5
 800789e:	10a4      	asrs	r4, r4, #2
 80078a0:	2600      	movs	r6, #0
 80078a2:	42a6      	cmp	r6, r4
 80078a4:	d105      	bne.n	80078b2 <__libc_init_array+0x2e>
 80078a6:	bd70      	pop	{r4, r5, r6, pc}
 80078a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ac:	4798      	blx	r3
 80078ae:	3601      	adds	r6, #1
 80078b0:	e7ee      	b.n	8007890 <__libc_init_array+0xc>
 80078b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b6:	4798      	blx	r3
 80078b8:	3601      	adds	r6, #1
 80078ba:	e7f2      	b.n	80078a2 <__libc_init_array+0x1e>
 80078bc:	0800bcb0 	.word	0x0800bcb0
 80078c0:	0800bcb0 	.word	0x0800bcb0
 80078c4:	0800bcb0 	.word	0x0800bcb0
 80078c8:	0800bcb4 	.word	0x0800bcb4

080078cc <memset>:
 80078cc:	4402      	add	r2, r0
 80078ce:	4603      	mov	r3, r0
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d100      	bne.n	80078d6 <memset+0xa>
 80078d4:	4770      	bx	lr
 80078d6:	f803 1b01 	strb.w	r1, [r3], #1
 80078da:	e7f9      	b.n	80078d0 <memset+0x4>

080078dc <__cvt>:
 80078dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078e0:	ec55 4b10 	vmov	r4, r5, d0
 80078e4:	2d00      	cmp	r5, #0
 80078e6:	460e      	mov	r6, r1
 80078e8:	4619      	mov	r1, r3
 80078ea:	462b      	mov	r3, r5
 80078ec:	bfbb      	ittet	lt
 80078ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80078f2:	461d      	movlt	r5, r3
 80078f4:	2300      	movge	r3, #0
 80078f6:	232d      	movlt	r3, #45	; 0x2d
 80078f8:	700b      	strb	r3, [r1, #0]
 80078fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007900:	4691      	mov	r9, r2
 8007902:	f023 0820 	bic.w	r8, r3, #32
 8007906:	bfbc      	itt	lt
 8007908:	4622      	movlt	r2, r4
 800790a:	4614      	movlt	r4, r2
 800790c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007910:	d005      	beq.n	800791e <__cvt+0x42>
 8007912:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007916:	d100      	bne.n	800791a <__cvt+0x3e>
 8007918:	3601      	adds	r6, #1
 800791a:	2102      	movs	r1, #2
 800791c:	e000      	b.n	8007920 <__cvt+0x44>
 800791e:	2103      	movs	r1, #3
 8007920:	ab03      	add	r3, sp, #12
 8007922:	9301      	str	r3, [sp, #4]
 8007924:	ab02      	add	r3, sp, #8
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	ec45 4b10 	vmov	d0, r4, r5
 800792c:	4653      	mov	r3, sl
 800792e:	4632      	mov	r2, r6
 8007930:	f000 fcea 	bl	8008308 <_dtoa_r>
 8007934:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007938:	4607      	mov	r7, r0
 800793a:	d102      	bne.n	8007942 <__cvt+0x66>
 800793c:	f019 0f01 	tst.w	r9, #1
 8007940:	d022      	beq.n	8007988 <__cvt+0xac>
 8007942:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007946:	eb07 0906 	add.w	r9, r7, r6
 800794a:	d110      	bne.n	800796e <__cvt+0x92>
 800794c:	783b      	ldrb	r3, [r7, #0]
 800794e:	2b30      	cmp	r3, #48	; 0x30
 8007950:	d10a      	bne.n	8007968 <__cvt+0x8c>
 8007952:	2200      	movs	r2, #0
 8007954:	2300      	movs	r3, #0
 8007956:	4620      	mov	r0, r4
 8007958:	4629      	mov	r1, r5
 800795a:	f7f9 f8bd 	bl	8000ad8 <__aeabi_dcmpeq>
 800795e:	b918      	cbnz	r0, 8007968 <__cvt+0x8c>
 8007960:	f1c6 0601 	rsb	r6, r6, #1
 8007964:	f8ca 6000 	str.w	r6, [sl]
 8007968:	f8da 3000 	ldr.w	r3, [sl]
 800796c:	4499      	add	r9, r3
 800796e:	2200      	movs	r2, #0
 8007970:	2300      	movs	r3, #0
 8007972:	4620      	mov	r0, r4
 8007974:	4629      	mov	r1, r5
 8007976:	f7f9 f8af 	bl	8000ad8 <__aeabi_dcmpeq>
 800797a:	b108      	cbz	r0, 8007980 <__cvt+0xa4>
 800797c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007980:	2230      	movs	r2, #48	; 0x30
 8007982:	9b03      	ldr	r3, [sp, #12]
 8007984:	454b      	cmp	r3, r9
 8007986:	d307      	bcc.n	8007998 <__cvt+0xbc>
 8007988:	9b03      	ldr	r3, [sp, #12]
 800798a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800798c:	1bdb      	subs	r3, r3, r7
 800798e:	4638      	mov	r0, r7
 8007990:	6013      	str	r3, [r2, #0]
 8007992:	b004      	add	sp, #16
 8007994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007998:	1c59      	adds	r1, r3, #1
 800799a:	9103      	str	r1, [sp, #12]
 800799c:	701a      	strb	r2, [r3, #0]
 800799e:	e7f0      	b.n	8007982 <__cvt+0xa6>

080079a0 <__exponent>:
 80079a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079a2:	4603      	mov	r3, r0
 80079a4:	2900      	cmp	r1, #0
 80079a6:	bfb8      	it	lt
 80079a8:	4249      	neglt	r1, r1
 80079aa:	f803 2b02 	strb.w	r2, [r3], #2
 80079ae:	bfb4      	ite	lt
 80079b0:	222d      	movlt	r2, #45	; 0x2d
 80079b2:	222b      	movge	r2, #43	; 0x2b
 80079b4:	2909      	cmp	r1, #9
 80079b6:	7042      	strb	r2, [r0, #1]
 80079b8:	dd2a      	ble.n	8007a10 <__exponent+0x70>
 80079ba:	f10d 0407 	add.w	r4, sp, #7
 80079be:	46a4      	mov	ip, r4
 80079c0:	270a      	movs	r7, #10
 80079c2:	46a6      	mov	lr, r4
 80079c4:	460a      	mov	r2, r1
 80079c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80079ca:	fb07 1516 	mls	r5, r7, r6, r1
 80079ce:	3530      	adds	r5, #48	; 0x30
 80079d0:	2a63      	cmp	r2, #99	; 0x63
 80079d2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80079d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80079da:	4631      	mov	r1, r6
 80079dc:	dcf1      	bgt.n	80079c2 <__exponent+0x22>
 80079de:	3130      	adds	r1, #48	; 0x30
 80079e0:	f1ae 0502 	sub.w	r5, lr, #2
 80079e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80079e8:	1c44      	adds	r4, r0, #1
 80079ea:	4629      	mov	r1, r5
 80079ec:	4561      	cmp	r1, ip
 80079ee:	d30a      	bcc.n	8007a06 <__exponent+0x66>
 80079f0:	f10d 0209 	add.w	r2, sp, #9
 80079f4:	eba2 020e 	sub.w	r2, r2, lr
 80079f8:	4565      	cmp	r5, ip
 80079fa:	bf88      	it	hi
 80079fc:	2200      	movhi	r2, #0
 80079fe:	4413      	add	r3, r2
 8007a00:	1a18      	subs	r0, r3, r0
 8007a02:	b003      	add	sp, #12
 8007a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a0a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007a0e:	e7ed      	b.n	80079ec <__exponent+0x4c>
 8007a10:	2330      	movs	r3, #48	; 0x30
 8007a12:	3130      	adds	r1, #48	; 0x30
 8007a14:	7083      	strb	r3, [r0, #2]
 8007a16:	70c1      	strb	r1, [r0, #3]
 8007a18:	1d03      	adds	r3, r0, #4
 8007a1a:	e7f1      	b.n	8007a00 <__exponent+0x60>

08007a1c <_printf_float>:
 8007a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a20:	ed2d 8b02 	vpush	{d8}
 8007a24:	b08d      	sub	sp, #52	; 0x34
 8007a26:	460c      	mov	r4, r1
 8007a28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a2c:	4616      	mov	r6, r2
 8007a2e:	461f      	mov	r7, r3
 8007a30:	4605      	mov	r5, r0
 8007a32:	f001 fa55 	bl	8008ee0 <_localeconv_r>
 8007a36:	f8d0 a000 	ldr.w	sl, [r0]
 8007a3a:	4650      	mov	r0, sl
 8007a3c:	f7f8 fbd0 	bl	80001e0 <strlen>
 8007a40:	2300      	movs	r3, #0
 8007a42:	930a      	str	r3, [sp, #40]	; 0x28
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	9305      	str	r3, [sp, #20]
 8007a48:	f8d8 3000 	ldr.w	r3, [r8]
 8007a4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a50:	3307      	adds	r3, #7
 8007a52:	f023 0307 	bic.w	r3, r3, #7
 8007a56:	f103 0208 	add.w	r2, r3, #8
 8007a5a:	f8c8 2000 	str.w	r2, [r8]
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a66:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007a6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a6e:	9307      	str	r3, [sp, #28]
 8007a70:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a74:	ee08 0a10 	vmov	s16, r0
 8007a78:	4b9f      	ldr	r3, [pc, #636]	; (8007cf8 <_printf_float+0x2dc>)
 8007a7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a82:	f7f9 f85b 	bl	8000b3c <__aeabi_dcmpun>
 8007a86:	bb88      	cbnz	r0, 8007aec <_printf_float+0xd0>
 8007a88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a8c:	4b9a      	ldr	r3, [pc, #616]	; (8007cf8 <_printf_float+0x2dc>)
 8007a8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a92:	f7f9 f835 	bl	8000b00 <__aeabi_dcmple>
 8007a96:	bb48      	cbnz	r0, 8007aec <_printf_float+0xd0>
 8007a98:	2200      	movs	r2, #0
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	4640      	mov	r0, r8
 8007a9e:	4649      	mov	r1, r9
 8007aa0:	f7f9 f824 	bl	8000aec <__aeabi_dcmplt>
 8007aa4:	b110      	cbz	r0, 8007aac <_printf_float+0x90>
 8007aa6:	232d      	movs	r3, #45	; 0x2d
 8007aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aac:	4b93      	ldr	r3, [pc, #588]	; (8007cfc <_printf_float+0x2e0>)
 8007aae:	4894      	ldr	r0, [pc, #592]	; (8007d00 <_printf_float+0x2e4>)
 8007ab0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007ab4:	bf94      	ite	ls
 8007ab6:	4698      	movls	r8, r3
 8007ab8:	4680      	movhi	r8, r0
 8007aba:	2303      	movs	r3, #3
 8007abc:	6123      	str	r3, [r4, #16]
 8007abe:	9b05      	ldr	r3, [sp, #20]
 8007ac0:	f023 0204 	bic.w	r2, r3, #4
 8007ac4:	6022      	str	r2, [r4, #0]
 8007ac6:	f04f 0900 	mov.w	r9, #0
 8007aca:	9700      	str	r7, [sp, #0]
 8007acc:	4633      	mov	r3, r6
 8007ace:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f000 f9d8 	bl	8007e88 <_printf_common>
 8007ad8:	3001      	adds	r0, #1
 8007ada:	f040 8090 	bne.w	8007bfe <_printf_float+0x1e2>
 8007ade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ae2:	b00d      	add	sp, #52	; 0x34
 8007ae4:	ecbd 8b02 	vpop	{d8}
 8007ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aec:	4642      	mov	r2, r8
 8007aee:	464b      	mov	r3, r9
 8007af0:	4640      	mov	r0, r8
 8007af2:	4649      	mov	r1, r9
 8007af4:	f7f9 f822 	bl	8000b3c <__aeabi_dcmpun>
 8007af8:	b140      	cbz	r0, 8007b0c <_printf_float+0xf0>
 8007afa:	464b      	mov	r3, r9
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	bfbc      	itt	lt
 8007b00:	232d      	movlt	r3, #45	; 0x2d
 8007b02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007b06:	487f      	ldr	r0, [pc, #508]	; (8007d04 <_printf_float+0x2e8>)
 8007b08:	4b7f      	ldr	r3, [pc, #508]	; (8007d08 <_printf_float+0x2ec>)
 8007b0a:	e7d1      	b.n	8007ab0 <_printf_float+0x94>
 8007b0c:	6863      	ldr	r3, [r4, #4]
 8007b0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007b12:	9206      	str	r2, [sp, #24]
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	d13f      	bne.n	8007b98 <_printf_float+0x17c>
 8007b18:	2306      	movs	r3, #6
 8007b1a:	6063      	str	r3, [r4, #4]
 8007b1c:	9b05      	ldr	r3, [sp, #20]
 8007b1e:	6861      	ldr	r1, [r4, #4]
 8007b20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b24:	2300      	movs	r3, #0
 8007b26:	9303      	str	r3, [sp, #12]
 8007b28:	ab0a      	add	r3, sp, #40	; 0x28
 8007b2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007b2e:	ab09      	add	r3, sp, #36	; 0x24
 8007b30:	ec49 8b10 	vmov	d0, r8, r9
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	6022      	str	r2, [r4, #0]
 8007b38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f7ff fecd 	bl	80078dc <__cvt>
 8007b42:	9b06      	ldr	r3, [sp, #24]
 8007b44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b46:	2b47      	cmp	r3, #71	; 0x47
 8007b48:	4680      	mov	r8, r0
 8007b4a:	d108      	bne.n	8007b5e <_printf_float+0x142>
 8007b4c:	1cc8      	adds	r0, r1, #3
 8007b4e:	db02      	blt.n	8007b56 <_printf_float+0x13a>
 8007b50:	6863      	ldr	r3, [r4, #4]
 8007b52:	4299      	cmp	r1, r3
 8007b54:	dd41      	ble.n	8007bda <_printf_float+0x1be>
 8007b56:	f1ab 0b02 	sub.w	fp, fp, #2
 8007b5a:	fa5f fb8b 	uxtb.w	fp, fp
 8007b5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b62:	d820      	bhi.n	8007ba6 <_printf_float+0x18a>
 8007b64:	3901      	subs	r1, #1
 8007b66:	465a      	mov	r2, fp
 8007b68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b6c:	9109      	str	r1, [sp, #36]	; 0x24
 8007b6e:	f7ff ff17 	bl	80079a0 <__exponent>
 8007b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b74:	1813      	adds	r3, r2, r0
 8007b76:	2a01      	cmp	r2, #1
 8007b78:	4681      	mov	r9, r0
 8007b7a:	6123      	str	r3, [r4, #16]
 8007b7c:	dc02      	bgt.n	8007b84 <_printf_float+0x168>
 8007b7e:	6822      	ldr	r2, [r4, #0]
 8007b80:	07d2      	lsls	r2, r2, #31
 8007b82:	d501      	bpl.n	8007b88 <_printf_float+0x16c>
 8007b84:	3301      	adds	r3, #1
 8007b86:	6123      	str	r3, [r4, #16]
 8007b88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d09c      	beq.n	8007aca <_printf_float+0xae>
 8007b90:	232d      	movs	r3, #45	; 0x2d
 8007b92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b96:	e798      	b.n	8007aca <_printf_float+0xae>
 8007b98:	9a06      	ldr	r2, [sp, #24]
 8007b9a:	2a47      	cmp	r2, #71	; 0x47
 8007b9c:	d1be      	bne.n	8007b1c <_printf_float+0x100>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1bc      	bne.n	8007b1c <_printf_float+0x100>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e7b9      	b.n	8007b1a <_printf_float+0xfe>
 8007ba6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007baa:	d118      	bne.n	8007bde <_printf_float+0x1c2>
 8007bac:	2900      	cmp	r1, #0
 8007bae:	6863      	ldr	r3, [r4, #4]
 8007bb0:	dd0b      	ble.n	8007bca <_printf_float+0x1ae>
 8007bb2:	6121      	str	r1, [r4, #16]
 8007bb4:	b913      	cbnz	r3, 8007bbc <_printf_float+0x1a0>
 8007bb6:	6822      	ldr	r2, [r4, #0]
 8007bb8:	07d0      	lsls	r0, r2, #31
 8007bba:	d502      	bpl.n	8007bc2 <_printf_float+0x1a6>
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	440b      	add	r3, r1
 8007bc0:	6123      	str	r3, [r4, #16]
 8007bc2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007bc4:	f04f 0900 	mov.w	r9, #0
 8007bc8:	e7de      	b.n	8007b88 <_printf_float+0x16c>
 8007bca:	b913      	cbnz	r3, 8007bd2 <_printf_float+0x1b6>
 8007bcc:	6822      	ldr	r2, [r4, #0]
 8007bce:	07d2      	lsls	r2, r2, #31
 8007bd0:	d501      	bpl.n	8007bd6 <_printf_float+0x1ba>
 8007bd2:	3302      	adds	r3, #2
 8007bd4:	e7f4      	b.n	8007bc0 <_printf_float+0x1a4>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e7f2      	b.n	8007bc0 <_printf_float+0x1a4>
 8007bda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be0:	4299      	cmp	r1, r3
 8007be2:	db05      	blt.n	8007bf0 <_printf_float+0x1d4>
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	6121      	str	r1, [r4, #16]
 8007be8:	07d8      	lsls	r0, r3, #31
 8007bea:	d5ea      	bpl.n	8007bc2 <_printf_float+0x1a6>
 8007bec:	1c4b      	adds	r3, r1, #1
 8007bee:	e7e7      	b.n	8007bc0 <_printf_float+0x1a4>
 8007bf0:	2900      	cmp	r1, #0
 8007bf2:	bfd4      	ite	le
 8007bf4:	f1c1 0202 	rsble	r2, r1, #2
 8007bf8:	2201      	movgt	r2, #1
 8007bfa:	4413      	add	r3, r2
 8007bfc:	e7e0      	b.n	8007bc0 <_printf_float+0x1a4>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	055a      	lsls	r2, r3, #21
 8007c02:	d407      	bmi.n	8007c14 <_printf_float+0x1f8>
 8007c04:	6923      	ldr	r3, [r4, #16]
 8007c06:	4642      	mov	r2, r8
 8007c08:	4631      	mov	r1, r6
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	47b8      	blx	r7
 8007c0e:	3001      	adds	r0, #1
 8007c10:	d12c      	bne.n	8007c6c <_printf_float+0x250>
 8007c12:	e764      	b.n	8007ade <_printf_float+0xc2>
 8007c14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c18:	f240 80e0 	bls.w	8007ddc <_printf_float+0x3c0>
 8007c1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c20:	2200      	movs	r2, #0
 8007c22:	2300      	movs	r3, #0
 8007c24:	f7f8 ff58 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d034      	beq.n	8007c96 <_printf_float+0x27a>
 8007c2c:	4a37      	ldr	r2, [pc, #220]	; (8007d0c <_printf_float+0x2f0>)
 8007c2e:	2301      	movs	r3, #1
 8007c30:	4631      	mov	r1, r6
 8007c32:	4628      	mov	r0, r5
 8007c34:	47b8      	blx	r7
 8007c36:	3001      	adds	r0, #1
 8007c38:	f43f af51 	beq.w	8007ade <_printf_float+0xc2>
 8007c3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c40:	429a      	cmp	r2, r3
 8007c42:	db02      	blt.n	8007c4a <_printf_float+0x22e>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	07d8      	lsls	r0, r3, #31
 8007c48:	d510      	bpl.n	8007c6c <_printf_float+0x250>
 8007c4a:	ee18 3a10 	vmov	r3, s16
 8007c4e:	4652      	mov	r2, sl
 8007c50:	4631      	mov	r1, r6
 8007c52:	4628      	mov	r0, r5
 8007c54:	47b8      	blx	r7
 8007c56:	3001      	adds	r0, #1
 8007c58:	f43f af41 	beq.w	8007ade <_printf_float+0xc2>
 8007c5c:	f04f 0800 	mov.w	r8, #0
 8007c60:	f104 091a 	add.w	r9, r4, #26
 8007c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c66:	3b01      	subs	r3, #1
 8007c68:	4543      	cmp	r3, r8
 8007c6a:	dc09      	bgt.n	8007c80 <_printf_float+0x264>
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	079b      	lsls	r3, r3, #30
 8007c70:	f100 8105 	bmi.w	8007e7e <_printf_float+0x462>
 8007c74:	68e0      	ldr	r0, [r4, #12]
 8007c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c78:	4298      	cmp	r0, r3
 8007c7a:	bfb8      	it	lt
 8007c7c:	4618      	movlt	r0, r3
 8007c7e:	e730      	b.n	8007ae2 <_printf_float+0xc6>
 8007c80:	2301      	movs	r3, #1
 8007c82:	464a      	mov	r2, r9
 8007c84:	4631      	mov	r1, r6
 8007c86:	4628      	mov	r0, r5
 8007c88:	47b8      	blx	r7
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	f43f af27 	beq.w	8007ade <_printf_float+0xc2>
 8007c90:	f108 0801 	add.w	r8, r8, #1
 8007c94:	e7e6      	b.n	8007c64 <_printf_float+0x248>
 8007c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	dc39      	bgt.n	8007d10 <_printf_float+0x2f4>
 8007c9c:	4a1b      	ldr	r2, [pc, #108]	; (8007d0c <_printf_float+0x2f0>)
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	47b8      	blx	r7
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	f43f af19 	beq.w	8007ade <_printf_float+0xc2>
 8007cac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	d102      	bne.n	8007cba <_printf_float+0x29e>
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	07d9      	lsls	r1, r3, #31
 8007cb8:	d5d8      	bpl.n	8007c6c <_printf_float+0x250>
 8007cba:	ee18 3a10 	vmov	r3, s16
 8007cbe:	4652      	mov	r2, sl
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	47b8      	blx	r7
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	f43f af09 	beq.w	8007ade <_printf_float+0xc2>
 8007ccc:	f04f 0900 	mov.w	r9, #0
 8007cd0:	f104 0a1a 	add.w	sl, r4, #26
 8007cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd6:	425b      	negs	r3, r3
 8007cd8:	454b      	cmp	r3, r9
 8007cda:	dc01      	bgt.n	8007ce0 <_printf_float+0x2c4>
 8007cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cde:	e792      	b.n	8007c06 <_printf_float+0x1ea>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	4652      	mov	r2, sl
 8007ce4:	4631      	mov	r1, r6
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	47b8      	blx	r7
 8007cea:	3001      	adds	r0, #1
 8007cec:	f43f aef7 	beq.w	8007ade <_printf_float+0xc2>
 8007cf0:	f109 0901 	add.w	r9, r9, #1
 8007cf4:	e7ee      	b.n	8007cd4 <_printf_float+0x2b8>
 8007cf6:	bf00      	nop
 8007cf8:	7fefffff 	.word	0x7fefffff
 8007cfc:	0800b844 	.word	0x0800b844
 8007d00:	0800b848 	.word	0x0800b848
 8007d04:	0800b850 	.word	0x0800b850
 8007d08:	0800b84c 	.word	0x0800b84c
 8007d0c:	0800b854 	.word	0x0800b854
 8007d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d14:	429a      	cmp	r2, r3
 8007d16:	bfa8      	it	ge
 8007d18:	461a      	movge	r2, r3
 8007d1a:	2a00      	cmp	r2, #0
 8007d1c:	4691      	mov	r9, r2
 8007d1e:	dc37      	bgt.n	8007d90 <_printf_float+0x374>
 8007d20:	f04f 0b00 	mov.w	fp, #0
 8007d24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d28:	f104 021a 	add.w	r2, r4, #26
 8007d2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d2e:	9305      	str	r3, [sp, #20]
 8007d30:	eba3 0309 	sub.w	r3, r3, r9
 8007d34:	455b      	cmp	r3, fp
 8007d36:	dc33      	bgt.n	8007da0 <_printf_float+0x384>
 8007d38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	db3b      	blt.n	8007db8 <_printf_float+0x39c>
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	07da      	lsls	r2, r3, #31
 8007d44:	d438      	bmi.n	8007db8 <_printf_float+0x39c>
 8007d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d48:	9b05      	ldr	r3, [sp, #20]
 8007d4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	eba2 0901 	sub.w	r9, r2, r1
 8007d52:	4599      	cmp	r9, r3
 8007d54:	bfa8      	it	ge
 8007d56:	4699      	movge	r9, r3
 8007d58:	f1b9 0f00 	cmp.w	r9, #0
 8007d5c:	dc35      	bgt.n	8007dca <_printf_float+0x3ae>
 8007d5e:	f04f 0800 	mov.w	r8, #0
 8007d62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d66:	f104 0a1a 	add.w	sl, r4, #26
 8007d6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d6e:	1a9b      	subs	r3, r3, r2
 8007d70:	eba3 0309 	sub.w	r3, r3, r9
 8007d74:	4543      	cmp	r3, r8
 8007d76:	f77f af79 	ble.w	8007c6c <_printf_float+0x250>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	4652      	mov	r2, sl
 8007d7e:	4631      	mov	r1, r6
 8007d80:	4628      	mov	r0, r5
 8007d82:	47b8      	blx	r7
 8007d84:	3001      	adds	r0, #1
 8007d86:	f43f aeaa 	beq.w	8007ade <_printf_float+0xc2>
 8007d8a:	f108 0801 	add.w	r8, r8, #1
 8007d8e:	e7ec      	b.n	8007d6a <_printf_float+0x34e>
 8007d90:	4613      	mov	r3, r2
 8007d92:	4631      	mov	r1, r6
 8007d94:	4642      	mov	r2, r8
 8007d96:	4628      	mov	r0, r5
 8007d98:	47b8      	blx	r7
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	d1c0      	bne.n	8007d20 <_printf_float+0x304>
 8007d9e:	e69e      	b.n	8007ade <_printf_float+0xc2>
 8007da0:	2301      	movs	r3, #1
 8007da2:	4631      	mov	r1, r6
 8007da4:	4628      	mov	r0, r5
 8007da6:	9205      	str	r2, [sp, #20]
 8007da8:	47b8      	blx	r7
 8007daa:	3001      	adds	r0, #1
 8007dac:	f43f ae97 	beq.w	8007ade <_printf_float+0xc2>
 8007db0:	9a05      	ldr	r2, [sp, #20]
 8007db2:	f10b 0b01 	add.w	fp, fp, #1
 8007db6:	e7b9      	b.n	8007d2c <_printf_float+0x310>
 8007db8:	ee18 3a10 	vmov	r3, s16
 8007dbc:	4652      	mov	r2, sl
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	47b8      	blx	r7
 8007dc4:	3001      	adds	r0, #1
 8007dc6:	d1be      	bne.n	8007d46 <_printf_float+0x32a>
 8007dc8:	e689      	b.n	8007ade <_printf_float+0xc2>
 8007dca:	9a05      	ldr	r2, [sp, #20]
 8007dcc:	464b      	mov	r3, r9
 8007dce:	4442      	add	r2, r8
 8007dd0:	4631      	mov	r1, r6
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	47b8      	blx	r7
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	d1c1      	bne.n	8007d5e <_printf_float+0x342>
 8007dda:	e680      	b.n	8007ade <_printf_float+0xc2>
 8007ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dde:	2a01      	cmp	r2, #1
 8007de0:	dc01      	bgt.n	8007de6 <_printf_float+0x3ca>
 8007de2:	07db      	lsls	r3, r3, #31
 8007de4:	d538      	bpl.n	8007e58 <_printf_float+0x43c>
 8007de6:	2301      	movs	r3, #1
 8007de8:	4642      	mov	r2, r8
 8007dea:	4631      	mov	r1, r6
 8007dec:	4628      	mov	r0, r5
 8007dee:	47b8      	blx	r7
 8007df0:	3001      	adds	r0, #1
 8007df2:	f43f ae74 	beq.w	8007ade <_printf_float+0xc2>
 8007df6:	ee18 3a10 	vmov	r3, s16
 8007dfa:	4652      	mov	r2, sl
 8007dfc:	4631      	mov	r1, r6
 8007dfe:	4628      	mov	r0, r5
 8007e00:	47b8      	blx	r7
 8007e02:	3001      	adds	r0, #1
 8007e04:	f43f ae6b 	beq.w	8007ade <_printf_float+0xc2>
 8007e08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f7f8 fe62 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e14:	b9d8      	cbnz	r0, 8007e4e <_printf_float+0x432>
 8007e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e18:	f108 0201 	add.w	r2, r8, #1
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	4631      	mov	r1, r6
 8007e20:	4628      	mov	r0, r5
 8007e22:	47b8      	blx	r7
 8007e24:	3001      	adds	r0, #1
 8007e26:	d10e      	bne.n	8007e46 <_printf_float+0x42a>
 8007e28:	e659      	b.n	8007ade <_printf_float+0xc2>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	4652      	mov	r2, sl
 8007e2e:	4631      	mov	r1, r6
 8007e30:	4628      	mov	r0, r5
 8007e32:	47b8      	blx	r7
 8007e34:	3001      	adds	r0, #1
 8007e36:	f43f ae52 	beq.w	8007ade <_printf_float+0xc2>
 8007e3a:	f108 0801 	add.w	r8, r8, #1
 8007e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e40:	3b01      	subs	r3, #1
 8007e42:	4543      	cmp	r3, r8
 8007e44:	dcf1      	bgt.n	8007e2a <_printf_float+0x40e>
 8007e46:	464b      	mov	r3, r9
 8007e48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e4c:	e6dc      	b.n	8007c08 <_printf_float+0x1ec>
 8007e4e:	f04f 0800 	mov.w	r8, #0
 8007e52:	f104 0a1a 	add.w	sl, r4, #26
 8007e56:	e7f2      	b.n	8007e3e <_printf_float+0x422>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	4642      	mov	r2, r8
 8007e5c:	e7df      	b.n	8007e1e <_printf_float+0x402>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	464a      	mov	r2, r9
 8007e62:	4631      	mov	r1, r6
 8007e64:	4628      	mov	r0, r5
 8007e66:	47b8      	blx	r7
 8007e68:	3001      	adds	r0, #1
 8007e6a:	f43f ae38 	beq.w	8007ade <_printf_float+0xc2>
 8007e6e:	f108 0801 	add.w	r8, r8, #1
 8007e72:	68e3      	ldr	r3, [r4, #12]
 8007e74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e76:	1a5b      	subs	r3, r3, r1
 8007e78:	4543      	cmp	r3, r8
 8007e7a:	dcf0      	bgt.n	8007e5e <_printf_float+0x442>
 8007e7c:	e6fa      	b.n	8007c74 <_printf_float+0x258>
 8007e7e:	f04f 0800 	mov.w	r8, #0
 8007e82:	f104 0919 	add.w	r9, r4, #25
 8007e86:	e7f4      	b.n	8007e72 <_printf_float+0x456>

08007e88 <_printf_common>:
 8007e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e8c:	4616      	mov	r6, r2
 8007e8e:	4699      	mov	r9, r3
 8007e90:	688a      	ldr	r2, [r1, #8]
 8007e92:	690b      	ldr	r3, [r1, #16]
 8007e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	bfb8      	it	lt
 8007e9c:	4613      	movlt	r3, r2
 8007e9e:	6033      	str	r3, [r6, #0]
 8007ea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ea4:	4607      	mov	r7, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	b10a      	cbz	r2, 8007eae <_printf_common+0x26>
 8007eaa:	3301      	adds	r3, #1
 8007eac:	6033      	str	r3, [r6, #0]
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	0699      	lsls	r1, r3, #26
 8007eb2:	bf42      	ittt	mi
 8007eb4:	6833      	ldrmi	r3, [r6, #0]
 8007eb6:	3302      	addmi	r3, #2
 8007eb8:	6033      	strmi	r3, [r6, #0]
 8007eba:	6825      	ldr	r5, [r4, #0]
 8007ebc:	f015 0506 	ands.w	r5, r5, #6
 8007ec0:	d106      	bne.n	8007ed0 <_printf_common+0x48>
 8007ec2:	f104 0a19 	add.w	sl, r4, #25
 8007ec6:	68e3      	ldr	r3, [r4, #12]
 8007ec8:	6832      	ldr	r2, [r6, #0]
 8007eca:	1a9b      	subs	r3, r3, r2
 8007ecc:	42ab      	cmp	r3, r5
 8007ece:	dc26      	bgt.n	8007f1e <_printf_common+0x96>
 8007ed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ed4:	1e13      	subs	r3, r2, #0
 8007ed6:	6822      	ldr	r2, [r4, #0]
 8007ed8:	bf18      	it	ne
 8007eda:	2301      	movne	r3, #1
 8007edc:	0692      	lsls	r2, r2, #26
 8007ede:	d42b      	bmi.n	8007f38 <_printf_common+0xb0>
 8007ee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ee4:	4649      	mov	r1, r9
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	47c0      	blx	r8
 8007eea:	3001      	adds	r0, #1
 8007eec:	d01e      	beq.n	8007f2c <_printf_common+0xa4>
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	68e5      	ldr	r5, [r4, #12]
 8007ef2:	6832      	ldr	r2, [r6, #0]
 8007ef4:	f003 0306 	and.w	r3, r3, #6
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	bf08      	it	eq
 8007efc:	1aad      	subeq	r5, r5, r2
 8007efe:	68a3      	ldr	r3, [r4, #8]
 8007f00:	6922      	ldr	r2, [r4, #16]
 8007f02:	bf0c      	ite	eq
 8007f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f08:	2500      	movne	r5, #0
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	bfc4      	itt	gt
 8007f0e:	1a9b      	subgt	r3, r3, r2
 8007f10:	18ed      	addgt	r5, r5, r3
 8007f12:	2600      	movs	r6, #0
 8007f14:	341a      	adds	r4, #26
 8007f16:	42b5      	cmp	r5, r6
 8007f18:	d11a      	bne.n	8007f50 <_printf_common+0xc8>
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	e008      	b.n	8007f30 <_printf_common+0xa8>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	4652      	mov	r2, sl
 8007f22:	4649      	mov	r1, r9
 8007f24:	4638      	mov	r0, r7
 8007f26:	47c0      	blx	r8
 8007f28:	3001      	adds	r0, #1
 8007f2a:	d103      	bne.n	8007f34 <_printf_common+0xac>
 8007f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f34:	3501      	adds	r5, #1
 8007f36:	e7c6      	b.n	8007ec6 <_printf_common+0x3e>
 8007f38:	18e1      	adds	r1, r4, r3
 8007f3a:	1c5a      	adds	r2, r3, #1
 8007f3c:	2030      	movs	r0, #48	; 0x30
 8007f3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f42:	4422      	add	r2, r4
 8007f44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f4c:	3302      	adds	r3, #2
 8007f4e:	e7c7      	b.n	8007ee0 <_printf_common+0x58>
 8007f50:	2301      	movs	r3, #1
 8007f52:	4622      	mov	r2, r4
 8007f54:	4649      	mov	r1, r9
 8007f56:	4638      	mov	r0, r7
 8007f58:	47c0      	blx	r8
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	d0e6      	beq.n	8007f2c <_printf_common+0xa4>
 8007f5e:	3601      	adds	r6, #1
 8007f60:	e7d9      	b.n	8007f16 <_printf_common+0x8e>
	...

08007f64 <_printf_i>:
 8007f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f68:	460c      	mov	r4, r1
 8007f6a:	4691      	mov	r9, r2
 8007f6c:	7e27      	ldrb	r7, [r4, #24]
 8007f6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007f70:	2f78      	cmp	r7, #120	; 0x78
 8007f72:	4680      	mov	r8, r0
 8007f74:	469a      	mov	sl, r3
 8007f76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f7a:	d807      	bhi.n	8007f8c <_printf_i+0x28>
 8007f7c:	2f62      	cmp	r7, #98	; 0x62
 8007f7e:	d80a      	bhi.n	8007f96 <_printf_i+0x32>
 8007f80:	2f00      	cmp	r7, #0
 8007f82:	f000 80d8 	beq.w	8008136 <_printf_i+0x1d2>
 8007f86:	2f58      	cmp	r7, #88	; 0x58
 8007f88:	f000 80a3 	beq.w	80080d2 <_printf_i+0x16e>
 8007f8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f94:	e03a      	b.n	800800c <_printf_i+0xa8>
 8007f96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f9a:	2b15      	cmp	r3, #21
 8007f9c:	d8f6      	bhi.n	8007f8c <_printf_i+0x28>
 8007f9e:	a001      	add	r0, pc, #4	; (adr r0, 8007fa4 <_printf_i+0x40>)
 8007fa0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007fa4:	08007ffd 	.word	0x08007ffd
 8007fa8:	08008011 	.word	0x08008011
 8007fac:	08007f8d 	.word	0x08007f8d
 8007fb0:	08007f8d 	.word	0x08007f8d
 8007fb4:	08007f8d 	.word	0x08007f8d
 8007fb8:	08007f8d 	.word	0x08007f8d
 8007fbc:	08008011 	.word	0x08008011
 8007fc0:	08007f8d 	.word	0x08007f8d
 8007fc4:	08007f8d 	.word	0x08007f8d
 8007fc8:	08007f8d 	.word	0x08007f8d
 8007fcc:	08007f8d 	.word	0x08007f8d
 8007fd0:	0800811d 	.word	0x0800811d
 8007fd4:	08008041 	.word	0x08008041
 8007fd8:	080080ff 	.word	0x080080ff
 8007fdc:	08007f8d 	.word	0x08007f8d
 8007fe0:	08007f8d 	.word	0x08007f8d
 8007fe4:	0800813f 	.word	0x0800813f
 8007fe8:	08007f8d 	.word	0x08007f8d
 8007fec:	08008041 	.word	0x08008041
 8007ff0:	08007f8d 	.word	0x08007f8d
 8007ff4:	08007f8d 	.word	0x08007f8d
 8007ff8:	08008107 	.word	0x08008107
 8007ffc:	680b      	ldr	r3, [r1, #0]
 8007ffe:	1d1a      	adds	r2, r3, #4
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	600a      	str	r2, [r1, #0]
 8008004:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800800c:	2301      	movs	r3, #1
 800800e:	e0a3      	b.n	8008158 <_printf_i+0x1f4>
 8008010:	6825      	ldr	r5, [r4, #0]
 8008012:	6808      	ldr	r0, [r1, #0]
 8008014:	062e      	lsls	r6, r5, #24
 8008016:	f100 0304 	add.w	r3, r0, #4
 800801a:	d50a      	bpl.n	8008032 <_printf_i+0xce>
 800801c:	6805      	ldr	r5, [r0, #0]
 800801e:	600b      	str	r3, [r1, #0]
 8008020:	2d00      	cmp	r5, #0
 8008022:	da03      	bge.n	800802c <_printf_i+0xc8>
 8008024:	232d      	movs	r3, #45	; 0x2d
 8008026:	426d      	negs	r5, r5
 8008028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800802c:	485e      	ldr	r0, [pc, #376]	; (80081a8 <_printf_i+0x244>)
 800802e:	230a      	movs	r3, #10
 8008030:	e019      	b.n	8008066 <_printf_i+0x102>
 8008032:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008036:	6805      	ldr	r5, [r0, #0]
 8008038:	600b      	str	r3, [r1, #0]
 800803a:	bf18      	it	ne
 800803c:	b22d      	sxthne	r5, r5
 800803e:	e7ef      	b.n	8008020 <_printf_i+0xbc>
 8008040:	680b      	ldr	r3, [r1, #0]
 8008042:	6825      	ldr	r5, [r4, #0]
 8008044:	1d18      	adds	r0, r3, #4
 8008046:	6008      	str	r0, [r1, #0]
 8008048:	0628      	lsls	r0, r5, #24
 800804a:	d501      	bpl.n	8008050 <_printf_i+0xec>
 800804c:	681d      	ldr	r5, [r3, #0]
 800804e:	e002      	b.n	8008056 <_printf_i+0xf2>
 8008050:	0669      	lsls	r1, r5, #25
 8008052:	d5fb      	bpl.n	800804c <_printf_i+0xe8>
 8008054:	881d      	ldrh	r5, [r3, #0]
 8008056:	4854      	ldr	r0, [pc, #336]	; (80081a8 <_printf_i+0x244>)
 8008058:	2f6f      	cmp	r7, #111	; 0x6f
 800805a:	bf0c      	ite	eq
 800805c:	2308      	moveq	r3, #8
 800805e:	230a      	movne	r3, #10
 8008060:	2100      	movs	r1, #0
 8008062:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008066:	6866      	ldr	r6, [r4, #4]
 8008068:	60a6      	str	r6, [r4, #8]
 800806a:	2e00      	cmp	r6, #0
 800806c:	bfa2      	ittt	ge
 800806e:	6821      	ldrge	r1, [r4, #0]
 8008070:	f021 0104 	bicge.w	r1, r1, #4
 8008074:	6021      	strge	r1, [r4, #0]
 8008076:	b90d      	cbnz	r5, 800807c <_printf_i+0x118>
 8008078:	2e00      	cmp	r6, #0
 800807a:	d04d      	beq.n	8008118 <_printf_i+0x1b4>
 800807c:	4616      	mov	r6, r2
 800807e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008082:	fb03 5711 	mls	r7, r3, r1, r5
 8008086:	5dc7      	ldrb	r7, [r0, r7]
 8008088:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800808c:	462f      	mov	r7, r5
 800808e:	42bb      	cmp	r3, r7
 8008090:	460d      	mov	r5, r1
 8008092:	d9f4      	bls.n	800807e <_printf_i+0x11a>
 8008094:	2b08      	cmp	r3, #8
 8008096:	d10b      	bne.n	80080b0 <_printf_i+0x14c>
 8008098:	6823      	ldr	r3, [r4, #0]
 800809a:	07df      	lsls	r7, r3, #31
 800809c:	d508      	bpl.n	80080b0 <_printf_i+0x14c>
 800809e:	6923      	ldr	r3, [r4, #16]
 80080a0:	6861      	ldr	r1, [r4, #4]
 80080a2:	4299      	cmp	r1, r3
 80080a4:	bfde      	ittt	le
 80080a6:	2330      	movle	r3, #48	; 0x30
 80080a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080ac:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80080b0:	1b92      	subs	r2, r2, r6
 80080b2:	6122      	str	r2, [r4, #16]
 80080b4:	f8cd a000 	str.w	sl, [sp]
 80080b8:	464b      	mov	r3, r9
 80080ba:	aa03      	add	r2, sp, #12
 80080bc:	4621      	mov	r1, r4
 80080be:	4640      	mov	r0, r8
 80080c0:	f7ff fee2 	bl	8007e88 <_printf_common>
 80080c4:	3001      	adds	r0, #1
 80080c6:	d14c      	bne.n	8008162 <_printf_i+0x1fe>
 80080c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080cc:	b004      	add	sp, #16
 80080ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d2:	4835      	ldr	r0, [pc, #212]	; (80081a8 <_printf_i+0x244>)
 80080d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80080d8:	6823      	ldr	r3, [r4, #0]
 80080da:	680e      	ldr	r6, [r1, #0]
 80080dc:	061f      	lsls	r7, r3, #24
 80080de:	f856 5b04 	ldr.w	r5, [r6], #4
 80080e2:	600e      	str	r6, [r1, #0]
 80080e4:	d514      	bpl.n	8008110 <_printf_i+0x1ac>
 80080e6:	07d9      	lsls	r1, r3, #31
 80080e8:	bf44      	itt	mi
 80080ea:	f043 0320 	orrmi.w	r3, r3, #32
 80080ee:	6023      	strmi	r3, [r4, #0]
 80080f0:	b91d      	cbnz	r5, 80080fa <_printf_i+0x196>
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	f023 0320 	bic.w	r3, r3, #32
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	2310      	movs	r3, #16
 80080fc:	e7b0      	b.n	8008060 <_printf_i+0xfc>
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	f043 0320 	orr.w	r3, r3, #32
 8008104:	6023      	str	r3, [r4, #0]
 8008106:	2378      	movs	r3, #120	; 0x78
 8008108:	4828      	ldr	r0, [pc, #160]	; (80081ac <_printf_i+0x248>)
 800810a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800810e:	e7e3      	b.n	80080d8 <_printf_i+0x174>
 8008110:	065e      	lsls	r6, r3, #25
 8008112:	bf48      	it	mi
 8008114:	b2ad      	uxthmi	r5, r5
 8008116:	e7e6      	b.n	80080e6 <_printf_i+0x182>
 8008118:	4616      	mov	r6, r2
 800811a:	e7bb      	b.n	8008094 <_printf_i+0x130>
 800811c:	680b      	ldr	r3, [r1, #0]
 800811e:	6826      	ldr	r6, [r4, #0]
 8008120:	6960      	ldr	r0, [r4, #20]
 8008122:	1d1d      	adds	r5, r3, #4
 8008124:	600d      	str	r5, [r1, #0]
 8008126:	0635      	lsls	r5, r6, #24
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	d501      	bpl.n	8008130 <_printf_i+0x1cc>
 800812c:	6018      	str	r0, [r3, #0]
 800812e:	e002      	b.n	8008136 <_printf_i+0x1d2>
 8008130:	0671      	lsls	r1, r6, #25
 8008132:	d5fb      	bpl.n	800812c <_printf_i+0x1c8>
 8008134:	8018      	strh	r0, [r3, #0]
 8008136:	2300      	movs	r3, #0
 8008138:	6123      	str	r3, [r4, #16]
 800813a:	4616      	mov	r6, r2
 800813c:	e7ba      	b.n	80080b4 <_printf_i+0x150>
 800813e:	680b      	ldr	r3, [r1, #0]
 8008140:	1d1a      	adds	r2, r3, #4
 8008142:	600a      	str	r2, [r1, #0]
 8008144:	681e      	ldr	r6, [r3, #0]
 8008146:	6862      	ldr	r2, [r4, #4]
 8008148:	2100      	movs	r1, #0
 800814a:	4630      	mov	r0, r6
 800814c:	f7f8 f850 	bl	80001f0 <memchr>
 8008150:	b108      	cbz	r0, 8008156 <_printf_i+0x1f2>
 8008152:	1b80      	subs	r0, r0, r6
 8008154:	6060      	str	r0, [r4, #4]
 8008156:	6863      	ldr	r3, [r4, #4]
 8008158:	6123      	str	r3, [r4, #16]
 800815a:	2300      	movs	r3, #0
 800815c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008160:	e7a8      	b.n	80080b4 <_printf_i+0x150>
 8008162:	6923      	ldr	r3, [r4, #16]
 8008164:	4632      	mov	r2, r6
 8008166:	4649      	mov	r1, r9
 8008168:	4640      	mov	r0, r8
 800816a:	47d0      	blx	sl
 800816c:	3001      	adds	r0, #1
 800816e:	d0ab      	beq.n	80080c8 <_printf_i+0x164>
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	079b      	lsls	r3, r3, #30
 8008174:	d413      	bmi.n	800819e <_printf_i+0x23a>
 8008176:	68e0      	ldr	r0, [r4, #12]
 8008178:	9b03      	ldr	r3, [sp, #12]
 800817a:	4298      	cmp	r0, r3
 800817c:	bfb8      	it	lt
 800817e:	4618      	movlt	r0, r3
 8008180:	e7a4      	b.n	80080cc <_printf_i+0x168>
 8008182:	2301      	movs	r3, #1
 8008184:	4632      	mov	r2, r6
 8008186:	4649      	mov	r1, r9
 8008188:	4640      	mov	r0, r8
 800818a:	47d0      	blx	sl
 800818c:	3001      	adds	r0, #1
 800818e:	d09b      	beq.n	80080c8 <_printf_i+0x164>
 8008190:	3501      	adds	r5, #1
 8008192:	68e3      	ldr	r3, [r4, #12]
 8008194:	9903      	ldr	r1, [sp, #12]
 8008196:	1a5b      	subs	r3, r3, r1
 8008198:	42ab      	cmp	r3, r5
 800819a:	dcf2      	bgt.n	8008182 <_printf_i+0x21e>
 800819c:	e7eb      	b.n	8008176 <_printf_i+0x212>
 800819e:	2500      	movs	r5, #0
 80081a0:	f104 0619 	add.w	r6, r4, #25
 80081a4:	e7f5      	b.n	8008192 <_printf_i+0x22e>
 80081a6:	bf00      	nop
 80081a8:	0800b856 	.word	0x0800b856
 80081ac:	0800b867 	.word	0x0800b867

080081b0 <siprintf>:
 80081b0:	b40e      	push	{r1, r2, r3}
 80081b2:	b500      	push	{lr}
 80081b4:	b09c      	sub	sp, #112	; 0x70
 80081b6:	ab1d      	add	r3, sp, #116	; 0x74
 80081b8:	9002      	str	r0, [sp, #8]
 80081ba:	9006      	str	r0, [sp, #24]
 80081bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081c0:	4809      	ldr	r0, [pc, #36]	; (80081e8 <siprintf+0x38>)
 80081c2:	9107      	str	r1, [sp, #28]
 80081c4:	9104      	str	r1, [sp, #16]
 80081c6:	4909      	ldr	r1, [pc, #36]	; (80081ec <siprintf+0x3c>)
 80081c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80081cc:	9105      	str	r1, [sp, #20]
 80081ce:	6800      	ldr	r0, [r0, #0]
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	a902      	add	r1, sp, #8
 80081d4:	f001 fb32 	bl	800983c <_svfiprintf_r>
 80081d8:	9b02      	ldr	r3, [sp, #8]
 80081da:	2200      	movs	r2, #0
 80081dc:	701a      	strb	r2, [r3, #0]
 80081de:	b01c      	add	sp, #112	; 0x70
 80081e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80081e4:	b003      	add	sp, #12
 80081e6:	4770      	bx	lr
 80081e8:	20002028 	.word	0x20002028
 80081ec:	ffff0208 	.word	0xffff0208

080081f0 <quorem>:
 80081f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	6903      	ldr	r3, [r0, #16]
 80081f6:	690c      	ldr	r4, [r1, #16]
 80081f8:	42a3      	cmp	r3, r4
 80081fa:	4607      	mov	r7, r0
 80081fc:	f2c0 8081 	blt.w	8008302 <quorem+0x112>
 8008200:	3c01      	subs	r4, #1
 8008202:	f101 0814 	add.w	r8, r1, #20
 8008206:	f100 0514 	add.w	r5, r0, #20
 800820a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008214:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008218:	3301      	adds	r3, #1
 800821a:	429a      	cmp	r2, r3
 800821c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008220:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008224:	fbb2 f6f3 	udiv	r6, r2, r3
 8008228:	d331      	bcc.n	800828e <quorem+0x9e>
 800822a:	f04f 0e00 	mov.w	lr, #0
 800822e:	4640      	mov	r0, r8
 8008230:	46ac      	mov	ip, r5
 8008232:	46f2      	mov	sl, lr
 8008234:	f850 2b04 	ldr.w	r2, [r0], #4
 8008238:	b293      	uxth	r3, r2
 800823a:	fb06 e303 	mla	r3, r6, r3, lr
 800823e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008242:	b29b      	uxth	r3, r3
 8008244:	ebaa 0303 	sub.w	r3, sl, r3
 8008248:	0c12      	lsrs	r2, r2, #16
 800824a:	f8dc a000 	ldr.w	sl, [ip]
 800824e:	fb06 e202 	mla	r2, r6, r2, lr
 8008252:	fa13 f38a 	uxtah	r3, r3, sl
 8008256:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800825a:	fa1f fa82 	uxth.w	sl, r2
 800825e:	f8dc 2000 	ldr.w	r2, [ip]
 8008262:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008266:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800826a:	b29b      	uxth	r3, r3
 800826c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008270:	4581      	cmp	r9, r0
 8008272:	f84c 3b04 	str.w	r3, [ip], #4
 8008276:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800827a:	d2db      	bcs.n	8008234 <quorem+0x44>
 800827c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008280:	b92b      	cbnz	r3, 800828e <quorem+0x9e>
 8008282:	9b01      	ldr	r3, [sp, #4]
 8008284:	3b04      	subs	r3, #4
 8008286:	429d      	cmp	r5, r3
 8008288:	461a      	mov	r2, r3
 800828a:	d32e      	bcc.n	80082ea <quorem+0xfa>
 800828c:	613c      	str	r4, [r7, #16]
 800828e:	4638      	mov	r0, r7
 8008290:	f001 f8be 	bl	8009410 <__mcmp>
 8008294:	2800      	cmp	r0, #0
 8008296:	db24      	blt.n	80082e2 <quorem+0xf2>
 8008298:	3601      	adds	r6, #1
 800829a:	4628      	mov	r0, r5
 800829c:	f04f 0c00 	mov.w	ip, #0
 80082a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80082a4:	f8d0 e000 	ldr.w	lr, [r0]
 80082a8:	b293      	uxth	r3, r2
 80082aa:	ebac 0303 	sub.w	r3, ip, r3
 80082ae:	0c12      	lsrs	r2, r2, #16
 80082b0:	fa13 f38e 	uxtah	r3, r3, lr
 80082b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80082b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082bc:	b29b      	uxth	r3, r3
 80082be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082c2:	45c1      	cmp	r9, r8
 80082c4:	f840 3b04 	str.w	r3, [r0], #4
 80082c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80082cc:	d2e8      	bcs.n	80082a0 <quorem+0xb0>
 80082ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082d6:	b922      	cbnz	r2, 80082e2 <quorem+0xf2>
 80082d8:	3b04      	subs	r3, #4
 80082da:	429d      	cmp	r5, r3
 80082dc:	461a      	mov	r2, r3
 80082de:	d30a      	bcc.n	80082f6 <quorem+0x106>
 80082e0:	613c      	str	r4, [r7, #16]
 80082e2:	4630      	mov	r0, r6
 80082e4:	b003      	add	sp, #12
 80082e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ea:	6812      	ldr	r2, [r2, #0]
 80082ec:	3b04      	subs	r3, #4
 80082ee:	2a00      	cmp	r2, #0
 80082f0:	d1cc      	bne.n	800828c <quorem+0x9c>
 80082f2:	3c01      	subs	r4, #1
 80082f4:	e7c7      	b.n	8008286 <quorem+0x96>
 80082f6:	6812      	ldr	r2, [r2, #0]
 80082f8:	3b04      	subs	r3, #4
 80082fa:	2a00      	cmp	r2, #0
 80082fc:	d1f0      	bne.n	80082e0 <quorem+0xf0>
 80082fe:	3c01      	subs	r4, #1
 8008300:	e7eb      	b.n	80082da <quorem+0xea>
 8008302:	2000      	movs	r0, #0
 8008304:	e7ee      	b.n	80082e4 <quorem+0xf4>
	...

08008308 <_dtoa_r>:
 8008308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830c:	ed2d 8b02 	vpush	{d8}
 8008310:	ec57 6b10 	vmov	r6, r7, d0
 8008314:	b095      	sub	sp, #84	; 0x54
 8008316:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008318:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800831c:	9105      	str	r1, [sp, #20]
 800831e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008322:	4604      	mov	r4, r0
 8008324:	9209      	str	r2, [sp, #36]	; 0x24
 8008326:	930f      	str	r3, [sp, #60]	; 0x3c
 8008328:	b975      	cbnz	r5, 8008348 <_dtoa_r+0x40>
 800832a:	2010      	movs	r0, #16
 800832c:	f000 fddc 	bl	8008ee8 <malloc>
 8008330:	4602      	mov	r2, r0
 8008332:	6260      	str	r0, [r4, #36]	; 0x24
 8008334:	b920      	cbnz	r0, 8008340 <_dtoa_r+0x38>
 8008336:	4bb2      	ldr	r3, [pc, #712]	; (8008600 <_dtoa_r+0x2f8>)
 8008338:	21ea      	movs	r1, #234	; 0xea
 800833a:	48b2      	ldr	r0, [pc, #712]	; (8008604 <_dtoa_r+0x2fc>)
 800833c:	f001 fb8e 	bl	8009a5c <__assert_func>
 8008340:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008344:	6005      	str	r5, [r0, #0]
 8008346:	60c5      	str	r5, [r0, #12]
 8008348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800834a:	6819      	ldr	r1, [r3, #0]
 800834c:	b151      	cbz	r1, 8008364 <_dtoa_r+0x5c>
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	604a      	str	r2, [r1, #4]
 8008352:	2301      	movs	r3, #1
 8008354:	4093      	lsls	r3, r2
 8008356:	608b      	str	r3, [r1, #8]
 8008358:	4620      	mov	r0, r4
 800835a:	f000 fe1b 	bl	8008f94 <_Bfree>
 800835e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008360:	2200      	movs	r2, #0
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	1e3b      	subs	r3, r7, #0
 8008366:	bfb9      	ittee	lt
 8008368:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800836c:	9303      	strlt	r3, [sp, #12]
 800836e:	2300      	movge	r3, #0
 8008370:	f8c8 3000 	strge.w	r3, [r8]
 8008374:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008378:	4ba3      	ldr	r3, [pc, #652]	; (8008608 <_dtoa_r+0x300>)
 800837a:	bfbc      	itt	lt
 800837c:	2201      	movlt	r2, #1
 800837e:	f8c8 2000 	strlt.w	r2, [r8]
 8008382:	ea33 0309 	bics.w	r3, r3, r9
 8008386:	d11b      	bne.n	80083c0 <_dtoa_r+0xb8>
 8008388:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800838a:	f242 730f 	movw	r3, #9999	; 0x270f
 800838e:	6013      	str	r3, [r2, #0]
 8008390:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008394:	4333      	orrs	r3, r6
 8008396:	f000 857a 	beq.w	8008e8e <_dtoa_r+0xb86>
 800839a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800839c:	b963      	cbnz	r3, 80083b8 <_dtoa_r+0xb0>
 800839e:	4b9b      	ldr	r3, [pc, #620]	; (800860c <_dtoa_r+0x304>)
 80083a0:	e024      	b.n	80083ec <_dtoa_r+0xe4>
 80083a2:	4b9b      	ldr	r3, [pc, #620]	; (8008610 <_dtoa_r+0x308>)
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	3308      	adds	r3, #8
 80083a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	9800      	ldr	r0, [sp, #0]
 80083ae:	b015      	add	sp, #84	; 0x54
 80083b0:	ecbd 8b02 	vpop	{d8}
 80083b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b8:	4b94      	ldr	r3, [pc, #592]	; (800860c <_dtoa_r+0x304>)
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	3303      	adds	r3, #3
 80083be:	e7f3      	b.n	80083a8 <_dtoa_r+0xa0>
 80083c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083c4:	2200      	movs	r2, #0
 80083c6:	ec51 0b17 	vmov	r0, r1, d7
 80083ca:	2300      	movs	r3, #0
 80083cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80083d0:	f7f8 fb82 	bl	8000ad8 <__aeabi_dcmpeq>
 80083d4:	4680      	mov	r8, r0
 80083d6:	b158      	cbz	r0, 80083f0 <_dtoa_r+0xe8>
 80083d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083da:	2301      	movs	r3, #1
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 8551 	beq.w	8008e88 <_dtoa_r+0xb80>
 80083e6:	488b      	ldr	r0, [pc, #556]	; (8008614 <_dtoa_r+0x30c>)
 80083e8:	6018      	str	r0, [r3, #0]
 80083ea:	1e43      	subs	r3, r0, #1
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	e7dd      	b.n	80083ac <_dtoa_r+0xa4>
 80083f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80083f4:	aa12      	add	r2, sp, #72	; 0x48
 80083f6:	a913      	add	r1, sp, #76	; 0x4c
 80083f8:	4620      	mov	r0, r4
 80083fa:	f001 f8ad 	bl	8009558 <__d2b>
 80083fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008402:	4683      	mov	fp, r0
 8008404:	2d00      	cmp	r5, #0
 8008406:	d07c      	beq.n	8008502 <_dtoa_r+0x1fa>
 8008408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800840a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800840e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008412:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008416:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800841a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800841e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008422:	4b7d      	ldr	r3, [pc, #500]	; (8008618 <_dtoa_r+0x310>)
 8008424:	2200      	movs	r2, #0
 8008426:	4630      	mov	r0, r6
 8008428:	4639      	mov	r1, r7
 800842a:	f7f7 ff35 	bl	8000298 <__aeabi_dsub>
 800842e:	a36e      	add	r3, pc, #440	; (adr r3, 80085e8 <_dtoa_r+0x2e0>)
 8008430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008434:	f7f8 f8e8 	bl	8000608 <__aeabi_dmul>
 8008438:	a36d      	add	r3, pc, #436	; (adr r3, 80085f0 <_dtoa_r+0x2e8>)
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	f7f7 ff2d 	bl	800029c <__adddf3>
 8008442:	4606      	mov	r6, r0
 8008444:	4628      	mov	r0, r5
 8008446:	460f      	mov	r7, r1
 8008448:	f7f8 f874 	bl	8000534 <__aeabi_i2d>
 800844c:	a36a      	add	r3, pc, #424	; (adr r3, 80085f8 <_dtoa_r+0x2f0>)
 800844e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008452:	f7f8 f8d9 	bl	8000608 <__aeabi_dmul>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	4630      	mov	r0, r6
 800845c:	4639      	mov	r1, r7
 800845e:	f7f7 ff1d 	bl	800029c <__adddf3>
 8008462:	4606      	mov	r6, r0
 8008464:	460f      	mov	r7, r1
 8008466:	f7f8 fb7f 	bl	8000b68 <__aeabi_d2iz>
 800846a:	2200      	movs	r2, #0
 800846c:	4682      	mov	sl, r0
 800846e:	2300      	movs	r3, #0
 8008470:	4630      	mov	r0, r6
 8008472:	4639      	mov	r1, r7
 8008474:	f7f8 fb3a 	bl	8000aec <__aeabi_dcmplt>
 8008478:	b148      	cbz	r0, 800848e <_dtoa_r+0x186>
 800847a:	4650      	mov	r0, sl
 800847c:	f7f8 f85a 	bl	8000534 <__aeabi_i2d>
 8008480:	4632      	mov	r2, r6
 8008482:	463b      	mov	r3, r7
 8008484:	f7f8 fb28 	bl	8000ad8 <__aeabi_dcmpeq>
 8008488:	b908      	cbnz	r0, 800848e <_dtoa_r+0x186>
 800848a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800848e:	f1ba 0f16 	cmp.w	sl, #22
 8008492:	d854      	bhi.n	800853e <_dtoa_r+0x236>
 8008494:	4b61      	ldr	r3, [pc, #388]	; (800861c <_dtoa_r+0x314>)
 8008496:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80084a2:	f7f8 fb23 	bl	8000aec <__aeabi_dcmplt>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	d04b      	beq.n	8008542 <_dtoa_r+0x23a>
 80084aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80084ae:	2300      	movs	r3, #0
 80084b0:	930e      	str	r3, [sp, #56]	; 0x38
 80084b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084b4:	1b5d      	subs	r5, r3, r5
 80084b6:	1e6b      	subs	r3, r5, #1
 80084b8:	9304      	str	r3, [sp, #16]
 80084ba:	bf43      	ittte	mi
 80084bc:	2300      	movmi	r3, #0
 80084be:	f1c5 0801 	rsbmi	r8, r5, #1
 80084c2:	9304      	strmi	r3, [sp, #16]
 80084c4:	f04f 0800 	movpl.w	r8, #0
 80084c8:	f1ba 0f00 	cmp.w	sl, #0
 80084cc:	db3b      	blt.n	8008546 <_dtoa_r+0x23e>
 80084ce:	9b04      	ldr	r3, [sp, #16]
 80084d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80084d4:	4453      	add	r3, sl
 80084d6:	9304      	str	r3, [sp, #16]
 80084d8:	2300      	movs	r3, #0
 80084da:	9306      	str	r3, [sp, #24]
 80084dc:	9b05      	ldr	r3, [sp, #20]
 80084de:	2b09      	cmp	r3, #9
 80084e0:	d869      	bhi.n	80085b6 <_dtoa_r+0x2ae>
 80084e2:	2b05      	cmp	r3, #5
 80084e4:	bfc4      	itt	gt
 80084e6:	3b04      	subgt	r3, #4
 80084e8:	9305      	strgt	r3, [sp, #20]
 80084ea:	9b05      	ldr	r3, [sp, #20]
 80084ec:	f1a3 0302 	sub.w	r3, r3, #2
 80084f0:	bfcc      	ite	gt
 80084f2:	2500      	movgt	r5, #0
 80084f4:	2501      	movle	r5, #1
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	d869      	bhi.n	80085ce <_dtoa_r+0x2c6>
 80084fa:	e8df f003 	tbb	[pc, r3]
 80084fe:	4e2c      	.short	0x4e2c
 8008500:	5a4c      	.short	0x5a4c
 8008502:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008506:	441d      	add	r5, r3
 8008508:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800850c:	2b20      	cmp	r3, #32
 800850e:	bfc1      	itttt	gt
 8008510:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008514:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008518:	fa09 f303 	lslgt.w	r3, r9, r3
 800851c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008520:	bfda      	itte	le
 8008522:	f1c3 0320 	rsble	r3, r3, #32
 8008526:	fa06 f003 	lslle.w	r0, r6, r3
 800852a:	4318      	orrgt	r0, r3
 800852c:	f7f7 fff2 	bl	8000514 <__aeabi_ui2d>
 8008530:	2301      	movs	r3, #1
 8008532:	4606      	mov	r6, r0
 8008534:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008538:	3d01      	subs	r5, #1
 800853a:	9310      	str	r3, [sp, #64]	; 0x40
 800853c:	e771      	b.n	8008422 <_dtoa_r+0x11a>
 800853e:	2301      	movs	r3, #1
 8008540:	e7b6      	b.n	80084b0 <_dtoa_r+0x1a8>
 8008542:	900e      	str	r0, [sp, #56]	; 0x38
 8008544:	e7b5      	b.n	80084b2 <_dtoa_r+0x1aa>
 8008546:	f1ca 0300 	rsb	r3, sl, #0
 800854a:	9306      	str	r3, [sp, #24]
 800854c:	2300      	movs	r3, #0
 800854e:	eba8 080a 	sub.w	r8, r8, sl
 8008552:	930d      	str	r3, [sp, #52]	; 0x34
 8008554:	e7c2      	b.n	80084dc <_dtoa_r+0x1d4>
 8008556:	2300      	movs	r3, #0
 8008558:	9308      	str	r3, [sp, #32]
 800855a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800855c:	2b00      	cmp	r3, #0
 800855e:	dc39      	bgt.n	80085d4 <_dtoa_r+0x2cc>
 8008560:	f04f 0901 	mov.w	r9, #1
 8008564:	f8cd 9004 	str.w	r9, [sp, #4]
 8008568:	464b      	mov	r3, r9
 800856a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800856e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008570:	2200      	movs	r2, #0
 8008572:	6042      	str	r2, [r0, #4]
 8008574:	2204      	movs	r2, #4
 8008576:	f102 0614 	add.w	r6, r2, #20
 800857a:	429e      	cmp	r6, r3
 800857c:	6841      	ldr	r1, [r0, #4]
 800857e:	d92f      	bls.n	80085e0 <_dtoa_r+0x2d8>
 8008580:	4620      	mov	r0, r4
 8008582:	f000 fcc7 	bl	8008f14 <_Balloc>
 8008586:	9000      	str	r0, [sp, #0]
 8008588:	2800      	cmp	r0, #0
 800858a:	d14b      	bne.n	8008624 <_dtoa_r+0x31c>
 800858c:	4b24      	ldr	r3, [pc, #144]	; (8008620 <_dtoa_r+0x318>)
 800858e:	4602      	mov	r2, r0
 8008590:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008594:	e6d1      	b.n	800833a <_dtoa_r+0x32>
 8008596:	2301      	movs	r3, #1
 8008598:	e7de      	b.n	8008558 <_dtoa_r+0x250>
 800859a:	2300      	movs	r3, #0
 800859c:	9308      	str	r3, [sp, #32]
 800859e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a0:	eb0a 0903 	add.w	r9, sl, r3
 80085a4:	f109 0301 	add.w	r3, r9, #1
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	bfb8      	it	lt
 80085ae:	2301      	movlt	r3, #1
 80085b0:	e7dd      	b.n	800856e <_dtoa_r+0x266>
 80085b2:	2301      	movs	r3, #1
 80085b4:	e7f2      	b.n	800859c <_dtoa_r+0x294>
 80085b6:	2501      	movs	r5, #1
 80085b8:	2300      	movs	r3, #0
 80085ba:	9305      	str	r3, [sp, #20]
 80085bc:	9508      	str	r5, [sp, #32]
 80085be:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80085c2:	2200      	movs	r2, #0
 80085c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80085c8:	2312      	movs	r3, #18
 80085ca:	9209      	str	r2, [sp, #36]	; 0x24
 80085cc:	e7cf      	b.n	800856e <_dtoa_r+0x266>
 80085ce:	2301      	movs	r3, #1
 80085d0:	9308      	str	r3, [sp, #32]
 80085d2:	e7f4      	b.n	80085be <_dtoa_r+0x2b6>
 80085d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80085d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80085dc:	464b      	mov	r3, r9
 80085de:	e7c6      	b.n	800856e <_dtoa_r+0x266>
 80085e0:	3101      	adds	r1, #1
 80085e2:	6041      	str	r1, [r0, #4]
 80085e4:	0052      	lsls	r2, r2, #1
 80085e6:	e7c6      	b.n	8008576 <_dtoa_r+0x26e>
 80085e8:	636f4361 	.word	0x636f4361
 80085ec:	3fd287a7 	.word	0x3fd287a7
 80085f0:	8b60c8b3 	.word	0x8b60c8b3
 80085f4:	3fc68a28 	.word	0x3fc68a28
 80085f8:	509f79fb 	.word	0x509f79fb
 80085fc:	3fd34413 	.word	0x3fd34413
 8008600:	0800b885 	.word	0x0800b885
 8008604:	0800b89c 	.word	0x0800b89c
 8008608:	7ff00000 	.word	0x7ff00000
 800860c:	0800b881 	.word	0x0800b881
 8008610:	0800b878 	.word	0x0800b878
 8008614:	0800b855 	.word	0x0800b855
 8008618:	3ff80000 	.word	0x3ff80000
 800861c:	0800b998 	.word	0x0800b998
 8008620:	0800b8fb 	.word	0x0800b8fb
 8008624:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008626:	9a00      	ldr	r2, [sp, #0]
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	9b01      	ldr	r3, [sp, #4]
 800862c:	2b0e      	cmp	r3, #14
 800862e:	f200 80ad 	bhi.w	800878c <_dtoa_r+0x484>
 8008632:	2d00      	cmp	r5, #0
 8008634:	f000 80aa 	beq.w	800878c <_dtoa_r+0x484>
 8008638:	f1ba 0f00 	cmp.w	sl, #0
 800863c:	dd36      	ble.n	80086ac <_dtoa_r+0x3a4>
 800863e:	4ac3      	ldr	r2, [pc, #780]	; (800894c <_dtoa_r+0x644>)
 8008640:	f00a 030f 	and.w	r3, sl, #15
 8008644:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008648:	ed93 7b00 	vldr	d7, [r3]
 800864c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008650:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008654:	eeb0 8a47 	vmov.f32	s16, s14
 8008658:	eef0 8a67 	vmov.f32	s17, s15
 800865c:	d016      	beq.n	800868c <_dtoa_r+0x384>
 800865e:	4bbc      	ldr	r3, [pc, #752]	; (8008950 <_dtoa_r+0x648>)
 8008660:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008664:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008668:	f7f8 f8f8 	bl	800085c <__aeabi_ddiv>
 800866c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008670:	f007 070f 	and.w	r7, r7, #15
 8008674:	2503      	movs	r5, #3
 8008676:	4eb6      	ldr	r6, [pc, #728]	; (8008950 <_dtoa_r+0x648>)
 8008678:	b957      	cbnz	r7, 8008690 <_dtoa_r+0x388>
 800867a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800867e:	ec53 2b18 	vmov	r2, r3, d8
 8008682:	f7f8 f8eb 	bl	800085c <__aeabi_ddiv>
 8008686:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800868a:	e029      	b.n	80086e0 <_dtoa_r+0x3d8>
 800868c:	2502      	movs	r5, #2
 800868e:	e7f2      	b.n	8008676 <_dtoa_r+0x36e>
 8008690:	07f9      	lsls	r1, r7, #31
 8008692:	d508      	bpl.n	80086a6 <_dtoa_r+0x39e>
 8008694:	ec51 0b18 	vmov	r0, r1, d8
 8008698:	e9d6 2300 	ldrd	r2, r3, [r6]
 800869c:	f7f7 ffb4 	bl	8000608 <__aeabi_dmul>
 80086a0:	ec41 0b18 	vmov	d8, r0, r1
 80086a4:	3501      	adds	r5, #1
 80086a6:	107f      	asrs	r7, r7, #1
 80086a8:	3608      	adds	r6, #8
 80086aa:	e7e5      	b.n	8008678 <_dtoa_r+0x370>
 80086ac:	f000 80a6 	beq.w	80087fc <_dtoa_r+0x4f4>
 80086b0:	f1ca 0600 	rsb	r6, sl, #0
 80086b4:	4ba5      	ldr	r3, [pc, #660]	; (800894c <_dtoa_r+0x644>)
 80086b6:	4fa6      	ldr	r7, [pc, #664]	; (8008950 <_dtoa_r+0x648>)
 80086b8:	f006 020f 	and.w	r2, r6, #15
 80086bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80086c8:	f7f7 ff9e 	bl	8000608 <__aeabi_dmul>
 80086cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086d0:	1136      	asrs	r6, r6, #4
 80086d2:	2300      	movs	r3, #0
 80086d4:	2502      	movs	r5, #2
 80086d6:	2e00      	cmp	r6, #0
 80086d8:	f040 8085 	bne.w	80087e6 <_dtoa_r+0x4de>
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1d2      	bne.n	8008686 <_dtoa_r+0x37e>
 80086e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 808c 	beq.w	8008800 <_dtoa_r+0x4f8>
 80086e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80086ec:	4b99      	ldr	r3, [pc, #612]	; (8008954 <_dtoa_r+0x64c>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	4630      	mov	r0, r6
 80086f2:	4639      	mov	r1, r7
 80086f4:	f7f8 f9fa 	bl	8000aec <__aeabi_dcmplt>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	f000 8081 	beq.w	8008800 <_dtoa_r+0x4f8>
 80086fe:	9b01      	ldr	r3, [sp, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d07d      	beq.n	8008800 <_dtoa_r+0x4f8>
 8008704:	f1b9 0f00 	cmp.w	r9, #0
 8008708:	dd3c      	ble.n	8008784 <_dtoa_r+0x47c>
 800870a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800870e:	9307      	str	r3, [sp, #28]
 8008710:	2200      	movs	r2, #0
 8008712:	4b91      	ldr	r3, [pc, #580]	; (8008958 <_dtoa_r+0x650>)
 8008714:	4630      	mov	r0, r6
 8008716:	4639      	mov	r1, r7
 8008718:	f7f7 ff76 	bl	8000608 <__aeabi_dmul>
 800871c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008720:	3501      	adds	r5, #1
 8008722:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008726:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800872a:	4628      	mov	r0, r5
 800872c:	f7f7 ff02 	bl	8000534 <__aeabi_i2d>
 8008730:	4632      	mov	r2, r6
 8008732:	463b      	mov	r3, r7
 8008734:	f7f7 ff68 	bl	8000608 <__aeabi_dmul>
 8008738:	4b88      	ldr	r3, [pc, #544]	; (800895c <_dtoa_r+0x654>)
 800873a:	2200      	movs	r2, #0
 800873c:	f7f7 fdae 	bl	800029c <__adddf3>
 8008740:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008748:	9303      	str	r3, [sp, #12]
 800874a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800874c:	2b00      	cmp	r3, #0
 800874e:	d15c      	bne.n	800880a <_dtoa_r+0x502>
 8008750:	4b83      	ldr	r3, [pc, #524]	; (8008960 <_dtoa_r+0x658>)
 8008752:	2200      	movs	r2, #0
 8008754:	4630      	mov	r0, r6
 8008756:	4639      	mov	r1, r7
 8008758:	f7f7 fd9e 	bl	8000298 <__aeabi_dsub>
 800875c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008760:	4606      	mov	r6, r0
 8008762:	460f      	mov	r7, r1
 8008764:	f7f8 f9e0 	bl	8000b28 <__aeabi_dcmpgt>
 8008768:	2800      	cmp	r0, #0
 800876a:	f040 8296 	bne.w	8008c9a <_dtoa_r+0x992>
 800876e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008772:	4630      	mov	r0, r6
 8008774:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008778:	4639      	mov	r1, r7
 800877a:	f7f8 f9b7 	bl	8000aec <__aeabi_dcmplt>
 800877e:	2800      	cmp	r0, #0
 8008780:	f040 8288 	bne.w	8008c94 <_dtoa_r+0x98c>
 8008784:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008788:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800878c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800878e:	2b00      	cmp	r3, #0
 8008790:	f2c0 8158 	blt.w	8008a44 <_dtoa_r+0x73c>
 8008794:	f1ba 0f0e 	cmp.w	sl, #14
 8008798:	f300 8154 	bgt.w	8008a44 <_dtoa_r+0x73c>
 800879c:	4b6b      	ldr	r3, [pc, #428]	; (800894c <_dtoa_r+0x644>)
 800879e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80087a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f280 80e3 	bge.w	8008974 <_dtoa_r+0x66c>
 80087ae:	9b01      	ldr	r3, [sp, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f300 80df 	bgt.w	8008974 <_dtoa_r+0x66c>
 80087b6:	f040 826d 	bne.w	8008c94 <_dtoa_r+0x98c>
 80087ba:	4b69      	ldr	r3, [pc, #420]	; (8008960 <_dtoa_r+0x658>)
 80087bc:	2200      	movs	r2, #0
 80087be:	4640      	mov	r0, r8
 80087c0:	4649      	mov	r1, r9
 80087c2:	f7f7 ff21 	bl	8000608 <__aeabi_dmul>
 80087c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087ca:	f7f8 f9a3 	bl	8000b14 <__aeabi_dcmpge>
 80087ce:	9e01      	ldr	r6, [sp, #4]
 80087d0:	4637      	mov	r7, r6
 80087d2:	2800      	cmp	r0, #0
 80087d4:	f040 8243 	bne.w	8008c5e <_dtoa_r+0x956>
 80087d8:	9d00      	ldr	r5, [sp, #0]
 80087da:	2331      	movs	r3, #49	; 0x31
 80087dc:	f805 3b01 	strb.w	r3, [r5], #1
 80087e0:	f10a 0a01 	add.w	sl, sl, #1
 80087e4:	e23f      	b.n	8008c66 <_dtoa_r+0x95e>
 80087e6:	07f2      	lsls	r2, r6, #31
 80087e8:	d505      	bpl.n	80087f6 <_dtoa_r+0x4ee>
 80087ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087ee:	f7f7 ff0b 	bl	8000608 <__aeabi_dmul>
 80087f2:	3501      	adds	r5, #1
 80087f4:	2301      	movs	r3, #1
 80087f6:	1076      	asrs	r6, r6, #1
 80087f8:	3708      	adds	r7, #8
 80087fa:	e76c      	b.n	80086d6 <_dtoa_r+0x3ce>
 80087fc:	2502      	movs	r5, #2
 80087fe:	e76f      	b.n	80086e0 <_dtoa_r+0x3d8>
 8008800:	9b01      	ldr	r3, [sp, #4]
 8008802:	f8cd a01c 	str.w	sl, [sp, #28]
 8008806:	930c      	str	r3, [sp, #48]	; 0x30
 8008808:	e78d      	b.n	8008726 <_dtoa_r+0x41e>
 800880a:	9900      	ldr	r1, [sp, #0]
 800880c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800880e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008810:	4b4e      	ldr	r3, [pc, #312]	; (800894c <_dtoa_r+0x644>)
 8008812:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008816:	4401      	add	r1, r0
 8008818:	9102      	str	r1, [sp, #8]
 800881a:	9908      	ldr	r1, [sp, #32]
 800881c:	eeb0 8a47 	vmov.f32	s16, s14
 8008820:	eef0 8a67 	vmov.f32	s17, s15
 8008824:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008828:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800882c:	2900      	cmp	r1, #0
 800882e:	d045      	beq.n	80088bc <_dtoa_r+0x5b4>
 8008830:	494c      	ldr	r1, [pc, #304]	; (8008964 <_dtoa_r+0x65c>)
 8008832:	2000      	movs	r0, #0
 8008834:	f7f8 f812 	bl	800085c <__aeabi_ddiv>
 8008838:	ec53 2b18 	vmov	r2, r3, d8
 800883c:	f7f7 fd2c 	bl	8000298 <__aeabi_dsub>
 8008840:	9d00      	ldr	r5, [sp, #0]
 8008842:	ec41 0b18 	vmov	d8, r0, r1
 8008846:	4639      	mov	r1, r7
 8008848:	4630      	mov	r0, r6
 800884a:	f7f8 f98d 	bl	8000b68 <__aeabi_d2iz>
 800884e:	900c      	str	r0, [sp, #48]	; 0x30
 8008850:	f7f7 fe70 	bl	8000534 <__aeabi_i2d>
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	4630      	mov	r0, r6
 800885a:	4639      	mov	r1, r7
 800885c:	f7f7 fd1c 	bl	8000298 <__aeabi_dsub>
 8008860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008862:	3330      	adds	r3, #48	; 0x30
 8008864:	f805 3b01 	strb.w	r3, [r5], #1
 8008868:	ec53 2b18 	vmov	r2, r3, d8
 800886c:	4606      	mov	r6, r0
 800886e:	460f      	mov	r7, r1
 8008870:	f7f8 f93c 	bl	8000aec <__aeabi_dcmplt>
 8008874:	2800      	cmp	r0, #0
 8008876:	d165      	bne.n	8008944 <_dtoa_r+0x63c>
 8008878:	4632      	mov	r2, r6
 800887a:	463b      	mov	r3, r7
 800887c:	4935      	ldr	r1, [pc, #212]	; (8008954 <_dtoa_r+0x64c>)
 800887e:	2000      	movs	r0, #0
 8008880:	f7f7 fd0a 	bl	8000298 <__aeabi_dsub>
 8008884:	ec53 2b18 	vmov	r2, r3, d8
 8008888:	f7f8 f930 	bl	8000aec <__aeabi_dcmplt>
 800888c:	2800      	cmp	r0, #0
 800888e:	f040 80b9 	bne.w	8008a04 <_dtoa_r+0x6fc>
 8008892:	9b02      	ldr	r3, [sp, #8]
 8008894:	429d      	cmp	r5, r3
 8008896:	f43f af75 	beq.w	8008784 <_dtoa_r+0x47c>
 800889a:	4b2f      	ldr	r3, [pc, #188]	; (8008958 <_dtoa_r+0x650>)
 800889c:	ec51 0b18 	vmov	r0, r1, d8
 80088a0:	2200      	movs	r2, #0
 80088a2:	f7f7 feb1 	bl	8000608 <__aeabi_dmul>
 80088a6:	4b2c      	ldr	r3, [pc, #176]	; (8008958 <_dtoa_r+0x650>)
 80088a8:	ec41 0b18 	vmov	d8, r0, r1
 80088ac:	2200      	movs	r2, #0
 80088ae:	4630      	mov	r0, r6
 80088b0:	4639      	mov	r1, r7
 80088b2:	f7f7 fea9 	bl	8000608 <__aeabi_dmul>
 80088b6:	4606      	mov	r6, r0
 80088b8:	460f      	mov	r7, r1
 80088ba:	e7c4      	b.n	8008846 <_dtoa_r+0x53e>
 80088bc:	ec51 0b17 	vmov	r0, r1, d7
 80088c0:	f7f7 fea2 	bl	8000608 <__aeabi_dmul>
 80088c4:	9b02      	ldr	r3, [sp, #8]
 80088c6:	9d00      	ldr	r5, [sp, #0]
 80088c8:	930c      	str	r3, [sp, #48]	; 0x30
 80088ca:	ec41 0b18 	vmov	d8, r0, r1
 80088ce:	4639      	mov	r1, r7
 80088d0:	4630      	mov	r0, r6
 80088d2:	f7f8 f949 	bl	8000b68 <__aeabi_d2iz>
 80088d6:	9011      	str	r0, [sp, #68]	; 0x44
 80088d8:	f7f7 fe2c 	bl	8000534 <__aeabi_i2d>
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	4630      	mov	r0, r6
 80088e2:	4639      	mov	r1, r7
 80088e4:	f7f7 fcd8 	bl	8000298 <__aeabi_dsub>
 80088e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088ea:	3330      	adds	r3, #48	; 0x30
 80088ec:	f805 3b01 	strb.w	r3, [r5], #1
 80088f0:	9b02      	ldr	r3, [sp, #8]
 80088f2:	429d      	cmp	r5, r3
 80088f4:	4606      	mov	r6, r0
 80088f6:	460f      	mov	r7, r1
 80088f8:	f04f 0200 	mov.w	r2, #0
 80088fc:	d134      	bne.n	8008968 <_dtoa_r+0x660>
 80088fe:	4b19      	ldr	r3, [pc, #100]	; (8008964 <_dtoa_r+0x65c>)
 8008900:	ec51 0b18 	vmov	r0, r1, d8
 8008904:	f7f7 fcca 	bl	800029c <__adddf3>
 8008908:	4602      	mov	r2, r0
 800890a:	460b      	mov	r3, r1
 800890c:	4630      	mov	r0, r6
 800890e:	4639      	mov	r1, r7
 8008910:	f7f8 f90a 	bl	8000b28 <__aeabi_dcmpgt>
 8008914:	2800      	cmp	r0, #0
 8008916:	d175      	bne.n	8008a04 <_dtoa_r+0x6fc>
 8008918:	ec53 2b18 	vmov	r2, r3, d8
 800891c:	4911      	ldr	r1, [pc, #68]	; (8008964 <_dtoa_r+0x65c>)
 800891e:	2000      	movs	r0, #0
 8008920:	f7f7 fcba 	bl	8000298 <__aeabi_dsub>
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	4630      	mov	r0, r6
 800892a:	4639      	mov	r1, r7
 800892c:	f7f8 f8de 	bl	8000aec <__aeabi_dcmplt>
 8008930:	2800      	cmp	r0, #0
 8008932:	f43f af27 	beq.w	8008784 <_dtoa_r+0x47c>
 8008936:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008938:	1e6b      	subs	r3, r5, #1
 800893a:	930c      	str	r3, [sp, #48]	; 0x30
 800893c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008940:	2b30      	cmp	r3, #48	; 0x30
 8008942:	d0f8      	beq.n	8008936 <_dtoa_r+0x62e>
 8008944:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008948:	e04a      	b.n	80089e0 <_dtoa_r+0x6d8>
 800894a:	bf00      	nop
 800894c:	0800b998 	.word	0x0800b998
 8008950:	0800b970 	.word	0x0800b970
 8008954:	3ff00000 	.word	0x3ff00000
 8008958:	40240000 	.word	0x40240000
 800895c:	401c0000 	.word	0x401c0000
 8008960:	40140000 	.word	0x40140000
 8008964:	3fe00000 	.word	0x3fe00000
 8008968:	4baf      	ldr	r3, [pc, #700]	; (8008c28 <_dtoa_r+0x920>)
 800896a:	f7f7 fe4d 	bl	8000608 <__aeabi_dmul>
 800896e:	4606      	mov	r6, r0
 8008970:	460f      	mov	r7, r1
 8008972:	e7ac      	b.n	80088ce <_dtoa_r+0x5c6>
 8008974:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008978:	9d00      	ldr	r5, [sp, #0]
 800897a:	4642      	mov	r2, r8
 800897c:	464b      	mov	r3, r9
 800897e:	4630      	mov	r0, r6
 8008980:	4639      	mov	r1, r7
 8008982:	f7f7 ff6b 	bl	800085c <__aeabi_ddiv>
 8008986:	f7f8 f8ef 	bl	8000b68 <__aeabi_d2iz>
 800898a:	9002      	str	r0, [sp, #8]
 800898c:	f7f7 fdd2 	bl	8000534 <__aeabi_i2d>
 8008990:	4642      	mov	r2, r8
 8008992:	464b      	mov	r3, r9
 8008994:	f7f7 fe38 	bl	8000608 <__aeabi_dmul>
 8008998:	4602      	mov	r2, r0
 800899a:	460b      	mov	r3, r1
 800899c:	4630      	mov	r0, r6
 800899e:	4639      	mov	r1, r7
 80089a0:	f7f7 fc7a 	bl	8000298 <__aeabi_dsub>
 80089a4:	9e02      	ldr	r6, [sp, #8]
 80089a6:	9f01      	ldr	r7, [sp, #4]
 80089a8:	3630      	adds	r6, #48	; 0x30
 80089aa:	f805 6b01 	strb.w	r6, [r5], #1
 80089ae:	9e00      	ldr	r6, [sp, #0]
 80089b0:	1bae      	subs	r6, r5, r6
 80089b2:	42b7      	cmp	r7, r6
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	d137      	bne.n	8008a2a <_dtoa_r+0x722>
 80089ba:	f7f7 fc6f 	bl	800029c <__adddf3>
 80089be:	4642      	mov	r2, r8
 80089c0:	464b      	mov	r3, r9
 80089c2:	4606      	mov	r6, r0
 80089c4:	460f      	mov	r7, r1
 80089c6:	f7f8 f8af 	bl	8000b28 <__aeabi_dcmpgt>
 80089ca:	b9c8      	cbnz	r0, 8008a00 <_dtoa_r+0x6f8>
 80089cc:	4642      	mov	r2, r8
 80089ce:	464b      	mov	r3, r9
 80089d0:	4630      	mov	r0, r6
 80089d2:	4639      	mov	r1, r7
 80089d4:	f7f8 f880 	bl	8000ad8 <__aeabi_dcmpeq>
 80089d8:	b110      	cbz	r0, 80089e0 <_dtoa_r+0x6d8>
 80089da:	9b02      	ldr	r3, [sp, #8]
 80089dc:	07d9      	lsls	r1, r3, #31
 80089de:	d40f      	bmi.n	8008a00 <_dtoa_r+0x6f8>
 80089e0:	4620      	mov	r0, r4
 80089e2:	4659      	mov	r1, fp
 80089e4:	f000 fad6 	bl	8008f94 <_Bfree>
 80089e8:	2300      	movs	r3, #0
 80089ea:	702b      	strb	r3, [r5, #0]
 80089ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089ee:	f10a 0001 	add.w	r0, sl, #1
 80089f2:	6018      	str	r0, [r3, #0]
 80089f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f43f acd8 	beq.w	80083ac <_dtoa_r+0xa4>
 80089fc:	601d      	str	r5, [r3, #0]
 80089fe:	e4d5      	b.n	80083ac <_dtoa_r+0xa4>
 8008a00:	f8cd a01c 	str.w	sl, [sp, #28]
 8008a04:	462b      	mov	r3, r5
 8008a06:	461d      	mov	r5, r3
 8008a08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a0c:	2a39      	cmp	r2, #57	; 0x39
 8008a0e:	d108      	bne.n	8008a22 <_dtoa_r+0x71a>
 8008a10:	9a00      	ldr	r2, [sp, #0]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d1f7      	bne.n	8008a06 <_dtoa_r+0x6fe>
 8008a16:	9a07      	ldr	r2, [sp, #28]
 8008a18:	9900      	ldr	r1, [sp, #0]
 8008a1a:	3201      	adds	r2, #1
 8008a1c:	9207      	str	r2, [sp, #28]
 8008a1e:	2230      	movs	r2, #48	; 0x30
 8008a20:	700a      	strb	r2, [r1, #0]
 8008a22:	781a      	ldrb	r2, [r3, #0]
 8008a24:	3201      	adds	r2, #1
 8008a26:	701a      	strb	r2, [r3, #0]
 8008a28:	e78c      	b.n	8008944 <_dtoa_r+0x63c>
 8008a2a:	4b7f      	ldr	r3, [pc, #508]	; (8008c28 <_dtoa_r+0x920>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f7f7 fdeb 	bl	8000608 <__aeabi_dmul>
 8008a32:	2200      	movs	r2, #0
 8008a34:	2300      	movs	r3, #0
 8008a36:	4606      	mov	r6, r0
 8008a38:	460f      	mov	r7, r1
 8008a3a:	f7f8 f84d 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	d09b      	beq.n	800897a <_dtoa_r+0x672>
 8008a42:	e7cd      	b.n	80089e0 <_dtoa_r+0x6d8>
 8008a44:	9a08      	ldr	r2, [sp, #32]
 8008a46:	2a00      	cmp	r2, #0
 8008a48:	f000 80c4 	beq.w	8008bd4 <_dtoa_r+0x8cc>
 8008a4c:	9a05      	ldr	r2, [sp, #20]
 8008a4e:	2a01      	cmp	r2, #1
 8008a50:	f300 80a8 	bgt.w	8008ba4 <_dtoa_r+0x89c>
 8008a54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a56:	2a00      	cmp	r2, #0
 8008a58:	f000 80a0 	beq.w	8008b9c <_dtoa_r+0x894>
 8008a5c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a60:	9e06      	ldr	r6, [sp, #24]
 8008a62:	4645      	mov	r5, r8
 8008a64:	9a04      	ldr	r2, [sp, #16]
 8008a66:	2101      	movs	r1, #1
 8008a68:	441a      	add	r2, r3
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	4498      	add	r8, r3
 8008a6e:	9204      	str	r2, [sp, #16]
 8008a70:	f000 fb4c 	bl	800910c <__i2b>
 8008a74:	4607      	mov	r7, r0
 8008a76:	2d00      	cmp	r5, #0
 8008a78:	dd0b      	ble.n	8008a92 <_dtoa_r+0x78a>
 8008a7a:	9b04      	ldr	r3, [sp, #16]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	dd08      	ble.n	8008a92 <_dtoa_r+0x78a>
 8008a80:	42ab      	cmp	r3, r5
 8008a82:	9a04      	ldr	r2, [sp, #16]
 8008a84:	bfa8      	it	ge
 8008a86:	462b      	movge	r3, r5
 8008a88:	eba8 0803 	sub.w	r8, r8, r3
 8008a8c:	1aed      	subs	r5, r5, r3
 8008a8e:	1ad3      	subs	r3, r2, r3
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	9b06      	ldr	r3, [sp, #24]
 8008a94:	b1fb      	cbz	r3, 8008ad6 <_dtoa_r+0x7ce>
 8008a96:	9b08      	ldr	r3, [sp, #32]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 809f 	beq.w	8008bdc <_dtoa_r+0x8d4>
 8008a9e:	2e00      	cmp	r6, #0
 8008aa0:	dd11      	ble.n	8008ac6 <_dtoa_r+0x7be>
 8008aa2:	4639      	mov	r1, r7
 8008aa4:	4632      	mov	r2, r6
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f000 fbec 	bl	8009284 <__pow5mult>
 8008aac:	465a      	mov	r2, fp
 8008aae:	4601      	mov	r1, r0
 8008ab0:	4607      	mov	r7, r0
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f000 fb40 	bl	8009138 <__multiply>
 8008ab8:	4659      	mov	r1, fp
 8008aba:	9007      	str	r0, [sp, #28]
 8008abc:	4620      	mov	r0, r4
 8008abe:	f000 fa69 	bl	8008f94 <_Bfree>
 8008ac2:	9b07      	ldr	r3, [sp, #28]
 8008ac4:	469b      	mov	fp, r3
 8008ac6:	9b06      	ldr	r3, [sp, #24]
 8008ac8:	1b9a      	subs	r2, r3, r6
 8008aca:	d004      	beq.n	8008ad6 <_dtoa_r+0x7ce>
 8008acc:	4659      	mov	r1, fp
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f000 fbd8 	bl	8009284 <__pow5mult>
 8008ad4:	4683      	mov	fp, r0
 8008ad6:	2101      	movs	r1, #1
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f000 fb17 	bl	800910c <__i2b>
 8008ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	dd7c      	ble.n	8008be0 <_dtoa_r+0x8d8>
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	4601      	mov	r1, r0
 8008aea:	4620      	mov	r0, r4
 8008aec:	f000 fbca 	bl	8009284 <__pow5mult>
 8008af0:	9b05      	ldr	r3, [sp, #20]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	4606      	mov	r6, r0
 8008af6:	dd76      	ble.n	8008be6 <_dtoa_r+0x8de>
 8008af8:	2300      	movs	r3, #0
 8008afa:	9306      	str	r3, [sp, #24]
 8008afc:	6933      	ldr	r3, [r6, #16]
 8008afe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b02:	6918      	ldr	r0, [r3, #16]
 8008b04:	f000 fab2 	bl	800906c <__hi0bits>
 8008b08:	f1c0 0020 	rsb	r0, r0, #32
 8008b0c:	9b04      	ldr	r3, [sp, #16]
 8008b0e:	4418      	add	r0, r3
 8008b10:	f010 001f 	ands.w	r0, r0, #31
 8008b14:	f000 8086 	beq.w	8008c24 <_dtoa_r+0x91c>
 8008b18:	f1c0 0320 	rsb	r3, r0, #32
 8008b1c:	2b04      	cmp	r3, #4
 8008b1e:	dd7f      	ble.n	8008c20 <_dtoa_r+0x918>
 8008b20:	f1c0 001c 	rsb	r0, r0, #28
 8008b24:	9b04      	ldr	r3, [sp, #16]
 8008b26:	4403      	add	r3, r0
 8008b28:	4480      	add	r8, r0
 8008b2a:	4405      	add	r5, r0
 8008b2c:	9304      	str	r3, [sp, #16]
 8008b2e:	f1b8 0f00 	cmp.w	r8, #0
 8008b32:	dd05      	ble.n	8008b40 <_dtoa_r+0x838>
 8008b34:	4659      	mov	r1, fp
 8008b36:	4642      	mov	r2, r8
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 fbfd 	bl	8009338 <__lshift>
 8008b3e:	4683      	mov	fp, r0
 8008b40:	9b04      	ldr	r3, [sp, #16]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	dd05      	ble.n	8008b52 <_dtoa_r+0x84a>
 8008b46:	4631      	mov	r1, r6
 8008b48:	461a      	mov	r2, r3
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f000 fbf4 	bl	8009338 <__lshift>
 8008b50:	4606      	mov	r6, r0
 8008b52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d069      	beq.n	8008c2c <_dtoa_r+0x924>
 8008b58:	4631      	mov	r1, r6
 8008b5a:	4658      	mov	r0, fp
 8008b5c:	f000 fc58 	bl	8009410 <__mcmp>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	da63      	bge.n	8008c2c <_dtoa_r+0x924>
 8008b64:	2300      	movs	r3, #0
 8008b66:	4659      	mov	r1, fp
 8008b68:	220a      	movs	r2, #10
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f000 fa34 	bl	8008fd8 <__multadd>
 8008b70:	9b08      	ldr	r3, [sp, #32]
 8008b72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008b76:	4683      	mov	fp, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f000 818f 	beq.w	8008e9c <_dtoa_r+0xb94>
 8008b7e:	4639      	mov	r1, r7
 8008b80:	2300      	movs	r3, #0
 8008b82:	220a      	movs	r2, #10
 8008b84:	4620      	mov	r0, r4
 8008b86:	f000 fa27 	bl	8008fd8 <__multadd>
 8008b8a:	f1b9 0f00 	cmp.w	r9, #0
 8008b8e:	4607      	mov	r7, r0
 8008b90:	f300 808e 	bgt.w	8008cb0 <_dtoa_r+0x9a8>
 8008b94:	9b05      	ldr	r3, [sp, #20]
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	dc50      	bgt.n	8008c3c <_dtoa_r+0x934>
 8008b9a:	e089      	b.n	8008cb0 <_dtoa_r+0x9a8>
 8008b9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ba2:	e75d      	b.n	8008a60 <_dtoa_r+0x758>
 8008ba4:	9b01      	ldr	r3, [sp, #4]
 8008ba6:	1e5e      	subs	r6, r3, #1
 8008ba8:	9b06      	ldr	r3, [sp, #24]
 8008baa:	42b3      	cmp	r3, r6
 8008bac:	bfbf      	itttt	lt
 8008bae:	9b06      	ldrlt	r3, [sp, #24]
 8008bb0:	9606      	strlt	r6, [sp, #24]
 8008bb2:	1af2      	sublt	r2, r6, r3
 8008bb4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008bb6:	bfb6      	itet	lt
 8008bb8:	189b      	addlt	r3, r3, r2
 8008bba:	1b9e      	subge	r6, r3, r6
 8008bbc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008bbe:	9b01      	ldr	r3, [sp, #4]
 8008bc0:	bfb8      	it	lt
 8008bc2:	2600      	movlt	r6, #0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	bfb5      	itete	lt
 8008bc8:	eba8 0503 	sublt.w	r5, r8, r3
 8008bcc:	9b01      	ldrge	r3, [sp, #4]
 8008bce:	2300      	movlt	r3, #0
 8008bd0:	4645      	movge	r5, r8
 8008bd2:	e747      	b.n	8008a64 <_dtoa_r+0x75c>
 8008bd4:	9e06      	ldr	r6, [sp, #24]
 8008bd6:	9f08      	ldr	r7, [sp, #32]
 8008bd8:	4645      	mov	r5, r8
 8008bda:	e74c      	b.n	8008a76 <_dtoa_r+0x76e>
 8008bdc:	9a06      	ldr	r2, [sp, #24]
 8008bde:	e775      	b.n	8008acc <_dtoa_r+0x7c4>
 8008be0:	9b05      	ldr	r3, [sp, #20]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	dc18      	bgt.n	8008c18 <_dtoa_r+0x910>
 8008be6:	9b02      	ldr	r3, [sp, #8]
 8008be8:	b9b3      	cbnz	r3, 8008c18 <_dtoa_r+0x910>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bf0:	b9a3      	cbnz	r3, 8008c1c <_dtoa_r+0x914>
 8008bf2:	9b03      	ldr	r3, [sp, #12]
 8008bf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bf8:	0d1b      	lsrs	r3, r3, #20
 8008bfa:	051b      	lsls	r3, r3, #20
 8008bfc:	b12b      	cbz	r3, 8008c0a <_dtoa_r+0x902>
 8008bfe:	9b04      	ldr	r3, [sp, #16]
 8008c00:	3301      	adds	r3, #1
 8008c02:	9304      	str	r3, [sp, #16]
 8008c04:	f108 0801 	add.w	r8, r8, #1
 8008c08:	2301      	movs	r3, #1
 8008c0a:	9306      	str	r3, [sp, #24]
 8008c0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f47f af74 	bne.w	8008afc <_dtoa_r+0x7f4>
 8008c14:	2001      	movs	r0, #1
 8008c16:	e779      	b.n	8008b0c <_dtoa_r+0x804>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	e7f6      	b.n	8008c0a <_dtoa_r+0x902>
 8008c1c:	9b02      	ldr	r3, [sp, #8]
 8008c1e:	e7f4      	b.n	8008c0a <_dtoa_r+0x902>
 8008c20:	d085      	beq.n	8008b2e <_dtoa_r+0x826>
 8008c22:	4618      	mov	r0, r3
 8008c24:	301c      	adds	r0, #28
 8008c26:	e77d      	b.n	8008b24 <_dtoa_r+0x81c>
 8008c28:	40240000 	.word	0x40240000
 8008c2c:	9b01      	ldr	r3, [sp, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	dc38      	bgt.n	8008ca4 <_dtoa_r+0x99c>
 8008c32:	9b05      	ldr	r3, [sp, #20]
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	dd35      	ble.n	8008ca4 <_dtoa_r+0x99c>
 8008c38:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008c3c:	f1b9 0f00 	cmp.w	r9, #0
 8008c40:	d10d      	bne.n	8008c5e <_dtoa_r+0x956>
 8008c42:	4631      	mov	r1, r6
 8008c44:	464b      	mov	r3, r9
 8008c46:	2205      	movs	r2, #5
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f000 f9c5 	bl	8008fd8 <__multadd>
 8008c4e:	4601      	mov	r1, r0
 8008c50:	4606      	mov	r6, r0
 8008c52:	4658      	mov	r0, fp
 8008c54:	f000 fbdc 	bl	8009410 <__mcmp>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	f73f adbd 	bgt.w	80087d8 <_dtoa_r+0x4d0>
 8008c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c60:	9d00      	ldr	r5, [sp, #0]
 8008c62:	ea6f 0a03 	mvn.w	sl, r3
 8008c66:	f04f 0800 	mov.w	r8, #0
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f000 f991 	bl	8008f94 <_Bfree>
 8008c72:	2f00      	cmp	r7, #0
 8008c74:	f43f aeb4 	beq.w	80089e0 <_dtoa_r+0x6d8>
 8008c78:	f1b8 0f00 	cmp.w	r8, #0
 8008c7c:	d005      	beq.n	8008c8a <_dtoa_r+0x982>
 8008c7e:	45b8      	cmp	r8, r7
 8008c80:	d003      	beq.n	8008c8a <_dtoa_r+0x982>
 8008c82:	4641      	mov	r1, r8
 8008c84:	4620      	mov	r0, r4
 8008c86:	f000 f985 	bl	8008f94 <_Bfree>
 8008c8a:	4639      	mov	r1, r7
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f000 f981 	bl	8008f94 <_Bfree>
 8008c92:	e6a5      	b.n	80089e0 <_dtoa_r+0x6d8>
 8008c94:	2600      	movs	r6, #0
 8008c96:	4637      	mov	r7, r6
 8008c98:	e7e1      	b.n	8008c5e <_dtoa_r+0x956>
 8008c9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008c9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008ca0:	4637      	mov	r7, r6
 8008ca2:	e599      	b.n	80087d8 <_dtoa_r+0x4d0>
 8008ca4:	9b08      	ldr	r3, [sp, #32]
 8008ca6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 80fd 	beq.w	8008eaa <_dtoa_r+0xba2>
 8008cb0:	2d00      	cmp	r5, #0
 8008cb2:	dd05      	ble.n	8008cc0 <_dtoa_r+0x9b8>
 8008cb4:	4639      	mov	r1, r7
 8008cb6:	462a      	mov	r2, r5
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f000 fb3d 	bl	8009338 <__lshift>
 8008cbe:	4607      	mov	r7, r0
 8008cc0:	9b06      	ldr	r3, [sp, #24]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d05c      	beq.n	8008d80 <_dtoa_r+0xa78>
 8008cc6:	6879      	ldr	r1, [r7, #4]
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f000 f923 	bl	8008f14 <_Balloc>
 8008cce:	4605      	mov	r5, r0
 8008cd0:	b928      	cbnz	r0, 8008cde <_dtoa_r+0x9d6>
 8008cd2:	4b80      	ldr	r3, [pc, #512]	; (8008ed4 <_dtoa_r+0xbcc>)
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008cda:	f7ff bb2e 	b.w	800833a <_dtoa_r+0x32>
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	3202      	adds	r2, #2
 8008ce2:	0092      	lsls	r2, r2, #2
 8008ce4:	f107 010c 	add.w	r1, r7, #12
 8008ce8:	300c      	adds	r0, #12
 8008cea:	f000 f905 	bl	8008ef8 <memcpy>
 8008cee:	2201      	movs	r2, #1
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f000 fb20 	bl	8009338 <__lshift>
 8008cf8:	9b00      	ldr	r3, [sp, #0]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	9b00      	ldr	r3, [sp, #0]
 8008d00:	444b      	add	r3, r9
 8008d02:	9307      	str	r3, [sp, #28]
 8008d04:	9b02      	ldr	r3, [sp, #8]
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	46b8      	mov	r8, r7
 8008d0c:	9306      	str	r3, [sp, #24]
 8008d0e:	4607      	mov	r7, r0
 8008d10:	9b01      	ldr	r3, [sp, #4]
 8008d12:	4631      	mov	r1, r6
 8008d14:	3b01      	subs	r3, #1
 8008d16:	4658      	mov	r0, fp
 8008d18:	9302      	str	r3, [sp, #8]
 8008d1a:	f7ff fa69 	bl	80081f0 <quorem>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	3330      	adds	r3, #48	; 0x30
 8008d22:	9004      	str	r0, [sp, #16]
 8008d24:	4641      	mov	r1, r8
 8008d26:	4658      	mov	r0, fp
 8008d28:	9308      	str	r3, [sp, #32]
 8008d2a:	f000 fb71 	bl	8009410 <__mcmp>
 8008d2e:	463a      	mov	r2, r7
 8008d30:	4681      	mov	r9, r0
 8008d32:	4631      	mov	r1, r6
 8008d34:	4620      	mov	r0, r4
 8008d36:	f000 fb87 	bl	8009448 <__mdiff>
 8008d3a:	68c2      	ldr	r2, [r0, #12]
 8008d3c:	9b08      	ldr	r3, [sp, #32]
 8008d3e:	4605      	mov	r5, r0
 8008d40:	bb02      	cbnz	r2, 8008d84 <_dtoa_r+0xa7c>
 8008d42:	4601      	mov	r1, r0
 8008d44:	4658      	mov	r0, fp
 8008d46:	f000 fb63 	bl	8009410 <__mcmp>
 8008d4a:	9b08      	ldr	r3, [sp, #32]
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	4629      	mov	r1, r5
 8008d50:	4620      	mov	r0, r4
 8008d52:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008d56:	f000 f91d 	bl	8008f94 <_Bfree>
 8008d5a:	9b05      	ldr	r3, [sp, #20]
 8008d5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d5e:	9d01      	ldr	r5, [sp, #4]
 8008d60:	ea43 0102 	orr.w	r1, r3, r2
 8008d64:	9b06      	ldr	r3, [sp, #24]
 8008d66:	430b      	orrs	r3, r1
 8008d68:	9b08      	ldr	r3, [sp, #32]
 8008d6a:	d10d      	bne.n	8008d88 <_dtoa_r+0xa80>
 8008d6c:	2b39      	cmp	r3, #57	; 0x39
 8008d6e:	d029      	beq.n	8008dc4 <_dtoa_r+0xabc>
 8008d70:	f1b9 0f00 	cmp.w	r9, #0
 8008d74:	dd01      	ble.n	8008d7a <_dtoa_r+0xa72>
 8008d76:	9b04      	ldr	r3, [sp, #16]
 8008d78:	3331      	adds	r3, #49	; 0x31
 8008d7a:	9a02      	ldr	r2, [sp, #8]
 8008d7c:	7013      	strb	r3, [r2, #0]
 8008d7e:	e774      	b.n	8008c6a <_dtoa_r+0x962>
 8008d80:	4638      	mov	r0, r7
 8008d82:	e7b9      	b.n	8008cf8 <_dtoa_r+0x9f0>
 8008d84:	2201      	movs	r2, #1
 8008d86:	e7e2      	b.n	8008d4e <_dtoa_r+0xa46>
 8008d88:	f1b9 0f00 	cmp.w	r9, #0
 8008d8c:	db06      	blt.n	8008d9c <_dtoa_r+0xa94>
 8008d8e:	9905      	ldr	r1, [sp, #20]
 8008d90:	ea41 0909 	orr.w	r9, r1, r9
 8008d94:	9906      	ldr	r1, [sp, #24]
 8008d96:	ea59 0101 	orrs.w	r1, r9, r1
 8008d9a:	d120      	bne.n	8008dde <_dtoa_r+0xad6>
 8008d9c:	2a00      	cmp	r2, #0
 8008d9e:	ddec      	ble.n	8008d7a <_dtoa_r+0xa72>
 8008da0:	4659      	mov	r1, fp
 8008da2:	2201      	movs	r2, #1
 8008da4:	4620      	mov	r0, r4
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	f000 fac6 	bl	8009338 <__lshift>
 8008dac:	4631      	mov	r1, r6
 8008dae:	4683      	mov	fp, r0
 8008db0:	f000 fb2e 	bl	8009410 <__mcmp>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	9b01      	ldr	r3, [sp, #4]
 8008db8:	dc02      	bgt.n	8008dc0 <_dtoa_r+0xab8>
 8008dba:	d1de      	bne.n	8008d7a <_dtoa_r+0xa72>
 8008dbc:	07da      	lsls	r2, r3, #31
 8008dbe:	d5dc      	bpl.n	8008d7a <_dtoa_r+0xa72>
 8008dc0:	2b39      	cmp	r3, #57	; 0x39
 8008dc2:	d1d8      	bne.n	8008d76 <_dtoa_r+0xa6e>
 8008dc4:	9a02      	ldr	r2, [sp, #8]
 8008dc6:	2339      	movs	r3, #57	; 0x39
 8008dc8:	7013      	strb	r3, [r2, #0]
 8008dca:	462b      	mov	r3, r5
 8008dcc:	461d      	mov	r5, r3
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008dd4:	2a39      	cmp	r2, #57	; 0x39
 8008dd6:	d050      	beq.n	8008e7a <_dtoa_r+0xb72>
 8008dd8:	3201      	adds	r2, #1
 8008dda:	701a      	strb	r2, [r3, #0]
 8008ddc:	e745      	b.n	8008c6a <_dtoa_r+0x962>
 8008dde:	2a00      	cmp	r2, #0
 8008de0:	dd03      	ble.n	8008dea <_dtoa_r+0xae2>
 8008de2:	2b39      	cmp	r3, #57	; 0x39
 8008de4:	d0ee      	beq.n	8008dc4 <_dtoa_r+0xabc>
 8008de6:	3301      	adds	r3, #1
 8008de8:	e7c7      	b.n	8008d7a <_dtoa_r+0xa72>
 8008dea:	9a01      	ldr	r2, [sp, #4]
 8008dec:	9907      	ldr	r1, [sp, #28]
 8008dee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008df2:	428a      	cmp	r2, r1
 8008df4:	d02a      	beq.n	8008e4c <_dtoa_r+0xb44>
 8008df6:	4659      	mov	r1, fp
 8008df8:	2300      	movs	r3, #0
 8008dfa:	220a      	movs	r2, #10
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f000 f8eb 	bl	8008fd8 <__multadd>
 8008e02:	45b8      	cmp	r8, r7
 8008e04:	4683      	mov	fp, r0
 8008e06:	f04f 0300 	mov.w	r3, #0
 8008e0a:	f04f 020a 	mov.w	r2, #10
 8008e0e:	4641      	mov	r1, r8
 8008e10:	4620      	mov	r0, r4
 8008e12:	d107      	bne.n	8008e24 <_dtoa_r+0xb1c>
 8008e14:	f000 f8e0 	bl	8008fd8 <__multadd>
 8008e18:	4680      	mov	r8, r0
 8008e1a:	4607      	mov	r7, r0
 8008e1c:	9b01      	ldr	r3, [sp, #4]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	e775      	b.n	8008d10 <_dtoa_r+0xa08>
 8008e24:	f000 f8d8 	bl	8008fd8 <__multadd>
 8008e28:	4639      	mov	r1, r7
 8008e2a:	4680      	mov	r8, r0
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	220a      	movs	r2, #10
 8008e30:	4620      	mov	r0, r4
 8008e32:	f000 f8d1 	bl	8008fd8 <__multadd>
 8008e36:	4607      	mov	r7, r0
 8008e38:	e7f0      	b.n	8008e1c <_dtoa_r+0xb14>
 8008e3a:	f1b9 0f00 	cmp.w	r9, #0
 8008e3e:	9a00      	ldr	r2, [sp, #0]
 8008e40:	bfcc      	ite	gt
 8008e42:	464d      	movgt	r5, r9
 8008e44:	2501      	movle	r5, #1
 8008e46:	4415      	add	r5, r2
 8008e48:	f04f 0800 	mov.w	r8, #0
 8008e4c:	4659      	mov	r1, fp
 8008e4e:	2201      	movs	r2, #1
 8008e50:	4620      	mov	r0, r4
 8008e52:	9301      	str	r3, [sp, #4]
 8008e54:	f000 fa70 	bl	8009338 <__lshift>
 8008e58:	4631      	mov	r1, r6
 8008e5a:	4683      	mov	fp, r0
 8008e5c:	f000 fad8 	bl	8009410 <__mcmp>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	dcb2      	bgt.n	8008dca <_dtoa_r+0xac2>
 8008e64:	d102      	bne.n	8008e6c <_dtoa_r+0xb64>
 8008e66:	9b01      	ldr	r3, [sp, #4]
 8008e68:	07db      	lsls	r3, r3, #31
 8008e6a:	d4ae      	bmi.n	8008dca <_dtoa_r+0xac2>
 8008e6c:	462b      	mov	r3, r5
 8008e6e:	461d      	mov	r5, r3
 8008e70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e74:	2a30      	cmp	r2, #48	; 0x30
 8008e76:	d0fa      	beq.n	8008e6e <_dtoa_r+0xb66>
 8008e78:	e6f7      	b.n	8008c6a <_dtoa_r+0x962>
 8008e7a:	9a00      	ldr	r2, [sp, #0]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d1a5      	bne.n	8008dcc <_dtoa_r+0xac4>
 8008e80:	f10a 0a01 	add.w	sl, sl, #1
 8008e84:	2331      	movs	r3, #49	; 0x31
 8008e86:	e779      	b.n	8008d7c <_dtoa_r+0xa74>
 8008e88:	4b13      	ldr	r3, [pc, #76]	; (8008ed8 <_dtoa_r+0xbd0>)
 8008e8a:	f7ff baaf 	b.w	80083ec <_dtoa_r+0xe4>
 8008e8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f47f aa86 	bne.w	80083a2 <_dtoa_r+0x9a>
 8008e96:	4b11      	ldr	r3, [pc, #68]	; (8008edc <_dtoa_r+0xbd4>)
 8008e98:	f7ff baa8 	b.w	80083ec <_dtoa_r+0xe4>
 8008e9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ea0:	dc03      	bgt.n	8008eaa <_dtoa_r+0xba2>
 8008ea2:	9b05      	ldr	r3, [sp, #20]
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	f73f aec9 	bgt.w	8008c3c <_dtoa_r+0x934>
 8008eaa:	9d00      	ldr	r5, [sp, #0]
 8008eac:	4631      	mov	r1, r6
 8008eae:	4658      	mov	r0, fp
 8008eb0:	f7ff f99e 	bl	80081f0 <quorem>
 8008eb4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008eb8:	f805 3b01 	strb.w	r3, [r5], #1
 8008ebc:	9a00      	ldr	r2, [sp, #0]
 8008ebe:	1aaa      	subs	r2, r5, r2
 8008ec0:	4591      	cmp	r9, r2
 8008ec2:	ddba      	ble.n	8008e3a <_dtoa_r+0xb32>
 8008ec4:	4659      	mov	r1, fp
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	220a      	movs	r2, #10
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f000 f884 	bl	8008fd8 <__multadd>
 8008ed0:	4683      	mov	fp, r0
 8008ed2:	e7eb      	b.n	8008eac <_dtoa_r+0xba4>
 8008ed4:	0800b8fb 	.word	0x0800b8fb
 8008ed8:	0800b854 	.word	0x0800b854
 8008edc:	0800b878 	.word	0x0800b878

08008ee0 <_localeconv_r>:
 8008ee0:	4800      	ldr	r0, [pc, #0]	; (8008ee4 <_localeconv_r+0x4>)
 8008ee2:	4770      	bx	lr
 8008ee4:	2000217c 	.word	0x2000217c

08008ee8 <malloc>:
 8008ee8:	4b02      	ldr	r3, [pc, #8]	; (8008ef4 <malloc+0xc>)
 8008eea:	4601      	mov	r1, r0
 8008eec:	6818      	ldr	r0, [r3, #0]
 8008eee:	f000 bbef 	b.w	80096d0 <_malloc_r>
 8008ef2:	bf00      	nop
 8008ef4:	20002028 	.word	0x20002028

08008ef8 <memcpy>:
 8008ef8:	440a      	add	r2, r1
 8008efa:	4291      	cmp	r1, r2
 8008efc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008f00:	d100      	bne.n	8008f04 <memcpy+0xc>
 8008f02:	4770      	bx	lr
 8008f04:	b510      	push	{r4, lr}
 8008f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f0e:	4291      	cmp	r1, r2
 8008f10:	d1f9      	bne.n	8008f06 <memcpy+0xe>
 8008f12:	bd10      	pop	{r4, pc}

08008f14 <_Balloc>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f18:	4604      	mov	r4, r0
 8008f1a:	460d      	mov	r5, r1
 8008f1c:	b976      	cbnz	r6, 8008f3c <_Balloc+0x28>
 8008f1e:	2010      	movs	r0, #16
 8008f20:	f7ff ffe2 	bl	8008ee8 <malloc>
 8008f24:	4602      	mov	r2, r0
 8008f26:	6260      	str	r0, [r4, #36]	; 0x24
 8008f28:	b920      	cbnz	r0, 8008f34 <_Balloc+0x20>
 8008f2a:	4b18      	ldr	r3, [pc, #96]	; (8008f8c <_Balloc+0x78>)
 8008f2c:	4818      	ldr	r0, [pc, #96]	; (8008f90 <_Balloc+0x7c>)
 8008f2e:	2166      	movs	r1, #102	; 0x66
 8008f30:	f000 fd94 	bl	8009a5c <__assert_func>
 8008f34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f38:	6006      	str	r6, [r0, #0]
 8008f3a:	60c6      	str	r6, [r0, #12]
 8008f3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f3e:	68f3      	ldr	r3, [r6, #12]
 8008f40:	b183      	cbz	r3, 8008f64 <_Balloc+0x50>
 8008f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f4a:	b9b8      	cbnz	r0, 8008f7c <_Balloc+0x68>
 8008f4c:	2101      	movs	r1, #1
 8008f4e:	fa01 f605 	lsl.w	r6, r1, r5
 8008f52:	1d72      	adds	r2, r6, #5
 8008f54:	0092      	lsls	r2, r2, #2
 8008f56:	4620      	mov	r0, r4
 8008f58:	f000 fb5a 	bl	8009610 <_calloc_r>
 8008f5c:	b160      	cbz	r0, 8008f78 <_Balloc+0x64>
 8008f5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f62:	e00e      	b.n	8008f82 <_Balloc+0x6e>
 8008f64:	2221      	movs	r2, #33	; 0x21
 8008f66:	2104      	movs	r1, #4
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f000 fb51 	bl	8009610 <_calloc_r>
 8008f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f70:	60f0      	str	r0, [r6, #12]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1e4      	bne.n	8008f42 <_Balloc+0x2e>
 8008f78:	2000      	movs	r0, #0
 8008f7a:	bd70      	pop	{r4, r5, r6, pc}
 8008f7c:	6802      	ldr	r2, [r0, #0]
 8008f7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f82:	2300      	movs	r3, #0
 8008f84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f88:	e7f7      	b.n	8008f7a <_Balloc+0x66>
 8008f8a:	bf00      	nop
 8008f8c:	0800b885 	.word	0x0800b885
 8008f90:	0800b90c 	.word	0x0800b90c

08008f94 <_Bfree>:
 8008f94:	b570      	push	{r4, r5, r6, lr}
 8008f96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f98:	4605      	mov	r5, r0
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	b976      	cbnz	r6, 8008fbc <_Bfree+0x28>
 8008f9e:	2010      	movs	r0, #16
 8008fa0:	f7ff ffa2 	bl	8008ee8 <malloc>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	6268      	str	r0, [r5, #36]	; 0x24
 8008fa8:	b920      	cbnz	r0, 8008fb4 <_Bfree+0x20>
 8008faa:	4b09      	ldr	r3, [pc, #36]	; (8008fd0 <_Bfree+0x3c>)
 8008fac:	4809      	ldr	r0, [pc, #36]	; (8008fd4 <_Bfree+0x40>)
 8008fae:	218a      	movs	r1, #138	; 0x8a
 8008fb0:	f000 fd54 	bl	8009a5c <__assert_func>
 8008fb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fb8:	6006      	str	r6, [r0, #0]
 8008fba:	60c6      	str	r6, [r0, #12]
 8008fbc:	b13c      	cbz	r4, 8008fce <_Bfree+0x3a>
 8008fbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fc0:	6862      	ldr	r2, [r4, #4]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fc8:	6021      	str	r1, [r4, #0]
 8008fca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fce:	bd70      	pop	{r4, r5, r6, pc}
 8008fd0:	0800b885 	.word	0x0800b885
 8008fd4:	0800b90c 	.word	0x0800b90c

08008fd8 <__multadd>:
 8008fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fdc:	690e      	ldr	r6, [r1, #16]
 8008fde:	4607      	mov	r7, r0
 8008fe0:	4698      	mov	r8, r3
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	f101 0014 	add.w	r0, r1, #20
 8008fe8:	2300      	movs	r3, #0
 8008fea:	6805      	ldr	r5, [r0, #0]
 8008fec:	b2a9      	uxth	r1, r5
 8008fee:	fb02 8101 	mla	r1, r2, r1, r8
 8008ff2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008ff6:	0c2d      	lsrs	r5, r5, #16
 8008ff8:	fb02 c505 	mla	r5, r2, r5, ip
 8008ffc:	b289      	uxth	r1, r1
 8008ffe:	3301      	adds	r3, #1
 8009000:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009004:	429e      	cmp	r6, r3
 8009006:	f840 1b04 	str.w	r1, [r0], #4
 800900a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800900e:	dcec      	bgt.n	8008fea <__multadd+0x12>
 8009010:	f1b8 0f00 	cmp.w	r8, #0
 8009014:	d022      	beq.n	800905c <__multadd+0x84>
 8009016:	68a3      	ldr	r3, [r4, #8]
 8009018:	42b3      	cmp	r3, r6
 800901a:	dc19      	bgt.n	8009050 <__multadd+0x78>
 800901c:	6861      	ldr	r1, [r4, #4]
 800901e:	4638      	mov	r0, r7
 8009020:	3101      	adds	r1, #1
 8009022:	f7ff ff77 	bl	8008f14 <_Balloc>
 8009026:	4605      	mov	r5, r0
 8009028:	b928      	cbnz	r0, 8009036 <__multadd+0x5e>
 800902a:	4602      	mov	r2, r0
 800902c:	4b0d      	ldr	r3, [pc, #52]	; (8009064 <__multadd+0x8c>)
 800902e:	480e      	ldr	r0, [pc, #56]	; (8009068 <__multadd+0x90>)
 8009030:	21b5      	movs	r1, #181	; 0xb5
 8009032:	f000 fd13 	bl	8009a5c <__assert_func>
 8009036:	6922      	ldr	r2, [r4, #16]
 8009038:	3202      	adds	r2, #2
 800903a:	f104 010c 	add.w	r1, r4, #12
 800903e:	0092      	lsls	r2, r2, #2
 8009040:	300c      	adds	r0, #12
 8009042:	f7ff ff59 	bl	8008ef8 <memcpy>
 8009046:	4621      	mov	r1, r4
 8009048:	4638      	mov	r0, r7
 800904a:	f7ff ffa3 	bl	8008f94 <_Bfree>
 800904e:	462c      	mov	r4, r5
 8009050:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009054:	3601      	adds	r6, #1
 8009056:	f8c3 8014 	str.w	r8, [r3, #20]
 800905a:	6126      	str	r6, [r4, #16]
 800905c:	4620      	mov	r0, r4
 800905e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009062:	bf00      	nop
 8009064:	0800b8fb 	.word	0x0800b8fb
 8009068:	0800b90c 	.word	0x0800b90c

0800906c <__hi0bits>:
 800906c:	0c03      	lsrs	r3, r0, #16
 800906e:	041b      	lsls	r3, r3, #16
 8009070:	b9d3      	cbnz	r3, 80090a8 <__hi0bits+0x3c>
 8009072:	0400      	lsls	r0, r0, #16
 8009074:	2310      	movs	r3, #16
 8009076:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800907a:	bf04      	itt	eq
 800907c:	0200      	lsleq	r0, r0, #8
 800907e:	3308      	addeq	r3, #8
 8009080:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009084:	bf04      	itt	eq
 8009086:	0100      	lsleq	r0, r0, #4
 8009088:	3304      	addeq	r3, #4
 800908a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800908e:	bf04      	itt	eq
 8009090:	0080      	lsleq	r0, r0, #2
 8009092:	3302      	addeq	r3, #2
 8009094:	2800      	cmp	r0, #0
 8009096:	db05      	blt.n	80090a4 <__hi0bits+0x38>
 8009098:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800909c:	f103 0301 	add.w	r3, r3, #1
 80090a0:	bf08      	it	eq
 80090a2:	2320      	moveq	r3, #32
 80090a4:	4618      	mov	r0, r3
 80090a6:	4770      	bx	lr
 80090a8:	2300      	movs	r3, #0
 80090aa:	e7e4      	b.n	8009076 <__hi0bits+0xa>

080090ac <__lo0bits>:
 80090ac:	6803      	ldr	r3, [r0, #0]
 80090ae:	f013 0207 	ands.w	r2, r3, #7
 80090b2:	4601      	mov	r1, r0
 80090b4:	d00b      	beq.n	80090ce <__lo0bits+0x22>
 80090b6:	07da      	lsls	r2, r3, #31
 80090b8:	d424      	bmi.n	8009104 <__lo0bits+0x58>
 80090ba:	0798      	lsls	r0, r3, #30
 80090bc:	bf49      	itett	mi
 80090be:	085b      	lsrmi	r3, r3, #1
 80090c0:	089b      	lsrpl	r3, r3, #2
 80090c2:	2001      	movmi	r0, #1
 80090c4:	600b      	strmi	r3, [r1, #0]
 80090c6:	bf5c      	itt	pl
 80090c8:	600b      	strpl	r3, [r1, #0]
 80090ca:	2002      	movpl	r0, #2
 80090cc:	4770      	bx	lr
 80090ce:	b298      	uxth	r0, r3
 80090d0:	b9b0      	cbnz	r0, 8009100 <__lo0bits+0x54>
 80090d2:	0c1b      	lsrs	r3, r3, #16
 80090d4:	2010      	movs	r0, #16
 80090d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80090da:	bf04      	itt	eq
 80090dc:	0a1b      	lsreq	r3, r3, #8
 80090de:	3008      	addeq	r0, #8
 80090e0:	071a      	lsls	r2, r3, #28
 80090e2:	bf04      	itt	eq
 80090e4:	091b      	lsreq	r3, r3, #4
 80090e6:	3004      	addeq	r0, #4
 80090e8:	079a      	lsls	r2, r3, #30
 80090ea:	bf04      	itt	eq
 80090ec:	089b      	lsreq	r3, r3, #2
 80090ee:	3002      	addeq	r0, #2
 80090f0:	07da      	lsls	r2, r3, #31
 80090f2:	d403      	bmi.n	80090fc <__lo0bits+0x50>
 80090f4:	085b      	lsrs	r3, r3, #1
 80090f6:	f100 0001 	add.w	r0, r0, #1
 80090fa:	d005      	beq.n	8009108 <__lo0bits+0x5c>
 80090fc:	600b      	str	r3, [r1, #0]
 80090fe:	4770      	bx	lr
 8009100:	4610      	mov	r0, r2
 8009102:	e7e8      	b.n	80090d6 <__lo0bits+0x2a>
 8009104:	2000      	movs	r0, #0
 8009106:	4770      	bx	lr
 8009108:	2020      	movs	r0, #32
 800910a:	4770      	bx	lr

0800910c <__i2b>:
 800910c:	b510      	push	{r4, lr}
 800910e:	460c      	mov	r4, r1
 8009110:	2101      	movs	r1, #1
 8009112:	f7ff feff 	bl	8008f14 <_Balloc>
 8009116:	4602      	mov	r2, r0
 8009118:	b928      	cbnz	r0, 8009126 <__i2b+0x1a>
 800911a:	4b05      	ldr	r3, [pc, #20]	; (8009130 <__i2b+0x24>)
 800911c:	4805      	ldr	r0, [pc, #20]	; (8009134 <__i2b+0x28>)
 800911e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009122:	f000 fc9b 	bl	8009a5c <__assert_func>
 8009126:	2301      	movs	r3, #1
 8009128:	6144      	str	r4, [r0, #20]
 800912a:	6103      	str	r3, [r0, #16]
 800912c:	bd10      	pop	{r4, pc}
 800912e:	bf00      	nop
 8009130:	0800b8fb 	.word	0x0800b8fb
 8009134:	0800b90c 	.word	0x0800b90c

08009138 <__multiply>:
 8009138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913c:	4614      	mov	r4, r2
 800913e:	690a      	ldr	r2, [r1, #16]
 8009140:	6923      	ldr	r3, [r4, #16]
 8009142:	429a      	cmp	r2, r3
 8009144:	bfb8      	it	lt
 8009146:	460b      	movlt	r3, r1
 8009148:	460d      	mov	r5, r1
 800914a:	bfbc      	itt	lt
 800914c:	4625      	movlt	r5, r4
 800914e:	461c      	movlt	r4, r3
 8009150:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009154:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009158:	68ab      	ldr	r3, [r5, #8]
 800915a:	6869      	ldr	r1, [r5, #4]
 800915c:	eb0a 0709 	add.w	r7, sl, r9
 8009160:	42bb      	cmp	r3, r7
 8009162:	b085      	sub	sp, #20
 8009164:	bfb8      	it	lt
 8009166:	3101      	addlt	r1, #1
 8009168:	f7ff fed4 	bl	8008f14 <_Balloc>
 800916c:	b930      	cbnz	r0, 800917c <__multiply+0x44>
 800916e:	4602      	mov	r2, r0
 8009170:	4b42      	ldr	r3, [pc, #264]	; (800927c <__multiply+0x144>)
 8009172:	4843      	ldr	r0, [pc, #268]	; (8009280 <__multiply+0x148>)
 8009174:	f240 115d 	movw	r1, #349	; 0x15d
 8009178:	f000 fc70 	bl	8009a5c <__assert_func>
 800917c:	f100 0614 	add.w	r6, r0, #20
 8009180:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009184:	4633      	mov	r3, r6
 8009186:	2200      	movs	r2, #0
 8009188:	4543      	cmp	r3, r8
 800918a:	d31e      	bcc.n	80091ca <__multiply+0x92>
 800918c:	f105 0c14 	add.w	ip, r5, #20
 8009190:	f104 0314 	add.w	r3, r4, #20
 8009194:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009198:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800919c:	9202      	str	r2, [sp, #8]
 800919e:	ebac 0205 	sub.w	r2, ip, r5
 80091a2:	3a15      	subs	r2, #21
 80091a4:	f022 0203 	bic.w	r2, r2, #3
 80091a8:	3204      	adds	r2, #4
 80091aa:	f105 0115 	add.w	r1, r5, #21
 80091ae:	458c      	cmp	ip, r1
 80091b0:	bf38      	it	cc
 80091b2:	2204      	movcc	r2, #4
 80091b4:	9201      	str	r2, [sp, #4]
 80091b6:	9a02      	ldr	r2, [sp, #8]
 80091b8:	9303      	str	r3, [sp, #12]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d808      	bhi.n	80091d0 <__multiply+0x98>
 80091be:	2f00      	cmp	r7, #0
 80091c0:	dc55      	bgt.n	800926e <__multiply+0x136>
 80091c2:	6107      	str	r7, [r0, #16]
 80091c4:	b005      	add	sp, #20
 80091c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ca:	f843 2b04 	str.w	r2, [r3], #4
 80091ce:	e7db      	b.n	8009188 <__multiply+0x50>
 80091d0:	f8b3 a000 	ldrh.w	sl, [r3]
 80091d4:	f1ba 0f00 	cmp.w	sl, #0
 80091d8:	d020      	beq.n	800921c <__multiply+0xe4>
 80091da:	f105 0e14 	add.w	lr, r5, #20
 80091de:	46b1      	mov	r9, r6
 80091e0:	2200      	movs	r2, #0
 80091e2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80091e6:	f8d9 b000 	ldr.w	fp, [r9]
 80091ea:	b2a1      	uxth	r1, r4
 80091ec:	fa1f fb8b 	uxth.w	fp, fp
 80091f0:	fb0a b101 	mla	r1, sl, r1, fp
 80091f4:	4411      	add	r1, r2
 80091f6:	f8d9 2000 	ldr.w	r2, [r9]
 80091fa:	0c24      	lsrs	r4, r4, #16
 80091fc:	0c12      	lsrs	r2, r2, #16
 80091fe:	fb0a 2404 	mla	r4, sl, r4, r2
 8009202:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009206:	b289      	uxth	r1, r1
 8009208:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800920c:	45f4      	cmp	ip, lr
 800920e:	f849 1b04 	str.w	r1, [r9], #4
 8009212:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009216:	d8e4      	bhi.n	80091e2 <__multiply+0xaa>
 8009218:	9901      	ldr	r1, [sp, #4]
 800921a:	5072      	str	r2, [r6, r1]
 800921c:	9a03      	ldr	r2, [sp, #12]
 800921e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009222:	3304      	adds	r3, #4
 8009224:	f1b9 0f00 	cmp.w	r9, #0
 8009228:	d01f      	beq.n	800926a <__multiply+0x132>
 800922a:	6834      	ldr	r4, [r6, #0]
 800922c:	f105 0114 	add.w	r1, r5, #20
 8009230:	46b6      	mov	lr, r6
 8009232:	f04f 0a00 	mov.w	sl, #0
 8009236:	880a      	ldrh	r2, [r1, #0]
 8009238:	f8be b002 	ldrh.w	fp, [lr, #2]
 800923c:	fb09 b202 	mla	r2, r9, r2, fp
 8009240:	4492      	add	sl, r2
 8009242:	b2a4      	uxth	r4, r4
 8009244:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009248:	f84e 4b04 	str.w	r4, [lr], #4
 800924c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009250:	f8be 2000 	ldrh.w	r2, [lr]
 8009254:	0c24      	lsrs	r4, r4, #16
 8009256:	fb09 2404 	mla	r4, r9, r4, r2
 800925a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800925e:	458c      	cmp	ip, r1
 8009260:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009264:	d8e7      	bhi.n	8009236 <__multiply+0xfe>
 8009266:	9a01      	ldr	r2, [sp, #4]
 8009268:	50b4      	str	r4, [r6, r2]
 800926a:	3604      	adds	r6, #4
 800926c:	e7a3      	b.n	80091b6 <__multiply+0x7e>
 800926e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1a5      	bne.n	80091c2 <__multiply+0x8a>
 8009276:	3f01      	subs	r7, #1
 8009278:	e7a1      	b.n	80091be <__multiply+0x86>
 800927a:	bf00      	nop
 800927c:	0800b8fb 	.word	0x0800b8fb
 8009280:	0800b90c 	.word	0x0800b90c

08009284 <__pow5mult>:
 8009284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009288:	4615      	mov	r5, r2
 800928a:	f012 0203 	ands.w	r2, r2, #3
 800928e:	4606      	mov	r6, r0
 8009290:	460f      	mov	r7, r1
 8009292:	d007      	beq.n	80092a4 <__pow5mult+0x20>
 8009294:	4c25      	ldr	r4, [pc, #148]	; (800932c <__pow5mult+0xa8>)
 8009296:	3a01      	subs	r2, #1
 8009298:	2300      	movs	r3, #0
 800929a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800929e:	f7ff fe9b 	bl	8008fd8 <__multadd>
 80092a2:	4607      	mov	r7, r0
 80092a4:	10ad      	asrs	r5, r5, #2
 80092a6:	d03d      	beq.n	8009324 <__pow5mult+0xa0>
 80092a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80092aa:	b97c      	cbnz	r4, 80092cc <__pow5mult+0x48>
 80092ac:	2010      	movs	r0, #16
 80092ae:	f7ff fe1b 	bl	8008ee8 <malloc>
 80092b2:	4602      	mov	r2, r0
 80092b4:	6270      	str	r0, [r6, #36]	; 0x24
 80092b6:	b928      	cbnz	r0, 80092c4 <__pow5mult+0x40>
 80092b8:	4b1d      	ldr	r3, [pc, #116]	; (8009330 <__pow5mult+0xac>)
 80092ba:	481e      	ldr	r0, [pc, #120]	; (8009334 <__pow5mult+0xb0>)
 80092bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80092c0:	f000 fbcc 	bl	8009a5c <__assert_func>
 80092c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092c8:	6004      	str	r4, [r0, #0]
 80092ca:	60c4      	str	r4, [r0, #12]
 80092cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80092d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092d4:	b94c      	cbnz	r4, 80092ea <__pow5mult+0x66>
 80092d6:	f240 2171 	movw	r1, #625	; 0x271
 80092da:	4630      	mov	r0, r6
 80092dc:	f7ff ff16 	bl	800910c <__i2b>
 80092e0:	2300      	movs	r3, #0
 80092e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80092e6:	4604      	mov	r4, r0
 80092e8:	6003      	str	r3, [r0, #0]
 80092ea:	f04f 0900 	mov.w	r9, #0
 80092ee:	07eb      	lsls	r3, r5, #31
 80092f0:	d50a      	bpl.n	8009308 <__pow5mult+0x84>
 80092f2:	4639      	mov	r1, r7
 80092f4:	4622      	mov	r2, r4
 80092f6:	4630      	mov	r0, r6
 80092f8:	f7ff ff1e 	bl	8009138 <__multiply>
 80092fc:	4639      	mov	r1, r7
 80092fe:	4680      	mov	r8, r0
 8009300:	4630      	mov	r0, r6
 8009302:	f7ff fe47 	bl	8008f94 <_Bfree>
 8009306:	4647      	mov	r7, r8
 8009308:	106d      	asrs	r5, r5, #1
 800930a:	d00b      	beq.n	8009324 <__pow5mult+0xa0>
 800930c:	6820      	ldr	r0, [r4, #0]
 800930e:	b938      	cbnz	r0, 8009320 <__pow5mult+0x9c>
 8009310:	4622      	mov	r2, r4
 8009312:	4621      	mov	r1, r4
 8009314:	4630      	mov	r0, r6
 8009316:	f7ff ff0f 	bl	8009138 <__multiply>
 800931a:	6020      	str	r0, [r4, #0]
 800931c:	f8c0 9000 	str.w	r9, [r0]
 8009320:	4604      	mov	r4, r0
 8009322:	e7e4      	b.n	80092ee <__pow5mult+0x6a>
 8009324:	4638      	mov	r0, r7
 8009326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800932a:	bf00      	nop
 800932c:	0800ba60 	.word	0x0800ba60
 8009330:	0800b885 	.word	0x0800b885
 8009334:	0800b90c 	.word	0x0800b90c

08009338 <__lshift>:
 8009338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800933c:	460c      	mov	r4, r1
 800933e:	6849      	ldr	r1, [r1, #4]
 8009340:	6923      	ldr	r3, [r4, #16]
 8009342:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009346:	68a3      	ldr	r3, [r4, #8]
 8009348:	4607      	mov	r7, r0
 800934a:	4691      	mov	r9, r2
 800934c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009350:	f108 0601 	add.w	r6, r8, #1
 8009354:	42b3      	cmp	r3, r6
 8009356:	db0b      	blt.n	8009370 <__lshift+0x38>
 8009358:	4638      	mov	r0, r7
 800935a:	f7ff fddb 	bl	8008f14 <_Balloc>
 800935e:	4605      	mov	r5, r0
 8009360:	b948      	cbnz	r0, 8009376 <__lshift+0x3e>
 8009362:	4602      	mov	r2, r0
 8009364:	4b28      	ldr	r3, [pc, #160]	; (8009408 <__lshift+0xd0>)
 8009366:	4829      	ldr	r0, [pc, #164]	; (800940c <__lshift+0xd4>)
 8009368:	f240 11d9 	movw	r1, #473	; 0x1d9
 800936c:	f000 fb76 	bl	8009a5c <__assert_func>
 8009370:	3101      	adds	r1, #1
 8009372:	005b      	lsls	r3, r3, #1
 8009374:	e7ee      	b.n	8009354 <__lshift+0x1c>
 8009376:	2300      	movs	r3, #0
 8009378:	f100 0114 	add.w	r1, r0, #20
 800937c:	f100 0210 	add.w	r2, r0, #16
 8009380:	4618      	mov	r0, r3
 8009382:	4553      	cmp	r3, sl
 8009384:	db33      	blt.n	80093ee <__lshift+0xb6>
 8009386:	6920      	ldr	r0, [r4, #16]
 8009388:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800938c:	f104 0314 	add.w	r3, r4, #20
 8009390:	f019 091f 	ands.w	r9, r9, #31
 8009394:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009398:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800939c:	d02b      	beq.n	80093f6 <__lshift+0xbe>
 800939e:	f1c9 0e20 	rsb	lr, r9, #32
 80093a2:	468a      	mov	sl, r1
 80093a4:	2200      	movs	r2, #0
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	fa00 f009 	lsl.w	r0, r0, r9
 80093ac:	4302      	orrs	r2, r0
 80093ae:	f84a 2b04 	str.w	r2, [sl], #4
 80093b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093b6:	459c      	cmp	ip, r3
 80093b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80093bc:	d8f3      	bhi.n	80093a6 <__lshift+0x6e>
 80093be:	ebac 0304 	sub.w	r3, ip, r4
 80093c2:	3b15      	subs	r3, #21
 80093c4:	f023 0303 	bic.w	r3, r3, #3
 80093c8:	3304      	adds	r3, #4
 80093ca:	f104 0015 	add.w	r0, r4, #21
 80093ce:	4584      	cmp	ip, r0
 80093d0:	bf38      	it	cc
 80093d2:	2304      	movcc	r3, #4
 80093d4:	50ca      	str	r2, [r1, r3]
 80093d6:	b10a      	cbz	r2, 80093dc <__lshift+0xa4>
 80093d8:	f108 0602 	add.w	r6, r8, #2
 80093dc:	3e01      	subs	r6, #1
 80093de:	4638      	mov	r0, r7
 80093e0:	612e      	str	r6, [r5, #16]
 80093e2:	4621      	mov	r1, r4
 80093e4:	f7ff fdd6 	bl	8008f94 <_Bfree>
 80093e8:	4628      	mov	r0, r5
 80093ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80093f2:	3301      	adds	r3, #1
 80093f4:	e7c5      	b.n	8009382 <__lshift+0x4a>
 80093f6:	3904      	subs	r1, #4
 80093f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80093fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009400:	459c      	cmp	ip, r3
 8009402:	d8f9      	bhi.n	80093f8 <__lshift+0xc0>
 8009404:	e7ea      	b.n	80093dc <__lshift+0xa4>
 8009406:	bf00      	nop
 8009408:	0800b8fb 	.word	0x0800b8fb
 800940c:	0800b90c 	.word	0x0800b90c

08009410 <__mcmp>:
 8009410:	b530      	push	{r4, r5, lr}
 8009412:	6902      	ldr	r2, [r0, #16]
 8009414:	690c      	ldr	r4, [r1, #16]
 8009416:	1b12      	subs	r2, r2, r4
 8009418:	d10e      	bne.n	8009438 <__mcmp+0x28>
 800941a:	f100 0314 	add.w	r3, r0, #20
 800941e:	3114      	adds	r1, #20
 8009420:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009424:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009428:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800942c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009430:	42a5      	cmp	r5, r4
 8009432:	d003      	beq.n	800943c <__mcmp+0x2c>
 8009434:	d305      	bcc.n	8009442 <__mcmp+0x32>
 8009436:	2201      	movs	r2, #1
 8009438:	4610      	mov	r0, r2
 800943a:	bd30      	pop	{r4, r5, pc}
 800943c:	4283      	cmp	r3, r0
 800943e:	d3f3      	bcc.n	8009428 <__mcmp+0x18>
 8009440:	e7fa      	b.n	8009438 <__mcmp+0x28>
 8009442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009446:	e7f7      	b.n	8009438 <__mcmp+0x28>

08009448 <__mdiff>:
 8009448:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944c:	460c      	mov	r4, r1
 800944e:	4606      	mov	r6, r0
 8009450:	4611      	mov	r1, r2
 8009452:	4620      	mov	r0, r4
 8009454:	4617      	mov	r7, r2
 8009456:	f7ff ffdb 	bl	8009410 <__mcmp>
 800945a:	1e05      	subs	r5, r0, #0
 800945c:	d110      	bne.n	8009480 <__mdiff+0x38>
 800945e:	4629      	mov	r1, r5
 8009460:	4630      	mov	r0, r6
 8009462:	f7ff fd57 	bl	8008f14 <_Balloc>
 8009466:	b930      	cbnz	r0, 8009476 <__mdiff+0x2e>
 8009468:	4b39      	ldr	r3, [pc, #228]	; (8009550 <__mdiff+0x108>)
 800946a:	4602      	mov	r2, r0
 800946c:	f240 2132 	movw	r1, #562	; 0x232
 8009470:	4838      	ldr	r0, [pc, #224]	; (8009554 <__mdiff+0x10c>)
 8009472:	f000 faf3 	bl	8009a5c <__assert_func>
 8009476:	2301      	movs	r3, #1
 8009478:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800947c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009480:	bfa4      	itt	ge
 8009482:	463b      	movge	r3, r7
 8009484:	4627      	movge	r7, r4
 8009486:	4630      	mov	r0, r6
 8009488:	6879      	ldr	r1, [r7, #4]
 800948a:	bfa6      	itte	ge
 800948c:	461c      	movge	r4, r3
 800948e:	2500      	movge	r5, #0
 8009490:	2501      	movlt	r5, #1
 8009492:	f7ff fd3f 	bl	8008f14 <_Balloc>
 8009496:	b920      	cbnz	r0, 80094a2 <__mdiff+0x5a>
 8009498:	4b2d      	ldr	r3, [pc, #180]	; (8009550 <__mdiff+0x108>)
 800949a:	4602      	mov	r2, r0
 800949c:	f44f 7110 	mov.w	r1, #576	; 0x240
 80094a0:	e7e6      	b.n	8009470 <__mdiff+0x28>
 80094a2:	693e      	ldr	r6, [r7, #16]
 80094a4:	60c5      	str	r5, [r0, #12]
 80094a6:	6925      	ldr	r5, [r4, #16]
 80094a8:	f107 0114 	add.w	r1, r7, #20
 80094ac:	f104 0914 	add.w	r9, r4, #20
 80094b0:	f100 0e14 	add.w	lr, r0, #20
 80094b4:	f107 0210 	add.w	r2, r7, #16
 80094b8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80094bc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80094c0:	46f2      	mov	sl, lr
 80094c2:	2700      	movs	r7, #0
 80094c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80094c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094cc:	fa1f f883 	uxth.w	r8, r3
 80094d0:	fa17 f78b 	uxtah	r7, r7, fp
 80094d4:	0c1b      	lsrs	r3, r3, #16
 80094d6:	eba7 0808 	sub.w	r8, r7, r8
 80094da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094e2:	fa1f f888 	uxth.w	r8, r8
 80094e6:	141f      	asrs	r7, r3, #16
 80094e8:	454d      	cmp	r5, r9
 80094ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094ee:	f84a 3b04 	str.w	r3, [sl], #4
 80094f2:	d8e7      	bhi.n	80094c4 <__mdiff+0x7c>
 80094f4:	1b2b      	subs	r3, r5, r4
 80094f6:	3b15      	subs	r3, #21
 80094f8:	f023 0303 	bic.w	r3, r3, #3
 80094fc:	3304      	adds	r3, #4
 80094fe:	3415      	adds	r4, #21
 8009500:	42a5      	cmp	r5, r4
 8009502:	bf38      	it	cc
 8009504:	2304      	movcc	r3, #4
 8009506:	4419      	add	r1, r3
 8009508:	4473      	add	r3, lr
 800950a:	469e      	mov	lr, r3
 800950c:	460d      	mov	r5, r1
 800950e:	4565      	cmp	r5, ip
 8009510:	d30e      	bcc.n	8009530 <__mdiff+0xe8>
 8009512:	f10c 0203 	add.w	r2, ip, #3
 8009516:	1a52      	subs	r2, r2, r1
 8009518:	f022 0203 	bic.w	r2, r2, #3
 800951c:	3903      	subs	r1, #3
 800951e:	458c      	cmp	ip, r1
 8009520:	bf38      	it	cc
 8009522:	2200      	movcc	r2, #0
 8009524:	441a      	add	r2, r3
 8009526:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800952a:	b17b      	cbz	r3, 800954c <__mdiff+0x104>
 800952c:	6106      	str	r6, [r0, #16]
 800952e:	e7a5      	b.n	800947c <__mdiff+0x34>
 8009530:	f855 8b04 	ldr.w	r8, [r5], #4
 8009534:	fa17 f488 	uxtah	r4, r7, r8
 8009538:	1422      	asrs	r2, r4, #16
 800953a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800953e:	b2a4      	uxth	r4, r4
 8009540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009544:	f84e 4b04 	str.w	r4, [lr], #4
 8009548:	1417      	asrs	r7, r2, #16
 800954a:	e7e0      	b.n	800950e <__mdiff+0xc6>
 800954c:	3e01      	subs	r6, #1
 800954e:	e7ea      	b.n	8009526 <__mdiff+0xde>
 8009550:	0800b8fb 	.word	0x0800b8fb
 8009554:	0800b90c 	.word	0x0800b90c

08009558 <__d2b>:
 8009558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800955c:	4689      	mov	r9, r1
 800955e:	2101      	movs	r1, #1
 8009560:	ec57 6b10 	vmov	r6, r7, d0
 8009564:	4690      	mov	r8, r2
 8009566:	f7ff fcd5 	bl	8008f14 <_Balloc>
 800956a:	4604      	mov	r4, r0
 800956c:	b930      	cbnz	r0, 800957c <__d2b+0x24>
 800956e:	4602      	mov	r2, r0
 8009570:	4b25      	ldr	r3, [pc, #148]	; (8009608 <__d2b+0xb0>)
 8009572:	4826      	ldr	r0, [pc, #152]	; (800960c <__d2b+0xb4>)
 8009574:	f240 310a 	movw	r1, #778	; 0x30a
 8009578:	f000 fa70 	bl	8009a5c <__assert_func>
 800957c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009580:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009584:	bb35      	cbnz	r5, 80095d4 <__d2b+0x7c>
 8009586:	2e00      	cmp	r6, #0
 8009588:	9301      	str	r3, [sp, #4]
 800958a:	d028      	beq.n	80095de <__d2b+0x86>
 800958c:	4668      	mov	r0, sp
 800958e:	9600      	str	r6, [sp, #0]
 8009590:	f7ff fd8c 	bl	80090ac <__lo0bits>
 8009594:	9900      	ldr	r1, [sp, #0]
 8009596:	b300      	cbz	r0, 80095da <__d2b+0x82>
 8009598:	9a01      	ldr	r2, [sp, #4]
 800959a:	f1c0 0320 	rsb	r3, r0, #32
 800959e:	fa02 f303 	lsl.w	r3, r2, r3
 80095a2:	430b      	orrs	r3, r1
 80095a4:	40c2      	lsrs	r2, r0
 80095a6:	6163      	str	r3, [r4, #20]
 80095a8:	9201      	str	r2, [sp, #4]
 80095aa:	9b01      	ldr	r3, [sp, #4]
 80095ac:	61a3      	str	r3, [r4, #24]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	bf14      	ite	ne
 80095b2:	2202      	movne	r2, #2
 80095b4:	2201      	moveq	r2, #1
 80095b6:	6122      	str	r2, [r4, #16]
 80095b8:	b1d5      	cbz	r5, 80095f0 <__d2b+0x98>
 80095ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80095be:	4405      	add	r5, r0
 80095c0:	f8c9 5000 	str.w	r5, [r9]
 80095c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095c8:	f8c8 0000 	str.w	r0, [r8]
 80095cc:	4620      	mov	r0, r4
 80095ce:	b003      	add	sp, #12
 80095d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095d8:	e7d5      	b.n	8009586 <__d2b+0x2e>
 80095da:	6161      	str	r1, [r4, #20]
 80095dc:	e7e5      	b.n	80095aa <__d2b+0x52>
 80095de:	a801      	add	r0, sp, #4
 80095e0:	f7ff fd64 	bl	80090ac <__lo0bits>
 80095e4:	9b01      	ldr	r3, [sp, #4]
 80095e6:	6163      	str	r3, [r4, #20]
 80095e8:	2201      	movs	r2, #1
 80095ea:	6122      	str	r2, [r4, #16]
 80095ec:	3020      	adds	r0, #32
 80095ee:	e7e3      	b.n	80095b8 <__d2b+0x60>
 80095f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095f8:	f8c9 0000 	str.w	r0, [r9]
 80095fc:	6918      	ldr	r0, [r3, #16]
 80095fe:	f7ff fd35 	bl	800906c <__hi0bits>
 8009602:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009606:	e7df      	b.n	80095c8 <__d2b+0x70>
 8009608:	0800b8fb 	.word	0x0800b8fb
 800960c:	0800b90c 	.word	0x0800b90c

08009610 <_calloc_r>:
 8009610:	b513      	push	{r0, r1, r4, lr}
 8009612:	434a      	muls	r2, r1
 8009614:	4611      	mov	r1, r2
 8009616:	9201      	str	r2, [sp, #4]
 8009618:	f000 f85a 	bl	80096d0 <_malloc_r>
 800961c:	4604      	mov	r4, r0
 800961e:	b118      	cbz	r0, 8009628 <_calloc_r+0x18>
 8009620:	9a01      	ldr	r2, [sp, #4]
 8009622:	2100      	movs	r1, #0
 8009624:	f7fe f952 	bl	80078cc <memset>
 8009628:	4620      	mov	r0, r4
 800962a:	b002      	add	sp, #8
 800962c:	bd10      	pop	{r4, pc}
	...

08009630 <_free_r>:
 8009630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009632:	2900      	cmp	r1, #0
 8009634:	d048      	beq.n	80096c8 <_free_r+0x98>
 8009636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800963a:	9001      	str	r0, [sp, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	f1a1 0404 	sub.w	r4, r1, #4
 8009642:	bfb8      	it	lt
 8009644:	18e4      	addlt	r4, r4, r3
 8009646:	f000 fa65 	bl	8009b14 <__malloc_lock>
 800964a:	4a20      	ldr	r2, [pc, #128]	; (80096cc <_free_r+0x9c>)
 800964c:	9801      	ldr	r0, [sp, #4]
 800964e:	6813      	ldr	r3, [r2, #0]
 8009650:	4615      	mov	r5, r2
 8009652:	b933      	cbnz	r3, 8009662 <_free_r+0x32>
 8009654:	6063      	str	r3, [r4, #4]
 8009656:	6014      	str	r4, [r2, #0]
 8009658:	b003      	add	sp, #12
 800965a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800965e:	f000 ba5f 	b.w	8009b20 <__malloc_unlock>
 8009662:	42a3      	cmp	r3, r4
 8009664:	d90b      	bls.n	800967e <_free_r+0x4e>
 8009666:	6821      	ldr	r1, [r4, #0]
 8009668:	1862      	adds	r2, r4, r1
 800966a:	4293      	cmp	r3, r2
 800966c:	bf04      	itt	eq
 800966e:	681a      	ldreq	r2, [r3, #0]
 8009670:	685b      	ldreq	r3, [r3, #4]
 8009672:	6063      	str	r3, [r4, #4]
 8009674:	bf04      	itt	eq
 8009676:	1852      	addeq	r2, r2, r1
 8009678:	6022      	streq	r2, [r4, #0]
 800967a:	602c      	str	r4, [r5, #0]
 800967c:	e7ec      	b.n	8009658 <_free_r+0x28>
 800967e:	461a      	mov	r2, r3
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	b10b      	cbz	r3, 8009688 <_free_r+0x58>
 8009684:	42a3      	cmp	r3, r4
 8009686:	d9fa      	bls.n	800967e <_free_r+0x4e>
 8009688:	6811      	ldr	r1, [r2, #0]
 800968a:	1855      	adds	r5, r2, r1
 800968c:	42a5      	cmp	r5, r4
 800968e:	d10b      	bne.n	80096a8 <_free_r+0x78>
 8009690:	6824      	ldr	r4, [r4, #0]
 8009692:	4421      	add	r1, r4
 8009694:	1854      	adds	r4, r2, r1
 8009696:	42a3      	cmp	r3, r4
 8009698:	6011      	str	r1, [r2, #0]
 800969a:	d1dd      	bne.n	8009658 <_free_r+0x28>
 800969c:	681c      	ldr	r4, [r3, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	6053      	str	r3, [r2, #4]
 80096a2:	4421      	add	r1, r4
 80096a4:	6011      	str	r1, [r2, #0]
 80096a6:	e7d7      	b.n	8009658 <_free_r+0x28>
 80096a8:	d902      	bls.n	80096b0 <_free_r+0x80>
 80096aa:	230c      	movs	r3, #12
 80096ac:	6003      	str	r3, [r0, #0]
 80096ae:	e7d3      	b.n	8009658 <_free_r+0x28>
 80096b0:	6825      	ldr	r5, [r4, #0]
 80096b2:	1961      	adds	r1, r4, r5
 80096b4:	428b      	cmp	r3, r1
 80096b6:	bf04      	itt	eq
 80096b8:	6819      	ldreq	r1, [r3, #0]
 80096ba:	685b      	ldreq	r3, [r3, #4]
 80096bc:	6063      	str	r3, [r4, #4]
 80096be:	bf04      	itt	eq
 80096c0:	1949      	addeq	r1, r1, r5
 80096c2:	6021      	streq	r1, [r4, #0]
 80096c4:	6054      	str	r4, [r2, #4]
 80096c6:	e7c7      	b.n	8009658 <_free_r+0x28>
 80096c8:	b003      	add	sp, #12
 80096ca:	bd30      	pop	{r4, r5, pc}
 80096cc:	2000223c 	.word	0x2000223c

080096d0 <_malloc_r>:
 80096d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d2:	1ccd      	adds	r5, r1, #3
 80096d4:	f025 0503 	bic.w	r5, r5, #3
 80096d8:	3508      	adds	r5, #8
 80096da:	2d0c      	cmp	r5, #12
 80096dc:	bf38      	it	cc
 80096de:	250c      	movcc	r5, #12
 80096e0:	2d00      	cmp	r5, #0
 80096e2:	4606      	mov	r6, r0
 80096e4:	db01      	blt.n	80096ea <_malloc_r+0x1a>
 80096e6:	42a9      	cmp	r1, r5
 80096e8:	d903      	bls.n	80096f2 <_malloc_r+0x22>
 80096ea:	230c      	movs	r3, #12
 80096ec:	6033      	str	r3, [r6, #0]
 80096ee:	2000      	movs	r0, #0
 80096f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096f2:	f000 fa0f 	bl	8009b14 <__malloc_lock>
 80096f6:	4921      	ldr	r1, [pc, #132]	; (800977c <_malloc_r+0xac>)
 80096f8:	680a      	ldr	r2, [r1, #0]
 80096fa:	4614      	mov	r4, r2
 80096fc:	b99c      	cbnz	r4, 8009726 <_malloc_r+0x56>
 80096fe:	4f20      	ldr	r7, [pc, #128]	; (8009780 <_malloc_r+0xb0>)
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	b923      	cbnz	r3, 800970e <_malloc_r+0x3e>
 8009704:	4621      	mov	r1, r4
 8009706:	4630      	mov	r0, r6
 8009708:	f000 f998 	bl	8009a3c <_sbrk_r>
 800970c:	6038      	str	r0, [r7, #0]
 800970e:	4629      	mov	r1, r5
 8009710:	4630      	mov	r0, r6
 8009712:	f000 f993 	bl	8009a3c <_sbrk_r>
 8009716:	1c43      	adds	r3, r0, #1
 8009718:	d123      	bne.n	8009762 <_malloc_r+0x92>
 800971a:	230c      	movs	r3, #12
 800971c:	6033      	str	r3, [r6, #0]
 800971e:	4630      	mov	r0, r6
 8009720:	f000 f9fe 	bl	8009b20 <__malloc_unlock>
 8009724:	e7e3      	b.n	80096ee <_malloc_r+0x1e>
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	1b5b      	subs	r3, r3, r5
 800972a:	d417      	bmi.n	800975c <_malloc_r+0x8c>
 800972c:	2b0b      	cmp	r3, #11
 800972e:	d903      	bls.n	8009738 <_malloc_r+0x68>
 8009730:	6023      	str	r3, [r4, #0]
 8009732:	441c      	add	r4, r3
 8009734:	6025      	str	r5, [r4, #0]
 8009736:	e004      	b.n	8009742 <_malloc_r+0x72>
 8009738:	6863      	ldr	r3, [r4, #4]
 800973a:	42a2      	cmp	r2, r4
 800973c:	bf0c      	ite	eq
 800973e:	600b      	streq	r3, [r1, #0]
 8009740:	6053      	strne	r3, [r2, #4]
 8009742:	4630      	mov	r0, r6
 8009744:	f000 f9ec 	bl	8009b20 <__malloc_unlock>
 8009748:	f104 000b 	add.w	r0, r4, #11
 800974c:	1d23      	adds	r3, r4, #4
 800974e:	f020 0007 	bic.w	r0, r0, #7
 8009752:	1ac2      	subs	r2, r0, r3
 8009754:	d0cc      	beq.n	80096f0 <_malloc_r+0x20>
 8009756:	1a1b      	subs	r3, r3, r0
 8009758:	50a3      	str	r3, [r4, r2]
 800975a:	e7c9      	b.n	80096f0 <_malloc_r+0x20>
 800975c:	4622      	mov	r2, r4
 800975e:	6864      	ldr	r4, [r4, #4]
 8009760:	e7cc      	b.n	80096fc <_malloc_r+0x2c>
 8009762:	1cc4      	adds	r4, r0, #3
 8009764:	f024 0403 	bic.w	r4, r4, #3
 8009768:	42a0      	cmp	r0, r4
 800976a:	d0e3      	beq.n	8009734 <_malloc_r+0x64>
 800976c:	1a21      	subs	r1, r4, r0
 800976e:	4630      	mov	r0, r6
 8009770:	f000 f964 	bl	8009a3c <_sbrk_r>
 8009774:	3001      	adds	r0, #1
 8009776:	d1dd      	bne.n	8009734 <_malloc_r+0x64>
 8009778:	e7cf      	b.n	800971a <_malloc_r+0x4a>
 800977a:	bf00      	nop
 800977c:	2000223c 	.word	0x2000223c
 8009780:	20002240 	.word	0x20002240

08009784 <__ssputs_r>:
 8009784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009788:	688e      	ldr	r6, [r1, #8]
 800978a:	429e      	cmp	r6, r3
 800978c:	4682      	mov	sl, r0
 800978e:	460c      	mov	r4, r1
 8009790:	4690      	mov	r8, r2
 8009792:	461f      	mov	r7, r3
 8009794:	d838      	bhi.n	8009808 <__ssputs_r+0x84>
 8009796:	898a      	ldrh	r2, [r1, #12]
 8009798:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800979c:	d032      	beq.n	8009804 <__ssputs_r+0x80>
 800979e:	6825      	ldr	r5, [r4, #0]
 80097a0:	6909      	ldr	r1, [r1, #16]
 80097a2:	eba5 0901 	sub.w	r9, r5, r1
 80097a6:	6965      	ldr	r5, [r4, #20]
 80097a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097b0:	3301      	adds	r3, #1
 80097b2:	444b      	add	r3, r9
 80097b4:	106d      	asrs	r5, r5, #1
 80097b6:	429d      	cmp	r5, r3
 80097b8:	bf38      	it	cc
 80097ba:	461d      	movcc	r5, r3
 80097bc:	0553      	lsls	r3, r2, #21
 80097be:	d531      	bpl.n	8009824 <__ssputs_r+0xa0>
 80097c0:	4629      	mov	r1, r5
 80097c2:	f7ff ff85 	bl	80096d0 <_malloc_r>
 80097c6:	4606      	mov	r6, r0
 80097c8:	b950      	cbnz	r0, 80097e0 <__ssputs_r+0x5c>
 80097ca:	230c      	movs	r3, #12
 80097cc:	f8ca 3000 	str.w	r3, [sl]
 80097d0:	89a3      	ldrh	r3, [r4, #12]
 80097d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097d6:	81a3      	strh	r3, [r4, #12]
 80097d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e0:	6921      	ldr	r1, [r4, #16]
 80097e2:	464a      	mov	r2, r9
 80097e4:	f7ff fb88 	bl	8008ef8 <memcpy>
 80097e8:	89a3      	ldrh	r3, [r4, #12]
 80097ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097f2:	81a3      	strh	r3, [r4, #12]
 80097f4:	6126      	str	r6, [r4, #16]
 80097f6:	6165      	str	r5, [r4, #20]
 80097f8:	444e      	add	r6, r9
 80097fa:	eba5 0509 	sub.w	r5, r5, r9
 80097fe:	6026      	str	r6, [r4, #0]
 8009800:	60a5      	str	r5, [r4, #8]
 8009802:	463e      	mov	r6, r7
 8009804:	42be      	cmp	r6, r7
 8009806:	d900      	bls.n	800980a <__ssputs_r+0x86>
 8009808:	463e      	mov	r6, r7
 800980a:	4632      	mov	r2, r6
 800980c:	6820      	ldr	r0, [r4, #0]
 800980e:	4641      	mov	r1, r8
 8009810:	f000 f966 	bl	8009ae0 <memmove>
 8009814:	68a3      	ldr	r3, [r4, #8]
 8009816:	6822      	ldr	r2, [r4, #0]
 8009818:	1b9b      	subs	r3, r3, r6
 800981a:	4432      	add	r2, r6
 800981c:	60a3      	str	r3, [r4, #8]
 800981e:	6022      	str	r2, [r4, #0]
 8009820:	2000      	movs	r0, #0
 8009822:	e7db      	b.n	80097dc <__ssputs_r+0x58>
 8009824:	462a      	mov	r2, r5
 8009826:	f000 f981 	bl	8009b2c <_realloc_r>
 800982a:	4606      	mov	r6, r0
 800982c:	2800      	cmp	r0, #0
 800982e:	d1e1      	bne.n	80097f4 <__ssputs_r+0x70>
 8009830:	6921      	ldr	r1, [r4, #16]
 8009832:	4650      	mov	r0, sl
 8009834:	f7ff fefc 	bl	8009630 <_free_r>
 8009838:	e7c7      	b.n	80097ca <__ssputs_r+0x46>
	...

0800983c <_svfiprintf_r>:
 800983c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009840:	4698      	mov	r8, r3
 8009842:	898b      	ldrh	r3, [r1, #12]
 8009844:	061b      	lsls	r3, r3, #24
 8009846:	b09d      	sub	sp, #116	; 0x74
 8009848:	4607      	mov	r7, r0
 800984a:	460d      	mov	r5, r1
 800984c:	4614      	mov	r4, r2
 800984e:	d50e      	bpl.n	800986e <_svfiprintf_r+0x32>
 8009850:	690b      	ldr	r3, [r1, #16]
 8009852:	b963      	cbnz	r3, 800986e <_svfiprintf_r+0x32>
 8009854:	2140      	movs	r1, #64	; 0x40
 8009856:	f7ff ff3b 	bl	80096d0 <_malloc_r>
 800985a:	6028      	str	r0, [r5, #0]
 800985c:	6128      	str	r0, [r5, #16]
 800985e:	b920      	cbnz	r0, 800986a <_svfiprintf_r+0x2e>
 8009860:	230c      	movs	r3, #12
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009868:	e0d1      	b.n	8009a0e <_svfiprintf_r+0x1d2>
 800986a:	2340      	movs	r3, #64	; 0x40
 800986c:	616b      	str	r3, [r5, #20]
 800986e:	2300      	movs	r3, #0
 8009870:	9309      	str	r3, [sp, #36]	; 0x24
 8009872:	2320      	movs	r3, #32
 8009874:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009878:	f8cd 800c 	str.w	r8, [sp, #12]
 800987c:	2330      	movs	r3, #48	; 0x30
 800987e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a28 <_svfiprintf_r+0x1ec>
 8009882:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009886:	f04f 0901 	mov.w	r9, #1
 800988a:	4623      	mov	r3, r4
 800988c:	469a      	mov	sl, r3
 800988e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009892:	b10a      	cbz	r2, 8009898 <_svfiprintf_r+0x5c>
 8009894:	2a25      	cmp	r2, #37	; 0x25
 8009896:	d1f9      	bne.n	800988c <_svfiprintf_r+0x50>
 8009898:	ebba 0b04 	subs.w	fp, sl, r4
 800989c:	d00b      	beq.n	80098b6 <_svfiprintf_r+0x7a>
 800989e:	465b      	mov	r3, fp
 80098a0:	4622      	mov	r2, r4
 80098a2:	4629      	mov	r1, r5
 80098a4:	4638      	mov	r0, r7
 80098a6:	f7ff ff6d 	bl	8009784 <__ssputs_r>
 80098aa:	3001      	adds	r0, #1
 80098ac:	f000 80aa 	beq.w	8009a04 <_svfiprintf_r+0x1c8>
 80098b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098b2:	445a      	add	r2, fp
 80098b4:	9209      	str	r2, [sp, #36]	; 0x24
 80098b6:	f89a 3000 	ldrb.w	r3, [sl]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f000 80a2 	beq.w	8009a04 <_svfiprintf_r+0x1c8>
 80098c0:	2300      	movs	r3, #0
 80098c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098ca:	f10a 0a01 	add.w	sl, sl, #1
 80098ce:	9304      	str	r3, [sp, #16]
 80098d0:	9307      	str	r3, [sp, #28]
 80098d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098d6:	931a      	str	r3, [sp, #104]	; 0x68
 80098d8:	4654      	mov	r4, sl
 80098da:	2205      	movs	r2, #5
 80098dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e0:	4851      	ldr	r0, [pc, #324]	; (8009a28 <_svfiprintf_r+0x1ec>)
 80098e2:	f7f6 fc85 	bl	80001f0 <memchr>
 80098e6:	9a04      	ldr	r2, [sp, #16]
 80098e8:	b9d8      	cbnz	r0, 8009922 <_svfiprintf_r+0xe6>
 80098ea:	06d0      	lsls	r0, r2, #27
 80098ec:	bf44      	itt	mi
 80098ee:	2320      	movmi	r3, #32
 80098f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098f4:	0711      	lsls	r1, r2, #28
 80098f6:	bf44      	itt	mi
 80098f8:	232b      	movmi	r3, #43	; 0x2b
 80098fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009902:	2b2a      	cmp	r3, #42	; 0x2a
 8009904:	d015      	beq.n	8009932 <_svfiprintf_r+0xf6>
 8009906:	9a07      	ldr	r2, [sp, #28]
 8009908:	4654      	mov	r4, sl
 800990a:	2000      	movs	r0, #0
 800990c:	f04f 0c0a 	mov.w	ip, #10
 8009910:	4621      	mov	r1, r4
 8009912:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009916:	3b30      	subs	r3, #48	; 0x30
 8009918:	2b09      	cmp	r3, #9
 800991a:	d94e      	bls.n	80099ba <_svfiprintf_r+0x17e>
 800991c:	b1b0      	cbz	r0, 800994c <_svfiprintf_r+0x110>
 800991e:	9207      	str	r2, [sp, #28]
 8009920:	e014      	b.n	800994c <_svfiprintf_r+0x110>
 8009922:	eba0 0308 	sub.w	r3, r0, r8
 8009926:	fa09 f303 	lsl.w	r3, r9, r3
 800992a:	4313      	orrs	r3, r2
 800992c:	9304      	str	r3, [sp, #16]
 800992e:	46a2      	mov	sl, r4
 8009930:	e7d2      	b.n	80098d8 <_svfiprintf_r+0x9c>
 8009932:	9b03      	ldr	r3, [sp, #12]
 8009934:	1d19      	adds	r1, r3, #4
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	9103      	str	r1, [sp, #12]
 800993a:	2b00      	cmp	r3, #0
 800993c:	bfbb      	ittet	lt
 800993e:	425b      	neglt	r3, r3
 8009940:	f042 0202 	orrlt.w	r2, r2, #2
 8009944:	9307      	strge	r3, [sp, #28]
 8009946:	9307      	strlt	r3, [sp, #28]
 8009948:	bfb8      	it	lt
 800994a:	9204      	strlt	r2, [sp, #16]
 800994c:	7823      	ldrb	r3, [r4, #0]
 800994e:	2b2e      	cmp	r3, #46	; 0x2e
 8009950:	d10c      	bne.n	800996c <_svfiprintf_r+0x130>
 8009952:	7863      	ldrb	r3, [r4, #1]
 8009954:	2b2a      	cmp	r3, #42	; 0x2a
 8009956:	d135      	bne.n	80099c4 <_svfiprintf_r+0x188>
 8009958:	9b03      	ldr	r3, [sp, #12]
 800995a:	1d1a      	adds	r2, r3, #4
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	9203      	str	r2, [sp, #12]
 8009960:	2b00      	cmp	r3, #0
 8009962:	bfb8      	it	lt
 8009964:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009968:	3402      	adds	r4, #2
 800996a:	9305      	str	r3, [sp, #20]
 800996c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a38 <_svfiprintf_r+0x1fc>
 8009970:	7821      	ldrb	r1, [r4, #0]
 8009972:	2203      	movs	r2, #3
 8009974:	4650      	mov	r0, sl
 8009976:	f7f6 fc3b 	bl	80001f0 <memchr>
 800997a:	b140      	cbz	r0, 800998e <_svfiprintf_r+0x152>
 800997c:	2340      	movs	r3, #64	; 0x40
 800997e:	eba0 000a 	sub.w	r0, r0, sl
 8009982:	fa03 f000 	lsl.w	r0, r3, r0
 8009986:	9b04      	ldr	r3, [sp, #16]
 8009988:	4303      	orrs	r3, r0
 800998a:	3401      	adds	r4, #1
 800998c:	9304      	str	r3, [sp, #16]
 800998e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009992:	4826      	ldr	r0, [pc, #152]	; (8009a2c <_svfiprintf_r+0x1f0>)
 8009994:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009998:	2206      	movs	r2, #6
 800999a:	f7f6 fc29 	bl	80001f0 <memchr>
 800999e:	2800      	cmp	r0, #0
 80099a0:	d038      	beq.n	8009a14 <_svfiprintf_r+0x1d8>
 80099a2:	4b23      	ldr	r3, [pc, #140]	; (8009a30 <_svfiprintf_r+0x1f4>)
 80099a4:	bb1b      	cbnz	r3, 80099ee <_svfiprintf_r+0x1b2>
 80099a6:	9b03      	ldr	r3, [sp, #12]
 80099a8:	3307      	adds	r3, #7
 80099aa:	f023 0307 	bic.w	r3, r3, #7
 80099ae:	3308      	adds	r3, #8
 80099b0:	9303      	str	r3, [sp, #12]
 80099b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b4:	4433      	add	r3, r6
 80099b6:	9309      	str	r3, [sp, #36]	; 0x24
 80099b8:	e767      	b.n	800988a <_svfiprintf_r+0x4e>
 80099ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80099be:	460c      	mov	r4, r1
 80099c0:	2001      	movs	r0, #1
 80099c2:	e7a5      	b.n	8009910 <_svfiprintf_r+0xd4>
 80099c4:	2300      	movs	r3, #0
 80099c6:	3401      	adds	r4, #1
 80099c8:	9305      	str	r3, [sp, #20]
 80099ca:	4619      	mov	r1, r3
 80099cc:	f04f 0c0a 	mov.w	ip, #10
 80099d0:	4620      	mov	r0, r4
 80099d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099d6:	3a30      	subs	r2, #48	; 0x30
 80099d8:	2a09      	cmp	r2, #9
 80099da:	d903      	bls.n	80099e4 <_svfiprintf_r+0x1a8>
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d0c5      	beq.n	800996c <_svfiprintf_r+0x130>
 80099e0:	9105      	str	r1, [sp, #20]
 80099e2:	e7c3      	b.n	800996c <_svfiprintf_r+0x130>
 80099e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80099e8:	4604      	mov	r4, r0
 80099ea:	2301      	movs	r3, #1
 80099ec:	e7f0      	b.n	80099d0 <_svfiprintf_r+0x194>
 80099ee:	ab03      	add	r3, sp, #12
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	462a      	mov	r2, r5
 80099f4:	4b0f      	ldr	r3, [pc, #60]	; (8009a34 <_svfiprintf_r+0x1f8>)
 80099f6:	a904      	add	r1, sp, #16
 80099f8:	4638      	mov	r0, r7
 80099fa:	f7fe f80f 	bl	8007a1c <_printf_float>
 80099fe:	1c42      	adds	r2, r0, #1
 8009a00:	4606      	mov	r6, r0
 8009a02:	d1d6      	bne.n	80099b2 <_svfiprintf_r+0x176>
 8009a04:	89ab      	ldrh	r3, [r5, #12]
 8009a06:	065b      	lsls	r3, r3, #25
 8009a08:	f53f af2c 	bmi.w	8009864 <_svfiprintf_r+0x28>
 8009a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a0e:	b01d      	add	sp, #116	; 0x74
 8009a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a14:	ab03      	add	r3, sp, #12
 8009a16:	9300      	str	r3, [sp, #0]
 8009a18:	462a      	mov	r2, r5
 8009a1a:	4b06      	ldr	r3, [pc, #24]	; (8009a34 <_svfiprintf_r+0x1f8>)
 8009a1c:	a904      	add	r1, sp, #16
 8009a1e:	4638      	mov	r0, r7
 8009a20:	f7fe faa0 	bl	8007f64 <_printf_i>
 8009a24:	e7eb      	b.n	80099fe <_svfiprintf_r+0x1c2>
 8009a26:	bf00      	nop
 8009a28:	0800ba6c 	.word	0x0800ba6c
 8009a2c:	0800ba76 	.word	0x0800ba76
 8009a30:	08007a1d 	.word	0x08007a1d
 8009a34:	08009785 	.word	0x08009785
 8009a38:	0800ba72 	.word	0x0800ba72

08009a3c <_sbrk_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4d06      	ldr	r5, [pc, #24]	; (8009a58 <_sbrk_r+0x1c>)
 8009a40:	2300      	movs	r3, #0
 8009a42:	4604      	mov	r4, r0
 8009a44:	4608      	mov	r0, r1
 8009a46:	602b      	str	r3, [r5, #0]
 8009a48:	f7fa f8ee 	bl	8003c28 <_sbrk>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d102      	bne.n	8009a56 <_sbrk_r+0x1a>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	b103      	cbz	r3, 8009a56 <_sbrk_r+0x1a>
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	bd38      	pop	{r3, r4, r5, pc}
 8009a58:	200044e4 	.word	0x200044e4

08009a5c <__assert_func>:
 8009a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a5e:	4614      	mov	r4, r2
 8009a60:	461a      	mov	r2, r3
 8009a62:	4b09      	ldr	r3, [pc, #36]	; (8009a88 <__assert_func+0x2c>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4605      	mov	r5, r0
 8009a68:	68d8      	ldr	r0, [r3, #12]
 8009a6a:	b14c      	cbz	r4, 8009a80 <__assert_func+0x24>
 8009a6c:	4b07      	ldr	r3, [pc, #28]	; (8009a8c <__assert_func+0x30>)
 8009a6e:	9100      	str	r1, [sp, #0]
 8009a70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a74:	4906      	ldr	r1, [pc, #24]	; (8009a90 <__assert_func+0x34>)
 8009a76:	462b      	mov	r3, r5
 8009a78:	f000 f80e 	bl	8009a98 <fiprintf>
 8009a7c:	f000 faa4 	bl	8009fc8 <abort>
 8009a80:	4b04      	ldr	r3, [pc, #16]	; (8009a94 <__assert_func+0x38>)
 8009a82:	461c      	mov	r4, r3
 8009a84:	e7f3      	b.n	8009a6e <__assert_func+0x12>
 8009a86:	bf00      	nop
 8009a88:	20002028 	.word	0x20002028
 8009a8c:	0800ba7d 	.word	0x0800ba7d
 8009a90:	0800ba8a 	.word	0x0800ba8a
 8009a94:	0800bab8 	.word	0x0800bab8

08009a98 <fiprintf>:
 8009a98:	b40e      	push	{r1, r2, r3}
 8009a9a:	b503      	push	{r0, r1, lr}
 8009a9c:	4601      	mov	r1, r0
 8009a9e:	ab03      	add	r3, sp, #12
 8009aa0:	4805      	ldr	r0, [pc, #20]	; (8009ab8 <fiprintf+0x20>)
 8009aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aa6:	6800      	ldr	r0, [r0, #0]
 8009aa8:	9301      	str	r3, [sp, #4]
 8009aaa:	f000 f88f 	bl	8009bcc <_vfiprintf_r>
 8009aae:	b002      	add	sp, #8
 8009ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ab4:	b003      	add	sp, #12
 8009ab6:	4770      	bx	lr
 8009ab8:	20002028 	.word	0x20002028

08009abc <__ascii_mbtowc>:
 8009abc:	b082      	sub	sp, #8
 8009abe:	b901      	cbnz	r1, 8009ac2 <__ascii_mbtowc+0x6>
 8009ac0:	a901      	add	r1, sp, #4
 8009ac2:	b142      	cbz	r2, 8009ad6 <__ascii_mbtowc+0x1a>
 8009ac4:	b14b      	cbz	r3, 8009ada <__ascii_mbtowc+0x1e>
 8009ac6:	7813      	ldrb	r3, [r2, #0]
 8009ac8:	600b      	str	r3, [r1, #0]
 8009aca:	7812      	ldrb	r2, [r2, #0]
 8009acc:	1e10      	subs	r0, r2, #0
 8009ace:	bf18      	it	ne
 8009ad0:	2001      	movne	r0, #1
 8009ad2:	b002      	add	sp, #8
 8009ad4:	4770      	bx	lr
 8009ad6:	4610      	mov	r0, r2
 8009ad8:	e7fb      	b.n	8009ad2 <__ascii_mbtowc+0x16>
 8009ada:	f06f 0001 	mvn.w	r0, #1
 8009ade:	e7f8      	b.n	8009ad2 <__ascii_mbtowc+0x16>

08009ae0 <memmove>:
 8009ae0:	4288      	cmp	r0, r1
 8009ae2:	b510      	push	{r4, lr}
 8009ae4:	eb01 0402 	add.w	r4, r1, r2
 8009ae8:	d902      	bls.n	8009af0 <memmove+0x10>
 8009aea:	4284      	cmp	r4, r0
 8009aec:	4623      	mov	r3, r4
 8009aee:	d807      	bhi.n	8009b00 <memmove+0x20>
 8009af0:	1e43      	subs	r3, r0, #1
 8009af2:	42a1      	cmp	r1, r4
 8009af4:	d008      	beq.n	8009b08 <memmove+0x28>
 8009af6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009afa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009afe:	e7f8      	b.n	8009af2 <memmove+0x12>
 8009b00:	4402      	add	r2, r0
 8009b02:	4601      	mov	r1, r0
 8009b04:	428a      	cmp	r2, r1
 8009b06:	d100      	bne.n	8009b0a <memmove+0x2a>
 8009b08:	bd10      	pop	{r4, pc}
 8009b0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b12:	e7f7      	b.n	8009b04 <memmove+0x24>

08009b14 <__malloc_lock>:
 8009b14:	4801      	ldr	r0, [pc, #4]	; (8009b1c <__malloc_lock+0x8>)
 8009b16:	f000 bc17 	b.w	800a348 <__retarget_lock_acquire_recursive>
 8009b1a:	bf00      	nop
 8009b1c:	200044ec 	.word	0x200044ec

08009b20 <__malloc_unlock>:
 8009b20:	4801      	ldr	r0, [pc, #4]	; (8009b28 <__malloc_unlock+0x8>)
 8009b22:	f000 bc12 	b.w	800a34a <__retarget_lock_release_recursive>
 8009b26:	bf00      	nop
 8009b28:	200044ec 	.word	0x200044ec

08009b2c <_realloc_r>:
 8009b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2e:	4607      	mov	r7, r0
 8009b30:	4614      	mov	r4, r2
 8009b32:	460e      	mov	r6, r1
 8009b34:	b921      	cbnz	r1, 8009b40 <_realloc_r+0x14>
 8009b36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b3a:	4611      	mov	r1, r2
 8009b3c:	f7ff bdc8 	b.w	80096d0 <_malloc_r>
 8009b40:	b922      	cbnz	r2, 8009b4c <_realloc_r+0x20>
 8009b42:	f7ff fd75 	bl	8009630 <_free_r>
 8009b46:	4625      	mov	r5, r4
 8009b48:	4628      	mov	r0, r5
 8009b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b4c:	f000 fc62 	bl	800a414 <_malloc_usable_size_r>
 8009b50:	42a0      	cmp	r0, r4
 8009b52:	d20f      	bcs.n	8009b74 <_realloc_r+0x48>
 8009b54:	4621      	mov	r1, r4
 8009b56:	4638      	mov	r0, r7
 8009b58:	f7ff fdba 	bl	80096d0 <_malloc_r>
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d0f2      	beq.n	8009b48 <_realloc_r+0x1c>
 8009b62:	4631      	mov	r1, r6
 8009b64:	4622      	mov	r2, r4
 8009b66:	f7ff f9c7 	bl	8008ef8 <memcpy>
 8009b6a:	4631      	mov	r1, r6
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	f7ff fd5f 	bl	8009630 <_free_r>
 8009b72:	e7e9      	b.n	8009b48 <_realloc_r+0x1c>
 8009b74:	4635      	mov	r5, r6
 8009b76:	e7e7      	b.n	8009b48 <_realloc_r+0x1c>

08009b78 <__sfputc_r>:
 8009b78:	6893      	ldr	r3, [r2, #8]
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	b410      	push	{r4}
 8009b80:	6093      	str	r3, [r2, #8]
 8009b82:	da08      	bge.n	8009b96 <__sfputc_r+0x1e>
 8009b84:	6994      	ldr	r4, [r2, #24]
 8009b86:	42a3      	cmp	r3, r4
 8009b88:	db01      	blt.n	8009b8e <__sfputc_r+0x16>
 8009b8a:	290a      	cmp	r1, #10
 8009b8c:	d103      	bne.n	8009b96 <__sfputc_r+0x1e>
 8009b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b92:	f000 b94b 	b.w	8009e2c <__swbuf_r>
 8009b96:	6813      	ldr	r3, [r2, #0]
 8009b98:	1c58      	adds	r0, r3, #1
 8009b9a:	6010      	str	r0, [r2, #0]
 8009b9c:	7019      	strb	r1, [r3, #0]
 8009b9e:	4608      	mov	r0, r1
 8009ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <__sfputs_r>:
 8009ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba8:	4606      	mov	r6, r0
 8009baa:	460f      	mov	r7, r1
 8009bac:	4614      	mov	r4, r2
 8009bae:	18d5      	adds	r5, r2, r3
 8009bb0:	42ac      	cmp	r4, r5
 8009bb2:	d101      	bne.n	8009bb8 <__sfputs_r+0x12>
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	e007      	b.n	8009bc8 <__sfputs_r+0x22>
 8009bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bbc:	463a      	mov	r2, r7
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	f7ff ffda 	bl	8009b78 <__sfputc_r>
 8009bc4:	1c43      	adds	r3, r0, #1
 8009bc6:	d1f3      	bne.n	8009bb0 <__sfputs_r+0xa>
 8009bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bcc <_vfiprintf_r>:
 8009bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd0:	460d      	mov	r5, r1
 8009bd2:	b09d      	sub	sp, #116	; 0x74
 8009bd4:	4614      	mov	r4, r2
 8009bd6:	4698      	mov	r8, r3
 8009bd8:	4606      	mov	r6, r0
 8009bda:	b118      	cbz	r0, 8009be4 <_vfiprintf_r+0x18>
 8009bdc:	6983      	ldr	r3, [r0, #24]
 8009bde:	b90b      	cbnz	r3, 8009be4 <_vfiprintf_r+0x18>
 8009be0:	f000 fb14 	bl	800a20c <__sinit>
 8009be4:	4b89      	ldr	r3, [pc, #548]	; (8009e0c <_vfiprintf_r+0x240>)
 8009be6:	429d      	cmp	r5, r3
 8009be8:	d11b      	bne.n	8009c22 <_vfiprintf_r+0x56>
 8009bea:	6875      	ldr	r5, [r6, #4]
 8009bec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bee:	07d9      	lsls	r1, r3, #31
 8009bf0:	d405      	bmi.n	8009bfe <_vfiprintf_r+0x32>
 8009bf2:	89ab      	ldrh	r3, [r5, #12]
 8009bf4:	059a      	lsls	r2, r3, #22
 8009bf6:	d402      	bmi.n	8009bfe <_vfiprintf_r+0x32>
 8009bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bfa:	f000 fba5 	bl	800a348 <__retarget_lock_acquire_recursive>
 8009bfe:	89ab      	ldrh	r3, [r5, #12]
 8009c00:	071b      	lsls	r3, r3, #28
 8009c02:	d501      	bpl.n	8009c08 <_vfiprintf_r+0x3c>
 8009c04:	692b      	ldr	r3, [r5, #16]
 8009c06:	b9eb      	cbnz	r3, 8009c44 <_vfiprintf_r+0x78>
 8009c08:	4629      	mov	r1, r5
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f000 f96e 	bl	8009eec <__swsetup_r>
 8009c10:	b1c0      	cbz	r0, 8009c44 <_vfiprintf_r+0x78>
 8009c12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c14:	07dc      	lsls	r4, r3, #31
 8009c16:	d50e      	bpl.n	8009c36 <_vfiprintf_r+0x6a>
 8009c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c1c:	b01d      	add	sp, #116	; 0x74
 8009c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c22:	4b7b      	ldr	r3, [pc, #492]	; (8009e10 <_vfiprintf_r+0x244>)
 8009c24:	429d      	cmp	r5, r3
 8009c26:	d101      	bne.n	8009c2c <_vfiprintf_r+0x60>
 8009c28:	68b5      	ldr	r5, [r6, #8]
 8009c2a:	e7df      	b.n	8009bec <_vfiprintf_r+0x20>
 8009c2c:	4b79      	ldr	r3, [pc, #484]	; (8009e14 <_vfiprintf_r+0x248>)
 8009c2e:	429d      	cmp	r5, r3
 8009c30:	bf08      	it	eq
 8009c32:	68f5      	ldreq	r5, [r6, #12]
 8009c34:	e7da      	b.n	8009bec <_vfiprintf_r+0x20>
 8009c36:	89ab      	ldrh	r3, [r5, #12]
 8009c38:	0598      	lsls	r0, r3, #22
 8009c3a:	d4ed      	bmi.n	8009c18 <_vfiprintf_r+0x4c>
 8009c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c3e:	f000 fb84 	bl	800a34a <__retarget_lock_release_recursive>
 8009c42:	e7e9      	b.n	8009c18 <_vfiprintf_r+0x4c>
 8009c44:	2300      	movs	r3, #0
 8009c46:	9309      	str	r3, [sp, #36]	; 0x24
 8009c48:	2320      	movs	r3, #32
 8009c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c52:	2330      	movs	r3, #48	; 0x30
 8009c54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e18 <_vfiprintf_r+0x24c>
 8009c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c5c:	f04f 0901 	mov.w	r9, #1
 8009c60:	4623      	mov	r3, r4
 8009c62:	469a      	mov	sl, r3
 8009c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c68:	b10a      	cbz	r2, 8009c6e <_vfiprintf_r+0xa2>
 8009c6a:	2a25      	cmp	r2, #37	; 0x25
 8009c6c:	d1f9      	bne.n	8009c62 <_vfiprintf_r+0x96>
 8009c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c72:	d00b      	beq.n	8009c8c <_vfiprintf_r+0xc0>
 8009c74:	465b      	mov	r3, fp
 8009c76:	4622      	mov	r2, r4
 8009c78:	4629      	mov	r1, r5
 8009c7a:	4630      	mov	r0, r6
 8009c7c:	f7ff ff93 	bl	8009ba6 <__sfputs_r>
 8009c80:	3001      	adds	r0, #1
 8009c82:	f000 80aa 	beq.w	8009dda <_vfiprintf_r+0x20e>
 8009c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c88:	445a      	add	r2, fp
 8009c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8009c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 80a2 	beq.w	8009dda <_vfiprintf_r+0x20e>
 8009c96:	2300      	movs	r3, #0
 8009c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ca0:	f10a 0a01 	add.w	sl, sl, #1
 8009ca4:	9304      	str	r3, [sp, #16]
 8009ca6:	9307      	str	r3, [sp, #28]
 8009ca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cac:	931a      	str	r3, [sp, #104]	; 0x68
 8009cae:	4654      	mov	r4, sl
 8009cb0:	2205      	movs	r2, #5
 8009cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb6:	4858      	ldr	r0, [pc, #352]	; (8009e18 <_vfiprintf_r+0x24c>)
 8009cb8:	f7f6 fa9a 	bl	80001f0 <memchr>
 8009cbc:	9a04      	ldr	r2, [sp, #16]
 8009cbe:	b9d8      	cbnz	r0, 8009cf8 <_vfiprintf_r+0x12c>
 8009cc0:	06d1      	lsls	r1, r2, #27
 8009cc2:	bf44      	itt	mi
 8009cc4:	2320      	movmi	r3, #32
 8009cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cca:	0713      	lsls	r3, r2, #28
 8009ccc:	bf44      	itt	mi
 8009cce:	232b      	movmi	r3, #43	; 0x2b
 8009cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8009cda:	d015      	beq.n	8009d08 <_vfiprintf_r+0x13c>
 8009cdc:	9a07      	ldr	r2, [sp, #28]
 8009cde:	4654      	mov	r4, sl
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	f04f 0c0a 	mov.w	ip, #10
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cec:	3b30      	subs	r3, #48	; 0x30
 8009cee:	2b09      	cmp	r3, #9
 8009cf0:	d94e      	bls.n	8009d90 <_vfiprintf_r+0x1c4>
 8009cf2:	b1b0      	cbz	r0, 8009d22 <_vfiprintf_r+0x156>
 8009cf4:	9207      	str	r2, [sp, #28]
 8009cf6:	e014      	b.n	8009d22 <_vfiprintf_r+0x156>
 8009cf8:	eba0 0308 	sub.w	r3, r0, r8
 8009cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8009d00:	4313      	orrs	r3, r2
 8009d02:	9304      	str	r3, [sp, #16]
 8009d04:	46a2      	mov	sl, r4
 8009d06:	e7d2      	b.n	8009cae <_vfiprintf_r+0xe2>
 8009d08:	9b03      	ldr	r3, [sp, #12]
 8009d0a:	1d19      	adds	r1, r3, #4
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	9103      	str	r1, [sp, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	bfbb      	ittet	lt
 8009d14:	425b      	neglt	r3, r3
 8009d16:	f042 0202 	orrlt.w	r2, r2, #2
 8009d1a:	9307      	strge	r3, [sp, #28]
 8009d1c:	9307      	strlt	r3, [sp, #28]
 8009d1e:	bfb8      	it	lt
 8009d20:	9204      	strlt	r2, [sp, #16]
 8009d22:	7823      	ldrb	r3, [r4, #0]
 8009d24:	2b2e      	cmp	r3, #46	; 0x2e
 8009d26:	d10c      	bne.n	8009d42 <_vfiprintf_r+0x176>
 8009d28:	7863      	ldrb	r3, [r4, #1]
 8009d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d2c:	d135      	bne.n	8009d9a <_vfiprintf_r+0x1ce>
 8009d2e:	9b03      	ldr	r3, [sp, #12]
 8009d30:	1d1a      	adds	r2, r3, #4
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	9203      	str	r2, [sp, #12]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	bfb8      	it	lt
 8009d3a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009d3e:	3402      	adds	r4, #2
 8009d40:	9305      	str	r3, [sp, #20]
 8009d42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e28 <_vfiprintf_r+0x25c>
 8009d46:	7821      	ldrb	r1, [r4, #0]
 8009d48:	2203      	movs	r2, #3
 8009d4a:	4650      	mov	r0, sl
 8009d4c:	f7f6 fa50 	bl	80001f0 <memchr>
 8009d50:	b140      	cbz	r0, 8009d64 <_vfiprintf_r+0x198>
 8009d52:	2340      	movs	r3, #64	; 0x40
 8009d54:	eba0 000a 	sub.w	r0, r0, sl
 8009d58:	fa03 f000 	lsl.w	r0, r3, r0
 8009d5c:	9b04      	ldr	r3, [sp, #16]
 8009d5e:	4303      	orrs	r3, r0
 8009d60:	3401      	adds	r4, #1
 8009d62:	9304      	str	r3, [sp, #16]
 8009d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d68:	482c      	ldr	r0, [pc, #176]	; (8009e1c <_vfiprintf_r+0x250>)
 8009d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d6e:	2206      	movs	r2, #6
 8009d70:	f7f6 fa3e 	bl	80001f0 <memchr>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	d03f      	beq.n	8009df8 <_vfiprintf_r+0x22c>
 8009d78:	4b29      	ldr	r3, [pc, #164]	; (8009e20 <_vfiprintf_r+0x254>)
 8009d7a:	bb1b      	cbnz	r3, 8009dc4 <_vfiprintf_r+0x1f8>
 8009d7c:	9b03      	ldr	r3, [sp, #12]
 8009d7e:	3307      	adds	r3, #7
 8009d80:	f023 0307 	bic.w	r3, r3, #7
 8009d84:	3308      	adds	r3, #8
 8009d86:	9303      	str	r3, [sp, #12]
 8009d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d8a:	443b      	add	r3, r7
 8009d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d8e:	e767      	b.n	8009c60 <_vfiprintf_r+0x94>
 8009d90:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d94:	460c      	mov	r4, r1
 8009d96:	2001      	movs	r0, #1
 8009d98:	e7a5      	b.n	8009ce6 <_vfiprintf_r+0x11a>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	3401      	adds	r4, #1
 8009d9e:	9305      	str	r3, [sp, #20]
 8009da0:	4619      	mov	r1, r3
 8009da2:	f04f 0c0a 	mov.w	ip, #10
 8009da6:	4620      	mov	r0, r4
 8009da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dac:	3a30      	subs	r2, #48	; 0x30
 8009dae:	2a09      	cmp	r2, #9
 8009db0:	d903      	bls.n	8009dba <_vfiprintf_r+0x1ee>
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d0c5      	beq.n	8009d42 <_vfiprintf_r+0x176>
 8009db6:	9105      	str	r1, [sp, #20]
 8009db8:	e7c3      	b.n	8009d42 <_vfiprintf_r+0x176>
 8009dba:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e7f0      	b.n	8009da6 <_vfiprintf_r+0x1da>
 8009dc4:	ab03      	add	r3, sp, #12
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	462a      	mov	r2, r5
 8009dca:	4b16      	ldr	r3, [pc, #88]	; (8009e24 <_vfiprintf_r+0x258>)
 8009dcc:	a904      	add	r1, sp, #16
 8009dce:	4630      	mov	r0, r6
 8009dd0:	f7fd fe24 	bl	8007a1c <_printf_float>
 8009dd4:	4607      	mov	r7, r0
 8009dd6:	1c78      	adds	r0, r7, #1
 8009dd8:	d1d6      	bne.n	8009d88 <_vfiprintf_r+0x1bc>
 8009dda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ddc:	07d9      	lsls	r1, r3, #31
 8009dde:	d405      	bmi.n	8009dec <_vfiprintf_r+0x220>
 8009de0:	89ab      	ldrh	r3, [r5, #12]
 8009de2:	059a      	lsls	r2, r3, #22
 8009de4:	d402      	bmi.n	8009dec <_vfiprintf_r+0x220>
 8009de6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009de8:	f000 faaf 	bl	800a34a <__retarget_lock_release_recursive>
 8009dec:	89ab      	ldrh	r3, [r5, #12]
 8009dee:	065b      	lsls	r3, r3, #25
 8009df0:	f53f af12 	bmi.w	8009c18 <_vfiprintf_r+0x4c>
 8009df4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009df6:	e711      	b.n	8009c1c <_vfiprintf_r+0x50>
 8009df8:	ab03      	add	r3, sp, #12
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	462a      	mov	r2, r5
 8009dfe:	4b09      	ldr	r3, [pc, #36]	; (8009e24 <_vfiprintf_r+0x258>)
 8009e00:	a904      	add	r1, sp, #16
 8009e02:	4630      	mov	r0, r6
 8009e04:	f7fe f8ae 	bl	8007f64 <_printf_i>
 8009e08:	e7e4      	b.n	8009dd4 <_vfiprintf_r+0x208>
 8009e0a:	bf00      	nop
 8009e0c:	0800bbe4 	.word	0x0800bbe4
 8009e10:	0800bc04 	.word	0x0800bc04
 8009e14:	0800bbc4 	.word	0x0800bbc4
 8009e18:	0800ba6c 	.word	0x0800ba6c
 8009e1c:	0800ba76 	.word	0x0800ba76
 8009e20:	08007a1d 	.word	0x08007a1d
 8009e24:	08009ba7 	.word	0x08009ba7
 8009e28:	0800ba72 	.word	0x0800ba72

08009e2c <__swbuf_r>:
 8009e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2e:	460e      	mov	r6, r1
 8009e30:	4614      	mov	r4, r2
 8009e32:	4605      	mov	r5, r0
 8009e34:	b118      	cbz	r0, 8009e3e <__swbuf_r+0x12>
 8009e36:	6983      	ldr	r3, [r0, #24]
 8009e38:	b90b      	cbnz	r3, 8009e3e <__swbuf_r+0x12>
 8009e3a:	f000 f9e7 	bl	800a20c <__sinit>
 8009e3e:	4b21      	ldr	r3, [pc, #132]	; (8009ec4 <__swbuf_r+0x98>)
 8009e40:	429c      	cmp	r4, r3
 8009e42:	d12b      	bne.n	8009e9c <__swbuf_r+0x70>
 8009e44:	686c      	ldr	r4, [r5, #4]
 8009e46:	69a3      	ldr	r3, [r4, #24]
 8009e48:	60a3      	str	r3, [r4, #8]
 8009e4a:	89a3      	ldrh	r3, [r4, #12]
 8009e4c:	071a      	lsls	r2, r3, #28
 8009e4e:	d52f      	bpl.n	8009eb0 <__swbuf_r+0x84>
 8009e50:	6923      	ldr	r3, [r4, #16]
 8009e52:	b36b      	cbz	r3, 8009eb0 <__swbuf_r+0x84>
 8009e54:	6923      	ldr	r3, [r4, #16]
 8009e56:	6820      	ldr	r0, [r4, #0]
 8009e58:	1ac0      	subs	r0, r0, r3
 8009e5a:	6963      	ldr	r3, [r4, #20]
 8009e5c:	b2f6      	uxtb	r6, r6
 8009e5e:	4283      	cmp	r3, r0
 8009e60:	4637      	mov	r7, r6
 8009e62:	dc04      	bgt.n	8009e6e <__swbuf_r+0x42>
 8009e64:	4621      	mov	r1, r4
 8009e66:	4628      	mov	r0, r5
 8009e68:	f000 f93c 	bl	800a0e4 <_fflush_r>
 8009e6c:	bb30      	cbnz	r0, 8009ebc <__swbuf_r+0x90>
 8009e6e:	68a3      	ldr	r3, [r4, #8]
 8009e70:	3b01      	subs	r3, #1
 8009e72:	60a3      	str	r3, [r4, #8]
 8009e74:	6823      	ldr	r3, [r4, #0]
 8009e76:	1c5a      	adds	r2, r3, #1
 8009e78:	6022      	str	r2, [r4, #0]
 8009e7a:	701e      	strb	r6, [r3, #0]
 8009e7c:	6963      	ldr	r3, [r4, #20]
 8009e7e:	3001      	adds	r0, #1
 8009e80:	4283      	cmp	r3, r0
 8009e82:	d004      	beq.n	8009e8e <__swbuf_r+0x62>
 8009e84:	89a3      	ldrh	r3, [r4, #12]
 8009e86:	07db      	lsls	r3, r3, #31
 8009e88:	d506      	bpl.n	8009e98 <__swbuf_r+0x6c>
 8009e8a:	2e0a      	cmp	r6, #10
 8009e8c:	d104      	bne.n	8009e98 <__swbuf_r+0x6c>
 8009e8e:	4621      	mov	r1, r4
 8009e90:	4628      	mov	r0, r5
 8009e92:	f000 f927 	bl	800a0e4 <_fflush_r>
 8009e96:	b988      	cbnz	r0, 8009ebc <__swbuf_r+0x90>
 8009e98:	4638      	mov	r0, r7
 8009e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e9c:	4b0a      	ldr	r3, [pc, #40]	; (8009ec8 <__swbuf_r+0x9c>)
 8009e9e:	429c      	cmp	r4, r3
 8009ea0:	d101      	bne.n	8009ea6 <__swbuf_r+0x7a>
 8009ea2:	68ac      	ldr	r4, [r5, #8]
 8009ea4:	e7cf      	b.n	8009e46 <__swbuf_r+0x1a>
 8009ea6:	4b09      	ldr	r3, [pc, #36]	; (8009ecc <__swbuf_r+0xa0>)
 8009ea8:	429c      	cmp	r4, r3
 8009eaa:	bf08      	it	eq
 8009eac:	68ec      	ldreq	r4, [r5, #12]
 8009eae:	e7ca      	b.n	8009e46 <__swbuf_r+0x1a>
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	f000 f81a 	bl	8009eec <__swsetup_r>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d0cb      	beq.n	8009e54 <__swbuf_r+0x28>
 8009ebc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009ec0:	e7ea      	b.n	8009e98 <__swbuf_r+0x6c>
 8009ec2:	bf00      	nop
 8009ec4:	0800bbe4 	.word	0x0800bbe4
 8009ec8:	0800bc04 	.word	0x0800bc04
 8009ecc:	0800bbc4 	.word	0x0800bbc4

08009ed0 <__ascii_wctomb>:
 8009ed0:	b149      	cbz	r1, 8009ee6 <__ascii_wctomb+0x16>
 8009ed2:	2aff      	cmp	r2, #255	; 0xff
 8009ed4:	bf85      	ittet	hi
 8009ed6:	238a      	movhi	r3, #138	; 0x8a
 8009ed8:	6003      	strhi	r3, [r0, #0]
 8009eda:	700a      	strbls	r2, [r1, #0]
 8009edc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009ee0:	bf98      	it	ls
 8009ee2:	2001      	movls	r0, #1
 8009ee4:	4770      	bx	lr
 8009ee6:	4608      	mov	r0, r1
 8009ee8:	4770      	bx	lr
	...

08009eec <__swsetup_r>:
 8009eec:	4b32      	ldr	r3, [pc, #200]	; (8009fb8 <__swsetup_r+0xcc>)
 8009eee:	b570      	push	{r4, r5, r6, lr}
 8009ef0:	681d      	ldr	r5, [r3, #0]
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	b125      	cbz	r5, 8009f02 <__swsetup_r+0x16>
 8009ef8:	69ab      	ldr	r3, [r5, #24]
 8009efa:	b913      	cbnz	r3, 8009f02 <__swsetup_r+0x16>
 8009efc:	4628      	mov	r0, r5
 8009efe:	f000 f985 	bl	800a20c <__sinit>
 8009f02:	4b2e      	ldr	r3, [pc, #184]	; (8009fbc <__swsetup_r+0xd0>)
 8009f04:	429c      	cmp	r4, r3
 8009f06:	d10f      	bne.n	8009f28 <__swsetup_r+0x3c>
 8009f08:	686c      	ldr	r4, [r5, #4]
 8009f0a:	89a3      	ldrh	r3, [r4, #12]
 8009f0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f10:	0719      	lsls	r1, r3, #28
 8009f12:	d42c      	bmi.n	8009f6e <__swsetup_r+0x82>
 8009f14:	06dd      	lsls	r5, r3, #27
 8009f16:	d411      	bmi.n	8009f3c <__swsetup_r+0x50>
 8009f18:	2309      	movs	r3, #9
 8009f1a:	6033      	str	r3, [r6, #0]
 8009f1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f20:	81a3      	strh	r3, [r4, #12]
 8009f22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f26:	e03e      	b.n	8009fa6 <__swsetup_r+0xba>
 8009f28:	4b25      	ldr	r3, [pc, #148]	; (8009fc0 <__swsetup_r+0xd4>)
 8009f2a:	429c      	cmp	r4, r3
 8009f2c:	d101      	bne.n	8009f32 <__swsetup_r+0x46>
 8009f2e:	68ac      	ldr	r4, [r5, #8]
 8009f30:	e7eb      	b.n	8009f0a <__swsetup_r+0x1e>
 8009f32:	4b24      	ldr	r3, [pc, #144]	; (8009fc4 <__swsetup_r+0xd8>)
 8009f34:	429c      	cmp	r4, r3
 8009f36:	bf08      	it	eq
 8009f38:	68ec      	ldreq	r4, [r5, #12]
 8009f3a:	e7e6      	b.n	8009f0a <__swsetup_r+0x1e>
 8009f3c:	0758      	lsls	r0, r3, #29
 8009f3e:	d512      	bpl.n	8009f66 <__swsetup_r+0x7a>
 8009f40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f42:	b141      	cbz	r1, 8009f56 <__swsetup_r+0x6a>
 8009f44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f48:	4299      	cmp	r1, r3
 8009f4a:	d002      	beq.n	8009f52 <__swsetup_r+0x66>
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	f7ff fb6f 	bl	8009630 <_free_r>
 8009f52:	2300      	movs	r3, #0
 8009f54:	6363      	str	r3, [r4, #52]	; 0x34
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f5c:	81a3      	strh	r3, [r4, #12]
 8009f5e:	2300      	movs	r3, #0
 8009f60:	6063      	str	r3, [r4, #4]
 8009f62:	6923      	ldr	r3, [r4, #16]
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	f043 0308 	orr.w	r3, r3, #8
 8009f6c:	81a3      	strh	r3, [r4, #12]
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	b94b      	cbnz	r3, 8009f86 <__swsetup_r+0x9a>
 8009f72:	89a3      	ldrh	r3, [r4, #12]
 8009f74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f7c:	d003      	beq.n	8009f86 <__swsetup_r+0x9a>
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4630      	mov	r0, r6
 8009f82:	f000 fa07 	bl	800a394 <__smakebuf_r>
 8009f86:	89a0      	ldrh	r0, [r4, #12]
 8009f88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f8c:	f010 0301 	ands.w	r3, r0, #1
 8009f90:	d00a      	beq.n	8009fa8 <__swsetup_r+0xbc>
 8009f92:	2300      	movs	r3, #0
 8009f94:	60a3      	str	r3, [r4, #8]
 8009f96:	6963      	ldr	r3, [r4, #20]
 8009f98:	425b      	negs	r3, r3
 8009f9a:	61a3      	str	r3, [r4, #24]
 8009f9c:	6923      	ldr	r3, [r4, #16]
 8009f9e:	b943      	cbnz	r3, 8009fb2 <__swsetup_r+0xc6>
 8009fa0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fa4:	d1ba      	bne.n	8009f1c <__swsetup_r+0x30>
 8009fa6:	bd70      	pop	{r4, r5, r6, pc}
 8009fa8:	0781      	lsls	r1, r0, #30
 8009faa:	bf58      	it	pl
 8009fac:	6963      	ldrpl	r3, [r4, #20]
 8009fae:	60a3      	str	r3, [r4, #8]
 8009fb0:	e7f4      	b.n	8009f9c <__swsetup_r+0xb0>
 8009fb2:	2000      	movs	r0, #0
 8009fb4:	e7f7      	b.n	8009fa6 <__swsetup_r+0xba>
 8009fb6:	bf00      	nop
 8009fb8:	20002028 	.word	0x20002028
 8009fbc:	0800bbe4 	.word	0x0800bbe4
 8009fc0:	0800bc04 	.word	0x0800bc04
 8009fc4:	0800bbc4 	.word	0x0800bbc4

08009fc8 <abort>:
 8009fc8:	b508      	push	{r3, lr}
 8009fca:	2006      	movs	r0, #6
 8009fcc:	f000 fa52 	bl	800a474 <raise>
 8009fd0:	2001      	movs	r0, #1
 8009fd2:	f7f9 fdb1 	bl	8003b38 <_exit>
	...

08009fd8 <__sflush_r>:
 8009fd8:	898a      	ldrh	r2, [r1, #12]
 8009fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fde:	4605      	mov	r5, r0
 8009fe0:	0710      	lsls	r0, r2, #28
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	d458      	bmi.n	800a098 <__sflush_r+0xc0>
 8009fe6:	684b      	ldr	r3, [r1, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	dc05      	bgt.n	8009ff8 <__sflush_r+0x20>
 8009fec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	dc02      	bgt.n	8009ff8 <__sflush_r+0x20>
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ffa:	2e00      	cmp	r6, #0
 8009ffc:	d0f9      	beq.n	8009ff2 <__sflush_r+0x1a>
 8009ffe:	2300      	movs	r3, #0
 800a000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a004:	682f      	ldr	r7, [r5, #0]
 800a006:	602b      	str	r3, [r5, #0]
 800a008:	d032      	beq.n	800a070 <__sflush_r+0x98>
 800a00a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	075a      	lsls	r2, r3, #29
 800a010:	d505      	bpl.n	800a01e <__sflush_r+0x46>
 800a012:	6863      	ldr	r3, [r4, #4]
 800a014:	1ac0      	subs	r0, r0, r3
 800a016:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a018:	b10b      	cbz	r3, 800a01e <__sflush_r+0x46>
 800a01a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a01c:	1ac0      	subs	r0, r0, r3
 800a01e:	2300      	movs	r3, #0
 800a020:	4602      	mov	r2, r0
 800a022:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a024:	6a21      	ldr	r1, [r4, #32]
 800a026:	4628      	mov	r0, r5
 800a028:	47b0      	blx	r6
 800a02a:	1c43      	adds	r3, r0, #1
 800a02c:	89a3      	ldrh	r3, [r4, #12]
 800a02e:	d106      	bne.n	800a03e <__sflush_r+0x66>
 800a030:	6829      	ldr	r1, [r5, #0]
 800a032:	291d      	cmp	r1, #29
 800a034:	d82c      	bhi.n	800a090 <__sflush_r+0xb8>
 800a036:	4a2a      	ldr	r2, [pc, #168]	; (800a0e0 <__sflush_r+0x108>)
 800a038:	40ca      	lsrs	r2, r1
 800a03a:	07d6      	lsls	r6, r2, #31
 800a03c:	d528      	bpl.n	800a090 <__sflush_r+0xb8>
 800a03e:	2200      	movs	r2, #0
 800a040:	6062      	str	r2, [r4, #4]
 800a042:	04d9      	lsls	r1, r3, #19
 800a044:	6922      	ldr	r2, [r4, #16]
 800a046:	6022      	str	r2, [r4, #0]
 800a048:	d504      	bpl.n	800a054 <__sflush_r+0x7c>
 800a04a:	1c42      	adds	r2, r0, #1
 800a04c:	d101      	bne.n	800a052 <__sflush_r+0x7a>
 800a04e:	682b      	ldr	r3, [r5, #0]
 800a050:	b903      	cbnz	r3, 800a054 <__sflush_r+0x7c>
 800a052:	6560      	str	r0, [r4, #84]	; 0x54
 800a054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a056:	602f      	str	r7, [r5, #0]
 800a058:	2900      	cmp	r1, #0
 800a05a:	d0ca      	beq.n	8009ff2 <__sflush_r+0x1a>
 800a05c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a060:	4299      	cmp	r1, r3
 800a062:	d002      	beq.n	800a06a <__sflush_r+0x92>
 800a064:	4628      	mov	r0, r5
 800a066:	f7ff fae3 	bl	8009630 <_free_r>
 800a06a:	2000      	movs	r0, #0
 800a06c:	6360      	str	r0, [r4, #52]	; 0x34
 800a06e:	e7c1      	b.n	8009ff4 <__sflush_r+0x1c>
 800a070:	6a21      	ldr	r1, [r4, #32]
 800a072:	2301      	movs	r3, #1
 800a074:	4628      	mov	r0, r5
 800a076:	47b0      	blx	r6
 800a078:	1c41      	adds	r1, r0, #1
 800a07a:	d1c7      	bne.n	800a00c <__sflush_r+0x34>
 800a07c:	682b      	ldr	r3, [r5, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d0c4      	beq.n	800a00c <__sflush_r+0x34>
 800a082:	2b1d      	cmp	r3, #29
 800a084:	d001      	beq.n	800a08a <__sflush_r+0xb2>
 800a086:	2b16      	cmp	r3, #22
 800a088:	d101      	bne.n	800a08e <__sflush_r+0xb6>
 800a08a:	602f      	str	r7, [r5, #0]
 800a08c:	e7b1      	b.n	8009ff2 <__sflush_r+0x1a>
 800a08e:	89a3      	ldrh	r3, [r4, #12]
 800a090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a094:	81a3      	strh	r3, [r4, #12]
 800a096:	e7ad      	b.n	8009ff4 <__sflush_r+0x1c>
 800a098:	690f      	ldr	r7, [r1, #16]
 800a09a:	2f00      	cmp	r7, #0
 800a09c:	d0a9      	beq.n	8009ff2 <__sflush_r+0x1a>
 800a09e:	0793      	lsls	r3, r2, #30
 800a0a0:	680e      	ldr	r6, [r1, #0]
 800a0a2:	bf08      	it	eq
 800a0a4:	694b      	ldreq	r3, [r1, #20]
 800a0a6:	600f      	str	r7, [r1, #0]
 800a0a8:	bf18      	it	ne
 800a0aa:	2300      	movne	r3, #0
 800a0ac:	eba6 0807 	sub.w	r8, r6, r7
 800a0b0:	608b      	str	r3, [r1, #8]
 800a0b2:	f1b8 0f00 	cmp.w	r8, #0
 800a0b6:	dd9c      	ble.n	8009ff2 <__sflush_r+0x1a>
 800a0b8:	6a21      	ldr	r1, [r4, #32]
 800a0ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0bc:	4643      	mov	r3, r8
 800a0be:	463a      	mov	r2, r7
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	47b0      	blx	r6
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	dc06      	bgt.n	800a0d6 <__sflush_r+0xfe>
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ce:	81a3      	strh	r3, [r4, #12]
 800a0d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0d4:	e78e      	b.n	8009ff4 <__sflush_r+0x1c>
 800a0d6:	4407      	add	r7, r0
 800a0d8:	eba8 0800 	sub.w	r8, r8, r0
 800a0dc:	e7e9      	b.n	800a0b2 <__sflush_r+0xda>
 800a0de:	bf00      	nop
 800a0e0:	20400001 	.word	0x20400001

0800a0e4 <_fflush_r>:
 800a0e4:	b538      	push	{r3, r4, r5, lr}
 800a0e6:	690b      	ldr	r3, [r1, #16]
 800a0e8:	4605      	mov	r5, r0
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	b913      	cbnz	r3, 800a0f4 <_fflush_r+0x10>
 800a0ee:	2500      	movs	r5, #0
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	bd38      	pop	{r3, r4, r5, pc}
 800a0f4:	b118      	cbz	r0, 800a0fe <_fflush_r+0x1a>
 800a0f6:	6983      	ldr	r3, [r0, #24]
 800a0f8:	b90b      	cbnz	r3, 800a0fe <_fflush_r+0x1a>
 800a0fa:	f000 f887 	bl	800a20c <__sinit>
 800a0fe:	4b14      	ldr	r3, [pc, #80]	; (800a150 <_fflush_r+0x6c>)
 800a100:	429c      	cmp	r4, r3
 800a102:	d11b      	bne.n	800a13c <_fflush_r+0x58>
 800a104:	686c      	ldr	r4, [r5, #4]
 800a106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d0ef      	beq.n	800a0ee <_fflush_r+0xa>
 800a10e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a110:	07d0      	lsls	r0, r2, #31
 800a112:	d404      	bmi.n	800a11e <_fflush_r+0x3a>
 800a114:	0599      	lsls	r1, r3, #22
 800a116:	d402      	bmi.n	800a11e <_fflush_r+0x3a>
 800a118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a11a:	f000 f915 	bl	800a348 <__retarget_lock_acquire_recursive>
 800a11e:	4628      	mov	r0, r5
 800a120:	4621      	mov	r1, r4
 800a122:	f7ff ff59 	bl	8009fd8 <__sflush_r>
 800a126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a128:	07da      	lsls	r2, r3, #31
 800a12a:	4605      	mov	r5, r0
 800a12c:	d4e0      	bmi.n	800a0f0 <_fflush_r+0xc>
 800a12e:	89a3      	ldrh	r3, [r4, #12]
 800a130:	059b      	lsls	r3, r3, #22
 800a132:	d4dd      	bmi.n	800a0f0 <_fflush_r+0xc>
 800a134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a136:	f000 f908 	bl	800a34a <__retarget_lock_release_recursive>
 800a13a:	e7d9      	b.n	800a0f0 <_fflush_r+0xc>
 800a13c:	4b05      	ldr	r3, [pc, #20]	; (800a154 <_fflush_r+0x70>)
 800a13e:	429c      	cmp	r4, r3
 800a140:	d101      	bne.n	800a146 <_fflush_r+0x62>
 800a142:	68ac      	ldr	r4, [r5, #8]
 800a144:	e7df      	b.n	800a106 <_fflush_r+0x22>
 800a146:	4b04      	ldr	r3, [pc, #16]	; (800a158 <_fflush_r+0x74>)
 800a148:	429c      	cmp	r4, r3
 800a14a:	bf08      	it	eq
 800a14c:	68ec      	ldreq	r4, [r5, #12]
 800a14e:	e7da      	b.n	800a106 <_fflush_r+0x22>
 800a150:	0800bbe4 	.word	0x0800bbe4
 800a154:	0800bc04 	.word	0x0800bc04
 800a158:	0800bbc4 	.word	0x0800bbc4

0800a15c <std>:
 800a15c:	2300      	movs	r3, #0
 800a15e:	b510      	push	{r4, lr}
 800a160:	4604      	mov	r4, r0
 800a162:	e9c0 3300 	strd	r3, r3, [r0]
 800a166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a16a:	6083      	str	r3, [r0, #8]
 800a16c:	8181      	strh	r1, [r0, #12]
 800a16e:	6643      	str	r3, [r0, #100]	; 0x64
 800a170:	81c2      	strh	r2, [r0, #14]
 800a172:	6183      	str	r3, [r0, #24]
 800a174:	4619      	mov	r1, r3
 800a176:	2208      	movs	r2, #8
 800a178:	305c      	adds	r0, #92	; 0x5c
 800a17a:	f7fd fba7 	bl	80078cc <memset>
 800a17e:	4b05      	ldr	r3, [pc, #20]	; (800a194 <std+0x38>)
 800a180:	6263      	str	r3, [r4, #36]	; 0x24
 800a182:	4b05      	ldr	r3, [pc, #20]	; (800a198 <std+0x3c>)
 800a184:	62a3      	str	r3, [r4, #40]	; 0x28
 800a186:	4b05      	ldr	r3, [pc, #20]	; (800a19c <std+0x40>)
 800a188:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a18a:	4b05      	ldr	r3, [pc, #20]	; (800a1a0 <std+0x44>)
 800a18c:	6224      	str	r4, [r4, #32]
 800a18e:	6323      	str	r3, [r4, #48]	; 0x30
 800a190:	bd10      	pop	{r4, pc}
 800a192:	bf00      	nop
 800a194:	0800a4ad 	.word	0x0800a4ad
 800a198:	0800a4cf 	.word	0x0800a4cf
 800a19c:	0800a507 	.word	0x0800a507
 800a1a0:	0800a52b 	.word	0x0800a52b

0800a1a4 <_cleanup_r>:
 800a1a4:	4901      	ldr	r1, [pc, #4]	; (800a1ac <_cleanup_r+0x8>)
 800a1a6:	f000 b8af 	b.w	800a308 <_fwalk_reent>
 800a1aa:	bf00      	nop
 800a1ac:	0800a0e5 	.word	0x0800a0e5

0800a1b0 <__sfmoreglue>:
 800a1b0:	b570      	push	{r4, r5, r6, lr}
 800a1b2:	1e4a      	subs	r2, r1, #1
 800a1b4:	2568      	movs	r5, #104	; 0x68
 800a1b6:	4355      	muls	r5, r2
 800a1b8:	460e      	mov	r6, r1
 800a1ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a1be:	f7ff fa87 	bl	80096d0 <_malloc_r>
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	b140      	cbz	r0, 800a1d8 <__sfmoreglue+0x28>
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	e9c0 1600 	strd	r1, r6, [r0]
 800a1cc:	300c      	adds	r0, #12
 800a1ce:	60a0      	str	r0, [r4, #8]
 800a1d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a1d4:	f7fd fb7a 	bl	80078cc <memset>
 800a1d8:	4620      	mov	r0, r4
 800a1da:	bd70      	pop	{r4, r5, r6, pc}

0800a1dc <__sfp_lock_acquire>:
 800a1dc:	4801      	ldr	r0, [pc, #4]	; (800a1e4 <__sfp_lock_acquire+0x8>)
 800a1de:	f000 b8b3 	b.w	800a348 <__retarget_lock_acquire_recursive>
 800a1e2:	bf00      	nop
 800a1e4:	200044f0 	.word	0x200044f0

0800a1e8 <__sfp_lock_release>:
 800a1e8:	4801      	ldr	r0, [pc, #4]	; (800a1f0 <__sfp_lock_release+0x8>)
 800a1ea:	f000 b8ae 	b.w	800a34a <__retarget_lock_release_recursive>
 800a1ee:	bf00      	nop
 800a1f0:	200044f0 	.word	0x200044f0

0800a1f4 <__sinit_lock_acquire>:
 800a1f4:	4801      	ldr	r0, [pc, #4]	; (800a1fc <__sinit_lock_acquire+0x8>)
 800a1f6:	f000 b8a7 	b.w	800a348 <__retarget_lock_acquire_recursive>
 800a1fa:	bf00      	nop
 800a1fc:	200044eb 	.word	0x200044eb

0800a200 <__sinit_lock_release>:
 800a200:	4801      	ldr	r0, [pc, #4]	; (800a208 <__sinit_lock_release+0x8>)
 800a202:	f000 b8a2 	b.w	800a34a <__retarget_lock_release_recursive>
 800a206:	bf00      	nop
 800a208:	200044eb 	.word	0x200044eb

0800a20c <__sinit>:
 800a20c:	b510      	push	{r4, lr}
 800a20e:	4604      	mov	r4, r0
 800a210:	f7ff fff0 	bl	800a1f4 <__sinit_lock_acquire>
 800a214:	69a3      	ldr	r3, [r4, #24]
 800a216:	b11b      	cbz	r3, 800a220 <__sinit+0x14>
 800a218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a21c:	f7ff bff0 	b.w	800a200 <__sinit_lock_release>
 800a220:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a224:	6523      	str	r3, [r4, #80]	; 0x50
 800a226:	4b13      	ldr	r3, [pc, #76]	; (800a274 <__sinit+0x68>)
 800a228:	4a13      	ldr	r2, [pc, #76]	; (800a278 <__sinit+0x6c>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a22e:	42a3      	cmp	r3, r4
 800a230:	bf04      	itt	eq
 800a232:	2301      	moveq	r3, #1
 800a234:	61a3      	streq	r3, [r4, #24]
 800a236:	4620      	mov	r0, r4
 800a238:	f000 f820 	bl	800a27c <__sfp>
 800a23c:	6060      	str	r0, [r4, #4]
 800a23e:	4620      	mov	r0, r4
 800a240:	f000 f81c 	bl	800a27c <__sfp>
 800a244:	60a0      	str	r0, [r4, #8]
 800a246:	4620      	mov	r0, r4
 800a248:	f000 f818 	bl	800a27c <__sfp>
 800a24c:	2200      	movs	r2, #0
 800a24e:	60e0      	str	r0, [r4, #12]
 800a250:	2104      	movs	r1, #4
 800a252:	6860      	ldr	r0, [r4, #4]
 800a254:	f7ff ff82 	bl	800a15c <std>
 800a258:	68a0      	ldr	r0, [r4, #8]
 800a25a:	2201      	movs	r2, #1
 800a25c:	2109      	movs	r1, #9
 800a25e:	f7ff ff7d 	bl	800a15c <std>
 800a262:	68e0      	ldr	r0, [r4, #12]
 800a264:	2202      	movs	r2, #2
 800a266:	2112      	movs	r1, #18
 800a268:	f7ff ff78 	bl	800a15c <std>
 800a26c:	2301      	movs	r3, #1
 800a26e:	61a3      	str	r3, [r4, #24]
 800a270:	e7d2      	b.n	800a218 <__sinit+0xc>
 800a272:	bf00      	nop
 800a274:	0800b840 	.word	0x0800b840
 800a278:	0800a1a5 	.word	0x0800a1a5

0800a27c <__sfp>:
 800a27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27e:	4607      	mov	r7, r0
 800a280:	f7ff ffac 	bl	800a1dc <__sfp_lock_acquire>
 800a284:	4b1e      	ldr	r3, [pc, #120]	; (800a300 <__sfp+0x84>)
 800a286:	681e      	ldr	r6, [r3, #0]
 800a288:	69b3      	ldr	r3, [r6, #24]
 800a28a:	b913      	cbnz	r3, 800a292 <__sfp+0x16>
 800a28c:	4630      	mov	r0, r6
 800a28e:	f7ff ffbd 	bl	800a20c <__sinit>
 800a292:	3648      	adds	r6, #72	; 0x48
 800a294:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a298:	3b01      	subs	r3, #1
 800a29a:	d503      	bpl.n	800a2a4 <__sfp+0x28>
 800a29c:	6833      	ldr	r3, [r6, #0]
 800a29e:	b30b      	cbz	r3, 800a2e4 <__sfp+0x68>
 800a2a0:	6836      	ldr	r6, [r6, #0]
 800a2a2:	e7f7      	b.n	800a294 <__sfp+0x18>
 800a2a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a2a8:	b9d5      	cbnz	r5, 800a2e0 <__sfp+0x64>
 800a2aa:	4b16      	ldr	r3, [pc, #88]	; (800a304 <__sfp+0x88>)
 800a2ac:	60e3      	str	r3, [r4, #12]
 800a2ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2b2:	6665      	str	r5, [r4, #100]	; 0x64
 800a2b4:	f000 f847 	bl	800a346 <__retarget_lock_init_recursive>
 800a2b8:	f7ff ff96 	bl	800a1e8 <__sfp_lock_release>
 800a2bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a2c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a2c4:	6025      	str	r5, [r4, #0]
 800a2c6:	61a5      	str	r5, [r4, #24]
 800a2c8:	2208      	movs	r2, #8
 800a2ca:	4629      	mov	r1, r5
 800a2cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a2d0:	f7fd fafc 	bl	80078cc <memset>
 800a2d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a2d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a2dc:	4620      	mov	r0, r4
 800a2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2e0:	3468      	adds	r4, #104	; 0x68
 800a2e2:	e7d9      	b.n	800a298 <__sfp+0x1c>
 800a2e4:	2104      	movs	r1, #4
 800a2e6:	4638      	mov	r0, r7
 800a2e8:	f7ff ff62 	bl	800a1b0 <__sfmoreglue>
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	6030      	str	r0, [r6, #0]
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	d1d5      	bne.n	800a2a0 <__sfp+0x24>
 800a2f4:	f7ff ff78 	bl	800a1e8 <__sfp_lock_release>
 800a2f8:	230c      	movs	r3, #12
 800a2fa:	603b      	str	r3, [r7, #0]
 800a2fc:	e7ee      	b.n	800a2dc <__sfp+0x60>
 800a2fe:	bf00      	nop
 800a300:	0800b840 	.word	0x0800b840
 800a304:	ffff0001 	.word	0xffff0001

0800a308 <_fwalk_reent>:
 800a308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a30c:	4606      	mov	r6, r0
 800a30e:	4688      	mov	r8, r1
 800a310:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a314:	2700      	movs	r7, #0
 800a316:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a31a:	f1b9 0901 	subs.w	r9, r9, #1
 800a31e:	d505      	bpl.n	800a32c <_fwalk_reent+0x24>
 800a320:	6824      	ldr	r4, [r4, #0]
 800a322:	2c00      	cmp	r4, #0
 800a324:	d1f7      	bne.n	800a316 <_fwalk_reent+0xe>
 800a326:	4638      	mov	r0, r7
 800a328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a32c:	89ab      	ldrh	r3, [r5, #12]
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d907      	bls.n	800a342 <_fwalk_reent+0x3a>
 800a332:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a336:	3301      	adds	r3, #1
 800a338:	d003      	beq.n	800a342 <_fwalk_reent+0x3a>
 800a33a:	4629      	mov	r1, r5
 800a33c:	4630      	mov	r0, r6
 800a33e:	47c0      	blx	r8
 800a340:	4307      	orrs	r7, r0
 800a342:	3568      	adds	r5, #104	; 0x68
 800a344:	e7e9      	b.n	800a31a <_fwalk_reent+0x12>

0800a346 <__retarget_lock_init_recursive>:
 800a346:	4770      	bx	lr

0800a348 <__retarget_lock_acquire_recursive>:
 800a348:	4770      	bx	lr

0800a34a <__retarget_lock_release_recursive>:
 800a34a:	4770      	bx	lr

0800a34c <__swhatbuf_r>:
 800a34c:	b570      	push	{r4, r5, r6, lr}
 800a34e:	460e      	mov	r6, r1
 800a350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a354:	2900      	cmp	r1, #0
 800a356:	b096      	sub	sp, #88	; 0x58
 800a358:	4614      	mov	r4, r2
 800a35a:	461d      	mov	r5, r3
 800a35c:	da07      	bge.n	800a36e <__swhatbuf_r+0x22>
 800a35e:	2300      	movs	r3, #0
 800a360:	602b      	str	r3, [r5, #0]
 800a362:	89b3      	ldrh	r3, [r6, #12]
 800a364:	061a      	lsls	r2, r3, #24
 800a366:	d410      	bmi.n	800a38a <__swhatbuf_r+0x3e>
 800a368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a36c:	e00e      	b.n	800a38c <__swhatbuf_r+0x40>
 800a36e:	466a      	mov	r2, sp
 800a370:	f000 f902 	bl	800a578 <_fstat_r>
 800a374:	2800      	cmp	r0, #0
 800a376:	dbf2      	blt.n	800a35e <__swhatbuf_r+0x12>
 800a378:	9a01      	ldr	r2, [sp, #4]
 800a37a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a37e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a382:	425a      	negs	r2, r3
 800a384:	415a      	adcs	r2, r3
 800a386:	602a      	str	r2, [r5, #0]
 800a388:	e7ee      	b.n	800a368 <__swhatbuf_r+0x1c>
 800a38a:	2340      	movs	r3, #64	; 0x40
 800a38c:	2000      	movs	r0, #0
 800a38e:	6023      	str	r3, [r4, #0]
 800a390:	b016      	add	sp, #88	; 0x58
 800a392:	bd70      	pop	{r4, r5, r6, pc}

0800a394 <__smakebuf_r>:
 800a394:	898b      	ldrh	r3, [r1, #12]
 800a396:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a398:	079d      	lsls	r5, r3, #30
 800a39a:	4606      	mov	r6, r0
 800a39c:	460c      	mov	r4, r1
 800a39e:	d507      	bpl.n	800a3b0 <__smakebuf_r+0x1c>
 800a3a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	6123      	str	r3, [r4, #16]
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	6163      	str	r3, [r4, #20]
 800a3ac:	b002      	add	sp, #8
 800a3ae:	bd70      	pop	{r4, r5, r6, pc}
 800a3b0:	ab01      	add	r3, sp, #4
 800a3b2:	466a      	mov	r2, sp
 800a3b4:	f7ff ffca 	bl	800a34c <__swhatbuf_r>
 800a3b8:	9900      	ldr	r1, [sp, #0]
 800a3ba:	4605      	mov	r5, r0
 800a3bc:	4630      	mov	r0, r6
 800a3be:	f7ff f987 	bl	80096d0 <_malloc_r>
 800a3c2:	b948      	cbnz	r0, 800a3d8 <__smakebuf_r+0x44>
 800a3c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3c8:	059a      	lsls	r2, r3, #22
 800a3ca:	d4ef      	bmi.n	800a3ac <__smakebuf_r+0x18>
 800a3cc:	f023 0303 	bic.w	r3, r3, #3
 800a3d0:	f043 0302 	orr.w	r3, r3, #2
 800a3d4:	81a3      	strh	r3, [r4, #12]
 800a3d6:	e7e3      	b.n	800a3a0 <__smakebuf_r+0xc>
 800a3d8:	4b0d      	ldr	r3, [pc, #52]	; (800a410 <__smakebuf_r+0x7c>)
 800a3da:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3dc:	89a3      	ldrh	r3, [r4, #12]
 800a3de:	6020      	str	r0, [r4, #0]
 800a3e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3e4:	81a3      	strh	r3, [r4, #12]
 800a3e6:	9b00      	ldr	r3, [sp, #0]
 800a3e8:	6163      	str	r3, [r4, #20]
 800a3ea:	9b01      	ldr	r3, [sp, #4]
 800a3ec:	6120      	str	r0, [r4, #16]
 800a3ee:	b15b      	cbz	r3, 800a408 <__smakebuf_r+0x74>
 800a3f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3f4:	4630      	mov	r0, r6
 800a3f6:	f000 f8d1 	bl	800a59c <_isatty_r>
 800a3fa:	b128      	cbz	r0, 800a408 <__smakebuf_r+0x74>
 800a3fc:	89a3      	ldrh	r3, [r4, #12]
 800a3fe:	f023 0303 	bic.w	r3, r3, #3
 800a402:	f043 0301 	orr.w	r3, r3, #1
 800a406:	81a3      	strh	r3, [r4, #12]
 800a408:	89a0      	ldrh	r0, [r4, #12]
 800a40a:	4305      	orrs	r5, r0
 800a40c:	81a5      	strh	r5, [r4, #12]
 800a40e:	e7cd      	b.n	800a3ac <__smakebuf_r+0x18>
 800a410:	0800a1a5 	.word	0x0800a1a5

0800a414 <_malloc_usable_size_r>:
 800a414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a418:	1f18      	subs	r0, r3, #4
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	bfbc      	itt	lt
 800a41e:	580b      	ldrlt	r3, [r1, r0]
 800a420:	18c0      	addlt	r0, r0, r3
 800a422:	4770      	bx	lr

0800a424 <_raise_r>:
 800a424:	291f      	cmp	r1, #31
 800a426:	b538      	push	{r3, r4, r5, lr}
 800a428:	4604      	mov	r4, r0
 800a42a:	460d      	mov	r5, r1
 800a42c:	d904      	bls.n	800a438 <_raise_r+0x14>
 800a42e:	2316      	movs	r3, #22
 800a430:	6003      	str	r3, [r0, #0]
 800a432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a436:	bd38      	pop	{r3, r4, r5, pc}
 800a438:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a43a:	b112      	cbz	r2, 800a442 <_raise_r+0x1e>
 800a43c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a440:	b94b      	cbnz	r3, 800a456 <_raise_r+0x32>
 800a442:	4620      	mov	r0, r4
 800a444:	f000 f830 	bl	800a4a8 <_getpid_r>
 800a448:	462a      	mov	r2, r5
 800a44a:	4601      	mov	r1, r0
 800a44c:	4620      	mov	r0, r4
 800a44e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a452:	f000 b817 	b.w	800a484 <_kill_r>
 800a456:	2b01      	cmp	r3, #1
 800a458:	d00a      	beq.n	800a470 <_raise_r+0x4c>
 800a45a:	1c59      	adds	r1, r3, #1
 800a45c:	d103      	bne.n	800a466 <_raise_r+0x42>
 800a45e:	2316      	movs	r3, #22
 800a460:	6003      	str	r3, [r0, #0]
 800a462:	2001      	movs	r0, #1
 800a464:	e7e7      	b.n	800a436 <_raise_r+0x12>
 800a466:	2400      	movs	r4, #0
 800a468:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a46c:	4628      	mov	r0, r5
 800a46e:	4798      	blx	r3
 800a470:	2000      	movs	r0, #0
 800a472:	e7e0      	b.n	800a436 <_raise_r+0x12>

0800a474 <raise>:
 800a474:	4b02      	ldr	r3, [pc, #8]	; (800a480 <raise+0xc>)
 800a476:	4601      	mov	r1, r0
 800a478:	6818      	ldr	r0, [r3, #0]
 800a47a:	f7ff bfd3 	b.w	800a424 <_raise_r>
 800a47e:	bf00      	nop
 800a480:	20002028 	.word	0x20002028

0800a484 <_kill_r>:
 800a484:	b538      	push	{r3, r4, r5, lr}
 800a486:	4d07      	ldr	r5, [pc, #28]	; (800a4a4 <_kill_r+0x20>)
 800a488:	2300      	movs	r3, #0
 800a48a:	4604      	mov	r4, r0
 800a48c:	4608      	mov	r0, r1
 800a48e:	4611      	mov	r1, r2
 800a490:	602b      	str	r3, [r5, #0]
 800a492:	f7f9 fb41 	bl	8003b18 <_kill>
 800a496:	1c43      	adds	r3, r0, #1
 800a498:	d102      	bne.n	800a4a0 <_kill_r+0x1c>
 800a49a:	682b      	ldr	r3, [r5, #0]
 800a49c:	b103      	cbz	r3, 800a4a0 <_kill_r+0x1c>
 800a49e:	6023      	str	r3, [r4, #0]
 800a4a0:	bd38      	pop	{r3, r4, r5, pc}
 800a4a2:	bf00      	nop
 800a4a4:	200044e4 	.word	0x200044e4

0800a4a8 <_getpid_r>:
 800a4a8:	f7f9 bb2e 	b.w	8003b08 <_getpid>

0800a4ac <__sread>:
 800a4ac:	b510      	push	{r4, lr}
 800a4ae:	460c      	mov	r4, r1
 800a4b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4b4:	f000 f894 	bl	800a5e0 <_read_r>
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	bfab      	itete	ge
 800a4bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4be:	89a3      	ldrhlt	r3, [r4, #12]
 800a4c0:	181b      	addge	r3, r3, r0
 800a4c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4c6:	bfac      	ite	ge
 800a4c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4ca:	81a3      	strhlt	r3, [r4, #12]
 800a4cc:	bd10      	pop	{r4, pc}

0800a4ce <__swrite>:
 800a4ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d2:	461f      	mov	r7, r3
 800a4d4:	898b      	ldrh	r3, [r1, #12]
 800a4d6:	05db      	lsls	r3, r3, #23
 800a4d8:	4605      	mov	r5, r0
 800a4da:	460c      	mov	r4, r1
 800a4dc:	4616      	mov	r6, r2
 800a4de:	d505      	bpl.n	800a4ec <__swrite+0x1e>
 800a4e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e4:	2302      	movs	r3, #2
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f000 f868 	bl	800a5bc <_lseek_r>
 800a4ec:	89a3      	ldrh	r3, [r4, #12]
 800a4ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4f6:	81a3      	strh	r3, [r4, #12]
 800a4f8:	4632      	mov	r2, r6
 800a4fa:	463b      	mov	r3, r7
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a502:	f000 b817 	b.w	800a534 <_write_r>

0800a506 <__sseek>:
 800a506:	b510      	push	{r4, lr}
 800a508:	460c      	mov	r4, r1
 800a50a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a50e:	f000 f855 	bl	800a5bc <_lseek_r>
 800a512:	1c43      	adds	r3, r0, #1
 800a514:	89a3      	ldrh	r3, [r4, #12]
 800a516:	bf15      	itete	ne
 800a518:	6560      	strne	r0, [r4, #84]	; 0x54
 800a51a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a51e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a522:	81a3      	strheq	r3, [r4, #12]
 800a524:	bf18      	it	ne
 800a526:	81a3      	strhne	r3, [r4, #12]
 800a528:	bd10      	pop	{r4, pc}

0800a52a <__sclose>:
 800a52a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a52e:	f000 b813 	b.w	800a558 <_close_r>
	...

0800a534 <_write_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	4d07      	ldr	r5, [pc, #28]	; (800a554 <_write_r+0x20>)
 800a538:	4604      	mov	r4, r0
 800a53a:	4608      	mov	r0, r1
 800a53c:	4611      	mov	r1, r2
 800a53e:	2200      	movs	r2, #0
 800a540:	602a      	str	r2, [r5, #0]
 800a542:	461a      	mov	r2, r3
 800a544:	f7f9 fb1f 	bl	8003b86 <_write>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	d102      	bne.n	800a552 <_write_r+0x1e>
 800a54c:	682b      	ldr	r3, [r5, #0]
 800a54e:	b103      	cbz	r3, 800a552 <_write_r+0x1e>
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	bd38      	pop	{r3, r4, r5, pc}
 800a554:	200044e4 	.word	0x200044e4

0800a558 <_close_r>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	4d06      	ldr	r5, [pc, #24]	; (800a574 <_close_r+0x1c>)
 800a55c:	2300      	movs	r3, #0
 800a55e:	4604      	mov	r4, r0
 800a560:	4608      	mov	r0, r1
 800a562:	602b      	str	r3, [r5, #0]
 800a564:	f7f9 fb2b 	bl	8003bbe <_close>
 800a568:	1c43      	adds	r3, r0, #1
 800a56a:	d102      	bne.n	800a572 <_close_r+0x1a>
 800a56c:	682b      	ldr	r3, [r5, #0]
 800a56e:	b103      	cbz	r3, 800a572 <_close_r+0x1a>
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	bd38      	pop	{r3, r4, r5, pc}
 800a574:	200044e4 	.word	0x200044e4

0800a578 <_fstat_r>:
 800a578:	b538      	push	{r3, r4, r5, lr}
 800a57a:	4d07      	ldr	r5, [pc, #28]	; (800a598 <_fstat_r+0x20>)
 800a57c:	2300      	movs	r3, #0
 800a57e:	4604      	mov	r4, r0
 800a580:	4608      	mov	r0, r1
 800a582:	4611      	mov	r1, r2
 800a584:	602b      	str	r3, [r5, #0]
 800a586:	f7f9 fb26 	bl	8003bd6 <_fstat>
 800a58a:	1c43      	adds	r3, r0, #1
 800a58c:	d102      	bne.n	800a594 <_fstat_r+0x1c>
 800a58e:	682b      	ldr	r3, [r5, #0]
 800a590:	b103      	cbz	r3, 800a594 <_fstat_r+0x1c>
 800a592:	6023      	str	r3, [r4, #0]
 800a594:	bd38      	pop	{r3, r4, r5, pc}
 800a596:	bf00      	nop
 800a598:	200044e4 	.word	0x200044e4

0800a59c <_isatty_r>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	4d06      	ldr	r5, [pc, #24]	; (800a5b8 <_isatty_r+0x1c>)
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	4608      	mov	r0, r1
 800a5a6:	602b      	str	r3, [r5, #0]
 800a5a8:	f7f9 fb25 	bl	8003bf6 <_isatty>
 800a5ac:	1c43      	adds	r3, r0, #1
 800a5ae:	d102      	bne.n	800a5b6 <_isatty_r+0x1a>
 800a5b0:	682b      	ldr	r3, [r5, #0]
 800a5b2:	b103      	cbz	r3, 800a5b6 <_isatty_r+0x1a>
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	bd38      	pop	{r3, r4, r5, pc}
 800a5b8:	200044e4 	.word	0x200044e4

0800a5bc <_lseek_r>:
 800a5bc:	b538      	push	{r3, r4, r5, lr}
 800a5be:	4d07      	ldr	r5, [pc, #28]	; (800a5dc <_lseek_r+0x20>)
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	4608      	mov	r0, r1
 800a5c4:	4611      	mov	r1, r2
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	602a      	str	r2, [r5, #0]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	f7f9 fb1e 	bl	8003c0c <_lseek>
 800a5d0:	1c43      	adds	r3, r0, #1
 800a5d2:	d102      	bne.n	800a5da <_lseek_r+0x1e>
 800a5d4:	682b      	ldr	r3, [r5, #0]
 800a5d6:	b103      	cbz	r3, 800a5da <_lseek_r+0x1e>
 800a5d8:	6023      	str	r3, [r4, #0]
 800a5da:	bd38      	pop	{r3, r4, r5, pc}
 800a5dc:	200044e4 	.word	0x200044e4

0800a5e0 <_read_r>:
 800a5e0:	b538      	push	{r3, r4, r5, lr}
 800a5e2:	4d07      	ldr	r5, [pc, #28]	; (800a600 <_read_r+0x20>)
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	4608      	mov	r0, r1
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	602a      	str	r2, [r5, #0]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	f7f9 faac 	bl	8003b4c <_read>
 800a5f4:	1c43      	adds	r3, r0, #1
 800a5f6:	d102      	bne.n	800a5fe <_read_r+0x1e>
 800a5f8:	682b      	ldr	r3, [r5, #0]
 800a5fa:	b103      	cbz	r3, 800a5fe <_read_r+0x1e>
 800a5fc:	6023      	str	r3, [r4, #0]
 800a5fe:	bd38      	pop	{r3, r4, r5, pc}
 800a600:	200044e4 	.word	0x200044e4

0800a604 <asin>:
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	ed2d 8b02 	vpush	{d8}
 800a60a:	ec55 4b10 	vmov	r4, r5, d0
 800a60e:	f000 f873 	bl	800a6f8 <__ieee754_asin>
 800a612:	4b16      	ldr	r3, [pc, #88]	; (800a66c <asin+0x68>)
 800a614:	eeb0 8a40 	vmov.f32	s16, s0
 800a618:	eef0 8a60 	vmov.f32	s17, s1
 800a61c:	f993 3000 	ldrsb.w	r3, [r3]
 800a620:	3301      	adds	r3, #1
 800a622:	d01c      	beq.n	800a65e <asin+0x5a>
 800a624:	4622      	mov	r2, r4
 800a626:	462b      	mov	r3, r5
 800a628:	4620      	mov	r0, r4
 800a62a:	4629      	mov	r1, r5
 800a62c:	f7f6 fa86 	bl	8000b3c <__aeabi_dcmpun>
 800a630:	b9a8      	cbnz	r0, 800a65e <asin+0x5a>
 800a632:	ec45 4b10 	vmov	d0, r4, r5
 800a636:	f000 fea3 	bl	800b380 <fabs>
 800a63a:	4b0d      	ldr	r3, [pc, #52]	; (800a670 <asin+0x6c>)
 800a63c:	ec51 0b10 	vmov	r0, r1, d0
 800a640:	2200      	movs	r2, #0
 800a642:	f7f6 fa71 	bl	8000b28 <__aeabi_dcmpgt>
 800a646:	b150      	cbz	r0, 800a65e <asin+0x5a>
 800a648:	f7fd f916 	bl	8007878 <__errno>
 800a64c:	ecbd 8b02 	vpop	{d8}
 800a650:	2321      	movs	r3, #33	; 0x21
 800a652:	6003      	str	r3, [r0, #0]
 800a654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a658:	4806      	ldr	r0, [pc, #24]	; (800a674 <asin+0x70>)
 800a65a:	f000 be9d 	b.w	800b398 <nan>
 800a65e:	eeb0 0a48 	vmov.f32	s0, s16
 800a662:	eef0 0a68 	vmov.f32	s1, s17
 800a666:	ecbd 8b02 	vpop	{d8}
 800a66a:	bd38      	pop	{r3, r4, r5, pc}
 800a66c:	200021f8 	.word	0x200021f8
 800a670:	3ff00000 	.word	0x3ff00000
 800a674:	0800bab8 	.word	0x0800bab8

0800a678 <atan2>:
 800a678:	f000 ba52 	b.w	800ab20 <__ieee754_atan2>

0800a67c <fmod>:
 800a67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a67e:	ed2d 8b02 	vpush	{d8}
 800a682:	ec57 6b10 	vmov	r6, r7, d0
 800a686:	ec55 4b11 	vmov	r4, r5, d1
 800a68a:	f000 fb13 	bl	800acb4 <__ieee754_fmod>
 800a68e:	4b18      	ldr	r3, [pc, #96]	; (800a6f0 <fmod+0x74>)
 800a690:	eeb0 8a40 	vmov.f32	s16, s0
 800a694:	eef0 8a60 	vmov.f32	s17, s1
 800a698:	f993 3000 	ldrsb.w	r3, [r3]
 800a69c:	3301      	adds	r3, #1
 800a69e:	d020      	beq.n	800a6e2 <fmod+0x66>
 800a6a0:	4622      	mov	r2, r4
 800a6a2:	462b      	mov	r3, r5
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	4629      	mov	r1, r5
 800a6a8:	f7f6 fa48 	bl	8000b3c <__aeabi_dcmpun>
 800a6ac:	b9c8      	cbnz	r0, 800a6e2 <fmod+0x66>
 800a6ae:	4632      	mov	r2, r6
 800a6b0:	463b      	mov	r3, r7
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	4639      	mov	r1, r7
 800a6b6:	f7f6 fa41 	bl	8000b3c <__aeabi_dcmpun>
 800a6ba:	b990      	cbnz	r0, 800a6e2 <fmod+0x66>
 800a6bc:	2200      	movs	r2, #0
 800a6be:	2300      	movs	r3, #0
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	4629      	mov	r1, r5
 800a6c4:	f7f6 fa08 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6c8:	b158      	cbz	r0, 800a6e2 <fmod+0x66>
 800a6ca:	f7fd f8d5 	bl	8007878 <__errno>
 800a6ce:	2321      	movs	r3, #33	; 0x21
 800a6d0:	6003      	str	r3, [r0, #0]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	4619      	mov	r1, r3
 800a6da:	f7f6 f8bf 	bl	800085c <__aeabi_ddiv>
 800a6de:	ec41 0b18 	vmov	d8, r0, r1
 800a6e2:	eeb0 0a48 	vmov.f32	s0, s16
 800a6e6:	eef0 0a68 	vmov.f32	s1, s17
 800a6ea:	ecbd 8b02 	vpop	{d8}
 800a6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6f0:	200021f8 	.word	0x200021f8
 800a6f4:	00000000 	.word	0x00000000

0800a6f8 <__ieee754_asin>:
 800a6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fc:	ed2d 8b04 	vpush	{d8-d9}
 800a700:	ec55 4b10 	vmov	r4, r5, d0
 800a704:	4bcc      	ldr	r3, [pc, #816]	; (800aa38 <__ieee754_asin+0x340>)
 800a706:	b083      	sub	sp, #12
 800a708:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a70c:	4598      	cmp	r8, r3
 800a70e:	9501      	str	r5, [sp, #4]
 800a710:	dd35      	ble.n	800a77e <__ieee754_asin+0x86>
 800a712:	ee10 3a10 	vmov	r3, s0
 800a716:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800a71a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800a71e:	ea58 0303 	orrs.w	r3, r8, r3
 800a722:	d117      	bne.n	800a754 <__ieee754_asin+0x5c>
 800a724:	a3aa      	add	r3, pc, #680	; (adr r3, 800a9d0 <__ieee754_asin+0x2d8>)
 800a726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72a:	ee10 0a10 	vmov	r0, s0
 800a72e:	4629      	mov	r1, r5
 800a730:	f7f5 ff6a 	bl	8000608 <__aeabi_dmul>
 800a734:	a3a8      	add	r3, pc, #672	; (adr r3, 800a9d8 <__ieee754_asin+0x2e0>)
 800a736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73a:	4606      	mov	r6, r0
 800a73c:	460f      	mov	r7, r1
 800a73e:	4620      	mov	r0, r4
 800a740:	4629      	mov	r1, r5
 800a742:	f7f5 ff61 	bl	8000608 <__aeabi_dmul>
 800a746:	4602      	mov	r2, r0
 800a748:	460b      	mov	r3, r1
 800a74a:	4630      	mov	r0, r6
 800a74c:	4639      	mov	r1, r7
 800a74e:	f7f5 fda5 	bl	800029c <__adddf3>
 800a752:	e00b      	b.n	800a76c <__ieee754_asin+0x74>
 800a754:	ee10 2a10 	vmov	r2, s0
 800a758:	462b      	mov	r3, r5
 800a75a:	ee10 0a10 	vmov	r0, s0
 800a75e:	4629      	mov	r1, r5
 800a760:	f7f5 fd9a 	bl	8000298 <__aeabi_dsub>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	f7f6 f878 	bl	800085c <__aeabi_ddiv>
 800a76c:	4604      	mov	r4, r0
 800a76e:	460d      	mov	r5, r1
 800a770:	ec45 4b10 	vmov	d0, r4, r5
 800a774:	b003      	add	sp, #12
 800a776:	ecbd 8b04 	vpop	{d8-d9}
 800a77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77e:	4baf      	ldr	r3, [pc, #700]	; (800aa3c <__ieee754_asin+0x344>)
 800a780:	4598      	cmp	r8, r3
 800a782:	dc11      	bgt.n	800a7a8 <__ieee754_asin+0xb0>
 800a784:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a788:	f280 80ae 	bge.w	800a8e8 <__ieee754_asin+0x1f0>
 800a78c:	a394      	add	r3, pc, #592	; (adr r3, 800a9e0 <__ieee754_asin+0x2e8>)
 800a78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a792:	ee10 0a10 	vmov	r0, s0
 800a796:	4629      	mov	r1, r5
 800a798:	f7f5 fd80 	bl	800029c <__adddf3>
 800a79c:	4ba8      	ldr	r3, [pc, #672]	; (800aa40 <__ieee754_asin+0x348>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f7f6 f9c2 	bl	8000b28 <__aeabi_dcmpgt>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d1e3      	bne.n	800a770 <__ieee754_asin+0x78>
 800a7a8:	ec45 4b10 	vmov	d0, r4, r5
 800a7ac:	f000 fde8 	bl	800b380 <fabs>
 800a7b0:	49a3      	ldr	r1, [pc, #652]	; (800aa40 <__ieee754_asin+0x348>)
 800a7b2:	ec53 2b10 	vmov	r2, r3, d0
 800a7b6:	2000      	movs	r0, #0
 800a7b8:	f7f5 fd6e 	bl	8000298 <__aeabi_dsub>
 800a7bc:	4ba1      	ldr	r3, [pc, #644]	; (800aa44 <__ieee754_asin+0x34c>)
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f7f5 ff22 	bl	8000608 <__aeabi_dmul>
 800a7c4:	a388      	add	r3, pc, #544	; (adr r3, 800a9e8 <__ieee754_asin+0x2f0>)
 800a7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	460d      	mov	r5, r1
 800a7ce:	f7f5 ff1b 	bl	8000608 <__aeabi_dmul>
 800a7d2:	a387      	add	r3, pc, #540	; (adr r3, 800a9f0 <__ieee754_asin+0x2f8>)
 800a7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d8:	f7f5 fd60 	bl	800029c <__adddf3>
 800a7dc:	4622      	mov	r2, r4
 800a7de:	462b      	mov	r3, r5
 800a7e0:	f7f5 ff12 	bl	8000608 <__aeabi_dmul>
 800a7e4:	a384      	add	r3, pc, #528	; (adr r3, 800a9f8 <__ieee754_asin+0x300>)
 800a7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ea:	f7f5 fd55 	bl	8000298 <__aeabi_dsub>
 800a7ee:	4622      	mov	r2, r4
 800a7f0:	462b      	mov	r3, r5
 800a7f2:	f7f5 ff09 	bl	8000608 <__aeabi_dmul>
 800a7f6:	a382      	add	r3, pc, #520	; (adr r3, 800aa00 <__ieee754_asin+0x308>)
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	f7f5 fd4e 	bl	800029c <__adddf3>
 800a800:	4622      	mov	r2, r4
 800a802:	462b      	mov	r3, r5
 800a804:	f7f5 ff00 	bl	8000608 <__aeabi_dmul>
 800a808:	a37f      	add	r3, pc, #508	; (adr r3, 800aa08 <__ieee754_asin+0x310>)
 800a80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80e:	f7f5 fd43 	bl	8000298 <__aeabi_dsub>
 800a812:	4622      	mov	r2, r4
 800a814:	462b      	mov	r3, r5
 800a816:	f7f5 fef7 	bl	8000608 <__aeabi_dmul>
 800a81a:	a37d      	add	r3, pc, #500	; (adr r3, 800aa10 <__ieee754_asin+0x318>)
 800a81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a820:	f7f5 fd3c 	bl	800029c <__adddf3>
 800a824:	4622      	mov	r2, r4
 800a826:	462b      	mov	r3, r5
 800a828:	f7f5 feee 	bl	8000608 <__aeabi_dmul>
 800a82c:	a37a      	add	r3, pc, #488	; (adr r3, 800aa18 <__ieee754_asin+0x320>)
 800a82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a832:	ec41 0b18 	vmov	d8, r0, r1
 800a836:	4620      	mov	r0, r4
 800a838:	4629      	mov	r1, r5
 800a83a:	f7f5 fee5 	bl	8000608 <__aeabi_dmul>
 800a83e:	a378      	add	r3, pc, #480	; (adr r3, 800aa20 <__ieee754_asin+0x328>)
 800a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a844:	f7f5 fd28 	bl	8000298 <__aeabi_dsub>
 800a848:	4622      	mov	r2, r4
 800a84a:	462b      	mov	r3, r5
 800a84c:	f7f5 fedc 	bl	8000608 <__aeabi_dmul>
 800a850:	a375      	add	r3, pc, #468	; (adr r3, 800aa28 <__ieee754_asin+0x330>)
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	f7f5 fd21 	bl	800029c <__adddf3>
 800a85a:	4622      	mov	r2, r4
 800a85c:	462b      	mov	r3, r5
 800a85e:	f7f5 fed3 	bl	8000608 <__aeabi_dmul>
 800a862:	a373      	add	r3, pc, #460	; (adr r3, 800aa30 <__ieee754_asin+0x338>)
 800a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a868:	f7f5 fd16 	bl	8000298 <__aeabi_dsub>
 800a86c:	4622      	mov	r2, r4
 800a86e:	462b      	mov	r3, r5
 800a870:	f7f5 feca 	bl	8000608 <__aeabi_dmul>
 800a874:	4b72      	ldr	r3, [pc, #456]	; (800aa40 <__ieee754_asin+0x348>)
 800a876:	2200      	movs	r2, #0
 800a878:	f7f5 fd10 	bl	800029c <__adddf3>
 800a87c:	ec45 4b10 	vmov	d0, r4, r5
 800a880:	4606      	mov	r6, r0
 800a882:	460f      	mov	r7, r1
 800a884:	f000 fb28 	bl	800aed8 <__ieee754_sqrt>
 800a888:	4b6f      	ldr	r3, [pc, #444]	; (800aa48 <__ieee754_asin+0x350>)
 800a88a:	4598      	cmp	r8, r3
 800a88c:	ec5b ab10 	vmov	sl, fp, d0
 800a890:	f340 80dc 	ble.w	800aa4c <__ieee754_asin+0x354>
 800a894:	4632      	mov	r2, r6
 800a896:	463b      	mov	r3, r7
 800a898:	ec51 0b18 	vmov	r0, r1, d8
 800a89c:	f7f5 ffde 	bl	800085c <__aeabi_ddiv>
 800a8a0:	4652      	mov	r2, sl
 800a8a2:	465b      	mov	r3, fp
 800a8a4:	f7f5 feb0 	bl	8000608 <__aeabi_dmul>
 800a8a8:	4652      	mov	r2, sl
 800a8aa:	465b      	mov	r3, fp
 800a8ac:	f7f5 fcf6 	bl	800029c <__adddf3>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	f7f5 fcf2 	bl	800029c <__adddf3>
 800a8b8:	a347      	add	r3, pc, #284	; (adr r3, 800a9d8 <__ieee754_asin+0x2e0>)
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	f7f5 fceb 	bl	8000298 <__aeabi_dsub>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	a142      	add	r1, pc, #264	; (adr r1, 800a9d0 <__ieee754_asin+0x2d8>)
 800a8c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8cc:	f7f5 fce4 	bl	8000298 <__aeabi_dsub>
 800a8d0:	9b01      	ldr	r3, [sp, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	bfdc      	itt	le
 800a8d6:	4602      	movle	r2, r0
 800a8d8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800a8dc:	4604      	mov	r4, r0
 800a8de:	460d      	mov	r5, r1
 800a8e0:	bfdc      	itt	le
 800a8e2:	4614      	movle	r4, r2
 800a8e4:	461d      	movle	r5, r3
 800a8e6:	e743      	b.n	800a770 <__ieee754_asin+0x78>
 800a8e8:	ee10 2a10 	vmov	r2, s0
 800a8ec:	ee10 0a10 	vmov	r0, s0
 800a8f0:	462b      	mov	r3, r5
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	f7f5 fe88 	bl	8000608 <__aeabi_dmul>
 800a8f8:	a33b      	add	r3, pc, #236	; (adr r3, 800a9e8 <__ieee754_asin+0x2f0>)
 800a8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fe:	4606      	mov	r6, r0
 800a900:	460f      	mov	r7, r1
 800a902:	f7f5 fe81 	bl	8000608 <__aeabi_dmul>
 800a906:	a33a      	add	r3, pc, #232	; (adr r3, 800a9f0 <__ieee754_asin+0x2f8>)
 800a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90c:	f7f5 fcc6 	bl	800029c <__adddf3>
 800a910:	4632      	mov	r2, r6
 800a912:	463b      	mov	r3, r7
 800a914:	f7f5 fe78 	bl	8000608 <__aeabi_dmul>
 800a918:	a337      	add	r3, pc, #220	; (adr r3, 800a9f8 <__ieee754_asin+0x300>)
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	f7f5 fcbb 	bl	8000298 <__aeabi_dsub>
 800a922:	4632      	mov	r2, r6
 800a924:	463b      	mov	r3, r7
 800a926:	f7f5 fe6f 	bl	8000608 <__aeabi_dmul>
 800a92a:	a335      	add	r3, pc, #212	; (adr r3, 800aa00 <__ieee754_asin+0x308>)
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	f7f5 fcb4 	bl	800029c <__adddf3>
 800a934:	4632      	mov	r2, r6
 800a936:	463b      	mov	r3, r7
 800a938:	f7f5 fe66 	bl	8000608 <__aeabi_dmul>
 800a93c:	a332      	add	r3, pc, #200	; (adr r3, 800aa08 <__ieee754_asin+0x310>)
 800a93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a942:	f7f5 fca9 	bl	8000298 <__aeabi_dsub>
 800a946:	4632      	mov	r2, r6
 800a948:	463b      	mov	r3, r7
 800a94a:	f7f5 fe5d 	bl	8000608 <__aeabi_dmul>
 800a94e:	a330      	add	r3, pc, #192	; (adr r3, 800aa10 <__ieee754_asin+0x318>)
 800a950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a954:	f7f5 fca2 	bl	800029c <__adddf3>
 800a958:	4632      	mov	r2, r6
 800a95a:	463b      	mov	r3, r7
 800a95c:	f7f5 fe54 	bl	8000608 <__aeabi_dmul>
 800a960:	a32d      	add	r3, pc, #180	; (adr r3, 800aa18 <__ieee754_asin+0x320>)
 800a962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a966:	4680      	mov	r8, r0
 800a968:	4689      	mov	r9, r1
 800a96a:	4630      	mov	r0, r6
 800a96c:	4639      	mov	r1, r7
 800a96e:	f7f5 fe4b 	bl	8000608 <__aeabi_dmul>
 800a972:	a32b      	add	r3, pc, #172	; (adr r3, 800aa20 <__ieee754_asin+0x328>)
 800a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a978:	f7f5 fc8e 	bl	8000298 <__aeabi_dsub>
 800a97c:	4632      	mov	r2, r6
 800a97e:	463b      	mov	r3, r7
 800a980:	f7f5 fe42 	bl	8000608 <__aeabi_dmul>
 800a984:	a328      	add	r3, pc, #160	; (adr r3, 800aa28 <__ieee754_asin+0x330>)
 800a986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98a:	f7f5 fc87 	bl	800029c <__adddf3>
 800a98e:	4632      	mov	r2, r6
 800a990:	463b      	mov	r3, r7
 800a992:	f7f5 fe39 	bl	8000608 <__aeabi_dmul>
 800a996:	a326      	add	r3, pc, #152	; (adr r3, 800aa30 <__ieee754_asin+0x338>)
 800a998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99c:	f7f5 fc7c 	bl	8000298 <__aeabi_dsub>
 800a9a0:	4632      	mov	r2, r6
 800a9a2:	463b      	mov	r3, r7
 800a9a4:	f7f5 fe30 	bl	8000608 <__aeabi_dmul>
 800a9a8:	4b25      	ldr	r3, [pc, #148]	; (800aa40 <__ieee754_asin+0x348>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f7f5 fc76 	bl	800029c <__adddf3>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4640      	mov	r0, r8
 800a9b6:	4649      	mov	r1, r9
 800a9b8:	f7f5 ff50 	bl	800085c <__aeabi_ddiv>
 800a9bc:	4622      	mov	r2, r4
 800a9be:	462b      	mov	r3, r5
 800a9c0:	f7f5 fe22 	bl	8000608 <__aeabi_dmul>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	e6bf      	b.n	800a74e <__ieee754_asin+0x56>
 800a9ce:	bf00      	nop
 800a9d0:	54442d18 	.word	0x54442d18
 800a9d4:	3ff921fb 	.word	0x3ff921fb
 800a9d8:	33145c07 	.word	0x33145c07
 800a9dc:	3c91a626 	.word	0x3c91a626
 800a9e0:	8800759c 	.word	0x8800759c
 800a9e4:	7e37e43c 	.word	0x7e37e43c
 800a9e8:	0dfdf709 	.word	0x0dfdf709
 800a9ec:	3f023de1 	.word	0x3f023de1
 800a9f0:	7501b288 	.word	0x7501b288
 800a9f4:	3f49efe0 	.word	0x3f49efe0
 800a9f8:	b5688f3b 	.word	0xb5688f3b
 800a9fc:	3fa48228 	.word	0x3fa48228
 800aa00:	0e884455 	.word	0x0e884455
 800aa04:	3fc9c155 	.word	0x3fc9c155
 800aa08:	03eb6f7d 	.word	0x03eb6f7d
 800aa0c:	3fd4d612 	.word	0x3fd4d612
 800aa10:	55555555 	.word	0x55555555
 800aa14:	3fc55555 	.word	0x3fc55555
 800aa18:	b12e9282 	.word	0xb12e9282
 800aa1c:	3fb3b8c5 	.word	0x3fb3b8c5
 800aa20:	1b8d0159 	.word	0x1b8d0159
 800aa24:	3fe6066c 	.word	0x3fe6066c
 800aa28:	9c598ac8 	.word	0x9c598ac8
 800aa2c:	40002ae5 	.word	0x40002ae5
 800aa30:	1c8a2d4b 	.word	0x1c8a2d4b
 800aa34:	40033a27 	.word	0x40033a27
 800aa38:	3fefffff 	.word	0x3fefffff
 800aa3c:	3fdfffff 	.word	0x3fdfffff
 800aa40:	3ff00000 	.word	0x3ff00000
 800aa44:	3fe00000 	.word	0x3fe00000
 800aa48:	3fef3332 	.word	0x3fef3332
 800aa4c:	ee10 2a10 	vmov	r2, s0
 800aa50:	ee10 0a10 	vmov	r0, s0
 800aa54:	465b      	mov	r3, fp
 800aa56:	4659      	mov	r1, fp
 800aa58:	f7f5 fc20 	bl	800029c <__adddf3>
 800aa5c:	4632      	mov	r2, r6
 800aa5e:	463b      	mov	r3, r7
 800aa60:	ec41 0b19 	vmov	d9, r0, r1
 800aa64:	ec51 0b18 	vmov	r0, r1, d8
 800aa68:	f7f5 fef8 	bl	800085c <__aeabi_ddiv>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	460b      	mov	r3, r1
 800aa70:	ec51 0b19 	vmov	r0, r1, d9
 800aa74:	f7f5 fdc8 	bl	8000608 <__aeabi_dmul>
 800aa78:	f04f 0800 	mov.w	r8, #0
 800aa7c:	4606      	mov	r6, r0
 800aa7e:	460f      	mov	r7, r1
 800aa80:	4642      	mov	r2, r8
 800aa82:	465b      	mov	r3, fp
 800aa84:	4640      	mov	r0, r8
 800aa86:	4659      	mov	r1, fp
 800aa88:	f7f5 fdbe 	bl	8000608 <__aeabi_dmul>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	460b      	mov	r3, r1
 800aa90:	4620      	mov	r0, r4
 800aa92:	4629      	mov	r1, r5
 800aa94:	f7f5 fc00 	bl	8000298 <__aeabi_dsub>
 800aa98:	4642      	mov	r2, r8
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	460d      	mov	r5, r1
 800aa9e:	465b      	mov	r3, fp
 800aaa0:	4650      	mov	r0, sl
 800aaa2:	4659      	mov	r1, fp
 800aaa4:	f7f5 fbfa 	bl	800029c <__adddf3>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	460b      	mov	r3, r1
 800aaac:	4620      	mov	r0, r4
 800aaae:	4629      	mov	r1, r5
 800aab0:	f7f5 fed4 	bl	800085c <__aeabi_ddiv>
 800aab4:	4602      	mov	r2, r0
 800aab6:	460b      	mov	r3, r1
 800aab8:	f7f5 fbf0 	bl	800029c <__adddf3>
 800aabc:	4602      	mov	r2, r0
 800aabe:	460b      	mov	r3, r1
 800aac0:	a113      	add	r1, pc, #76	; (adr r1, 800ab10 <__ieee754_asin+0x418>)
 800aac2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aac6:	f7f5 fbe7 	bl	8000298 <__aeabi_dsub>
 800aaca:	4602      	mov	r2, r0
 800aacc:	460b      	mov	r3, r1
 800aace:	4630      	mov	r0, r6
 800aad0:	4639      	mov	r1, r7
 800aad2:	f7f5 fbe1 	bl	8000298 <__aeabi_dsub>
 800aad6:	4642      	mov	r2, r8
 800aad8:	4604      	mov	r4, r0
 800aada:	460d      	mov	r5, r1
 800aadc:	465b      	mov	r3, fp
 800aade:	4640      	mov	r0, r8
 800aae0:	4659      	mov	r1, fp
 800aae2:	f7f5 fbdb 	bl	800029c <__adddf3>
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	a10b      	add	r1, pc, #44	; (adr r1, 800ab18 <__ieee754_asin+0x420>)
 800aaec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaf0:	f7f5 fbd2 	bl	8000298 <__aeabi_dsub>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4620      	mov	r0, r4
 800aafa:	4629      	mov	r1, r5
 800aafc:	f7f5 fbcc 	bl	8000298 <__aeabi_dsub>
 800ab00:	4602      	mov	r2, r0
 800ab02:	460b      	mov	r3, r1
 800ab04:	a104      	add	r1, pc, #16	; (adr r1, 800ab18 <__ieee754_asin+0x420>)
 800ab06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab0a:	e6df      	b.n	800a8cc <__ieee754_asin+0x1d4>
 800ab0c:	f3af 8000 	nop.w
 800ab10:	33145c07 	.word	0x33145c07
 800ab14:	3c91a626 	.word	0x3c91a626
 800ab18:	54442d18 	.word	0x54442d18
 800ab1c:	3fe921fb 	.word	0x3fe921fb

0800ab20 <__ieee754_atan2>:
 800ab20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab24:	ec57 6b11 	vmov	r6, r7, d1
 800ab28:	4273      	negs	r3, r6
 800ab2a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800acb0 <__ieee754_atan2+0x190>
 800ab2e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ab32:	4333      	orrs	r3, r6
 800ab34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ab38:	4573      	cmp	r3, lr
 800ab3a:	ec51 0b10 	vmov	r0, r1, d0
 800ab3e:	ee11 8a10 	vmov	r8, s2
 800ab42:	d80a      	bhi.n	800ab5a <__ieee754_atan2+0x3a>
 800ab44:	4244      	negs	r4, r0
 800ab46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab4a:	4304      	orrs	r4, r0
 800ab4c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ab50:	4574      	cmp	r4, lr
 800ab52:	ee10 9a10 	vmov	r9, s0
 800ab56:	468c      	mov	ip, r1
 800ab58:	d907      	bls.n	800ab6a <__ieee754_atan2+0x4a>
 800ab5a:	4632      	mov	r2, r6
 800ab5c:	463b      	mov	r3, r7
 800ab5e:	f7f5 fb9d 	bl	800029c <__adddf3>
 800ab62:	ec41 0b10 	vmov	d0, r0, r1
 800ab66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab6a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ab6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ab72:	4334      	orrs	r4, r6
 800ab74:	d103      	bne.n	800ab7e <__ieee754_atan2+0x5e>
 800ab76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab7a:	f000 ba61 	b.w	800b040 <atan>
 800ab7e:	17bc      	asrs	r4, r7, #30
 800ab80:	f004 0402 	and.w	r4, r4, #2
 800ab84:	ea53 0909 	orrs.w	r9, r3, r9
 800ab88:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ab8c:	d107      	bne.n	800ab9e <__ieee754_atan2+0x7e>
 800ab8e:	2c02      	cmp	r4, #2
 800ab90:	d060      	beq.n	800ac54 <__ieee754_atan2+0x134>
 800ab92:	2c03      	cmp	r4, #3
 800ab94:	d1e5      	bne.n	800ab62 <__ieee754_atan2+0x42>
 800ab96:	a142      	add	r1, pc, #264	; (adr r1, 800aca0 <__ieee754_atan2+0x180>)
 800ab98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab9c:	e7e1      	b.n	800ab62 <__ieee754_atan2+0x42>
 800ab9e:	ea52 0808 	orrs.w	r8, r2, r8
 800aba2:	d106      	bne.n	800abb2 <__ieee754_atan2+0x92>
 800aba4:	f1bc 0f00 	cmp.w	ip, #0
 800aba8:	da5f      	bge.n	800ac6a <__ieee754_atan2+0x14a>
 800abaa:	a13f      	add	r1, pc, #252	; (adr r1, 800aca8 <__ieee754_atan2+0x188>)
 800abac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abb0:	e7d7      	b.n	800ab62 <__ieee754_atan2+0x42>
 800abb2:	4572      	cmp	r2, lr
 800abb4:	d10f      	bne.n	800abd6 <__ieee754_atan2+0xb6>
 800abb6:	4293      	cmp	r3, r2
 800abb8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800abbc:	d107      	bne.n	800abce <__ieee754_atan2+0xae>
 800abbe:	2c02      	cmp	r4, #2
 800abc0:	d84c      	bhi.n	800ac5c <__ieee754_atan2+0x13c>
 800abc2:	4b35      	ldr	r3, [pc, #212]	; (800ac98 <__ieee754_atan2+0x178>)
 800abc4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800abc8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800abcc:	e7c9      	b.n	800ab62 <__ieee754_atan2+0x42>
 800abce:	2c02      	cmp	r4, #2
 800abd0:	d848      	bhi.n	800ac64 <__ieee754_atan2+0x144>
 800abd2:	4b32      	ldr	r3, [pc, #200]	; (800ac9c <__ieee754_atan2+0x17c>)
 800abd4:	e7f6      	b.n	800abc4 <__ieee754_atan2+0xa4>
 800abd6:	4573      	cmp	r3, lr
 800abd8:	d0e4      	beq.n	800aba4 <__ieee754_atan2+0x84>
 800abda:	1a9b      	subs	r3, r3, r2
 800abdc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800abe0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800abe4:	da1e      	bge.n	800ac24 <__ieee754_atan2+0x104>
 800abe6:	2f00      	cmp	r7, #0
 800abe8:	da01      	bge.n	800abee <__ieee754_atan2+0xce>
 800abea:	323c      	adds	r2, #60	; 0x3c
 800abec:	db1e      	blt.n	800ac2c <__ieee754_atan2+0x10c>
 800abee:	4632      	mov	r2, r6
 800abf0:	463b      	mov	r3, r7
 800abf2:	f7f5 fe33 	bl	800085c <__aeabi_ddiv>
 800abf6:	ec41 0b10 	vmov	d0, r0, r1
 800abfa:	f000 fbc1 	bl	800b380 <fabs>
 800abfe:	f000 fa1f 	bl	800b040 <atan>
 800ac02:	ec51 0b10 	vmov	r0, r1, d0
 800ac06:	2c01      	cmp	r4, #1
 800ac08:	d013      	beq.n	800ac32 <__ieee754_atan2+0x112>
 800ac0a:	2c02      	cmp	r4, #2
 800ac0c:	d015      	beq.n	800ac3a <__ieee754_atan2+0x11a>
 800ac0e:	2c00      	cmp	r4, #0
 800ac10:	d0a7      	beq.n	800ab62 <__ieee754_atan2+0x42>
 800ac12:	a319      	add	r3, pc, #100	; (adr r3, 800ac78 <__ieee754_atan2+0x158>)
 800ac14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac18:	f7f5 fb3e 	bl	8000298 <__aeabi_dsub>
 800ac1c:	a318      	add	r3, pc, #96	; (adr r3, 800ac80 <__ieee754_atan2+0x160>)
 800ac1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac22:	e014      	b.n	800ac4e <__ieee754_atan2+0x12e>
 800ac24:	a118      	add	r1, pc, #96	; (adr r1, 800ac88 <__ieee754_atan2+0x168>)
 800ac26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac2a:	e7ec      	b.n	800ac06 <__ieee754_atan2+0xe6>
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	2100      	movs	r1, #0
 800ac30:	e7e9      	b.n	800ac06 <__ieee754_atan2+0xe6>
 800ac32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac36:	4619      	mov	r1, r3
 800ac38:	e793      	b.n	800ab62 <__ieee754_atan2+0x42>
 800ac3a:	a30f      	add	r3, pc, #60	; (adr r3, 800ac78 <__ieee754_atan2+0x158>)
 800ac3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac40:	f7f5 fb2a 	bl	8000298 <__aeabi_dsub>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	a10d      	add	r1, pc, #52	; (adr r1, 800ac80 <__ieee754_atan2+0x160>)
 800ac4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac4e:	f7f5 fb23 	bl	8000298 <__aeabi_dsub>
 800ac52:	e786      	b.n	800ab62 <__ieee754_atan2+0x42>
 800ac54:	a10a      	add	r1, pc, #40	; (adr r1, 800ac80 <__ieee754_atan2+0x160>)
 800ac56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac5a:	e782      	b.n	800ab62 <__ieee754_atan2+0x42>
 800ac5c:	a10c      	add	r1, pc, #48	; (adr r1, 800ac90 <__ieee754_atan2+0x170>)
 800ac5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac62:	e77e      	b.n	800ab62 <__ieee754_atan2+0x42>
 800ac64:	2000      	movs	r0, #0
 800ac66:	2100      	movs	r1, #0
 800ac68:	e77b      	b.n	800ab62 <__ieee754_atan2+0x42>
 800ac6a:	a107      	add	r1, pc, #28	; (adr r1, 800ac88 <__ieee754_atan2+0x168>)
 800ac6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac70:	e777      	b.n	800ab62 <__ieee754_atan2+0x42>
 800ac72:	bf00      	nop
 800ac74:	f3af 8000 	nop.w
 800ac78:	33145c07 	.word	0x33145c07
 800ac7c:	3ca1a626 	.word	0x3ca1a626
 800ac80:	54442d18 	.word	0x54442d18
 800ac84:	400921fb 	.word	0x400921fb
 800ac88:	54442d18 	.word	0x54442d18
 800ac8c:	3ff921fb 	.word	0x3ff921fb
 800ac90:	54442d18 	.word	0x54442d18
 800ac94:	3fe921fb 	.word	0x3fe921fb
 800ac98:	0800bc28 	.word	0x0800bc28
 800ac9c:	0800bc40 	.word	0x0800bc40
 800aca0:	54442d18 	.word	0x54442d18
 800aca4:	c00921fb 	.word	0xc00921fb
 800aca8:	54442d18 	.word	0x54442d18
 800acac:	bff921fb 	.word	0xbff921fb
 800acb0:	7ff00000 	.word	0x7ff00000

0800acb4 <__ieee754_fmod>:
 800acb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb8:	ec53 2b11 	vmov	r2, r3, d1
 800acbc:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800acc0:	ea5e 0402 	orrs.w	r4, lr, r2
 800acc4:	ec51 0b10 	vmov	r0, r1, d0
 800acc8:	ee11 7a10 	vmov	r7, s2
 800accc:	ee11 ca10 	vmov	ip, s2
 800acd0:	461e      	mov	r6, r3
 800acd2:	d00d      	beq.n	800acf0 <__ieee754_fmod+0x3c>
 800acd4:	4c7a      	ldr	r4, [pc, #488]	; (800aec0 <__ieee754_fmod+0x20c>)
 800acd6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800acda:	45a0      	cmp	r8, r4
 800acdc:	4689      	mov	r9, r1
 800acde:	dc07      	bgt.n	800acf0 <__ieee754_fmod+0x3c>
 800ace0:	4254      	negs	r4, r2
 800ace2:	4d78      	ldr	r5, [pc, #480]	; (800aec4 <__ieee754_fmod+0x210>)
 800ace4:	4314      	orrs	r4, r2
 800ace6:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800acea:	42ac      	cmp	r4, r5
 800acec:	46ab      	mov	fp, r5
 800acee:	d909      	bls.n	800ad04 <__ieee754_fmod+0x50>
 800acf0:	f7f5 fc8a 	bl	8000608 <__aeabi_dmul>
 800acf4:	4602      	mov	r2, r0
 800acf6:	460b      	mov	r3, r1
 800acf8:	f7f5 fdb0 	bl	800085c <__aeabi_ddiv>
 800acfc:	ec41 0b10 	vmov	d0, r0, r1
 800ad00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad04:	45f0      	cmp	r8, lr
 800ad06:	ee10 aa10 	vmov	sl, s0
 800ad0a:	ee10 4a10 	vmov	r4, s0
 800ad0e:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800ad12:	dc0a      	bgt.n	800ad2a <__ieee754_fmod+0x76>
 800ad14:	dbf2      	blt.n	800acfc <__ieee754_fmod+0x48>
 800ad16:	4290      	cmp	r0, r2
 800ad18:	d3f0      	bcc.n	800acfc <__ieee754_fmod+0x48>
 800ad1a:	d106      	bne.n	800ad2a <__ieee754_fmod+0x76>
 800ad1c:	4a6a      	ldr	r2, [pc, #424]	; (800aec8 <__ieee754_fmod+0x214>)
 800ad1e:	0fed      	lsrs	r5, r5, #31
 800ad20:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ad24:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ad28:	e7e8      	b.n	800acfc <__ieee754_fmod+0x48>
 800ad2a:	ea19 0f0b 	tst.w	r9, fp
 800ad2e:	d14a      	bne.n	800adc6 <__ieee754_fmod+0x112>
 800ad30:	f1b8 0f00 	cmp.w	r8, #0
 800ad34:	d13f      	bne.n	800adb6 <__ieee754_fmod+0x102>
 800ad36:	4965      	ldr	r1, [pc, #404]	; (800aecc <__ieee754_fmod+0x218>)
 800ad38:	4653      	mov	r3, sl
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	dc38      	bgt.n	800adb0 <__ieee754_fmod+0xfc>
 800ad3e:	4b61      	ldr	r3, [pc, #388]	; (800aec4 <__ieee754_fmod+0x210>)
 800ad40:	4033      	ands	r3, r6
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d14f      	bne.n	800ade6 <__ieee754_fmod+0x132>
 800ad46:	f1be 0f00 	cmp.w	lr, #0
 800ad4a:	d144      	bne.n	800add6 <__ieee754_fmod+0x122>
 800ad4c:	4a5f      	ldr	r2, [pc, #380]	; (800aecc <__ieee754_fmod+0x218>)
 800ad4e:	463b      	mov	r3, r7
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	dc3d      	bgt.n	800add0 <__ieee754_fmod+0x11c>
 800ad54:	4b5e      	ldr	r3, [pc, #376]	; (800aed0 <__ieee754_fmod+0x21c>)
 800ad56:	4299      	cmp	r1, r3
 800ad58:	db4a      	blt.n	800adf0 <__ieee754_fmod+0x13c>
 800ad5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad62:	485b      	ldr	r0, [pc, #364]	; (800aed0 <__ieee754_fmod+0x21c>)
 800ad64:	4282      	cmp	r2, r0
 800ad66:	db57      	blt.n	800ae18 <__ieee754_fmod+0x164>
 800ad68:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800ad6c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800ad70:	1a89      	subs	r1, r1, r2
 800ad72:	1b98      	subs	r0, r3, r6
 800ad74:	eba4 070c 	sub.w	r7, r4, ip
 800ad78:	2900      	cmp	r1, #0
 800ad7a:	d164      	bne.n	800ae46 <__ieee754_fmod+0x192>
 800ad7c:	4564      	cmp	r4, ip
 800ad7e:	bf38      	it	cc
 800ad80:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800ad84:	2800      	cmp	r0, #0
 800ad86:	bfa4      	itt	ge
 800ad88:	463c      	movge	r4, r7
 800ad8a:	4603      	movge	r3, r0
 800ad8c:	ea53 0104 	orrs.w	r1, r3, r4
 800ad90:	d0c4      	beq.n	800ad1c <__ieee754_fmod+0x68>
 800ad92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad96:	db6b      	blt.n	800ae70 <__ieee754_fmod+0x1bc>
 800ad98:	494d      	ldr	r1, [pc, #308]	; (800aed0 <__ieee754_fmod+0x21c>)
 800ad9a:	428a      	cmp	r2, r1
 800ad9c:	db6e      	blt.n	800ae7c <__ieee754_fmod+0x1c8>
 800ad9e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ada2:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800ada6:	431d      	orrs	r5, r3
 800ada8:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800adac:	4620      	mov	r0, r4
 800adae:	e7a5      	b.n	800acfc <__ieee754_fmod+0x48>
 800adb0:	3901      	subs	r1, #1
 800adb2:	005b      	lsls	r3, r3, #1
 800adb4:	e7c1      	b.n	800ad3a <__ieee754_fmod+0x86>
 800adb6:	4946      	ldr	r1, [pc, #280]	; (800aed0 <__ieee754_fmod+0x21c>)
 800adb8:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	ddbe      	ble.n	800ad3e <__ieee754_fmod+0x8a>
 800adc0:	3901      	subs	r1, #1
 800adc2:	005b      	lsls	r3, r3, #1
 800adc4:	e7fa      	b.n	800adbc <__ieee754_fmod+0x108>
 800adc6:	ea4f 5128 	mov.w	r1, r8, asr #20
 800adca:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800adce:	e7b6      	b.n	800ad3e <__ieee754_fmod+0x8a>
 800add0:	3a01      	subs	r2, #1
 800add2:	005b      	lsls	r3, r3, #1
 800add4:	e7bc      	b.n	800ad50 <__ieee754_fmod+0x9c>
 800add6:	4a3e      	ldr	r2, [pc, #248]	; (800aed0 <__ieee754_fmod+0x21c>)
 800add8:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800addc:	2b00      	cmp	r3, #0
 800adde:	ddb9      	ble.n	800ad54 <__ieee754_fmod+0xa0>
 800ade0:	3a01      	subs	r2, #1
 800ade2:	005b      	lsls	r3, r3, #1
 800ade4:	e7fa      	b.n	800addc <__ieee754_fmod+0x128>
 800ade6:	ea4f 522e 	mov.w	r2, lr, asr #20
 800adea:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800adee:	e7b1      	b.n	800ad54 <__ieee754_fmod+0xa0>
 800adf0:	1a5c      	subs	r4, r3, r1
 800adf2:	2c1f      	cmp	r4, #31
 800adf4:	dc0a      	bgt.n	800ae0c <__ieee754_fmod+0x158>
 800adf6:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800adfa:	fa08 f804 	lsl.w	r8, r8, r4
 800adfe:	fa2a f303 	lsr.w	r3, sl, r3
 800ae02:	ea43 0308 	orr.w	r3, r3, r8
 800ae06:	fa0a f404 	lsl.w	r4, sl, r4
 800ae0a:	e7aa      	b.n	800ad62 <__ieee754_fmod+0xae>
 800ae0c:	4b31      	ldr	r3, [pc, #196]	; (800aed4 <__ieee754_fmod+0x220>)
 800ae0e:	1a5b      	subs	r3, r3, r1
 800ae10:	fa0a f303 	lsl.w	r3, sl, r3
 800ae14:	2400      	movs	r4, #0
 800ae16:	e7a4      	b.n	800ad62 <__ieee754_fmod+0xae>
 800ae18:	eba0 0c02 	sub.w	ip, r0, r2
 800ae1c:	f1bc 0f1f 	cmp.w	ip, #31
 800ae20:	dc0a      	bgt.n	800ae38 <__ieee754_fmod+0x184>
 800ae22:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800ae26:	fa0e fe0c 	lsl.w	lr, lr, ip
 800ae2a:	fa27 f606 	lsr.w	r6, r7, r6
 800ae2e:	ea46 060e 	orr.w	r6, r6, lr
 800ae32:	fa07 fc0c 	lsl.w	ip, r7, ip
 800ae36:	e79b      	b.n	800ad70 <__ieee754_fmod+0xbc>
 800ae38:	4e26      	ldr	r6, [pc, #152]	; (800aed4 <__ieee754_fmod+0x220>)
 800ae3a:	1ab6      	subs	r6, r6, r2
 800ae3c:	fa07 f606 	lsl.w	r6, r7, r6
 800ae40:	f04f 0c00 	mov.w	ip, #0
 800ae44:	e794      	b.n	800ad70 <__ieee754_fmod+0xbc>
 800ae46:	4564      	cmp	r4, ip
 800ae48:	bf38      	it	cc
 800ae4a:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	da05      	bge.n	800ae5e <__ieee754_fmod+0x1aa>
 800ae52:	0fe0      	lsrs	r0, r4, #31
 800ae54:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ae58:	0064      	lsls	r4, r4, #1
 800ae5a:	3901      	subs	r1, #1
 800ae5c:	e789      	b.n	800ad72 <__ieee754_fmod+0xbe>
 800ae5e:	ea50 0307 	orrs.w	r3, r0, r7
 800ae62:	f43f af5b 	beq.w	800ad1c <__ieee754_fmod+0x68>
 800ae66:	0ffb      	lsrs	r3, r7, #31
 800ae68:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800ae6c:	007c      	lsls	r4, r7, #1
 800ae6e:	e7f4      	b.n	800ae5a <__ieee754_fmod+0x1a6>
 800ae70:	0fe1      	lsrs	r1, r4, #31
 800ae72:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800ae76:	0064      	lsls	r4, r4, #1
 800ae78:	3a01      	subs	r2, #1
 800ae7a:	e78a      	b.n	800ad92 <__ieee754_fmod+0xde>
 800ae7c:	1a89      	subs	r1, r1, r2
 800ae7e:	2914      	cmp	r1, #20
 800ae80:	dc0a      	bgt.n	800ae98 <__ieee754_fmod+0x1e4>
 800ae82:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800ae86:	fa03 f202 	lsl.w	r2, r3, r2
 800ae8a:	40cc      	lsrs	r4, r1
 800ae8c:	4322      	orrs	r2, r4
 800ae8e:	410b      	asrs	r3, r1
 800ae90:	ea43 0105 	orr.w	r1, r3, r5
 800ae94:	4610      	mov	r0, r2
 800ae96:	e731      	b.n	800acfc <__ieee754_fmod+0x48>
 800ae98:	291f      	cmp	r1, #31
 800ae9a:	dc07      	bgt.n	800aeac <__ieee754_fmod+0x1f8>
 800ae9c:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800aea0:	40cc      	lsrs	r4, r1
 800aea2:	fa03 f202 	lsl.w	r2, r3, r2
 800aea6:	4322      	orrs	r2, r4
 800aea8:	462b      	mov	r3, r5
 800aeaa:	e7f1      	b.n	800ae90 <__ieee754_fmod+0x1dc>
 800aeac:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800aeb0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aeb4:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800aeb8:	32e2      	adds	r2, #226	; 0xe2
 800aeba:	fa43 f202 	asr.w	r2, r3, r2
 800aebe:	e7f3      	b.n	800aea8 <__ieee754_fmod+0x1f4>
 800aec0:	7fefffff 	.word	0x7fefffff
 800aec4:	7ff00000 	.word	0x7ff00000
 800aec8:	0800bc58 	.word	0x0800bc58
 800aecc:	fffffbed 	.word	0xfffffbed
 800aed0:	fffffc02 	.word	0xfffffc02
 800aed4:	fffffbe2 	.word	0xfffffbe2

0800aed8 <__ieee754_sqrt>:
 800aed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aedc:	ec55 4b10 	vmov	r4, r5, d0
 800aee0:	4e56      	ldr	r6, [pc, #344]	; (800b03c <__ieee754_sqrt+0x164>)
 800aee2:	43ae      	bics	r6, r5
 800aee4:	ee10 0a10 	vmov	r0, s0
 800aee8:	ee10 3a10 	vmov	r3, s0
 800aeec:	4629      	mov	r1, r5
 800aeee:	462a      	mov	r2, r5
 800aef0:	d110      	bne.n	800af14 <__ieee754_sqrt+0x3c>
 800aef2:	ee10 2a10 	vmov	r2, s0
 800aef6:	462b      	mov	r3, r5
 800aef8:	f7f5 fb86 	bl	8000608 <__aeabi_dmul>
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	4620      	mov	r0, r4
 800af02:	4629      	mov	r1, r5
 800af04:	f7f5 f9ca 	bl	800029c <__adddf3>
 800af08:	4604      	mov	r4, r0
 800af0a:	460d      	mov	r5, r1
 800af0c:	ec45 4b10 	vmov	d0, r4, r5
 800af10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af14:	2d00      	cmp	r5, #0
 800af16:	dc10      	bgt.n	800af3a <__ieee754_sqrt+0x62>
 800af18:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800af1c:	4330      	orrs	r0, r6
 800af1e:	d0f5      	beq.n	800af0c <__ieee754_sqrt+0x34>
 800af20:	b15d      	cbz	r5, 800af3a <__ieee754_sqrt+0x62>
 800af22:	ee10 2a10 	vmov	r2, s0
 800af26:	462b      	mov	r3, r5
 800af28:	ee10 0a10 	vmov	r0, s0
 800af2c:	f7f5 f9b4 	bl	8000298 <__aeabi_dsub>
 800af30:	4602      	mov	r2, r0
 800af32:	460b      	mov	r3, r1
 800af34:	f7f5 fc92 	bl	800085c <__aeabi_ddiv>
 800af38:	e7e6      	b.n	800af08 <__ieee754_sqrt+0x30>
 800af3a:	1509      	asrs	r1, r1, #20
 800af3c:	d076      	beq.n	800b02c <__ieee754_sqrt+0x154>
 800af3e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800af42:	07ce      	lsls	r6, r1, #31
 800af44:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800af48:	bf5e      	ittt	pl
 800af4a:	0fda      	lsrpl	r2, r3, #31
 800af4c:	005b      	lslpl	r3, r3, #1
 800af4e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800af52:	0fda      	lsrs	r2, r3, #31
 800af54:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800af58:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800af5c:	2000      	movs	r0, #0
 800af5e:	106d      	asrs	r5, r5, #1
 800af60:	005b      	lsls	r3, r3, #1
 800af62:	f04f 0e16 	mov.w	lr, #22
 800af66:	4684      	mov	ip, r0
 800af68:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af6c:	eb0c 0401 	add.w	r4, ip, r1
 800af70:	4294      	cmp	r4, r2
 800af72:	bfde      	ittt	le
 800af74:	1b12      	suble	r2, r2, r4
 800af76:	eb04 0c01 	addle.w	ip, r4, r1
 800af7a:	1840      	addle	r0, r0, r1
 800af7c:	0052      	lsls	r2, r2, #1
 800af7e:	f1be 0e01 	subs.w	lr, lr, #1
 800af82:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800af86:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800af8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af8e:	d1ed      	bne.n	800af6c <__ieee754_sqrt+0x94>
 800af90:	4671      	mov	r1, lr
 800af92:	2720      	movs	r7, #32
 800af94:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800af98:	4562      	cmp	r2, ip
 800af9a:	eb04 060e 	add.w	r6, r4, lr
 800af9e:	dc02      	bgt.n	800afa6 <__ieee754_sqrt+0xce>
 800afa0:	d113      	bne.n	800afca <__ieee754_sqrt+0xf2>
 800afa2:	429e      	cmp	r6, r3
 800afa4:	d811      	bhi.n	800afca <__ieee754_sqrt+0xf2>
 800afa6:	2e00      	cmp	r6, #0
 800afa8:	eb06 0e04 	add.w	lr, r6, r4
 800afac:	da43      	bge.n	800b036 <__ieee754_sqrt+0x15e>
 800afae:	f1be 0f00 	cmp.w	lr, #0
 800afb2:	db40      	blt.n	800b036 <__ieee754_sqrt+0x15e>
 800afb4:	f10c 0801 	add.w	r8, ip, #1
 800afb8:	eba2 020c 	sub.w	r2, r2, ip
 800afbc:	429e      	cmp	r6, r3
 800afbe:	bf88      	it	hi
 800afc0:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800afc4:	1b9b      	subs	r3, r3, r6
 800afc6:	4421      	add	r1, r4
 800afc8:	46c4      	mov	ip, r8
 800afca:	0052      	lsls	r2, r2, #1
 800afcc:	3f01      	subs	r7, #1
 800afce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800afd2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800afd6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800afda:	d1dd      	bne.n	800af98 <__ieee754_sqrt+0xc0>
 800afdc:	4313      	orrs	r3, r2
 800afde:	d006      	beq.n	800afee <__ieee754_sqrt+0x116>
 800afe0:	1c4c      	adds	r4, r1, #1
 800afe2:	bf13      	iteet	ne
 800afe4:	3101      	addne	r1, #1
 800afe6:	3001      	addeq	r0, #1
 800afe8:	4639      	moveq	r1, r7
 800afea:	f021 0101 	bicne.w	r1, r1, #1
 800afee:	1043      	asrs	r3, r0, #1
 800aff0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800aff4:	0849      	lsrs	r1, r1, #1
 800aff6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800affa:	07c2      	lsls	r2, r0, #31
 800affc:	bf48      	it	mi
 800affe:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b002:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800b006:	460c      	mov	r4, r1
 800b008:	463d      	mov	r5, r7
 800b00a:	e77f      	b.n	800af0c <__ieee754_sqrt+0x34>
 800b00c:	0ada      	lsrs	r2, r3, #11
 800b00e:	3815      	subs	r0, #21
 800b010:	055b      	lsls	r3, r3, #21
 800b012:	2a00      	cmp	r2, #0
 800b014:	d0fa      	beq.n	800b00c <__ieee754_sqrt+0x134>
 800b016:	02d7      	lsls	r7, r2, #11
 800b018:	d50a      	bpl.n	800b030 <__ieee754_sqrt+0x158>
 800b01a:	f1c1 0420 	rsb	r4, r1, #32
 800b01e:	fa23 f404 	lsr.w	r4, r3, r4
 800b022:	1e4d      	subs	r5, r1, #1
 800b024:	408b      	lsls	r3, r1
 800b026:	4322      	orrs	r2, r4
 800b028:	1b41      	subs	r1, r0, r5
 800b02a:	e788      	b.n	800af3e <__ieee754_sqrt+0x66>
 800b02c:	4608      	mov	r0, r1
 800b02e:	e7f0      	b.n	800b012 <__ieee754_sqrt+0x13a>
 800b030:	0052      	lsls	r2, r2, #1
 800b032:	3101      	adds	r1, #1
 800b034:	e7ef      	b.n	800b016 <__ieee754_sqrt+0x13e>
 800b036:	46e0      	mov	r8, ip
 800b038:	e7be      	b.n	800afb8 <__ieee754_sqrt+0xe0>
 800b03a:	bf00      	nop
 800b03c:	7ff00000 	.word	0x7ff00000

0800b040 <atan>:
 800b040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b044:	ec55 4b10 	vmov	r4, r5, d0
 800b048:	4bc3      	ldr	r3, [pc, #780]	; (800b358 <atan+0x318>)
 800b04a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b04e:	429e      	cmp	r6, r3
 800b050:	46ab      	mov	fp, r5
 800b052:	dd18      	ble.n	800b086 <atan+0x46>
 800b054:	4bc1      	ldr	r3, [pc, #772]	; (800b35c <atan+0x31c>)
 800b056:	429e      	cmp	r6, r3
 800b058:	dc01      	bgt.n	800b05e <atan+0x1e>
 800b05a:	d109      	bne.n	800b070 <atan+0x30>
 800b05c:	b144      	cbz	r4, 800b070 <atan+0x30>
 800b05e:	4622      	mov	r2, r4
 800b060:	462b      	mov	r3, r5
 800b062:	4620      	mov	r0, r4
 800b064:	4629      	mov	r1, r5
 800b066:	f7f5 f919 	bl	800029c <__adddf3>
 800b06a:	4604      	mov	r4, r0
 800b06c:	460d      	mov	r5, r1
 800b06e:	e006      	b.n	800b07e <atan+0x3e>
 800b070:	f1bb 0f00 	cmp.w	fp, #0
 800b074:	f300 8131 	bgt.w	800b2da <atan+0x29a>
 800b078:	a59b      	add	r5, pc, #620	; (adr r5, 800b2e8 <atan+0x2a8>)
 800b07a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b07e:	ec45 4b10 	vmov	d0, r4, r5
 800b082:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b086:	4bb6      	ldr	r3, [pc, #728]	; (800b360 <atan+0x320>)
 800b088:	429e      	cmp	r6, r3
 800b08a:	dc14      	bgt.n	800b0b6 <atan+0x76>
 800b08c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b090:	429e      	cmp	r6, r3
 800b092:	dc0d      	bgt.n	800b0b0 <atan+0x70>
 800b094:	a396      	add	r3, pc, #600	; (adr r3, 800b2f0 <atan+0x2b0>)
 800b096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09a:	ee10 0a10 	vmov	r0, s0
 800b09e:	4629      	mov	r1, r5
 800b0a0:	f7f5 f8fc 	bl	800029c <__adddf3>
 800b0a4:	4baf      	ldr	r3, [pc, #700]	; (800b364 <atan+0x324>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f7f5 fd3e 	bl	8000b28 <__aeabi_dcmpgt>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d1e6      	bne.n	800b07e <atan+0x3e>
 800b0b0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b0b4:	e02b      	b.n	800b10e <atan+0xce>
 800b0b6:	f000 f963 	bl	800b380 <fabs>
 800b0ba:	4bab      	ldr	r3, [pc, #684]	; (800b368 <atan+0x328>)
 800b0bc:	429e      	cmp	r6, r3
 800b0be:	ec55 4b10 	vmov	r4, r5, d0
 800b0c2:	f300 80bf 	bgt.w	800b244 <atan+0x204>
 800b0c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b0ca:	429e      	cmp	r6, r3
 800b0cc:	f300 80a0 	bgt.w	800b210 <atan+0x1d0>
 800b0d0:	ee10 2a10 	vmov	r2, s0
 800b0d4:	ee10 0a10 	vmov	r0, s0
 800b0d8:	462b      	mov	r3, r5
 800b0da:	4629      	mov	r1, r5
 800b0dc:	f7f5 f8de 	bl	800029c <__adddf3>
 800b0e0:	4ba0      	ldr	r3, [pc, #640]	; (800b364 <atan+0x324>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f7f5 f8d8 	bl	8000298 <__aeabi_dsub>
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	460f      	mov	r7, r1
 800b0ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	f7f5 f8d1 	bl	800029c <__adddf3>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	4630      	mov	r0, r6
 800b100:	4639      	mov	r1, r7
 800b102:	f7f5 fbab 	bl	800085c <__aeabi_ddiv>
 800b106:	f04f 0a00 	mov.w	sl, #0
 800b10a:	4604      	mov	r4, r0
 800b10c:	460d      	mov	r5, r1
 800b10e:	4622      	mov	r2, r4
 800b110:	462b      	mov	r3, r5
 800b112:	4620      	mov	r0, r4
 800b114:	4629      	mov	r1, r5
 800b116:	f7f5 fa77 	bl	8000608 <__aeabi_dmul>
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	4680      	mov	r8, r0
 800b120:	4689      	mov	r9, r1
 800b122:	f7f5 fa71 	bl	8000608 <__aeabi_dmul>
 800b126:	a374      	add	r3, pc, #464	; (adr r3, 800b2f8 <atan+0x2b8>)
 800b128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12c:	4606      	mov	r6, r0
 800b12e:	460f      	mov	r7, r1
 800b130:	f7f5 fa6a 	bl	8000608 <__aeabi_dmul>
 800b134:	a372      	add	r3, pc, #456	; (adr r3, 800b300 <atan+0x2c0>)
 800b136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13a:	f7f5 f8af 	bl	800029c <__adddf3>
 800b13e:	4632      	mov	r2, r6
 800b140:	463b      	mov	r3, r7
 800b142:	f7f5 fa61 	bl	8000608 <__aeabi_dmul>
 800b146:	a370      	add	r3, pc, #448	; (adr r3, 800b308 <atan+0x2c8>)
 800b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14c:	f7f5 f8a6 	bl	800029c <__adddf3>
 800b150:	4632      	mov	r2, r6
 800b152:	463b      	mov	r3, r7
 800b154:	f7f5 fa58 	bl	8000608 <__aeabi_dmul>
 800b158:	a36d      	add	r3, pc, #436	; (adr r3, 800b310 <atan+0x2d0>)
 800b15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15e:	f7f5 f89d 	bl	800029c <__adddf3>
 800b162:	4632      	mov	r2, r6
 800b164:	463b      	mov	r3, r7
 800b166:	f7f5 fa4f 	bl	8000608 <__aeabi_dmul>
 800b16a:	a36b      	add	r3, pc, #428	; (adr r3, 800b318 <atan+0x2d8>)
 800b16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b170:	f7f5 f894 	bl	800029c <__adddf3>
 800b174:	4632      	mov	r2, r6
 800b176:	463b      	mov	r3, r7
 800b178:	f7f5 fa46 	bl	8000608 <__aeabi_dmul>
 800b17c:	a368      	add	r3, pc, #416	; (adr r3, 800b320 <atan+0x2e0>)
 800b17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b182:	f7f5 f88b 	bl	800029c <__adddf3>
 800b186:	4642      	mov	r2, r8
 800b188:	464b      	mov	r3, r9
 800b18a:	f7f5 fa3d 	bl	8000608 <__aeabi_dmul>
 800b18e:	a366      	add	r3, pc, #408	; (adr r3, 800b328 <atan+0x2e8>)
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	4680      	mov	r8, r0
 800b196:	4689      	mov	r9, r1
 800b198:	4630      	mov	r0, r6
 800b19a:	4639      	mov	r1, r7
 800b19c:	f7f5 fa34 	bl	8000608 <__aeabi_dmul>
 800b1a0:	a363      	add	r3, pc, #396	; (adr r3, 800b330 <atan+0x2f0>)
 800b1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a6:	f7f5 f877 	bl	8000298 <__aeabi_dsub>
 800b1aa:	4632      	mov	r2, r6
 800b1ac:	463b      	mov	r3, r7
 800b1ae:	f7f5 fa2b 	bl	8000608 <__aeabi_dmul>
 800b1b2:	a361      	add	r3, pc, #388	; (adr r3, 800b338 <atan+0x2f8>)
 800b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b8:	f7f5 f86e 	bl	8000298 <__aeabi_dsub>
 800b1bc:	4632      	mov	r2, r6
 800b1be:	463b      	mov	r3, r7
 800b1c0:	f7f5 fa22 	bl	8000608 <__aeabi_dmul>
 800b1c4:	a35e      	add	r3, pc, #376	; (adr r3, 800b340 <atan+0x300>)
 800b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ca:	f7f5 f865 	bl	8000298 <__aeabi_dsub>
 800b1ce:	4632      	mov	r2, r6
 800b1d0:	463b      	mov	r3, r7
 800b1d2:	f7f5 fa19 	bl	8000608 <__aeabi_dmul>
 800b1d6:	a35c      	add	r3, pc, #368	; (adr r3, 800b348 <atan+0x308>)
 800b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1dc:	f7f5 f85c 	bl	8000298 <__aeabi_dsub>
 800b1e0:	4632      	mov	r2, r6
 800b1e2:	463b      	mov	r3, r7
 800b1e4:	f7f5 fa10 	bl	8000608 <__aeabi_dmul>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	4640      	mov	r0, r8
 800b1ee:	4649      	mov	r1, r9
 800b1f0:	f7f5 f854 	bl	800029c <__adddf3>
 800b1f4:	4622      	mov	r2, r4
 800b1f6:	462b      	mov	r3, r5
 800b1f8:	f7f5 fa06 	bl	8000608 <__aeabi_dmul>
 800b1fc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800b200:	4602      	mov	r2, r0
 800b202:	460b      	mov	r3, r1
 800b204:	d14b      	bne.n	800b29e <atan+0x25e>
 800b206:	4620      	mov	r0, r4
 800b208:	4629      	mov	r1, r5
 800b20a:	f7f5 f845 	bl	8000298 <__aeabi_dsub>
 800b20e:	e72c      	b.n	800b06a <atan+0x2a>
 800b210:	ee10 0a10 	vmov	r0, s0
 800b214:	4b53      	ldr	r3, [pc, #332]	; (800b364 <atan+0x324>)
 800b216:	2200      	movs	r2, #0
 800b218:	4629      	mov	r1, r5
 800b21a:	f7f5 f83d 	bl	8000298 <__aeabi_dsub>
 800b21e:	4b51      	ldr	r3, [pc, #324]	; (800b364 <atan+0x324>)
 800b220:	4606      	mov	r6, r0
 800b222:	460f      	mov	r7, r1
 800b224:	2200      	movs	r2, #0
 800b226:	4620      	mov	r0, r4
 800b228:	4629      	mov	r1, r5
 800b22a:	f7f5 f837 	bl	800029c <__adddf3>
 800b22e:	4602      	mov	r2, r0
 800b230:	460b      	mov	r3, r1
 800b232:	4630      	mov	r0, r6
 800b234:	4639      	mov	r1, r7
 800b236:	f7f5 fb11 	bl	800085c <__aeabi_ddiv>
 800b23a:	f04f 0a01 	mov.w	sl, #1
 800b23e:	4604      	mov	r4, r0
 800b240:	460d      	mov	r5, r1
 800b242:	e764      	b.n	800b10e <atan+0xce>
 800b244:	4b49      	ldr	r3, [pc, #292]	; (800b36c <atan+0x32c>)
 800b246:	429e      	cmp	r6, r3
 800b248:	da1d      	bge.n	800b286 <atan+0x246>
 800b24a:	ee10 0a10 	vmov	r0, s0
 800b24e:	4b48      	ldr	r3, [pc, #288]	; (800b370 <atan+0x330>)
 800b250:	2200      	movs	r2, #0
 800b252:	4629      	mov	r1, r5
 800b254:	f7f5 f820 	bl	8000298 <__aeabi_dsub>
 800b258:	4b45      	ldr	r3, [pc, #276]	; (800b370 <atan+0x330>)
 800b25a:	4606      	mov	r6, r0
 800b25c:	460f      	mov	r7, r1
 800b25e:	2200      	movs	r2, #0
 800b260:	4620      	mov	r0, r4
 800b262:	4629      	mov	r1, r5
 800b264:	f7f5 f9d0 	bl	8000608 <__aeabi_dmul>
 800b268:	4b3e      	ldr	r3, [pc, #248]	; (800b364 <atan+0x324>)
 800b26a:	2200      	movs	r2, #0
 800b26c:	f7f5 f816 	bl	800029c <__adddf3>
 800b270:	4602      	mov	r2, r0
 800b272:	460b      	mov	r3, r1
 800b274:	4630      	mov	r0, r6
 800b276:	4639      	mov	r1, r7
 800b278:	f7f5 faf0 	bl	800085c <__aeabi_ddiv>
 800b27c:	f04f 0a02 	mov.w	sl, #2
 800b280:	4604      	mov	r4, r0
 800b282:	460d      	mov	r5, r1
 800b284:	e743      	b.n	800b10e <atan+0xce>
 800b286:	462b      	mov	r3, r5
 800b288:	ee10 2a10 	vmov	r2, s0
 800b28c:	4939      	ldr	r1, [pc, #228]	; (800b374 <atan+0x334>)
 800b28e:	2000      	movs	r0, #0
 800b290:	f7f5 fae4 	bl	800085c <__aeabi_ddiv>
 800b294:	f04f 0a03 	mov.w	sl, #3
 800b298:	4604      	mov	r4, r0
 800b29a:	460d      	mov	r5, r1
 800b29c:	e737      	b.n	800b10e <atan+0xce>
 800b29e:	4b36      	ldr	r3, [pc, #216]	; (800b378 <atan+0x338>)
 800b2a0:	4e36      	ldr	r6, [pc, #216]	; (800b37c <atan+0x33c>)
 800b2a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b2a6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b2aa:	e9da 2300 	ldrd	r2, r3, [sl]
 800b2ae:	f7f4 fff3 	bl	8000298 <__aeabi_dsub>
 800b2b2:	4622      	mov	r2, r4
 800b2b4:	462b      	mov	r3, r5
 800b2b6:	f7f4 ffef 	bl	8000298 <__aeabi_dsub>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	460b      	mov	r3, r1
 800b2be:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b2c2:	f7f4 ffe9 	bl	8000298 <__aeabi_dsub>
 800b2c6:	f1bb 0f00 	cmp.w	fp, #0
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	460d      	mov	r5, r1
 800b2ce:	f6bf aed6 	bge.w	800b07e <atan+0x3e>
 800b2d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2d6:	461d      	mov	r5, r3
 800b2d8:	e6d1      	b.n	800b07e <atan+0x3e>
 800b2da:	a51d      	add	r5, pc, #116	; (adr r5, 800b350 <atan+0x310>)
 800b2dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b2e0:	e6cd      	b.n	800b07e <atan+0x3e>
 800b2e2:	bf00      	nop
 800b2e4:	f3af 8000 	nop.w
 800b2e8:	54442d18 	.word	0x54442d18
 800b2ec:	bff921fb 	.word	0xbff921fb
 800b2f0:	8800759c 	.word	0x8800759c
 800b2f4:	7e37e43c 	.word	0x7e37e43c
 800b2f8:	e322da11 	.word	0xe322da11
 800b2fc:	3f90ad3a 	.word	0x3f90ad3a
 800b300:	24760deb 	.word	0x24760deb
 800b304:	3fa97b4b 	.word	0x3fa97b4b
 800b308:	a0d03d51 	.word	0xa0d03d51
 800b30c:	3fb10d66 	.word	0x3fb10d66
 800b310:	c54c206e 	.word	0xc54c206e
 800b314:	3fb745cd 	.word	0x3fb745cd
 800b318:	920083ff 	.word	0x920083ff
 800b31c:	3fc24924 	.word	0x3fc24924
 800b320:	5555550d 	.word	0x5555550d
 800b324:	3fd55555 	.word	0x3fd55555
 800b328:	2c6a6c2f 	.word	0x2c6a6c2f
 800b32c:	bfa2b444 	.word	0xbfa2b444
 800b330:	52defd9a 	.word	0x52defd9a
 800b334:	3fadde2d 	.word	0x3fadde2d
 800b338:	af749a6d 	.word	0xaf749a6d
 800b33c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b340:	fe231671 	.word	0xfe231671
 800b344:	3fbc71c6 	.word	0x3fbc71c6
 800b348:	9998ebc4 	.word	0x9998ebc4
 800b34c:	3fc99999 	.word	0x3fc99999
 800b350:	54442d18 	.word	0x54442d18
 800b354:	3ff921fb 	.word	0x3ff921fb
 800b358:	440fffff 	.word	0x440fffff
 800b35c:	7ff00000 	.word	0x7ff00000
 800b360:	3fdbffff 	.word	0x3fdbffff
 800b364:	3ff00000 	.word	0x3ff00000
 800b368:	3ff2ffff 	.word	0x3ff2ffff
 800b36c:	40038000 	.word	0x40038000
 800b370:	3ff80000 	.word	0x3ff80000
 800b374:	bff00000 	.word	0xbff00000
 800b378:	0800bc88 	.word	0x0800bc88
 800b37c:	0800bc68 	.word	0x0800bc68

0800b380 <fabs>:
 800b380:	ec51 0b10 	vmov	r0, r1, d0
 800b384:	ee10 2a10 	vmov	r2, s0
 800b388:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b38c:	ec43 2b10 	vmov	d0, r2, r3
 800b390:	4770      	bx	lr
 800b392:	0000      	movs	r0, r0
 800b394:	0000      	movs	r0, r0
	...

0800b398 <nan>:
 800b398:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b3a0 <nan+0x8>
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	00000000 	.word	0x00000000
 800b3a4:	7ff80000 	.word	0x7ff80000

0800b3a8 <_init>:
 800b3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3aa:	bf00      	nop
 800b3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ae:	bc08      	pop	{r3}
 800b3b0:	469e      	mov	lr, r3
 800b3b2:	4770      	bx	lr

0800b3b4 <_fini>:
 800b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b6:	bf00      	nop
 800b3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ba:	bc08      	pop	{r3}
 800b3bc:	469e      	mov	lr, r3
 800b3be:	4770      	bx	lr
