
BLDC_Gimbal1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000802c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  080081d0  080081d0  000181d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800861c  0800861c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800861c  0800861c  0001861c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008624  08008624  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008624  08008624  00018624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008628  08008628  00018628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800862c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  200001e4  08008810  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  08008810  0002072c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016841  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002934  00000000  00000000  00036a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  00039390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  0003a648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000036f9  00000000  00000000  0003b830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016317  00000000  00000000  0003ef29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a034b  00000000  00000000  00055240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f558b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006228  00000000  00000000  000f55e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080081b4 	.word	0x080081b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	080081b4 	.word	0x080081b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <setSampleFreq>:
#include "Quaternions.h"

/*
 * @brief Set the sample frequency based on the while loop cycle time (in milliseconds)
 */
void setSampleFreq() {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	sampleFreq = 1 / (0.001 * while_t);
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <setSampleFreq+0x48>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fafd 	bl	8000558 <__aeabi_f2d>
 8000f5e:	a30c      	add	r3, pc, #48	; (adr r3, 8000f90 <setSampleFreq+0x40>)
 8000f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f64:	f7ff fb50 	bl	8000608 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	490a      	ldr	r1, [pc, #40]	; (8000f9c <setSampleFreq+0x4c>)
 8000f72:	f7ff fc73 	bl	800085c <__aeabi_ddiv>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f7ff fe1b 	bl	8000bb8 <__aeabi_d2f>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <setSampleFreq+0x50>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	f3af 8000 	nop.w
 8000f90:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f94:	3f50624d 	.word	0x3f50624d
 8000f98:	20000004 	.word	0x20000004
 8000f9c:	3ff00000 	.word	0x3ff00000
 8000fa0:	20000210 	.word	0x20000210

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000faa:	f001 f8d1 	bl	8002150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fae:	f000 f899 	bl	80010e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb2:	f000 fc37 	bl	8001824 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000fb6:	f000 f9f1 	bl	800139c <MX_SPI1_Init>
  MX_I2C1_Init();
 8000fba:	f000 f9c1 	bl	8001340 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000fbe:	f000 facf 	bl	8001560 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000fc2:	f000 fa21 	bl	8001408 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000fc6:	f000 fb57 	bl	8001678 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000fca:	f000 f8f7 	bl	80011bc <MX_ADC1_Init>
  MX_DMA_Init();
 8000fce:	f000 fc09 	bl	80017e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fd2:	f000 fbdd 	bl	8001790 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	sprintf((char*) buff, "\r\n###########################\r\n");
 8000fd6:	4934      	ldr	r1, [pc, #208]	; (80010a8 <main+0x104>)
 8000fd8:	4834      	ldr	r0, [pc, #208]	; (80010ac <main+0x108>)
 8000fda:	f004 febf 	bl	8005d5c <siprintf>
	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8000fde:	4833      	ldr	r0, [pc, #204]	; (80010ac <main+0x108>)
 8000fe0:	f7ff f8fe 	bl	80001e0 <strlen>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fec:	492f      	ldr	r1, [pc, #188]	; (80010ac <main+0x108>)
 8000fee:	4830      	ldr	r0, [pc, #192]	; (80010b0 <main+0x10c>)
 8000ff0:	f003 ff4f 	bl	8004e92 <HAL_UART_Transmit>


	if(USE_DRV8313){
		MotorDriverX.motor_id = AXIS_X;
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <main+0x110>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	719a      	strb	r2, [r3, #6]
		MotorDriverY.motor_id = AXIS_Y;
 8000ffa:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <main+0x114>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	719a      	strb	r2, [r3, #6]
		MotorDriverZ.motor_id = AXIS_Z;
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <main+0x118>)
 8001002:	2202      	movs	r2, #2
 8001004:	719a      	strb	r2, [r3, #6]

		//drv8313_init();

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_read, ADC_CHANNELS);
 8001006:	2209      	movs	r2, #9
 8001008:	492d      	ldr	r1, [pc, #180]	; (80010c0 <main+0x11c>)
 800100a:	482e      	ldr	r0, [pc, #184]	; (80010c4 <main+0x120>)
 800100c:	f001 f97a 	bl	8002304 <HAL_ADC_Start_DMA>
		zero_pos_map[AXIS_Y] = as5048a_readToAngle(zero_pos[AXIS_Y]);
		zero_pos_map[AXIS_Z] = as5048a_readToAngle(zero_pos[AXIS_Z]);
	}


	setSampleFreq();
 8001010:	f7ff ff9e 	bl	8000f50 <setSampleFreq>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		t1 = HAL_GetTick();
 8001014:	f001 f902 	bl	800221c <HAL_GetTick>
 8001018:	4603      	mov	r3, r0
 800101a:	4a2b      	ldr	r2, [pc, #172]	; (80010c8 <main+0x124>)
 800101c:	6013      	str	r3, [r2, #0]
		setSampleFreq();
 800101e:	f7ff ff97 	bl	8000f50 <setSampleFreq>
			as5048a_getAllAngles();
		}

		if(USE_DRV8313){

			while(adcConvComplete == 0){
 8001022:	bf00      	nop
 8001024:	4b29      	ldr	r3, [pc, #164]	; (80010cc <main+0x128>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0fa      	beq.n	8001024 <main+0x80>

			}
			adcConvComplete = 0;
 800102e:	4b27      	ldr	r3, [pc, #156]	; (80010cc <main+0x128>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]

		}

		HAL_Delay(sampleDelay);
 8001034:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <main+0x12c>)
 8001036:	edd3 7a00 	vldr	s15, [r3]
 800103a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800103e:	ee17 0a90 	vmov	r0, s15
 8001042:	f001 f8f7 	bl	8002234 <HAL_Delay>

		sprintf((char*) buff, "Motor X\r\nSense1: %i\tSense2: %i\tSense3: %i\r\n", MotorDriverX.sense1, MotorDriverX.sense2, MotorDriverX.sense3);
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <main+0x110>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <main+0x110>)
 800104e:	885b      	ldrh	r3, [r3, #2]
 8001050:	4619      	mov	r1, r3
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <main+0x110>)
 8001054:	889b      	ldrh	r3, [r3, #4]
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	460b      	mov	r3, r1
 800105a:	491e      	ldr	r1, [pc, #120]	; (80010d4 <main+0x130>)
 800105c:	4813      	ldr	r0, [pc, #76]	; (80010ac <main+0x108>)
 800105e:	f004 fe7d 	bl	8005d5c <siprintf>
					HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001062:	4812      	ldr	r0, [pc, #72]	; (80010ac <main+0x108>)
 8001064:	f7ff f8bc 	bl	80001e0 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001070:	490e      	ldr	r1, [pc, #56]	; (80010ac <main+0x108>)
 8001072:	480f      	ldr	r0, [pc, #60]	; (80010b0 <main+0x10c>)
 8001074:	f003 ff0d 	bl	8004e92 <HAL_UART_Transmit>
			ay_s = 0.0;
			az_s = 0.0;
			filterUpdate(gx_s * DEG_TO_RAD, gy_s * DEG_TO_RAD,
					gz_s * DEG_TO_RAD, ax_s, ay_s, az_s);
		}
		waitUpdate++;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <main+0x134>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <main+0x134>)
 8001082:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
		}



		t2 = HAL_GetTick();
 8001084:	f001 f8ca 	bl	800221c <HAL_GetTick>
 8001088:	4603      	mov	r3, r0
 800108a:	4a14      	ldr	r2, [pc, #80]	; (80010dc <main+0x138>)
 800108c:	6013      	str	r3, [r2, #0]
		while_t = t2 - t1;
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <main+0x138>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <main+0x124>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	ee07 3a90 	vmov	s15, r3
 800109c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <main+0x13c>)
 80010a2:	edc3 7a00 	vstr	s15, [r3]
		t1 = HAL_GetTick();
 80010a6:	e7b5      	b.n	8001014 <main+0x70>
 80010a8:	080081d0 	.word	0x080081d0
 80010ac:	20000294 	.word	0x20000294
 80010b0:	200006b0 	.word	0x200006b0
 80010b4:	20000548 	.word	0x20000548
 80010b8:	20000280 	.word	0x20000280
 80010bc:	200005b4 	.word	0x200005b4
 80010c0:	200004e4 	.word	0x200004e4
 80010c4:	200004f8 	.word	0x200004f8
 80010c8:	200005b0 	.word	0x200005b0
 80010cc:	20000200 	.word	0x20000200
 80010d0:	20000000 	.word	0x20000000
 80010d4:	080081f0 	.word	0x080081f0
 80010d8:	20000201 	.word	0x20000201
 80010dc:	20000494 	.word	0x20000494
 80010e0:	20000004 	.word	0x20000004

080010e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b094      	sub	sp, #80	; 0x50
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	2230      	movs	r2, #48	; 0x30
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f004 f9c0 	bl	8005478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <SystemClock_Config+0xd0>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	4a28      	ldr	r2, [pc, #160]	; (80011b4 <SystemClock_Config+0xd0>)
 8001112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001116:	6413      	str	r3, [r2, #64]	; 0x40
 8001118:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <SystemClock_Config+0xd0>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <SystemClock_Config+0xd4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001130:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <SystemClock_Config+0xd4>)
 8001132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <SystemClock_Config+0xd4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001144:	2302      	movs	r3, #2
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001148:	2301      	movs	r3, #1
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114c:	2310      	movs	r3, #16
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001150:	2302      	movs	r3, #2
 8001152:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001154:	2300      	movs	r3, #0
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001158:	2310      	movs	r3, #16
 800115a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800115c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001160:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001162:	2304      	movs	r3, #4
 8001164:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001166:	2304      	movs	r3, #4
 8001168:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116a:	f107 0320 	add.w	r3, r7, #32
 800116e:	4618      	mov	r0, r3
 8001170:	f002 fbd0 	bl	8003914 <HAL_RCC_OscConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800117a:	f000 fbe1 	bl	8001940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001182:	2302      	movs	r3, #2
 8001184:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800118a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2102      	movs	r1, #2
 800119a:	4618      	mov	r0, r3
 800119c:	f002 fe32 	bl	8003e04 <HAL_RCC_ClockConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011a6:	f000 fbcb 	bl	8001940 <Error_Handler>
  }
}
 80011aa:	bf00      	nop
 80011ac:	3750      	adds	r7, #80	; 0x50
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40007000 	.word	0x40007000

080011bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ce:	4b59      	ldr	r3, [pc, #356]	; (8001334 <MX_ADC1_Init+0x178>)
 80011d0:	4a59      	ldr	r2, [pc, #356]	; (8001338 <MX_ADC1_Init+0x17c>)
 80011d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80011d4:	4b57      	ldr	r3, [pc, #348]	; (8001334 <MX_ADC1_Init+0x178>)
 80011d6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011dc:	4b55      	ldr	r3, [pc, #340]	; (8001334 <MX_ADC1_Init+0x178>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011e2:	4b54      	ldr	r3, [pc, #336]	; (8001334 <MX_ADC1_Init+0x178>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011e8:	4b52      	ldr	r3, [pc, #328]	; (8001334 <MX_ADC1_Init+0x178>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ee:	4b51      	ldr	r3, [pc, #324]	; (8001334 <MX_ADC1_Init+0x178>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f6:	4b4f      	ldr	r3, [pc, #316]	; (8001334 <MX_ADC1_Init+0x178>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011fc:	4b4d      	ldr	r3, [pc, #308]	; (8001334 <MX_ADC1_Init+0x178>)
 80011fe:	4a4f      	ldr	r2, [pc, #316]	; (800133c <MX_ADC1_Init+0x180>)
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001202:	4b4c      	ldr	r3, [pc, #304]	; (8001334 <MX_ADC1_Init+0x178>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8001208:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <MX_ADC1_Init+0x178>)
 800120a:	2209      	movs	r2, #9
 800120c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800120e:	4b49      	ldr	r3, [pc, #292]	; (8001334 <MX_ADC1_Init+0x178>)
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001216:	4b47      	ldr	r3, [pc, #284]	; (8001334 <MX_ADC1_Init+0x178>)
 8001218:	2201      	movs	r2, #1
 800121a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800121c:	4845      	ldr	r0, [pc, #276]	; (8001334 <MX_ADC1_Init+0x178>)
 800121e:	f001 f82d 	bl	800227c <HAL_ADC_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001228:	f000 fb8a 	bl	8001940 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800122c:	2300      	movs	r3, #0
 800122e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001230:	2301      	movs	r3, #1
 8001232:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	483d      	ldr	r0, [pc, #244]	; (8001334 <MX_ADC1_Init+0x178>)
 800123e:	f001 f965 	bl	800250c <HAL_ADC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001248:	f000 fb7a 	bl	8001940 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800124c:	2304      	movs	r3, #4
 800124e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001250:	2302      	movs	r3, #2
 8001252:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	4619      	mov	r1, r3
 8001258:	4836      	ldr	r0, [pc, #216]	; (8001334 <MX_ADC1_Init+0x178>)
 800125a:	f001 f957 	bl	800250c <HAL_ADC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001264:	f000 fb6c 	bl	8001940 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001268:	2309      	movs	r3, #9
 800126a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800126c:	2303      	movs	r3, #3
 800126e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	4619      	mov	r1, r3
 8001274:	482f      	ldr	r0, [pc, #188]	; (8001334 <MX_ADC1_Init+0x178>)
 8001276:	f001 f949 	bl	800250c <HAL_ADC_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001280:	f000 fb5e 	bl	8001940 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001284:	230a      	movs	r3, #10
 8001286:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001288:	2304      	movs	r3, #4
 800128a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128c:	463b      	mov	r3, r7
 800128e:	4619      	mov	r1, r3
 8001290:	4828      	ldr	r0, [pc, #160]	; (8001334 <MX_ADC1_Init+0x178>)
 8001292:	f001 f93b 	bl	800250c <HAL_ADC_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800129c:	f000 fb50 	bl	8001940 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012a0:	230b      	movs	r3, #11
 80012a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80012a4:	2305      	movs	r3, #5
 80012a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a8:	463b      	mov	r3, r7
 80012aa:	4619      	mov	r1, r3
 80012ac:	4821      	ldr	r0, [pc, #132]	; (8001334 <MX_ADC1_Init+0x178>)
 80012ae:	f001 f92d 	bl	800250c <HAL_ADC_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80012b8:	f000 fb42 	bl	8001940 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012bc:	230c      	movs	r3, #12
 80012be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80012c0:	2306      	movs	r3, #6
 80012c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c4:	463b      	mov	r3, r7
 80012c6:	4619      	mov	r1, r3
 80012c8:	481a      	ldr	r0, [pc, #104]	; (8001334 <MX_ADC1_Init+0x178>)
 80012ca:	f001 f91f 	bl	800250c <HAL_ADC_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80012d4:	f000 fb34 	bl	8001940 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80012d8:	230d      	movs	r3, #13
 80012da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80012dc:	2307      	movs	r3, #7
 80012de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e0:	463b      	mov	r3, r7
 80012e2:	4619      	mov	r1, r3
 80012e4:	4813      	ldr	r0, [pc, #76]	; (8001334 <MX_ADC1_Init+0x178>)
 80012e6:	f001 f911 	bl	800250c <HAL_ADC_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80012f0:	f000 fb26 	bl	8001940 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80012f4:	230e      	movs	r3, #14
 80012f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80012f8:	2308      	movs	r3, #8
 80012fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	4619      	mov	r1, r3
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <MX_ADC1_Init+0x178>)
 8001302:	f001 f903 	bl	800250c <HAL_ADC_ConfigChannel>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800130c:	f000 fb18 	bl	8001940 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001310:	230f      	movs	r3, #15
 8001312:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001314:	2309      	movs	r3, #9
 8001316:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_ADC1_Init+0x178>)
 800131e:	f001 f8f5 	bl	800250c <HAL_ADC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001328:	f000 fb0a 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200004f8 	.word	0x200004f8
 8001338:	40012000 	.word	0x40012000
 800133c:	0f000001 	.word	0x0f000001

08001340 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_I2C1_Init+0x50>)
 8001346:	4a13      	ldr	r2, [pc, #76]	; (8001394 <MX_I2C1_Init+0x54>)
 8001348:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_I2C1_Init+0x50>)
 800134c:	4a12      	ldr	r2, [pc, #72]	; (8001398 <MX_I2C1_Init+0x58>)
 800134e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_I2C1_Init+0x50>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_I2C1_Init+0x50>)
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_I2C1_Init+0x50>)
 800135e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001362:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <MX_I2C1_Init+0x50>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_I2C1_Init+0x50>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <MX_I2C1_Init+0x50>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_I2C1_Init+0x50>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <MX_I2C1_Init+0x50>)
 800137e:	f002 f985 	bl	800368c <HAL_I2C_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001388:	f000 fada 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2000022c 	.word	0x2000022c
 8001394:	40005400 	.word	0x40005400
 8001398:	00061a80 	.word	0x00061a80

0800139c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <MX_SPI1_Init+0x64>)
 80013a2:	4a18      	ldr	r2, [pc, #96]	; (8001404 <MX_SPI1_Init+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <MX_SPI1_Init+0x64>)
 80013a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_SPI1_Init+0x64>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <MX_SPI1_Init+0x64>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_SPI1_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_SPI1_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_SPI1_Init+0x64>)
 80013c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_SPI1_Init+0x64>)
 80013d0:	2228      	movs	r2, #40	; 0x28
 80013d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <MX_SPI1_Init+0x64>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_SPI1_Init+0x64>)
 80013dc:	2200      	movs	r2, #0
 80013de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <MX_SPI1_Init+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_SPI1_Init+0x64>)
 80013e8:	220a      	movs	r2, #10
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <MX_SPI1_Init+0x64>)
 80013ee:	f002 fed9 	bl	80041a4 <HAL_SPI_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013f8:	f000 faa2 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	2000060c 	.word	0x2000060c
 8001404:	40013000 	.word	0x40013000

08001408 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b096      	sub	sp, #88	; 0x58
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]
 8001436:	615a      	str	r2, [r3, #20]
 8001438:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2220      	movs	r2, #32
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f004 f819 	bl	8005478 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001446:	4b44      	ldr	r3, [pc, #272]	; (8001558 <MX_TIM1_Init+0x150>)
 8001448:	4a44      	ldr	r2, [pc, #272]	; (800155c <MX_TIM1_Init+0x154>)
 800144a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800144c:	4b42      	ldr	r3, [pc, #264]	; (8001558 <MX_TIM1_Init+0x150>)
 800144e:	2200      	movs	r2, #0
 8001450:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b41      	ldr	r3, [pc, #260]	; (8001558 <MX_TIM1_Init+0x150>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001458:	4b3f      	ldr	r3, [pc, #252]	; (8001558 <MX_TIM1_Init+0x150>)
 800145a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800145e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <MX_TIM1_Init+0x150>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001466:	4b3c      	ldr	r3, [pc, #240]	; (8001558 <MX_TIM1_Init+0x150>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146c:	4b3a      	ldr	r3, [pc, #232]	; (8001558 <MX_TIM1_Init+0x150>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001472:	4839      	ldr	r0, [pc, #228]	; (8001558 <MX_TIM1_Init+0x150>)
 8001474:	f002 ff1f 	bl	80042b6 <HAL_TIM_Base_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800147e:	f000 fa5f 	bl	8001940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001486:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001488:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800148c:	4619      	mov	r1, r3
 800148e:	4832      	ldr	r0, [pc, #200]	; (8001558 <MX_TIM1_Init+0x150>)
 8001490:	f003 f87c 	bl	800458c <HAL_TIM_ConfigClockSource>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800149a:	f000 fa51 	bl	8001940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800149e:	482e      	ldr	r0, [pc, #184]	; (8001558 <MX_TIM1_Init+0x150>)
 80014a0:	f002 ff58 	bl	8004354 <HAL_TIM_PWM_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80014aa:	f000 fa49 	bl	8001940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014ba:	4619      	mov	r1, r3
 80014bc:	4826      	ldr	r0, [pc, #152]	; (8001558 <MX_TIM1_Init+0x150>)
 80014be:	f003 fbd3 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80014c8:	f000 fa3a 	bl	8001940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014cc:	2360      	movs	r3, #96	; 0x60
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014d8:	2300      	movs	r3, #0
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	2204      	movs	r2, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	4819      	ldr	r0, [pc, #100]	; (8001558 <MX_TIM1_Init+0x150>)
 80014f2:	f002 ff89 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80014fc:	f000 fa20 	bl	8001940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001504:	2208      	movs	r2, #8
 8001506:	4619      	mov	r1, r3
 8001508:	4813      	ldr	r0, [pc, #76]	; (8001558 <MX_TIM1_Init+0x150>)
 800150a:	f002 ff7d 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001514:	f000 fa14 	bl	8001940 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800152c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001530:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	4619      	mov	r1, r3
 800153a:	4807      	ldr	r0, [pc, #28]	; (8001558 <MX_TIM1_Init+0x150>)
 800153c:	f003 fc02 	bl	8004d44 <HAL_TIMEx_ConfigBreakDeadTime>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001546:	f000 f9fb 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800154a:	4803      	ldr	r0, [pc, #12]	; (8001558 <MX_TIM1_Init+0x150>)
 800154c:	f000 fbd8 	bl	8001d00 <HAL_TIM_MspPostInit>

}
 8001550:	bf00      	nop
 8001552:	3758      	adds	r7, #88	; 0x58
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200005bc 	.word	0x200005bc
 800155c:	40010000 	.word	0x40010000

08001560 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08e      	sub	sp, #56	; 0x38
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001574:	f107 0320 	add.w	r3, r7, #32
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
 800158c:	615a      	str	r2, [r3, #20]
 800158e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001590:	4b38      	ldr	r3, [pc, #224]	; (8001674 <MX_TIM2_Init+0x114>)
 8001592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001596:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001598:	4b36      	ldr	r3, [pc, #216]	; (8001674 <MX_TIM2_Init+0x114>)
 800159a:	2200      	movs	r2, #0
 800159c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b35      	ldr	r3, [pc, #212]	; (8001674 <MX_TIM2_Init+0x114>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015a4:	4b33      	ldr	r3, [pc, #204]	; (8001674 <MX_TIM2_Init+0x114>)
 80015a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ac:	4b31      	ldr	r3, [pc, #196]	; (8001674 <MX_TIM2_Init+0x114>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b2:	4b30      	ldr	r3, [pc, #192]	; (8001674 <MX_TIM2_Init+0x114>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015b8:	482e      	ldr	r0, [pc, #184]	; (8001674 <MX_TIM2_Init+0x114>)
 80015ba:	f002 fe7c 	bl	80042b6 <HAL_TIM_Base_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80015c4:	f000 f9bc 	bl	8001940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d2:	4619      	mov	r1, r3
 80015d4:	4827      	ldr	r0, [pc, #156]	; (8001674 <MX_TIM2_Init+0x114>)
 80015d6:	f002 ffd9 	bl	800458c <HAL_TIM_ConfigClockSource>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80015e0:	f000 f9ae 	bl	8001940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015e4:	4823      	ldr	r0, [pc, #140]	; (8001674 <MX_TIM2_Init+0x114>)
 80015e6:	f002 feb5 	bl	8004354 <HAL_TIM_PWM_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80015f0:	f000 f9a6 	bl	8001940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015fc:	f107 0320 	add.w	r3, r7, #32
 8001600:	4619      	mov	r1, r3
 8001602:	481c      	ldr	r0, [pc, #112]	; (8001674 <MX_TIM2_Init+0x114>)
 8001604:	f003 fb30 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800160e:	f000 f997 	bl	8001940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001612:	2360      	movs	r3, #96	; 0x60
 8001614:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	4619      	mov	r1, r3
 8001628:	4812      	ldr	r0, [pc, #72]	; (8001674 <MX_TIM2_Init+0x114>)
 800162a:	f002 feed 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001634:	f000 f984 	bl	8001940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2204      	movs	r2, #4
 800163c:	4619      	mov	r1, r3
 800163e:	480d      	ldr	r0, [pc, #52]	; (8001674 <MX_TIM2_Init+0x114>)
 8001640:	f002 fee2 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800164a:	f000 f979 	bl	8001940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2208      	movs	r2, #8
 8001652:	4619      	mov	r1, r3
 8001654:	4807      	ldr	r0, [pc, #28]	; (8001674 <MX_TIM2_Init+0x114>)
 8001656:	f002 fed7 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001660:	f000 f96e 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001664:	4803      	ldr	r0, [pc, #12]	; (8001674 <MX_TIM2_Init+0x114>)
 8001666:	f000 fb4b 	bl	8001d00 <HAL_TIM_MspPostInit>

}
 800166a:	bf00      	nop
 800166c:	3738      	adds	r7, #56	; 0x38
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000664 	.word	0x20000664

08001678 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08e      	sub	sp, #56	; 0x38
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168c:	f107 0320 	add.w	r3, r7, #32
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
 80016a4:	615a      	str	r2, [r3, #20]
 80016a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016a8:	4b37      	ldr	r3, [pc, #220]	; (8001788 <MX_TIM3_Init+0x110>)
 80016aa:	4a38      	ldr	r2, [pc, #224]	; (800178c <MX_TIM3_Init+0x114>)
 80016ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016ae:	4b36      	ldr	r3, [pc, #216]	; (8001788 <MX_TIM3_Init+0x110>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b34      	ldr	r3, [pc, #208]	; (8001788 <MX_TIM3_Init+0x110>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016ba:	4b33      	ldr	r3, [pc, #204]	; (8001788 <MX_TIM3_Init+0x110>)
 80016bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c2:	4b31      	ldr	r3, [pc, #196]	; (8001788 <MX_TIM3_Init+0x110>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c8:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <MX_TIM3_Init+0x110>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016ce:	482e      	ldr	r0, [pc, #184]	; (8001788 <MX_TIM3_Init+0x110>)
 80016d0:	f002 fdf1 	bl	80042b6 <HAL_TIM_Base_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016da:	f000 f931 	bl	8001940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016e8:	4619      	mov	r1, r3
 80016ea:	4827      	ldr	r0, [pc, #156]	; (8001788 <MX_TIM3_Init+0x110>)
 80016ec:	f002 ff4e 	bl	800458c <HAL_TIM_ConfigClockSource>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80016f6:	f000 f923 	bl	8001940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016fa:	4823      	ldr	r0, [pc, #140]	; (8001788 <MX_TIM3_Init+0x110>)
 80016fc:	f002 fe2a 	bl	8004354 <HAL_TIM_PWM_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001706:	f000 f91b 	bl	8001940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001712:	f107 0320 	add.w	r3, r7, #32
 8001716:	4619      	mov	r1, r3
 8001718:	481b      	ldr	r0, [pc, #108]	; (8001788 <MX_TIM3_Init+0x110>)
 800171a:	f003 faa5 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001724:	f000 f90c 	bl	8001940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001728:	2360      	movs	r3, #96	; 0x60
 800172a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	2200      	movs	r2, #0
 800173c:	4619      	mov	r1, r3
 800173e:	4812      	ldr	r0, [pc, #72]	; (8001788 <MX_TIM3_Init+0x110>)
 8001740:	f002 fe62 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800174a:	f000 f8f9 	bl	8001940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2204      	movs	r2, #4
 8001752:	4619      	mov	r1, r3
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <MX_TIM3_Init+0x110>)
 8001756:	f002 fe57 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001760:	f000 f8ee 	bl	8001940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2208      	movs	r2, #8
 8001768:	4619      	mov	r1, r3
 800176a:	4807      	ldr	r0, [pc, #28]	; (8001788 <MX_TIM3_Init+0x110>)
 800176c:	f002 fe4c 	bl	8004408 <HAL_TIM_PWM_ConfigChannel>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001776:	f000 f8e3 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800177a:	4803      	ldr	r0, [pc, #12]	; (8001788 <MX_TIM3_Init+0x110>)
 800177c:	f000 fac0 	bl	8001d00 <HAL_TIM_MspPostInit>

}
 8001780:	bf00      	nop
 8001782:	3738      	adds	r7, #56	; 0x38
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000498 	.word	0x20000498
 800178c:	40000400 	.word	0x40000400

08001790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_USART2_UART_Init+0x4c>)
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <MX_USART2_UART_Init+0x50>)
 8001798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <MX_USART2_UART_Init+0x4c>)
 800179c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_USART2_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_USART2_UART_Init+0x4c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_USART2_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_USART2_UART_Init+0x4c>)
 80017b6:	220c      	movs	r2, #12
 80017b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_USART2_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_USART2_UART_Init+0x4c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_USART2_UART_Init+0x4c>)
 80017c8:	f003 fb0e 	bl	8004de8 <HAL_HalfDuplex_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017d2:	f000 f8b5 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200006b0 	.word	0x200006b0
 80017e0:	40004400 	.word	0x40004400

080017e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_DMA_Init+0x3c>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a0b      	ldr	r2, [pc, #44]	; (8001820 <MX_DMA_Init+0x3c>)
 80017f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_DMA_Init+0x3c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	2038      	movs	r0, #56	; 0x38
 800180c:	f001 f9f9 	bl	8002c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001810:	2038      	movs	r0, #56	; 0x38
 8001812:	f001 fa12 	bl	8002c3a <HAL_NVIC_EnableIRQ>

}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800

08001824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b35      	ldr	r3, [pc, #212]	; (8001914 <MX_GPIO_Init+0xf0>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a34      	ldr	r2, [pc, #208]	; (8001914 <MX_GPIO_Init+0xf0>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b32      	ldr	r3, [pc, #200]	; (8001914 <MX_GPIO_Init+0xf0>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <MX_GPIO_Init+0xf0>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a2d      	ldr	r2, [pc, #180]	; (8001914 <MX_GPIO_Init+0xf0>)
 8001860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b2b      	ldr	r3, [pc, #172]	; (8001914 <MX_GPIO_Init+0xf0>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	4b27      	ldr	r3, [pc, #156]	; (8001914 <MX_GPIO_Init+0xf0>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a26      	ldr	r2, [pc, #152]	; (8001914 <MX_GPIO_Init+0xf0>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b24      	ldr	r3, [pc, #144]	; (8001914 <MX_GPIO_Init+0xf0>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <MX_GPIO_Init+0xf0>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a1f      	ldr	r2, [pc, #124]	; (8001914 <MX_GPIO_Init+0xf0>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <MX_GPIO_Init+0xf0>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_4
 80018aa:	2200      	movs	r2, #0
 80018ac:	f242 0175 	movw	r1, #8309	; 0x2075
 80018b0:	4819      	ldr	r0, [pc, #100]	; (8001918 <MX_GPIO_Init+0xf4>)
 80018b2:	f001 fed1 	bl	8003658 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	4619      	mov	r1, r3
 80018cc:	4813      	ldr	r0, [pc, #76]	; (800191c <MX_GPIO_Init+0xf8>)
 80018ce:	f001 fd3f 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB13 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_4
 80018d2:	f242 0375 	movw	r3, #8309	; 0x2075
 80018d6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	480b      	ldr	r0, [pc, #44]	; (8001918 <MX_GPIO_Init+0xf4>)
 80018ec:	f001 fd30 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80018f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <MX_GPIO_Init+0xf4>)
 8001906:	f001 fd23 	bl	8003350 <HAL_GPIO_Init>

}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	; 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800
 8001918:	40020400 	.word	0x40020400
 800191c:	40020800 	.word	0x40020800

08001920 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	adcConvComplete = 1;
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <HAL_ADC_ConvCpltCallback+0x1c>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000200 	.word	0x20000200

08001940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001944:	b672      	cpsid	i
}
 8001946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001948:	e7fe      	b.n	8001948 <Error_Handler+0x8>
	...

0800194c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_MspInit+0x4c>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <HAL_MspInit+0x4c>)
 800195c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001960:	6453      	str	r3, [r2, #68]	; 0x44
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_MspInit+0x4c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_MspInit+0x4c>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a08      	ldr	r2, [pc, #32]	; (8001998 <HAL_MspInit+0x4c>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_MspInit+0x4c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800198a:	2007      	movs	r0, #7
 800198c:	f001 f92e 	bl	8002bec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800

0800199c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08c      	sub	sp, #48	; 0x30
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a49      	ldr	r2, [pc, #292]	; (8001ae0 <HAL_ADC_MspInit+0x144>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	f040 808b 	bne.w	8001ad6 <HAL_ADC_MspInit+0x13a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	61bb      	str	r3, [r7, #24]
 80019c4:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <HAL_ADC_MspInit+0x148>)
 80019c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c8:	4a46      	ldr	r2, [pc, #280]	; (8001ae4 <HAL_ADC_MspInit+0x148>)
 80019ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ce:	6453      	str	r3, [r2, #68]	; 0x44
 80019d0:	4b44      	ldr	r3, [pc, #272]	; (8001ae4 <HAL_ADC_MspInit+0x148>)
 80019d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	4b40      	ldr	r3, [pc, #256]	; (8001ae4 <HAL_ADC_MspInit+0x148>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	4a3f      	ldr	r2, [pc, #252]	; (8001ae4 <HAL_ADC_MspInit+0x148>)
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	6313      	str	r3, [r2, #48]	; 0x30
 80019ec:	4b3d      	ldr	r3, [pc, #244]	; (8001ae4 <HAL_ADC_MspInit+0x148>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	4b39      	ldr	r3, [pc, #228]	; (8001ae4 <HAL_ADC_MspInit+0x148>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	4a38      	ldr	r2, [pc, #224]	; (8001ae4 <HAL_ADC_MspInit+0x148>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6313      	str	r3, [r2, #48]	; 0x30
 8001a08:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <HAL_ADC_MspInit+0x148>)
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <HAL_ADC_MspInit+0x148>)
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	4a31      	ldr	r2, [pc, #196]	; (8001ae4 <HAL_ADC_MspInit+0x148>)
 8001a1e:	f043 0302 	orr.w	r3, r3, #2
 8001a22:	6313      	str	r3, [r2, #48]	; 0x30
 8001a24:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <HAL_ADC_MspInit+0x148>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a30:	233f      	movs	r3, #63	; 0x3f
 8001a32:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a34:	2303      	movs	r3, #3
 8001a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3c:	f107 031c 	add.w	r3, r7, #28
 8001a40:	4619      	mov	r1, r3
 8001a42:	4829      	ldr	r0, [pc, #164]	; (8001ae8 <HAL_ADC_MspInit+0x14c>)
 8001a44:	f001 fc84 	bl	8003350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8001a48:	2319      	movs	r3, #25
 8001a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4824      	ldr	r0, [pc, #144]	; (8001aec <HAL_ADC_MspInit+0x150>)
 8001a5c:	f001 fc78 	bl	8003350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a64:	2303      	movs	r3, #3
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	4619      	mov	r1, r3
 8001a72:	481f      	ldr	r0, [pc, #124]	; (8001af0 <HAL_ADC_MspInit+0x154>)
 8001a74:	f001 fc6c 	bl	8003350 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a78:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <HAL_ADC_MspInit+0x158>)
 8001a7a:	4a1f      	ldr	r2, [pc, #124]	; (8001af8 <HAL_ADC_MspInit+0x15c>)
 8001a7c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <HAL_ADC_MspInit+0x158>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a84:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <HAL_ADC_MspInit+0x158>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <HAL_ADC_MspInit+0x158>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_ADC_MspInit+0x158>)
 8001a92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a96:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <HAL_ADC_MspInit+0x158>)
 8001a9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a9e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <HAL_ADC_MspInit+0x158>)
 8001aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aa6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_ADC_MspInit+0x158>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_ADC_MspInit+0x158>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_ADC_MspInit+0x158>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001aba:	480e      	ldr	r0, [pc, #56]	; (8001af4 <HAL_ADC_MspInit+0x158>)
 8001abc:	f001 f8d8 	bl	8002c70 <HAL_DMA_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8001ac6:	f7ff ff3b 	bl	8001940 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <HAL_ADC_MspInit+0x158>)
 8001ace:	639a      	str	r2, [r3, #56]	; 0x38
 8001ad0:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <HAL_ADC_MspInit+0x158>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	3730      	adds	r7, #48	; 0x30
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40012000 	.word	0x40012000
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020800 	.word	0x40020800
 8001aec:	40020000 	.word	0x40020000
 8001af0:	40020400 	.word	0x40020400
 8001af4:	20000550 	.word	0x20000550
 8001af8:	40026410 	.word	0x40026410

08001afc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a19      	ldr	r2, [pc, #100]	; (8001b80 <HAL_I2C_MspInit+0x84>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d12c      	bne.n	8001b78 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <HAL_I2C_MspInit+0x88>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <HAL_I2C_MspInit+0x88>)
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <HAL_I2C_MspInit+0x88>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b40:	2312      	movs	r3, #18
 8001b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	480c      	ldr	r0, [pc, #48]	; (8001b88 <HAL_I2C_MspInit+0x8c>)
 8001b58:	f001 fbfa 	bl	8003350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_I2C_MspInit+0x88>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <HAL_I2C_MspInit+0x88>)
 8001b66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_I2C_MspInit+0x88>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b78:	bf00      	nop
 8001b7a:	3728      	adds	r7, #40	; 0x28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40005400 	.word	0x40005400
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020400 	.word	0x40020400

08001b8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	; (8001c10 <HAL_SPI_MspInit+0x84>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d12b      	bne.n	8001c06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_SPI_MspInit+0x88>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4a17      	ldr	r2, [pc, #92]	; (8001c14 <HAL_SPI_MspInit+0x88>)
 8001bb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_SPI_MspInit+0x88>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_SPI_MspInit+0x88>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a10      	ldr	r2, [pc, #64]	; (8001c14 <HAL_SPI_MspInit+0x88>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_SPI_MspInit+0x88>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001be6:	23e0      	movs	r3, #224	; 0xe0
 8001be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4805      	ldr	r0, [pc, #20]	; (8001c18 <HAL_SPI_MspInit+0x8c>)
 8001c02:	f001 fba5 	bl	8003350 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c06:	bf00      	nop
 8001c08:	3728      	adds	r7, #40	; 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40013000 	.word	0x40013000
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020000 	.word	0x40020000

08001c1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08c      	sub	sp, #48	; 0x30
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a2d      	ldr	r2, [pc, #180]	; (8001cf0 <HAL_TIM_Base_MspInit+0xd4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d12d      	bne.n	8001c9a <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a2b      	ldr	r2, [pc, #172]	; (8001cf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	61bb      	str	r3, [r7, #24]
 8001c58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a24      	ldr	r2, [pc, #144]	; (8001cf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	4619      	mov	r1, r3
 8001c92:	4819      	ldr	r0, [pc, #100]	; (8001cf8 <HAL_TIM_Base_MspInit+0xdc>)
 8001c94:	f001 fb5c 	bl	8003350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c98:	e026      	b.n	8001ce8 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM2)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca2:	d10e      	bne.n	8001cc2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	693b      	ldr	r3, [r7, #16]
}
 8001cc0:	e012      	b.n	8001ce8 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <HAL_TIM_Base_MspInit+0xe0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d10d      	bne.n	8001ce8 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001cd6:	f043 0302 	orr.w	r3, r3, #2
 8001cda:	6413      	str	r3, [r2, #64]	; 0x40
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_TIM_Base_MspInit+0xd8>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3730      	adds	r7, #48	; 0x30
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40010000 	.word	0x40010000
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40000400 	.word	0x40000400

08001d00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	; 0x30
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 031c 	add.w	r3, r7, #28
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a47      	ldr	r2, [pc, #284]	; (8001e3c <HAL_TIM_MspPostInit+0x13c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d11f      	bne.n	8001d62 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <HAL_TIM_MspPostInit+0x140>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a45      	ldr	r2, [pc, #276]	; (8001e40 <HAL_TIM_MspPostInit+0x140>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b43      	ldr	r3, [pc, #268]	; (8001e40 <HAL_TIM_MspPostInit+0x140>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d50:	2301      	movs	r3, #1
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	4619      	mov	r1, r3
 8001d5a:	483a      	ldr	r0, [pc, #232]	; (8001e44 <HAL_TIM_MspPostInit+0x144>)
 8001d5c:	f001 faf8 	bl	8003350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d60:	e067      	b.n	8001e32 <HAL_TIM_MspPostInit+0x132>
  else if(htim->Instance==TIM2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d6a:	d13e      	bne.n	8001dea <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	4b33      	ldr	r3, [pc, #204]	; (8001e40 <HAL_TIM_MspPostInit+0x140>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	4a32      	ldr	r2, [pc, #200]	; (8001e40 <HAL_TIM_MspPostInit+0x140>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7c:	4b30      	ldr	r3, [pc, #192]	; (8001e40 <HAL_TIM_MspPostInit+0x140>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <HAL_TIM_MspPostInit+0x140>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	4a2b      	ldr	r2, [pc, #172]	; (8001e40 <HAL_TIM_MspPostInit+0x140>)
 8001d92:	f043 0302 	orr.w	r3, r3, #2
 8001d96:	6313      	str	r3, [r2, #48]	; 0x30
 8001d98:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <HAL_TIM_MspPostInit+0x140>)
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001da4:	f248 0302 	movw	r3, #32770	; 0x8002
 8001da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001db6:	2301      	movs	r3, #1
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4820      	ldr	r0, [pc, #128]	; (8001e44 <HAL_TIM_MspPostInit+0x144>)
 8001dc2:	f001 fac5 	bl	8003350 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ddc:	f107 031c 	add.w	r3, r7, #28
 8001de0:	4619      	mov	r1, r3
 8001de2:	4819      	ldr	r0, [pc, #100]	; (8001e48 <HAL_TIM_MspPostInit+0x148>)
 8001de4:	f001 fab4 	bl	8003350 <HAL_GPIO_Init>
}
 8001de8:	e023      	b.n	8001e32 <HAL_TIM_MspPostInit+0x132>
  else if(htim->Instance==TIM3)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <HAL_TIM_MspPostInit+0x14c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d11e      	bne.n	8001e32 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <HAL_TIM_MspPostInit+0x140>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	4a10      	ldr	r2, [pc, #64]	; (8001e40 <HAL_TIM_MspPostInit+0x140>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	6313      	str	r3, [r2, #48]	; 0x30
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <HAL_TIM_MspPostInit+0x140>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001e10:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e22:	2302      	movs	r3, #2
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4808      	ldr	r0, [pc, #32]	; (8001e50 <HAL_TIM_MspPostInit+0x150>)
 8001e2e:	f001 fa8f 	bl	8003350 <HAL_GPIO_Init>
}
 8001e32:	bf00      	nop
 8001e34:	3730      	adds	r7, #48	; 0x30
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40010000 	.word	0x40010000
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40000400 	.word	0x40000400
 8001e50:	40020800 	.word	0x40020800

08001e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <HAL_UART_MspInit+0x84>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d12b      	bne.n	8001ece <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a17      	ldr	r2, [pc, #92]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a10      	ldr	r2, [pc, #64]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_UART_MspInit+0x88>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001eae:	2304      	movs	r3, #4
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eb2:	2312      	movs	r3, #18
 8001eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <HAL_UART_MspInit+0x8c>)
 8001eca:	f001 fa41 	bl	8003350 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	; 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40004400 	.word	0x40004400
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000

08001ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001ee8:	e7fe      	b.n	8001ee8 <NMI_Handler+0x4>

08001eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eee:	e7fe      	b.n	8001eee <HardFault_Handler+0x4>

08001ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <MemManage_Handler+0x4>

08001ef6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001efa:	e7fe      	b.n	8001efa <BusFault_Handler+0x4>

08001efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <UsageFault_Handler+0x4>

08001f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f30:	f000 f960 	bl	80021f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <DMA2_Stream0_IRQHandler+0x10>)
 8001f3e:	f000 ff9d 	bl	8002e7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000550 	.word	0x20000550

08001f4c <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
	return 1;
 8001f50:	2301      	movs	r3, #1
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <_kill>:

int _kill(int pid, int sig) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f66:	f003 fa5d 	bl	8005424 <__errno>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2216      	movs	r2, #22
 8001f6e:	601a      	str	r2, [r3, #0]
	return -1;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <_exit>:

void _exit(int status) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ffe7 	bl	8001f5c <_kill>
	while (1) {
 8001f8e:	e7fe      	b.n	8001f8e <_exit+0x12>

08001f90 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	e00a      	b.n	8001fb8 <_read+0x28>
		*ptr++ = __io_getchar();
 8001fa2:	f3af 8000 	nop.w
 8001fa6:	4601      	mov	r1, r0
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	60ba      	str	r2, [r7, #8]
 8001fae:	b2ca      	uxtb	r2, r1
 8001fb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	dbf0      	blt.n	8001fa2 <_read+0x12>
	}

	return len;
 8001fc0:	687b      	ldr	r3, [r7, #4]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	e009      	b.n	8001ff0 <_write+0x26>
		__io_putchar(*ptr++);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	60ba      	str	r2, [r7, #8]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3301      	adds	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	dbf1      	blt.n	8001fdc <_write+0x12>
	}
	return len;
 8001ff8:	687b      	ldr	r3, [r7, #4]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <_close>:

int _close(int file) {
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
	return -1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <_fstat>:

int _fstat(int file, struct stat *st) {
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800202a:	605a      	str	r2, [r3, #4]
	return 0;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <_isatty>:

int _isatty(int file) {
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
	return 1;
 8002042:	2301      	movs	r3, #1
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
	return 0;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002074:	4a14      	ldr	r2, [pc, #80]	; (80020c8 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002080:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <_sbrk+0x64>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <_sbrk+0x64>)
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <_sbrk+0x68>)
 800208c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	429a      	cmp	r2, r3
 800209a:	d207      	bcs.n	80020ac <_sbrk+0x40>
		errno = ENOMEM;
 800209c:	f003 f9c2 	bl	8005424 <__errno>
 80020a0:	4603      	mov	r3, r0
 80020a2:	220c      	movs	r2, #12
 80020a4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020aa:	e009      	b.n	80020c0 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <_sbrk+0x64>)
 80020bc:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80020be:	68fb      	ldr	r3, [r7, #12]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20018000 	.word	0x20018000
 80020cc:	00000400 	.word	0x00000400
 80020d0:	20000204 	.word	0x20000204
 80020d4:	20000730 	.word	0x20000730

080020d8 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <SystemInit+0x20>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <SystemInit+0x20>)
 80020e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002134 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002100:	480d      	ldr	r0, [pc, #52]	; (8002138 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002102:	490e      	ldr	r1, [pc, #56]	; (800213c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002104:	4a0e      	ldr	r2, [pc, #56]	; (8002140 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002108:	e002      	b.n	8002110 <LoopCopyDataInit>

0800210a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800210c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210e:	3304      	adds	r3, #4

08002110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002114:	d3f9      	bcc.n	800210a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002116:	4a0b      	ldr	r2, [pc, #44]	; (8002144 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002118:	4c0b      	ldr	r4, [pc, #44]	; (8002148 <LoopFillZerobss+0x26>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800211c:	e001      	b.n	8002122 <LoopFillZerobss>

0800211e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002120:	3204      	adds	r2, #4

08002122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002124:	d3fb      	bcc.n	800211e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002126:	f7ff ffd7 	bl	80020d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800212a:	f003 f981 	bl	8005430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800212e:	f7fe ff39 	bl	8000fa4 <main>
  bx  lr    
 8002132:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002134:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800213c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002140:	0800862c 	.word	0x0800862c
  ldr r2, =_sbss
 8002144:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002148:	2000072c 	.word	0x2000072c

0800214c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800214c:	e7fe      	b.n	800214c <ADC_IRQHandler>
	...

08002150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0d      	ldr	r2, [pc, #52]	; (8002190 <HAL_Init+0x40>)
 800215a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_Init+0x40>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <HAL_Init+0x40>)
 8002166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <HAL_Init+0x40>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a07      	ldr	r2, [pc, #28]	; (8002190 <HAL_Init+0x40>)
 8002172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002178:	2003      	movs	r0, #3
 800217a:	f000 fd37 	bl	8002bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217e:	2000      	movs	r0, #0
 8002180:	f000 f808 	bl	8002194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002184:	f7ff fbe2 	bl	800194c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023c00 	.word	0x40023c00

08002194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_InitTick+0x54>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x58>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fd4f 	bl	8002c56 <HAL_SYSTICK_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e00e      	b.n	80021e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d80a      	bhi.n	80021de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c8:	2200      	movs	r2, #0
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021d0:	f000 fd17 	bl	8002c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <HAL_InitTick+0x5c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000008 	.word	0x20000008
 80021ec:	20000010 	.word	0x20000010
 80021f0:	2000000c 	.word	0x2000000c

080021f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x20>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x24>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_IncTick+0x24>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000010 	.word	0x20000010
 8002218:	20000718 	.word	0x20000718

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000718 	.word	0x20000718

08002234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff ffee 	bl	800221c <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800224c:	d005      	beq.n	800225a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_Delay+0x44>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800225a:	bf00      	nop
 800225c:	f7ff ffde 	bl	800221c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	d8f7      	bhi.n	800225c <HAL_Delay+0x28>
  {
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000010 	.word	0x20000010

0800227c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e033      	b.n	80022fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff fb7e 	bl	800199c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d118      	bne.n	80022ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022c2:	f023 0302 	bic.w	r3, r3, #2
 80022c6:	f043 0202 	orr.w	r2, r3, #2
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fa3e 	bl	8002750 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f023 0303 	bic.w	r3, r3, #3
 80022e2:	f043 0201 	orr.w	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
 80022ea:	e001      	b.n	80022f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_ADC_Start_DMA+0x1e>
 800231e:	2302      	movs	r3, #2
 8002320:	e0ce      	b.n	80024c0 <HAL_ADC_Start_DMA+0x1bc>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b01      	cmp	r3, #1
 8002336:	d018      	beq.n	800236a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002348:	4b5f      	ldr	r3, [pc, #380]	; (80024c8 <HAL_ADC_Start_DMA+0x1c4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a5f      	ldr	r2, [pc, #380]	; (80024cc <HAL_ADC_Start_DMA+0x1c8>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0c9a      	lsrs	r2, r3, #18
 8002354:	4613      	mov	r3, r2
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4413      	add	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800235c:	e002      	b.n	8002364 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	3b01      	subs	r3, #1
 8002362:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f9      	bne.n	800235e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002378:	d107      	bne.n	800238a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002388:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	f040 8086 	bne.w	80024a6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023a2:	f023 0301 	bic.w	r3, r3, #1
 80023a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d007      	beq.n	80023cc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d8:	d106      	bne.n	80023e8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	f023 0206 	bic.w	r2, r3, #6
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	645a      	str	r2, [r3, #68]	; 0x44
 80023e6:	e002      	b.n	80023ee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023f6:	4b36      	ldr	r3, [pc, #216]	; (80024d0 <HAL_ADC_Start_DMA+0x1cc>)
 80023f8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	4a35      	ldr	r2, [pc, #212]	; (80024d4 <HAL_ADC_Start_DMA+0x1d0>)
 8002400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	4a34      	ldr	r2, [pc, #208]	; (80024d8 <HAL_ADC_Start_DMA+0x1d4>)
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240e:	4a33      	ldr	r2, [pc, #204]	; (80024dc <HAL_ADC_Start_DMA+0x1d8>)
 8002410:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800241a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800242a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800243a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	334c      	adds	r3, #76	; 0x4c
 8002446:	4619      	mov	r1, r3
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f000 fcbe 	bl	8002dcc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10f      	bne.n	800247c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d129      	bne.n	80024be <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	e020      	b.n	80024be <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a17      	ldr	r2, [pc, #92]	; (80024e0 <HAL_ADC_Start_DMA+0x1dc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d11b      	bne.n	80024be <HAL_ADC_Start_DMA+0x1ba>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d114      	bne.n	80024be <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	e00b      	b.n	80024be <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f043 0210 	orr.w	r2, r3, #16
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f043 0201 	orr.w	r2, r3, #1
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000008 	.word	0x20000008
 80024cc:	431bde83 	.word	0x431bde83
 80024d0:	40012300 	.word	0x40012300
 80024d4:	08002949 	.word	0x08002949
 80024d8:	08002a03 	.word	0x08002a03
 80024dc:	08002a1f 	.word	0x08002a1f
 80024e0:	40012000 	.word	0x40012000

080024e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x1c>
 8002524:	2302      	movs	r3, #2
 8002526:	e105      	b.n	8002734 <HAL_ADC_ConfigChannel+0x228>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b09      	cmp	r3, #9
 8002536:	d925      	bls.n	8002584 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68d9      	ldr	r1, [r3, #12]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	4613      	mov	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4413      	add	r3, r2
 800254c:	3b1e      	subs	r3, #30
 800254e:	2207      	movs	r2, #7
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43da      	mvns	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	400a      	ands	r2, r1
 800255c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68d9      	ldr	r1, [r3, #12]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	b29b      	uxth	r3, r3
 800256e:	4618      	mov	r0, r3
 8002570:	4603      	mov	r3, r0
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4403      	add	r3, r0
 8002576:	3b1e      	subs	r3, #30
 8002578:	409a      	lsls	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	e022      	b.n	80025ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6919      	ldr	r1, [r3, #16]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b29b      	uxth	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	2207      	movs	r2, #7
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	400a      	ands	r2, r1
 80025a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6919      	ldr	r1, [r3, #16]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	4618      	mov	r0, r3
 80025ba:	4603      	mov	r3, r0
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4403      	add	r3, r0
 80025c0:	409a      	lsls	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d824      	bhi.n	800261c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	3b05      	subs	r3, #5
 80025e4:	221f      	movs	r2, #31
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43da      	mvns	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	400a      	ands	r2, r1
 80025f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	4618      	mov	r0, r3
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	3b05      	subs	r3, #5
 800260e:	fa00 f203 	lsl.w	r2, r0, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	635a      	str	r2, [r3, #52]	; 0x34
 800261a:	e04c      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b0c      	cmp	r3, #12
 8002622:	d824      	bhi.n	800266e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	3b23      	subs	r3, #35	; 0x23
 8002636:	221f      	movs	r2, #31
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43da      	mvns	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	400a      	ands	r2, r1
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	b29b      	uxth	r3, r3
 8002652:	4618      	mov	r0, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	3b23      	subs	r3, #35	; 0x23
 8002660:	fa00 f203 	lsl.w	r2, r0, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
 800266c:	e023      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	3b41      	subs	r3, #65	; 0x41
 8002680:	221f      	movs	r2, #31
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	400a      	ands	r2, r1
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	4618      	mov	r0, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	3b41      	subs	r3, #65	; 0x41
 80026aa:	fa00 f203 	lsl.w	r2, r0, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026b6:	4b22      	ldr	r3, [pc, #136]	; (8002740 <HAL_ADC_ConfigChannel+0x234>)
 80026b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a21      	ldr	r2, [pc, #132]	; (8002744 <HAL_ADC_ConfigChannel+0x238>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d109      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x1cc>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b12      	cmp	r3, #18
 80026ca:	d105      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a19      	ldr	r2, [pc, #100]	; (8002744 <HAL_ADC_ConfigChannel+0x238>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d123      	bne.n	800272a <HAL_ADC_ConfigChannel+0x21e>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b10      	cmp	r3, #16
 80026e8:	d003      	beq.n	80026f2 <HAL_ADC_ConfigChannel+0x1e6>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b11      	cmp	r3, #17
 80026f0:	d11b      	bne.n	800272a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b10      	cmp	r3, #16
 8002704:	d111      	bne.n	800272a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <HAL_ADC_ConfigChannel+0x23c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a10      	ldr	r2, [pc, #64]	; (800274c <HAL_ADC_ConfigChannel+0x240>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	0c9a      	lsrs	r2, r3, #18
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800271c:	e002      	b.n	8002724 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	3b01      	subs	r3, #1
 8002722:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f9      	bne.n	800271e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	40012300 	.word	0x40012300
 8002744:	40012000 	.word	0x40012000
 8002748:	20000008 	.word	0x20000008
 800274c:	431bde83 	.word	0x431bde83

08002750 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002758:	4b79      	ldr	r3, [pc, #484]	; (8002940 <ADC_Init+0x1f0>)
 800275a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	431a      	orrs	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002784:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	021a      	lsls	r2, r3, #8
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6899      	ldr	r1, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	4a58      	ldr	r2, [pc, #352]	; (8002944 <ADC_Init+0x1f4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d022      	beq.n	800282e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6899      	ldr	r1, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002818:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6899      	ldr	r1, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	e00f      	b.n	800284e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800283c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800284c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0202 	bic.w	r2, r2, #2
 800285c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6899      	ldr	r1, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	7e1b      	ldrb	r3, [r3, #24]
 8002868:	005a      	lsls	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d01b      	beq.n	80028b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800288a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800289a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	3b01      	subs	r3, #1
 80028a8:	035a      	lsls	r2, r3, #13
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	e007      	b.n	80028c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	3b01      	subs	r3, #1
 80028e0:	051a      	lsls	r2, r3, #20
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6899      	ldr	r1, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002906:	025a      	lsls	r2, r3, #9
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6899      	ldr	r1, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	029a      	lsls	r2, r3, #10
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	609a      	str	r2, [r3, #8]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	40012300 	.word	0x40012300
 8002944:	0f000001 	.word	0x0f000001

08002948 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002954:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800295e:	2b00      	cmp	r3, #0
 8002960:	d13c      	bne.n	80029dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d12b      	bne.n	80029d4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002980:	2b00      	cmp	r3, #0
 8002982:	d127      	bne.n	80029d4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800298e:	2b00      	cmp	r3, #0
 8002990:	d006      	beq.n	80029a0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800299c:	2b00      	cmp	r3, #0
 800299e:	d119      	bne.n	80029d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0220 	bic.w	r2, r2, #32
 80029ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d105      	bne.n	80029d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f043 0201 	orr.w	r2, r3, #1
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f7fe ffa3 	bl	8001920 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029da:	e00e      	b.n	80029fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f7ff fd85 	bl	80024f8 <HAL_ADC_ErrorCallback>
}
 80029ee:	e004      	b.n	80029fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
}
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f7ff fd67 	bl	80024e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a16:	bf00      	nop
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2240      	movs	r2, #64	; 0x40
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f043 0204 	orr.w	r2, r3, #4
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f7ff fd5a 	bl	80024f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a44:	bf00      	nop
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7e:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	60d3      	str	r3, [r2, #12]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <__NVIC_GetPriorityGrouping+0x18>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	f003 0307 	and.w	r3, r3, #7
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	db0b      	blt.n	8002ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	4907      	ldr	r1, [pc, #28]	; (8002ae8 <__NVIC_EnableIRQ+0x38>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000e100 	.word	0xe000e100

08002aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	6039      	str	r1, [r7, #0]
 8002af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	db0a      	blt.n	8002b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	490c      	ldr	r1, [pc, #48]	; (8002b38 <__NVIC_SetPriority+0x4c>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	0112      	lsls	r2, r2, #4
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b14:	e00a      	b.n	8002b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	4908      	ldr	r1, [pc, #32]	; (8002b3c <__NVIC_SetPriority+0x50>)
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	3b04      	subs	r3, #4
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	440b      	add	r3, r1
 8002b2a:	761a      	strb	r2, [r3, #24]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000e100 	.word	0xe000e100
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f1c3 0307 	rsb	r3, r3, #7
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	bf28      	it	cs
 8002b5e:	2304      	movcs	r3, #4
 8002b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2b06      	cmp	r3, #6
 8002b68:	d902      	bls.n	8002b70 <NVIC_EncodePriority+0x30>
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3b03      	subs	r3, #3
 8002b6e:	e000      	b.n	8002b72 <NVIC_EncodePriority+0x32>
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	401a      	ands	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	43d9      	mvns	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	4313      	orrs	r3, r2
         );
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3724      	adds	r7, #36	; 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb8:	d301      	bcc.n	8002bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e00f      	b.n	8002bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bbe:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <SysTick_Config+0x40>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bc6:	210f      	movs	r1, #15
 8002bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bcc:	f7ff ff8e 	bl	8002aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <SysTick_Config+0x40>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd6:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <SysTick_Config+0x40>)
 8002bd8:	2207      	movs	r2, #7
 8002bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	e000e010 	.word	0xe000e010

08002bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ff29 	bl	8002a4c <__NVIC_SetPriorityGrouping>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b086      	sub	sp, #24
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	4603      	mov	r3, r0
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c14:	f7ff ff3e 	bl	8002a94 <__NVIC_GetPriorityGrouping>
 8002c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	6978      	ldr	r0, [r7, #20]
 8002c20:	f7ff ff8e 	bl	8002b40 <NVIC_EncodePriority>
 8002c24:	4602      	mov	r2, r0
 8002c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff5d 	bl	8002aec <__NVIC_SetPriority>
}
 8002c32:	bf00      	nop
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	4603      	mov	r3, r0
 8002c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff31 	bl	8002ab0 <__NVIC_EnableIRQ>
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff ffa2 	bl	8002ba8 <SysTick_Config>
 8002c64:	4603      	mov	r3, r0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c7c:	f7ff face 	bl	800221c <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e099      	b.n	8002dc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cac:	e00f      	b.n	8002cce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cae:	f7ff fab5 	bl	800221c <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b05      	cmp	r3, #5
 8002cba:	d908      	bls.n	8002cce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e078      	b.n	8002dc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1e8      	bne.n	8002cae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	4b38      	ldr	r3, [pc, #224]	; (8002dc8 <HAL_DMA_Init+0x158>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d107      	bne.n	8002d38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	4313      	orrs	r3, r2
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f023 0307 	bic.w	r3, r3, #7
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d117      	bne.n	8002d92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00e      	beq.n	8002d92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fa6f 	bl	8003258 <DMA_CheckFifoParam>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2240      	movs	r2, #64	; 0x40
 8002d84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e016      	b.n	8002dc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fa26 	bl	80031ec <DMA_CalcBaseAndBitshift>
 8002da0:	4603      	mov	r3, r0
 8002da2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	223f      	movs	r2, #63	; 0x3f
 8002daa:	409a      	lsls	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	f010803f 	.word	0xf010803f

08002dcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_DMA_Start_IT+0x26>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e040      	b.n	8002e74 <HAL_DMA_Start_IT+0xa8>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d12f      	bne.n	8002e66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68b9      	ldr	r1, [r7, #8]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f9b8 	bl	8003190 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e24:	223f      	movs	r2, #63	; 0x3f
 8002e26:	409a      	lsls	r2, r3
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0216 	orr.w	r2, r2, #22
 8002e3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0208 	orr.w	r2, r2, #8
 8002e52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e005      	b.n	8002e72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e88:	4b92      	ldr	r3, [pc, #584]	; (80030d4 <HAL_DMA_IRQHandler+0x258>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a92      	ldr	r2, [pc, #584]	; (80030d8 <HAL_DMA_IRQHandler+0x25c>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	0a9b      	lsrs	r3, r3, #10
 8002e94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01a      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d013      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0204 	bic.w	r2, r2, #4
 8002ece:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	f043 0201 	orr.w	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eec:	2201      	movs	r2, #1
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d012      	beq.n	8002f1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f16:	f043 0202 	orr.w	r2, r3, #2
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f22:	2204      	movs	r2, #4
 8002f24:	409a      	lsls	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d012      	beq.n	8002f54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00b      	beq.n	8002f54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f40:	2204      	movs	r2, #4
 8002f42:	409a      	lsls	r2, r3
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4c:	f043 0204 	orr.w	r2, r3, #4
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f58:	2210      	movs	r2, #16
 8002f5a:	409a      	lsls	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d043      	beq.n	8002fec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d03c      	beq.n	8002fec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f76:	2210      	movs	r2, #16
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d018      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d108      	bne.n	8002fac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d024      	beq.n	8002fec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
 8002faa:	e01f      	b.n	8002fec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01b      	beq.n	8002fec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	4798      	blx	r3
 8002fbc:	e016      	b.n	8002fec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d107      	bne.n	8002fdc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0208 	bic.w	r2, r2, #8
 8002fda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 808e 	beq.w	800311a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 8086 	beq.w	800311a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003012:	2220      	movs	r2, #32
 8003014:	409a      	lsls	r2, r3
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b05      	cmp	r3, #5
 8003024:	d136      	bne.n	8003094 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0216 	bic.w	r2, r2, #22
 8003034:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003044:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d103      	bne.n	8003056 <HAL_DMA_IRQHandler+0x1da>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0208 	bic.w	r2, r2, #8
 8003064:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306a:	223f      	movs	r2, #63	; 0x3f
 800306c:	409a      	lsls	r2, r3
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003086:	2b00      	cmp	r3, #0
 8003088:	d07d      	beq.n	8003186 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	4798      	blx	r3
        }
        return;
 8003092:	e078      	b.n	8003186 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d01c      	beq.n	80030dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d108      	bne.n	80030c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d030      	beq.n	800311a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	4798      	blx	r3
 80030c0:	e02b      	b.n	800311a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d027      	beq.n	800311a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	4798      	blx	r3
 80030d2:	e022      	b.n	800311a <HAL_DMA_IRQHandler+0x29e>
 80030d4:	20000008 	.word	0x20000008
 80030d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10f      	bne.n	800310a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0210 	bic.w	r2, r2, #16
 80030f8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311e:	2b00      	cmp	r3, #0
 8003120:	d032      	beq.n	8003188 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d022      	beq.n	8003174 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2205      	movs	r2, #5
 8003132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0201 	bic.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	3301      	adds	r3, #1
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	429a      	cmp	r2, r3
 8003150:	d307      	bcc.n	8003162 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f2      	bne.n	8003146 <HAL_DMA_IRQHandler+0x2ca>
 8003160:	e000      	b.n	8003164 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003162:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4798      	blx	r3
 8003184:	e000      	b.n	8003188 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003186:	bf00      	nop
    }
  }
}
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop

08003190 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	2b40      	cmp	r3, #64	; 0x40
 80031bc:	d108      	bne.n	80031d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031ce:	e007      	b.n	80031e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	60da      	str	r2, [r3, #12]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	3b10      	subs	r3, #16
 80031fc:	4a14      	ldr	r2, [pc, #80]	; (8003250 <DMA_CalcBaseAndBitshift+0x64>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	091b      	lsrs	r3, r3, #4
 8003204:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003206:	4a13      	ldr	r2, [pc, #76]	; (8003254 <DMA_CalcBaseAndBitshift+0x68>)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4413      	add	r3, r2
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b03      	cmp	r3, #3
 8003218:	d909      	bls.n	800322e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003222:	f023 0303 	bic.w	r3, r3, #3
 8003226:	1d1a      	adds	r2, r3, #4
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	659a      	str	r2, [r3, #88]	; 0x58
 800322c:	e007      	b.n	800323e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003236:	f023 0303 	bic.w	r3, r3, #3
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	aaaaaaab 	.word	0xaaaaaaab
 8003254:	08008234 	.word	0x08008234

08003258 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d11f      	bne.n	80032b2 <DMA_CheckFifoParam+0x5a>
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d856      	bhi.n	8003326 <DMA_CheckFifoParam+0xce>
 8003278:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <DMA_CheckFifoParam+0x28>)
 800327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327e:	bf00      	nop
 8003280:	08003291 	.word	0x08003291
 8003284:	080032a3 	.word	0x080032a3
 8003288:	08003291 	.word	0x08003291
 800328c:	08003327 	.word	0x08003327
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d046      	beq.n	800332a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a0:	e043      	b.n	800332a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032aa:	d140      	bne.n	800332e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b0:	e03d      	b.n	800332e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ba:	d121      	bne.n	8003300 <DMA_CheckFifoParam+0xa8>
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d837      	bhi.n	8003332 <DMA_CheckFifoParam+0xda>
 80032c2:	a201      	add	r2, pc, #4	; (adr r2, 80032c8 <DMA_CheckFifoParam+0x70>)
 80032c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c8:	080032d9 	.word	0x080032d9
 80032cc:	080032df 	.word	0x080032df
 80032d0:	080032d9 	.word	0x080032d9
 80032d4:	080032f1 	.word	0x080032f1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
      break;
 80032dc:	e030      	b.n	8003340 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d025      	beq.n	8003336 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ee:	e022      	b.n	8003336 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032f8:	d11f      	bne.n	800333a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032fe:	e01c      	b.n	800333a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d903      	bls.n	800330e <DMA_CheckFifoParam+0xb6>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b03      	cmp	r3, #3
 800330a:	d003      	beq.n	8003314 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800330c:	e018      	b.n	8003340 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	73fb      	strb	r3, [r7, #15]
      break;
 8003312:	e015      	b.n	8003340 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00e      	beq.n	800333e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
      break;
 8003324:	e00b      	b.n	800333e <DMA_CheckFifoParam+0xe6>
      break;
 8003326:	bf00      	nop
 8003328:	e00a      	b.n	8003340 <DMA_CheckFifoParam+0xe8>
      break;
 800332a:	bf00      	nop
 800332c:	e008      	b.n	8003340 <DMA_CheckFifoParam+0xe8>
      break;
 800332e:	bf00      	nop
 8003330:	e006      	b.n	8003340 <DMA_CheckFifoParam+0xe8>
      break;
 8003332:	bf00      	nop
 8003334:	e004      	b.n	8003340 <DMA_CheckFifoParam+0xe8>
      break;
 8003336:	bf00      	nop
 8003338:	e002      	b.n	8003340 <DMA_CheckFifoParam+0xe8>
      break;   
 800333a:	bf00      	nop
 800333c:	e000      	b.n	8003340 <DMA_CheckFifoParam+0xe8>
      break;
 800333e:	bf00      	nop
    }
  } 
  
  return status; 
 8003340:	7bfb      	ldrb	r3, [r7, #15]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop

08003350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003350:	b480      	push	{r7}
 8003352:	b089      	sub	sp, #36	; 0x24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800335e:	2300      	movs	r3, #0
 8003360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
 800336a:	e159      	b.n	8003620 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800336c:	2201      	movs	r2, #1
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4013      	ands	r3, r2
 800337e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	429a      	cmp	r2, r3
 8003386:	f040 8148 	bne.w	800361a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	2b01      	cmp	r3, #1
 8003394:	d005      	beq.n	80033a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d130      	bne.n	8003404 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	2203      	movs	r2, #3
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033d8:	2201      	movs	r2, #1
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f003 0201 	and.w	r2, r3, #1
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	2b03      	cmp	r3, #3
 800340e:	d017      	beq.n	8003440 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	2203      	movs	r2, #3
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d123      	bne.n	8003494 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	08da      	lsrs	r2, r3, #3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3208      	adds	r2, #8
 8003454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003458:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	220f      	movs	r2, #15
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	08da      	lsrs	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3208      	adds	r2, #8
 800348e:	69b9      	ldr	r1, [r7, #24]
 8003490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	2203      	movs	r2, #3
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0203 	and.w	r2, r3, #3
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80a2 	beq.w	800361a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	4b57      	ldr	r3, [pc, #348]	; (8003638 <HAL_GPIO_Init+0x2e8>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	4a56      	ldr	r2, [pc, #344]	; (8003638 <HAL_GPIO_Init+0x2e8>)
 80034e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e4:	6453      	str	r3, [r2, #68]	; 0x44
 80034e6:	4b54      	ldr	r3, [pc, #336]	; (8003638 <HAL_GPIO_Init+0x2e8>)
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034f2:	4a52      	ldr	r2, [pc, #328]	; (800363c <HAL_GPIO_Init+0x2ec>)
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	089b      	lsrs	r3, r3, #2
 80034f8:	3302      	adds	r3, #2
 80034fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	220f      	movs	r2, #15
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4013      	ands	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a49      	ldr	r2, [pc, #292]	; (8003640 <HAL_GPIO_Init+0x2f0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d019      	beq.n	8003552 <HAL_GPIO_Init+0x202>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a48      	ldr	r2, [pc, #288]	; (8003644 <HAL_GPIO_Init+0x2f4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_GPIO_Init+0x1fe>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a47      	ldr	r2, [pc, #284]	; (8003648 <HAL_GPIO_Init+0x2f8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00d      	beq.n	800354a <HAL_GPIO_Init+0x1fa>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a46      	ldr	r2, [pc, #280]	; (800364c <HAL_GPIO_Init+0x2fc>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d007      	beq.n	8003546 <HAL_GPIO_Init+0x1f6>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a45      	ldr	r2, [pc, #276]	; (8003650 <HAL_GPIO_Init+0x300>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d101      	bne.n	8003542 <HAL_GPIO_Init+0x1f2>
 800353e:	2304      	movs	r3, #4
 8003540:	e008      	b.n	8003554 <HAL_GPIO_Init+0x204>
 8003542:	2307      	movs	r3, #7
 8003544:	e006      	b.n	8003554 <HAL_GPIO_Init+0x204>
 8003546:	2303      	movs	r3, #3
 8003548:	e004      	b.n	8003554 <HAL_GPIO_Init+0x204>
 800354a:	2302      	movs	r3, #2
 800354c:	e002      	b.n	8003554 <HAL_GPIO_Init+0x204>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <HAL_GPIO_Init+0x204>
 8003552:	2300      	movs	r3, #0
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	f002 0203 	and.w	r2, r2, #3
 800355a:	0092      	lsls	r2, r2, #2
 800355c:	4093      	lsls	r3, r2
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4313      	orrs	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003564:	4935      	ldr	r1, [pc, #212]	; (800363c <HAL_GPIO_Init+0x2ec>)
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	089b      	lsrs	r3, r3, #2
 800356a:	3302      	adds	r3, #2
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003572:	4b38      	ldr	r3, [pc, #224]	; (8003654 <HAL_GPIO_Init+0x304>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	43db      	mvns	r3, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003596:	4a2f      	ldr	r2, [pc, #188]	; (8003654 <HAL_GPIO_Init+0x304>)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800359c:	4b2d      	ldr	r3, [pc, #180]	; (8003654 <HAL_GPIO_Init+0x304>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035c0:	4a24      	ldr	r2, [pc, #144]	; (8003654 <HAL_GPIO_Init+0x304>)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035c6:	4b23      	ldr	r3, [pc, #140]	; (8003654 <HAL_GPIO_Init+0x304>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ea:	4a1a      	ldr	r2, [pc, #104]	; (8003654 <HAL_GPIO_Init+0x304>)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035f0:	4b18      	ldr	r3, [pc, #96]	; (8003654 <HAL_GPIO_Init+0x304>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003614:	4a0f      	ldr	r2, [pc, #60]	; (8003654 <HAL_GPIO_Init+0x304>)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3301      	adds	r3, #1
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	2b0f      	cmp	r3, #15
 8003624:	f67f aea2 	bls.w	800336c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	3724      	adds	r7, #36	; 0x24
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800
 800363c:	40013800 	.word	0x40013800
 8003640:	40020000 	.word	0x40020000
 8003644:	40020400 	.word	0x40020400
 8003648:	40020800 	.word	0x40020800
 800364c:	40020c00 	.word	0x40020c00
 8003650:	40021000 	.word	0x40021000
 8003654:	40013c00 	.word	0x40013c00

08003658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	807b      	strh	r3, [r7, #2]
 8003664:	4613      	mov	r3, r2
 8003666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003668:	787b      	ldrb	r3, [r7, #1]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800366e:	887a      	ldrh	r2, [r7, #2]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003674:	e003      	b.n	800367e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003676:	887b      	ldrh	r3, [r7, #2]
 8003678:	041a      	lsls	r2, r3, #16
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	619a      	str	r2, [r3, #24]
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e12b      	b.n	80038f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fe fa22 	bl	8001afc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2224      	movs	r2, #36	; 0x24
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036f0:	f000 fd30 	bl	8004154 <HAL_RCC_GetPCLK1Freq>
 80036f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4a81      	ldr	r2, [pc, #516]	; (8003900 <HAL_I2C_Init+0x274>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d807      	bhi.n	8003710 <HAL_I2C_Init+0x84>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a80      	ldr	r2, [pc, #512]	; (8003904 <HAL_I2C_Init+0x278>)
 8003704:	4293      	cmp	r3, r2
 8003706:	bf94      	ite	ls
 8003708:	2301      	movls	r3, #1
 800370a:	2300      	movhi	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	e006      	b.n	800371e <HAL_I2C_Init+0x92>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4a7d      	ldr	r2, [pc, #500]	; (8003908 <HAL_I2C_Init+0x27c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	bf94      	ite	ls
 8003718:	2301      	movls	r3, #1
 800371a:	2300      	movhi	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e0e7      	b.n	80038f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4a78      	ldr	r2, [pc, #480]	; (800390c <HAL_I2C_Init+0x280>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	0c9b      	lsrs	r3, r3, #18
 8003730:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4a6a      	ldr	r2, [pc, #424]	; (8003900 <HAL_I2C_Init+0x274>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d802      	bhi.n	8003760 <HAL_I2C_Init+0xd4>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	3301      	adds	r3, #1
 800375e:	e009      	b.n	8003774 <HAL_I2C_Init+0xe8>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003766:	fb02 f303 	mul.w	r3, r2, r3
 800376a:	4a69      	ldr	r2, [pc, #420]	; (8003910 <HAL_I2C_Init+0x284>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	3301      	adds	r3, #1
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	430b      	orrs	r3, r1
 800377a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003786:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	495c      	ldr	r1, [pc, #368]	; (8003900 <HAL_I2C_Init+0x274>)
 8003790:	428b      	cmp	r3, r1
 8003792:	d819      	bhi.n	80037c8 <HAL_I2C_Init+0x13c>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1e59      	subs	r1, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	fbb1 f3f3 	udiv	r3, r1, r3
 80037a2:	1c59      	adds	r1, r3, #1
 80037a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037a8:	400b      	ands	r3, r1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HAL_I2C_Init+0x138>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1e59      	subs	r1, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80037bc:	3301      	adds	r3, #1
 80037be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c2:	e051      	b.n	8003868 <HAL_I2C_Init+0x1dc>
 80037c4:	2304      	movs	r3, #4
 80037c6:	e04f      	b.n	8003868 <HAL_I2C_Init+0x1dc>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d111      	bne.n	80037f4 <HAL_I2C_Init+0x168>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	1e58      	subs	r0, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	440b      	add	r3, r1
 80037de:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e2:	3301      	adds	r3, #1
 80037e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf0c      	ite	eq
 80037ec:	2301      	moveq	r3, #1
 80037ee:	2300      	movne	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	e012      	b.n	800381a <HAL_I2C_Init+0x18e>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	1e58      	subs	r0, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6859      	ldr	r1, [r3, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	0099      	lsls	r1, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	fbb0 f3f3 	udiv	r3, r0, r3
 800380a:	3301      	adds	r3, #1
 800380c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_I2C_Init+0x196>
 800381e:	2301      	movs	r3, #1
 8003820:	e022      	b.n	8003868 <HAL_I2C_Init+0x1dc>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10e      	bne.n	8003848 <HAL_I2C_Init+0x1bc>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1e58      	subs	r0, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6859      	ldr	r1, [r3, #4]
 8003832:	460b      	mov	r3, r1
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	440b      	add	r3, r1
 8003838:	fbb0 f3f3 	udiv	r3, r0, r3
 800383c:	3301      	adds	r3, #1
 800383e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003846:	e00f      	b.n	8003868 <HAL_I2C_Init+0x1dc>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1e58      	subs	r0, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6859      	ldr	r1, [r3, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	0099      	lsls	r1, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	fbb0 f3f3 	udiv	r3, r0, r3
 800385e:	3301      	adds	r3, #1
 8003860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	6809      	ldr	r1, [r1, #0]
 800386c:	4313      	orrs	r3, r2
 800386e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69da      	ldr	r2, [r3, #28]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003896:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6911      	ldr	r1, [r2, #16]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	68d2      	ldr	r2, [r2, #12]
 80038a2:	4311      	orrs	r1, r2
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	430b      	orrs	r3, r1
 80038aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	000186a0 	.word	0x000186a0
 8003904:	001e847f 	.word	0x001e847f
 8003908:	003d08ff 	.word	0x003d08ff
 800390c:	431bde83 	.word	0x431bde83
 8003910:	10624dd3 	.word	0x10624dd3

08003914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e264      	b.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d075      	beq.n	8003a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003932:	4ba3      	ldr	r3, [pc, #652]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 030c 	and.w	r3, r3, #12
 800393a:	2b04      	cmp	r3, #4
 800393c:	d00c      	beq.n	8003958 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393e:	4ba0      	ldr	r3, [pc, #640]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003946:	2b08      	cmp	r3, #8
 8003948:	d112      	bne.n	8003970 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800394a:	4b9d      	ldr	r3, [pc, #628]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003956:	d10b      	bne.n	8003970 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003958:	4b99      	ldr	r3, [pc, #612]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d05b      	beq.n	8003a1c <HAL_RCC_OscConfig+0x108>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d157      	bne.n	8003a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e23f      	b.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003978:	d106      	bne.n	8003988 <HAL_RCC_OscConfig+0x74>
 800397a:	4b91      	ldr	r3, [pc, #580]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a90      	ldr	r2, [pc, #576]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e01d      	b.n	80039c4 <HAL_RCC_OscConfig+0xb0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003990:	d10c      	bne.n	80039ac <HAL_RCC_OscConfig+0x98>
 8003992:	4b8b      	ldr	r3, [pc, #556]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a8a      	ldr	r2, [pc, #552]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	4b88      	ldr	r3, [pc, #544]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a87      	ldr	r2, [pc, #540]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e00b      	b.n	80039c4 <HAL_RCC_OscConfig+0xb0>
 80039ac:	4b84      	ldr	r3, [pc, #528]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a83      	ldr	r2, [pc, #524]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 80039b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	4b81      	ldr	r3, [pc, #516]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a80      	ldr	r2, [pc, #512]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 80039be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d013      	beq.n	80039f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039cc:	f7fe fc26 	bl	800221c <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d4:	f7fe fc22 	bl	800221c <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b64      	cmp	r3, #100	; 0x64
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e204      	b.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e6:	4b76      	ldr	r3, [pc, #472]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0xc0>
 80039f2:	e014      	b.n	8003a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7fe fc12 	bl	800221c <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039fc:	f7fe fc0e 	bl	800221c <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	; 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e1f0      	b.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0e:	4b6c      	ldr	r3, [pc, #432]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCC_OscConfig+0xe8>
 8003a1a:	e000      	b.n	8003a1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d063      	beq.n	8003af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a2a:	4b65      	ldr	r3, [pc, #404]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00b      	beq.n	8003a4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a36:	4b62      	ldr	r3, [pc, #392]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d11c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a42:	4b5f      	ldr	r3, [pc, #380]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d116      	bne.n	8003a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4e:	4b5c      	ldr	r3, [pc, #368]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <HAL_RCC_OscConfig+0x152>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d001      	beq.n	8003a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e1c4      	b.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a66:	4b56      	ldr	r3, [pc, #344]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4952      	ldr	r1, [pc, #328]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7a:	e03a      	b.n	8003af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d020      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a84:	4b4f      	ldr	r3, [pc, #316]	; (8003bc4 <HAL_RCC_OscConfig+0x2b0>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8a:	f7fe fbc7 	bl	800221c <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a92:	f7fe fbc3 	bl	800221c <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e1a5      	b.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa4:	4b46      	ldr	r3, [pc, #280]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab0:	4b43      	ldr	r3, [pc, #268]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4940      	ldr	r1, [pc, #256]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	600b      	str	r3, [r1, #0]
 8003ac4:	e015      	b.n	8003af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac6:	4b3f      	ldr	r3, [pc, #252]	; (8003bc4 <HAL_RCC_OscConfig+0x2b0>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fe fba6 	bl	800221c <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad4:	f7fe fba2 	bl	800221c <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e184      	b.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae6:	4b36      	ldr	r3, [pc, #216]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d030      	beq.n	8003b60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d016      	beq.n	8003b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b06:	4b30      	ldr	r3, [pc, #192]	; (8003bc8 <HAL_RCC_OscConfig+0x2b4>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0c:	f7fe fb86 	bl	800221c <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b14:	f7fe fb82 	bl	800221c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e164      	b.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b26:	4b26      	ldr	r3, [pc, #152]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0x200>
 8003b32:	e015      	b.n	8003b60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b34:	4b24      	ldr	r3, [pc, #144]	; (8003bc8 <HAL_RCC_OscConfig+0x2b4>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3a:	f7fe fb6f 	bl	800221c <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b42:	f7fe fb6b 	bl	800221c <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e14d      	b.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b54:	4b1a      	ldr	r3, [pc, #104]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1f0      	bne.n	8003b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 80a0 	beq.w	8003cae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b72:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10f      	bne.n	8003b9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	4b0f      	ldr	r3, [pc, #60]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	4a0e      	ldr	r2, [pc, #56]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_RCC_OscConfig+0x2b8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d121      	bne.n	8003bee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <HAL_RCC_OscConfig+0x2b8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a07      	ldr	r2, [pc, #28]	; (8003bcc <HAL_RCC_OscConfig+0x2b8>)
 8003bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb6:	f7fe fb31 	bl	800221c <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbc:	e011      	b.n	8003be2 <HAL_RCC_OscConfig+0x2ce>
 8003bbe:	bf00      	nop
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	42470000 	.word	0x42470000
 8003bc8:	42470e80 	.word	0x42470e80
 8003bcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd0:	f7fe fb24 	bl	800221c <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e106      	b.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be2:	4b85      	ldr	r3, [pc, #532]	; (8003df8 <HAL_RCC_OscConfig+0x4e4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d106      	bne.n	8003c04 <HAL_RCC_OscConfig+0x2f0>
 8003bf6:	4b81      	ldr	r3, [pc, #516]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	4a80      	ldr	r2, [pc, #512]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6713      	str	r3, [r2, #112]	; 0x70
 8003c02:	e01c      	b.n	8003c3e <HAL_RCC_OscConfig+0x32a>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b05      	cmp	r3, #5
 8003c0a:	d10c      	bne.n	8003c26 <HAL_RCC_OscConfig+0x312>
 8003c0c:	4b7b      	ldr	r3, [pc, #492]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	4a7a      	ldr	r2, [pc, #488]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003c12:	f043 0304 	orr.w	r3, r3, #4
 8003c16:	6713      	str	r3, [r2, #112]	; 0x70
 8003c18:	4b78      	ldr	r3, [pc, #480]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	4a77      	ldr	r2, [pc, #476]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	6713      	str	r3, [r2, #112]	; 0x70
 8003c24:	e00b      	b.n	8003c3e <HAL_RCC_OscConfig+0x32a>
 8003c26:	4b75      	ldr	r3, [pc, #468]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	4a74      	ldr	r2, [pc, #464]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70
 8003c32:	4b72      	ldr	r3, [pc, #456]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	4a71      	ldr	r2, [pc, #452]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003c38:	f023 0304 	bic.w	r3, r3, #4
 8003c3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d015      	beq.n	8003c72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c46:	f7fe fae9 	bl	800221c <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4c:	e00a      	b.n	8003c64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c4e:	f7fe fae5 	bl	800221c <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e0c5      	b.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c64:	4b65      	ldr	r3, [pc, #404]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0ee      	beq.n	8003c4e <HAL_RCC_OscConfig+0x33a>
 8003c70:	e014      	b.n	8003c9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c72:	f7fe fad3 	bl	800221c <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fe facf 	bl	800221c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e0af      	b.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c90:	4b5a      	ldr	r3, [pc, #360]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1ee      	bne.n	8003c7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d105      	bne.n	8003cae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca2:	4b56      	ldr	r3, [pc, #344]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	4a55      	ldr	r2, [pc, #340]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 809b 	beq.w	8003dee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cb8:	4b50      	ldr	r3, [pc, #320]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d05c      	beq.n	8003d7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d141      	bne.n	8003d50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ccc:	4b4c      	ldr	r3, [pc, #304]	; (8003e00 <HAL_RCC_OscConfig+0x4ec>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd2:	f7fe faa3 	bl	800221c <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cda:	f7fe fa9f 	bl	800221c <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e081      	b.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cec:	4b43      	ldr	r3, [pc, #268]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f0      	bne.n	8003cda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	019b      	lsls	r3, r3, #6
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	085b      	lsrs	r3, r3, #1
 8003d10:	3b01      	subs	r3, #1
 8003d12:	041b      	lsls	r3, r3, #16
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	061b      	lsls	r3, r3, #24
 8003d1c:	4937      	ldr	r1, [pc, #220]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d22:	4b37      	ldr	r3, [pc, #220]	; (8003e00 <HAL_RCC_OscConfig+0x4ec>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fe fa78 	bl	800221c <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fe fa74 	bl	800221c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e056      	b.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d42:	4b2e      	ldr	r3, [pc, #184]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x41c>
 8003d4e:	e04e      	b.n	8003dee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d50:	4b2b      	ldr	r3, [pc, #172]	; (8003e00 <HAL_RCC_OscConfig+0x4ec>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d56:	f7fe fa61 	bl	800221c <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d5e:	f7fe fa5d 	bl	800221c <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e03f      	b.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d70:	4b22      	ldr	r3, [pc, #136]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1f0      	bne.n	8003d5e <HAL_RCC_OscConfig+0x44a>
 8003d7c:	e037      	b.n	8003dee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e032      	b.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d8a:	4b1c      	ldr	r3, [pc, #112]	; (8003dfc <HAL_RCC_OscConfig+0x4e8>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d028      	beq.n	8003dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d121      	bne.n	8003dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d11a      	bne.n	8003dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dba:	4013      	ands	r3, r2
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dc0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d111      	bne.n	8003dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	085b      	lsrs	r3, r3, #1
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d107      	bne.n	8003dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d001      	beq.n	8003dee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40007000 	.word	0x40007000
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	42470060 	.word	0x42470060

08003e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0cc      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e18:	4b68      	ldr	r3, [pc, #416]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d90c      	bls.n	8003e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b65      	ldr	r3, [pc, #404]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2e:	4b63      	ldr	r3, [pc, #396]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0b8      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d020      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e58:	4b59      	ldr	r3, [pc, #356]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	4a58      	ldr	r2, [pc, #352]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e70:	4b53      	ldr	r3, [pc, #332]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	4a52      	ldr	r2, [pc, #328]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e7c:	4b50      	ldr	r3, [pc, #320]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	494d      	ldr	r1, [pc, #308]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d044      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d107      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	4b47      	ldr	r3, [pc, #284]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d119      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e07f      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d003      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d107      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec2:	4b3f      	ldr	r3, [pc, #252]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e06f      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed2:	4b3b      	ldr	r3, [pc, #236]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e067      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ee2:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f023 0203 	bic.w	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4934      	ldr	r1, [pc, #208]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef4:	f7fe f992 	bl	800221c <HAL_GetTick>
 8003ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003efc:	f7fe f98e 	bl	800221c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e04f      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f12:	4b2b      	ldr	r3, [pc, #172]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 020c 	and.w	r2, r3, #12
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d1eb      	bne.n	8003efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f24:	4b25      	ldr	r3, [pc, #148]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d20c      	bcs.n	8003f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f32:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3a:	4b20      	ldr	r3, [pc, #128]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d001      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e032      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f58:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4916      	ldr	r1, [pc, #88]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	490e      	ldr	r1, [pc, #56]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f8a:	f000 f821 	bl	8003fd0 <HAL_RCC_GetSysClockFreq>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	490a      	ldr	r1, [pc, #40]	; (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f9c:	5ccb      	ldrb	r3, [r1, r3]
 8003f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa2:	4a09      	ldr	r2, [pc, #36]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fa6:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <HAL_RCC_ClockConfig+0x1c8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe f8f2 	bl	8002194 <HAL_InitTick>

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40023c00 	.word	0x40023c00
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	0800821c 	.word	0x0800821c
 8003fc8:	20000008 	.word	0x20000008
 8003fcc:	2000000c 	.word	0x2000000c

08003fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd0:	b5b0      	push	{r4, r5, r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	6079      	str	r1, [r7, #4]
 8003fda:	2100      	movs	r1, #0
 8003fdc:	60f9      	str	r1, [r7, #12]
 8003fde:	2100      	movs	r1, #0
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fe6:	4952      	ldr	r1, [pc, #328]	; (8004130 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fe8:	6889      	ldr	r1, [r1, #8]
 8003fea:	f001 010c 	and.w	r1, r1, #12
 8003fee:	2908      	cmp	r1, #8
 8003ff0:	d00d      	beq.n	800400e <HAL_RCC_GetSysClockFreq+0x3e>
 8003ff2:	2908      	cmp	r1, #8
 8003ff4:	f200 8094 	bhi.w	8004120 <HAL_RCC_GetSysClockFreq+0x150>
 8003ff8:	2900      	cmp	r1, #0
 8003ffa:	d002      	beq.n	8004002 <HAL_RCC_GetSysClockFreq+0x32>
 8003ffc:	2904      	cmp	r1, #4
 8003ffe:	d003      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x38>
 8004000:	e08e      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004002:	4b4c      	ldr	r3, [pc, #304]	; (8004134 <HAL_RCC_GetSysClockFreq+0x164>)
 8004004:	60bb      	str	r3, [r7, #8]
       break;
 8004006:	e08e      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004008:	4b4b      	ldr	r3, [pc, #300]	; (8004138 <HAL_RCC_GetSysClockFreq+0x168>)
 800400a:	60bb      	str	r3, [r7, #8]
      break;
 800400c:	e08b      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800400e:	4948      	ldr	r1, [pc, #288]	; (8004130 <HAL_RCC_GetSysClockFreq+0x160>)
 8004010:	6849      	ldr	r1, [r1, #4]
 8004012:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004016:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004018:	4945      	ldr	r1, [pc, #276]	; (8004130 <HAL_RCC_GetSysClockFreq+0x160>)
 800401a:	6849      	ldr	r1, [r1, #4]
 800401c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004020:	2900      	cmp	r1, #0
 8004022:	d024      	beq.n	800406e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004024:	4942      	ldr	r1, [pc, #264]	; (8004130 <HAL_RCC_GetSysClockFreq+0x160>)
 8004026:	6849      	ldr	r1, [r1, #4]
 8004028:	0989      	lsrs	r1, r1, #6
 800402a:	4608      	mov	r0, r1
 800402c:	f04f 0100 	mov.w	r1, #0
 8004030:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004034:	f04f 0500 	mov.w	r5, #0
 8004038:	ea00 0204 	and.w	r2, r0, r4
 800403c:	ea01 0305 	and.w	r3, r1, r5
 8004040:	493d      	ldr	r1, [pc, #244]	; (8004138 <HAL_RCC_GetSysClockFreq+0x168>)
 8004042:	fb01 f003 	mul.w	r0, r1, r3
 8004046:	2100      	movs	r1, #0
 8004048:	fb01 f102 	mul.w	r1, r1, r2
 800404c:	1844      	adds	r4, r0, r1
 800404e:	493a      	ldr	r1, [pc, #232]	; (8004138 <HAL_RCC_GetSysClockFreq+0x168>)
 8004050:	fba2 0101 	umull	r0, r1, r2, r1
 8004054:	1863      	adds	r3, r4, r1
 8004056:	4619      	mov	r1, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	461a      	mov	r2, r3
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	f7fc fdfa 	bl	8000c58 <__aeabi_uldivmod>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4613      	mov	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	e04a      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406e:	4b30      	ldr	r3, [pc, #192]	; (8004130 <HAL_RCC_GetSysClockFreq+0x160>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	099b      	lsrs	r3, r3, #6
 8004074:	461a      	mov	r2, r3
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800407e:	f04f 0100 	mov.w	r1, #0
 8004082:	ea02 0400 	and.w	r4, r2, r0
 8004086:	ea03 0501 	and.w	r5, r3, r1
 800408a:	4620      	mov	r0, r4
 800408c:	4629      	mov	r1, r5
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	014b      	lsls	r3, r1, #5
 8004098:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800409c:	0142      	lsls	r2, r0, #5
 800409e:	4610      	mov	r0, r2
 80040a0:	4619      	mov	r1, r3
 80040a2:	1b00      	subs	r0, r0, r4
 80040a4:	eb61 0105 	sbc.w	r1, r1, r5
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	018b      	lsls	r3, r1, #6
 80040b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040b6:	0182      	lsls	r2, r0, #6
 80040b8:	1a12      	subs	r2, r2, r0
 80040ba:	eb63 0301 	sbc.w	r3, r3, r1
 80040be:	f04f 0000 	mov.w	r0, #0
 80040c2:	f04f 0100 	mov.w	r1, #0
 80040c6:	00d9      	lsls	r1, r3, #3
 80040c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040cc:	00d0      	lsls	r0, r2, #3
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	1912      	adds	r2, r2, r4
 80040d4:	eb45 0303 	adc.w	r3, r5, r3
 80040d8:	f04f 0000 	mov.w	r0, #0
 80040dc:	f04f 0100 	mov.w	r1, #0
 80040e0:	0299      	lsls	r1, r3, #10
 80040e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80040e6:	0290      	lsls	r0, r2, #10
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4610      	mov	r0, r2
 80040ee:	4619      	mov	r1, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	461a      	mov	r2, r3
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	f7fc fdae 	bl	8000c58 <__aeabi_uldivmod>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4613      	mov	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004104:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <HAL_RCC_GetSysClockFreq+0x160>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	3301      	adds	r3, #1
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
 800411c:	60bb      	str	r3, [r7, #8]
      break;
 800411e:	e002      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004120:	4b04      	ldr	r3, [pc, #16]	; (8004134 <HAL_RCC_GetSysClockFreq+0x164>)
 8004122:	60bb      	str	r3, [r7, #8]
      break;
 8004124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004126:	68bb      	ldr	r3, [r7, #8]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bdb0      	pop	{r4, r5, r7, pc}
 8004130:	40023800 	.word	0x40023800
 8004134:	00f42400 	.word	0x00f42400
 8004138:	017d7840 	.word	0x017d7840

0800413c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004140:	4b03      	ldr	r3, [pc, #12]	; (8004150 <HAL_RCC_GetHCLKFreq+0x14>)
 8004142:	681b      	ldr	r3, [r3, #0]
}
 8004144:	4618      	mov	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	20000008 	.word	0x20000008

08004154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004158:	f7ff fff0 	bl	800413c <HAL_RCC_GetHCLKFreq>
 800415c:	4602      	mov	r2, r0
 800415e:	4b05      	ldr	r3, [pc, #20]	; (8004174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	0a9b      	lsrs	r3, r3, #10
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	4903      	ldr	r1, [pc, #12]	; (8004178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800416a:	5ccb      	ldrb	r3, [r1, r3]
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40023800 	.word	0x40023800
 8004178:	0800822c 	.word	0x0800822c

0800417c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004180:	f7ff ffdc 	bl	800413c <HAL_RCC_GetHCLKFreq>
 8004184:	4602      	mov	r2, r0
 8004186:	4b05      	ldr	r3, [pc, #20]	; (800419c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	0b5b      	lsrs	r3, r3, #13
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	4903      	ldr	r1, [pc, #12]	; (80041a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004192:	5ccb      	ldrb	r3, [r1, r3]
 8004194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004198:	4618      	mov	r0, r3
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40023800 	.word	0x40023800
 80041a0:	0800822c 	.word	0x0800822c

080041a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e07b      	b.n	80042ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d108      	bne.n	80041d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c6:	d009      	beq.n	80041dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	61da      	str	r2, [r3, #28]
 80041ce:	e005      	b.n	80041dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fd fcc8 	bl	8001b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004212:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004260:	ea42 0103 	orr.w	r1, r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	0c1b      	lsrs	r3, r3, #16
 800427a:	f003 0104 	and.w	r1, r3, #4
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	f003 0210 	and.w	r2, r3, #16
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800429c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e041      	b.n	800434c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d106      	bne.n	80042e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7fd fc9d 	bl	8001c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2202      	movs	r2, #2
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3304      	adds	r3, #4
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f000 fa11 	bl	800471c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e041      	b.n	80043ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f839 	bl	80043f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
 8004390:	4619      	mov	r1, r3
 8004392:	4610      	mov	r0, r2
 8004394:	f000 f9c2 	bl	800471c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
	...

08004408 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004422:	2302      	movs	r3, #2
 8004424:	e0ae      	b.n	8004584 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b0c      	cmp	r3, #12
 8004432:	f200 809f 	bhi.w	8004574 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004436:	a201      	add	r2, pc, #4	; (adr r2, 800443c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443c:	08004471 	.word	0x08004471
 8004440:	08004575 	.word	0x08004575
 8004444:	08004575 	.word	0x08004575
 8004448:	08004575 	.word	0x08004575
 800444c:	080044b1 	.word	0x080044b1
 8004450:	08004575 	.word	0x08004575
 8004454:	08004575 	.word	0x08004575
 8004458:	08004575 	.word	0x08004575
 800445c:	080044f3 	.word	0x080044f3
 8004460:	08004575 	.word	0x08004575
 8004464:	08004575 	.word	0x08004575
 8004468:	08004575 	.word	0x08004575
 800446c:	08004533 	.word	0x08004533
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	4618      	mov	r0, r3
 8004478:	f000 f9d0 	bl	800481c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0208 	orr.w	r2, r2, #8
 800448a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0204 	bic.w	r2, r2, #4
 800449a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6999      	ldr	r1, [r3, #24]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	691a      	ldr	r2, [r3, #16]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	619a      	str	r2, [r3, #24]
      break;
 80044ae:	e064      	b.n	800457a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 fa16 	bl	80048e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6999      	ldr	r1, [r3, #24]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	021a      	lsls	r2, r3, #8
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	619a      	str	r2, [r3, #24]
      break;
 80044f0:	e043      	b.n	800457a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68b9      	ldr	r1, [r7, #8]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fa61 	bl	80049c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0208 	orr.w	r2, r2, #8
 800450c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0204 	bic.w	r2, r2, #4
 800451c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69d9      	ldr	r1, [r3, #28]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	61da      	str	r2, [r3, #28]
      break;
 8004530:	e023      	b.n	800457a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 faab 	bl	8004a94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800454c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69da      	ldr	r2, [r3, #28]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800455c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69d9      	ldr	r1, [r3, #28]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	021a      	lsls	r2, r3, #8
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	61da      	str	r2, [r3, #28]
      break;
 8004572:	e002      	b.n	800457a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	75fb      	strb	r3, [r7, #23]
      break;
 8004578:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004582:	7dfb      	ldrb	r3, [r7, #23]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_TIM_ConfigClockSource+0x1c>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e0b4      	b.n	8004712 <HAL_TIM_ConfigClockSource+0x186>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e0:	d03e      	beq.n	8004660 <HAL_TIM_ConfigClockSource+0xd4>
 80045e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e6:	f200 8087 	bhi.w	80046f8 <HAL_TIM_ConfigClockSource+0x16c>
 80045ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ee:	f000 8086 	beq.w	80046fe <HAL_TIM_ConfigClockSource+0x172>
 80045f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f6:	d87f      	bhi.n	80046f8 <HAL_TIM_ConfigClockSource+0x16c>
 80045f8:	2b70      	cmp	r3, #112	; 0x70
 80045fa:	d01a      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0xa6>
 80045fc:	2b70      	cmp	r3, #112	; 0x70
 80045fe:	d87b      	bhi.n	80046f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004600:	2b60      	cmp	r3, #96	; 0x60
 8004602:	d050      	beq.n	80046a6 <HAL_TIM_ConfigClockSource+0x11a>
 8004604:	2b60      	cmp	r3, #96	; 0x60
 8004606:	d877      	bhi.n	80046f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004608:	2b50      	cmp	r3, #80	; 0x50
 800460a:	d03c      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0xfa>
 800460c:	2b50      	cmp	r3, #80	; 0x50
 800460e:	d873      	bhi.n	80046f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004610:	2b40      	cmp	r3, #64	; 0x40
 8004612:	d058      	beq.n	80046c6 <HAL_TIM_ConfigClockSource+0x13a>
 8004614:	2b40      	cmp	r3, #64	; 0x40
 8004616:	d86f      	bhi.n	80046f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004618:	2b30      	cmp	r3, #48	; 0x30
 800461a:	d064      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0x15a>
 800461c:	2b30      	cmp	r3, #48	; 0x30
 800461e:	d86b      	bhi.n	80046f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004620:	2b20      	cmp	r3, #32
 8004622:	d060      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004624:	2b20      	cmp	r3, #32
 8004626:	d867      	bhi.n	80046f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004628:	2b00      	cmp	r3, #0
 800462a:	d05c      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0x15a>
 800462c:	2b10      	cmp	r3, #16
 800462e:	d05a      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004630:	e062      	b.n	80046f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6899      	ldr	r1, [r3, #8]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f000 faf1 	bl	8004c28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004654:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	609a      	str	r2, [r3, #8]
      break;
 800465e:	e04f      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	6899      	ldr	r1, [r3, #8]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f000 fada 	bl	8004c28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004682:	609a      	str	r2, [r3, #8]
      break;
 8004684:	e03c      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	6859      	ldr	r1, [r3, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	461a      	mov	r2, r3
 8004694:	f000 fa4e 	bl	8004b34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2150      	movs	r1, #80	; 0x50
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 faa7 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 80046a4:	e02c      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	6859      	ldr	r1, [r3, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	461a      	mov	r2, r3
 80046b4:	f000 fa6d 	bl	8004b92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2160      	movs	r1, #96	; 0x60
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fa97 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 80046c4:	e01c      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6859      	ldr	r1, [r3, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	461a      	mov	r2, r3
 80046d4:	f000 fa2e 	bl	8004b34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2140      	movs	r1, #64	; 0x40
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fa87 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 80046e4:	e00c      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4619      	mov	r1, r3
 80046f0:	4610      	mov	r0, r2
 80046f2:	f000 fa7e 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 80046f6:	e003      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
      break;
 80046fc:	e000      	b.n	8004700 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004710:	7bfb      	ldrb	r3, [r7, #15]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a34      	ldr	r2, [pc, #208]	; (8004800 <TIM_Base_SetConfig+0xe4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00f      	beq.n	8004754 <TIM_Base_SetConfig+0x38>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473a:	d00b      	beq.n	8004754 <TIM_Base_SetConfig+0x38>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a31      	ldr	r2, [pc, #196]	; (8004804 <TIM_Base_SetConfig+0xe8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d007      	beq.n	8004754 <TIM_Base_SetConfig+0x38>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a30      	ldr	r2, [pc, #192]	; (8004808 <TIM_Base_SetConfig+0xec>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d003      	beq.n	8004754 <TIM_Base_SetConfig+0x38>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a2f      	ldr	r2, [pc, #188]	; (800480c <TIM_Base_SetConfig+0xf0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d108      	bne.n	8004766 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a25      	ldr	r2, [pc, #148]	; (8004800 <TIM_Base_SetConfig+0xe4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d01b      	beq.n	80047a6 <TIM_Base_SetConfig+0x8a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004774:	d017      	beq.n	80047a6 <TIM_Base_SetConfig+0x8a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a22      	ldr	r2, [pc, #136]	; (8004804 <TIM_Base_SetConfig+0xe8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <TIM_Base_SetConfig+0x8a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a21      	ldr	r2, [pc, #132]	; (8004808 <TIM_Base_SetConfig+0xec>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00f      	beq.n	80047a6 <TIM_Base_SetConfig+0x8a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a20      	ldr	r2, [pc, #128]	; (800480c <TIM_Base_SetConfig+0xf0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00b      	beq.n	80047a6 <TIM_Base_SetConfig+0x8a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a1f      	ldr	r2, [pc, #124]	; (8004810 <TIM_Base_SetConfig+0xf4>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d007      	beq.n	80047a6 <TIM_Base_SetConfig+0x8a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a1e      	ldr	r2, [pc, #120]	; (8004814 <TIM_Base_SetConfig+0xf8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d003      	beq.n	80047a6 <TIM_Base_SetConfig+0x8a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a1d      	ldr	r2, [pc, #116]	; (8004818 <TIM_Base_SetConfig+0xfc>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d108      	bne.n	80047b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a08      	ldr	r2, [pc, #32]	; (8004800 <TIM_Base_SetConfig+0xe4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d103      	bne.n	80047ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	615a      	str	r2, [r3, #20]
}
 80047f2:	bf00      	nop
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40010000 	.word	0x40010000
 8004804:	40000400 	.word	0x40000400
 8004808:	40000800 	.word	0x40000800
 800480c:	40000c00 	.word	0x40000c00
 8004810:	40014000 	.word	0x40014000
 8004814:	40014400 	.word	0x40014400
 8004818:	40014800 	.word	0x40014800

0800481c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	f023 0201 	bic.w	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0303 	bic.w	r3, r3, #3
 8004852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f023 0302 	bic.w	r3, r3, #2
 8004864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	4313      	orrs	r3, r2
 800486e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a1c      	ldr	r2, [pc, #112]	; (80048e4 <TIM_OC1_SetConfig+0xc8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d10c      	bne.n	8004892 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f023 0308 	bic.w	r3, r3, #8
 800487e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f023 0304 	bic.w	r3, r3, #4
 8004890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a13      	ldr	r2, [pc, #76]	; (80048e4 <TIM_OC1_SetConfig+0xc8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d111      	bne.n	80048be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	621a      	str	r2, [r3, #32]
}
 80048d8:	bf00      	nop
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	40010000 	.word	0x40010000

080048e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f023 0210 	bic.w	r2, r3, #16
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800491e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	021b      	lsls	r3, r3, #8
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f023 0320 	bic.w	r3, r3, #32
 8004932:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a1e      	ldr	r2, [pc, #120]	; (80049bc <TIM_OC2_SetConfig+0xd4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d10d      	bne.n	8004964 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800494e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004962:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a15      	ldr	r2, [pc, #84]	; (80049bc <TIM_OC2_SetConfig+0xd4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d113      	bne.n	8004994 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004972:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800497a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	621a      	str	r2, [r3, #32]
}
 80049ae:	bf00      	nop
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40010000 	.word	0x40010000

080049c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0303 	bic.w	r3, r3, #3
 80049f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a1d      	ldr	r2, [pc, #116]	; (8004a90 <TIM_OC3_SetConfig+0xd0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d10d      	bne.n	8004a3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a14      	ldr	r2, [pc, #80]	; (8004a90 <TIM_OC3_SetConfig+0xd0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d113      	bne.n	8004a6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	621a      	str	r2, [r3, #32]
}
 8004a84:	bf00      	nop
 8004a86:	371c      	adds	r7, #28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	40010000 	.word	0x40010000

08004a94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	031b      	lsls	r3, r3, #12
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a10      	ldr	r2, [pc, #64]	; (8004b30 <TIM_OC4_SetConfig+0x9c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d109      	bne.n	8004b08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004afa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	019b      	lsls	r3, r3, #6
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	621a      	str	r2, [r3, #32]
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40010000 	.word	0x40010000

08004b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	f023 0201 	bic.w	r2, r3, #1
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f023 030a 	bic.w	r3, r3, #10
 8004b70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	621a      	str	r2, [r3, #32]
}
 8004b86:	bf00      	nop
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b087      	sub	sp, #28
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f023 0210 	bic.w	r2, r3, #16
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	031b      	lsls	r3, r3, #12
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f043 0307 	orr.w	r3, r3, #7
 8004c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	609a      	str	r2, [r3, #8]
}
 8004c1c:	bf00      	nop
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	021a      	lsls	r2, r3, #8
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	609a      	str	r2, [r3, #8]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e050      	b.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1c      	ldr	r2, [pc, #112]	; (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d018      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ccc:	d013      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a18      	ldr	r2, [pc, #96]	; (8004d34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00e      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a16      	ldr	r2, [pc, #88]	; (8004d38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d009      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a15      	ldr	r2, [pc, #84]	; (8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d004      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a13      	ldr	r2, [pc, #76]	; (8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d10c      	bne.n	8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40010000 	.word	0x40010000
 8004d34:	40000400 	.word	0x40000400
 8004d38:	40000800 	.word	0x40000800
 8004d3c:	40000c00 	.word	0x40000c00
 8004d40:	40014000 	.word	0x40014000

08004d44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e03d      	b.n	8004ddc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e047      	b.n	8004e8a <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fd f820 	bl	8001e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2224      	movs	r2, #36	; 0x24
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f931 	bl	8005094 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695a      	ldr	r2, [r3, #20]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004e50:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695a      	ldr	r2, [r3, #20]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0208 	orr.w	r2, r2, #8
 8004e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b08a      	sub	sp, #40	; 0x28
 8004e96:	af02      	add	r7, sp, #8
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d17c      	bne.n	8004fac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <HAL_UART_Transmit+0x2c>
 8004eb8:	88fb      	ldrh	r3, [r7, #6]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e075      	b.n	8004fae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_UART_Transmit+0x3e>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e06e      	b.n	8004fae <HAL_UART_Transmit+0x11c>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2221      	movs	r2, #33	; 0x21
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ee6:	f7fd f999 	bl	800221c <HAL_GetTick>
 8004eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	88fa      	ldrh	r2, [r7, #6]
 8004ef0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	88fa      	ldrh	r2, [r7, #6]
 8004ef6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f00:	d108      	bne.n	8004f14 <HAL_UART_Transmit+0x82>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d104      	bne.n	8004f14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	e003      	b.n	8004f1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f24:	e02a      	b.n	8004f7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2180      	movs	r1, #128	; 0x80
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f840 	bl	8004fb6 <UART_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e036      	b.n	8004fae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10b      	bne.n	8004f5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	3302      	adds	r3, #2
 8004f5a:	61bb      	str	r3, [r7, #24]
 8004f5c:	e007      	b.n	8004f6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	781a      	ldrb	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1cf      	bne.n	8004f26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2140      	movs	r1, #64	; 0x40
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f810 	bl	8004fb6 <UART_WaitOnFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e006      	b.n	8004fae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e000      	b.n	8004fae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004fac:	2302      	movs	r3, #2
  }
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3720      	adds	r7, #32
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b090      	sub	sp, #64	; 0x40
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	603b      	str	r3, [r7, #0]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc6:	e050      	b.n	800506a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fce:	d04c      	beq.n	800506a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d007      	beq.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fd6:	f7fd f921 	bl	800221c <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d241      	bcs.n	800506a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	330c      	adds	r3, #12
 8004fec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	e853 3f00 	ldrex	r3, [r3]
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	330c      	adds	r3, #12
 8005004:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005006:	637a      	str	r2, [r7, #52]	; 0x34
 8005008:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800500c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e5      	bne.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3314      	adds	r3, #20
 8005020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	613b      	str	r3, [r7, #16]
   return(result);
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f023 0301 	bic.w	r3, r3, #1
 8005030:	63bb      	str	r3, [r7, #56]	; 0x38
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3314      	adds	r3, #20
 8005038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800503a:	623a      	str	r2, [r7, #32]
 800503c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503e:	69f9      	ldr	r1, [r7, #28]
 8005040:	6a3a      	ldr	r2, [r7, #32]
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	61bb      	str	r3, [r7, #24]
   return(result);
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e5      	bne.n	800501a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e00f      	b.n	800508a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4013      	ands	r3, r2
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	429a      	cmp	r2, r3
 8005078:	bf0c      	ite	eq
 800507a:	2301      	moveq	r3, #1
 800507c:	2300      	movne	r3, #0
 800507e:	b2db      	uxtb	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	429a      	cmp	r2, r3
 8005086:	d09f      	beq.n	8004fc8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3740      	adds	r7, #64	; 0x40
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005098:	b09f      	sub	sp, #124	; 0x7c
 800509a:	af00      	add	r7, sp, #0
 800509c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800509e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050aa:	68d9      	ldr	r1, [r3, #12]
 80050ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	ea40 0301 	orr.w	r3, r0, r1
 80050b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	431a      	orrs	r2, r3
 80050c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	431a      	orrs	r2, r3
 80050c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80050ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050d8:	f021 010c 	bic.w	r1, r1, #12
 80050dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050e2:	430b      	orrs	r3, r1
 80050e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f2:	6999      	ldr	r1, [r3, #24]
 80050f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	ea40 0301 	orr.w	r3, r0, r1
 80050fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	4bc5      	ldr	r3, [pc, #788]	; (8005418 <UART_SetConfig+0x384>)
 8005104:	429a      	cmp	r2, r3
 8005106:	d004      	beq.n	8005112 <UART_SetConfig+0x7e>
 8005108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	4bc3      	ldr	r3, [pc, #780]	; (800541c <UART_SetConfig+0x388>)
 800510e:	429a      	cmp	r2, r3
 8005110:	d103      	bne.n	800511a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005112:	f7ff f833 	bl	800417c <HAL_RCC_GetPCLK2Freq>
 8005116:	6778      	str	r0, [r7, #116]	; 0x74
 8005118:	e002      	b.n	8005120 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800511a:	f7ff f81b 	bl	8004154 <HAL_RCC_GetPCLK1Freq>
 800511e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005128:	f040 80b6 	bne.w	8005298 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800512c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800512e:	461c      	mov	r4, r3
 8005130:	f04f 0500 	mov.w	r5, #0
 8005134:	4622      	mov	r2, r4
 8005136:	462b      	mov	r3, r5
 8005138:	1891      	adds	r1, r2, r2
 800513a:	6439      	str	r1, [r7, #64]	; 0x40
 800513c:	415b      	adcs	r3, r3
 800513e:	647b      	str	r3, [r7, #68]	; 0x44
 8005140:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005144:	1912      	adds	r2, r2, r4
 8005146:	eb45 0303 	adc.w	r3, r5, r3
 800514a:	f04f 0000 	mov.w	r0, #0
 800514e:	f04f 0100 	mov.w	r1, #0
 8005152:	00d9      	lsls	r1, r3, #3
 8005154:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005158:	00d0      	lsls	r0, r2, #3
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	1911      	adds	r1, r2, r4
 8005160:	6639      	str	r1, [r7, #96]	; 0x60
 8005162:	416b      	adcs	r3, r5
 8005164:	667b      	str	r3, [r7, #100]	; 0x64
 8005166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	461a      	mov	r2, r3
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	1891      	adds	r1, r2, r2
 8005172:	63b9      	str	r1, [r7, #56]	; 0x38
 8005174:	415b      	adcs	r3, r3
 8005176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800517c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005180:	f7fb fd6a 	bl	8000c58 <__aeabi_uldivmod>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4ba5      	ldr	r3, [pc, #660]	; (8005420 <UART_SetConfig+0x38c>)
 800518a:	fba3 2302 	umull	r2, r3, r3, r2
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	011e      	lsls	r6, r3, #4
 8005192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005194:	461c      	mov	r4, r3
 8005196:	f04f 0500 	mov.w	r5, #0
 800519a:	4622      	mov	r2, r4
 800519c:	462b      	mov	r3, r5
 800519e:	1891      	adds	r1, r2, r2
 80051a0:	6339      	str	r1, [r7, #48]	; 0x30
 80051a2:	415b      	adcs	r3, r3
 80051a4:	637b      	str	r3, [r7, #52]	; 0x34
 80051a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80051aa:	1912      	adds	r2, r2, r4
 80051ac:	eb45 0303 	adc.w	r3, r5, r3
 80051b0:	f04f 0000 	mov.w	r0, #0
 80051b4:	f04f 0100 	mov.w	r1, #0
 80051b8:	00d9      	lsls	r1, r3, #3
 80051ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051be:	00d0      	lsls	r0, r2, #3
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	1911      	adds	r1, r2, r4
 80051c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80051c8:	416b      	adcs	r3, r5
 80051ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	461a      	mov	r2, r3
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	1891      	adds	r1, r2, r2
 80051d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80051da:	415b      	adcs	r3, r3
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80051e6:	f7fb fd37 	bl	8000c58 <__aeabi_uldivmod>
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	4b8c      	ldr	r3, [pc, #560]	; (8005420 <UART_SetConfig+0x38c>)
 80051f0:	fba3 1302 	umull	r1, r3, r3, r2
 80051f4:	095b      	lsrs	r3, r3, #5
 80051f6:	2164      	movs	r1, #100	; 0x64
 80051f8:	fb01 f303 	mul.w	r3, r1, r3
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	3332      	adds	r3, #50	; 0x32
 8005202:	4a87      	ldr	r2, [pc, #540]	; (8005420 <UART_SetConfig+0x38c>)
 8005204:	fba2 2303 	umull	r2, r3, r2, r3
 8005208:	095b      	lsrs	r3, r3, #5
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005210:	441e      	add	r6, r3
 8005212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005214:	4618      	mov	r0, r3
 8005216:	f04f 0100 	mov.w	r1, #0
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	1894      	adds	r4, r2, r2
 8005220:	623c      	str	r4, [r7, #32]
 8005222:	415b      	adcs	r3, r3
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
 8005226:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800522a:	1812      	adds	r2, r2, r0
 800522c:	eb41 0303 	adc.w	r3, r1, r3
 8005230:	f04f 0400 	mov.w	r4, #0
 8005234:	f04f 0500 	mov.w	r5, #0
 8005238:	00dd      	lsls	r5, r3, #3
 800523a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800523e:	00d4      	lsls	r4, r2, #3
 8005240:	4622      	mov	r2, r4
 8005242:	462b      	mov	r3, r5
 8005244:	1814      	adds	r4, r2, r0
 8005246:	653c      	str	r4, [r7, #80]	; 0x50
 8005248:	414b      	adcs	r3, r1
 800524a:	657b      	str	r3, [r7, #84]	; 0x54
 800524c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	461a      	mov	r2, r3
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	1891      	adds	r1, r2, r2
 8005258:	61b9      	str	r1, [r7, #24]
 800525a:	415b      	adcs	r3, r3
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005262:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005266:	f7fb fcf7 	bl	8000c58 <__aeabi_uldivmod>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	4b6c      	ldr	r3, [pc, #432]	; (8005420 <UART_SetConfig+0x38c>)
 8005270:	fba3 1302 	umull	r1, r3, r3, r2
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	2164      	movs	r1, #100	; 0x64
 8005278:	fb01 f303 	mul.w	r3, r1, r3
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	3332      	adds	r3, #50	; 0x32
 8005282:	4a67      	ldr	r2, [pc, #412]	; (8005420 <UART_SetConfig+0x38c>)
 8005284:	fba2 2303 	umull	r2, r3, r2, r3
 8005288:	095b      	lsrs	r3, r3, #5
 800528a:	f003 0207 	and.w	r2, r3, #7
 800528e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4432      	add	r2, r6
 8005294:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005296:	e0b9      	b.n	800540c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800529a:	461c      	mov	r4, r3
 800529c:	f04f 0500 	mov.w	r5, #0
 80052a0:	4622      	mov	r2, r4
 80052a2:	462b      	mov	r3, r5
 80052a4:	1891      	adds	r1, r2, r2
 80052a6:	6139      	str	r1, [r7, #16]
 80052a8:	415b      	adcs	r3, r3
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052b0:	1912      	adds	r2, r2, r4
 80052b2:	eb45 0303 	adc.w	r3, r5, r3
 80052b6:	f04f 0000 	mov.w	r0, #0
 80052ba:	f04f 0100 	mov.w	r1, #0
 80052be:	00d9      	lsls	r1, r3, #3
 80052c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052c4:	00d0      	lsls	r0, r2, #3
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	eb12 0804 	adds.w	r8, r2, r4
 80052ce:	eb43 0905 	adc.w	r9, r3, r5
 80052d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f04f 0100 	mov.w	r1, #0
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	008b      	lsls	r3, r1, #2
 80052e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052ea:	0082      	lsls	r2, r0, #2
 80052ec:	4640      	mov	r0, r8
 80052ee:	4649      	mov	r1, r9
 80052f0:	f7fb fcb2 	bl	8000c58 <__aeabi_uldivmod>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4b49      	ldr	r3, [pc, #292]	; (8005420 <UART_SetConfig+0x38c>)
 80052fa:	fba3 2302 	umull	r2, r3, r3, r2
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	011e      	lsls	r6, r3, #4
 8005302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005304:	4618      	mov	r0, r3
 8005306:	f04f 0100 	mov.w	r1, #0
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	1894      	adds	r4, r2, r2
 8005310:	60bc      	str	r4, [r7, #8]
 8005312:	415b      	adcs	r3, r3
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800531a:	1812      	adds	r2, r2, r0
 800531c:	eb41 0303 	adc.w	r3, r1, r3
 8005320:	f04f 0400 	mov.w	r4, #0
 8005324:	f04f 0500 	mov.w	r5, #0
 8005328:	00dd      	lsls	r5, r3, #3
 800532a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800532e:	00d4      	lsls	r4, r2, #3
 8005330:	4622      	mov	r2, r4
 8005332:	462b      	mov	r3, r5
 8005334:	1814      	adds	r4, r2, r0
 8005336:	64bc      	str	r4, [r7, #72]	; 0x48
 8005338:	414b      	adcs	r3, r1
 800533a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800533c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	4618      	mov	r0, r3
 8005342:	f04f 0100 	mov.w	r1, #0
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	008b      	lsls	r3, r1, #2
 8005350:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005354:	0082      	lsls	r2, r0, #2
 8005356:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800535a:	f7fb fc7d 	bl	8000c58 <__aeabi_uldivmod>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	4b2f      	ldr	r3, [pc, #188]	; (8005420 <UART_SetConfig+0x38c>)
 8005364:	fba3 1302 	umull	r1, r3, r3, r2
 8005368:	095b      	lsrs	r3, r3, #5
 800536a:	2164      	movs	r1, #100	; 0x64
 800536c:	fb01 f303 	mul.w	r3, r1, r3
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	3332      	adds	r3, #50	; 0x32
 8005376:	4a2a      	ldr	r2, [pc, #168]	; (8005420 <UART_SetConfig+0x38c>)
 8005378:	fba2 2303 	umull	r2, r3, r2, r3
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005382:	441e      	add	r6, r3
 8005384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005386:	4618      	mov	r0, r3
 8005388:	f04f 0100 	mov.w	r1, #0
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	1894      	adds	r4, r2, r2
 8005392:	603c      	str	r4, [r7, #0]
 8005394:	415b      	adcs	r3, r3
 8005396:	607b      	str	r3, [r7, #4]
 8005398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800539c:	1812      	adds	r2, r2, r0
 800539e:	eb41 0303 	adc.w	r3, r1, r3
 80053a2:	f04f 0400 	mov.w	r4, #0
 80053a6:	f04f 0500 	mov.w	r5, #0
 80053aa:	00dd      	lsls	r5, r3, #3
 80053ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053b0:	00d4      	lsls	r4, r2, #3
 80053b2:	4622      	mov	r2, r4
 80053b4:	462b      	mov	r3, r5
 80053b6:	eb12 0a00 	adds.w	sl, r2, r0
 80053ba:	eb43 0b01 	adc.w	fp, r3, r1
 80053be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f04f 0100 	mov.w	r1, #0
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	008b      	lsls	r3, r1, #2
 80053d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053d6:	0082      	lsls	r2, r0, #2
 80053d8:	4650      	mov	r0, sl
 80053da:	4659      	mov	r1, fp
 80053dc:	f7fb fc3c 	bl	8000c58 <__aeabi_uldivmod>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4b0e      	ldr	r3, [pc, #56]	; (8005420 <UART_SetConfig+0x38c>)
 80053e6:	fba3 1302 	umull	r1, r3, r3, r2
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	2164      	movs	r1, #100	; 0x64
 80053ee:	fb01 f303 	mul.w	r3, r1, r3
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	3332      	adds	r3, #50	; 0x32
 80053f8:	4a09      	ldr	r2, [pc, #36]	; (8005420 <UART_SetConfig+0x38c>)
 80053fa:	fba2 2303 	umull	r2, r3, r2, r3
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	f003 020f 	and.w	r2, r3, #15
 8005404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4432      	add	r2, r6
 800540a:	609a      	str	r2, [r3, #8]
}
 800540c:	bf00      	nop
 800540e:	377c      	adds	r7, #124	; 0x7c
 8005410:	46bd      	mov	sp, r7
 8005412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005416:	bf00      	nop
 8005418:	40011000 	.word	0x40011000
 800541c:	40011400 	.word	0x40011400
 8005420:	51eb851f 	.word	0x51eb851f

08005424 <__errno>:
 8005424:	4b01      	ldr	r3, [pc, #4]	; (800542c <__errno+0x8>)
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	20000014 	.word	0x20000014

08005430 <__libc_init_array>:
 8005430:	b570      	push	{r4, r5, r6, lr}
 8005432:	4d0d      	ldr	r5, [pc, #52]	; (8005468 <__libc_init_array+0x38>)
 8005434:	4c0d      	ldr	r4, [pc, #52]	; (800546c <__libc_init_array+0x3c>)
 8005436:	1b64      	subs	r4, r4, r5
 8005438:	10a4      	asrs	r4, r4, #2
 800543a:	2600      	movs	r6, #0
 800543c:	42a6      	cmp	r6, r4
 800543e:	d109      	bne.n	8005454 <__libc_init_array+0x24>
 8005440:	4d0b      	ldr	r5, [pc, #44]	; (8005470 <__libc_init_array+0x40>)
 8005442:	4c0c      	ldr	r4, [pc, #48]	; (8005474 <__libc_init_array+0x44>)
 8005444:	f002 feb6 	bl	80081b4 <_init>
 8005448:	1b64      	subs	r4, r4, r5
 800544a:	10a4      	asrs	r4, r4, #2
 800544c:	2600      	movs	r6, #0
 800544e:	42a6      	cmp	r6, r4
 8005450:	d105      	bne.n	800545e <__libc_init_array+0x2e>
 8005452:	bd70      	pop	{r4, r5, r6, pc}
 8005454:	f855 3b04 	ldr.w	r3, [r5], #4
 8005458:	4798      	blx	r3
 800545a:	3601      	adds	r6, #1
 800545c:	e7ee      	b.n	800543c <__libc_init_array+0xc>
 800545e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005462:	4798      	blx	r3
 8005464:	3601      	adds	r6, #1
 8005466:	e7f2      	b.n	800544e <__libc_init_array+0x1e>
 8005468:	08008624 	.word	0x08008624
 800546c:	08008624 	.word	0x08008624
 8005470:	08008624 	.word	0x08008624
 8005474:	08008628 	.word	0x08008628

08005478 <memset>:
 8005478:	4402      	add	r2, r0
 800547a:	4603      	mov	r3, r0
 800547c:	4293      	cmp	r3, r2
 800547e:	d100      	bne.n	8005482 <memset+0xa>
 8005480:	4770      	bx	lr
 8005482:	f803 1b01 	strb.w	r1, [r3], #1
 8005486:	e7f9      	b.n	800547c <memset+0x4>

08005488 <__cvt>:
 8005488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800548c:	ec55 4b10 	vmov	r4, r5, d0
 8005490:	2d00      	cmp	r5, #0
 8005492:	460e      	mov	r6, r1
 8005494:	4619      	mov	r1, r3
 8005496:	462b      	mov	r3, r5
 8005498:	bfbb      	ittet	lt
 800549a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800549e:	461d      	movlt	r5, r3
 80054a0:	2300      	movge	r3, #0
 80054a2:	232d      	movlt	r3, #45	; 0x2d
 80054a4:	700b      	strb	r3, [r1, #0]
 80054a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80054ac:	4691      	mov	r9, r2
 80054ae:	f023 0820 	bic.w	r8, r3, #32
 80054b2:	bfbc      	itt	lt
 80054b4:	4622      	movlt	r2, r4
 80054b6:	4614      	movlt	r4, r2
 80054b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054bc:	d005      	beq.n	80054ca <__cvt+0x42>
 80054be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80054c2:	d100      	bne.n	80054c6 <__cvt+0x3e>
 80054c4:	3601      	adds	r6, #1
 80054c6:	2102      	movs	r1, #2
 80054c8:	e000      	b.n	80054cc <__cvt+0x44>
 80054ca:	2103      	movs	r1, #3
 80054cc:	ab03      	add	r3, sp, #12
 80054ce:	9301      	str	r3, [sp, #4]
 80054d0:	ab02      	add	r3, sp, #8
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	ec45 4b10 	vmov	d0, r4, r5
 80054d8:	4653      	mov	r3, sl
 80054da:	4632      	mov	r2, r6
 80054dc:	f000 fcec 	bl	8005eb8 <_dtoa_r>
 80054e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054e4:	4607      	mov	r7, r0
 80054e6:	d102      	bne.n	80054ee <__cvt+0x66>
 80054e8:	f019 0f01 	tst.w	r9, #1
 80054ec:	d022      	beq.n	8005534 <__cvt+0xac>
 80054ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054f2:	eb07 0906 	add.w	r9, r7, r6
 80054f6:	d110      	bne.n	800551a <__cvt+0x92>
 80054f8:	783b      	ldrb	r3, [r7, #0]
 80054fa:	2b30      	cmp	r3, #48	; 0x30
 80054fc:	d10a      	bne.n	8005514 <__cvt+0x8c>
 80054fe:	2200      	movs	r2, #0
 8005500:	2300      	movs	r3, #0
 8005502:	4620      	mov	r0, r4
 8005504:	4629      	mov	r1, r5
 8005506:	f7fb fae7 	bl	8000ad8 <__aeabi_dcmpeq>
 800550a:	b918      	cbnz	r0, 8005514 <__cvt+0x8c>
 800550c:	f1c6 0601 	rsb	r6, r6, #1
 8005510:	f8ca 6000 	str.w	r6, [sl]
 8005514:	f8da 3000 	ldr.w	r3, [sl]
 8005518:	4499      	add	r9, r3
 800551a:	2200      	movs	r2, #0
 800551c:	2300      	movs	r3, #0
 800551e:	4620      	mov	r0, r4
 8005520:	4629      	mov	r1, r5
 8005522:	f7fb fad9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005526:	b108      	cbz	r0, 800552c <__cvt+0xa4>
 8005528:	f8cd 900c 	str.w	r9, [sp, #12]
 800552c:	2230      	movs	r2, #48	; 0x30
 800552e:	9b03      	ldr	r3, [sp, #12]
 8005530:	454b      	cmp	r3, r9
 8005532:	d307      	bcc.n	8005544 <__cvt+0xbc>
 8005534:	9b03      	ldr	r3, [sp, #12]
 8005536:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005538:	1bdb      	subs	r3, r3, r7
 800553a:	4638      	mov	r0, r7
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	b004      	add	sp, #16
 8005540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005544:	1c59      	adds	r1, r3, #1
 8005546:	9103      	str	r1, [sp, #12]
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	e7f0      	b.n	800552e <__cvt+0xa6>

0800554c <__exponent>:
 800554c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800554e:	4603      	mov	r3, r0
 8005550:	2900      	cmp	r1, #0
 8005552:	bfb8      	it	lt
 8005554:	4249      	neglt	r1, r1
 8005556:	f803 2b02 	strb.w	r2, [r3], #2
 800555a:	bfb4      	ite	lt
 800555c:	222d      	movlt	r2, #45	; 0x2d
 800555e:	222b      	movge	r2, #43	; 0x2b
 8005560:	2909      	cmp	r1, #9
 8005562:	7042      	strb	r2, [r0, #1]
 8005564:	dd2a      	ble.n	80055bc <__exponent+0x70>
 8005566:	f10d 0407 	add.w	r4, sp, #7
 800556a:	46a4      	mov	ip, r4
 800556c:	270a      	movs	r7, #10
 800556e:	46a6      	mov	lr, r4
 8005570:	460a      	mov	r2, r1
 8005572:	fb91 f6f7 	sdiv	r6, r1, r7
 8005576:	fb07 1516 	mls	r5, r7, r6, r1
 800557a:	3530      	adds	r5, #48	; 0x30
 800557c:	2a63      	cmp	r2, #99	; 0x63
 800557e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005582:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005586:	4631      	mov	r1, r6
 8005588:	dcf1      	bgt.n	800556e <__exponent+0x22>
 800558a:	3130      	adds	r1, #48	; 0x30
 800558c:	f1ae 0502 	sub.w	r5, lr, #2
 8005590:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005594:	1c44      	adds	r4, r0, #1
 8005596:	4629      	mov	r1, r5
 8005598:	4561      	cmp	r1, ip
 800559a:	d30a      	bcc.n	80055b2 <__exponent+0x66>
 800559c:	f10d 0209 	add.w	r2, sp, #9
 80055a0:	eba2 020e 	sub.w	r2, r2, lr
 80055a4:	4565      	cmp	r5, ip
 80055a6:	bf88      	it	hi
 80055a8:	2200      	movhi	r2, #0
 80055aa:	4413      	add	r3, r2
 80055ac:	1a18      	subs	r0, r3, r0
 80055ae:	b003      	add	sp, #12
 80055b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80055ba:	e7ed      	b.n	8005598 <__exponent+0x4c>
 80055bc:	2330      	movs	r3, #48	; 0x30
 80055be:	3130      	adds	r1, #48	; 0x30
 80055c0:	7083      	strb	r3, [r0, #2]
 80055c2:	70c1      	strb	r1, [r0, #3]
 80055c4:	1d03      	adds	r3, r0, #4
 80055c6:	e7f1      	b.n	80055ac <__exponent+0x60>

080055c8 <_printf_float>:
 80055c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055cc:	ed2d 8b02 	vpush	{d8}
 80055d0:	b08d      	sub	sp, #52	; 0x34
 80055d2:	460c      	mov	r4, r1
 80055d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80055d8:	4616      	mov	r6, r2
 80055da:	461f      	mov	r7, r3
 80055dc:	4605      	mov	r5, r0
 80055de:	f001 fa57 	bl	8006a90 <_localeconv_r>
 80055e2:	f8d0 a000 	ldr.w	sl, [r0]
 80055e6:	4650      	mov	r0, sl
 80055e8:	f7fa fdfa 	bl	80001e0 <strlen>
 80055ec:	2300      	movs	r3, #0
 80055ee:	930a      	str	r3, [sp, #40]	; 0x28
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	9305      	str	r3, [sp, #20]
 80055f4:	f8d8 3000 	ldr.w	r3, [r8]
 80055f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80055fc:	3307      	adds	r3, #7
 80055fe:	f023 0307 	bic.w	r3, r3, #7
 8005602:	f103 0208 	add.w	r2, r3, #8
 8005606:	f8c8 2000 	str.w	r2, [r8]
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005612:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005616:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800561a:	9307      	str	r3, [sp, #28]
 800561c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005620:	ee08 0a10 	vmov	s16, r0
 8005624:	4b9f      	ldr	r3, [pc, #636]	; (80058a4 <_printf_float+0x2dc>)
 8005626:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800562a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800562e:	f7fb fa85 	bl	8000b3c <__aeabi_dcmpun>
 8005632:	bb88      	cbnz	r0, 8005698 <_printf_float+0xd0>
 8005634:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005638:	4b9a      	ldr	r3, [pc, #616]	; (80058a4 <_printf_float+0x2dc>)
 800563a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800563e:	f7fb fa5f 	bl	8000b00 <__aeabi_dcmple>
 8005642:	bb48      	cbnz	r0, 8005698 <_printf_float+0xd0>
 8005644:	2200      	movs	r2, #0
 8005646:	2300      	movs	r3, #0
 8005648:	4640      	mov	r0, r8
 800564a:	4649      	mov	r1, r9
 800564c:	f7fb fa4e 	bl	8000aec <__aeabi_dcmplt>
 8005650:	b110      	cbz	r0, 8005658 <_printf_float+0x90>
 8005652:	232d      	movs	r3, #45	; 0x2d
 8005654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005658:	4b93      	ldr	r3, [pc, #588]	; (80058a8 <_printf_float+0x2e0>)
 800565a:	4894      	ldr	r0, [pc, #592]	; (80058ac <_printf_float+0x2e4>)
 800565c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005660:	bf94      	ite	ls
 8005662:	4698      	movls	r8, r3
 8005664:	4680      	movhi	r8, r0
 8005666:	2303      	movs	r3, #3
 8005668:	6123      	str	r3, [r4, #16]
 800566a:	9b05      	ldr	r3, [sp, #20]
 800566c:	f023 0204 	bic.w	r2, r3, #4
 8005670:	6022      	str	r2, [r4, #0]
 8005672:	f04f 0900 	mov.w	r9, #0
 8005676:	9700      	str	r7, [sp, #0]
 8005678:	4633      	mov	r3, r6
 800567a:	aa0b      	add	r2, sp, #44	; 0x2c
 800567c:	4621      	mov	r1, r4
 800567e:	4628      	mov	r0, r5
 8005680:	f000 f9d8 	bl	8005a34 <_printf_common>
 8005684:	3001      	adds	r0, #1
 8005686:	f040 8090 	bne.w	80057aa <_printf_float+0x1e2>
 800568a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800568e:	b00d      	add	sp, #52	; 0x34
 8005690:	ecbd 8b02 	vpop	{d8}
 8005694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005698:	4642      	mov	r2, r8
 800569a:	464b      	mov	r3, r9
 800569c:	4640      	mov	r0, r8
 800569e:	4649      	mov	r1, r9
 80056a0:	f7fb fa4c 	bl	8000b3c <__aeabi_dcmpun>
 80056a4:	b140      	cbz	r0, 80056b8 <_printf_float+0xf0>
 80056a6:	464b      	mov	r3, r9
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bfbc      	itt	lt
 80056ac:	232d      	movlt	r3, #45	; 0x2d
 80056ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80056b2:	487f      	ldr	r0, [pc, #508]	; (80058b0 <_printf_float+0x2e8>)
 80056b4:	4b7f      	ldr	r3, [pc, #508]	; (80058b4 <_printf_float+0x2ec>)
 80056b6:	e7d1      	b.n	800565c <_printf_float+0x94>
 80056b8:	6863      	ldr	r3, [r4, #4]
 80056ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80056be:	9206      	str	r2, [sp, #24]
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	d13f      	bne.n	8005744 <_printf_float+0x17c>
 80056c4:	2306      	movs	r3, #6
 80056c6:	6063      	str	r3, [r4, #4]
 80056c8:	9b05      	ldr	r3, [sp, #20]
 80056ca:	6861      	ldr	r1, [r4, #4]
 80056cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80056d0:	2300      	movs	r3, #0
 80056d2:	9303      	str	r3, [sp, #12]
 80056d4:	ab0a      	add	r3, sp, #40	; 0x28
 80056d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80056da:	ab09      	add	r3, sp, #36	; 0x24
 80056dc:	ec49 8b10 	vmov	d0, r8, r9
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	6022      	str	r2, [r4, #0]
 80056e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80056e8:	4628      	mov	r0, r5
 80056ea:	f7ff fecd 	bl	8005488 <__cvt>
 80056ee:	9b06      	ldr	r3, [sp, #24]
 80056f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056f2:	2b47      	cmp	r3, #71	; 0x47
 80056f4:	4680      	mov	r8, r0
 80056f6:	d108      	bne.n	800570a <_printf_float+0x142>
 80056f8:	1cc8      	adds	r0, r1, #3
 80056fa:	db02      	blt.n	8005702 <_printf_float+0x13a>
 80056fc:	6863      	ldr	r3, [r4, #4]
 80056fe:	4299      	cmp	r1, r3
 8005700:	dd41      	ble.n	8005786 <_printf_float+0x1be>
 8005702:	f1ab 0b02 	sub.w	fp, fp, #2
 8005706:	fa5f fb8b 	uxtb.w	fp, fp
 800570a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800570e:	d820      	bhi.n	8005752 <_printf_float+0x18a>
 8005710:	3901      	subs	r1, #1
 8005712:	465a      	mov	r2, fp
 8005714:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005718:	9109      	str	r1, [sp, #36]	; 0x24
 800571a:	f7ff ff17 	bl	800554c <__exponent>
 800571e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005720:	1813      	adds	r3, r2, r0
 8005722:	2a01      	cmp	r2, #1
 8005724:	4681      	mov	r9, r0
 8005726:	6123      	str	r3, [r4, #16]
 8005728:	dc02      	bgt.n	8005730 <_printf_float+0x168>
 800572a:	6822      	ldr	r2, [r4, #0]
 800572c:	07d2      	lsls	r2, r2, #31
 800572e:	d501      	bpl.n	8005734 <_printf_float+0x16c>
 8005730:	3301      	adds	r3, #1
 8005732:	6123      	str	r3, [r4, #16]
 8005734:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005738:	2b00      	cmp	r3, #0
 800573a:	d09c      	beq.n	8005676 <_printf_float+0xae>
 800573c:	232d      	movs	r3, #45	; 0x2d
 800573e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005742:	e798      	b.n	8005676 <_printf_float+0xae>
 8005744:	9a06      	ldr	r2, [sp, #24]
 8005746:	2a47      	cmp	r2, #71	; 0x47
 8005748:	d1be      	bne.n	80056c8 <_printf_float+0x100>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1bc      	bne.n	80056c8 <_printf_float+0x100>
 800574e:	2301      	movs	r3, #1
 8005750:	e7b9      	b.n	80056c6 <_printf_float+0xfe>
 8005752:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005756:	d118      	bne.n	800578a <_printf_float+0x1c2>
 8005758:	2900      	cmp	r1, #0
 800575a:	6863      	ldr	r3, [r4, #4]
 800575c:	dd0b      	ble.n	8005776 <_printf_float+0x1ae>
 800575e:	6121      	str	r1, [r4, #16]
 8005760:	b913      	cbnz	r3, 8005768 <_printf_float+0x1a0>
 8005762:	6822      	ldr	r2, [r4, #0]
 8005764:	07d0      	lsls	r0, r2, #31
 8005766:	d502      	bpl.n	800576e <_printf_float+0x1a6>
 8005768:	3301      	adds	r3, #1
 800576a:	440b      	add	r3, r1
 800576c:	6123      	str	r3, [r4, #16]
 800576e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005770:	f04f 0900 	mov.w	r9, #0
 8005774:	e7de      	b.n	8005734 <_printf_float+0x16c>
 8005776:	b913      	cbnz	r3, 800577e <_printf_float+0x1b6>
 8005778:	6822      	ldr	r2, [r4, #0]
 800577a:	07d2      	lsls	r2, r2, #31
 800577c:	d501      	bpl.n	8005782 <_printf_float+0x1ba>
 800577e:	3302      	adds	r3, #2
 8005780:	e7f4      	b.n	800576c <_printf_float+0x1a4>
 8005782:	2301      	movs	r3, #1
 8005784:	e7f2      	b.n	800576c <_printf_float+0x1a4>
 8005786:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800578a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800578c:	4299      	cmp	r1, r3
 800578e:	db05      	blt.n	800579c <_printf_float+0x1d4>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	6121      	str	r1, [r4, #16]
 8005794:	07d8      	lsls	r0, r3, #31
 8005796:	d5ea      	bpl.n	800576e <_printf_float+0x1a6>
 8005798:	1c4b      	adds	r3, r1, #1
 800579a:	e7e7      	b.n	800576c <_printf_float+0x1a4>
 800579c:	2900      	cmp	r1, #0
 800579e:	bfd4      	ite	le
 80057a0:	f1c1 0202 	rsble	r2, r1, #2
 80057a4:	2201      	movgt	r2, #1
 80057a6:	4413      	add	r3, r2
 80057a8:	e7e0      	b.n	800576c <_printf_float+0x1a4>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	055a      	lsls	r2, r3, #21
 80057ae:	d407      	bmi.n	80057c0 <_printf_float+0x1f8>
 80057b0:	6923      	ldr	r3, [r4, #16]
 80057b2:	4642      	mov	r2, r8
 80057b4:	4631      	mov	r1, r6
 80057b6:	4628      	mov	r0, r5
 80057b8:	47b8      	blx	r7
 80057ba:	3001      	adds	r0, #1
 80057bc:	d12c      	bne.n	8005818 <_printf_float+0x250>
 80057be:	e764      	b.n	800568a <_printf_float+0xc2>
 80057c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057c4:	f240 80e0 	bls.w	8005988 <_printf_float+0x3c0>
 80057c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057cc:	2200      	movs	r2, #0
 80057ce:	2300      	movs	r3, #0
 80057d0:	f7fb f982 	bl	8000ad8 <__aeabi_dcmpeq>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d034      	beq.n	8005842 <_printf_float+0x27a>
 80057d8:	4a37      	ldr	r2, [pc, #220]	; (80058b8 <_printf_float+0x2f0>)
 80057da:	2301      	movs	r3, #1
 80057dc:	4631      	mov	r1, r6
 80057de:	4628      	mov	r0, r5
 80057e0:	47b8      	blx	r7
 80057e2:	3001      	adds	r0, #1
 80057e4:	f43f af51 	beq.w	800568a <_printf_float+0xc2>
 80057e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057ec:	429a      	cmp	r2, r3
 80057ee:	db02      	blt.n	80057f6 <_printf_float+0x22e>
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	07d8      	lsls	r0, r3, #31
 80057f4:	d510      	bpl.n	8005818 <_printf_float+0x250>
 80057f6:	ee18 3a10 	vmov	r3, s16
 80057fa:	4652      	mov	r2, sl
 80057fc:	4631      	mov	r1, r6
 80057fe:	4628      	mov	r0, r5
 8005800:	47b8      	blx	r7
 8005802:	3001      	adds	r0, #1
 8005804:	f43f af41 	beq.w	800568a <_printf_float+0xc2>
 8005808:	f04f 0800 	mov.w	r8, #0
 800580c:	f104 091a 	add.w	r9, r4, #26
 8005810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005812:	3b01      	subs	r3, #1
 8005814:	4543      	cmp	r3, r8
 8005816:	dc09      	bgt.n	800582c <_printf_float+0x264>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	079b      	lsls	r3, r3, #30
 800581c:	f100 8105 	bmi.w	8005a2a <_printf_float+0x462>
 8005820:	68e0      	ldr	r0, [r4, #12]
 8005822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005824:	4298      	cmp	r0, r3
 8005826:	bfb8      	it	lt
 8005828:	4618      	movlt	r0, r3
 800582a:	e730      	b.n	800568e <_printf_float+0xc6>
 800582c:	2301      	movs	r3, #1
 800582e:	464a      	mov	r2, r9
 8005830:	4631      	mov	r1, r6
 8005832:	4628      	mov	r0, r5
 8005834:	47b8      	blx	r7
 8005836:	3001      	adds	r0, #1
 8005838:	f43f af27 	beq.w	800568a <_printf_float+0xc2>
 800583c:	f108 0801 	add.w	r8, r8, #1
 8005840:	e7e6      	b.n	8005810 <_printf_float+0x248>
 8005842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005844:	2b00      	cmp	r3, #0
 8005846:	dc39      	bgt.n	80058bc <_printf_float+0x2f4>
 8005848:	4a1b      	ldr	r2, [pc, #108]	; (80058b8 <_printf_float+0x2f0>)
 800584a:	2301      	movs	r3, #1
 800584c:	4631      	mov	r1, r6
 800584e:	4628      	mov	r0, r5
 8005850:	47b8      	blx	r7
 8005852:	3001      	adds	r0, #1
 8005854:	f43f af19 	beq.w	800568a <_printf_float+0xc2>
 8005858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800585c:	4313      	orrs	r3, r2
 800585e:	d102      	bne.n	8005866 <_printf_float+0x29e>
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	07d9      	lsls	r1, r3, #31
 8005864:	d5d8      	bpl.n	8005818 <_printf_float+0x250>
 8005866:	ee18 3a10 	vmov	r3, s16
 800586a:	4652      	mov	r2, sl
 800586c:	4631      	mov	r1, r6
 800586e:	4628      	mov	r0, r5
 8005870:	47b8      	blx	r7
 8005872:	3001      	adds	r0, #1
 8005874:	f43f af09 	beq.w	800568a <_printf_float+0xc2>
 8005878:	f04f 0900 	mov.w	r9, #0
 800587c:	f104 0a1a 	add.w	sl, r4, #26
 8005880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005882:	425b      	negs	r3, r3
 8005884:	454b      	cmp	r3, r9
 8005886:	dc01      	bgt.n	800588c <_printf_float+0x2c4>
 8005888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800588a:	e792      	b.n	80057b2 <_printf_float+0x1ea>
 800588c:	2301      	movs	r3, #1
 800588e:	4652      	mov	r2, sl
 8005890:	4631      	mov	r1, r6
 8005892:	4628      	mov	r0, r5
 8005894:	47b8      	blx	r7
 8005896:	3001      	adds	r0, #1
 8005898:	f43f aef7 	beq.w	800568a <_printf_float+0xc2>
 800589c:	f109 0901 	add.w	r9, r9, #1
 80058a0:	e7ee      	b.n	8005880 <_printf_float+0x2b8>
 80058a2:	bf00      	nop
 80058a4:	7fefffff 	.word	0x7fefffff
 80058a8:	08008240 	.word	0x08008240
 80058ac:	08008244 	.word	0x08008244
 80058b0:	0800824c 	.word	0x0800824c
 80058b4:	08008248 	.word	0x08008248
 80058b8:	08008250 	.word	0x08008250
 80058bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058c0:	429a      	cmp	r2, r3
 80058c2:	bfa8      	it	ge
 80058c4:	461a      	movge	r2, r3
 80058c6:	2a00      	cmp	r2, #0
 80058c8:	4691      	mov	r9, r2
 80058ca:	dc37      	bgt.n	800593c <_printf_float+0x374>
 80058cc:	f04f 0b00 	mov.w	fp, #0
 80058d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058d4:	f104 021a 	add.w	r2, r4, #26
 80058d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058da:	9305      	str	r3, [sp, #20]
 80058dc:	eba3 0309 	sub.w	r3, r3, r9
 80058e0:	455b      	cmp	r3, fp
 80058e2:	dc33      	bgt.n	800594c <_printf_float+0x384>
 80058e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058e8:	429a      	cmp	r2, r3
 80058ea:	db3b      	blt.n	8005964 <_printf_float+0x39c>
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	07da      	lsls	r2, r3, #31
 80058f0:	d438      	bmi.n	8005964 <_printf_float+0x39c>
 80058f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058f4:	9b05      	ldr	r3, [sp, #20]
 80058f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	eba2 0901 	sub.w	r9, r2, r1
 80058fe:	4599      	cmp	r9, r3
 8005900:	bfa8      	it	ge
 8005902:	4699      	movge	r9, r3
 8005904:	f1b9 0f00 	cmp.w	r9, #0
 8005908:	dc35      	bgt.n	8005976 <_printf_float+0x3ae>
 800590a:	f04f 0800 	mov.w	r8, #0
 800590e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005912:	f104 0a1a 	add.w	sl, r4, #26
 8005916:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800591a:	1a9b      	subs	r3, r3, r2
 800591c:	eba3 0309 	sub.w	r3, r3, r9
 8005920:	4543      	cmp	r3, r8
 8005922:	f77f af79 	ble.w	8005818 <_printf_float+0x250>
 8005926:	2301      	movs	r3, #1
 8005928:	4652      	mov	r2, sl
 800592a:	4631      	mov	r1, r6
 800592c:	4628      	mov	r0, r5
 800592e:	47b8      	blx	r7
 8005930:	3001      	adds	r0, #1
 8005932:	f43f aeaa 	beq.w	800568a <_printf_float+0xc2>
 8005936:	f108 0801 	add.w	r8, r8, #1
 800593a:	e7ec      	b.n	8005916 <_printf_float+0x34e>
 800593c:	4613      	mov	r3, r2
 800593e:	4631      	mov	r1, r6
 8005940:	4642      	mov	r2, r8
 8005942:	4628      	mov	r0, r5
 8005944:	47b8      	blx	r7
 8005946:	3001      	adds	r0, #1
 8005948:	d1c0      	bne.n	80058cc <_printf_float+0x304>
 800594a:	e69e      	b.n	800568a <_printf_float+0xc2>
 800594c:	2301      	movs	r3, #1
 800594e:	4631      	mov	r1, r6
 8005950:	4628      	mov	r0, r5
 8005952:	9205      	str	r2, [sp, #20]
 8005954:	47b8      	blx	r7
 8005956:	3001      	adds	r0, #1
 8005958:	f43f ae97 	beq.w	800568a <_printf_float+0xc2>
 800595c:	9a05      	ldr	r2, [sp, #20]
 800595e:	f10b 0b01 	add.w	fp, fp, #1
 8005962:	e7b9      	b.n	80058d8 <_printf_float+0x310>
 8005964:	ee18 3a10 	vmov	r3, s16
 8005968:	4652      	mov	r2, sl
 800596a:	4631      	mov	r1, r6
 800596c:	4628      	mov	r0, r5
 800596e:	47b8      	blx	r7
 8005970:	3001      	adds	r0, #1
 8005972:	d1be      	bne.n	80058f2 <_printf_float+0x32a>
 8005974:	e689      	b.n	800568a <_printf_float+0xc2>
 8005976:	9a05      	ldr	r2, [sp, #20]
 8005978:	464b      	mov	r3, r9
 800597a:	4442      	add	r2, r8
 800597c:	4631      	mov	r1, r6
 800597e:	4628      	mov	r0, r5
 8005980:	47b8      	blx	r7
 8005982:	3001      	adds	r0, #1
 8005984:	d1c1      	bne.n	800590a <_printf_float+0x342>
 8005986:	e680      	b.n	800568a <_printf_float+0xc2>
 8005988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800598a:	2a01      	cmp	r2, #1
 800598c:	dc01      	bgt.n	8005992 <_printf_float+0x3ca>
 800598e:	07db      	lsls	r3, r3, #31
 8005990:	d538      	bpl.n	8005a04 <_printf_float+0x43c>
 8005992:	2301      	movs	r3, #1
 8005994:	4642      	mov	r2, r8
 8005996:	4631      	mov	r1, r6
 8005998:	4628      	mov	r0, r5
 800599a:	47b8      	blx	r7
 800599c:	3001      	adds	r0, #1
 800599e:	f43f ae74 	beq.w	800568a <_printf_float+0xc2>
 80059a2:	ee18 3a10 	vmov	r3, s16
 80059a6:	4652      	mov	r2, sl
 80059a8:	4631      	mov	r1, r6
 80059aa:	4628      	mov	r0, r5
 80059ac:	47b8      	blx	r7
 80059ae:	3001      	adds	r0, #1
 80059b0:	f43f ae6b 	beq.w	800568a <_printf_float+0xc2>
 80059b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059b8:	2200      	movs	r2, #0
 80059ba:	2300      	movs	r3, #0
 80059bc:	f7fb f88c 	bl	8000ad8 <__aeabi_dcmpeq>
 80059c0:	b9d8      	cbnz	r0, 80059fa <_printf_float+0x432>
 80059c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059c4:	f108 0201 	add.w	r2, r8, #1
 80059c8:	3b01      	subs	r3, #1
 80059ca:	4631      	mov	r1, r6
 80059cc:	4628      	mov	r0, r5
 80059ce:	47b8      	blx	r7
 80059d0:	3001      	adds	r0, #1
 80059d2:	d10e      	bne.n	80059f2 <_printf_float+0x42a>
 80059d4:	e659      	b.n	800568a <_printf_float+0xc2>
 80059d6:	2301      	movs	r3, #1
 80059d8:	4652      	mov	r2, sl
 80059da:	4631      	mov	r1, r6
 80059dc:	4628      	mov	r0, r5
 80059de:	47b8      	blx	r7
 80059e0:	3001      	adds	r0, #1
 80059e2:	f43f ae52 	beq.w	800568a <_printf_float+0xc2>
 80059e6:	f108 0801 	add.w	r8, r8, #1
 80059ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ec:	3b01      	subs	r3, #1
 80059ee:	4543      	cmp	r3, r8
 80059f0:	dcf1      	bgt.n	80059d6 <_printf_float+0x40e>
 80059f2:	464b      	mov	r3, r9
 80059f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059f8:	e6dc      	b.n	80057b4 <_printf_float+0x1ec>
 80059fa:	f04f 0800 	mov.w	r8, #0
 80059fe:	f104 0a1a 	add.w	sl, r4, #26
 8005a02:	e7f2      	b.n	80059ea <_printf_float+0x422>
 8005a04:	2301      	movs	r3, #1
 8005a06:	4642      	mov	r2, r8
 8005a08:	e7df      	b.n	80059ca <_printf_float+0x402>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	464a      	mov	r2, r9
 8005a0e:	4631      	mov	r1, r6
 8005a10:	4628      	mov	r0, r5
 8005a12:	47b8      	blx	r7
 8005a14:	3001      	adds	r0, #1
 8005a16:	f43f ae38 	beq.w	800568a <_printf_float+0xc2>
 8005a1a:	f108 0801 	add.w	r8, r8, #1
 8005a1e:	68e3      	ldr	r3, [r4, #12]
 8005a20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a22:	1a5b      	subs	r3, r3, r1
 8005a24:	4543      	cmp	r3, r8
 8005a26:	dcf0      	bgt.n	8005a0a <_printf_float+0x442>
 8005a28:	e6fa      	b.n	8005820 <_printf_float+0x258>
 8005a2a:	f04f 0800 	mov.w	r8, #0
 8005a2e:	f104 0919 	add.w	r9, r4, #25
 8005a32:	e7f4      	b.n	8005a1e <_printf_float+0x456>

08005a34 <_printf_common>:
 8005a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a38:	4616      	mov	r6, r2
 8005a3a:	4699      	mov	r9, r3
 8005a3c:	688a      	ldr	r2, [r1, #8]
 8005a3e:	690b      	ldr	r3, [r1, #16]
 8005a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a44:	4293      	cmp	r3, r2
 8005a46:	bfb8      	it	lt
 8005a48:	4613      	movlt	r3, r2
 8005a4a:	6033      	str	r3, [r6, #0]
 8005a4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a50:	4607      	mov	r7, r0
 8005a52:	460c      	mov	r4, r1
 8005a54:	b10a      	cbz	r2, 8005a5a <_printf_common+0x26>
 8005a56:	3301      	adds	r3, #1
 8005a58:	6033      	str	r3, [r6, #0]
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	0699      	lsls	r1, r3, #26
 8005a5e:	bf42      	ittt	mi
 8005a60:	6833      	ldrmi	r3, [r6, #0]
 8005a62:	3302      	addmi	r3, #2
 8005a64:	6033      	strmi	r3, [r6, #0]
 8005a66:	6825      	ldr	r5, [r4, #0]
 8005a68:	f015 0506 	ands.w	r5, r5, #6
 8005a6c:	d106      	bne.n	8005a7c <_printf_common+0x48>
 8005a6e:	f104 0a19 	add.w	sl, r4, #25
 8005a72:	68e3      	ldr	r3, [r4, #12]
 8005a74:	6832      	ldr	r2, [r6, #0]
 8005a76:	1a9b      	subs	r3, r3, r2
 8005a78:	42ab      	cmp	r3, r5
 8005a7a:	dc26      	bgt.n	8005aca <_printf_common+0x96>
 8005a7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a80:	1e13      	subs	r3, r2, #0
 8005a82:	6822      	ldr	r2, [r4, #0]
 8005a84:	bf18      	it	ne
 8005a86:	2301      	movne	r3, #1
 8005a88:	0692      	lsls	r2, r2, #26
 8005a8a:	d42b      	bmi.n	8005ae4 <_printf_common+0xb0>
 8005a8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a90:	4649      	mov	r1, r9
 8005a92:	4638      	mov	r0, r7
 8005a94:	47c0      	blx	r8
 8005a96:	3001      	adds	r0, #1
 8005a98:	d01e      	beq.n	8005ad8 <_printf_common+0xa4>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	68e5      	ldr	r5, [r4, #12]
 8005a9e:	6832      	ldr	r2, [r6, #0]
 8005aa0:	f003 0306 	and.w	r3, r3, #6
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	bf08      	it	eq
 8005aa8:	1aad      	subeq	r5, r5, r2
 8005aaa:	68a3      	ldr	r3, [r4, #8]
 8005aac:	6922      	ldr	r2, [r4, #16]
 8005aae:	bf0c      	ite	eq
 8005ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ab4:	2500      	movne	r5, #0
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	bfc4      	itt	gt
 8005aba:	1a9b      	subgt	r3, r3, r2
 8005abc:	18ed      	addgt	r5, r5, r3
 8005abe:	2600      	movs	r6, #0
 8005ac0:	341a      	adds	r4, #26
 8005ac2:	42b5      	cmp	r5, r6
 8005ac4:	d11a      	bne.n	8005afc <_printf_common+0xc8>
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	e008      	b.n	8005adc <_printf_common+0xa8>
 8005aca:	2301      	movs	r3, #1
 8005acc:	4652      	mov	r2, sl
 8005ace:	4649      	mov	r1, r9
 8005ad0:	4638      	mov	r0, r7
 8005ad2:	47c0      	blx	r8
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	d103      	bne.n	8005ae0 <_printf_common+0xac>
 8005ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae0:	3501      	adds	r5, #1
 8005ae2:	e7c6      	b.n	8005a72 <_printf_common+0x3e>
 8005ae4:	18e1      	adds	r1, r4, r3
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	2030      	movs	r0, #48	; 0x30
 8005aea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005aee:	4422      	add	r2, r4
 8005af0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005af4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005af8:	3302      	adds	r3, #2
 8005afa:	e7c7      	b.n	8005a8c <_printf_common+0x58>
 8005afc:	2301      	movs	r3, #1
 8005afe:	4622      	mov	r2, r4
 8005b00:	4649      	mov	r1, r9
 8005b02:	4638      	mov	r0, r7
 8005b04:	47c0      	blx	r8
 8005b06:	3001      	adds	r0, #1
 8005b08:	d0e6      	beq.n	8005ad8 <_printf_common+0xa4>
 8005b0a:	3601      	adds	r6, #1
 8005b0c:	e7d9      	b.n	8005ac2 <_printf_common+0x8e>
	...

08005b10 <_printf_i>:
 8005b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b14:	460c      	mov	r4, r1
 8005b16:	4691      	mov	r9, r2
 8005b18:	7e27      	ldrb	r7, [r4, #24]
 8005b1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b1c:	2f78      	cmp	r7, #120	; 0x78
 8005b1e:	4680      	mov	r8, r0
 8005b20:	469a      	mov	sl, r3
 8005b22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b26:	d807      	bhi.n	8005b38 <_printf_i+0x28>
 8005b28:	2f62      	cmp	r7, #98	; 0x62
 8005b2a:	d80a      	bhi.n	8005b42 <_printf_i+0x32>
 8005b2c:	2f00      	cmp	r7, #0
 8005b2e:	f000 80d8 	beq.w	8005ce2 <_printf_i+0x1d2>
 8005b32:	2f58      	cmp	r7, #88	; 0x58
 8005b34:	f000 80a3 	beq.w	8005c7e <_printf_i+0x16e>
 8005b38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b40:	e03a      	b.n	8005bb8 <_printf_i+0xa8>
 8005b42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b46:	2b15      	cmp	r3, #21
 8005b48:	d8f6      	bhi.n	8005b38 <_printf_i+0x28>
 8005b4a:	a001      	add	r0, pc, #4	; (adr r0, 8005b50 <_printf_i+0x40>)
 8005b4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005b50:	08005ba9 	.word	0x08005ba9
 8005b54:	08005bbd 	.word	0x08005bbd
 8005b58:	08005b39 	.word	0x08005b39
 8005b5c:	08005b39 	.word	0x08005b39
 8005b60:	08005b39 	.word	0x08005b39
 8005b64:	08005b39 	.word	0x08005b39
 8005b68:	08005bbd 	.word	0x08005bbd
 8005b6c:	08005b39 	.word	0x08005b39
 8005b70:	08005b39 	.word	0x08005b39
 8005b74:	08005b39 	.word	0x08005b39
 8005b78:	08005b39 	.word	0x08005b39
 8005b7c:	08005cc9 	.word	0x08005cc9
 8005b80:	08005bed 	.word	0x08005bed
 8005b84:	08005cab 	.word	0x08005cab
 8005b88:	08005b39 	.word	0x08005b39
 8005b8c:	08005b39 	.word	0x08005b39
 8005b90:	08005ceb 	.word	0x08005ceb
 8005b94:	08005b39 	.word	0x08005b39
 8005b98:	08005bed 	.word	0x08005bed
 8005b9c:	08005b39 	.word	0x08005b39
 8005ba0:	08005b39 	.word	0x08005b39
 8005ba4:	08005cb3 	.word	0x08005cb3
 8005ba8:	680b      	ldr	r3, [r1, #0]
 8005baa:	1d1a      	adds	r2, r3, #4
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	600a      	str	r2, [r1, #0]
 8005bb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e0a3      	b.n	8005d04 <_printf_i+0x1f4>
 8005bbc:	6825      	ldr	r5, [r4, #0]
 8005bbe:	6808      	ldr	r0, [r1, #0]
 8005bc0:	062e      	lsls	r6, r5, #24
 8005bc2:	f100 0304 	add.w	r3, r0, #4
 8005bc6:	d50a      	bpl.n	8005bde <_printf_i+0xce>
 8005bc8:	6805      	ldr	r5, [r0, #0]
 8005bca:	600b      	str	r3, [r1, #0]
 8005bcc:	2d00      	cmp	r5, #0
 8005bce:	da03      	bge.n	8005bd8 <_printf_i+0xc8>
 8005bd0:	232d      	movs	r3, #45	; 0x2d
 8005bd2:	426d      	negs	r5, r5
 8005bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bd8:	485e      	ldr	r0, [pc, #376]	; (8005d54 <_printf_i+0x244>)
 8005bda:	230a      	movs	r3, #10
 8005bdc:	e019      	b.n	8005c12 <_printf_i+0x102>
 8005bde:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005be2:	6805      	ldr	r5, [r0, #0]
 8005be4:	600b      	str	r3, [r1, #0]
 8005be6:	bf18      	it	ne
 8005be8:	b22d      	sxthne	r5, r5
 8005bea:	e7ef      	b.n	8005bcc <_printf_i+0xbc>
 8005bec:	680b      	ldr	r3, [r1, #0]
 8005bee:	6825      	ldr	r5, [r4, #0]
 8005bf0:	1d18      	adds	r0, r3, #4
 8005bf2:	6008      	str	r0, [r1, #0]
 8005bf4:	0628      	lsls	r0, r5, #24
 8005bf6:	d501      	bpl.n	8005bfc <_printf_i+0xec>
 8005bf8:	681d      	ldr	r5, [r3, #0]
 8005bfa:	e002      	b.n	8005c02 <_printf_i+0xf2>
 8005bfc:	0669      	lsls	r1, r5, #25
 8005bfe:	d5fb      	bpl.n	8005bf8 <_printf_i+0xe8>
 8005c00:	881d      	ldrh	r5, [r3, #0]
 8005c02:	4854      	ldr	r0, [pc, #336]	; (8005d54 <_printf_i+0x244>)
 8005c04:	2f6f      	cmp	r7, #111	; 0x6f
 8005c06:	bf0c      	ite	eq
 8005c08:	2308      	moveq	r3, #8
 8005c0a:	230a      	movne	r3, #10
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c12:	6866      	ldr	r6, [r4, #4]
 8005c14:	60a6      	str	r6, [r4, #8]
 8005c16:	2e00      	cmp	r6, #0
 8005c18:	bfa2      	ittt	ge
 8005c1a:	6821      	ldrge	r1, [r4, #0]
 8005c1c:	f021 0104 	bicge.w	r1, r1, #4
 8005c20:	6021      	strge	r1, [r4, #0]
 8005c22:	b90d      	cbnz	r5, 8005c28 <_printf_i+0x118>
 8005c24:	2e00      	cmp	r6, #0
 8005c26:	d04d      	beq.n	8005cc4 <_printf_i+0x1b4>
 8005c28:	4616      	mov	r6, r2
 8005c2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c2e:	fb03 5711 	mls	r7, r3, r1, r5
 8005c32:	5dc7      	ldrb	r7, [r0, r7]
 8005c34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c38:	462f      	mov	r7, r5
 8005c3a:	42bb      	cmp	r3, r7
 8005c3c:	460d      	mov	r5, r1
 8005c3e:	d9f4      	bls.n	8005c2a <_printf_i+0x11a>
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d10b      	bne.n	8005c5c <_printf_i+0x14c>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	07df      	lsls	r7, r3, #31
 8005c48:	d508      	bpl.n	8005c5c <_printf_i+0x14c>
 8005c4a:	6923      	ldr	r3, [r4, #16]
 8005c4c:	6861      	ldr	r1, [r4, #4]
 8005c4e:	4299      	cmp	r1, r3
 8005c50:	bfde      	ittt	le
 8005c52:	2330      	movle	r3, #48	; 0x30
 8005c54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c58:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005c5c:	1b92      	subs	r2, r2, r6
 8005c5e:	6122      	str	r2, [r4, #16]
 8005c60:	f8cd a000 	str.w	sl, [sp]
 8005c64:	464b      	mov	r3, r9
 8005c66:	aa03      	add	r2, sp, #12
 8005c68:	4621      	mov	r1, r4
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	f7ff fee2 	bl	8005a34 <_printf_common>
 8005c70:	3001      	adds	r0, #1
 8005c72:	d14c      	bne.n	8005d0e <_printf_i+0x1fe>
 8005c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c78:	b004      	add	sp, #16
 8005c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7e:	4835      	ldr	r0, [pc, #212]	; (8005d54 <_printf_i+0x244>)
 8005c80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	680e      	ldr	r6, [r1, #0]
 8005c88:	061f      	lsls	r7, r3, #24
 8005c8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c8e:	600e      	str	r6, [r1, #0]
 8005c90:	d514      	bpl.n	8005cbc <_printf_i+0x1ac>
 8005c92:	07d9      	lsls	r1, r3, #31
 8005c94:	bf44      	itt	mi
 8005c96:	f043 0320 	orrmi.w	r3, r3, #32
 8005c9a:	6023      	strmi	r3, [r4, #0]
 8005c9c:	b91d      	cbnz	r5, 8005ca6 <_printf_i+0x196>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	f023 0320 	bic.w	r3, r3, #32
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	2310      	movs	r3, #16
 8005ca8:	e7b0      	b.n	8005c0c <_printf_i+0xfc>
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	f043 0320 	orr.w	r3, r3, #32
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	2378      	movs	r3, #120	; 0x78
 8005cb4:	4828      	ldr	r0, [pc, #160]	; (8005d58 <_printf_i+0x248>)
 8005cb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cba:	e7e3      	b.n	8005c84 <_printf_i+0x174>
 8005cbc:	065e      	lsls	r6, r3, #25
 8005cbe:	bf48      	it	mi
 8005cc0:	b2ad      	uxthmi	r5, r5
 8005cc2:	e7e6      	b.n	8005c92 <_printf_i+0x182>
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	e7bb      	b.n	8005c40 <_printf_i+0x130>
 8005cc8:	680b      	ldr	r3, [r1, #0]
 8005cca:	6826      	ldr	r6, [r4, #0]
 8005ccc:	6960      	ldr	r0, [r4, #20]
 8005cce:	1d1d      	adds	r5, r3, #4
 8005cd0:	600d      	str	r5, [r1, #0]
 8005cd2:	0635      	lsls	r5, r6, #24
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	d501      	bpl.n	8005cdc <_printf_i+0x1cc>
 8005cd8:	6018      	str	r0, [r3, #0]
 8005cda:	e002      	b.n	8005ce2 <_printf_i+0x1d2>
 8005cdc:	0671      	lsls	r1, r6, #25
 8005cde:	d5fb      	bpl.n	8005cd8 <_printf_i+0x1c8>
 8005ce0:	8018      	strh	r0, [r3, #0]
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	6123      	str	r3, [r4, #16]
 8005ce6:	4616      	mov	r6, r2
 8005ce8:	e7ba      	b.n	8005c60 <_printf_i+0x150>
 8005cea:	680b      	ldr	r3, [r1, #0]
 8005cec:	1d1a      	adds	r2, r3, #4
 8005cee:	600a      	str	r2, [r1, #0]
 8005cf0:	681e      	ldr	r6, [r3, #0]
 8005cf2:	6862      	ldr	r2, [r4, #4]
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	f7fa fa7a 	bl	80001f0 <memchr>
 8005cfc:	b108      	cbz	r0, 8005d02 <_printf_i+0x1f2>
 8005cfe:	1b80      	subs	r0, r0, r6
 8005d00:	6060      	str	r0, [r4, #4]
 8005d02:	6863      	ldr	r3, [r4, #4]
 8005d04:	6123      	str	r3, [r4, #16]
 8005d06:	2300      	movs	r3, #0
 8005d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d0c:	e7a8      	b.n	8005c60 <_printf_i+0x150>
 8005d0e:	6923      	ldr	r3, [r4, #16]
 8005d10:	4632      	mov	r2, r6
 8005d12:	4649      	mov	r1, r9
 8005d14:	4640      	mov	r0, r8
 8005d16:	47d0      	blx	sl
 8005d18:	3001      	adds	r0, #1
 8005d1a:	d0ab      	beq.n	8005c74 <_printf_i+0x164>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	079b      	lsls	r3, r3, #30
 8005d20:	d413      	bmi.n	8005d4a <_printf_i+0x23a>
 8005d22:	68e0      	ldr	r0, [r4, #12]
 8005d24:	9b03      	ldr	r3, [sp, #12]
 8005d26:	4298      	cmp	r0, r3
 8005d28:	bfb8      	it	lt
 8005d2a:	4618      	movlt	r0, r3
 8005d2c:	e7a4      	b.n	8005c78 <_printf_i+0x168>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	4632      	mov	r2, r6
 8005d32:	4649      	mov	r1, r9
 8005d34:	4640      	mov	r0, r8
 8005d36:	47d0      	blx	sl
 8005d38:	3001      	adds	r0, #1
 8005d3a:	d09b      	beq.n	8005c74 <_printf_i+0x164>
 8005d3c:	3501      	adds	r5, #1
 8005d3e:	68e3      	ldr	r3, [r4, #12]
 8005d40:	9903      	ldr	r1, [sp, #12]
 8005d42:	1a5b      	subs	r3, r3, r1
 8005d44:	42ab      	cmp	r3, r5
 8005d46:	dcf2      	bgt.n	8005d2e <_printf_i+0x21e>
 8005d48:	e7eb      	b.n	8005d22 <_printf_i+0x212>
 8005d4a:	2500      	movs	r5, #0
 8005d4c:	f104 0619 	add.w	r6, r4, #25
 8005d50:	e7f5      	b.n	8005d3e <_printf_i+0x22e>
 8005d52:	bf00      	nop
 8005d54:	08008252 	.word	0x08008252
 8005d58:	08008263 	.word	0x08008263

08005d5c <siprintf>:
 8005d5c:	b40e      	push	{r1, r2, r3}
 8005d5e:	b500      	push	{lr}
 8005d60:	b09c      	sub	sp, #112	; 0x70
 8005d62:	ab1d      	add	r3, sp, #116	; 0x74
 8005d64:	9002      	str	r0, [sp, #8]
 8005d66:	9006      	str	r0, [sp, #24]
 8005d68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d6c:	4809      	ldr	r0, [pc, #36]	; (8005d94 <siprintf+0x38>)
 8005d6e:	9107      	str	r1, [sp, #28]
 8005d70:	9104      	str	r1, [sp, #16]
 8005d72:	4909      	ldr	r1, [pc, #36]	; (8005d98 <siprintf+0x3c>)
 8005d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d78:	9105      	str	r1, [sp, #20]
 8005d7a:	6800      	ldr	r0, [r0, #0]
 8005d7c:	9301      	str	r3, [sp, #4]
 8005d7e:	a902      	add	r1, sp, #8
 8005d80:	f001 fb34 	bl	80073ec <_svfiprintf_r>
 8005d84:	9b02      	ldr	r3, [sp, #8]
 8005d86:	2200      	movs	r2, #0
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	b01c      	add	sp, #112	; 0x70
 8005d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d90:	b003      	add	sp, #12
 8005d92:	4770      	bx	lr
 8005d94:	20000014 	.word	0x20000014
 8005d98:	ffff0208 	.word	0xffff0208

08005d9c <quorem>:
 8005d9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da0:	6903      	ldr	r3, [r0, #16]
 8005da2:	690c      	ldr	r4, [r1, #16]
 8005da4:	42a3      	cmp	r3, r4
 8005da6:	4607      	mov	r7, r0
 8005da8:	f2c0 8081 	blt.w	8005eae <quorem+0x112>
 8005dac:	3c01      	subs	r4, #1
 8005dae:	f101 0814 	add.w	r8, r1, #20
 8005db2:	f100 0514 	add.w	r5, r0, #20
 8005db6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dba:	9301      	str	r3, [sp, #4]
 8005dbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005dc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005dcc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005dd4:	d331      	bcc.n	8005e3a <quorem+0x9e>
 8005dd6:	f04f 0e00 	mov.w	lr, #0
 8005dda:	4640      	mov	r0, r8
 8005ddc:	46ac      	mov	ip, r5
 8005dde:	46f2      	mov	sl, lr
 8005de0:	f850 2b04 	ldr.w	r2, [r0], #4
 8005de4:	b293      	uxth	r3, r2
 8005de6:	fb06 e303 	mla	r3, r6, r3, lr
 8005dea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	ebaa 0303 	sub.w	r3, sl, r3
 8005df4:	0c12      	lsrs	r2, r2, #16
 8005df6:	f8dc a000 	ldr.w	sl, [ip]
 8005dfa:	fb06 e202 	mla	r2, r6, r2, lr
 8005dfe:	fa13 f38a 	uxtah	r3, r3, sl
 8005e02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e06:	fa1f fa82 	uxth.w	sl, r2
 8005e0a:	f8dc 2000 	ldr.w	r2, [ip]
 8005e0e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005e12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e1c:	4581      	cmp	r9, r0
 8005e1e:	f84c 3b04 	str.w	r3, [ip], #4
 8005e22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e26:	d2db      	bcs.n	8005de0 <quorem+0x44>
 8005e28:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e2c:	b92b      	cbnz	r3, 8005e3a <quorem+0x9e>
 8005e2e:	9b01      	ldr	r3, [sp, #4]
 8005e30:	3b04      	subs	r3, #4
 8005e32:	429d      	cmp	r5, r3
 8005e34:	461a      	mov	r2, r3
 8005e36:	d32e      	bcc.n	8005e96 <quorem+0xfa>
 8005e38:	613c      	str	r4, [r7, #16]
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	f001 f8c0 	bl	8006fc0 <__mcmp>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	db24      	blt.n	8005e8e <quorem+0xf2>
 8005e44:	3601      	adds	r6, #1
 8005e46:	4628      	mov	r0, r5
 8005e48:	f04f 0c00 	mov.w	ip, #0
 8005e4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e50:	f8d0 e000 	ldr.w	lr, [r0]
 8005e54:	b293      	uxth	r3, r2
 8005e56:	ebac 0303 	sub.w	r3, ip, r3
 8005e5a:	0c12      	lsrs	r2, r2, #16
 8005e5c:	fa13 f38e 	uxtah	r3, r3, lr
 8005e60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e6e:	45c1      	cmp	r9, r8
 8005e70:	f840 3b04 	str.w	r3, [r0], #4
 8005e74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e78:	d2e8      	bcs.n	8005e4c <quorem+0xb0>
 8005e7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e82:	b922      	cbnz	r2, 8005e8e <quorem+0xf2>
 8005e84:	3b04      	subs	r3, #4
 8005e86:	429d      	cmp	r5, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	d30a      	bcc.n	8005ea2 <quorem+0x106>
 8005e8c:	613c      	str	r4, [r7, #16]
 8005e8e:	4630      	mov	r0, r6
 8005e90:	b003      	add	sp, #12
 8005e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e96:	6812      	ldr	r2, [r2, #0]
 8005e98:	3b04      	subs	r3, #4
 8005e9a:	2a00      	cmp	r2, #0
 8005e9c:	d1cc      	bne.n	8005e38 <quorem+0x9c>
 8005e9e:	3c01      	subs	r4, #1
 8005ea0:	e7c7      	b.n	8005e32 <quorem+0x96>
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	3b04      	subs	r3, #4
 8005ea6:	2a00      	cmp	r2, #0
 8005ea8:	d1f0      	bne.n	8005e8c <quorem+0xf0>
 8005eaa:	3c01      	subs	r4, #1
 8005eac:	e7eb      	b.n	8005e86 <quorem+0xea>
 8005eae:	2000      	movs	r0, #0
 8005eb0:	e7ee      	b.n	8005e90 <quorem+0xf4>
 8005eb2:	0000      	movs	r0, r0
 8005eb4:	0000      	movs	r0, r0
	...

08005eb8 <_dtoa_r>:
 8005eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ebc:	ed2d 8b02 	vpush	{d8}
 8005ec0:	ec57 6b10 	vmov	r6, r7, d0
 8005ec4:	b095      	sub	sp, #84	; 0x54
 8005ec6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ec8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ecc:	9105      	str	r1, [sp, #20]
 8005ece:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ed6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ed8:	b975      	cbnz	r5, 8005ef8 <_dtoa_r+0x40>
 8005eda:	2010      	movs	r0, #16
 8005edc:	f000 fddc 	bl	8006a98 <malloc>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	6260      	str	r0, [r4, #36]	; 0x24
 8005ee4:	b920      	cbnz	r0, 8005ef0 <_dtoa_r+0x38>
 8005ee6:	4bb2      	ldr	r3, [pc, #712]	; (80061b0 <_dtoa_r+0x2f8>)
 8005ee8:	21ea      	movs	r1, #234	; 0xea
 8005eea:	48b2      	ldr	r0, [pc, #712]	; (80061b4 <_dtoa_r+0x2fc>)
 8005eec:	f001 fb8e 	bl	800760c <__assert_func>
 8005ef0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ef4:	6005      	str	r5, [r0, #0]
 8005ef6:	60c5      	str	r5, [r0, #12]
 8005ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005efa:	6819      	ldr	r1, [r3, #0]
 8005efc:	b151      	cbz	r1, 8005f14 <_dtoa_r+0x5c>
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	604a      	str	r2, [r1, #4]
 8005f02:	2301      	movs	r3, #1
 8005f04:	4093      	lsls	r3, r2
 8005f06:	608b      	str	r3, [r1, #8]
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f000 fe1b 	bl	8006b44 <_Bfree>
 8005f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	1e3b      	subs	r3, r7, #0
 8005f16:	bfb9      	ittee	lt
 8005f18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f1c:	9303      	strlt	r3, [sp, #12]
 8005f1e:	2300      	movge	r3, #0
 8005f20:	f8c8 3000 	strge.w	r3, [r8]
 8005f24:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005f28:	4ba3      	ldr	r3, [pc, #652]	; (80061b8 <_dtoa_r+0x300>)
 8005f2a:	bfbc      	itt	lt
 8005f2c:	2201      	movlt	r2, #1
 8005f2e:	f8c8 2000 	strlt.w	r2, [r8]
 8005f32:	ea33 0309 	bics.w	r3, r3, r9
 8005f36:	d11b      	bne.n	8005f70 <_dtoa_r+0xb8>
 8005f38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f44:	4333      	orrs	r3, r6
 8005f46:	f000 857a 	beq.w	8006a3e <_dtoa_r+0xb86>
 8005f4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f4c:	b963      	cbnz	r3, 8005f68 <_dtoa_r+0xb0>
 8005f4e:	4b9b      	ldr	r3, [pc, #620]	; (80061bc <_dtoa_r+0x304>)
 8005f50:	e024      	b.n	8005f9c <_dtoa_r+0xe4>
 8005f52:	4b9b      	ldr	r3, [pc, #620]	; (80061c0 <_dtoa_r+0x308>)
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	3308      	adds	r3, #8
 8005f58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	9800      	ldr	r0, [sp, #0]
 8005f5e:	b015      	add	sp, #84	; 0x54
 8005f60:	ecbd 8b02 	vpop	{d8}
 8005f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f68:	4b94      	ldr	r3, [pc, #592]	; (80061bc <_dtoa_r+0x304>)
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	3303      	adds	r3, #3
 8005f6e:	e7f3      	b.n	8005f58 <_dtoa_r+0xa0>
 8005f70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f74:	2200      	movs	r2, #0
 8005f76:	ec51 0b17 	vmov	r0, r1, d7
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005f80:	f7fa fdaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f84:	4680      	mov	r8, r0
 8005f86:	b158      	cbz	r0, 8005fa0 <_dtoa_r+0xe8>
 8005f88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8551 	beq.w	8006a38 <_dtoa_r+0xb80>
 8005f96:	488b      	ldr	r0, [pc, #556]	; (80061c4 <_dtoa_r+0x30c>)
 8005f98:	6018      	str	r0, [r3, #0]
 8005f9a:	1e43      	subs	r3, r0, #1
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	e7dd      	b.n	8005f5c <_dtoa_r+0xa4>
 8005fa0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005fa4:	aa12      	add	r2, sp, #72	; 0x48
 8005fa6:	a913      	add	r1, sp, #76	; 0x4c
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f001 f8ad 	bl	8007108 <__d2b>
 8005fae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005fb2:	4683      	mov	fp, r0
 8005fb4:	2d00      	cmp	r5, #0
 8005fb6:	d07c      	beq.n	80060b2 <_dtoa_r+0x1fa>
 8005fb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005fbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fc2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005fc6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005fca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005fce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005fd2:	4b7d      	ldr	r3, [pc, #500]	; (80061c8 <_dtoa_r+0x310>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	4639      	mov	r1, r7
 8005fda:	f7fa f95d 	bl	8000298 <__aeabi_dsub>
 8005fde:	a36e      	add	r3, pc, #440	; (adr r3, 8006198 <_dtoa_r+0x2e0>)
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	f7fa fb10 	bl	8000608 <__aeabi_dmul>
 8005fe8:	a36d      	add	r3, pc, #436	; (adr r3, 80061a0 <_dtoa_r+0x2e8>)
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	f7fa f955 	bl	800029c <__adddf3>
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	460f      	mov	r7, r1
 8005ff8:	f7fa fa9c 	bl	8000534 <__aeabi_i2d>
 8005ffc:	a36a      	add	r3, pc, #424	; (adr r3, 80061a8 <_dtoa_r+0x2f0>)
 8005ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006002:	f7fa fb01 	bl	8000608 <__aeabi_dmul>
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	4630      	mov	r0, r6
 800600c:	4639      	mov	r1, r7
 800600e:	f7fa f945 	bl	800029c <__adddf3>
 8006012:	4606      	mov	r6, r0
 8006014:	460f      	mov	r7, r1
 8006016:	f7fa fda7 	bl	8000b68 <__aeabi_d2iz>
 800601a:	2200      	movs	r2, #0
 800601c:	4682      	mov	sl, r0
 800601e:	2300      	movs	r3, #0
 8006020:	4630      	mov	r0, r6
 8006022:	4639      	mov	r1, r7
 8006024:	f7fa fd62 	bl	8000aec <__aeabi_dcmplt>
 8006028:	b148      	cbz	r0, 800603e <_dtoa_r+0x186>
 800602a:	4650      	mov	r0, sl
 800602c:	f7fa fa82 	bl	8000534 <__aeabi_i2d>
 8006030:	4632      	mov	r2, r6
 8006032:	463b      	mov	r3, r7
 8006034:	f7fa fd50 	bl	8000ad8 <__aeabi_dcmpeq>
 8006038:	b908      	cbnz	r0, 800603e <_dtoa_r+0x186>
 800603a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800603e:	f1ba 0f16 	cmp.w	sl, #22
 8006042:	d854      	bhi.n	80060ee <_dtoa_r+0x236>
 8006044:	4b61      	ldr	r3, [pc, #388]	; (80061cc <_dtoa_r+0x314>)
 8006046:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006052:	f7fa fd4b 	bl	8000aec <__aeabi_dcmplt>
 8006056:	2800      	cmp	r0, #0
 8006058:	d04b      	beq.n	80060f2 <_dtoa_r+0x23a>
 800605a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800605e:	2300      	movs	r3, #0
 8006060:	930e      	str	r3, [sp, #56]	; 0x38
 8006062:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006064:	1b5d      	subs	r5, r3, r5
 8006066:	1e6b      	subs	r3, r5, #1
 8006068:	9304      	str	r3, [sp, #16]
 800606a:	bf43      	ittte	mi
 800606c:	2300      	movmi	r3, #0
 800606e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006072:	9304      	strmi	r3, [sp, #16]
 8006074:	f04f 0800 	movpl.w	r8, #0
 8006078:	f1ba 0f00 	cmp.w	sl, #0
 800607c:	db3b      	blt.n	80060f6 <_dtoa_r+0x23e>
 800607e:	9b04      	ldr	r3, [sp, #16]
 8006080:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006084:	4453      	add	r3, sl
 8006086:	9304      	str	r3, [sp, #16]
 8006088:	2300      	movs	r3, #0
 800608a:	9306      	str	r3, [sp, #24]
 800608c:	9b05      	ldr	r3, [sp, #20]
 800608e:	2b09      	cmp	r3, #9
 8006090:	d869      	bhi.n	8006166 <_dtoa_r+0x2ae>
 8006092:	2b05      	cmp	r3, #5
 8006094:	bfc4      	itt	gt
 8006096:	3b04      	subgt	r3, #4
 8006098:	9305      	strgt	r3, [sp, #20]
 800609a:	9b05      	ldr	r3, [sp, #20]
 800609c:	f1a3 0302 	sub.w	r3, r3, #2
 80060a0:	bfcc      	ite	gt
 80060a2:	2500      	movgt	r5, #0
 80060a4:	2501      	movle	r5, #1
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	d869      	bhi.n	800617e <_dtoa_r+0x2c6>
 80060aa:	e8df f003 	tbb	[pc, r3]
 80060ae:	4e2c      	.short	0x4e2c
 80060b0:	5a4c      	.short	0x5a4c
 80060b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80060b6:	441d      	add	r5, r3
 80060b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80060bc:	2b20      	cmp	r3, #32
 80060be:	bfc1      	itttt	gt
 80060c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80060c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80060c8:	fa09 f303 	lslgt.w	r3, r9, r3
 80060cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80060d0:	bfda      	itte	le
 80060d2:	f1c3 0320 	rsble	r3, r3, #32
 80060d6:	fa06 f003 	lslle.w	r0, r6, r3
 80060da:	4318      	orrgt	r0, r3
 80060dc:	f7fa fa1a 	bl	8000514 <__aeabi_ui2d>
 80060e0:	2301      	movs	r3, #1
 80060e2:	4606      	mov	r6, r0
 80060e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80060e8:	3d01      	subs	r5, #1
 80060ea:	9310      	str	r3, [sp, #64]	; 0x40
 80060ec:	e771      	b.n	8005fd2 <_dtoa_r+0x11a>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e7b6      	b.n	8006060 <_dtoa_r+0x1a8>
 80060f2:	900e      	str	r0, [sp, #56]	; 0x38
 80060f4:	e7b5      	b.n	8006062 <_dtoa_r+0x1aa>
 80060f6:	f1ca 0300 	rsb	r3, sl, #0
 80060fa:	9306      	str	r3, [sp, #24]
 80060fc:	2300      	movs	r3, #0
 80060fe:	eba8 080a 	sub.w	r8, r8, sl
 8006102:	930d      	str	r3, [sp, #52]	; 0x34
 8006104:	e7c2      	b.n	800608c <_dtoa_r+0x1d4>
 8006106:	2300      	movs	r3, #0
 8006108:	9308      	str	r3, [sp, #32]
 800610a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800610c:	2b00      	cmp	r3, #0
 800610e:	dc39      	bgt.n	8006184 <_dtoa_r+0x2cc>
 8006110:	f04f 0901 	mov.w	r9, #1
 8006114:	f8cd 9004 	str.w	r9, [sp, #4]
 8006118:	464b      	mov	r3, r9
 800611a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800611e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006120:	2200      	movs	r2, #0
 8006122:	6042      	str	r2, [r0, #4]
 8006124:	2204      	movs	r2, #4
 8006126:	f102 0614 	add.w	r6, r2, #20
 800612a:	429e      	cmp	r6, r3
 800612c:	6841      	ldr	r1, [r0, #4]
 800612e:	d92f      	bls.n	8006190 <_dtoa_r+0x2d8>
 8006130:	4620      	mov	r0, r4
 8006132:	f000 fcc7 	bl	8006ac4 <_Balloc>
 8006136:	9000      	str	r0, [sp, #0]
 8006138:	2800      	cmp	r0, #0
 800613a:	d14b      	bne.n	80061d4 <_dtoa_r+0x31c>
 800613c:	4b24      	ldr	r3, [pc, #144]	; (80061d0 <_dtoa_r+0x318>)
 800613e:	4602      	mov	r2, r0
 8006140:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006144:	e6d1      	b.n	8005eea <_dtoa_r+0x32>
 8006146:	2301      	movs	r3, #1
 8006148:	e7de      	b.n	8006108 <_dtoa_r+0x250>
 800614a:	2300      	movs	r3, #0
 800614c:	9308      	str	r3, [sp, #32]
 800614e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006150:	eb0a 0903 	add.w	r9, sl, r3
 8006154:	f109 0301 	add.w	r3, r9, #1
 8006158:	2b01      	cmp	r3, #1
 800615a:	9301      	str	r3, [sp, #4]
 800615c:	bfb8      	it	lt
 800615e:	2301      	movlt	r3, #1
 8006160:	e7dd      	b.n	800611e <_dtoa_r+0x266>
 8006162:	2301      	movs	r3, #1
 8006164:	e7f2      	b.n	800614c <_dtoa_r+0x294>
 8006166:	2501      	movs	r5, #1
 8006168:	2300      	movs	r3, #0
 800616a:	9305      	str	r3, [sp, #20]
 800616c:	9508      	str	r5, [sp, #32]
 800616e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006172:	2200      	movs	r2, #0
 8006174:	f8cd 9004 	str.w	r9, [sp, #4]
 8006178:	2312      	movs	r3, #18
 800617a:	9209      	str	r2, [sp, #36]	; 0x24
 800617c:	e7cf      	b.n	800611e <_dtoa_r+0x266>
 800617e:	2301      	movs	r3, #1
 8006180:	9308      	str	r3, [sp, #32]
 8006182:	e7f4      	b.n	800616e <_dtoa_r+0x2b6>
 8006184:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006188:	f8cd 9004 	str.w	r9, [sp, #4]
 800618c:	464b      	mov	r3, r9
 800618e:	e7c6      	b.n	800611e <_dtoa_r+0x266>
 8006190:	3101      	adds	r1, #1
 8006192:	6041      	str	r1, [r0, #4]
 8006194:	0052      	lsls	r2, r2, #1
 8006196:	e7c6      	b.n	8006126 <_dtoa_r+0x26e>
 8006198:	636f4361 	.word	0x636f4361
 800619c:	3fd287a7 	.word	0x3fd287a7
 80061a0:	8b60c8b3 	.word	0x8b60c8b3
 80061a4:	3fc68a28 	.word	0x3fc68a28
 80061a8:	509f79fb 	.word	0x509f79fb
 80061ac:	3fd34413 	.word	0x3fd34413
 80061b0:	08008281 	.word	0x08008281
 80061b4:	08008298 	.word	0x08008298
 80061b8:	7ff00000 	.word	0x7ff00000
 80061bc:	0800827d 	.word	0x0800827d
 80061c0:	08008274 	.word	0x08008274
 80061c4:	08008251 	.word	0x08008251
 80061c8:	3ff80000 	.word	0x3ff80000
 80061cc:	08008390 	.word	0x08008390
 80061d0:	080082f7 	.word	0x080082f7
 80061d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061d6:	9a00      	ldr	r2, [sp, #0]
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	9b01      	ldr	r3, [sp, #4]
 80061dc:	2b0e      	cmp	r3, #14
 80061de:	f200 80ad 	bhi.w	800633c <_dtoa_r+0x484>
 80061e2:	2d00      	cmp	r5, #0
 80061e4:	f000 80aa 	beq.w	800633c <_dtoa_r+0x484>
 80061e8:	f1ba 0f00 	cmp.w	sl, #0
 80061ec:	dd36      	ble.n	800625c <_dtoa_r+0x3a4>
 80061ee:	4ac3      	ldr	r2, [pc, #780]	; (80064fc <_dtoa_r+0x644>)
 80061f0:	f00a 030f 	and.w	r3, sl, #15
 80061f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061f8:	ed93 7b00 	vldr	d7, [r3]
 80061fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006200:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006204:	eeb0 8a47 	vmov.f32	s16, s14
 8006208:	eef0 8a67 	vmov.f32	s17, s15
 800620c:	d016      	beq.n	800623c <_dtoa_r+0x384>
 800620e:	4bbc      	ldr	r3, [pc, #752]	; (8006500 <_dtoa_r+0x648>)
 8006210:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006214:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006218:	f7fa fb20 	bl	800085c <__aeabi_ddiv>
 800621c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006220:	f007 070f 	and.w	r7, r7, #15
 8006224:	2503      	movs	r5, #3
 8006226:	4eb6      	ldr	r6, [pc, #728]	; (8006500 <_dtoa_r+0x648>)
 8006228:	b957      	cbnz	r7, 8006240 <_dtoa_r+0x388>
 800622a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800622e:	ec53 2b18 	vmov	r2, r3, d8
 8006232:	f7fa fb13 	bl	800085c <__aeabi_ddiv>
 8006236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800623a:	e029      	b.n	8006290 <_dtoa_r+0x3d8>
 800623c:	2502      	movs	r5, #2
 800623e:	e7f2      	b.n	8006226 <_dtoa_r+0x36e>
 8006240:	07f9      	lsls	r1, r7, #31
 8006242:	d508      	bpl.n	8006256 <_dtoa_r+0x39e>
 8006244:	ec51 0b18 	vmov	r0, r1, d8
 8006248:	e9d6 2300 	ldrd	r2, r3, [r6]
 800624c:	f7fa f9dc 	bl	8000608 <__aeabi_dmul>
 8006250:	ec41 0b18 	vmov	d8, r0, r1
 8006254:	3501      	adds	r5, #1
 8006256:	107f      	asrs	r7, r7, #1
 8006258:	3608      	adds	r6, #8
 800625a:	e7e5      	b.n	8006228 <_dtoa_r+0x370>
 800625c:	f000 80a6 	beq.w	80063ac <_dtoa_r+0x4f4>
 8006260:	f1ca 0600 	rsb	r6, sl, #0
 8006264:	4ba5      	ldr	r3, [pc, #660]	; (80064fc <_dtoa_r+0x644>)
 8006266:	4fa6      	ldr	r7, [pc, #664]	; (8006500 <_dtoa_r+0x648>)
 8006268:	f006 020f 	and.w	r2, r6, #15
 800626c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006278:	f7fa f9c6 	bl	8000608 <__aeabi_dmul>
 800627c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006280:	1136      	asrs	r6, r6, #4
 8006282:	2300      	movs	r3, #0
 8006284:	2502      	movs	r5, #2
 8006286:	2e00      	cmp	r6, #0
 8006288:	f040 8085 	bne.w	8006396 <_dtoa_r+0x4de>
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1d2      	bne.n	8006236 <_dtoa_r+0x37e>
 8006290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 808c 	beq.w	80063b0 <_dtoa_r+0x4f8>
 8006298:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800629c:	4b99      	ldr	r3, [pc, #612]	; (8006504 <_dtoa_r+0x64c>)
 800629e:	2200      	movs	r2, #0
 80062a0:	4630      	mov	r0, r6
 80062a2:	4639      	mov	r1, r7
 80062a4:	f7fa fc22 	bl	8000aec <__aeabi_dcmplt>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	f000 8081 	beq.w	80063b0 <_dtoa_r+0x4f8>
 80062ae:	9b01      	ldr	r3, [sp, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d07d      	beq.n	80063b0 <_dtoa_r+0x4f8>
 80062b4:	f1b9 0f00 	cmp.w	r9, #0
 80062b8:	dd3c      	ble.n	8006334 <_dtoa_r+0x47c>
 80062ba:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80062be:	9307      	str	r3, [sp, #28]
 80062c0:	2200      	movs	r2, #0
 80062c2:	4b91      	ldr	r3, [pc, #580]	; (8006508 <_dtoa_r+0x650>)
 80062c4:	4630      	mov	r0, r6
 80062c6:	4639      	mov	r1, r7
 80062c8:	f7fa f99e 	bl	8000608 <__aeabi_dmul>
 80062cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062d0:	3501      	adds	r5, #1
 80062d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80062d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80062da:	4628      	mov	r0, r5
 80062dc:	f7fa f92a 	bl	8000534 <__aeabi_i2d>
 80062e0:	4632      	mov	r2, r6
 80062e2:	463b      	mov	r3, r7
 80062e4:	f7fa f990 	bl	8000608 <__aeabi_dmul>
 80062e8:	4b88      	ldr	r3, [pc, #544]	; (800650c <_dtoa_r+0x654>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	f7f9 ffd6 	bl	800029c <__adddf3>
 80062f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80062f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062f8:	9303      	str	r3, [sp, #12]
 80062fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d15c      	bne.n	80063ba <_dtoa_r+0x502>
 8006300:	4b83      	ldr	r3, [pc, #524]	; (8006510 <_dtoa_r+0x658>)
 8006302:	2200      	movs	r2, #0
 8006304:	4630      	mov	r0, r6
 8006306:	4639      	mov	r1, r7
 8006308:	f7f9 ffc6 	bl	8000298 <__aeabi_dsub>
 800630c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006310:	4606      	mov	r6, r0
 8006312:	460f      	mov	r7, r1
 8006314:	f7fa fc08 	bl	8000b28 <__aeabi_dcmpgt>
 8006318:	2800      	cmp	r0, #0
 800631a:	f040 8296 	bne.w	800684a <_dtoa_r+0x992>
 800631e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006322:	4630      	mov	r0, r6
 8006324:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006328:	4639      	mov	r1, r7
 800632a:	f7fa fbdf 	bl	8000aec <__aeabi_dcmplt>
 800632e:	2800      	cmp	r0, #0
 8006330:	f040 8288 	bne.w	8006844 <_dtoa_r+0x98c>
 8006334:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006338:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800633c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800633e:	2b00      	cmp	r3, #0
 8006340:	f2c0 8158 	blt.w	80065f4 <_dtoa_r+0x73c>
 8006344:	f1ba 0f0e 	cmp.w	sl, #14
 8006348:	f300 8154 	bgt.w	80065f4 <_dtoa_r+0x73c>
 800634c:	4b6b      	ldr	r3, [pc, #428]	; (80064fc <_dtoa_r+0x644>)
 800634e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006352:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006358:	2b00      	cmp	r3, #0
 800635a:	f280 80e3 	bge.w	8006524 <_dtoa_r+0x66c>
 800635e:	9b01      	ldr	r3, [sp, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	f300 80df 	bgt.w	8006524 <_dtoa_r+0x66c>
 8006366:	f040 826d 	bne.w	8006844 <_dtoa_r+0x98c>
 800636a:	4b69      	ldr	r3, [pc, #420]	; (8006510 <_dtoa_r+0x658>)
 800636c:	2200      	movs	r2, #0
 800636e:	4640      	mov	r0, r8
 8006370:	4649      	mov	r1, r9
 8006372:	f7fa f949 	bl	8000608 <__aeabi_dmul>
 8006376:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800637a:	f7fa fbcb 	bl	8000b14 <__aeabi_dcmpge>
 800637e:	9e01      	ldr	r6, [sp, #4]
 8006380:	4637      	mov	r7, r6
 8006382:	2800      	cmp	r0, #0
 8006384:	f040 8243 	bne.w	800680e <_dtoa_r+0x956>
 8006388:	9d00      	ldr	r5, [sp, #0]
 800638a:	2331      	movs	r3, #49	; 0x31
 800638c:	f805 3b01 	strb.w	r3, [r5], #1
 8006390:	f10a 0a01 	add.w	sl, sl, #1
 8006394:	e23f      	b.n	8006816 <_dtoa_r+0x95e>
 8006396:	07f2      	lsls	r2, r6, #31
 8006398:	d505      	bpl.n	80063a6 <_dtoa_r+0x4ee>
 800639a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800639e:	f7fa f933 	bl	8000608 <__aeabi_dmul>
 80063a2:	3501      	adds	r5, #1
 80063a4:	2301      	movs	r3, #1
 80063a6:	1076      	asrs	r6, r6, #1
 80063a8:	3708      	adds	r7, #8
 80063aa:	e76c      	b.n	8006286 <_dtoa_r+0x3ce>
 80063ac:	2502      	movs	r5, #2
 80063ae:	e76f      	b.n	8006290 <_dtoa_r+0x3d8>
 80063b0:	9b01      	ldr	r3, [sp, #4]
 80063b2:	f8cd a01c 	str.w	sl, [sp, #28]
 80063b6:	930c      	str	r3, [sp, #48]	; 0x30
 80063b8:	e78d      	b.n	80062d6 <_dtoa_r+0x41e>
 80063ba:	9900      	ldr	r1, [sp, #0]
 80063bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80063be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063c0:	4b4e      	ldr	r3, [pc, #312]	; (80064fc <_dtoa_r+0x644>)
 80063c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063c6:	4401      	add	r1, r0
 80063c8:	9102      	str	r1, [sp, #8]
 80063ca:	9908      	ldr	r1, [sp, #32]
 80063cc:	eeb0 8a47 	vmov.f32	s16, s14
 80063d0:	eef0 8a67 	vmov.f32	s17, s15
 80063d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063dc:	2900      	cmp	r1, #0
 80063de:	d045      	beq.n	800646c <_dtoa_r+0x5b4>
 80063e0:	494c      	ldr	r1, [pc, #304]	; (8006514 <_dtoa_r+0x65c>)
 80063e2:	2000      	movs	r0, #0
 80063e4:	f7fa fa3a 	bl	800085c <__aeabi_ddiv>
 80063e8:	ec53 2b18 	vmov	r2, r3, d8
 80063ec:	f7f9 ff54 	bl	8000298 <__aeabi_dsub>
 80063f0:	9d00      	ldr	r5, [sp, #0]
 80063f2:	ec41 0b18 	vmov	d8, r0, r1
 80063f6:	4639      	mov	r1, r7
 80063f8:	4630      	mov	r0, r6
 80063fa:	f7fa fbb5 	bl	8000b68 <__aeabi_d2iz>
 80063fe:	900c      	str	r0, [sp, #48]	; 0x30
 8006400:	f7fa f898 	bl	8000534 <__aeabi_i2d>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	4630      	mov	r0, r6
 800640a:	4639      	mov	r1, r7
 800640c:	f7f9 ff44 	bl	8000298 <__aeabi_dsub>
 8006410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006412:	3330      	adds	r3, #48	; 0x30
 8006414:	f805 3b01 	strb.w	r3, [r5], #1
 8006418:	ec53 2b18 	vmov	r2, r3, d8
 800641c:	4606      	mov	r6, r0
 800641e:	460f      	mov	r7, r1
 8006420:	f7fa fb64 	bl	8000aec <__aeabi_dcmplt>
 8006424:	2800      	cmp	r0, #0
 8006426:	d165      	bne.n	80064f4 <_dtoa_r+0x63c>
 8006428:	4632      	mov	r2, r6
 800642a:	463b      	mov	r3, r7
 800642c:	4935      	ldr	r1, [pc, #212]	; (8006504 <_dtoa_r+0x64c>)
 800642e:	2000      	movs	r0, #0
 8006430:	f7f9 ff32 	bl	8000298 <__aeabi_dsub>
 8006434:	ec53 2b18 	vmov	r2, r3, d8
 8006438:	f7fa fb58 	bl	8000aec <__aeabi_dcmplt>
 800643c:	2800      	cmp	r0, #0
 800643e:	f040 80b9 	bne.w	80065b4 <_dtoa_r+0x6fc>
 8006442:	9b02      	ldr	r3, [sp, #8]
 8006444:	429d      	cmp	r5, r3
 8006446:	f43f af75 	beq.w	8006334 <_dtoa_r+0x47c>
 800644a:	4b2f      	ldr	r3, [pc, #188]	; (8006508 <_dtoa_r+0x650>)
 800644c:	ec51 0b18 	vmov	r0, r1, d8
 8006450:	2200      	movs	r2, #0
 8006452:	f7fa f8d9 	bl	8000608 <__aeabi_dmul>
 8006456:	4b2c      	ldr	r3, [pc, #176]	; (8006508 <_dtoa_r+0x650>)
 8006458:	ec41 0b18 	vmov	d8, r0, r1
 800645c:	2200      	movs	r2, #0
 800645e:	4630      	mov	r0, r6
 8006460:	4639      	mov	r1, r7
 8006462:	f7fa f8d1 	bl	8000608 <__aeabi_dmul>
 8006466:	4606      	mov	r6, r0
 8006468:	460f      	mov	r7, r1
 800646a:	e7c4      	b.n	80063f6 <_dtoa_r+0x53e>
 800646c:	ec51 0b17 	vmov	r0, r1, d7
 8006470:	f7fa f8ca 	bl	8000608 <__aeabi_dmul>
 8006474:	9b02      	ldr	r3, [sp, #8]
 8006476:	9d00      	ldr	r5, [sp, #0]
 8006478:	930c      	str	r3, [sp, #48]	; 0x30
 800647a:	ec41 0b18 	vmov	d8, r0, r1
 800647e:	4639      	mov	r1, r7
 8006480:	4630      	mov	r0, r6
 8006482:	f7fa fb71 	bl	8000b68 <__aeabi_d2iz>
 8006486:	9011      	str	r0, [sp, #68]	; 0x44
 8006488:	f7fa f854 	bl	8000534 <__aeabi_i2d>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	4630      	mov	r0, r6
 8006492:	4639      	mov	r1, r7
 8006494:	f7f9 ff00 	bl	8000298 <__aeabi_dsub>
 8006498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800649a:	3330      	adds	r3, #48	; 0x30
 800649c:	f805 3b01 	strb.w	r3, [r5], #1
 80064a0:	9b02      	ldr	r3, [sp, #8]
 80064a2:	429d      	cmp	r5, r3
 80064a4:	4606      	mov	r6, r0
 80064a6:	460f      	mov	r7, r1
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	d134      	bne.n	8006518 <_dtoa_r+0x660>
 80064ae:	4b19      	ldr	r3, [pc, #100]	; (8006514 <_dtoa_r+0x65c>)
 80064b0:	ec51 0b18 	vmov	r0, r1, d8
 80064b4:	f7f9 fef2 	bl	800029c <__adddf3>
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	4630      	mov	r0, r6
 80064be:	4639      	mov	r1, r7
 80064c0:	f7fa fb32 	bl	8000b28 <__aeabi_dcmpgt>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d175      	bne.n	80065b4 <_dtoa_r+0x6fc>
 80064c8:	ec53 2b18 	vmov	r2, r3, d8
 80064cc:	4911      	ldr	r1, [pc, #68]	; (8006514 <_dtoa_r+0x65c>)
 80064ce:	2000      	movs	r0, #0
 80064d0:	f7f9 fee2 	bl	8000298 <__aeabi_dsub>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	4630      	mov	r0, r6
 80064da:	4639      	mov	r1, r7
 80064dc:	f7fa fb06 	bl	8000aec <__aeabi_dcmplt>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	f43f af27 	beq.w	8006334 <_dtoa_r+0x47c>
 80064e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064e8:	1e6b      	subs	r3, r5, #1
 80064ea:	930c      	str	r3, [sp, #48]	; 0x30
 80064ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064f0:	2b30      	cmp	r3, #48	; 0x30
 80064f2:	d0f8      	beq.n	80064e6 <_dtoa_r+0x62e>
 80064f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80064f8:	e04a      	b.n	8006590 <_dtoa_r+0x6d8>
 80064fa:	bf00      	nop
 80064fc:	08008390 	.word	0x08008390
 8006500:	08008368 	.word	0x08008368
 8006504:	3ff00000 	.word	0x3ff00000
 8006508:	40240000 	.word	0x40240000
 800650c:	401c0000 	.word	0x401c0000
 8006510:	40140000 	.word	0x40140000
 8006514:	3fe00000 	.word	0x3fe00000
 8006518:	4baf      	ldr	r3, [pc, #700]	; (80067d8 <_dtoa_r+0x920>)
 800651a:	f7fa f875 	bl	8000608 <__aeabi_dmul>
 800651e:	4606      	mov	r6, r0
 8006520:	460f      	mov	r7, r1
 8006522:	e7ac      	b.n	800647e <_dtoa_r+0x5c6>
 8006524:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006528:	9d00      	ldr	r5, [sp, #0]
 800652a:	4642      	mov	r2, r8
 800652c:	464b      	mov	r3, r9
 800652e:	4630      	mov	r0, r6
 8006530:	4639      	mov	r1, r7
 8006532:	f7fa f993 	bl	800085c <__aeabi_ddiv>
 8006536:	f7fa fb17 	bl	8000b68 <__aeabi_d2iz>
 800653a:	9002      	str	r0, [sp, #8]
 800653c:	f7f9 fffa 	bl	8000534 <__aeabi_i2d>
 8006540:	4642      	mov	r2, r8
 8006542:	464b      	mov	r3, r9
 8006544:	f7fa f860 	bl	8000608 <__aeabi_dmul>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4630      	mov	r0, r6
 800654e:	4639      	mov	r1, r7
 8006550:	f7f9 fea2 	bl	8000298 <__aeabi_dsub>
 8006554:	9e02      	ldr	r6, [sp, #8]
 8006556:	9f01      	ldr	r7, [sp, #4]
 8006558:	3630      	adds	r6, #48	; 0x30
 800655a:	f805 6b01 	strb.w	r6, [r5], #1
 800655e:	9e00      	ldr	r6, [sp, #0]
 8006560:	1bae      	subs	r6, r5, r6
 8006562:	42b7      	cmp	r7, r6
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	d137      	bne.n	80065da <_dtoa_r+0x722>
 800656a:	f7f9 fe97 	bl	800029c <__adddf3>
 800656e:	4642      	mov	r2, r8
 8006570:	464b      	mov	r3, r9
 8006572:	4606      	mov	r6, r0
 8006574:	460f      	mov	r7, r1
 8006576:	f7fa fad7 	bl	8000b28 <__aeabi_dcmpgt>
 800657a:	b9c8      	cbnz	r0, 80065b0 <_dtoa_r+0x6f8>
 800657c:	4642      	mov	r2, r8
 800657e:	464b      	mov	r3, r9
 8006580:	4630      	mov	r0, r6
 8006582:	4639      	mov	r1, r7
 8006584:	f7fa faa8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006588:	b110      	cbz	r0, 8006590 <_dtoa_r+0x6d8>
 800658a:	9b02      	ldr	r3, [sp, #8]
 800658c:	07d9      	lsls	r1, r3, #31
 800658e:	d40f      	bmi.n	80065b0 <_dtoa_r+0x6f8>
 8006590:	4620      	mov	r0, r4
 8006592:	4659      	mov	r1, fp
 8006594:	f000 fad6 	bl	8006b44 <_Bfree>
 8006598:	2300      	movs	r3, #0
 800659a:	702b      	strb	r3, [r5, #0]
 800659c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800659e:	f10a 0001 	add.w	r0, sl, #1
 80065a2:	6018      	str	r0, [r3, #0]
 80065a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f43f acd8 	beq.w	8005f5c <_dtoa_r+0xa4>
 80065ac:	601d      	str	r5, [r3, #0]
 80065ae:	e4d5      	b.n	8005f5c <_dtoa_r+0xa4>
 80065b0:	f8cd a01c 	str.w	sl, [sp, #28]
 80065b4:	462b      	mov	r3, r5
 80065b6:	461d      	mov	r5, r3
 80065b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065bc:	2a39      	cmp	r2, #57	; 0x39
 80065be:	d108      	bne.n	80065d2 <_dtoa_r+0x71a>
 80065c0:	9a00      	ldr	r2, [sp, #0]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d1f7      	bne.n	80065b6 <_dtoa_r+0x6fe>
 80065c6:	9a07      	ldr	r2, [sp, #28]
 80065c8:	9900      	ldr	r1, [sp, #0]
 80065ca:	3201      	adds	r2, #1
 80065cc:	9207      	str	r2, [sp, #28]
 80065ce:	2230      	movs	r2, #48	; 0x30
 80065d0:	700a      	strb	r2, [r1, #0]
 80065d2:	781a      	ldrb	r2, [r3, #0]
 80065d4:	3201      	adds	r2, #1
 80065d6:	701a      	strb	r2, [r3, #0]
 80065d8:	e78c      	b.n	80064f4 <_dtoa_r+0x63c>
 80065da:	4b7f      	ldr	r3, [pc, #508]	; (80067d8 <_dtoa_r+0x920>)
 80065dc:	2200      	movs	r2, #0
 80065de:	f7fa f813 	bl	8000608 <__aeabi_dmul>
 80065e2:	2200      	movs	r2, #0
 80065e4:	2300      	movs	r3, #0
 80065e6:	4606      	mov	r6, r0
 80065e8:	460f      	mov	r7, r1
 80065ea:	f7fa fa75 	bl	8000ad8 <__aeabi_dcmpeq>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d09b      	beq.n	800652a <_dtoa_r+0x672>
 80065f2:	e7cd      	b.n	8006590 <_dtoa_r+0x6d8>
 80065f4:	9a08      	ldr	r2, [sp, #32]
 80065f6:	2a00      	cmp	r2, #0
 80065f8:	f000 80c4 	beq.w	8006784 <_dtoa_r+0x8cc>
 80065fc:	9a05      	ldr	r2, [sp, #20]
 80065fe:	2a01      	cmp	r2, #1
 8006600:	f300 80a8 	bgt.w	8006754 <_dtoa_r+0x89c>
 8006604:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006606:	2a00      	cmp	r2, #0
 8006608:	f000 80a0 	beq.w	800674c <_dtoa_r+0x894>
 800660c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006610:	9e06      	ldr	r6, [sp, #24]
 8006612:	4645      	mov	r5, r8
 8006614:	9a04      	ldr	r2, [sp, #16]
 8006616:	2101      	movs	r1, #1
 8006618:	441a      	add	r2, r3
 800661a:	4620      	mov	r0, r4
 800661c:	4498      	add	r8, r3
 800661e:	9204      	str	r2, [sp, #16]
 8006620:	f000 fb4c 	bl	8006cbc <__i2b>
 8006624:	4607      	mov	r7, r0
 8006626:	2d00      	cmp	r5, #0
 8006628:	dd0b      	ble.n	8006642 <_dtoa_r+0x78a>
 800662a:	9b04      	ldr	r3, [sp, #16]
 800662c:	2b00      	cmp	r3, #0
 800662e:	dd08      	ble.n	8006642 <_dtoa_r+0x78a>
 8006630:	42ab      	cmp	r3, r5
 8006632:	9a04      	ldr	r2, [sp, #16]
 8006634:	bfa8      	it	ge
 8006636:	462b      	movge	r3, r5
 8006638:	eba8 0803 	sub.w	r8, r8, r3
 800663c:	1aed      	subs	r5, r5, r3
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	9304      	str	r3, [sp, #16]
 8006642:	9b06      	ldr	r3, [sp, #24]
 8006644:	b1fb      	cbz	r3, 8006686 <_dtoa_r+0x7ce>
 8006646:	9b08      	ldr	r3, [sp, #32]
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 809f 	beq.w	800678c <_dtoa_r+0x8d4>
 800664e:	2e00      	cmp	r6, #0
 8006650:	dd11      	ble.n	8006676 <_dtoa_r+0x7be>
 8006652:	4639      	mov	r1, r7
 8006654:	4632      	mov	r2, r6
 8006656:	4620      	mov	r0, r4
 8006658:	f000 fbec 	bl	8006e34 <__pow5mult>
 800665c:	465a      	mov	r2, fp
 800665e:	4601      	mov	r1, r0
 8006660:	4607      	mov	r7, r0
 8006662:	4620      	mov	r0, r4
 8006664:	f000 fb40 	bl	8006ce8 <__multiply>
 8006668:	4659      	mov	r1, fp
 800666a:	9007      	str	r0, [sp, #28]
 800666c:	4620      	mov	r0, r4
 800666e:	f000 fa69 	bl	8006b44 <_Bfree>
 8006672:	9b07      	ldr	r3, [sp, #28]
 8006674:	469b      	mov	fp, r3
 8006676:	9b06      	ldr	r3, [sp, #24]
 8006678:	1b9a      	subs	r2, r3, r6
 800667a:	d004      	beq.n	8006686 <_dtoa_r+0x7ce>
 800667c:	4659      	mov	r1, fp
 800667e:	4620      	mov	r0, r4
 8006680:	f000 fbd8 	bl	8006e34 <__pow5mult>
 8006684:	4683      	mov	fp, r0
 8006686:	2101      	movs	r1, #1
 8006688:	4620      	mov	r0, r4
 800668a:	f000 fb17 	bl	8006cbc <__i2b>
 800668e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006690:	2b00      	cmp	r3, #0
 8006692:	4606      	mov	r6, r0
 8006694:	dd7c      	ble.n	8006790 <_dtoa_r+0x8d8>
 8006696:	461a      	mov	r2, r3
 8006698:	4601      	mov	r1, r0
 800669a:	4620      	mov	r0, r4
 800669c:	f000 fbca 	bl	8006e34 <__pow5mult>
 80066a0:	9b05      	ldr	r3, [sp, #20]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	4606      	mov	r6, r0
 80066a6:	dd76      	ble.n	8006796 <_dtoa_r+0x8de>
 80066a8:	2300      	movs	r3, #0
 80066aa:	9306      	str	r3, [sp, #24]
 80066ac:	6933      	ldr	r3, [r6, #16]
 80066ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80066b2:	6918      	ldr	r0, [r3, #16]
 80066b4:	f000 fab2 	bl	8006c1c <__hi0bits>
 80066b8:	f1c0 0020 	rsb	r0, r0, #32
 80066bc:	9b04      	ldr	r3, [sp, #16]
 80066be:	4418      	add	r0, r3
 80066c0:	f010 001f 	ands.w	r0, r0, #31
 80066c4:	f000 8086 	beq.w	80067d4 <_dtoa_r+0x91c>
 80066c8:	f1c0 0320 	rsb	r3, r0, #32
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	dd7f      	ble.n	80067d0 <_dtoa_r+0x918>
 80066d0:	f1c0 001c 	rsb	r0, r0, #28
 80066d4:	9b04      	ldr	r3, [sp, #16]
 80066d6:	4403      	add	r3, r0
 80066d8:	4480      	add	r8, r0
 80066da:	4405      	add	r5, r0
 80066dc:	9304      	str	r3, [sp, #16]
 80066de:	f1b8 0f00 	cmp.w	r8, #0
 80066e2:	dd05      	ble.n	80066f0 <_dtoa_r+0x838>
 80066e4:	4659      	mov	r1, fp
 80066e6:	4642      	mov	r2, r8
 80066e8:	4620      	mov	r0, r4
 80066ea:	f000 fbfd 	bl	8006ee8 <__lshift>
 80066ee:	4683      	mov	fp, r0
 80066f0:	9b04      	ldr	r3, [sp, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	dd05      	ble.n	8006702 <_dtoa_r+0x84a>
 80066f6:	4631      	mov	r1, r6
 80066f8:	461a      	mov	r2, r3
 80066fa:	4620      	mov	r0, r4
 80066fc:	f000 fbf4 	bl	8006ee8 <__lshift>
 8006700:	4606      	mov	r6, r0
 8006702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006704:	2b00      	cmp	r3, #0
 8006706:	d069      	beq.n	80067dc <_dtoa_r+0x924>
 8006708:	4631      	mov	r1, r6
 800670a:	4658      	mov	r0, fp
 800670c:	f000 fc58 	bl	8006fc0 <__mcmp>
 8006710:	2800      	cmp	r0, #0
 8006712:	da63      	bge.n	80067dc <_dtoa_r+0x924>
 8006714:	2300      	movs	r3, #0
 8006716:	4659      	mov	r1, fp
 8006718:	220a      	movs	r2, #10
 800671a:	4620      	mov	r0, r4
 800671c:	f000 fa34 	bl	8006b88 <__multadd>
 8006720:	9b08      	ldr	r3, [sp, #32]
 8006722:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006726:	4683      	mov	fp, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 818f 	beq.w	8006a4c <_dtoa_r+0xb94>
 800672e:	4639      	mov	r1, r7
 8006730:	2300      	movs	r3, #0
 8006732:	220a      	movs	r2, #10
 8006734:	4620      	mov	r0, r4
 8006736:	f000 fa27 	bl	8006b88 <__multadd>
 800673a:	f1b9 0f00 	cmp.w	r9, #0
 800673e:	4607      	mov	r7, r0
 8006740:	f300 808e 	bgt.w	8006860 <_dtoa_r+0x9a8>
 8006744:	9b05      	ldr	r3, [sp, #20]
 8006746:	2b02      	cmp	r3, #2
 8006748:	dc50      	bgt.n	80067ec <_dtoa_r+0x934>
 800674a:	e089      	b.n	8006860 <_dtoa_r+0x9a8>
 800674c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800674e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006752:	e75d      	b.n	8006610 <_dtoa_r+0x758>
 8006754:	9b01      	ldr	r3, [sp, #4]
 8006756:	1e5e      	subs	r6, r3, #1
 8006758:	9b06      	ldr	r3, [sp, #24]
 800675a:	42b3      	cmp	r3, r6
 800675c:	bfbf      	itttt	lt
 800675e:	9b06      	ldrlt	r3, [sp, #24]
 8006760:	9606      	strlt	r6, [sp, #24]
 8006762:	1af2      	sublt	r2, r6, r3
 8006764:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006766:	bfb6      	itet	lt
 8006768:	189b      	addlt	r3, r3, r2
 800676a:	1b9e      	subge	r6, r3, r6
 800676c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800676e:	9b01      	ldr	r3, [sp, #4]
 8006770:	bfb8      	it	lt
 8006772:	2600      	movlt	r6, #0
 8006774:	2b00      	cmp	r3, #0
 8006776:	bfb5      	itete	lt
 8006778:	eba8 0503 	sublt.w	r5, r8, r3
 800677c:	9b01      	ldrge	r3, [sp, #4]
 800677e:	2300      	movlt	r3, #0
 8006780:	4645      	movge	r5, r8
 8006782:	e747      	b.n	8006614 <_dtoa_r+0x75c>
 8006784:	9e06      	ldr	r6, [sp, #24]
 8006786:	9f08      	ldr	r7, [sp, #32]
 8006788:	4645      	mov	r5, r8
 800678a:	e74c      	b.n	8006626 <_dtoa_r+0x76e>
 800678c:	9a06      	ldr	r2, [sp, #24]
 800678e:	e775      	b.n	800667c <_dtoa_r+0x7c4>
 8006790:	9b05      	ldr	r3, [sp, #20]
 8006792:	2b01      	cmp	r3, #1
 8006794:	dc18      	bgt.n	80067c8 <_dtoa_r+0x910>
 8006796:	9b02      	ldr	r3, [sp, #8]
 8006798:	b9b3      	cbnz	r3, 80067c8 <_dtoa_r+0x910>
 800679a:	9b03      	ldr	r3, [sp, #12]
 800679c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067a0:	b9a3      	cbnz	r3, 80067cc <_dtoa_r+0x914>
 80067a2:	9b03      	ldr	r3, [sp, #12]
 80067a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067a8:	0d1b      	lsrs	r3, r3, #20
 80067aa:	051b      	lsls	r3, r3, #20
 80067ac:	b12b      	cbz	r3, 80067ba <_dtoa_r+0x902>
 80067ae:	9b04      	ldr	r3, [sp, #16]
 80067b0:	3301      	adds	r3, #1
 80067b2:	9304      	str	r3, [sp, #16]
 80067b4:	f108 0801 	add.w	r8, r8, #1
 80067b8:	2301      	movs	r3, #1
 80067ba:	9306      	str	r3, [sp, #24]
 80067bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f47f af74 	bne.w	80066ac <_dtoa_r+0x7f4>
 80067c4:	2001      	movs	r0, #1
 80067c6:	e779      	b.n	80066bc <_dtoa_r+0x804>
 80067c8:	2300      	movs	r3, #0
 80067ca:	e7f6      	b.n	80067ba <_dtoa_r+0x902>
 80067cc:	9b02      	ldr	r3, [sp, #8]
 80067ce:	e7f4      	b.n	80067ba <_dtoa_r+0x902>
 80067d0:	d085      	beq.n	80066de <_dtoa_r+0x826>
 80067d2:	4618      	mov	r0, r3
 80067d4:	301c      	adds	r0, #28
 80067d6:	e77d      	b.n	80066d4 <_dtoa_r+0x81c>
 80067d8:	40240000 	.word	0x40240000
 80067dc:	9b01      	ldr	r3, [sp, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	dc38      	bgt.n	8006854 <_dtoa_r+0x99c>
 80067e2:	9b05      	ldr	r3, [sp, #20]
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	dd35      	ble.n	8006854 <_dtoa_r+0x99c>
 80067e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80067ec:	f1b9 0f00 	cmp.w	r9, #0
 80067f0:	d10d      	bne.n	800680e <_dtoa_r+0x956>
 80067f2:	4631      	mov	r1, r6
 80067f4:	464b      	mov	r3, r9
 80067f6:	2205      	movs	r2, #5
 80067f8:	4620      	mov	r0, r4
 80067fa:	f000 f9c5 	bl	8006b88 <__multadd>
 80067fe:	4601      	mov	r1, r0
 8006800:	4606      	mov	r6, r0
 8006802:	4658      	mov	r0, fp
 8006804:	f000 fbdc 	bl	8006fc0 <__mcmp>
 8006808:	2800      	cmp	r0, #0
 800680a:	f73f adbd 	bgt.w	8006388 <_dtoa_r+0x4d0>
 800680e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006810:	9d00      	ldr	r5, [sp, #0]
 8006812:	ea6f 0a03 	mvn.w	sl, r3
 8006816:	f04f 0800 	mov.w	r8, #0
 800681a:	4631      	mov	r1, r6
 800681c:	4620      	mov	r0, r4
 800681e:	f000 f991 	bl	8006b44 <_Bfree>
 8006822:	2f00      	cmp	r7, #0
 8006824:	f43f aeb4 	beq.w	8006590 <_dtoa_r+0x6d8>
 8006828:	f1b8 0f00 	cmp.w	r8, #0
 800682c:	d005      	beq.n	800683a <_dtoa_r+0x982>
 800682e:	45b8      	cmp	r8, r7
 8006830:	d003      	beq.n	800683a <_dtoa_r+0x982>
 8006832:	4641      	mov	r1, r8
 8006834:	4620      	mov	r0, r4
 8006836:	f000 f985 	bl	8006b44 <_Bfree>
 800683a:	4639      	mov	r1, r7
 800683c:	4620      	mov	r0, r4
 800683e:	f000 f981 	bl	8006b44 <_Bfree>
 8006842:	e6a5      	b.n	8006590 <_dtoa_r+0x6d8>
 8006844:	2600      	movs	r6, #0
 8006846:	4637      	mov	r7, r6
 8006848:	e7e1      	b.n	800680e <_dtoa_r+0x956>
 800684a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800684c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006850:	4637      	mov	r7, r6
 8006852:	e599      	b.n	8006388 <_dtoa_r+0x4d0>
 8006854:	9b08      	ldr	r3, [sp, #32]
 8006856:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 80fd 	beq.w	8006a5a <_dtoa_r+0xba2>
 8006860:	2d00      	cmp	r5, #0
 8006862:	dd05      	ble.n	8006870 <_dtoa_r+0x9b8>
 8006864:	4639      	mov	r1, r7
 8006866:	462a      	mov	r2, r5
 8006868:	4620      	mov	r0, r4
 800686a:	f000 fb3d 	bl	8006ee8 <__lshift>
 800686e:	4607      	mov	r7, r0
 8006870:	9b06      	ldr	r3, [sp, #24]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d05c      	beq.n	8006930 <_dtoa_r+0xa78>
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	4620      	mov	r0, r4
 800687a:	f000 f923 	bl	8006ac4 <_Balloc>
 800687e:	4605      	mov	r5, r0
 8006880:	b928      	cbnz	r0, 800688e <_dtoa_r+0x9d6>
 8006882:	4b80      	ldr	r3, [pc, #512]	; (8006a84 <_dtoa_r+0xbcc>)
 8006884:	4602      	mov	r2, r0
 8006886:	f240 21ea 	movw	r1, #746	; 0x2ea
 800688a:	f7ff bb2e 	b.w	8005eea <_dtoa_r+0x32>
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	3202      	adds	r2, #2
 8006892:	0092      	lsls	r2, r2, #2
 8006894:	f107 010c 	add.w	r1, r7, #12
 8006898:	300c      	adds	r0, #12
 800689a:	f000 f905 	bl	8006aa8 <memcpy>
 800689e:	2201      	movs	r2, #1
 80068a0:	4629      	mov	r1, r5
 80068a2:	4620      	mov	r0, r4
 80068a4:	f000 fb20 	bl	8006ee8 <__lshift>
 80068a8:	9b00      	ldr	r3, [sp, #0]
 80068aa:	3301      	adds	r3, #1
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	9b00      	ldr	r3, [sp, #0]
 80068b0:	444b      	add	r3, r9
 80068b2:	9307      	str	r3, [sp, #28]
 80068b4:	9b02      	ldr	r3, [sp, #8]
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	46b8      	mov	r8, r7
 80068bc:	9306      	str	r3, [sp, #24]
 80068be:	4607      	mov	r7, r0
 80068c0:	9b01      	ldr	r3, [sp, #4]
 80068c2:	4631      	mov	r1, r6
 80068c4:	3b01      	subs	r3, #1
 80068c6:	4658      	mov	r0, fp
 80068c8:	9302      	str	r3, [sp, #8]
 80068ca:	f7ff fa67 	bl	8005d9c <quorem>
 80068ce:	4603      	mov	r3, r0
 80068d0:	3330      	adds	r3, #48	; 0x30
 80068d2:	9004      	str	r0, [sp, #16]
 80068d4:	4641      	mov	r1, r8
 80068d6:	4658      	mov	r0, fp
 80068d8:	9308      	str	r3, [sp, #32]
 80068da:	f000 fb71 	bl	8006fc0 <__mcmp>
 80068de:	463a      	mov	r2, r7
 80068e0:	4681      	mov	r9, r0
 80068e2:	4631      	mov	r1, r6
 80068e4:	4620      	mov	r0, r4
 80068e6:	f000 fb87 	bl	8006ff8 <__mdiff>
 80068ea:	68c2      	ldr	r2, [r0, #12]
 80068ec:	9b08      	ldr	r3, [sp, #32]
 80068ee:	4605      	mov	r5, r0
 80068f0:	bb02      	cbnz	r2, 8006934 <_dtoa_r+0xa7c>
 80068f2:	4601      	mov	r1, r0
 80068f4:	4658      	mov	r0, fp
 80068f6:	f000 fb63 	bl	8006fc0 <__mcmp>
 80068fa:	9b08      	ldr	r3, [sp, #32]
 80068fc:	4602      	mov	r2, r0
 80068fe:	4629      	mov	r1, r5
 8006900:	4620      	mov	r0, r4
 8006902:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006906:	f000 f91d 	bl	8006b44 <_Bfree>
 800690a:	9b05      	ldr	r3, [sp, #20]
 800690c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800690e:	9d01      	ldr	r5, [sp, #4]
 8006910:	ea43 0102 	orr.w	r1, r3, r2
 8006914:	9b06      	ldr	r3, [sp, #24]
 8006916:	430b      	orrs	r3, r1
 8006918:	9b08      	ldr	r3, [sp, #32]
 800691a:	d10d      	bne.n	8006938 <_dtoa_r+0xa80>
 800691c:	2b39      	cmp	r3, #57	; 0x39
 800691e:	d029      	beq.n	8006974 <_dtoa_r+0xabc>
 8006920:	f1b9 0f00 	cmp.w	r9, #0
 8006924:	dd01      	ble.n	800692a <_dtoa_r+0xa72>
 8006926:	9b04      	ldr	r3, [sp, #16]
 8006928:	3331      	adds	r3, #49	; 0x31
 800692a:	9a02      	ldr	r2, [sp, #8]
 800692c:	7013      	strb	r3, [r2, #0]
 800692e:	e774      	b.n	800681a <_dtoa_r+0x962>
 8006930:	4638      	mov	r0, r7
 8006932:	e7b9      	b.n	80068a8 <_dtoa_r+0x9f0>
 8006934:	2201      	movs	r2, #1
 8006936:	e7e2      	b.n	80068fe <_dtoa_r+0xa46>
 8006938:	f1b9 0f00 	cmp.w	r9, #0
 800693c:	db06      	blt.n	800694c <_dtoa_r+0xa94>
 800693e:	9905      	ldr	r1, [sp, #20]
 8006940:	ea41 0909 	orr.w	r9, r1, r9
 8006944:	9906      	ldr	r1, [sp, #24]
 8006946:	ea59 0101 	orrs.w	r1, r9, r1
 800694a:	d120      	bne.n	800698e <_dtoa_r+0xad6>
 800694c:	2a00      	cmp	r2, #0
 800694e:	ddec      	ble.n	800692a <_dtoa_r+0xa72>
 8006950:	4659      	mov	r1, fp
 8006952:	2201      	movs	r2, #1
 8006954:	4620      	mov	r0, r4
 8006956:	9301      	str	r3, [sp, #4]
 8006958:	f000 fac6 	bl	8006ee8 <__lshift>
 800695c:	4631      	mov	r1, r6
 800695e:	4683      	mov	fp, r0
 8006960:	f000 fb2e 	bl	8006fc0 <__mcmp>
 8006964:	2800      	cmp	r0, #0
 8006966:	9b01      	ldr	r3, [sp, #4]
 8006968:	dc02      	bgt.n	8006970 <_dtoa_r+0xab8>
 800696a:	d1de      	bne.n	800692a <_dtoa_r+0xa72>
 800696c:	07da      	lsls	r2, r3, #31
 800696e:	d5dc      	bpl.n	800692a <_dtoa_r+0xa72>
 8006970:	2b39      	cmp	r3, #57	; 0x39
 8006972:	d1d8      	bne.n	8006926 <_dtoa_r+0xa6e>
 8006974:	9a02      	ldr	r2, [sp, #8]
 8006976:	2339      	movs	r3, #57	; 0x39
 8006978:	7013      	strb	r3, [r2, #0]
 800697a:	462b      	mov	r3, r5
 800697c:	461d      	mov	r5, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006984:	2a39      	cmp	r2, #57	; 0x39
 8006986:	d050      	beq.n	8006a2a <_dtoa_r+0xb72>
 8006988:	3201      	adds	r2, #1
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	e745      	b.n	800681a <_dtoa_r+0x962>
 800698e:	2a00      	cmp	r2, #0
 8006990:	dd03      	ble.n	800699a <_dtoa_r+0xae2>
 8006992:	2b39      	cmp	r3, #57	; 0x39
 8006994:	d0ee      	beq.n	8006974 <_dtoa_r+0xabc>
 8006996:	3301      	adds	r3, #1
 8006998:	e7c7      	b.n	800692a <_dtoa_r+0xa72>
 800699a:	9a01      	ldr	r2, [sp, #4]
 800699c:	9907      	ldr	r1, [sp, #28]
 800699e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80069a2:	428a      	cmp	r2, r1
 80069a4:	d02a      	beq.n	80069fc <_dtoa_r+0xb44>
 80069a6:	4659      	mov	r1, fp
 80069a8:	2300      	movs	r3, #0
 80069aa:	220a      	movs	r2, #10
 80069ac:	4620      	mov	r0, r4
 80069ae:	f000 f8eb 	bl	8006b88 <__multadd>
 80069b2:	45b8      	cmp	r8, r7
 80069b4:	4683      	mov	fp, r0
 80069b6:	f04f 0300 	mov.w	r3, #0
 80069ba:	f04f 020a 	mov.w	r2, #10
 80069be:	4641      	mov	r1, r8
 80069c0:	4620      	mov	r0, r4
 80069c2:	d107      	bne.n	80069d4 <_dtoa_r+0xb1c>
 80069c4:	f000 f8e0 	bl	8006b88 <__multadd>
 80069c8:	4680      	mov	r8, r0
 80069ca:	4607      	mov	r7, r0
 80069cc:	9b01      	ldr	r3, [sp, #4]
 80069ce:	3301      	adds	r3, #1
 80069d0:	9301      	str	r3, [sp, #4]
 80069d2:	e775      	b.n	80068c0 <_dtoa_r+0xa08>
 80069d4:	f000 f8d8 	bl	8006b88 <__multadd>
 80069d8:	4639      	mov	r1, r7
 80069da:	4680      	mov	r8, r0
 80069dc:	2300      	movs	r3, #0
 80069de:	220a      	movs	r2, #10
 80069e0:	4620      	mov	r0, r4
 80069e2:	f000 f8d1 	bl	8006b88 <__multadd>
 80069e6:	4607      	mov	r7, r0
 80069e8:	e7f0      	b.n	80069cc <_dtoa_r+0xb14>
 80069ea:	f1b9 0f00 	cmp.w	r9, #0
 80069ee:	9a00      	ldr	r2, [sp, #0]
 80069f0:	bfcc      	ite	gt
 80069f2:	464d      	movgt	r5, r9
 80069f4:	2501      	movle	r5, #1
 80069f6:	4415      	add	r5, r2
 80069f8:	f04f 0800 	mov.w	r8, #0
 80069fc:	4659      	mov	r1, fp
 80069fe:	2201      	movs	r2, #1
 8006a00:	4620      	mov	r0, r4
 8006a02:	9301      	str	r3, [sp, #4]
 8006a04:	f000 fa70 	bl	8006ee8 <__lshift>
 8006a08:	4631      	mov	r1, r6
 8006a0a:	4683      	mov	fp, r0
 8006a0c:	f000 fad8 	bl	8006fc0 <__mcmp>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	dcb2      	bgt.n	800697a <_dtoa_r+0xac2>
 8006a14:	d102      	bne.n	8006a1c <_dtoa_r+0xb64>
 8006a16:	9b01      	ldr	r3, [sp, #4]
 8006a18:	07db      	lsls	r3, r3, #31
 8006a1a:	d4ae      	bmi.n	800697a <_dtoa_r+0xac2>
 8006a1c:	462b      	mov	r3, r5
 8006a1e:	461d      	mov	r5, r3
 8006a20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a24:	2a30      	cmp	r2, #48	; 0x30
 8006a26:	d0fa      	beq.n	8006a1e <_dtoa_r+0xb66>
 8006a28:	e6f7      	b.n	800681a <_dtoa_r+0x962>
 8006a2a:	9a00      	ldr	r2, [sp, #0]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d1a5      	bne.n	800697c <_dtoa_r+0xac4>
 8006a30:	f10a 0a01 	add.w	sl, sl, #1
 8006a34:	2331      	movs	r3, #49	; 0x31
 8006a36:	e779      	b.n	800692c <_dtoa_r+0xa74>
 8006a38:	4b13      	ldr	r3, [pc, #76]	; (8006a88 <_dtoa_r+0xbd0>)
 8006a3a:	f7ff baaf 	b.w	8005f9c <_dtoa_r+0xe4>
 8006a3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f47f aa86 	bne.w	8005f52 <_dtoa_r+0x9a>
 8006a46:	4b11      	ldr	r3, [pc, #68]	; (8006a8c <_dtoa_r+0xbd4>)
 8006a48:	f7ff baa8 	b.w	8005f9c <_dtoa_r+0xe4>
 8006a4c:	f1b9 0f00 	cmp.w	r9, #0
 8006a50:	dc03      	bgt.n	8006a5a <_dtoa_r+0xba2>
 8006a52:	9b05      	ldr	r3, [sp, #20]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	f73f aec9 	bgt.w	80067ec <_dtoa_r+0x934>
 8006a5a:	9d00      	ldr	r5, [sp, #0]
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	4658      	mov	r0, fp
 8006a60:	f7ff f99c 	bl	8005d9c <quorem>
 8006a64:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006a68:	f805 3b01 	strb.w	r3, [r5], #1
 8006a6c:	9a00      	ldr	r2, [sp, #0]
 8006a6e:	1aaa      	subs	r2, r5, r2
 8006a70:	4591      	cmp	r9, r2
 8006a72:	ddba      	ble.n	80069ea <_dtoa_r+0xb32>
 8006a74:	4659      	mov	r1, fp
 8006a76:	2300      	movs	r3, #0
 8006a78:	220a      	movs	r2, #10
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f000 f884 	bl	8006b88 <__multadd>
 8006a80:	4683      	mov	fp, r0
 8006a82:	e7eb      	b.n	8006a5c <_dtoa_r+0xba4>
 8006a84:	080082f7 	.word	0x080082f7
 8006a88:	08008250 	.word	0x08008250
 8006a8c:	08008274 	.word	0x08008274

08006a90 <_localeconv_r>:
 8006a90:	4800      	ldr	r0, [pc, #0]	; (8006a94 <_localeconv_r+0x4>)
 8006a92:	4770      	bx	lr
 8006a94:	20000168 	.word	0x20000168

08006a98 <malloc>:
 8006a98:	4b02      	ldr	r3, [pc, #8]	; (8006aa4 <malloc+0xc>)
 8006a9a:	4601      	mov	r1, r0
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	f000 bbef 	b.w	8007280 <_malloc_r>
 8006aa2:	bf00      	nop
 8006aa4:	20000014 	.word	0x20000014

08006aa8 <memcpy>:
 8006aa8:	440a      	add	r2, r1
 8006aaa:	4291      	cmp	r1, r2
 8006aac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ab0:	d100      	bne.n	8006ab4 <memcpy+0xc>
 8006ab2:	4770      	bx	lr
 8006ab4:	b510      	push	{r4, lr}
 8006ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006abe:	4291      	cmp	r1, r2
 8006ac0:	d1f9      	bne.n	8006ab6 <memcpy+0xe>
 8006ac2:	bd10      	pop	{r4, pc}

08006ac4 <_Balloc>:
 8006ac4:	b570      	push	{r4, r5, r6, lr}
 8006ac6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ac8:	4604      	mov	r4, r0
 8006aca:	460d      	mov	r5, r1
 8006acc:	b976      	cbnz	r6, 8006aec <_Balloc+0x28>
 8006ace:	2010      	movs	r0, #16
 8006ad0:	f7ff ffe2 	bl	8006a98 <malloc>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	6260      	str	r0, [r4, #36]	; 0x24
 8006ad8:	b920      	cbnz	r0, 8006ae4 <_Balloc+0x20>
 8006ada:	4b18      	ldr	r3, [pc, #96]	; (8006b3c <_Balloc+0x78>)
 8006adc:	4818      	ldr	r0, [pc, #96]	; (8006b40 <_Balloc+0x7c>)
 8006ade:	2166      	movs	r1, #102	; 0x66
 8006ae0:	f000 fd94 	bl	800760c <__assert_func>
 8006ae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ae8:	6006      	str	r6, [r0, #0]
 8006aea:	60c6      	str	r6, [r0, #12]
 8006aec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006aee:	68f3      	ldr	r3, [r6, #12]
 8006af0:	b183      	cbz	r3, 8006b14 <_Balloc+0x50>
 8006af2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006afa:	b9b8      	cbnz	r0, 8006b2c <_Balloc+0x68>
 8006afc:	2101      	movs	r1, #1
 8006afe:	fa01 f605 	lsl.w	r6, r1, r5
 8006b02:	1d72      	adds	r2, r6, #5
 8006b04:	0092      	lsls	r2, r2, #2
 8006b06:	4620      	mov	r0, r4
 8006b08:	f000 fb5a 	bl	80071c0 <_calloc_r>
 8006b0c:	b160      	cbz	r0, 8006b28 <_Balloc+0x64>
 8006b0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b12:	e00e      	b.n	8006b32 <_Balloc+0x6e>
 8006b14:	2221      	movs	r2, #33	; 0x21
 8006b16:	2104      	movs	r1, #4
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f000 fb51 	bl	80071c0 <_calloc_r>
 8006b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b20:	60f0      	str	r0, [r6, #12]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e4      	bne.n	8006af2 <_Balloc+0x2e>
 8006b28:	2000      	movs	r0, #0
 8006b2a:	bd70      	pop	{r4, r5, r6, pc}
 8006b2c:	6802      	ldr	r2, [r0, #0]
 8006b2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b32:	2300      	movs	r3, #0
 8006b34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b38:	e7f7      	b.n	8006b2a <_Balloc+0x66>
 8006b3a:	bf00      	nop
 8006b3c:	08008281 	.word	0x08008281
 8006b40:	08008308 	.word	0x08008308

08006b44 <_Bfree>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b48:	4605      	mov	r5, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	b976      	cbnz	r6, 8006b6c <_Bfree+0x28>
 8006b4e:	2010      	movs	r0, #16
 8006b50:	f7ff ffa2 	bl	8006a98 <malloc>
 8006b54:	4602      	mov	r2, r0
 8006b56:	6268      	str	r0, [r5, #36]	; 0x24
 8006b58:	b920      	cbnz	r0, 8006b64 <_Bfree+0x20>
 8006b5a:	4b09      	ldr	r3, [pc, #36]	; (8006b80 <_Bfree+0x3c>)
 8006b5c:	4809      	ldr	r0, [pc, #36]	; (8006b84 <_Bfree+0x40>)
 8006b5e:	218a      	movs	r1, #138	; 0x8a
 8006b60:	f000 fd54 	bl	800760c <__assert_func>
 8006b64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b68:	6006      	str	r6, [r0, #0]
 8006b6a:	60c6      	str	r6, [r0, #12]
 8006b6c:	b13c      	cbz	r4, 8006b7e <_Bfree+0x3a>
 8006b6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b70:	6862      	ldr	r2, [r4, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b78:	6021      	str	r1, [r4, #0]
 8006b7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}
 8006b80:	08008281 	.word	0x08008281
 8006b84:	08008308 	.word	0x08008308

08006b88 <__multadd>:
 8006b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b8c:	690e      	ldr	r6, [r1, #16]
 8006b8e:	4607      	mov	r7, r0
 8006b90:	4698      	mov	r8, r3
 8006b92:	460c      	mov	r4, r1
 8006b94:	f101 0014 	add.w	r0, r1, #20
 8006b98:	2300      	movs	r3, #0
 8006b9a:	6805      	ldr	r5, [r0, #0]
 8006b9c:	b2a9      	uxth	r1, r5
 8006b9e:	fb02 8101 	mla	r1, r2, r1, r8
 8006ba2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006ba6:	0c2d      	lsrs	r5, r5, #16
 8006ba8:	fb02 c505 	mla	r5, r2, r5, ip
 8006bac:	b289      	uxth	r1, r1
 8006bae:	3301      	adds	r3, #1
 8006bb0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006bb4:	429e      	cmp	r6, r3
 8006bb6:	f840 1b04 	str.w	r1, [r0], #4
 8006bba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006bbe:	dcec      	bgt.n	8006b9a <__multadd+0x12>
 8006bc0:	f1b8 0f00 	cmp.w	r8, #0
 8006bc4:	d022      	beq.n	8006c0c <__multadd+0x84>
 8006bc6:	68a3      	ldr	r3, [r4, #8]
 8006bc8:	42b3      	cmp	r3, r6
 8006bca:	dc19      	bgt.n	8006c00 <__multadd+0x78>
 8006bcc:	6861      	ldr	r1, [r4, #4]
 8006bce:	4638      	mov	r0, r7
 8006bd0:	3101      	adds	r1, #1
 8006bd2:	f7ff ff77 	bl	8006ac4 <_Balloc>
 8006bd6:	4605      	mov	r5, r0
 8006bd8:	b928      	cbnz	r0, 8006be6 <__multadd+0x5e>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <__multadd+0x8c>)
 8006bde:	480e      	ldr	r0, [pc, #56]	; (8006c18 <__multadd+0x90>)
 8006be0:	21b5      	movs	r1, #181	; 0xb5
 8006be2:	f000 fd13 	bl	800760c <__assert_func>
 8006be6:	6922      	ldr	r2, [r4, #16]
 8006be8:	3202      	adds	r2, #2
 8006bea:	f104 010c 	add.w	r1, r4, #12
 8006bee:	0092      	lsls	r2, r2, #2
 8006bf0:	300c      	adds	r0, #12
 8006bf2:	f7ff ff59 	bl	8006aa8 <memcpy>
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	f7ff ffa3 	bl	8006b44 <_Bfree>
 8006bfe:	462c      	mov	r4, r5
 8006c00:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006c04:	3601      	adds	r6, #1
 8006c06:	f8c3 8014 	str.w	r8, [r3, #20]
 8006c0a:	6126      	str	r6, [r4, #16]
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c12:	bf00      	nop
 8006c14:	080082f7 	.word	0x080082f7
 8006c18:	08008308 	.word	0x08008308

08006c1c <__hi0bits>:
 8006c1c:	0c03      	lsrs	r3, r0, #16
 8006c1e:	041b      	lsls	r3, r3, #16
 8006c20:	b9d3      	cbnz	r3, 8006c58 <__hi0bits+0x3c>
 8006c22:	0400      	lsls	r0, r0, #16
 8006c24:	2310      	movs	r3, #16
 8006c26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006c2a:	bf04      	itt	eq
 8006c2c:	0200      	lsleq	r0, r0, #8
 8006c2e:	3308      	addeq	r3, #8
 8006c30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006c34:	bf04      	itt	eq
 8006c36:	0100      	lsleq	r0, r0, #4
 8006c38:	3304      	addeq	r3, #4
 8006c3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006c3e:	bf04      	itt	eq
 8006c40:	0080      	lsleq	r0, r0, #2
 8006c42:	3302      	addeq	r3, #2
 8006c44:	2800      	cmp	r0, #0
 8006c46:	db05      	blt.n	8006c54 <__hi0bits+0x38>
 8006c48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006c4c:	f103 0301 	add.w	r3, r3, #1
 8006c50:	bf08      	it	eq
 8006c52:	2320      	moveq	r3, #32
 8006c54:	4618      	mov	r0, r3
 8006c56:	4770      	bx	lr
 8006c58:	2300      	movs	r3, #0
 8006c5a:	e7e4      	b.n	8006c26 <__hi0bits+0xa>

08006c5c <__lo0bits>:
 8006c5c:	6803      	ldr	r3, [r0, #0]
 8006c5e:	f013 0207 	ands.w	r2, r3, #7
 8006c62:	4601      	mov	r1, r0
 8006c64:	d00b      	beq.n	8006c7e <__lo0bits+0x22>
 8006c66:	07da      	lsls	r2, r3, #31
 8006c68:	d424      	bmi.n	8006cb4 <__lo0bits+0x58>
 8006c6a:	0798      	lsls	r0, r3, #30
 8006c6c:	bf49      	itett	mi
 8006c6e:	085b      	lsrmi	r3, r3, #1
 8006c70:	089b      	lsrpl	r3, r3, #2
 8006c72:	2001      	movmi	r0, #1
 8006c74:	600b      	strmi	r3, [r1, #0]
 8006c76:	bf5c      	itt	pl
 8006c78:	600b      	strpl	r3, [r1, #0]
 8006c7a:	2002      	movpl	r0, #2
 8006c7c:	4770      	bx	lr
 8006c7e:	b298      	uxth	r0, r3
 8006c80:	b9b0      	cbnz	r0, 8006cb0 <__lo0bits+0x54>
 8006c82:	0c1b      	lsrs	r3, r3, #16
 8006c84:	2010      	movs	r0, #16
 8006c86:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006c8a:	bf04      	itt	eq
 8006c8c:	0a1b      	lsreq	r3, r3, #8
 8006c8e:	3008      	addeq	r0, #8
 8006c90:	071a      	lsls	r2, r3, #28
 8006c92:	bf04      	itt	eq
 8006c94:	091b      	lsreq	r3, r3, #4
 8006c96:	3004      	addeq	r0, #4
 8006c98:	079a      	lsls	r2, r3, #30
 8006c9a:	bf04      	itt	eq
 8006c9c:	089b      	lsreq	r3, r3, #2
 8006c9e:	3002      	addeq	r0, #2
 8006ca0:	07da      	lsls	r2, r3, #31
 8006ca2:	d403      	bmi.n	8006cac <__lo0bits+0x50>
 8006ca4:	085b      	lsrs	r3, r3, #1
 8006ca6:	f100 0001 	add.w	r0, r0, #1
 8006caa:	d005      	beq.n	8006cb8 <__lo0bits+0x5c>
 8006cac:	600b      	str	r3, [r1, #0]
 8006cae:	4770      	bx	lr
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	e7e8      	b.n	8006c86 <__lo0bits+0x2a>
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	4770      	bx	lr
 8006cb8:	2020      	movs	r0, #32
 8006cba:	4770      	bx	lr

08006cbc <__i2b>:
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	f7ff feff 	bl	8006ac4 <_Balloc>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	b928      	cbnz	r0, 8006cd6 <__i2b+0x1a>
 8006cca:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <__i2b+0x24>)
 8006ccc:	4805      	ldr	r0, [pc, #20]	; (8006ce4 <__i2b+0x28>)
 8006cce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006cd2:	f000 fc9b 	bl	800760c <__assert_func>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	6144      	str	r4, [r0, #20]
 8006cda:	6103      	str	r3, [r0, #16]
 8006cdc:	bd10      	pop	{r4, pc}
 8006cde:	bf00      	nop
 8006ce0:	080082f7 	.word	0x080082f7
 8006ce4:	08008308 	.word	0x08008308

08006ce8 <__multiply>:
 8006ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cec:	4614      	mov	r4, r2
 8006cee:	690a      	ldr	r2, [r1, #16]
 8006cf0:	6923      	ldr	r3, [r4, #16]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	bfb8      	it	lt
 8006cf6:	460b      	movlt	r3, r1
 8006cf8:	460d      	mov	r5, r1
 8006cfa:	bfbc      	itt	lt
 8006cfc:	4625      	movlt	r5, r4
 8006cfe:	461c      	movlt	r4, r3
 8006d00:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006d04:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006d08:	68ab      	ldr	r3, [r5, #8]
 8006d0a:	6869      	ldr	r1, [r5, #4]
 8006d0c:	eb0a 0709 	add.w	r7, sl, r9
 8006d10:	42bb      	cmp	r3, r7
 8006d12:	b085      	sub	sp, #20
 8006d14:	bfb8      	it	lt
 8006d16:	3101      	addlt	r1, #1
 8006d18:	f7ff fed4 	bl	8006ac4 <_Balloc>
 8006d1c:	b930      	cbnz	r0, 8006d2c <__multiply+0x44>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	4b42      	ldr	r3, [pc, #264]	; (8006e2c <__multiply+0x144>)
 8006d22:	4843      	ldr	r0, [pc, #268]	; (8006e30 <__multiply+0x148>)
 8006d24:	f240 115d 	movw	r1, #349	; 0x15d
 8006d28:	f000 fc70 	bl	800760c <__assert_func>
 8006d2c:	f100 0614 	add.w	r6, r0, #20
 8006d30:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006d34:	4633      	mov	r3, r6
 8006d36:	2200      	movs	r2, #0
 8006d38:	4543      	cmp	r3, r8
 8006d3a:	d31e      	bcc.n	8006d7a <__multiply+0x92>
 8006d3c:	f105 0c14 	add.w	ip, r5, #20
 8006d40:	f104 0314 	add.w	r3, r4, #20
 8006d44:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006d48:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006d4c:	9202      	str	r2, [sp, #8]
 8006d4e:	ebac 0205 	sub.w	r2, ip, r5
 8006d52:	3a15      	subs	r2, #21
 8006d54:	f022 0203 	bic.w	r2, r2, #3
 8006d58:	3204      	adds	r2, #4
 8006d5a:	f105 0115 	add.w	r1, r5, #21
 8006d5e:	458c      	cmp	ip, r1
 8006d60:	bf38      	it	cc
 8006d62:	2204      	movcc	r2, #4
 8006d64:	9201      	str	r2, [sp, #4]
 8006d66:	9a02      	ldr	r2, [sp, #8]
 8006d68:	9303      	str	r3, [sp, #12]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d808      	bhi.n	8006d80 <__multiply+0x98>
 8006d6e:	2f00      	cmp	r7, #0
 8006d70:	dc55      	bgt.n	8006e1e <__multiply+0x136>
 8006d72:	6107      	str	r7, [r0, #16]
 8006d74:	b005      	add	sp, #20
 8006d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d7a:	f843 2b04 	str.w	r2, [r3], #4
 8006d7e:	e7db      	b.n	8006d38 <__multiply+0x50>
 8006d80:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d84:	f1ba 0f00 	cmp.w	sl, #0
 8006d88:	d020      	beq.n	8006dcc <__multiply+0xe4>
 8006d8a:	f105 0e14 	add.w	lr, r5, #20
 8006d8e:	46b1      	mov	r9, r6
 8006d90:	2200      	movs	r2, #0
 8006d92:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006d96:	f8d9 b000 	ldr.w	fp, [r9]
 8006d9a:	b2a1      	uxth	r1, r4
 8006d9c:	fa1f fb8b 	uxth.w	fp, fp
 8006da0:	fb0a b101 	mla	r1, sl, r1, fp
 8006da4:	4411      	add	r1, r2
 8006da6:	f8d9 2000 	ldr.w	r2, [r9]
 8006daa:	0c24      	lsrs	r4, r4, #16
 8006dac:	0c12      	lsrs	r2, r2, #16
 8006dae:	fb0a 2404 	mla	r4, sl, r4, r2
 8006db2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006db6:	b289      	uxth	r1, r1
 8006db8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006dbc:	45f4      	cmp	ip, lr
 8006dbe:	f849 1b04 	str.w	r1, [r9], #4
 8006dc2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006dc6:	d8e4      	bhi.n	8006d92 <__multiply+0xaa>
 8006dc8:	9901      	ldr	r1, [sp, #4]
 8006dca:	5072      	str	r2, [r6, r1]
 8006dcc:	9a03      	ldr	r2, [sp, #12]
 8006dce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	f1b9 0f00 	cmp.w	r9, #0
 8006dd8:	d01f      	beq.n	8006e1a <__multiply+0x132>
 8006dda:	6834      	ldr	r4, [r6, #0]
 8006ddc:	f105 0114 	add.w	r1, r5, #20
 8006de0:	46b6      	mov	lr, r6
 8006de2:	f04f 0a00 	mov.w	sl, #0
 8006de6:	880a      	ldrh	r2, [r1, #0]
 8006de8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006dec:	fb09 b202 	mla	r2, r9, r2, fp
 8006df0:	4492      	add	sl, r2
 8006df2:	b2a4      	uxth	r4, r4
 8006df4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006df8:	f84e 4b04 	str.w	r4, [lr], #4
 8006dfc:	f851 4b04 	ldr.w	r4, [r1], #4
 8006e00:	f8be 2000 	ldrh.w	r2, [lr]
 8006e04:	0c24      	lsrs	r4, r4, #16
 8006e06:	fb09 2404 	mla	r4, r9, r4, r2
 8006e0a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006e0e:	458c      	cmp	ip, r1
 8006e10:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006e14:	d8e7      	bhi.n	8006de6 <__multiply+0xfe>
 8006e16:	9a01      	ldr	r2, [sp, #4]
 8006e18:	50b4      	str	r4, [r6, r2]
 8006e1a:	3604      	adds	r6, #4
 8006e1c:	e7a3      	b.n	8006d66 <__multiply+0x7e>
 8006e1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1a5      	bne.n	8006d72 <__multiply+0x8a>
 8006e26:	3f01      	subs	r7, #1
 8006e28:	e7a1      	b.n	8006d6e <__multiply+0x86>
 8006e2a:	bf00      	nop
 8006e2c:	080082f7 	.word	0x080082f7
 8006e30:	08008308 	.word	0x08008308

08006e34 <__pow5mult>:
 8006e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e38:	4615      	mov	r5, r2
 8006e3a:	f012 0203 	ands.w	r2, r2, #3
 8006e3e:	4606      	mov	r6, r0
 8006e40:	460f      	mov	r7, r1
 8006e42:	d007      	beq.n	8006e54 <__pow5mult+0x20>
 8006e44:	4c25      	ldr	r4, [pc, #148]	; (8006edc <__pow5mult+0xa8>)
 8006e46:	3a01      	subs	r2, #1
 8006e48:	2300      	movs	r3, #0
 8006e4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e4e:	f7ff fe9b 	bl	8006b88 <__multadd>
 8006e52:	4607      	mov	r7, r0
 8006e54:	10ad      	asrs	r5, r5, #2
 8006e56:	d03d      	beq.n	8006ed4 <__pow5mult+0xa0>
 8006e58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006e5a:	b97c      	cbnz	r4, 8006e7c <__pow5mult+0x48>
 8006e5c:	2010      	movs	r0, #16
 8006e5e:	f7ff fe1b 	bl	8006a98 <malloc>
 8006e62:	4602      	mov	r2, r0
 8006e64:	6270      	str	r0, [r6, #36]	; 0x24
 8006e66:	b928      	cbnz	r0, 8006e74 <__pow5mult+0x40>
 8006e68:	4b1d      	ldr	r3, [pc, #116]	; (8006ee0 <__pow5mult+0xac>)
 8006e6a:	481e      	ldr	r0, [pc, #120]	; (8006ee4 <__pow5mult+0xb0>)
 8006e6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006e70:	f000 fbcc 	bl	800760c <__assert_func>
 8006e74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e78:	6004      	str	r4, [r0, #0]
 8006e7a:	60c4      	str	r4, [r0, #12]
 8006e7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006e80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e84:	b94c      	cbnz	r4, 8006e9a <__pow5mult+0x66>
 8006e86:	f240 2171 	movw	r1, #625	; 0x271
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f7ff ff16 	bl	8006cbc <__i2b>
 8006e90:	2300      	movs	r3, #0
 8006e92:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e96:	4604      	mov	r4, r0
 8006e98:	6003      	str	r3, [r0, #0]
 8006e9a:	f04f 0900 	mov.w	r9, #0
 8006e9e:	07eb      	lsls	r3, r5, #31
 8006ea0:	d50a      	bpl.n	8006eb8 <__pow5mult+0x84>
 8006ea2:	4639      	mov	r1, r7
 8006ea4:	4622      	mov	r2, r4
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	f7ff ff1e 	bl	8006ce8 <__multiply>
 8006eac:	4639      	mov	r1, r7
 8006eae:	4680      	mov	r8, r0
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	f7ff fe47 	bl	8006b44 <_Bfree>
 8006eb6:	4647      	mov	r7, r8
 8006eb8:	106d      	asrs	r5, r5, #1
 8006eba:	d00b      	beq.n	8006ed4 <__pow5mult+0xa0>
 8006ebc:	6820      	ldr	r0, [r4, #0]
 8006ebe:	b938      	cbnz	r0, 8006ed0 <__pow5mult+0x9c>
 8006ec0:	4622      	mov	r2, r4
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f7ff ff0f 	bl	8006ce8 <__multiply>
 8006eca:	6020      	str	r0, [r4, #0]
 8006ecc:	f8c0 9000 	str.w	r9, [r0]
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	e7e4      	b.n	8006e9e <__pow5mult+0x6a>
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eda:	bf00      	nop
 8006edc:	08008458 	.word	0x08008458
 8006ee0:	08008281 	.word	0x08008281
 8006ee4:	08008308 	.word	0x08008308

08006ee8 <__lshift>:
 8006ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eec:	460c      	mov	r4, r1
 8006eee:	6849      	ldr	r1, [r1, #4]
 8006ef0:	6923      	ldr	r3, [r4, #16]
 8006ef2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ef6:	68a3      	ldr	r3, [r4, #8]
 8006ef8:	4607      	mov	r7, r0
 8006efa:	4691      	mov	r9, r2
 8006efc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f00:	f108 0601 	add.w	r6, r8, #1
 8006f04:	42b3      	cmp	r3, r6
 8006f06:	db0b      	blt.n	8006f20 <__lshift+0x38>
 8006f08:	4638      	mov	r0, r7
 8006f0a:	f7ff fddb 	bl	8006ac4 <_Balloc>
 8006f0e:	4605      	mov	r5, r0
 8006f10:	b948      	cbnz	r0, 8006f26 <__lshift+0x3e>
 8006f12:	4602      	mov	r2, r0
 8006f14:	4b28      	ldr	r3, [pc, #160]	; (8006fb8 <__lshift+0xd0>)
 8006f16:	4829      	ldr	r0, [pc, #164]	; (8006fbc <__lshift+0xd4>)
 8006f18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006f1c:	f000 fb76 	bl	800760c <__assert_func>
 8006f20:	3101      	adds	r1, #1
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	e7ee      	b.n	8006f04 <__lshift+0x1c>
 8006f26:	2300      	movs	r3, #0
 8006f28:	f100 0114 	add.w	r1, r0, #20
 8006f2c:	f100 0210 	add.w	r2, r0, #16
 8006f30:	4618      	mov	r0, r3
 8006f32:	4553      	cmp	r3, sl
 8006f34:	db33      	blt.n	8006f9e <__lshift+0xb6>
 8006f36:	6920      	ldr	r0, [r4, #16]
 8006f38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f3c:	f104 0314 	add.w	r3, r4, #20
 8006f40:	f019 091f 	ands.w	r9, r9, #31
 8006f44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f4c:	d02b      	beq.n	8006fa6 <__lshift+0xbe>
 8006f4e:	f1c9 0e20 	rsb	lr, r9, #32
 8006f52:	468a      	mov	sl, r1
 8006f54:	2200      	movs	r2, #0
 8006f56:	6818      	ldr	r0, [r3, #0]
 8006f58:	fa00 f009 	lsl.w	r0, r0, r9
 8006f5c:	4302      	orrs	r2, r0
 8006f5e:	f84a 2b04 	str.w	r2, [sl], #4
 8006f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f66:	459c      	cmp	ip, r3
 8006f68:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f6c:	d8f3      	bhi.n	8006f56 <__lshift+0x6e>
 8006f6e:	ebac 0304 	sub.w	r3, ip, r4
 8006f72:	3b15      	subs	r3, #21
 8006f74:	f023 0303 	bic.w	r3, r3, #3
 8006f78:	3304      	adds	r3, #4
 8006f7a:	f104 0015 	add.w	r0, r4, #21
 8006f7e:	4584      	cmp	ip, r0
 8006f80:	bf38      	it	cc
 8006f82:	2304      	movcc	r3, #4
 8006f84:	50ca      	str	r2, [r1, r3]
 8006f86:	b10a      	cbz	r2, 8006f8c <__lshift+0xa4>
 8006f88:	f108 0602 	add.w	r6, r8, #2
 8006f8c:	3e01      	subs	r6, #1
 8006f8e:	4638      	mov	r0, r7
 8006f90:	612e      	str	r6, [r5, #16]
 8006f92:	4621      	mov	r1, r4
 8006f94:	f7ff fdd6 	bl	8006b44 <_Bfree>
 8006f98:	4628      	mov	r0, r5
 8006f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	e7c5      	b.n	8006f32 <__lshift+0x4a>
 8006fa6:	3904      	subs	r1, #4
 8006fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fac:	f841 2f04 	str.w	r2, [r1, #4]!
 8006fb0:	459c      	cmp	ip, r3
 8006fb2:	d8f9      	bhi.n	8006fa8 <__lshift+0xc0>
 8006fb4:	e7ea      	b.n	8006f8c <__lshift+0xa4>
 8006fb6:	bf00      	nop
 8006fb8:	080082f7 	.word	0x080082f7
 8006fbc:	08008308 	.word	0x08008308

08006fc0 <__mcmp>:
 8006fc0:	b530      	push	{r4, r5, lr}
 8006fc2:	6902      	ldr	r2, [r0, #16]
 8006fc4:	690c      	ldr	r4, [r1, #16]
 8006fc6:	1b12      	subs	r2, r2, r4
 8006fc8:	d10e      	bne.n	8006fe8 <__mcmp+0x28>
 8006fca:	f100 0314 	add.w	r3, r0, #20
 8006fce:	3114      	adds	r1, #20
 8006fd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006fd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006fd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006fdc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006fe0:	42a5      	cmp	r5, r4
 8006fe2:	d003      	beq.n	8006fec <__mcmp+0x2c>
 8006fe4:	d305      	bcc.n	8006ff2 <__mcmp+0x32>
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	4610      	mov	r0, r2
 8006fea:	bd30      	pop	{r4, r5, pc}
 8006fec:	4283      	cmp	r3, r0
 8006fee:	d3f3      	bcc.n	8006fd8 <__mcmp+0x18>
 8006ff0:	e7fa      	b.n	8006fe8 <__mcmp+0x28>
 8006ff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ff6:	e7f7      	b.n	8006fe8 <__mcmp+0x28>

08006ff8 <__mdiff>:
 8006ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	460c      	mov	r4, r1
 8006ffe:	4606      	mov	r6, r0
 8007000:	4611      	mov	r1, r2
 8007002:	4620      	mov	r0, r4
 8007004:	4617      	mov	r7, r2
 8007006:	f7ff ffdb 	bl	8006fc0 <__mcmp>
 800700a:	1e05      	subs	r5, r0, #0
 800700c:	d110      	bne.n	8007030 <__mdiff+0x38>
 800700e:	4629      	mov	r1, r5
 8007010:	4630      	mov	r0, r6
 8007012:	f7ff fd57 	bl	8006ac4 <_Balloc>
 8007016:	b930      	cbnz	r0, 8007026 <__mdiff+0x2e>
 8007018:	4b39      	ldr	r3, [pc, #228]	; (8007100 <__mdiff+0x108>)
 800701a:	4602      	mov	r2, r0
 800701c:	f240 2132 	movw	r1, #562	; 0x232
 8007020:	4838      	ldr	r0, [pc, #224]	; (8007104 <__mdiff+0x10c>)
 8007022:	f000 faf3 	bl	800760c <__assert_func>
 8007026:	2301      	movs	r3, #1
 8007028:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800702c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007030:	bfa4      	itt	ge
 8007032:	463b      	movge	r3, r7
 8007034:	4627      	movge	r7, r4
 8007036:	4630      	mov	r0, r6
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	bfa6      	itte	ge
 800703c:	461c      	movge	r4, r3
 800703e:	2500      	movge	r5, #0
 8007040:	2501      	movlt	r5, #1
 8007042:	f7ff fd3f 	bl	8006ac4 <_Balloc>
 8007046:	b920      	cbnz	r0, 8007052 <__mdiff+0x5a>
 8007048:	4b2d      	ldr	r3, [pc, #180]	; (8007100 <__mdiff+0x108>)
 800704a:	4602      	mov	r2, r0
 800704c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007050:	e7e6      	b.n	8007020 <__mdiff+0x28>
 8007052:	693e      	ldr	r6, [r7, #16]
 8007054:	60c5      	str	r5, [r0, #12]
 8007056:	6925      	ldr	r5, [r4, #16]
 8007058:	f107 0114 	add.w	r1, r7, #20
 800705c:	f104 0914 	add.w	r9, r4, #20
 8007060:	f100 0e14 	add.w	lr, r0, #20
 8007064:	f107 0210 	add.w	r2, r7, #16
 8007068:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800706c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007070:	46f2      	mov	sl, lr
 8007072:	2700      	movs	r7, #0
 8007074:	f859 3b04 	ldr.w	r3, [r9], #4
 8007078:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800707c:	fa1f f883 	uxth.w	r8, r3
 8007080:	fa17 f78b 	uxtah	r7, r7, fp
 8007084:	0c1b      	lsrs	r3, r3, #16
 8007086:	eba7 0808 	sub.w	r8, r7, r8
 800708a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800708e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007092:	fa1f f888 	uxth.w	r8, r8
 8007096:	141f      	asrs	r7, r3, #16
 8007098:	454d      	cmp	r5, r9
 800709a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800709e:	f84a 3b04 	str.w	r3, [sl], #4
 80070a2:	d8e7      	bhi.n	8007074 <__mdiff+0x7c>
 80070a4:	1b2b      	subs	r3, r5, r4
 80070a6:	3b15      	subs	r3, #21
 80070a8:	f023 0303 	bic.w	r3, r3, #3
 80070ac:	3304      	adds	r3, #4
 80070ae:	3415      	adds	r4, #21
 80070b0:	42a5      	cmp	r5, r4
 80070b2:	bf38      	it	cc
 80070b4:	2304      	movcc	r3, #4
 80070b6:	4419      	add	r1, r3
 80070b8:	4473      	add	r3, lr
 80070ba:	469e      	mov	lr, r3
 80070bc:	460d      	mov	r5, r1
 80070be:	4565      	cmp	r5, ip
 80070c0:	d30e      	bcc.n	80070e0 <__mdiff+0xe8>
 80070c2:	f10c 0203 	add.w	r2, ip, #3
 80070c6:	1a52      	subs	r2, r2, r1
 80070c8:	f022 0203 	bic.w	r2, r2, #3
 80070cc:	3903      	subs	r1, #3
 80070ce:	458c      	cmp	ip, r1
 80070d0:	bf38      	it	cc
 80070d2:	2200      	movcc	r2, #0
 80070d4:	441a      	add	r2, r3
 80070d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80070da:	b17b      	cbz	r3, 80070fc <__mdiff+0x104>
 80070dc:	6106      	str	r6, [r0, #16]
 80070de:	e7a5      	b.n	800702c <__mdiff+0x34>
 80070e0:	f855 8b04 	ldr.w	r8, [r5], #4
 80070e4:	fa17 f488 	uxtah	r4, r7, r8
 80070e8:	1422      	asrs	r2, r4, #16
 80070ea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80070ee:	b2a4      	uxth	r4, r4
 80070f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80070f4:	f84e 4b04 	str.w	r4, [lr], #4
 80070f8:	1417      	asrs	r7, r2, #16
 80070fa:	e7e0      	b.n	80070be <__mdiff+0xc6>
 80070fc:	3e01      	subs	r6, #1
 80070fe:	e7ea      	b.n	80070d6 <__mdiff+0xde>
 8007100:	080082f7 	.word	0x080082f7
 8007104:	08008308 	.word	0x08008308

08007108 <__d2b>:
 8007108:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800710c:	4689      	mov	r9, r1
 800710e:	2101      	movs	r1, #1
 8007110:	ec57 6b10 	vmov	r6, r7, d0
 8007114:	4690      	mov	r8, r2
 8007116:	f7ff fcd5 	bl	8006ac4 <_Balloc>
 800711a:	4604      	mov	r4, r0
 800711c:	b930      	cbnz	r0, 800712c <__d2b+0x24>
 800711e:	4602      	mov	r2, r0
 8007120:	4b25      	ldr	r3, [pc, #148]	; (80071b8 <__d2b+0xb0>)
 8007122:	4826      	ldr	r0, [pc, #152]	; (80071bc <__d2b+0xb4>)
 8007124:	f240 310a 	movw	r1, #778	; 0x30a
 8007128:	f000 fa70 	bl	800760c <__assert_func>
 800712c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007130:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007134:	bb35      	cbnz	r5, 8007184 <__d2b+0x7c>
 8007136:	2e00      	cmp	r6, #0
 8007138:	9301      	str	r3, [sp, #4]
 800713a:	d028      	beq.n	800718e <__d2b+0x86>
 800713c:	4668      	mov	r0, sp
 800713e:	9600      	str	r6, [sp, #0]
 8007140:	f7ff fd8c 	bl	8006c5c <__lo0bits>
 8007144:	9900      	ldr	r1, [sp, #0]
 8007146:	b300      	cbz	r0, 800718a <__d2b+0x82>
 8007148:	9a01      	ldr	r2, [sp, #4]
 800714a:	f1c0 0320 	rsb	r3, r0, #32
 800714e:	fa02 f303 	lsl.w	r3, r2, r3
 8007152:	430b      	orrs	r3, r1
 8007154:	40c2      	lsrs	r2, r0
 8007156:	6163      	str	r3, [r4, #20]
 8007158:	9201      	str	r2, [sp, #4]
 800715a:	9b01      	ldr	r3, [sp, #4]
 800715c:	61a3      	str	r3, [r4, #24]
 800715e:	2b00      	cmp	r3, #0
 8007160:	bf14      	ite	ne
 8007162:	2202      	movne	r2, #2
 8007164:	2201      	moveq	r2, #1
 8007166:	6122      	str	r2, [r4, #16]
 8007168:	b1d5      	cbz	r5, 80071a0 <__d2b+0x98>
 800716a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800716e:	4405      	add	r5, r0
 8007170:	f8c9 5000 	str.w	r5, [r9]
 8007174:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007178:	f8c8 0000 	str.w	r0, [r8]
 800717c:	4620      	mov	r0, r4
 800717e:	b003      	add	sp, #12
 8007180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007184:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007188:	e7d5      	b.n	8007136 <__d2b+0x2e>
 800718a:	6161      	str	r1, [r4, #20]
 800718c:	e7e5      	b.n	800715a <__d2b+0x52>
 800718e:	a801      	add	r0, sp, #4
 8007190:	f7ff fd64 	bl	8006c5c <__lo0bits>
 8007194:	9b01      	ldr	r3, [sp, #4]
 8007196:	6163      	str	r3, [r4, #20]
 8007198:	2201      	movs	r2, #1
 800719a:	6122      	str	r2, [r4, #16]
 800719c:	3020      	adds	r0, #32
 800719e:	e7e3      	b.n	8007168 <__d2b+0x60>
 80071a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80071a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80071a8:	f8c9 0000 	str.w	r0, [r9]
 80071ac:	6918      	ldr	r0, [r3, #16]
 80071ae:	f7ff fd35 	bl	8006c1c <__hi0bits>
 80071b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071b6:	e7df      	b.n	8007178 <__d2b+0x70>
 80071b8:	080082f7 	.word	0x080082f7
 80071bc:	08008308 	.word	0x08008308

080071c0 <_calloc_r>:
 80071c0:	b513      	push	{r0, r1, r4, lr}
 80071c2:	434a      	muls	r2, r1
 80071c4:	4611      	mov	r1, r2
 80071c6:	9201      	str	r2, [sp, #4]
 80071c8:	f000 f85a 	bl	8007280 <_malloc_r>
 80071cc:	4604      	mov	r4, r0
 80071ce:	b118      	cbz	r0, 80071d8 <_calloc_r+0x18>
 80071d0:	9a01      	ldr	r2, [sp, #4]
 80071d2:	2100      	movs	r1, #0
 80071d4:	f7fe f950 	bl	8005478 <memset>
 80071d8:	4620      	mov	r0, r4
 80071da:	b002      	add	sp, #8
 80071dc:	bd10      	pop	{r4, pc}
	...

080071e0 <_free_r>:
 80071e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071e2:	2900      	cmp	r1, #0
 80071e4:	d048      	beq.n	8007278 <_free_r+0x98>
 80071e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ea:	9001      	str	r0, [sp, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f1a1 0404 	sub.w	r4, r1, #4
 80071f2:	bfb8      	it	lt
 80071f4:	18e4      	addlt	r4, r4, r3
 80071f6:	f000 fa65 	bl	80076c4 <__malloc_lock>
 80071fa:	4a20      	ldr	r2, [pc, #128]	; (800727c <_free_r+0x9c>)
 80071fc:	9801      	ldr	r0, [sp, #4]
 80071fe:	6813      	ldr	r3, [r2, #0]
 8007200:	4615      	mov	r5, r2
 8007202:	b933      	cbnz	r3, 8007212 <_free_r+0x32>
 8007204:	6063      	str	r3, [r4, #4]
 8007206:	6014      	str	r4, [r2, #0]
 8007208:	b003      	add	sp, #12
 800720a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800720e:	f000 ba5f 	b.w	80076d0 <__malloc_unlock>
 8007212:	42a3      	cmp	r3, r4
 8007214:	d90b      	bls.n	800722e <_free_r+0x4e>
 8007216:	6821      	ldr	r1, [r4, #0]
 8007218:	1862      	adds	r2, r4, r1
 800721a:	4293      	cmp	r3, r2
 800721c:	bf04      	itt	eq
 800721e:	681a      	ldreq	r2, [r3, #0]
 8007220:	685b      	ldreq	r3, [r3, #4]
 8007222:	6063      	str	r3, [r4, #4]
 8007224:	bf04      	itt	eq
 8007226:	1852      	addeq	r2, r2, r1
 8007228:	6022      	streq	r2, [r4, #0]
 800722a:	602c      	str	r4, [r5, #0]
 800722c:	e7ec      	b.n	8007208 <_free_r+0x28>
 800722e:	461a      	mov	r2, r3
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	b10b      	cbz	r3, 8007238 <_free_r+0x58>
 8007234:	42a3      	cmp	r3, r4
 8007236:	d9fa      	bls.n	800722e <_free_r+0x4e>
 8007238:	6811      	ldr	r1, [r2, #0]
 800723a:	1855      	adds	r5, r2, r1
 800723c:	42a5      	cmp	r5, r4
 800723e:	d10b      	bne.n	8007258 <_free_r+0x78>
 8007240:	6824      	ldr	r4, [r4, #0]
 8007242:	4421      	add	r1, r4
 8007244:	1854      	adds	r4, r2, r1
 8007246:	42a3      	cmp	r3, r4
 8007248:	6011      	str	r1, [r2, #0]
 800724a:	d1dd      	bne.n	8007208 <_free_r+0x28>
 800724c:	681c      	ldr	r4, [r3, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	6053      	str	r3, [r2, #4]
 8007252:	4421      	add	r1, r4
 8007254:	6011      	str	r1, [r2, #0]
 8007256:	e7d7      	b.n	8007208 <_free_r+0x28>
 8007258:	d902      	bls.n	8007260 <_free_r+0x80>
 800725a:	230c      	movs	r3, #12
 800725c:	6003      	str	r3, [r0, #0]
 800725e:	e7d3      	b.n	8007208 <_free_r+0x28>
 8007260:	6825      	ldr	r5, [r4, #0]
 8007262:	1961      	adds	r1, r4, r5
 8007264:	428b      	cmp	r3, r1
 8007266:	bf04      	itt	eq
 8007268:	6819      	ldreq	r1, [r3, #0]
 800726a:	685b      	ldreq	r3, [r3, #4]
 800726c:	6063      	str	r3, [r4, #4]
 800726e:	bf04      	itt	eq
 8007270:	1949      	addeq	r1, r1, r5
 8007272:	6021      	streq	r1, [r4, #0]
 8007274:	6054      	str	r4, [r2, #4]
 8007276:	e7c7      	b.n	8007208 <_free_r+0x28>
 8007278:	b003      	add	sp, #12
 800727a:	bd30      	pop	{r4, r5, pc}
 800727c:	20000208 	.word	0x20000208

08007280 <_malloc_r>:
 8007280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007282:	1ccd      	adds	r5, r1, #3
 8007284:	f025 0503 	bic.w	r5, r5, #3
 8007288:	3508      	adds	r5, #8
 800728a:	2d0c      	cmp	r5, #12
 800728c:	bf38      	it	cc
 800728e:	250c      	movcc	r5, #12
 8007290:	2d00      	cmp	r5, #0
 8007292:	4606      	mov	r6, r0
 8007294:	db01      	blt.n	800729a <_malloc_r+0x1a>
 8007296:	42a9      	cmp	r1, r5
 8007298:	d903      	bls.n	80072a2 <_malloc_r+0x22>
 800729a:	230c      	movs	r3, #12
 800729c:	6033      	str	r3, [r6, #0]
 800729e:	2000      	movs	r0, #0
 80072a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072a2:	f000 fa0f 	bl	80076c4 <__malloc_lock>
 80072a6:	4921      	ldr	r1, [pc, #132]	; (800732c <_malloc_r+0xac>)
 80072a8:	680a      	ldr	r2, [r1, #0]
 80072aa:	4614      	mov	r4, r2
 80072ac:	b99c      	cbnz	r4, 80072d6 <_malloc_r+0x56>
 80072ae:	4f20      	ldr	r7, [pc, #128]	; (8007330 <_malloc_r+0xb0>)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	b923      	cbnz	r3, 80072be <_malloc_r+0x3e>
 80072b4:	4621      	mov	r1, r4
 80072b6:	4630      	mov	r0, r6
 80072b8:	f000 f998 	bl	80075ec <_sbrk_r>
 80072bc:	6038      	str	r0, [r7, #0]
 80072be:	4629      	mov	r1, r5
 80072c0:	4630      	mov	r0, r6
 80072c2:	f000 f993 	bl	80075ec <_sbrk_r>
 80072c6:	1c43      	adds	r3, r0, #1
 80072c8:	d123      	bne.n	8007312 <_malloc_r+0x92>
 80072ca:	230c      	movs	r3, #12
 80072cc:	6033      	str	r3, [r6, #0]
 80072ce:	4630      	mov	r0, r6
 80072d0:	f000 f9fe 	bl	80076d0 <__malloc_unlock>
 80072d4:	e7e3      	b.n	800729e <_malloc_r+0x1e>
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	1b5b      	subs	r3, r3, r5
 80072da:	d417      	bmi.n	800730c <_malloc_r+0x8c>
 80072dc:	2b0b      	cmp	r3, #11
 80072de:	d903      	bls.n	80072e8 <_malloc_r+0x68>
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	441c      	add	r4, r3
 80072e4:	6025      	str	r5, [r4, #0]
 80072e6:	e004      	b.n	80072f2 <_malloc_r+0x72>
 80072e8:	6863      	ldr	r3, [r4, #4]
 80072ea:	42a2      	cmp	r2, r4
 80072ec:	bf0c      	ite	eq
 80072ee:	600b      	streq	r3, [r1, #0]
 80072f0:	6053      	strne	r3, [r2, #4]
 80072f2:	4630      	mov	r0, r6
 80072f4:	f000 f9ec 	bl	80076d0 <__malloc_unlock>
 80072f8:	f104 000b 	add.w	r0, r4, #11
 80072fc:	1d23      	adds	r3, r4, #4
 80072fe:	f020 0007 	bic.w	r0, r0, #7
 8007302:	1ac2      	subs	r2, r0, r3
 8007304:	d0cc      	beq.n	80072a0 <_malloc_r+0x20>
 8007306:	1a1b      	subs	r3, r3, r0
 8007308:	50a3      	str	r3, [r4, r2]
 800730a:	e7c9      	b.n	80072a0 <_malloc_r+0x20>
 800730c:	4622      	mov	r2, r4
 800730e:	6864      	ldr	r4, [r4, #4]
 8007310:	e7cc      	b.n	80072ac <_malloc_r+0x2c>
 8007312:	1cc4      	adds	r4, r0, #3
 8007314:	f024 0403 	bic.w	r4, r4, #3
 8007318:	42a0      	cmp	r0, r4
 800731a:	d0e3      	beq.n	80072e4 <_malloc_r+0x64>
 800731c:	1a21      	subs	r1, r4, r0
 800731e:	4630      	mov	r0, r6
 8007320:	f000 f964 	bl	80075ec <_sbrk_r>
 8007324:	3001      	adds	r0, #1
 8007326:	d1dd      	bne.n	80072e4 <_malloc_r+0x64>
 8007328:	e7cf      	b.n	80072ca <_malloc_r+0x4a>
 800732a:	bf00      	nop
 800732c:	20000208 	.word	0x20000208
 8007330:	2000020c 	.word	0x2000020c

08007334 <__ssputs_r>:
 8007334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007338:	688e      	ldr	r6, [r1, #8]
 800733a:	429e      	cmp	r6, r3
 800733c:	4682      	mov	sl, r0
 800733e:	460c      	mov	r4, r1
 8007340:	4690      	mov	r8, r2
 8007342:	461f      	mov	r7, r3
 8007344:	d838      	bhi.n	80073b8 <__ssputs_r+0x84>
 8007346:	898a      	ldrh	r2, [r1, #12]
 8007348:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800734c:	d032      	beq.n	80073b4 <__ssputs_r+0x80>
 800734e:	6825      	ldr	r5, [r4, #0]
 8007350:	6909      	ldr	r1, [r1, #16]
 8007352:	eba5 0901 	sub.w	r9, r5, r1
 8007356:	6965      	ldr	r5, [r4, #20]
 8007358:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800735c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007360:	3301      	adds	r3, #1
 8007362:	444b      	add	r3, r9
 8007364:	106d      	asrs	r5, r5, #1
 8007366:	429d      	cmp	r5, r3
 8007368:	bf38      	it	cc
 800736a:	461d      	movcc	r5, r3
 800736c:	0553      	lsls	r3, r2, #21
 800736e:	d531      	bpl.n	80073d4 <__ssputs_r+0xa0>
 8007370:	4629      	mov	r1, r5
 8007372:	f7ff ff85 	bl	8007280 <_malloc_r>
 8007376:	4606      	mov	r6, r0
 8007378:	b950      	cbnz	r0, 8007390 <__ssputs_r+0x5c>
 800737a:	230c      	movs	r3, #12
 800737c:	f8ca 3000 	str.w	r3, [sl]
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007386:	81a3      	strh	r3, [r4, #12]
 8007388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800738c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007390:	6921      	ldr	r1, [r4, #16]
 8007392:	464a      	mov	r2, r9
 8007394:	f7ff fb88 	bl	8006aa8 <memcpy>
 8007398:	89a3      	ldrh	r3, [r4, #12]
 800739a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800739e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a2:	81a3      	strh	r3, [r4, #12]
 80073a4:	6126      	str	r6, [r4, #16]
 80073a6:	6165      	str	r5, [r4, #20]
 80073a8:	444e      	add	r6, r9
 80073aa:	eba5 0509 	sub.w	r5, r5, r9
 80073ae:	6026      	str	r6, [r4, #0]
 80073b0:	60a5      	str	r5, [r4, #8]
 80073b2:	463e      	mov	r6, r7
 80073b4:	42be      	cmp	r6, r7
 80073b6:	d900      	bls.n	80073ba <__ssputs_r+0x86>
 80073b8:	463e      	mov	r6, r7
 80073ba:	4632      	mov	r2, r6
 80073bc:	6820      	ldr	r0, [r4, #0]
 80073be:	4641      	mov	r1, r8
 80073c0:	f000 f966 	bl	8007690 <memmove>
 80073c4:	68a3      	ldr	r3, [r4, #8]
 80073c6:	6822      	ldr	r2, [r4, #0]
 80073c8:	1b9b      	subs	r3, r3, r6
 80073ca:	4432      	add	r2, r6
 80073cc:	60a3      	str	r3, [r4, #8]
 80073ce:	6022      	str	r2, [r4, #0]
 80073d0:	2000      	movs	r0, #0
 80073d2:	e7db      	b.n	800738c <__ssputs_r+0x58>
 80073d4:	462a      	mov	r2, r5
 80073d6:	f000 f981 	bl	80076dc <_realloc_r>
 80073da:	4606      	mov	r6, r0
 80073dc:	2800      	cmp	r0, #0
 80073de:	d1e1      	bne.n	80073a4 <__ssputs_r+0x70>
 80073e0:	6921      	ldr	r1, [r4, #16]
 80073e2:	4650      	mov	r0, sl
 80073e4:	f7ff fefc 	bl	80071e0 <_free_r>
 80073e8:	e7c7      	b.n	800737a <__ssputs_r+0x46>
	...

080073ec <_svfiprintf_r>:
 80073ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f0:	4698      	mov	r8, r3
 80073f2:	898b      	ldrh	r3, [r1, #12]
 80073f4:	061b      	lsls	r3, r3, #24
 80073f6:	b09d      	sub	sp, #116	; 0x74
 80073f8:	4607      	mov	r7, r0
 80073fa:	460d      	mov	r5, r1
 80073fc:	4614      	mov	r4, r2
 80073fe:	d50e      	bpl.n	800741e <_svfiprintf_r+0x32>
 8007400:	690b      	ldr	r3, [r1, #16]
 8007402:	b963      	cbnz	r3, 800741e <_svfiprintf_r+0x32>
 8007404:	2140      	movs	r1, #64	; 0x40
 8007406:	f7ff ff3b 	bl	8007280 <_malloc_r>
 800740a:	6028      	str	r0, [r5, #0]
 800740c:	6128      	str	r0, [r5, #16]
 800740e:	b920      	cbnz	r0, 800741a <_svfiprintf_r+0x2e>
 8007410:	230c      	movs	r3, #12
 8007412:	603b      	str	r3, [r7, #0]
 8007414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007418:	e0d1      	b.n	80075be <_svfiprintf_r+0x1d2>
 800741a:	2340      	movs	r3, #64	; 0x40
 800741c:	616b      	str	r3, [r5, #20]
 800741e:	2300      	movs	r3, #0
 8007420:	9309      	str	r3, [sp, #36]	; 0x24
 8007422:	2320      	movs	r3, #32
 8007424:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007428:	f8cd 800c 	str.w	r8, [sp, #12]
 800742c:	2330      	movs	r3, #48	; 0x30
 800742e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80075d8 <_svfiprintf_r+0x1ec>
 8007432:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007436:	f04f 0901 	mov.w	r9, #1
 800743a:	4623      	mov	r3, r4
 800743c:	469a      	mov	sl, r3
 800743e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007442:	b10a      	cbz	r2, 8007448 <_svfiprintf_r+0x5c>
 8007444:	2a25      	cmp	r2, #37	; 0x25
 8007446:	d1f9      	bne.n	800743c <_svfiprintf_r+0x50>
 8007448:	ebba 0b04 	subs.w	fp, sl, r4
 800744c:	d00b      	beq.n	8007466 <_svfiprintf_r+0x7a>
 800744e:	465b      	mov	r3, fp
 8007450:	4622      	mov	r2, r4
 8007452:	4629      	mov	r1, r5
 8007454:	4638      	mov	r0, r7
 8007456:	f7ff ff6d 	bl	8007334 <__ssputs_r>
 800745a:	3001      	adds	r0, #1
 800745c:	f000 80aa 	beq.w	80075b4 <_svfiprintf_r+0x1c8>
 8007460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007462:	445a      	add	r2, fp
 8007464:	9209      	str	r2, [sp, #36]	; 0x24
 8007466:	f89a 3000 	ldrb.w	r3, [sl]
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 80a2 	beq.w	80075b4 <_svfiprintf_r+0x1c8>
 8007470:	2300      	movs	r3, #0
 8007472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007476:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800747a:	f10a 0a01 	add.w	sl, sl, #1
 800747e:	9304      	str	r3, [sp, #16]
 8007480:	9307      	str	r3, [sp, #28]
 8007482:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007486:	931a      	str	r3, [sp, #104]	; 0x68
 8007488:	4654      	mov	r4, sl
 800748a:	2205      	movs	r2, #5
 800748c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007490:	4851      	ldr	r0, [pc, #324]	; (80075d8 <_svfiprintf_r+0x1ec>)
 8007492:	f7f8 fead 	bl	80001f0 <memchr>
 8007496:	9a04      	ldr	r2, [sp, #16]
 8007498:	b9d8      	cbnz	r0, 80074d2 <_svfiprintf_r+0xe6>
 800749a:	06d0      	lsls	r0, r2, #27
 800749c:	bf44      	itt	mi
 800749e:	2320      	movmi	r3, #32
 80074a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074a4:	0711      	lsls	r1, r2, #28
 80074a6:	bf44      	itt	mi
 80074a8:	232b      	movmi	r3, #43	; 0x2b
 80074aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074ae:	f89a 3000 	ldrb.w	r3, [sl]
 80074b2:	2b2a      	cmp	r3, #42	; 0x2a
 80074b4:	d015      	beq.n	80074e2 <_svfiprintf_r+0xf6>
 80074b6:	9a07      	ldr	r2, [sp, #28]
 80074b8:	4654      	mov	r4, sl
 80074ba:	2000      	movs	r0, #0
 80074bc:	f04f 0c0a 	mov.w	ip, #10
 80074c0:	4621      	mov	r1, r4
 80074c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074c6:	3b30      	subs	r3, #48	; 0x30
 80074c8:	2b09      	cmp	r3, #9
 80074ca:	d94e      	bls.n	800756a <_svfiprintf_r+0x17e>
 80074cc:	b1b0      	cbz	r0, 80074fc <_svfiprintf_r+0x110>
 80074ce:	9207      	str	r2, [sp, #28]
 80074d0:	e014      	b.n	80074fc <_svfiprintf_r+0x110>
 80074d2:	eba0 0308 	sub.w	r3, r0, r8
 80074d6:	fa09 f303 	lsl.w	r3, r9, r3
 80074da:	4313      	orrs	r3, r2
 80074dc:	9304      	str	r3, [sp, #16]
 80074de:	46a2      	mov	sl, r4
 80074e0:	e7d2      	b.n	8007488 <_svfiprintf_r+0x9c>
 80074e2:	9b03      	ldr	r3, [sp, #12]
 80074e4:	1d19      	adds	r1, r3, #4
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	9103      	str	r1, [sp, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	bfbb      	ittet	lt
 80074ee:	425b      	neglt	r3, r3
 80074f0:	f042 0202 	orrlt.w	r2, r2, #2
 80074f4:	9307      	strge	r3, [sp, #28]
 80074f6:	9307      	strlt	r3, [sp, #28]
 80074f8:	bfb8      	it	lt
 80074fa:	9204      	strlt	r2, [sp, #16]
 80074fc:	7823      	ldrb	r3, [r4, #0]
 80074fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007500:	d10c      	bne.n	800751c <_svfiprintf_r+0x130>
 8007502:	7863      	ldrb	r3, [r4, #1]
 8007504:	2b2a      	cmp	r3, #42	; 0x2a
 8007506:	d135      	bne.n	8007574 <_svfiprintf_r+0x188>
 8007508:	9b03      	ldr	r3, [sp, #12]
 800750a:	1d1a      	adds	r2, r3, #4
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	9203      	str	r2, [sp, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	bfb8      	it	lt
 8007514:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007518:	3402      	adds	r4, #2
 800751a:	9305      	str	r3, [sp, #20]
 800751c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80075e8 <_svfiprintf_r+0x1fc>
 8007520:	7821      	ldrb	r1, [r4, #0]
 8007522:	2203      	movs	r2, #3
 8007524:	4650      	mov	r0, sl
 8007526:	f7f8 fe63 	bl	80001f0 <memchr>
 800752a:	b140      	cbz	r0, 800753e <_svfiprintf_r+0x152>
 800752c:	2340      	movs	r3, #64	; 0x40
 800752e:	eba0 000a 	sub.w	r0, r0, sl
 8007532:	fa03 f000 	lsl.w	r0, r3, r0
 8007536:	9b04      	ldr	r3, [sp, #16]
 8007538:	4303      	orrs	r3, r0
 800753a:	3401      	adds	r4, #1
 800753c:	9304      	str	r3, [sp, #16]
 800753e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007542:	4826      	ldr	r0, [pc, #152]	; (80075dc <_svfiprintf_r+0x1f0>)
 8007544:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007548:	2206      	movs	r2, #6
 800754a:	f7f8 fe51 	bl	80001f0 <memchr>
 800754e:	2800      	cmp	r0, #0
 8007550:	d038      	beq.n	80075c4 <_svfiprintf_r+0x1d8>
 8007552:	4b23      	ldr	r3, [pc, #140]	; (80075e0 <_svfiprintf_r+0x1f4>)
 8007554:	bb1b      	cbnz	r3, 800759e <_svfiprintf_r+0x1b2>
 8007556:	9b03      	ldr	r3, [sp, #12]
 8007558:	3307      	adds	r3, #7
 800755a:	f023 0307 	bic.w	r3, r3, #7
 800755e:	3308      	adds	r3, #8
 8007560:	9303      	str	r3, [sp, #12]
 8007562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007564:	4433      	add	r3, r6
 8007566:	9309      	str	r3, [sp, #36]	; 0x24
 8007568:	e767      	b.n	800743a <_svfiprintf_r+0x4e>
 800756a:	fb0c 3202 	mla	r2, ip, r2, r3
 800756e:	460c      	mov	r4, r1
 8007570:	2001      	movs	r0, #1
 8007572:	e7a5      	b.n	80074c0 <_svfiprintf_r+0xd4>
 8007574:	2300      	movs	r3, #0
 8007576:	3401      	adds	r4, #1
 8007578:	9305      	str	r3, [sp, #20]
 800757a:	4619      	mov	r1, r3
 800757c:	f04f 0c0a 	mov.w	ip, #10
 8007580:	4620      	mov	r0, r4
 8007582:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007586:	3a30      	subs	r2, #48	; 0x30
 8007588:	2a09      	cmp	r2, #9
 800758a:	d903      	bls.n	8007594 <_svfiprintf_r+0x1a8>
 800758c:	2b00      	cmp	r3, #0
 800758e:	d0c5      	beq.n	800751c <_svfiprintf_r+0x130>
 8007590:	9105      	str	r1, [sp, #20]
 8007592:	e7c3      	b.n	800751c <_svfiprintf_r+0x130>
 8007594:	fb0c 2101 	mla	r1, ip, r1, r2
 8007598:	4604      	mov	r4, r0
 800759a:	2301      	movs	r3, #1
 800759c:	e7f0      	b.n	8007580 <_svfiprintf_r+0x194>
 800759e:	ab03      	add	r3, sp, #12
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	462a      	mov	r2, r5
 80075a4:	4b0f      	ldr	r3, [pc, #60]	; (80075e4 <_svfiprintf_r+0x1f8>)
 80075a6:	a904      	add	r1, sp, #16
 80075a8:	4638      	mov	r0, r7
 80075aa:	f7fe f80d 	bl	80055c8 <_printf_float>
 80075ae:	1c42      	adds	r2, r0, #1
 80075b0:	4606      	mov	r6, r0
 80075b2:	d1d6      	bne.n	8007562 <_svfiprintf_r+0x176>
 80075b4:	89ab      	ldrh	r3, [r5, #12]
 80075b6:	065b      	lsls	r3, r3, #25
 80075b8:	f53f af2c 	bmi.w	8007414 <_svfiprintf_r+0x28>
 80075bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075be:	b01d      	add	sp, #116	; 0x74
 80075c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c4:	ab03      	add	r3, sp, #12
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	462a      	mov	r2, r5
 80075ca:	4b06      	ldr	r3, [pc, #24]	; (80075e4 <_svfiprintf_r+0x1f8>)
 80075cc:	a904      	add	r1, sp, #16
 80075ce:	4638      	mov	r0, r7
 80075d0:	f7fe fa9e 	bl	8005b10 <_printf_i>
 80075d4:	e7eb      	b.n	80075ae <_svfiprintf_r+0x1c2>
 80075d6:	bf00      	nop
 80075d8:	08008464 	.word	0x08008464
 80075dc:	0800846e 	.word	0x0800846e
 80075e0:	080055c9 	.word	0x080055c9
 80075e4:	08007335 	.word	0x08007335
 80075e8:	0800846a 	.word	0x0800846a

080075ec <_sbrk_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4d06      	ldr	r5, [pc, #24]	; (8007608 <_sbrk_r+0x1c>)
 80075f0:	2300      	movs	r3, #0
 80075f2:	4604      	mov	r4, r0
 80075f4:	4608      	mov	r0, r1
 80075f6:	602b      	str	r3, [r5, #0]
 80075f8:	f7fa fd38 	bl	800206c <_sbrk>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d102      	bne.n	8007606 <_sbrk_r+0x1a>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	b103      	cbz	r3, 8007606 <_sbrk_r+0x1a>
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	bd38      	pop	{r3, r4, r5, pc}
 8007608:	2000071c 	.word	0x2000071c

0800760c <__assert_func>:
 800760c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800760e:	4614      	mov	r4, r2
 8007610:	461a      	mov	r2, r3
 8007612:	4b09      	ldr	r3, [pc, #36]	; (8007638 <__assert_func+0x2c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4605      	mov	r5, r0
 8007618:	68d8      	ldr	r0, [r3, #12]
 800761a:	b14c      	cbz	r4, 8007630 <__assert_func+0x24>
 800761c:	4b07      	ldr	r3, [pc, #28]	; (800763c <__assert_func+0x30>)
 800761e:	9100      	str	r1, [sp, #0]
 8007620:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007624:	4906      	ldr	r1, [pc, #24]	; (8007640 <__assert_func+0x34>)
 8007626:	462b      	mov	r3, r5
 8007628:	f000 f80e 	bl	8007648 <fiprintf>
 800762c:	f000 faa4 	bl	8007b78 <abort>
 8007630:	4b04      	ldr	r3, [pc, #16]	; (8007644 <__assert_func+0x38>)
 8007632:	461c      	mov	r4, r3
 8007634:	e7f3      	b.n	800761e <__assert_func+0x12>
 8007636:	bf00      	nop
 8007638:	20000014 	.word	0x20000014
 800763c:	08008475 	.word	0x08008475
 8007640:	08008482 	.word	0x08008482
 8007644:	080084b0 	.word	0x080084b0

08007648 <fiprintf>:
 8007648:	b40e      	push	{r1, r2, r3}
 800764a:	b503      	push	{r0, r1, lr}
 800764c:	4601      	mov	r1, r0
 800764e:	ab03      	add	r3, sp, #12
 8007650:	4805      	ldr	r0, [pc, #20]	; (8007668 <fiprintf+0x20>)
 8007652:	f853 2b04 	ldr.w	r2, [r3], #4
 8007656:	6800      	ldr	r0, [r0, #0]
 8007658:	9301      	str	r3, [sp, #4]
 800765a:	f000 f88f 	bl	800777c <_vfiprintf_r>
 800765e:	b002      	add	sp, #8
 8007660:	f85d eb04 	ldr.w	lr, [sp], #4
 8007664:	b003      	add	sp, #12
 8007666:	4770      	bx	lr
 8007668:	20000014 	.word	0x20000014

0800766c <__ascii_mbtowc>:
 800766c:	b082      	sub	sp, #8
 800766e:	b901      	cbnz	r1, 8007672 <__ascii_mbtowc+0x6>
 8007670:	a901      	add	r1, sp, #4
 8007672:	b142      	cbz	r2, 8007686 <__ascii_mbtowc+0x1a>
 8007674:	b14b      	cbz	r3, 800768a <__ascii_mbtowc+0x1e>
 8007676:	7813      	ldrb	r3, [r2, #0]
 8007678:	600b      	str	r3, [r1, #0]
 800767a:	7812      	ldrb	r2, [r2, #0]
 800767c:	1e10      	subs	r0, r2, #0
 800767e:	bf18      	it	ne
 8007680:	2001      	movne	r0, #1
 8007682:	b002      	add	sp, #8
 8007684:	4770      	bx	lr
 8007686:	4610      	mov	r0, r2
 8007688:	e7fb      	b.n	8007682 <__ascii_mbtowc+0x16>
 800768a:	f06f 0001 	mvn.w	r0, #1
 800768e:	e7f8      	b.n	8007682 <__ascii_mbtowc+0x16>

08007690 <memmove>:
 8007690:	4288      	cmp	r0, r1
 8007692:	b510      	push	{r4, lr}
 8007694:	eb01 0402 	add.w	r4, r1, r2
 8007698:	d902      	bls.n	80076a0 <memmove+0x10>
 800769a:	4284      	cmp	r4, r0
 800769c:	4623      	mov	r3, r4
 800769e:	d807      	bhi.n	80076b0 <memmove+0x20>
 80076a0:	1e43      	subs	r3, r0, #1
 80076a2:	42a1      	cmp	r1, r4
 80076a4:	d008      	beq.n	80076b8 <memmove+0x28>
 80076a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076ae:	e7f8      	b.n	80076a2 <memmove+0x12>
 80076b0:	4402      	add	r2, r0
 80076b2:	4601      	mov	r1, r0
 80076b4:	428a      	cmp	r2, r1
 80076b6:	d100      	bne.n	80076ba <memmove+0x2a>
 80076b8:	bd10      	pop	{r4, pc}
 80076ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076c2:	e7f7      	b.n	80076b4 <memmove+0x24>

080076c4 <__malloc_lock>:
 80076c4:	4801      	ldr	r0, [pc, #4]	; (80076cc <__malloc_lock+0x8>)
 80076c6:	f000 bc17 	b.w	8007ef8 <__retarget_lock_acquire_recursive>
 80076ca:	bf00      	nop
 80076cc:	20000724 	.word	0x20000724

080076d0 <__malloc_unlock>:
 80076d0:	4801      	ldr	r0, [pc, #4]	; (80076d8 <__malloc_unlock+0x8>)
 80076d2:	f000 bc12 	b.w	8007efa <__retarget_lock_release_recursive>
 80076d6:	bf00      	nop
 80076d8:	20000724 	.word	0x20000724

080076dc <_realloc_r>:
 80076dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076de:	4607      	mov	r7, r0
 80076e0:	4614      	mov	r4, r2
 80076e2:	460e      	mov	r6, r1
 80076e4:	b921      	cbnz	r1, 80076f0 <_realloc_r+0x14>
 80076e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076ea:	4611      	mov	r1, r2
 80076ec:	f7ff bdc8 	b.w	8007280 <_malloc_r>
 80076f0:	b922      	cbnz	r2, 80076fc <_realloc_r+0x20>
 80076f2:	f7ff fd75 	bl	80071e0 <_free_r>
 80076f6:	4625      	mov	r5, r4
 80076f8:	4628      	mov	r0, r5
 80076fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076fc:	f000 fc62 	bl	8007fc4 <_malloc_usable_size_r>
 8007700:	42a0      	cmp	r0, r4
 8007702:	d20f      	bcs.n	8007724 <_realloc_r+0x48>
 8007704:	4621      	mov	r1, r4
 8007706:	4638      	mov	r0, r7
 8007708:	f7ff fdba 	bl	8007280 <_malloc_r>
 800770c:	4605      	mov	r5, r0
 800770e:	2800      	cmp	r0, #0
 8007710:	d0f2      	beq.n	80076f8 <_realloc_r+0x1c>
 8007712:	4631      	mov	r1, r6
 8007714:	4622      	mov	r2, r4
 8007716:	f7ff f9c7 	bl	8006aa8 <memcpy>
 800771a:	4631      	mov	r1, r6
 800771c:	4638      	mov	r0, r7
 800771e:	f7ff fd5f 	bl	80071e0 <_free_r>
 8007722:	e7e9      	b.n	80076f8 <_realloc_r+0x1c>
 8007724:	4635      	mov	r5, r6
 8007726:	e7e7      	b.n	80076f8 <_realloc_r+0x1c>

08007728 <__sfputc_r>:
 8007728:	6893      	ldr	r3, [r2, #8]
 800772a:	3b01      	subs	r3, #1
 800772c:	2b00      	cmp	r3, #0
 800772e:	b410      	push	{r4}
 8007730:	6093      	str	r3, [r2, #8]
 8007732:	da08      	bge.n	8007746 <__sfputc_r+0x1e>
 8007734:	6994      	ldr	r4, [r2, #24]
 8007736:	42a3      	cmp	r3, r4
 8007738:	db01      	blt.n	800773e <__sfputc_r+0x16>
 800773a:	290a      	cmp	r1, #10
 800773c:	d103      	bne.n	8007746 <__sfputc_r+0x1e>
 800773e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007742:	f000 b94b 	b.w	80079dc <__swbuf_r>
 8007746:	6813      	ldr	r3, [r2, #0]
 8007748:	1c58      	adds	r0, r3, #1
 800774a:	6010      	str	r0, [r2, #0]
 800774c:	7019      	strb	r1, [r3, #0]
 800774e:	4608      	mov	r0, r1
 8007750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007754:	4770      	bx	lr

08007756 <__sfputs_r>:
 8007756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007758:	4606      	mov	r6, r0
 800775a:	460f      	mov	r7, r1
 800775c:	4614      	mov	r4, r2
 800775e:	18d5      	adds	r5, r2, r3
 8007760:	42ac      	cmp	r4, r5
 8007762:	d101      	bne.n	8007768 <__sfputs_r+0x12>
 8007764:	2000      	movs	r0, #0
 8007766:	e007      	b.n	8007778 <__sfputs_r+0x22>
 8007768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800776c:	463a      	mov	r2, r7
 800776e:	4630      	mov	r0, r6
 8007770:	f7ff ffda 	bl	8007728 <__sfputc_r>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	d1f3      	bne.n	8007760 <__sfputs_r+0xa>
 8007778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800777c <_vfiprintf_r>:
 800777c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007780:	460d      	mov	r5, r1
 8007782:	b09d      	sub	sp, #116	; 0x74
 8007784:	4614      	mov	r4, r2
 8007786:	4698      	mov	r8, r3
 8007788:	4606      	mov	r6, r0
 800778a:	b118      	cbz	r0, 8007794 <_vfiprintf_r+0x18>
 800778c:	6983      	ldr	r3, [r0, #24]
 800778e:	b90b      	cbnz	r3, 8007794 <_vfiprintf_r+0x18>
 8007790:	f000 fb14 	bl	8007dbc <__sinit>
 8007794:	4b89      	ldr	r3, [pc, #548]	; (80079bc <_vfiprintf_r+0x240>)
 8007796:	429d      	cmp	r5, r3
 8007798:	d11b      	bne.n	80077d2 <_vfiprintf_r+0x56>
 800779a:	6875      	ldr	r5, [r6, #4]
 800779c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800779e:	07d9      	lsls	r1, r3, #31
 80077a0:	d405      	bmi.n	80077ae <_vfiprintf_r+0x32>
 80077a2:	89ab      	ldrh	r3, [r5, #12]
 80077a4:	059a      	lsls	r2, r3, #22
 80077a6:	d402      	bmi.n	80077ae <_vfiprintf_r+0x32>
 80077a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077aa:	f000 fba5 	bl	8007ef8 <__retarget_lock_acquire_recursive>
 80077ae:	89ab      	ldrh	r3, [r5, #12]
 80077b0:	071b      	lsls	r3, r3, #28
 80077b2:	d501      	bpl.n	80077b8 <_vfiprintf_r+0x3c>
 80077b4:	692b      	ldr	r3, [r5, #16]
 80077b6:	b9eb      	cbnz	r3, 80077f4 <_vfiprintf_r+0x78>
 80077b8:	4629      	mov	r1, r5
 80077ba:	4630      	mov	r0, r6
 80077bc:	f000 f96e 	bl	8007a9c <__swsetup_r>
 80077c0:	b1c0      	cbz	r0, 80077f4 <_vfiprintf_r+0x78>
 80077c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077c4:	07dc      	lsls	r4, r3, #31
 80077c6:	d50e      	bpl.n	80077e6 <_vfiprintf_r+0x6a>
 80077c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077cc:	b01d      	add	sp, #116	; 0x74
 80077ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d2:	4b7b      	ldr	r3, [pc, #492]	; (80079c0 <_vfiprintf_r+0x244>)
 80077d4:	429d      	cmp	r5, r3
 80077d6:	d101      	bne.n	80077dc <_vfiprintf_r+0x60>
 80077d8:	68b5      	ldr	r5, [r6, #8]
 80077da:	e7df      	b.n	800779c <_vfiprintf_r+0x20>
 80077dc:	4b79      	ldr	r3, [pc, #484]	; (80079c4 <_vfiprintf_r+0x248>)
 80077de:	429d      	cmp	r5, r3
 80077e0:	bf08      	it	eq
 80077e2:	68f5      	ldreq	r5, [r6, #12]
 80077e4:	e7da      	b.n	800779c <_vfiprintf_r+0x20>
 80077e6:	89ab      	ldrh	r3, [r5, #12]
 80077e8:	0598      	lsls	r0, r3, #22
 80077ea:	d4ed      	bmi.n	80077c8 <_vfiprintf_r+0x4c>
 80077ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077ee:	f000 fb84 	bl	8007efa <__retarget_lock_release_recursive>
 80077f2:	e7e9      	b.n	80077c8 <_vfiprintf_r+0x4c>
 80077f4:	2300      	movs	r3, #0
 80077f6:	9309      	str	r3, [sp, #36]	; 0x24
 80077f8:	2320      	movs	r3, #32
 80077fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007802:	2330      	movs	r3, #48	; 0x30
 8007804:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80079c8 <_vfiprintf_r+0x24c>
 8007808:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800780c:	f04f 0901 	mov.w	r9, #1
 8007810:	4623      	mov	r3, r4
 8007812:	469a      	mov	sl, r3
 8007814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007818:	b10a      	cbz	r2, 800781e <_vfiprintf_r+0xa2>
 800781a:	2a25      	cmp	r2, #37	; 0x25
 800781c:	d1f9      	bne.n	8007812 <_vfiprintf_r+0x96>
 800781e:	ebba 0b04 	subs.w	fp, sl, r4
 8007822:	d00b      	beq.n	800783c <_vfiprintf_r+0xc0>
 8007824:	465b      	mov	r3, fp
 8007826:	4622      	mov	r2, r4
 8007828:	4629      	mov	r1, r5
 800782a:	4630      	mov	r0, r6
 800782c:	f7ff ff93 	bl	8007756 <__sfputs_r>
 8007830:	3001      	adds	r0, #1
 8007832:	f000 80aa 	beq.w	800798a <_vfiprintf_r+0x20e>
 8007836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007838:	445a      	add	r2, fp
 800783a:	9209      	str	r2, [sp, #36]	; 0x24
 800783c:	f89a 3000 	ldrb.w	r3, [sl]
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 80a2 	beq.w	800798a <_vfiprintf_r+0x20e>
 8007846:	2300      	movs	r3, #0
 8007848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800784c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007850:	f10a 0a01 	add.w	sl, sl, #1
 8007854:	9304      	str	r3, [sp, #16]
 8007856:	9307      	str	r3, [sp, #28]
 8007858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800785c:	931a      	str	r3, [sp, #104]	; 0x68
 800785e:	4654      	mov	r4, sl
 8007860:	2205      	movs	r2, #5
 8007862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007866:	4858      	ldr	r0, [pc, #352]	; (80079c8 <_vfiprintf_r+0x24c>)
 8007868:	f7f8 fcc2 	bl	80001f0 <memchr>
 800786c:	9a04      	ldr	r2, [sp, #16]
 800786e:	b9d8      	cbnz	r0, 80078a8 <_vfiprintf_r+0x12c>
 8007870:	06d1      	lsls	r1, r2, #27
 8007872:	bf44      	itt	mi
 8007874:	2320      	movmi	r3, #32
 8007876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800787a:	0713      	lsls	r3, r2, #28
 800787c:	bf44      	itt	mi
 800787e:	232b      	movmi	r3, #43	; 0x2b
 8007880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007884:	f89a 3000 	ldrb.w	r3, [sl]
 8007888:	2b2a      	cmp	r3, #42	; 0x2a
 800788a:	d015      	beq.n	80078b8 <_vfiprintf_r+0x13c>
 800788c:	9a07      	ldr	r2, [sp, #28]
 800788e:	4654      	mov	r4, sl
 8007890:	2000      	movs	r0, #0
 8007892:	f04f 0c0a 	mov.w	ip, #10
 8007896:	4621      	mov	r1, r4
 8007898:	f811 3b01 	ldrb.w	r3, [r1], #1
 800789c:	3b30      	subs	r3, #48	; 0x30
 800789e:	2b09      	cmp	r3, #9
 80078a0:	d94e      	bls.n	8007940 <_vfiprintf_r+0x1c4>
 80078a2:	b1b0      	cbz	r0, 80078d2 <_vfiprintf_r+0x156>
 80078a4:	9207      	str	r2, [sp, #28]
 80078a6:	e014      	b.n	80078d2 <_vfiprintf_r+0x156>
 80078a8:	eba0 0308 	sub.w	r3, r0, r8
 80078ac:	fa09 f303 	lsl.w	r3, r9, r3
 80078b0:	4313      	orrs	r3, r2
 80078b2:	9304      	str	r3, [sp, #16]
 80078b4:	46a2      	mov	sl, r4
 80078b6:	e7d2      	b.n	800785e <_vfiprintf_r+0xe2>
 80078b8:	9b03      	ldr	r3, [sp, #12]
 80078ba:	1d19      	adds	r1, r3, #4
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	9103      	str	r1, [sp, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	bfbb      	ittet	lt
 80078c4:	425b      	neglt	r3, r3
 80078c6:	f042 0202 	orrlt.w	r2, r2, #2
 80078ca:	9307      	strge	r3, [sp, #28]
 80078cc:	9307      	strlt	r3, [sp, #28]
 80078ce:	bfb8      	it	lt
 80078d0:	9204      	strlt	r2, [sp, #16]
 80078d2:	7823      	ldrb	r3, [r4, #0]
 80078d4:	2b2e      	cmp	r3, #46	; 0x2e
 80078d6:	d10c      	bne.n	80078f2 <_vfiprintf_r+0x176>
 80078d8:	7863      	ldrb	r3, [r4, #1]
 80078da:	2b2a      	cmp	r3, #42	; 0x2a
 80078dc:	d135      	bne.n	800794a <_vfiprintf_r+0x1ce>
 80078de:	9b03      	ldr	r3, [sp, #12]
 80078e0:	1d1a      	adds	r2, r3, #4
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	9203      	str	r2, [sp, #12]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	bfb8      	it	lt
 80078ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80078ee:	3402      	adds	r4, #2
 80078f0:	9305      	str	r3, [sp, #20]
 80078f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80079d8 <_vfiprintf_r+0x25c>
 80078f6:	7821      	ldrb	r1, [r4, #0]
 80078f8:	2203      	movs	r2, #3
 80078fa:	4650      	mov	r0, sl
 80078fc:	f7f8 fc78 	bl	80001f0 <memchr>
 8007900:	b140      	cbz	r0, 8007914 <_vfiprintf_r+0x198>
 8007902:	2340      	movs	r3, #64	; 0x40
 8007904:	eba0 000a 	sub.w	r0, r0, sl
 8007908:	fa03 f000 	lsl.w	r0, r3, r0
 800790c:	9b04      	ldr	r3, [sp, #16]
 800790e:	4303      	orrs	r3, r0
 8007910:	3401      	adds	r4, #1
 8007912:	9304      	str	r3, [sp, #16]
 8007914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007918:	482c      	ldr	r0, [pc, #176]	; (80079cc <_vfiprintf_r+0x250>)
 800791a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800791e:	2206      	movs	r2, #6
 8007920:	f7f8 fc66 	bl	80001f0 <memchr>
 8007924:	2800      	cmp	r0, #0
 8007926:	d03f      	beq.n	80079a8 <_vfiprintf_r+0x22c>
 8007928:	4b29      	ldr	r3, [pc, #164]	; (80079d0 <_vfiprintf_r+0x254>)
 800792a:	bb1b      	cbnz	r3, 8007974 <_vfiprintf_r+0x1f8>
 800792c:	9b03      	ldr	r3, [sp, #12]
 800792e:	3307      	adds	r3, #7
 8007930:	f023 0307 	bic.w	r3, r3, #7
 8007934:	3308      	adds	r3, #8
 8007936:	9303      	str	r3, [sp, #12]
 8007938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800793a:	443b      	add	r3, r7
 800793c:	9309      	str	r3, [sp, #36]	; 0x24
 800793e:	e767      	b.n	8007810 <_vfiprintf_r+0x94>
 8007940:	fb0c 3202 	mla	r2, ip, r2, r3
 8007944:	460c      	mov	r4, r1
 8007946:	2001      	movs	r0, #1
 8007948:	e7a5      	b.n	8007896 <_vfiprintf_r+0x11a>
 800794a:	2300      	movs	r3, #0
 800794c:	3401      	adds	r4, #1
 800794e:	9305      	str	r3, [sp, #20]
 8007950:	4619      	mov	r1, r3
 8007952:	f04f 0c0a 	mov.w	ip, #10
 8007956:	4620      	mov	r0, r4
 8007958:	f810 2b01 	ldrb.w	r2, [r0], #1
 800795c:	3a30      	subs	r2, #48	; 0x30
 800795e:	2a09      	cmp	r2, #9
 8007960:	d903      	bls.n	800796a <_vfiprintf_r+0x1ee>
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0c5      	beq.n	80078f2 <_vfiprintf_r+0x176>
 8007966:	9105      	str	r1, [sp, #20]
 8007968:	e7c3      	b.n	80078f2 <_vfiprintf_r+0x176>
 800796a:	fb0c 2101 	mla	r1, ip, r1, r2
 800796e:	4604      	mov	r4, r0
 8007970:	2301      	movs	r3, #1
 8007972:	e7f0      	b.n	8007956 <_vfiprintf_r+0x1da>
 8007974:	ab03      	add	r3, sp, #12
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	462a      	mov	r2, r5
 800797a:	4b16      	ldr	r3, [pc, #88]	; (80079d4 <_vfiprintf_r+0x258>)
 800797c:	a904      	add	r1, sp, #16
 800797e:	4630      	mov	r0, r6
 8007980:	f7fd fe22 	bl	80055c8 <_printf_float>
 8007984:	4607      	mov	r7, r0
 8007986:	1c78      	adds	r0, r7, #1
 8007988:	d1d6      	bne.n	8007938 <_vfiprintf_r+0x1bc>
 800798a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800798c:	07d9      	lsls	r1, r3, #31
 800798e:	d405      	bmi.n	800799c <_vfiprintf_r+0x220>
 8007990:	89ab      	ldrh	r3, [r5, #12]
 8007992:	059a      	lsls	r2, r3, #22
 8007994:	d402      	bmi.n	800799c <_vfiprintf_r+0x220>
 8007996:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007998:	f000 faaf 	bl	8007efa <__retarget_lock_release_recursive>
 800799c:	89ab      	ldrh	r3, [r5, #12]
 800799e:	065b      	lsls	r3, r3, #25
 80079a0:	f53f af12 	bmi.w	80077c8 <_vfiprintf_r+0x4c>
 80079a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079a6:	e711      	b.n	80077cc <_vfiprintf_r+0x50>
 80079a8:	ab03      	add	r3, sp, #12
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	462a      	mov	r2, r5
 80079ae:	4b09      	ldr	r3, [pc, #36]	; (80079d4 <_vfiprintf_r+0x258>)
 80079b0:	a904      	add	r1, sp, #16
 80079b2:	4630      	mov	r0, r6
 80079b4:	f7fe f8ac 	bl	8005b10 <_printf_i>
 80079b8:	e7e4      	b.n	8007984 <_vfiprintf_r+0x208>
 80079ba:	bf00      	nop
 80079bc:	080085dc 	.word	0x080085dc
 80079c0:	080085fc 	.word	0x080085fc
 80079c4:	080085bc 	.word	0x080085bc
 80079c8:	08008464 	.word	0x08008464
 80079cc:	0800846e 	.word	0x0800846e
 80079d0:	080055c9 	.word	0x080055c9
 80079d4:	08007757 	.word	0x08007757
 80079d8:	0800846a 	.word	0x0800846a

080079dc <__swbuf_r>:
 80079dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079de:	460e      	mov	r6, r1
 80079e0:	4614      	mov	r4, r2
 80079e2:	4605      	mov	r5, r0
 80079e4:	b118      	cbz	r0, 80079ee <__swbuf_r+0x12>
 80079e6:	6983      	ldr	r3, [r0, #24]
 80079e8:	b90b      	cbnz	r3, 80079ee <__swbuf_r+0x12>
 80079ea:	f000 f9e7 	bl	8007dbc <__sinit>
 80079ee:	4b21      	ldr	r3, [pc, #132]	; (8007a74 <__swbuf_r+0x98>)
 80079f0:	429c      	cmp	r4, r3
 80079f2:	d12b      	bne.n	8007a4c <__swbuf_r+0x70>
 80079f4:	686c      	ldr	r4, [r5, #4]
 80079f6:	69a3      	ldr	r3, [r4, #24]
 80079f8:	60a3      	str	r3, [r4, #8]
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	071a      	lsls	r2, r3, #28
 80079fe:	d52f      	bpl.n	8007a60 <__swbuf_r+0x84>
 8007a00:	6923      	ldr	r3, [r4, #16]
 8007a02:	b36b      	cbz	r3, 8007a60 <__swbuf_r+0x84>
 8007a04:	6923      	ldr	r3, [r4, #16]
 8007a06:	6820      	ldr	r0, [r4, #0]
 8007a08:	1ac0      	subs	r0, r0, r3
 8007a0a:	6963      	ldr	r3, [r4, #20]
 8007a0c:	b2f6      	uxtb	r6, r6
 8007a0e:	4283      	cmp	r3, r0
 8007a10:	4637      	mov	r7, r6
 8007a12:	dc04      	bgt.n	8007a1e <__swbuf_r+0x42>
 8007a14:	4621      	mov	r1, r4
 8007a16:	4628      	mov	r0, r5
 8007a18:	f000 f93c 	bl	8007c94 <_fflush_r>
 8007a1c:	bb30      	cbnz	r0, 8007a6c <__swbuf_r+0x90>
 8007a1e:	68a3      	ldr	r3, [r4, #8]
 8007a20:	3b01      	subs	r3, #1
 8007a22:	60a3      	str	r3, [r4, #8]
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	6022      	str	r2, [r4, #0]
 8007a2a:	701e      	strb	r6, [r3, #0]
 8007a2c:	6963      	ldr	r3, [r4, #20]
 8007a2e:	3001      	adds	r0, #1
 8007a30:	4283      	cmp	r3, r0
 8007a32:	d004      	beq.n	8007a3e <__swbuf_r+0x62>
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	07db      	lsls	r3, r3, #31
 8007a38:	d506      	bpl.n	8007a48 <__swbuf_r+0x6c>
 8007a3a:	2e0a      	cmp	r6, #10
 8007a3c:	d104      	bne.n	8007a48 <__swbuf_r+0x6c>
 8007a3e:	4621      	mov	r1, r4
 8007a40:	4628      	mov	r0, r5
 8007a42:	f000 f927 	bl	8007c94 <_fflush_r>
 8007a46:	b988      	cbnz	r0, 8007a6c <__swbuf_r+0x90>
 8007a48:	4638      	mov	r0, r7
 8007a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a4c:	4b0a      	ldr	r3, [pc, #40]	; (8007a78 <__swbuf_r+0x9c>)
 8007a4e:	429c      	cmp	r4, r3
 8007a50:	d101      	bne.n	8007a56 <__swbuf_r+0x7a>
 8007a52:	68ac      	ldr	r4, [r5, #8]
 8007a54:	e7cf      	b.n	80079f6 <__swbuf_r+0x1a>
 8007a56:	4b09      	ldr	r3, [pc, #36]	; (8007a7c <__swbuf_r+0xa0>)
 8007a58:	429c      	cmp	r4, r3
 8007a5a:	bf08      	it	eq
 8007a5c:	68ec      	ldreq	r4, [r5, #12]
 8007a5e:	e7ca      	b.n	80079f6 <__swbuf_r+0x1a>
 8007a60:	4621      	mov	r1, r4
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 f81a 	bl	8007a9c <__swsetup_r>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d0cb      	beq.n	8007a04 <__swbuf_r+0x28>
 8007a6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007a70:	e7ea      	b.n	8007a48 <__swbuf_r+0x6c>
 8007a72:	bf00      	nop
 8007a74:	080085dc 	.word	0x080085dc
 8007a78:	080085fc 	.word	0x080085fc
 8007a7c:	080085bc 	.word	0x080085bc

08007a80 <__ascii_wctomb>:
 8007a80:	b149      	cbz	r1, 8007a96 <__ascii_wctomb+0x16>
 8007a82:	2aff      	cmp	r2, #255	; 0xff
 8007a84:	bf85      	ittet	hi
 8007a86:	238a      	movhi	r3, #138	; 0x8a
 8007a88:	6003      	strhi	r3, [r0, #0]
 8007a8a:	700a      	strbls	r2, [r1, #0]
 8007a8c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007a90:	bf98      	it	ls
 8007a92:	2001      	movls	r0, #1
 8007a94:	4770      	bx	lr
 8007a96:	4608      	mov	r0, r1
 8007a98:	4770      	bx	lr
	...

08007a9c <__swsetup_r>:
 8007a9c:	4b32      	ldr	r3, [pc, #200]	; (8007b68 <__swsetup_r+0xcc>)
 8007a9e:	b570      	push	{r4, r5, r6, lr}
 8007aa0:	681d      	ldr	r5, [r3, #0]
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	b125      	cbz	r5, 8007ab2 <__swsetup_r+0x16>
 8007aa8:	69ab      	ldr	r3, [r5, #24]
 8007aaa:	b913      	cbnz	r3, 8007ab2 <__swsetup_r+0x16>
 8007aac:	4628      	mov	r0, r5
 8007aae:	f000 f985 	bl	8007dbc <__sinit>
 8007ab2:	4b2e      	ldr	r3, [pc, #184]	; (8007b6c <__swsetup_r+0xd0>)
 8007ab4:	429c      	cmp	r4, r3
 8007ab6:	d10f      	bne.n	8007ad8 <__swsetup_r+0x3c>
 8007ab8:	686c      	ldr	r4, [r5, #4]
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ac0:	0719      	lsls	r1, r3, #28
 8007ac2:	d42c      	bmi.n	8007b1e <__swsetup_r+0x82>
 8007ac4:	06dd      	lsls	r5, r3, #27
 8007ac6:	d411      	bmi.n	8007aec <__swsetup_r+0x50>
 8007ac8:	2309      	movs	r3, #9
 8007aca:	6033      	str	r3, [r6, #0]
 8007acc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ad0:	81a3      	strh	r3, [r4, #12]
 8007ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ad6:	e03e      	b.n	8007b56 <__swsetup_r+0xba>
 8007ad8:	4b25      	ldr	r3, [pc, #148]	; (8007b70 <__swsetup_r+0xd4>)
 8007ada:	429c      	cmp	r4, r3
 8007adc:	d101      	bne.n	8007ae2 <__swsetup_r+0x46>
 8007ade:	68ac      	ldr	r4, [r5, #8]
 8007ae0:	e7eb      	b.n	8007aba <__swsetup_r+0x1e>
 8007ae2:	4b24      	ldr	r3, [pc, #144]	; (8007b74 <__swsetup_r+0xd8>)
 8007ae4:	429c      	cmp	r4, r3
 8007ae6:	bf08      	it	eq
 8007ae8:	68ec      	ldreq	r4, [r5, #12]
 8007aea:	e7e6      	b.n	8007aba <__swsetup_r+0x1e>
 8007aec:	0758      	lsls	r0, r3, #29
 8007aee:	d512      	bpl.n	8007b16 <__swsetup_r+0x7a>
 8007af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007af2:	b141      	cbz	r1, 8007b06 <__swsetup_r+0x6a>
 8007af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007af8:	4299      	cmp	r1, r3
 8007afa:	d002      	beq.n	8007b02 <__swsetup_r+0x66>
 8007afc:	4630      	mov	r0, r6
 8007afe:	f7ff fb6f 	bl	80071e0 <_free_r>
 8007b02:	2300      	movs	r3, #0
 8007b04:	6363      	str	r3, [r4, #52]	; 0x34
 8007b06:	89a3      	ldrh	r3, [r4, #12]
 8007b08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b0c:	81a3      	strh	r3, [r4, #12]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	6063      	str	r3, [r4, #4]
 8007b12:	6923      	ldr	r3, [r4, #16]
 8007b14:	6023      	str	r3, [r4, #0]
 8007b16:	89a3      	ldrh	r3, [r4, #12]
 8007b18:	f043 0308 	orr.w	r3, r3, #8
 8007b1c:	81a3      	strh	r3, [r4, #12]
 8007b1e:	6923      	ldr	r3, [r4, #16]
 8007b20:	b94b      	cbnz	r3, 8007b36 <__swsetup_r+0x9a>
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b2c:	d003      	beq.n	8007b36 <__swsetup_r+0x9a>
 8007b2e:	4621      	mov	r1, r4
 8007b30:	4630      	mov	r0, r6
 8007b32:	f000 fa07 	bl	8007f44 <__smakebuf_r>
 8007b36:	89a0      	ldrh	r0, [r4, #12]
 8007b38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b3c:	f010 0301 	ands.w	r3, r0, #1
 8007b40:	d00a      	beq.n	8007b58 <__swsetup_r+0xbc>
 8007b42:	2300      	movs	r3, #0
 8007b44:	60a3      	str	r3, [r4, #8]
 8007b46:	6963      	ldr	r3, [r4, #20]
 8007b48:	425b      	negs	r3, r3
 8007b4a:	61a3      	str	r3, [r4, #24]
 8007b4c:	6923      	ldr	r3, [r4, #16]
 8007b4e:	b943      	cbnz	r3, 8007b62 <__swsetup_r+0xc6>
 8007b50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b54:	d1ba      	bne.n	8007acc <__swsetup_r+0x30>
 8007b56:	bd70      	pop	{r4, r5, r6, pc}
 8007b58:	0781      	lsls	r1, r0, #30
 8007b5a:	bf58      	it	pl
 8007b5c:	6963      	ldrpl	r3, [r4, #20]
 8007b5e:	60a3      	str	r3, [r4, #8]
 8007b60:	e7f4      	b.n	8007b4c <__swsetup_r+0xb0>
 8007b62:	2000      	movs	r0, #0
 8007b64:	e7f7      	b.n	8007b56 <__swsetup_r+0xba>
 8007b66:	bf00      	nop
 8007b68:	20000014 	.word	0x20000014
 8007b6c:	080085dc 	.word	0x080085dc
 8007b70:	080085fc 	.word	0x080085fc
 8007b74:	080085bc 	.word	0x080085bc

08007b78 <abort>:
 8007b78:	b508      	push	{r3, lr}
 8007b7a:	2006      	movs	r0, #6
 8007b7c:	f000 fa52 	bl	8008024 <raise>
 8007b80:	2001      	movs	r0, #1
 8007b82:	f7fa f9fb 	bl	8001f7c <_exit>
	...

08007b88 <__sflush_r>:
 8007b88:	898a      	ldrh	r2, [r1, #12]
 8007b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8e:	4605      	mov	r5, r0
 8007b90:	0710      	lsls	r0, r2, #28
 8007b92:	460c      	mov	r4, r1
 8007b94:	d458      	bmi.n	8007c48 <__sflush_r+0xc0>
 8007b96:	684b      	ldr	r3, [r1, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	dc05      	bgt.n	8007ba8 <__sflush_r+0x20>
 8007b9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	dc02      	bgt.n	8007ba8 <__sflush_r+0x20>
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ba8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007baa:	2e00      	cmp	r6, #0
 8007bac:	d0f9      	beq.n	8007ba2 <__sflush_r+0x1a>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bb4:	682f      	ldr	r7, [r5, #0]
 8007bb6:	602b      	str	r3, [r5, #0]
 8007bb8:	d032      	beq.n	8007c20 <__sflush_r+0x98>
 8007bba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bbc:	89a3      	ldrh	r3, [r4, #12]
 8007bbe:	075a      	lsls	r2, r3, #29
 8007bc0:	d505      	bpl.n	8007bce <__sflush_r+0x46>
 8007bc2:	6863      	ldr	r3, [r4, #4]
 8007bc4:	1ac0      	subs	r0, r0, r3
 8007bc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bc8:	b10b      	cbz	r3, 8007bce <__sflush_r+0x46>
 8007bca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bcc:	1ac0      	subs	r0, r0, r3
 8007bce:	2300      	movs	r3, #0
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bd4:	6a21      	ldr	r1, [r4, #32]
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	47b0      	blx	r6
 8007bda:	1c43      	adds	r3, r0, #1
 8007bdc:	89a3      	ldrh	r3, [r4, #12]
 8007bde:	d106      	bne.n	8007bee <__sflush_r+0x66>
 8007be0:	6829      	ldr	r1, [r5, #0]
 8007be2:	291d      	cmp	r1, #29
 8007be4:	d82c      	bhi.n	8007c40 <__sflush_r+0xb8>
 8007be6:	4a2a      	ldr	r2, [pc, #168]	; (8007c90 <__sflush_r+0x108>)
 8007be8:	40ca      	lsrs	r2, r1
 8007bea:	07d6      	lsls	r6, r2, #31
 8007bec:	d528      	bpl.n	8007c40 <__sflush_r+0xb8>
 8007bee:	2200      	movs	r2, #0
 8007bf0:	6062      	str	r2, [r4, #4]
 8007bf2:	04d9      	lsls	r1, r3, #19
 8007bf4:	6922      	ldr	r2, [r4, #16]
 8007bf6:	6022      	str	r2, [r4, #0]
 8007bf8:	d504      	bpl.n	8007c04 <__sflush_r+0x7c>
 8007bfa:	1c42      	adds	r2, r0, #1
 8007bfc:	d101      	bne.n	8007c02 <__sflush_r+0x7a>
 8007bfe:	682b      	ldr	r3, [r5, #0]
 8007c00:	b903      	cbnz	r3, 8007c04 <__sflush_r+0x7c>
 8007c02:	6560      	str	r0, [r4, #84]	; 0x54
 8007c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c06:	602f      	str	r7, [r5, #0]
 8007c08:	2900      	cmp	r1, #0
 8007c0a:	d0ca      	beq.n	8007ba2 <__sflush_r+0x1a>
 8007c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c10:	4299      	cmp	r1, r3
 8007c12:	d002      	beq.n	8007c1a <__sflush_r+0x92>
 8007c14:	4628      	mov	r0, r5
 8007c16:	f7ff fae3 	bl	80071e0 <_free_r>
 8007c1a:	2000      	movs	r0, #0
 8007c1c:	6360      	str	r0, [r4, #52]	; 0x34
 8007c1e:	e7c1      	b.n	8007ba4 <__sflush_r+0x1c>
 8007c20:	6a21      	ldr	r1, [r4, #32]
 8007c22:	2301      	movs	r3, #1
 8007c24:	4628      	mov	r0, r5
 8007c26:	47b0      	blx	r6
 8007c28:	1c41      	adds	r1, r0, #1
 8007c2a:	d1c7      	bne.n	8007bbc <__sflush_r+0x34>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0c4      	beq.n	8007bbc <__sflush_r+0x34>
 8007c32:	2b1d      	cmp	r3, #29
 8007c34:	d001      	beq.n	8007c3a <__sflush_r+0xb2>
 8007c36:	2b16      	cmp	r3, #22
 8007c38:	d101      	bne.n	8007c3e <__sflush_r+0xb6>
 8007c3a:	602f      	str	r7, [r5, #0]
 8007c3c:	e7b1      	b.n	8007ba2 <__sflush_r+0x1a>
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c44:	81a3      	strh	r3, [r4, #12]
 8007c46:	e7ad      	b.n	8007ba4 <__sflush_r+0x1c>
 8007c48:	690f      	ldr	r7, [r1, #16]
 8007c4a:	2f00      	cmp	r7, #0
 8007c4c:	d0a9      	beq.n	8007ba2 <__sflush_r+0x1a>
 8007c4e:	0793      	lsls	r3, r2, #30
 8007c50:	680e      	ldr	r6, [r1, #0]
 8007c52:	bf08      	it	eq
 8007c54:	694b      	ldreq	r3, [r1, #20]
 8007c56:	600f      	str	r7, [r1, #0]
 8007c58:	bf18      	it	ne
 8007c5a:	2300      	movne	r3, #0
 8007c5c:	eba6 0807 	sub.w	r8, r6, r7
 8007c60:	608b      	str	r3, [r1, #8]
 8007c62:	f1b8 0f00 	cmp.w	r8, #0
 8007c66:	dd9c      	ble.n	8007ba2 <__sflush_r+0x1a>
 8007c68:	6a21      	ldr	r1, [r4, #32]
 8007c6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c6c:	4643      	mov	r3, r8
 8007c6e:	463a      	mov	r2, r7
 8007c70:	4628      	mov	r0, r5
 8007c72:	47b0      	blx	r6
 8007c74:	2800      	cmp	r0, #0
 8007c76:	dc06      	bgt.n	8007c86 <__sflush_r+0xfe>
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c7e:	81a3      	strh	r3, [r4, #12]
 8007c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c84:	e78e      	b.n	8007ba4 <__sflush_r+0x1c>
 8007c86:	4407      	add	r7, r0
 8007c88:	eba8 0800 	sub.w	r8, r8, r0
 8007c8c:	e7e9      	b.n	8007c62 <__sflush_r+0xda>
 8007c8e:	bf00      	nop
 8007c90:	20400001 	.word	0x20400001

08007c94 <_fflush_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	690b      	ldr	r3, [r1, #16]
 8007c98:	4605      	mov	r5, r0
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	b913      	cbnz	r3, 8007ca4 <_fflush_r+0x10>
 8007c9e:	2500      	movs	r5, #0
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	bd38      	pop	{r3, r4, r5, pc}
 8007ca4:	b118      	cbz	r0, 8007cae <_fflush_r+0x1a>
 8007ca6:	6983      	ldr	r3, [r0, #24]
 8007ca8:	b90b      	cbnz	r3, 8007cae <_fflush_r+0x1a>
 8007caa:	f000 f887 	bl	8007dbc <__sinit>
 8007cae:	4b14      	ldr	r3, [pc, #80]	; (8007d00 <_fflush_r+0x6c>)
 8007cb0:	429c      	cmp	r4, r3
 8007cb2:	d11b      	bne.n	8007cec <_fflush_r+0x58>
 8007cb4:	686c      	ldr	r4, [r5, #4]
 8007cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d0ef      	beq.n	8007c9e <_fflush_r+0xa>
 8007cbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cc0:	07d0      	lsls	r0, r2, #31
 8007cc2:	d404      	bmi.n	8007cce <_fflush_r+0x3a>
 8007cc4:	0599      	lsls	r1, r3, #22
 8007cc6:	d402      	bmi.n	8007cce <_fflush_r+0x3a>
 8007cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cca:	f000 f915 	bl	8007ef8 <__retarget_lock_acquire_recursive>
 8007cce:	4628      	mov	r0, r5
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	f7ff ff59 	bl	8007b88 <__sflush_r>
 8007cd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cd8:	07da      	lsls	r2, r3, #31
 8007cda:	4605      	mov	r5, r0
 8007cdc:	d4e0      	bmi.n	8007ca0 <_fflush_r+0xc>
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	059b      	lsls	r3, r3, #22
 8007ce2:	d4dd      	bmi.n	8007ca0 <_fflush_r+0xc>
 8007ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ce6:	f000 f908 	bl	8007efa <__retarget_lock_release_recursive>
 8007cea:	e7d9      	b.n	8007ca0 <_fflush_r+0xc>
 8007cec:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <_fflush_r+0x70>)
 8007cee:	429c      	cmp	r4, r3
 8007cf0:	d101      	bne.n	8007cf6 <_fflush_r+0x62>
 8007cf2:	68ac      	ldr	r4, [r5, #8]
 8007cf4:	e7df      	b.n	8007cb6 <_fflush_r+0x22>
 8007cf6:	4b04      	ldr	r3, [pc, #16]	; (8007d08 <_fflush_r+0x74>)
 8007cf8:	429c      	cmp	r4, r3
 8007cfa:	bf08      	it	eq
 8007cfc:	68ec      	ldreq	r4, [r5, #12]
 8007cfe:	e7da      	b.n	8007cb6 <_fflush_r+0x22>
 8007d00:	080085dc 	.word	0x080085dc
 8007d04:	080085fc 	.word	0x080085fc
 8007d08:	080085bc 	.word	0x080085bc

08007d0c <std>:
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	b510      	push	{r4, lr}
 8007d10:	4604      	mov	r4, r0
 8007d12:	e9c0 3300 	strd	r3, r3, [r0]
 8007d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d1a:	6083      	str	r3, [r0, #8]
 8007d1c:	8181      	strh	r1, [r0, #12]
 8007d1e:	6643      	str	r3, [r0, #100]	; 0x64
 8007d20:	81c2      	strh	r2, [r0, #14]
 8007d22:	6183      	str	r3, [r0, #24]
 8007d24:	4619      	mov	r1, r3
 8007d26:	2208      	movs	r2, #8
 8007d28:	305c      	adds	r0, #92	; 0x5c
 8007d2a:	f7fd fba5 	bl	8005478 <memset>
 8007d2e:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <std+0x38>)
 8007d30:	6263      	str	r3, [r4, #36]	; 0x24
 8007d32:	4b05      	ldr	r3, [pc, #20]	; (8007d48 <std+0x3c>)
 8007d34:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d36:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <std+0x40>)
 8007d38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d3a:	4b05      	ldr	r3, [pc, #20]	; (8007d50 <std+0x44>)
 8007d3c:	6224      	str	r4, [r4, #32]
 8007d3e:	6323      	str	r3, [r4, #48]	; 0x30
 8007d40:	bd10      	pop	{r4, pc}
 8007d42:	bf00      	nop
 8007d44:	0800805d 	.word	0x0800805d
 8007d48:	0800807f 	.word	0x0800807f
 8007d4c:	080080b7 	.word	0x080080b7
 8007d50:	080080db 	.word	0x080080db

08007d54 <_cleanup_r>:
 8007d54:	4901      	ldr	r1, [pc, #4]	; (8007d5c <_cleanup_r+0x8>)
 8007d56:	f000 b8af 	b.w	8007eb8 <_fwalk_reent>
 8007d5a:	bf00      	nop
 8007d5c:	08007c95 	.word	0x08007c95

08007d60 <__sfmoreglue>:
 8007d60:	b570      	push	{r4, r5, r6, lr}
 8007d62:	1e4a      	subs	r2, r1, #1
 8007d64:	2568      	movs	r5, #104	; 0x68
 8007d66:	4355      	muls	r5, r2
 8007d68:	460e      	mov	r6, r1
 8007d6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d6e:	f7ff fa87 	bl	8007280 <_malloc_r>
 8007d72:	4604      	mov	r4, r0
 8007d74:	b140      	cbz	r0, 8007d88 <__sfmoreglue+0x28>
 8007d76:	2100      	movs	r1, #0
 8007d78:	e9c0 1600 	strd	r1, r6, [r0]
 8007d7c:	300c      	adds	r0, #12
 8007d7e:	60a0      	str	r0, [r4, #8]
 8007d80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d84:	f7fd fb78 	bl	8005478 <memset>
 8007d88:	4620      	mov	r0, r4
 8007d8a:	bd70      	pop	{r4, r5, r6, pc}

08007d8c <__sfp_lock_acquire>:
 8007d8c:	4801      	ldr	r0, [pc, #4]	; (8007d94 <__sfp_lock_acquire+0x8>)
 8007d8e:	f000 b8b3 	b.w	8007ef8 <__retarget_lock_acquire_recursive>
 8007d92:	bf00      	nop
 8007d94:	20000728 	.word	0x20000728

08007d98 <__sfp_lock_release>:
 8007d98:	4801      	ldr	r0, [pc, #4]	; (8007da0 <__sfp_lock_release+0x8>)
 8007d9a:	f000 b8ae 	b.w	8007efa <__retarget_lock_release_recursive>
 8007d9e:	bf00      	nop
 8007da0:	20000728 	.word	0x20000728

08007da4 <__sinit_lock_acquire>:
 8007da4:	4801      	ldr	r0, [pc, #4]	; (8007dac <__sinit_lock_acquire+0x8>)
 8007da6:	f000 b8a7 	b.w	8007ef8 <__retarget_lock_acquire_recursive>
 8007daa:	bf00      	nop
 8007dac:	20000723 	.word	0x20000723

08007db0 <__sinit_lock_release>:
 8007db0:	4801      	ldr	r0, [pc, #4]	; (8007db8 <__sinit_lock_release+0x8>)
 8007db2:	f000 b8a2 	b.w	8007efa <__retarget_lock_release_recursive>
 8007db6:	bf00      	nop
 8007db8:	20000723 	.word	0x20000723

08007dbc <__sinit>:
 8007dbc:	b510      	push	{r4, lr}
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	f7ff fff0 	bl	8007da4 <__sinit_lock_acquire>
 8007dc4:	69a3      	ldr	r3, [r4, #24]
 8007dc6:	b11b      	cbz	r3, 8007dd0 <__sinit+0x14>
 8007dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dcc:	f7ff bff0 	b.w	8007db0 <__sinit_lock_release>
 8007dd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007dd4:	6523      	str	r3, [r4, #80]	; 0x50
 8007dd6:	4b13      	ldr	r3, [pc, #76]	; (8007e24 <__sinit+0x68>)
 8007dd8:	4a13      	ldr	r2, [pc, #76]	; (8007e28 <__sinit+0x6c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	62a2      	str	r2, [r4, #40]	; 0x28
 8007dde:	42a3      	cmp	r3, r4
 8007de0:	bf04      	itt	eq
 8007de2:	2301      	moveq	r3, #1
 8007de4:	61a3      	streq	r3, [r4, #24]
 8007de6:	4620      	mov	r0, r4
 8007de8:	f000 f820 	bl	8007e2c <__sfp>
 8007dec:	6060      	str	r0, [r4, #4]
 8007dee:	4620      	mov	r0, r4
 8007df0:	f000 f81c 	bl	8007e2c <__sfp>
 8007df4:	60a0      	str	r0, [r4, #8]
 8007df6:	4620      	mov	r0, r4
 8007df8:	f000 f818 	bl	8007e2c <__sfp>
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	60e0      	str	r0, [r4, #12]
 8007e00:	2104      	movs	r1, #4
 8007e02:	6860      	ldr	r0, [r4, #4]
 8007e04:	f7ff ff82 	bl	8007d0c <std>
 8007e08:	68a0      	ldr	r0, [r4, #8]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	2109      	movs	r1, #9
 8007e0e:	f7ff ff7d 	bl	8007d0c <std>
 8007e12:	68e0      	ldr	r0, [r4, #12]
 8007e14:	2202      	movs	r2, #2
 8007e16:	2112      	movs	r1, #18
 8007e18:	f7ff ff78 	bl	8007d0c <std>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	61a3      	str	r3, [r4, #24]
 8007e20:	e7d2      	b.n	8007dc8 <__sinit+0xc>
 8007e22:	bf00      	nop
 8007e24:	0800823c 	.word	0x0800823c
 8007e28:	08007d55 	.word	0x08007d55

08007e2c <__sfp>:
 8007e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2e:	4607      	mov	r7, r0
 8007e30:	f7ff ffac 	bl	8007d8c <__sfp_lock_acquire>
 8007e34:	4b1e      	ldr	r3, [pc, #120]	; (8007eb0 <__sfp+0x84>)
 8007e36:	681e      	ldr	r6, [r3, #0]
 8007e38:	69b3      	ldr	r3, [r6, #24]
 8007e3a:	b913      	cbnz	r3, 8007e42 <__sfp+0x16>
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	f7ff ffbd 	bl	8007dbc <__sinit>
 8007e42:	3648      	adds	r6, #72	; 0x48
 8007e44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	d503      	bpl.n	8007e54 <__sfp+0x28>
 8007e4c:	6833      	ldr	r3, [r6, #0]
 8007e4e:	b30b      	cbz	r3, 8007e94 <__sfp+0x68>
 8007e50:	6836      	ldr	r6, [r6, #0]
 8007e52:	e7f7      	b.n	8007e44 <__sfp+0x18>
 8007e54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e58:	b9d5      	cbnz	r5, 8007e90 <__sfp+0x64>
 8007e5a:	4b16      	ldr	r3, [pc, #88]	; (8007eb4 <__sfp+0x88>)
 8007e5c:	60e3      	str	r3, [r4, #12]
 8007e5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e62:	6665      	str	r5, [r4, #100]	; 0x64
 8007e64:	f000 f847 	bl	8007ef6 <__retarget_lock_init_recursive>
 8007e68:	f7ff ff96 	bl	8007d98 <__sfp_lock_release>
 8007e6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e74:	6025      	str	r5, [r4, #0]
 8007e76:	61a5      	str	r5, [r4, #24]
 8007e78:	2208      	movs	r2, #8
 8007e7a:	4629      	mov	r1, r5
 8007e7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e80:	f7fd fafa 	bl	8005478 <memset>
 8007e84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e90:	3468      	adds	r4, #104	; 0x68
 8007e92:	e7d9      	b.n	8007e48 <__sfp+0x1c>
 8007e94:	2104      	movs	r1, #4
 8007e96:	4638      	mov	r0, r7
 8007e98:	f7ff ff62 	bl	8007d60 <__sfmoreglue>
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	6030      	str	r0, [r6, #0]
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	d1d5      	bne.n	8007e50 <__sfp+0x24>
 8007ea4:	f7ff ff78 	bl	8007d98 <__sfp_lock_release>
 8007ea8:	230c      	movs	r3, #12
 8007eaa:	603b      	str	r3, [r7, #0]
 8007eac:	e7ee      	b.n	8007e8c <__sfp+0x60>
 8007eae:	bf00      	nop
 8007eb0:	0800823c 	.word	0x0800823c
 8007eb4:	ffff0001 	.word	0xffff0001

08007eb8 <_fwalk_reent>:
 8007eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	4688      	mov	r8, r1
 8007ec0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ec4:	2700      	movs	r7, #0
 8007ec6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007eca:	f1b9 0901 	subs.w	r9, r9, #1
 8007ece:	d505      	bpl.n	8007edc <_fwalk_reent+0x24>
 8007ed0:	6824      	ldr	r4, [r4, #0]
 8007ed2:	2c00      	cmp	r4, #0
 8007ed4:	d1f7      	bne.n	8007ec6 <_fwalk_reent+0xe>
 8007ed6:	4638      	mov	r0, r7
 8007ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007edc:	89ab      	ldrh	r3, [r5, #12]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d907      	bls.n	8007ef2 <_fwalk_reent+0x3a>
 8007ee2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	d003      	beq.n	8007ef2 <_fwalk_reent+0x3a>
 8007eea:	4629      	mov	r1, r5
 8007eec:	4630      	mov	r0, r6
 8007eee:	47c0      	blx	r8
 8007ef0:	4307      	orrs	r7, r0
 8007ef2:	3568      	adds	r5, #104	; 0x68
 8007ef4:	e7e9      	b.n	8007eca <_fwalk_reent+0x12>

08007ef6 <__retarget_lock_init_recursive>:
 8007ef6:	4770      	bx	lr

08007ef8 <__retarget_lock_acquire_recursive>:
 8007ef8:	4770      	bx	lr

08007efa <__retarget_lock_release_recursive>:
 8007efa:	4770      	bx	lr

08007efc <__swhatbuf_r>:
 8007efc:	b570      	push	{r4, r5, r6, lr}
 8007efe:	460e      	mov	r6, r1
 8007f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f04:	2900      	cmp	r1, #0
 8007f06:	b096      	sub	sp, #88	; 0x58
 8007f08:	4614      	mov	r4, r2
 8007f0a:	461d      	mov	r5, r3
 8007f0c:	da07      	bge.n	8007f1e <__swhatbuf_r+0x22>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	602b      	str	r3, [r5, #0]
 8007f12:	89b3      	ldrh	r3, [r6, #12]
 8007f14:	061a      	lsls	r2, r3, #24
 8007f16:	d410      	bmi.n	8007f3a <__swhatbuf_r+0x3e>
 8007f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f1c:	e00e      	b.n	8007f3c <__swhatbuf_r+0x40>
 8007f1e:	466a      	mov	r2, sp
 8007f20:	f000 f902 	bl	8008128 <_fstat_r>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	dbf2      	blt.n	8007f0e <__swhatbuf_r+0x12>
 8007f28:	9a01      	ldr	r2, [sp, #4]
 8007f2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f32:	425a      	negs	r2, r3
 8007f34:	415a      	adcs	r2, r3
 8007f36:	602a      	str	r2, [r5, #0]
 8007f38:	e7ee      	b.n	8007f18 <__swhatbuf_r+0x1c>
 8007f3a:	2340      	movs	r3, #64	; 0x40
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	6023      	str	r3, [r4, #0]
 8007f40:	b016      	add	sp, #88	; 0x58
 8007f42:	bd70      	pop	{r4, r5, r6, pc}

08007f44 <__smakebuf_r>:
 8007f44:	898b      	ldrh	r3, [r1, #12]
 8007f46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f48:	079d      	lsls	r5, r3, #30
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	d507      	bpl.n	8007f60 <__smakebuf_r+0x1c>
 8007f50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	6123      	str	r3, [r4, #16]
 8007f58:	2301      	movs	r3, #1
 8007f5a:	6163      	str	r3, [r4, #20]
 8007f5c:	b002      	add	sp, #8
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}
 8007f60:	ab01      	add	r3, sp, #4
 8007f62:	466a      	mov	r2, sp
 8007f64:	f7ff ffca 	bl	8007efc <__swhatbuf_r>
 8007f68:	9900      	ldr	r1, [sp, #0]
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f7ff f987 	bl	8007280 <_malloc_r>
 8007f72:	b948      	cbnz	r0, 8007f88 <__smakebuf_r+0x44>
 8007f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f78:	059a      	lsls	r2, r3, #22
 8007f7a:	d4ef      	bmi.n	8007f5c <__smakebuf_r+0x18>
 8007f7c:	f023 0303 	bic.w	r3, r3, #3
 8007f80:	f043 0302 	orr.w	r3, r3, #2
 8007f84:	81a3      	strh	r3, [r4, #12]
 8007f86:	e7e3      	b.n	8007f50 <__smakebuf_r+0xc>
 8007f88:	4b0d      	ldr	r3, [pc, #52]	; (8007fc0 <__smakebuf_r+0x7c>)
 8007f8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	6020      	str	r0, [r4, #0]
 8007f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f94:	81a3      	strh	r3, [r4, #12]
 8007f96:	9b00      	ldr	r3, [sp, #0]
 8007f98:	6163      	str	r3, [r4, #20]
 8007f9a:	9b01      	ldr	r3, [sp, #4]
 8007f9c:	6120      	str	r0, [r4, #16]
 8007f9e:	b15b      	cbz	r3, 8007fb8 <__smakebuf_r+0x74>
 8007fa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	f000 f8d1 	bl	800814c <_isatty_r>
 8007faa:	b128      	cbz	r0, 8007fb8 <__smakebuf_r+0x74>
 8007fac:	89a3      	ldrh	r3, [r4, #12]
 8007fae:	f023 0303 	bic.w	r3, r3, #3
 8007fb2:	f043 0301 	orr.w	r3, r3, #1
 8007fb6:	81a3      	strh	r3, [r4, #12]
 8007fb8:	89a0      	ldrh	r0, [r4, #12]
 8007fba:	4305      	orrs	r5, r0
 8007fbc:	81a5      	strh	r5, [r4, #12]
 8007fbe:	e7cd      	b.n	8007f5c <__smakebuf_r+0x18>
 8007fc0:	08007d55 	.word	0x08007d55

08007fc4 <_malloc_usable_size_r>:
 8007fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fc8:	1f18      	subs	r0, r3, #4
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	bfbc      	itt	lt
 8007fce:	580b      	ldrlt	r3, [r1, r0]
 8007fd0:	18c0      	addlt	r0, r0, r3
 8007fd2:	4770      	bx	lr

08007fd4 <_raise_r>:
 8007fd4:	291f      	cmp	r1, #31
 8007fd6:	b538      	push	{r3, r4, r5, lr}
 8007fd8:	4604      	mov	r4, r0
 8007fda:	460d      	mov	r5, r1
 8007fdc:	d904      	bls.n	8007fe8 <_raise_r+0x14>
 8007fde:	2316      	movs	r3, #22
 8007fe0:	6003      	str	r3, [r0, #0]
 8007fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007fea:	b112      	cbz	r2, 8007ff2 <_raise_r+0x1e>
 8007fec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ff0:	b94b      	cbnz	r3, 8008006 <_raise_r+0x32>
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f000 f830 	bl	8008058 <_getpid_r>
 8007ff8:	462a      	mov	r2, r5
 8007ffa:	4601      	mov	r1, r0
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008002:	f000 b817 	b.w	8008034 <_kill_r>
 8008006:	2b01      	cmp	r3, #1
 8008008:	d00a      	beq.n	8008020 <_raise_r+0x4c>
 800800a:	1c59      	adds	r1, r3, #1
 800800c:	d103      	bne.n	8008016 <_raise_r+0x42>
 800800e:	2316      	movs	r3, #22
 8008010:	6003      	str	r3, [r0, #0]
 8008012:	2001      	movs	r0, #1
 8008014:	e7e7      	b.n	8007fe6 <_raise_r+0x12>
 8008016:	2400      	movs	r4, #0
 8008018:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800801c:	4628      	mov	r0, r5
 800801e:	4798      	blx	r3
 8008020:	2000      	movs	r0, #0
 8008022:	e7e0      	b.n	8007fe6 <_raise_r+0x12>

08008024 <raise>:
 8008024:	4b02      	ldr	r3, [pc, #8]	; (8008030 <raise+0xc>)
 8008026:	4601      	mov	r1, r0
 8008028:	6818      	ldr	r0, [r3, #0]
 800802a:	f7ff bfd3 	b.w	8007fd4 <_raise_r>
 800802e:	bf00      	nop
 8008030:	20000014 	.word	0x20000014

08008034 <_kill_r>:
 8008034:	b538      	push	{r3, r4, r5, lr}
 8008036:	4d07      	ldr	r5, [pc, #28]	; (8008054 <_kill_r+0x20>)
 8008038:	2300      	movs	r3, #0
 800803a:	4604      	mov	r4, r0
 800803c:	4608      	mov	r0, r1
 800803e:	4611      	mov	r1, r2
 8008040:	602b      	str	r3, [r5, #0]
 8008042:	f7f9 ff8b 	bl	8001f5c <_kill>
 8008046:	1c43      	adds	r3, r0, #1
 8008048:	d102      	bne.n	8008050 <_kill_r+0x1c>
 800804a:	682b      	ldr	r3, [r5, #0]
 800804c:	b103      	cbz	r3, 8008050 <_kill_r+0x1c>
 800804e:	6023      	str	r3, [r4, #0]
 8008050:	bd38      	pop	{r3, r4, r5, pc}
 8008052:	bf00      	nop
 8008054:	2000071c 	.word	0x2000071c

08008058 <_getpid_r>:
 8008058:	f7f9 bf78 	b.w	8001f4c <_getpid>

0800805c <__sread>:
 800805c:	b510      	push	{r4, lr}
 800805e:	460c      	mov	r4, r1
 8008060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008064:	f000 f894 	bl	8008190 <_read_r>
 8008068:	2800      	cmp	r0, #0
 800806a:	bfab      	itete	ge
 800806c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800806e:	89a3      	ldrhlt	r3, [r4, #12]
 8008070:	181b      	addge	r3, r3, r0
 8008072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008076:	bfac      	ite	ge
 8008078:	6563      	strge	r3, [r4, #84]	; 0x54
 800807a:	81a3      	strhlt	r3, [r4, #12]
 800807c:	bd10      	pop	{r4, pc}

0800807e <__swrite>:
 800807e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008082:	461f      	mov	r7, r3
 8008084:	898b      	ldrh	r3, [r1, #12]
 8008086:	05db      	lsls	r3, r3, #23
 8008088:	4605      	mov	r5, r0
 800808a:	460c      	mov	r4, r1
 800808c:	4616      	mov	r6, r2
 800808e:	d505      	bpl.n	800809c <__swrite+0x1e>
 8008090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008094:	2302      	movs	r3, #2
 8008096:	2200      	movs	r2, #0
 8008098:	f000 f868 	bl	800816c <_lseek_r>
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080a6:	81a3      	strh	r3, [r4, #12]
 80080a8:	4632      	mov	r2, r6
 80080aa:	463b      	mov	r3, r7
 80080ac:	4628      	mov	r0, r5
 80080ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080b2:	f000 b817 	b.w	80080e4 <_write_r>

080080b6 <__sseek>:
 80080b6:	b510      	push	{r4, lr}
 80080b8:	460c      	mov	r4, r1
 80080ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080be:	f000 f855 	bl	800816c <_lseek_r>
 80080c2:	1c43      	adds	r3, r0, #1
 80080c4:	89a3      	ldrh	r3, [r4, #12]
 80080c6:	bf15      	itete	ne
 80080c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80080ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080d2:	81a3      	strheq	r3, [r4, #12]
 80080d4:	bf18      	it	ne
 80080d6:	81a3      	strhne	r3, [r4, #12]
 80080d8:	bd10      	pop	{r4, pc}

080080da <__sclose>:
 80080da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080de:	f000 b813 	b.w	8008108 <_close_r>
	...

080080e4 <_write_r>:
 80080e4:	b538      	push	{r3, r4, r5, lr}
 80080e6:	4d07      	ldr	r5, [pc, #28]	; (8008104 <_write_r+0x20>)
 80080e8:	4604      	mov	r4, r0
 80080ea:	4608      	mov	r0, r1
 80080ec:	4611      	mov	r1, r2
 80080ee:	2200      	movs	r2, #0
 80080f0:	602a      	str	r2, [r5, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	f7f9 ff69 	bl	8001fca <_write>
 80080f8:	1c43      	adds	r3, r0, #1
 80080fa:	d102      	bne.n	8008102 <_write_r+0x1e>
 80080fc:	682b      	ldr	r3, [r5, #0]
 80080fe:	b103      	cbz	r3, 8008102 <_write_r+0x1e>
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	2000071c 	.word	0x2000071c

08008108 <_close_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4d06      	ldr	r5, [pc, #24]	; (8008124 <_close_r+0x1c>)
 800810c:	2300      	movs	r3, #0
 800810e:	4604      	mov	r4, r0
 8008110:	4608      	mov	r0, r1
 8008112:	602b      	str	r3, [r5, #0]
 8008114:	f7f9 ff75 	bl	8002002 <_close>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d102      	bne.n	8008122 <_close_r+0x1a>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	b103      	cbz	r3, 8008122 <_close_r+0x1a>
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	2000071c 	.word	0x2000071c

08008128 <_fstat_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	4d07      	ldr	r5, [pc, #28]	; (8008148 <_fstat_r+0x20>)
 800812c:	2300      	movs	r3, #0
 800812e:	4604      	mov	r4, r0
 8008130:	4608      	mov	r0, r1
 8008132:	4611      	mov	r1, r2
 8008134:	602b      	str	r3, [r5, #0]
 8008136:	f7f9 ff70 	bl	800201a <_fstat>
 800813a:	1c43      	adds	r3, r0, #1
 800813c:	d102      	bne.n	8008144 <_fstat_r+0x1c>
 800813e:	682b      	ldr	r3, [r5, #0]
 8008140:	b103      	cbz	r3, 8008144 <_fstat_r+0x1c>
 8008142:	6023      	str	r3, [r4, #0]
 8008144:	bd38      	pop	{r3, r4, r5, pc}
 8008146:	bf00      	nop
 8008148:	2000071c 	.word	0x2000071c

0800814c <_isatty_r>:
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	4d06      	ldr	r5, [pc, #24]	; (8008168 <_isatty_r+0x1c>)
 8008150:	2300      	movs	r3, #0
 8008152:	4604      	mov	r4, r0
 8008154:	4608      	mov	r0, r1
 8008156:	602b      	str	r3, [r5, #0]
 8008158:	f7f9 ff6f 	bl	800203a <_isatty>
 800815c:	1c43      	adds	r3, r0, #1
 800815e:	d102      	bne.n	8008166 <_isatty_r+0x1a>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	b103      	cbz	r3, 8008166 <_isatty_r+0x1a>
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	bd38      	pop	{r3, r4, r5, pc}
 8008168:	2000071c 	.word	0x2000071c

0800816c <_lseek_r>:
 800816c:	b538      	push	{r3, r4, r5, lr}
 800816e:	4d07      	ldr	r5, [pc, #28]	; (800818c <_lseek_r+0x20>)
 8008170:	4604      	mov	r4, r0
 8008172:	4608      	mov	r0, r1
 8008174:	4611      	mov	r1, r2
 8008176:	2200      	movs	r2, #0
 8008178:	602a      	str	r2, [r5, #0]
 800817a:	461a      	mov	r2, r3
 800817c:	f7f9 ff68 	bl	8002050 <_lseek>
 8008180:	1c43      	adds	r3, r0, #1
 8008182:	d102      	bne.n	800818a <_lseek_r+0x1e>
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	b103      	cbz	r3, 800818a <_lseek_r+0x1e>
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	2000071c 	.word	0x2000071c

08008190 <_read_r>:
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	4d07      	ldr	r5, [pc, #28]	; (80081b0 <_read_r+0x20>)
 8008194:	4604      	mov	r4, r0
 8008196:	4608      	mov	r0, r1
 8008198:	4611      	mov	r1, r2
 800819a:	2200      	movs	r2, #0
 800819c:	602a      	str	r2, [r5, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	f7f9 fef6 	bl	8001f90 <_read>
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	d102      	bne.n	80081ae <_read_r+0x1e>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	b103      	cbz	r3, 80081ae <_read_r+0x1e>
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	bd38      	pop	{r3, r4, r5, pc}
 80081b0:	2000071c 	.word	0x2000071c

080081b4 <_init>:
 80081b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b6:	bf00      	nop
 80081b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ba:	bc08      	pop	{r3}
 80081bc:	469e      	mov	lr, r3
 80081be:	4770      	bx	lr

080081c0 <_fini>:
 80081c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c2:	bf00      	nop
 80081c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c6:	bc08      	pop	{r3}
 80081c8:	469e      	mov	lr, r3
 80081ca:	4770      	bx	lr
