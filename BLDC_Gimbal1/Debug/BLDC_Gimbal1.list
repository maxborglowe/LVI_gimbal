
BLDC_Gimbal1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008668  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  08008808  08008808  00018808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f00  08008f00  000221f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008f00  08008f00  00018f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f08  08008f08  000221f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f08  08008f08  00018f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f0c  08008f0c  00018f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000021f0  20000000  08008f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  200021f0  0800b100  000221f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025ac  0800b100  000225ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000221f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012652  00000000  00000000  00022220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002500  00000000  00000000  00034872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00036d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  00037a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c19  00000000  00000000  000385d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fefc  00000000  00000000  000501f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf70  00000000  00000000  000600ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec05d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004778  00000000  00000000  000ec0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200021f0 	.word	0x200021f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080087f0 	.word	0x080087f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200021f4 	.word	0x200021f4
 80001dc:	080087f0 	.word	0x080087f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <as5048a_read>:
/*
 * @brief Read 16-bit data at selected register.
 * @param SPI slave select pin.
 * @param AS5048A register
 */
uint16_t as5048a_read(uint16_t ss, uint16_t reg) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	460a      	mov	r2, r1
 8000f5a:	80fb      	strh	r3, [r7, #6]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	80bb      	strh	r3, [r7, #4]
	uint8_t data[2];

	uint16_t cmd = CMD_READ | reg;
 8000f60:	88bb      	ldrh	r3, [r7, #4]
 8000f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f66:	81fb      	strh	r3, [r7, #14]
	cmd |= ((uint16_t) calcEvenParity(cmd) << 15);
 8000f68:	89fb      	ldrh	r3, [r7, #14]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f8a4 	bl	80010b8 <calcEvenParity>
 8000f70:	4603      	mov	r3, r0
 8000f72:	03db      	lsls	r3, r3, #15
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	81fb      	strh	r3, [r7, #14]

	data[1] = cmd & 0xFF;
 8000f80:	89fb      	ldrh	r3, [r7, #14]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	737b      	strb	r3, [r7, #13]
	data[0] = (cmd >> 8) & 0xFF;
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_RESET);
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	2200      	movs	r2, #0
 8000f94:	4619      	mov	r1, r3
 8000f96:	4822      	ldr	r0, [pc, #136]	; (8001020 <as5048a_read+0xd0>)
 8000f98:	f002 f92c 	bl	80031f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 2, 0xFFFF);
 8000f9c:	f107 010c 	add.w	r1, r7, #12
 8000fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	481f      	ldr	r0, [pc, #124]	; (8001024 <as5048a_read+0xd4>)
 8000fa8:	f002 ff7f 	bl	8003eaa <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8000fac:	bf00      	nop
 8000fae:	481d      	ldr	r0, [pc, #116]	; (8001024 <as5048a_read+0xd4>)
 8000fb0:	f003 fb6a 	bl	8004688 <HAL_SPI_GetState>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d1f9      	bne.n	8000fae <as5048a_read+0x5e>
	}
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_SET);
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4817      	ldr	r0, [pc, #92]	; (8001020 <as5048a_read+0xd0>)
 8000fc2:	f002 f917 	bl	80031f4 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f001 fe86 	bl	8002cd8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_RESET);
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4813      	ldr	r0, [pc, #76]	; (8001020 <as5048a_read+0xd0>)
 8000fd4:	f002 f90e 	bl	80031f4 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 2, 0xFFFF);
 8000fd8:	f107 010c 	add.w	r1, r7, #12
 8000fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	4810      	ldr	r0, [pc, #64]	; (8001024 <as5048a_read+0xd4>)
 8000fe4:	f003 f89d 	bl	8004122 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY) {
 8000fe8:	bf00      	nop
 8000fea:	480e      	ldr	r0, [pc, #56]	; (8001024 <as5048a_read+0xd4>)
 8000fec:	f003 fb4c 	bl	8004688 <HAL_SPI_GetState>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d1f9      	bne.n	8000fea <as5048a_read+0x9a>
	}
	HAL_GPIO_WritePin(GPIOB, ss, GPIO_PIN_SET);
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4808      	ldr	r0, [pc, #32]	; (8001020 <as5048a_read+0xd0>)
 8000ffe:	f002 f8f9 	bl	80031f4 <HAL_GPIO_WritePin>

	return (((data[0] & 0xFF) << 8) | (data[1] & 0xFF)) & ~0xC000; //what
 8001002:	7b3b      	ldrb	r3, [r7, #12]
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	b21a      	sxth	r2, r3
 8001008:	7b7b      	ldrb	r3, [r7, #13]
 800100a:	b21b      	sxth	r3, r3
 800100c:	4313      	orrs	r3, r2
 800100e:	b21b      	sxth	r3, r3
 8001010:	b29b      	uxth	r3, r3
 8001012:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001016:	b29b      	uxth	r3, r3
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40020400 	.word	0x40020400
 8001024:	200024d0 	.word	0x200024d0

08001028 <as5048a_getRawRotation>:

/*
 * @brief Get raw rotation as 16-bit value.
 * @param SPI slave select pin.
 */
uint16_t as5048a_getRawRotation(uint16_t ss) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
	return as5048a_read(ss, REG_ANGLE);
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff89 	bl	8000f50 <as5048a_read>
 800103e:	4603      	mov	r3, r0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <as5048a_init>:
//}

/*
 * @brief Initialize the SPI by setting all encoder pins high.
 */
void as5048a_init() {
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_ENC_X, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2110      	movs	r1, #16
 8001050:	4808      	ldr	r0, [pc, #32]	; (8001074 <as5048a_init+0x2c>)
 8001052:	f002 f8cf 	bl	80031f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_ENC_Y, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2120      	movs	r1, #32
 800105a:	4806      	ldr	r0, [pc, #24]	; (8001074 <as5048a_init+0x2c>)
 800105c:	f002 f8ca 	bl	80031f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_ENC_Z, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2140      	movs	r1, #64	; 0x40
 8001064:	4803      	ldr	r0, [pc, #12]	; (8001074 <as5048a_init+0x2c>)
 8001066:	f002 f8c5 	bl	80031f4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800106a:	200a      	movs	r0, #10
 800106c:	f001 fe34 	bl	8002cd8 <HAL_Delay>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40020400 	.word	0x40020400

08001078 <as5048a_readToAngle>:

/*
 * @brief Convert raw data from getRawRotation to angles in degrees.
 * @param Raw angular data input.
 */
float as5048a_readToAngle(uint16_t angle) {
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	80fb      	strh	r3, [r7, #6]
	return 2 * ((float) angle * ((float) 360 / 16383) - 180);
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800108c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80010b0 <as5048a_readToAngle+0x38>
 8001090:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001094:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80010b4 <as5048a_readToAngle+0x3c>
 8001098:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800109c:	ee77 7aa7 	vadd.f32	s15, s15, s15
}
 80010a0:	eeb0 0a67 	vmov.f32	s0, s15
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	3cb402d0 	.word	0x3cb402d0
 80010b4:	43340000 	.word	0x43340000

080010b8 <calcEvenParity>:

uint8_t calcEvenParity(uint16_t value) {
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 16; i++) {
 80010c6:	2300      	movs	r3, #0
 80010c8:	73bb      	strb	r3, [r7, #14]
 80010ca:	e00d      	b.n	80010e8 <calcEvenParity+0x30>
		if (value & 0x1) {
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <calcEvenParity+0x24>
			cnt++;
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	3301      	adds	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
		}

		value >>= 1;
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	085b      	lsrs	r3, r3, #1
 80010e0:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 16; i++) {
 80010e2:	7bbb      	ldrb	r3, [r7, #14]
 80010e4:	3301      	adds	r3, #1
 80010e6:	73bb      	strb	r3, [r7, #14]
 80010e8:	7bbb      	ldrb	r3, [r7, #14]
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	d9ee      	bls.n	80010cc <calcEvenParity+0x14>
	}
	return cnt & 0x1;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <bmi270_spi_init>:
}

/*
 * @brief Initialization sequence for BMI270 as described on p. 20 in datasheet.
 */
void bmi270_spi_init() {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
	uint8_t chip_id = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOB, BMI270_CS, GPIO_PIN_SET);
 800110e:	2201      	movs	r2, #1
 8001110:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001114:	481e      	ldr	r0, [pc, #120]	; (8001190 <bmi270_spi_init+0x8c>)
 8001116:	f002 f86d 	bl	80031f4 <HAL_GPIO_WritePin>

	chip_id = bmi270_spi_read_8(0x00);
 800111a:	2000      	movs	r0, #0
 800111c:	f000 f956 	bl	80013cc <bmi270_spi_read_8>
 8001120:	4603      	mov	r3, r0
 8001122:	71fb      	strb	r3, [r7, #7]
	if (chip_id != 0x24) {
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	2b24      	cmp	r3, #36	; 0x24
 8001128:	d003      	beq.n	8001132 <bmi270_spi_init+0x2e>
		bmi270_print(0x0000);
 800112a:	2000      	movs	r0, #0
 800112c:	f000 fa00 	bl	8001530 <bmi270_print>
		bmi270_spi_write_8(REG_INIT_CTRL, 0x01);//complete config load INIT_CTRL = 0x01

		sprintf((char*) buff, "BMI270: initialization sequence complete\r\n");
		HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), 200);
	}
}
 8001130:	e02a      	b.n	8001188 <bmi270_spi_init+0x84>
	} else if (chip_id == 0x24) {
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b24      	cmp	r3, #36	; 0x24
 8001136:	d127      	bne.n	8001188 <bmi270_spi_init+0x84>
		bmi270_print(0xFF00);
 8001138:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 800113c:	f000 f9f8 	bl	8001530 <bmi270_print>
		bmi270_spi_write_8(REG_PWR_CONF, 0x00); //Disable PWR_CONF.adv_power_save
 8001140:	2100      	movs	r1, #0
 8001142:	207c      	movs	r0, #124	; 0x7c
 8001144:	f000 f8da 	bl	80012fc <bmi270_spi_write_8>
		HAL_Delay(1);								//wait for 450us
 8001148:	2001      	movs	r0, #1
 800114a:	f001 fdc5 	bl	8002cd8 <HAL_Delay>
		bmi270_spi_write_8(REG_INIT_CTRL, 0x00); //prepare config load INIT_CTRL = 0x00
 800114e:	2100      	movs	r1, #0
 8001150:	2059      	movs	r0, #89	; 0x59
 8001152:	f000 f8d3 	bl	80012fc <bmi270_spi_write_8>
		bmi270_spi_write_burst(REG_INIT_DATA, bmi270_config_file,
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <bmi270_spi_init+0x90>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	490e      	ldr	r1, [pc, #56]	; (8001198 <bmi270_spi_init+0x94>)
 800115e:	205e      	movs	r0, #94	; 0x5e
 8001160:	f000 f8fa 	bl	8001358 <bmi270_spi_write_burst>
		bmi270_spi_write_8(REG_INIT_CTRL, 0x01);//complete config load INIT_CTRL = 0x01
 8001164:	2101      	movs	r1, #1
 8001166:	2059      	movs	r0, #89	; 0x59
 8001168:	f000 f8c8 	bl	80012fc <bmi270_spi_write_8>
		sprintf((char*) buff, "BMI270: initialization sequence complete\r\n");
 800116c:	490b      	ldr	r1, [pc, #44]	; (800119c <bmi270_spi_init+0x98>)
 800116e:	480c      	ldr	r0, [pc, #48]	; (80011a0 <bmi270_spi_init+0x9c>)
 8001170:	f004 fb8c 	bl	800588c <siprintf>
		HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), 200);
 8001174:	480a      	ldr	r0, [pc, #40]	; (80011a0 <bmi270_spi_init+0x9c>)
 8001176:	f7ff f833 	bl	80001e0 <strlen>
 800117a:	4603      	mov	r3, r0
 800117c:	b29a      	uxth	r2, r3
 800117e:	23c8      	movs	r3, #200	; 0xc8
 8001180:	4907      	ldr	r1, [pc, #28]	; (80011a0 <bmi270_spi_init+0x9c>)
 8001182:	4808      	ldr	r0, [pc, #32]	; (80011a4 <bmi270_spi_init+0xa0>)
 8001184:	f003 fc0b 	bl	800499e <HAL_UART_Transmit>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40020400 	.word	0x40020400
 8001194:	20002000 	.word	0x20002000
 8001198:	20000000 	.word	0x20000000
 800119c:	08008818 	.word	0x08008818
 80011a0:	200022a8 	.word	0x200022a8
 80011a4:	2000252c 	.word	0x2000252c

080011a8 <bmi270_pwr_conf>:
 *@param Power mode:
 *			0 = low power mode
 *			1 = normal power mode
 *			2 = performance power mode
 */
void bmi270_pwr_conf(uint8_t pwr_mode) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	if (pwr_mode == BMI270_PWR_MODE_LOW) {
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10c      	bne.n	80011d2 <bmi270_pwr_conf+0x2a>
		bmi270_spi_write_8(REG_PWR_CTRL, 0x04); //enable acquisiton of acceleration data. disable the auxiliary interface, gyroscope data, temperature sensor data
 80011b8:	2104      	movs	r1, #4
 80011ba:	207d      	movs	r0, #125	; 0x7d
 80011bc:	f000 f89e 	bl	80012fc <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_ACC_CONF, 0x17); //disable the acc_filter_perf bit; set acc_bwp to 2 repetitions; set acc_odr to 50 Hz
 80011c0:	2117      	movs	r1, #23
 80011c2:	2040      	movs	r0, #64	; 0x40
 80011c4:	f000 f89a 	bl	80012fc <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_PWR_CONF, 0x03); //enable the adv_power_save bit; leave the fifo_self_wakeup enabled
 80011c8:	2103      	movs	r1, #3
 80011ca:	207c      	movs	r0, #124	; 0x7c
 80011cc:	f000 f896 	bl	80012fc <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_PWR_CTRL, 0x0E); //enable acquisiton of acceleration, gyroscope and temperature sensor data. disable the auxiliary interface.
		bmi270_spi_write_8(REG_ACC_CONF, 0xA8); //enable the acc_filter_perf bit; set acc_bwp to normal mode; set acc_odr to 100 Hz
		bmi270_spi_write_8(REG_GYR_CONF, 0xE9); //enable the gyr_filter_perf bit; enable gyr_noise_perf bit; set gyr_bwp to normal mode; set gyr_odr to 200 Hz
		bmi270_spi_write_8(REG_PWR_CONF, 0x02); //disable the adv_power_save bit; leave the fifo_self_wakeup enabled
	}
}
 80011d0:	e026      	b.n	8001220 <bmi270_pwr_conf+0x78>
	} else if (pwr_mode == BMI270_PWR_MODE_NORM) {
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d110      	bne.n	80011fa <bmi270_pwr_conf+0x52>
		bmi270_spi_write_8(REG_PWR_CTRL, 0x0E); //enable acquisiton of acceleration, gyroscope and temperature sensor data. disable the auxiliary interface.
 80011d8:	210e      	movs	r1, #14
 80011da:	207d      	movs	r0, #125	; 0x7d
 80011dc:	f000 f88e 	bl	80012fc <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_ACC_CONF, 0xA8); //enable the acc_filter_perf bit; set acc_bwp to normal mode; set acc_odr to 100 Hz
 80011e0:	21a8      	movs	r1, #168	; 0xa8
 80011e2:	2040      	movs	r0, #64	; 0x40
 80011e4:	f000 f88a 	bl	80012fc <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_GYR_CONF, 0xA9); //enable the gyr_filter_perf bit; set gyr_bwp to normal mode; set gyr_odr to 200 Hz
 80011e8:	21a9      	movs	r1, #169	; 0xa9
 80011ea:	2042      	movs	r0, #66	; 0x42
 80011ec:	f000 f886 	bl	80012fc <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_PWR_CONF, 0x02); //disable the adv_power_save bit; leave the fifo_self_wakeup enabled
 80011f0:	2102      	movs	r1, #2
 80011f2:	207c      	movs	r0, #124	; 0x7c
 80011f4:	f000 f882 	bl	80012fc <bmi270_spi_write_8>
}
 80011f8:	e012      	b.n	8001220 <bmi270_pwr_conf+0x78>
	} else if (pwr_mode == BMI270_PWR_MODE_PERF) {
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d10f      	bne.n	8001220 <bmi270_pwr_conf+0x78>
		bmi270_spi_write_8(REG_PWR_CTRL, 0x0E); //enable acquisiton of acceleration, gyroscope and temperature sensor data. disable the auxiliary interface.
 8001200:	210e      	movs	r1, #14
 8001202:	207d      	movs	r0, #125	; 0x7d
 8001204:	f000 f87a 	bl	80012fc <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_ACC_CONF, 0xA8); //enable the acc_filter_perf bit; set acc_bwp to normal mode; set acc_odr to 100 Hz
 8001208:	21a8      	movs	r1, #168	; 0xa8
 800120a:	2040      	movs	r0, #64	; 0x40
 800120c:	f000 f876 	bl	80012fc <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_GYR_CONF, 0xE9); //enable the gyr_filter_perf bit; enable gyr_noise_perf bit; set gyr_bwp to normal mode; set gyr_odr to 200 Hz
 8001210:	21e9      	movs	r1, #233	; 0xe9
 8001212:	2042      	movs	r0, #66	; 0x42
 8001214:	f000 f872 	bl	80012fc <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_PWR_CONF, 0x02); //disable the adv_power_save bit; leave the fifo_self_wakeup enabled
 8001218:	2102      	movs	r1, #2
 800121a:	207c      	movs	r0, #124	; 0x7c
 800121c:	f000 f86e 	bl	80012fc <bmi270_spi_write_8>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <bmi270_read_gyro>:

/*
 * @brief Read 2 bytes of gyroscope data in dps from the BMI270
 * @param Which axis to read
 */
uint16_t bmi270_read_gyro(uint8_t axis){
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	uint16_t data;

	data = bmi270_spi_read_8(2 * axis + REG_DATA_14);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	3309      	adds	r3, #9
 8001236:	b2db      	uxtb	r3, r3
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f000 f8c5 	bl	80013cc <bmi270_spi_read_8>
 8001242:	4603      	mov	r3, r0
 8001244:	81fb      	strh	r3, [r7, #14]
	data |= bmi270_spi_read_8(2 * axis + REG_DATA_14 + 1)<<8;
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	3309      	adds	r3, #9
 800124a:	b2db      	uxtb	r3, r3
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	b2db      	uxtb	r3, r3
 8001250:	3301      	adds	r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f8b9 	bl	80013cc <bmi270_spi_read_8>
 800125a:	4603      	mov	r3, r0
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	b21a      	sxth	r2, r3
 8001260:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001264:	4313      	orrs	r3, r2
 8001266:	b21b      	sxth	r3, r3
 8001268:	81fb      	strh	r3, [r7, #14]

	if(axis == BMI270_AXIS_X){
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d120      	bne.n	80012b2 <bmi270_read_gyro+0x8a>
		uint16_t data_z = (bmi270_spi_read_8(REG_DATA_19)<<8 | bmi270_spi_read_8(REG_DATA_18));
 8001270:	2017      	movs	r0, #23
 8001272:	f000 f8ab 	bl	80013cc <bmi270_spi_read_8>
 8001276:	4603      	mov	r3, r0
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21c      	sxth	r4, r3
 800127c:	2016      	movs	r0, #22
 800127e:	f000 f8a5 	bl	80013cc <bmi270_spi_read_8>
 8001282:	4603      	mov	r3, r0
 8001284:	b21b      	sxth	r3, r3
 8001286:	4323      	orrs	r3, r4
 8001288:	b21b      	sxth	r3, r3
 800128a:	81bb      	strh	r3, [r7, #12]
		uint8_t factor_zx = (bmi270_spi_read_8(REG_GYR_CAS) & 0x3F);
 800128c:	203c      	movs	r0, #60	; 0x3c
 800128e:	f000 f89d 	bl	80013cc <bmi270_spi_read_8>
 8001292:	4603      	mov	r3, r0
 8001294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001298:	72fb      	strb	r3, [r7, #11]
		data = data - factor_zx * data_z / factor_zx_div;
 800129a:	7afb      	ldrb	r3, [r7, #11]
 800129c:	89ba      	ldrh	r2, [r7, #12]
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	4a06      	ldr	r2, [pc, #24]	; (80012bc <bmi270_read_gyro+0x94>)
 80012a4:	8812      	ldrh	r2, [r2, #0]
 80012a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	89fa      	ldrh	r2, [r7, #14]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	81fb      	strh	r3, [r7, #14]
	}

	return data;
 80012b2:	89fb      	ldrh	r3, [r7, #14]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd90      	pop	{r4, r7, pc}
 80012bc:	20002002 	.word	0x20002002

080012c0 <bmi270_spi_init_check>:
}

/*
 * @brief Check the correct initialization status as described on p.21 in datasheet.
 */
void bmi270_spi_init_check() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
	HAL_Delay(200); //wait >140 ms
 80012c6:	20c8      	movs	r0, #200	; 0xc8
 80012c8:	f001 fd06 	bl	8002cd8 <HAL_Delay>
	uint16_t init_status = bmi270_spi_read_8(REG_INTERNAL_STATUS);
 80012cc:	2021      	movs	r0, #33	; 0x21
 80012ce:	f000 f87d 	bl	80013cc <bmi270_spi_read_8>
 80012d2:	4603      	mov	r3, r0
 80012d4:	80fb      	strh	r3, [r7, #6]
	init_status = init_status & 0x0F;
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	80fb      	strh	r3, [r7, #6]
	init_status = init_status | 0xC000;
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80012e4:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80012e8:	80fb      	strh	r3, [r7, #6]

	bmi270_print(init_status);
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f91f 	bl	8001530 <bmi270_print>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <bmi270_spi_write_8>:
/*
 * @brief Writes 8 bits of data to SDI -pin on BMI270.
 * @param Which BMI270-register to perform the read on
 * @param 8-bit data to be written into the selected register
 */
void bmi270_spi_write_8(uint8_t reg, uint8_t data) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	71fb      	strb	r3, [r7, #7]
 8001308:	4613      	mov	r3, r2
 800130a:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = reg | 0x00; //write command
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOB, BMI270_CS, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001316:	480e      	ldr	r0, [pc, #56]	; (8001350 <bmi270_spi_write_8+0x54>)
 8001318:	f001 ff6c 	bl	80031f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 800131c:	f107 010f 	add.w	r1, r7, #15
 8001320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001324:	2201      	movs	r2, #1
 8001326:	480b      	ldr	r0, [pc, #44]	; (8001354 <bmi270_spi_write_8+0x58>)
 8001328:	f002 fdbf 	bl	8003eaa <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 800132c:	1db9      	adds	r1, r7, #6
 800132e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001332:	2201      	movs	r2, #1
 8001334:	4807      	ldr	r0, [pc, #28]	; (8001354 <bmi270_spi_write_8+0x58>)
 8001336:	f002 fdb8 	bl	8003eaa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, BMI270_CS, GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001340:	4803      	ldr	r0, [pc, #12]	; (8001350 <bmi270_spi_write_8+0x54>)
 8001342:	f001 ff57 	bl	80031f4 <HAL_GPIO_WritePin>
}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40020400 	.word	0x40020400
 8001354:	200024d0 	.word	0x200024d0

08001358 <bmi270_spi_write_burst>:
 * @brief Writes burst of 8-bit array to SDI-pin on BMI270.
 * @param Which BMI270-register to perform the read on
 * @param Array to be written into the selected register
 * @param Size of passing array (pre-defined)
 */
void bmi270_spi_write_burst(uint8_t reg, uint8_t data[], uint16_t data_size) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	4613      	mov	r3, r2
 8001366:	80bb      	strh	r3, [r7, #4]
	uint8_t cmd = reg | 0x00; //write command
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	737b      	strb	r3, [r7, #13]
	uint16_t i;

	HAL_GPIO_WritePin(GPIOB, BMI270_CS, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001372:	4814      	ldr	r0, [pc, #80]	; (80013c4 <bmi270_spi_write_burst+0x6c>)
 8001374:	f001 ff3e 	bl	80031f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001378:	f107 010d 	add.w	r1, r7, #13
 800137c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001380:	2201      	movs	r2, #1
 8001382:	4811      	ldr	r0, [pc, #68]	; (80013c8 <bmi270_spi_write_burst+0x70>)
 8001384:	f002 fd91 	bl	8003eaa <HAL_SPI_Transmit>
	for (i = 0; i < data_size; i++) {
 8001388:	2300      	movs	r3, #0
 800138a:	81fb      	strh	r3, [r7, #14]
 800138c:	e00b      	b.n	80013a6 <bmi270_spi_write_burst+0x4e>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) &data[i], 1, 0xFFFF);
 800138e:	89fb      	ldrh	r3, [r7, #14]
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	18d1      	adds	r1, r2, r3
 8001394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001398:	2201      	movs	r2, #1
 800139a:	480b      	ldr	r0, [pc, #44]	; (80013c8 <bmi270_spi_write_burst+0x70>)
 800139c:	f002 fd85 	bl	8003eaa <HAL_SPI_Transmit>
	for (i = 0; i < data_size; i++) {
 80013a0:	89fb      	ldrh	r3, [r7, #14]
 80013a2:	3301      	adds	r3, #1
 80013a4:	81fb      	strh	r3, [r7, #14]
 80013a6:	89fa      	ldrh	r2, [r7, #14]
 80013a8:	88bb      	ldrh	r3, [r7, #4]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d3ef      	bcc.n	800138e <bmi270_spi_write_burst+0x36>
	}
	HAL_GPIO_WritePin(GPIOB, BMI270_CS, GPIO_PIN_SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b4:	4803      	ldr	r0, [pc, #12]	; (80013c4 <bmi270_spi_write_burst+0x6c>)
 80013b6:	f001 ff1d 	bl	80031f4 <HAL_GPIO_WritePin>
}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40020400 	.word	0x40020400
 80013c8:	200024d0 	.word	0x200024d0

080013cc <bmi270_spi_read_8>:

/*
 * @brief Read 8 bits of data from SDO-pin on BMI270.
 * @param Which BMI270-register to perform the read on
 */
uint8_t bmi270_spi_read_8(uint8_t reg) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy = 0x00;
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0x00;
 80013da:	2300      	movs	r3, #0
 80013dc:	73bb      	strb	r3, [r7, #14]
	uint8_t cmd = reg | 0x80;
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(GPIOB, BMI270_CS, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ee:	4813      	ldr	r0, [pc, #76]	; (800143c <bmi270_spi_read_8+0x70>)
 80013f0:	f001 ff00 	bl	80031f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80013f4:	f107 010d 	add.w	r1, r7, #13
 80013f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013fc:	2201      	movs	r2, #1
 80013fe:	4810      	ldr	r0, [pc, #64]	; (8001440 <bmi270_spi_read_8+0x74>)
 8001400:	f002 fd53 	bl	8003eaa <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 8001404:	f107 010f 	add.w	r1, r7, #15
 8001408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800140c:	2201      	movs	r2, #1
 800140e:	480c      	ldr	r0, [pc, #48]	; (8001440 <bmi270_spi_read_8+0x74>)
 8001410:	f002 fe87 	bl	8004122 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001414:	f107 010e 	add.w	r1, r7, #14
 8001418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800141c:	2201      	movs	r2, #1
 800141e:	4808      	ldr	r0, [pc, #32]	; (8001440 <bmi270_spi_read_8+0x74>)
 8001420:	f002 fe7f 	bl	8004122 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, BMI270_CS, GPIO_PIN_SET);
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800142a:	4804      	ldr	r0, [pc, #16]	; (800143c <bmi270_spi_read_8+0x70>)
 800142c:	f001 fee2 	bl	80031f4 <HAL_GPIO_WritePin>

	return data;
 8001430:	7bbb      	ldrb	r3, [r7, #14]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40020400 	.word	0x40020400
 8001440:	200024d0 	.word	0x200024d0

08001444 <bmi270_getGyroRange>:

float bmi270_getGyroRange(){
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
	uint8_t gyr_range = bmi270_spi_read_8(REG_GYR_RANGE);
 800144a:	2043      	movs	r0, #67	; 0x43
 800144c:	f7ff ffbe 	bl	80013cc <bmi270_spi_read_8>
 8001450:	4603      	mov	r3, r0
 8001452:	71fb      	strb	r3, [r7, #7]
	switch(gyr_range){
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	2b04      	cmp	r3, #4
 8001458:	d816      	bhi.n	8001488 <bmi270_getGyroRange+0x44>
 800145a:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <bmi270_getGyroRange+0x1c>)
 800145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001460:	08001475 	.word	0x08001475
 8001464:	08001479 	.word	0x08001479
 8001468:	0800147d 	.word	0x0800147d
 800146c:	08001481 	.word	0x08001481
 8001470:	08001485 	.word	0x08001485
	case range_2000:
		return BMI270_GYRO_2000_DPS;
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <bmi270_getGyroRange+0x54>)
 8001476:	e008      	b.n	800148a <bmi270_getGyroRange+0x46>
	case range_1000:
		return BMI270_GYRO_1000_DPS;
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <bmi270_getGyroRange+0x58>)
 800147a:	e006      	b.n	800148a <bmi270_getGyroRange+0x46>
	case range_500:
		return BMI270_GYRO_500_DPS;
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <bmi270_getGyroRange+0x5c>)
 800147e:	e004      	b.n	800148a <bmi270_getGyroRange+0x46>
	case range_250:
		return BMI270_GYRO_250_DPS;
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <bmi270_getGyroRange+0x60>)
 8001482:	e002      	b.n	800148a <bmi270_getGyroRange+0x46>
	case range_125:
		return BMI270_GYRO_125_DPS;
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <bmi270_getGyroRange+0x64>)
 8001486:	e000      	b.n	800148a <bmi270_getGyroRange+0x46>
	}
}
 8001488:	e001      	b.n	800148e <bmi270_getGyroRange+0x4a>
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eeb0 0a67 	vmov.f32	s0, s15
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	41833333 	.word	0x41833333
 800149c:	42033333 	.word	0x42033333
 80014a0:	42833333 	.word	0x42833333
 80014a4:	43033333 	.word	0x43033333
 80014a8:	43833333 	.word	0x43833333
 80014ac:	00000000 	.word	0x00000000

080014b0 <bmi270_lsb_to_dps>:

/*!
 * @brief This function converts lsb to degree per second for 16 bit gyro at
 * range 125, 250, 500, 1000 or 2000dps.
 */
float bmi270_lsb_to_dps(int16_t val, float dps){
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	ed87 0a00 	vstr	s0, [r7]
 80014bc:	80fb      	strh	r3, [r7, #6]
	float half_scale = ((float)(1 << 16) / 2.0f);
 80014be:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 80014c2:	60fb      	str	r3, [r7, #12]
	return (dps / ((half_scale) + BMI270_GYRO_2000_DPS)) * (val);
 80014c4:	6838      	ldr	r0, [r7, #0]
 80014c6:	f7ff f847 	bl	8000558 <__aeabi_f2d>
 80014ca:	4604      	mov	r4, r0
 80014cc:	460d      	mov	r5, r1
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f7ff f842 	bl	8000558 <__aeabi_f2d>
 80014d4:	a314      	add	r3, pc, #80	; (adr r3, 8001528 <bmi270_lsb_to_dps+0x78>)
 80014d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014da:	f7fe fedf 	bl	800029c <__adddf3>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4620      	mov	r0, r4
 80014e4:	4629      	mov	r1, r5
 80014e6:	f7ff f9b9 	bl	800085c <__aeabi_ddiv>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4614      	mov	r4, r2
 80014f0:	461d      	mov	r5, r3
 80014f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff f81c 	bl	8000534 <__aeabi_i2d>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4620      	mov	r0, r4
 8001502:	4629      	mov	r1, r5
 8001504:	f7ff f880 	bl	8000608 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff fb52 	bl	8000bb8 <__aeabi_d2f>
 8001514:	4603      	mov	r3, r0
 8001516:	ee07 3a90 	vmov	s15, r3
}
 800151a:	eeb0 0a67 	vmov.f32	s0, s15
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bdb0      	pop	{r4, r5, r7, pc}
 8001524:	f3af 8000 	nop.w
 8001528:	66666666 	.word	0x66666666
 800152c:	40306666 	.word	0x40306666

08001530 <bmi270_print>:

void bmi270_print(uint16_t code) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	80fb      	strh	r3, [r7, #6]
	if ((uint16_t*) code != NULL) {
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d009      	beq.n	8001554 <bmi270_print+0x24>
		sprintf((char*) buff, "BMI270: %s\r\n", bmi270_codeToStr(code));
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f81a 	bl	800157c <bmi270_codeToStr>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4908      	ldr	r1, [pc, #32]	; (8001570 <bmi270_print+0x40>)
 800154e:	4809      	ldr	r0, [pc, #36]	; (8001574 <bmi270_print+0x44>)
 8001550:	f004 f99c 	bl	800588c <siprintf>
	}

	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), 200);
 8001554:	4807      	ldr	r0, [pc, #28]	; (8001574 <bmi270_print+0x44>)
 8001556:	f7fe fe43 	bl	80001e0 <strlen>
 800155a:	4603      	mov	r3, r0
 800155c:	b29a      	uxth	r2, r3
 800155e:	23c8      	movs	r3, #200	; 0xc8
 8001560:	4904      	ldr	r1, [pc, #16]	; (8001574 <bmi270_print+0x44>)
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <bmi270_print+0x48>)
 8001564:	f003 fa1b 	bl	800499e <HAL_UART_Transmit>
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	08008844 	.word	0x08008844
 8001574:	200022a8 	.word	0x200022a8
 8001578:	2000252c 	.word	0x2000252c

0800157c <bmi270_codeToStr>:

const char* bmi270_codeToStr(uint16_t code) {
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	80fb      	strh	r3, [r7, #6]

	//error codes
	switch (code) {
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	f64f 7201 	movw	r2, #65281	; 0xff01
 800158c:	4293      	cmp	r3, r2
 800158e:	d049      	beq.n	8001624 <bmi270_codeToStr+0xa8>
 8001590:	f64f 7201 	movw	r2, #65281	; 0xff01
 8001594:	4293      	cmp	r3, r2
 8001596:	dc47      	bgt.n	8001628 <bmi270_codeToStr+0xac>
 8001598:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800159c:	d040      	beq.n	8001620 <bmi270_codeToStr+0xa4>
 800159e:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80015a2:	dc41      	bgt.n	8001628 <bmi270_codeToStr+0xac>
 80015a4:	f24c 0207 	movw	r2, #49159	; 0xc007
 80015a8:	4293      	cmp	r3, r2
 80015aa:	dc3d      	bgt.n	8001628 <bmi270_codeToStr+0xac>
 80015ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80015b0:	da08      	bge.n	80015c4 <bmi270_codeToStr+0x48>
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d022      	beq.n	80015fc <bmi270_codeToStr+0x80>
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	dc36      	bgt.n	8001628 <bmi270_codeToStr+0xac>
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d01a      	beq.n	80015f4 <bmi270_codeToStr+0x78>
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d01a      	beq.n	80015f8 <bmi270_codeToStr+0x7c>
 80015c2:	e031      	b.n	8001628 <bmi270_codeToStr+0xac>
 80015c4:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
 80015c8:	2b07      	cmp	r3, #7
 80015ca:	d82d      	bhi.n	8001628 <bmi270_codeToStr+0xac>
 80015cc:	a201      	add	r2, pc, #4	; (adr r2, 80015d4 <bmi270_codeToStr+0x58>)
 80015ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d2:	bf00      	nop
 80015d4:	08001601 	.word	0x08001601
 80015d8:	08001605 	.word	0x08001605
 80015dc:	08001609 	.word	0x08001609
 80015e0:	0800160d 	.word	0x0800160d
 80015e4:	08001611 	.word	0x08001611
 80015e8:	08001615 	.word	0x08001615
 80015ec:	08001619 	.word	0x08001619
 80015f0:	0800161d 	.word	0x0800161d
	case 0x0000:
		return "CHIP_ID error";
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <bmi270_codeToStr+0xb8>)
 80015f6:	e017      	b.n	8001628 <bmi270_codeToStr+0xac>
	case 0x0001:
		return "Initialization error";
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <bmi270_codeToStr+0xbc>)
 80015fa:	e015      	b.n	8001628 <bmi270_codeToStr+0xac>
	case 0x0002:
		return "";
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <bmi270_codeToStr+0xc0>)
 80015fe:	e013      	b.n	8001628 <bmi270_codeToStr+0xac>

		//REG_INTERNAL_STATUS codes
	case 0xc000:
		return "REG_INTERNAL_STATUS: not_init";
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <bmi270_codeToStr+0xc4>)
 8001602:	e011      	b.n	8001628 <bmi270_codeToStr+0xac>
	case 0xc001:
		return "REG_INTERNAL_STATUS: init_ok";
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <bmi270_codeToStr+0xc8>)
 8001606:	e00f      	b.n	8001628 <bmi270_codeToStr+0xac>
	case 0xc002:
		return "REG_INTERNAL_STATUS: init_err";
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <bmi270_codeToStr+0xcc>)
 800160a:	e00d      	b.n	8001628 <bmi270_codeToStr+0xac>
	case 0xc003:
		return "REG_INTERNAL_STATUS: drv_error";
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <bmi270_codeToStr+0xd0>)
 800160e:	e00b      	b.n	8001628 <bmi270_codeToStr+0xac>
	case 0xc004:
		return "REG_INTERNAL_STATUS: sns_stop";
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <bmi270_codeToStr+0xd4>)
 8001612:	e009      	b.n	8001628 <bmi270_codeToStr+0xac>
	case 0xc005:
		return "REG_INTERNAL_STATUS: nvm_error";
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <bmi270_codeToStr+0xd8>)
 8001616:	e007      	b.n	8001628 <bmi270_codeToStr+0xac>
	case 0xc006:
		return "REG_INTERNAL_STATUS: start_up_error";
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <bmi270_codeToStr+0xdc>)
 800161a:	e005      	b.n	8001628 <bmi270_codeToStr+0xac>
	case 0xc007:
		return "REG_INTERNAL_STATUS: compat_error";
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <bmi270_codeToStr+0xe0>)
 800161e:	e003      	b.n	8001628 <bmi270_codeToStr+0xac>

		//other codes
	case 0xFF00:
		return "CHIP_ID == 0x24";
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <bmi270_codeToStr+0xe4>)
 8001622:	e001      	b.n	8001628 <bmi270_codeToStr+0xac>
	case 0xFF01:
		return "Initialization sequence OK!";
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <bmi270_codeToStr+0xe8>)
 8001626:	e7ff      	b.n	8001628 <bmi270_codeToStr+0xac>
	}
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	08008854 	.word	0x08008854
 8001638:	08008864 	.word	0x08008864
 800163c:	0800887c 	.word	0x0800887c
 8001640:	08008880 	.word	0x08008880
 8001644:	080088a0 	.word	0x080088a0
 8001648:	080088c0 	.word	0x080088c0
 800164c:	080088e0 	.word	0x080088e0
 8001650:	08008900 	.word	0x08008900
 8001654:	08008920 	.word	0x08008920
 8001658:	08008940 	.word	0x08008940
 800165c:	08008964 	.word	0x08008964
 8001660:	08008988 	.word	0x08008988
 8001664:	08008998 	.word	0x08008998

08001668 <setSampleFreq>:
#include "Quaternions.h"

/*
 * @brief Set the sample frequency based on the while loop cycle time (in milliseconds)
 */
void setSampleFreq() {
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	sampleFreq = 1 / (0.001 * while_t);
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <setSampleFreq+0x48>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff71 	bl	8000558 <__aeabi_f2d>
 8001676:	a30c      	add	r3, pc, #48	; (adr r3, 80016a8 <setSampleFreq+0x40>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7fe ffc4 	bl	8000608 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	f04f 0000 	mov.w	r0, #0
 8001688:	490a      	ldr	r1, [pc, #40]	; (80016b4 <setSampleFreq+0x4c>)
 800168a:	f7ff f8e7 	bl	800085c <__aeabi_ddiv>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff fa8f 	bl	8000bb8 <__aeabi_d2f>
 800169a:	4603      	mov	r3, r0
 800169c:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <setSampleFreq+0x50>)
 800169e:	6013      	str	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	f3af 8000 	nop.w
 80016a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80016ac:	3f50624d 	.word	0x3f50624d
 80016b0:	2000200c 	.word	0x2000200c
 80016b4:	3ff00000 	.word	0x3ff00000
 80016b8:	20002228 	.word	0x20002228

080016bc <filterUpdate>:
 * @param Current angular rate on z-axis from gyroscope
 * @param Current acceleration on x-axis from accelerometer
 * @param Current acceleration on y-axis from accelerometer
 * @param Current acceleration on z-axis from accelerometer
 */
void filterUpdate(float gx, float gy, float gz, float ax, float ay, float az) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b09c      	sub	sp, #112	; 0x70
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	ed87 0a05 	vstr	s0, [r7, #20]
 80016c6:	edc7 0a04 	vstr	s1, [r7, #16]
 80016ca:	ed87 1a03 	vstr	s2, [r7, #12]
 80016ce:	edc7 1a02 	vstr	s3, [r7, #8]
 80016d2:	ed87 2a01 	vstr	s4, [r7, #4]
 80016d6:	edc7 2a00 	vstr	s5, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1,
			q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80016da:	4bee      	ldr	r3, [pc, #952]	; (8001a94 <filterUpdate+0x3d8>)
 80016dc:	edd3 7a00 	vldr	s15, [r3]
 80016e0:	eeb1 7a67 	vneg.f32	s14, s15
 80016e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ec:	4bea      	ldr	r3, [pc, #936]	; (8001a98 <filterUpdate+0x3dc>)
 80016ee:	edd3 6a00 	vldr	s13, [r3]
 80016f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80016f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016fe:	4be7      	ldr	r3, [pc, #924]	; (8001a9c <filterUpdate+0x3e0>)
 8001700:	edd3 6a00 	vldr	s13, [r3]
 8001704:	edd7 7a03 	vldr	s15, [r7, #12]
 8001708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800170c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001710:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001718:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800171c:	4be0      	ldr	r3, [pc, #896]	; (8001aa0 <filterUpdate+0x3e4>)
 800171e:	ed93 7a00 	vldr	s14, [r3]
 8001722:	edd7 7a05 	vldr	s15, [r7, #20]
 8001726:	ee27 7a27 	vmul.f32	s14, s14, s15
 800172a:	4bdb      	ldr	r3, [pc, #876]	; (8001a98 <filterUpdate+0x3dc>)
 800172c:	edd3 6a00 	vldr	s13, [r3]
 8001730:	edd7 7a03 	vldr	s15, [r7, #12]
 8001734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001738:	ee37 7a27 	vadd.f32	s14, s14, s15
 800173c:	4bd7      	ldr	r3, [pc, #860]	; (8001a9c <filterUpdate+0x3e0>)
 800173e:	edd3 6a00 	vldr	s13, [r3]
 8001742:	edd7 7a04 	vldr	s15, [r7, #16]
 8001746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001756:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800175a:	4bd1      	ldr	r3, [pc, #836]	; (8001aa0 <filterUpdate+0x3e4>)
 800175c:	ed93 7a00 	vldr	s14, [r3]
 8001760:	edd7 7a04 	vldr	s15, [r7, #16]
 8001764:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001768:	4bca      	ldr	r3, [pc, #808]	; (8001a94 <filterUpdate+0x3d8>)
 800176a:	edd3 6a00 	vldr	s13, [r3]
 800176e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001772:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001776:	ee37 7a67 	vsub.f32	s14, s14, s15
 800177a:	4bc8      	ldr	r3, [pc, #800]	; (8001a9c <filterUpdate+0x3e0>)
 800177c:	edd3 6a00 	vldr	s13, [r3]
 8001780:	edd7 7a05 	vldr	s15, [r7, #20]
 8001784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001790:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001794:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001798:	4bc1      	ldr	r3, [pc, #772]	; (8001aa0 <filterUpdate+0x3e4>)
 800179a:	ed93 7a00 	vldr	s14, [r3]
 800179e:	edd7 7a03 	vldr	s15, [r7, #12]
 80017a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017a6:	4bbb      	ldr	r3, [pc, #748]	; (8001a94 <filterUpdate+0x3d8>)
 80017a8:	edd3 6a00 	vldr	s13, [r3]
 80017ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80017b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017b8:	4bb7      	ldr	r3, [pc, #732]	; (8001a98 <filterUpdate+0x3dc>)
 80017ba:	edd3 6a00 	vldr	s13, [r3]
 80017be:	edd7 7a05 	vldr	s15, [r7, #20]
 80017c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80017d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80017da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	d10e      	bne.n	8001802 <filterUpdate+0x146>
 80017e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	d107      	bne.n	8001802 <filterUpdate+0x146>
 80017f2:	edd7 7a00 	vldr	s15, [r7]
 80017f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fe:	f000 81e1 	beq.w	8001bc4 <filterUpdate+0x508>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001802:	edd7 7a02 	vldr	s15, [r7, #8]
 8001806:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800180a:	edd7 7a01 	vldr	s15, [r7, #4]
 800180e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001812:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001816:	edd7 7a00 	vldr	s15, [r7]
 800181a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800181e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001822:	eeb0 0a67 	vmov.f32	s0, s15
 8001826:	f000 fb5b 	bl	8001ee0 <invSqrt>
 800182a:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 800182e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001832:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800183a:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 800183e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001842:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800184a:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;
 800184e:	ed97 7a00 	vldr	s14, [r7]
 8001852:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185a:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800185e:	4b90      	ldr	r3, [pc, #576]	; (8001aa0 <filterUpdate+0x3e4>)
 8001860:	edd3 7a00 	vldr	s15, [r3]
 8001864:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001868:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 800186c:	4b89      	ldr	r3, [pc, #548]	; (8001a94 <filterUpdate+0x3d8>)
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001876:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 800187a:	4b87      	ldr	r3, [pc, #540]	; (8001a98 <filterUpdate+0x3dc>)
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001884:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8001888:	4b84      	ldr	r3, [pc, #528]	; (8001a9c <filterUpdate+0x3e0>)
 800188a:	edd3 7a00 	vldr	s15, [r3]
 800188e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001892:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 8001896:	4b82      	ldr	r3, [pc, #520]	; (8001aa0 <filterUpdate+0x3e4>)
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80018a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 80018a8:	4b7a      	ldr	r3, [pc, #488]	; (8001a94 <filterUpdate+0x3d8>)
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80018b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 80018ba:	4b77      	ldr	r3, [pc, #476]	; (8001a98 <filterUpdate+0x3dc>)
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80018c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 80018cc:	4b71      	ldr	r3, [pc, #452]	; (8001a94 <filterUpdate+0x3d8>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80018d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018da:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 80018de:	4b6e      	ldr	r3, [pc, #440]	; (8001a98 <filterUpdate+0x3dc>)
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80018e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ec:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 80018f0:	4b6b      	ldr	r3, [pc, #428]	; (8001aa0 <filterUpdate+0x3e4>)
 80018f2:	ed93 7a00 	vldr	s14, [r3]
 80018f6:	4b6a      	ldr	r3, [pc, #424]	; (8001aa0 <filterUpdate+0x3e4>)
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001900:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8001904:	4b63      	ldr	r3, [pc, #396]	; (8001a94 <filterUpdate+0x3d8>)
 8001906:	ed93 7a00 	vldr	s14, [r3]
 800190a:	4b62      	ldr	r3, [pc, #392]	; (8001a94 <filterUpdate+0x3d8>)
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8001918:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <filterUpdate+0x3dc>)
 800191a:	ed93 7a00 	vldr	s14, [r3]
 800191e:	4b5e      	ldr	r3, [pc, #376]	; (8001a98 <filterUpdate+0x3dc>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001928:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 800192c:	4b5b      	ldr	r3, [pc, #364]	; (8001a9c <filterUpdate+0x3e0>)
 800192e:	ed93 7a00 	vldr	s14, [r3]
 8001932:	4b5a      	ldr	r3, [pc, #360]	; (8001a9c <filterUpdate+0x3e0>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8001940:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001944:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001948:	ee27 7a27 	vmul.f32	s14, s14, s15
 800194c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001950:	edd7 7a02 	vldr	s15, [r7, #8]
 8001954:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001958:	ee37 7a27 	vadd.f32	s14, s14, s15
 800195c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001960:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001968:	ee37 7a27 	vadd.f32	s14, s14, s15
 800196c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001970:	edd7 7a01 	vldr	s15, [r7, #4]
 8001974:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1
 8001980:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001984:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001988:	ee27 7a27 	vmul.f32	s14, s14, s15
 800198c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001990:	edd7 7a02 	vldr	s15, [r7, #8]
 8001994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001998:	ee37 7a67 	vsub.f32	s14, s14, s15
 800199c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80019a0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80019a4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80019a8:	4b3a      	ldr	r3, [pc, #232]	; (8001a94 <filterUpdate+0x3d8>)
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019b6:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80019ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80019be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019c6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019ca:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80019ce:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80019d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019de:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80019e2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ee:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80019f2:	edd7 7a00 	vldr	s15, [r7]
 80019f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1
 80019fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fe:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
 8001a02:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a06:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001a0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a0e:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <filterUpdate+0x3dc>)
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a18:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001a1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a28:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001a2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a38:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001a3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a48:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a4c:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8001a50:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001a54:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a60:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001a64:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a70:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001a74:	edd7 7a00 	vldr	s15, [r7]
 8001a78:	ee66 7aa7 	vmul.f32	s15, s13, s15
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
 8001a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a80:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8001a84:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a88:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001a8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a90:	e008      	b.n	8001aa4 <filterUpdate+0x3e8>
 8001a92:	bf00      	nop
 8001a94:	2000220c 	.word	0x2000220c
 8001a98:	20002210 	.word	0x20002210
 8001a9c:	20002214 	.word	0x20002214
 8001aa0:	20002004 	.word	0x20002004
 8001aa4:	4b99      	ldr	r3, [pc, #612]	; (8001d0c <filterUpdate+0x650>)
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aae:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001ab2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001abe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ac2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001ac6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001aca:	4b90      	ldr	r3, [pc, #576]	; (8001d0c <filterUpdate+0x650>)
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ad8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001adc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ae0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae8:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001aec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001af0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001af4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001af8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001afc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b00:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b18:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1c:	f000 f9e0 	bl	8001ee0 <invSqrt>
 8001b20:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 8001b24:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001b28:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b30:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 8001b34:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b38:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b40:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 8001b44:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b48:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b50:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8001b54:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b58:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b60:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 8001b64:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b68:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001d10 <filterUpdate+0x654>
 8001b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b70:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b78:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8001b7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b80:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001d10 <filterUpdate+0x654>
 8001b84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b88:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b90:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8001b94:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b98:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001d10 <filterUpdate+0x654>
 8001b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ba0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 8001bac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bb0:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001d10 <filterUpdate+0x654>
 8001bb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bb8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001bc4:	4b53      	ldr	r3, [pc, #332]	; (8001d14 <filterUpdate+0x658>)
 8001bc6:	edd3 7a00 	vldr	s15, [r3]
 8001bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bd2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bda:	4b4f      	ldr	r3, [pc, #316]	; (8001d18 <filterUpdate+0x65c>)
 8001bdc:	edd3 7a00 	vldr	s15, [r3]
 8001be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be4:	4b4c      	ldr	r3, [pc, #304]	; (8001d18 <filterUpdate+0x65c>)
 8001be6:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001bea:	4b4a      	ldr	r3, [pc, #296]	; (8001d14 <filterUpdate+0x658>)
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bf8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c00:	4b46      	ldr	r3, [pc, #280]	; (8001d1c <filterUpdate+0x660>)
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0a:	4b44      	ldr	r3, [pc, #272]	; (8001d1c <filterUpdate+0x660>)
 8001c0c:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001c10:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <filterUpdate+0x658>)
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c1e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001c22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c26:	4b3e      	ldr	r3, [pc, #248]	; (8001d20 <filterUpdate+0x664>)
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c30:	4b3b      	ldr	r3, [pc, #236]	; (8001d20 <filterUpdate+0x664>)
 8001c32:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001c36:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <filterUpdate+0x658>)
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c44:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001c48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c4c:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <filterUpdate+0x650>)
 8001c4e:	edd3 7a00 	vldr	s15, [r3]
 8001c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c56:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <filterUpdate+0x650>)
 8001c58:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <filterUpdate+0x65c>)
 8001c5e:	ed93 7a00 	vldr	s14, [r3]
 8001c62:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <filterUpdate+0x65c>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <filterUpdate+0x660>)
 8001c6e:	edd3 6a00 	vldr	s13, [r3]
 8001c72:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <filterUpdate+0x660>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c80:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <filterUpdate+0x664>)
 8001c82:	edd3 6a00 	vldr	s13, [r3]
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <filterUpdate+0x664>)
 8001c88:	edd3 7a00 	vldr	s15, [r3]
 8001c8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c94:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <filterUpdate+0x650>)
 8001c96:	edd3 6a00 	vldr	s13, [r3]
 8001c9a:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <filterUpdate+0x650>)
 8001c9c:	edd3 7a00 	vldr	s15, [r3]
 8001ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cac:	f000 f918 	bl	8001ee0 <invSqrt>
 8001cb0:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <filterUpdate+0x65c>)
 8001cb6:	ed93 7a00 	vldr	s14, [r3]
 8001cba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <filterUpdate+0x65c>)
 8001cc4:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <filterUpdate+0x660>)
 8001cca:	ed93 7a00 	vldr	s14, [r3]
 8001cce:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <filterUpdate+0x660>)
 8001cd8:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <filterUpdate+0x664>)
 8001cde:	ed93 7a00 	vldr	s14, [r3]
 8001ce2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <filterUpdate+0x664>)
 8001cec:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <filterUpdate+0x650>)
 8001cf2:	ed93 7a00 	vldr	s14, [r3]
 8001cf6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cfe:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <filterUpdate+0x650>)
 8001d00:	edc3 7a00 	vstr	s15, [r3]
}
 8001d04:	bf00      	nop
 8001d06:	3770      	adds	r7, #112	; 0x70
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20002214 	.word	0x20002214
 8001d10:	3dcccccd 	.word	0x3dcccccd
 8001d14:	20002228 	.word	0x20002228
 8001d18:	20002004 	.word	0x20002004
 8001d1c:	2000220c 	.word	0x2000220c
 8001d20:	20002210 	.word	0x20002210
 8001d24:	00000000 	.word	0x00000000

08001d28 <ToEulerAngles>:
 * @param Real component
 * @param i-component
 * @param j-component
 * @param k-component
 */
struct EulerAngles ToEulerAngles(float _q0, float _q1, float _q2, float _q3) {
 8001d28:	b5b0      	push	{r4, r5, r7, lr}
 8001d2a:	b090      	sub	sp, #64	; 0x40
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	ed87 0a07 	vstr	s0, [r7, #28]
 8001d32:	edc7 0a06 	vstr	s1, [r7, #24]
 8001d36:	ed87 1a05 	vstr	s2, [r7, #20]
 8001d3a:	edc7 1a04 	vstr	s3, [r7, #16]
	struct EulerAngles angles;

	// roll (x-axis rotation)
	angles.x = atan2(2 * (_q0 * _q1 + _q2 * _q3),
 8001d3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d42:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d4a:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d5e:	ee17 0a90 	vmov	r0, s15
 8001d62:	f7fe fbf9 	bl	8000558 <__aeabi_f2d>
 8001d66:	4604      	mov	r4, r0
 8001d68:	460d      	mov	r5, r1
			1 - 2 * (_q1 * _q1 + _q2 * _q2));
 8001d6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d6e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d72:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d76:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d86:	ee77 7a67 	vsub.f32	s15, s14, s15
	angles.x = atan2(2 * (_q0 * _q1 + _q2 * _q3),
 8001d8a:	ee17 0a90 	vmov	r0, s15
 8001d8e:	f7fe fbe3 	bl	8000558 <__aeabi_f2d>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	ec43 2b11 	vmov	d1, r2, r3
 8001d9a:	ec45 4b10 	vmov	d0, r4, r5
 8001d9e:	f005 ffdb 	bl	8007d58 <atan2>
 8001da2:	ec53 2b10 	vmov	r2, r3, d0
 8001da6:	4610      	mov	r0, r2
 8001da8:	4619      	mov	r1, r3
 8001daa:	f7fe ff05 	bl	8000bb8 <__aeabi_d2f>
 8001dae:	4603      	mov	r3, r0
 8001db0:	623b      	str	r3, [r7, #32]

	// pitch (y-axis rotation)
	double sinp = 2 * (_q0 * _q2 - _q3 * _q1);
 8001db2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001db6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dbe:	edd7 6a04 	vldr	s13, [r7, #16]
 8001dc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001dd2:	ee17 0a90 	vmov	r0, s15
 8001dd6:	f7fe fbbf 	bl	8000558 <__aeabi_f2d>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	if (abs((int) sinp) >= 1)
 8001de2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001de6:	f7fe febf 	bl	8000b68 <__aeabi_d2iz>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bfb8      	it	lt
 8001df0:	425b      	neglt	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	dd0e      	ble.n	8001e14 <ToEulerAngles+0xec>
		angles.y = copysign(M_PI / 2, sinp); // use 90 degrees if out of range
 8001df6:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 8001dfa:	ed9f 0b37 	vldr	d0, [pc, #220]	; 8001ed8 <ToEulerAngles+0x1b0>
 8001dfe:	f003 fd33 	bl	8005868 <copysign>
 8001e02:	ec53 2b10 	vmov	r2, r3, d0
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f7fe fed5 	bl	8000bb8 <__aeabi_d2f>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
 8001e12:	e00b      	b.n	8001e2c <ToEulerAngles+0x104>
	else
		angles.y = asin(sinp);
 8001e14:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001e18:	f005 ff64 	bl	8007ce4 <asin>
 8001e1c:	ec53 2b10 	vmov	r2, r3, d0
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7fe fec8 	bl	8000bb8 <__aeabi_d2f>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24

	// yaw (z-axis rotation)
	angles.z = atan2(2 * (_q0 * _q3 + _q1 * _q2),
 8001e2c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e30:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e38:	edd7 6a06 	vldr	s13, [r7, #24]
 8001e3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e4c:	ee17 0a90 	vmov	r0, s15
 8001e50:	f7fe fb82 	bl	8000558 <__aeabi_f2d>
 8001e54:	4604      	mov	r4, r0
 8001e56:	460d      	mov	r5, r1
			1 - 2 * (_q2 * _q2 + _q3 * _q3));
 8001e58:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e5c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e60:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e74:	ee77 7a67 	vsub.f32	s15, s14, s15
	angles.z = atan2(2 * (_q0 * _q3 + _q1 * _q2),
 8001e78:	ee17 0a90 	vmov	r0, s15
 8001e7c:	f7fe fb6c 	bl	8000558 <__aeabi_f2d>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	ec43 2b11 	vmov	d1, r2, r3
 8001e88:	ec45 4b10 	vmov	d0, r4, r5
 8001e8c:	f005 ff64 	bl	8007d58 <atan2>
 8001e90:	ec53 2b10 	vmov	r2, r3, d0
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	f7fe fe8e 	bl	8000bb8 <__aeabi_d2f>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28

	return angles;
 8001ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea4:	f107 0220 	add.w	r2, r7, #32
 8001ea8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb4:	ee06 1a90 	vmov	s13, r1
 8001eb8:	ee07 2a10 	vmov	s14, r2
 8001ebc:	ee07 3a90 	vmov	s15, r3
}
 8001ec0:	eeb0 0a66 	vmov.f32	s0, s13
 8001ec4:	eef0 0a47 	vmov.f32	s1, s14
 8001ec8:	eeb0 1a67 	vmov.f32	s2, s15
 8001ecc:	3740      	adds	r7, #64	; 0x40
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	f3af 8000 	nop.w
 8001ed8:	54442d18 	.word	0x54442d18
 8001edc:	3ff921fb 	.word	0x3ff921fb

08001ee0 <invSqrt>:

/*
 * @brief Fast inverse Square root
 * @param The input value which will be converted to its inverse sqrt
 */
float invSqrt(float x) {
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8001eea:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ef2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 8001efe:	f107 0310 	add.w	r3, r7, #16
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i >> 1);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	105a      	asrs	r2, r3, #1
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <invSqrt+0x9c>)
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 8001f10:	f107 030c 	add.w	r3, r7, #12
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001f18:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f24:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001f30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f34:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f3c:	edc7 7a04 	vstr	s15, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001f40:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f44:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f54:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001f58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f64:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	ee07 3a90 	vmov	s15, r3
}
 8001f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f72:	371c      	adds	r7, #28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	5f3759df 	.word	0x5f3759df

08001f80 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f84:	b0b2      	sub	sp, #200	; 0xc8
 8001f86:	af1c      	add	r7, sp, #112	; 0x70
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001f88:	f000 fe34 	bl	8002bf4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001f8c:	f000 fa96 	bl	80024bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001f90:	f000 fb8e 	bl	80026b0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001f94:	f000 fb62 	bl	800265c <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8001f98:	f000 fb2a 	bl	80025f0 <MX_SPI1_Init>
	MX_I2C1_Init();
 8001f9c:	f000 fafa 	bl	8002594 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	sprintf((char*) buff, "\r\n###########################\r\n");
 8001fa0:	49c7      	ldr	r1, [pc, #796]	; (80022c0 <main+0x340>)
 8001fa2:	48c8      	ldr	r0, [pc, #800]	; (80022c4 <main+0x344>)
 8001fa4:	f003 fc72 	bl	800588c <siprintf>
	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001fa8:	48c6      	ldr	r0, [pc, #792]	; (80022c4 <main+0x344>)
 8001faa:	f7fe f919 	bl	80001e0 <strlen>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fb6:	49c3      	ldr	r1, [pc, #780]	; (80022c4 <main+0x344>)
 8001fb8:	48c3      	ldr	r0, [pc, #780]	; (80022c8 <main+0x348>)
 8001fba:	f002 fcf0 	bl	800499e <HAL_UART_Transmit>

	if (USE_ICM20602) {
		icm20602_init();
	}

	as5048a_init();
 8001fbe:	f7ff f843 	bl	8001048 <as5048a_init>

	gyr_range = bmi270_getGyroRange();
 8001fc2:	f7ff fa3f 	bl	8001444 <bmi270_getGyroRange>
 8001fc6:	eef0 7a40 	vmov.f32	s15, s0
 8001fca:	4bc0      	ldr	r3, [pc, #768]	; (80022cc <main+0x34c>)
 8001fcc:	edc3 7a00 	vstr	s15, [r3]

	if (USE_BMI270) {
		bmi270_spi_init();
 8001fd0:	f7ff f898 	bl	8001104 <bmi270_spi_init>
		bmi270_spi_init_check();
 8001fd4:	f7ff f974 	bl	80012c0 <bmi270_spi_init_check>

		bmi270_pwr_conf(BMI270_PWR_MODE_PERF);
 8001fd8:	2002      	movs	r0, #2
 8001fda:	f7ff f8e5 	bl	80011a8 <bmi270_pwr_conf>
	}

	//Set zero position for all encoders
	zero_pos[ENC_X] = as5048a_getRawRotation(GPIO_ENC_X);
 8001fde:	2010      	movs	r0, #16
 8001fe0:	f7ff f822 	bl	8001028 <as5048a_getRawRotation>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4bb9      	ldr	r3, [pc, #740]	; (80022d0 <main+0x350>)
 8001fea:	801a      	strh	r2, [r3, #0]
	zero_pos[ENC_Y] = as5048a_getRawRotation(GPIO_ENC_Y);
 8001fec:	2020      	movs	r0, #32
 8001fee:	f7ff f81b 	bl	8001028 <as5048a_getRawRotation>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4bb6      	ldr	r3, [pc, #728]	; (80022d0 <main+0x350>)
 8001ff8:	805a      	strh	r2, [r3, #2]
	zero_pos[ENC_Z] = as5048a_getRawRotation(GPIO_ENC_Z);
 8001ffa:	2040      	movs	r0, #64	; 0x40
 8001ffc:	f7ff f814 	bl	8001028 <as5048a_getRawRotation>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	4bb2      	ldr	r3, [pc, #712]	; (80022d0 <main+0x350>)
 8002006:	809a      	strh	r2, [r3, #4]
	zero_pos_map[ENC_X] = as5048a_readToAngle(zero_pos[ENC_X]);
 8002008:	4bb1      	ldr	r3, [pc, #708]	; (80022d0 <main+0x350>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff f833 	bl	8001078 <as5048a_readToAngle>
 8002012:	eef0 7a40 	vmov.f32	s15, s0
 8002016:	4baf      	ldr	r3, [pc, #700]	; (80022d4 <main+0x354>)
 8002018:	edc3 7a00 	vstr	s15, [r3]
	zero_pos_map[ENC_Y] = as5048a_readToAngle(zero_pos[ENC_Y]);
 800201c:	4bac      	ldr	r3, [pc, #688]	; (80022d0 <main+0x350>)
 800201e:	885b      	ldrh	r3, [r3, #2]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff f829 	bl	8001078 <as5048a_readToAngle>
 8002026:	eef0 7a40 	vmov.f32	s15, s0
 800202a:	4baa      	ldr	r3, [pc, #680]	; (80022d4 <main+0x354>)
 800202c:	edc3 7a01 	vstr	s15, [r3, #4]
	zero_pos_map[ENC_Z] = as5048a_readToAngle(zero_pos[ENC_Z]);
 8002030:	4ba7      	ldr	r3, [pc, #668]	; (80022d0 <main+0x350>)
 8002032:	889b      	ldrh	r3, [r3, #4]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff f81f 	bl	8001078 <as5048a_readToAngle>
 800203a:	eef0 7a40 	vmov.f32	s15, s0
 800203e:	4ba5      	ldr	r3, [pc, #660]	; (80022d4 <main+0x354>)
 8002040:	edc3 7a02 	vstr	s15, [r3, #8]

	setSampleFreq();
 8002044:	f7ff fb10 	bl	8001668 <setSampleFreq>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		t1 = HAL_GetTick();
 8002048:	f000 fe3a 	bl	8002cc0 <HAL_GetTick>
 800204c:	4603      	mov	r3, r0
 800204e:	4aa2      	ldr	r2, [pc, #648]	; (80022d8 <main+0x358>)
 8002050:	6013      	str	r3, [r2, #0]
		setSampleFreq();
 8002052:	f7ff fb09 	bl	8001668 <setSampleFreq>
			acc_y = acc_y_raw / AFS_SEL;
			acc_z = acc_z_raw / AFS_SEL;
		}

		if(USE_BMI270){
			gyr_x = bmi270_read_gyro(BMI270_AXIS_X);
 8002056:	2000      	movs	r0, #0
 8002058:	f7ff f8e6 	bl	8001228 <bmi270_read_gyro>
 800205c:	4603      	mov	r3, r0
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002066:	4b9d      	ldr	r3, [pc, #628]	; (80022dc <main+0x35c>)
 8002068:	edc3 7a00 	vstr	s15, [r3]
			gyr_y = bmi270_read_gyro(BMI270_AXIS_Y);
 800206c:	2001      	movs	r0, #1
 800206e:	f7ff f8db 	bl	8001228 <bmi270_read_gyro>
 8002072:	4603      	mov	r3, r0
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800207c:	4b98      	ldr	r3, [pc, #608]	; (80022e0 <main+0x360>)
 800207e:	edc3 7a00 	vstr	s15, [r3]
			gyr_z = bmi270_read_gyro(BMI270_AXIS_Z);
 8002082:	2002      	movs	r0, #2
 8002084:	f7ff f8d0 	bl	8001228 <bmi270_read_gyro>
 8002088:	4603      	mov	r3, r0
 800208a:	ee07 3a90 	vmov	s15, r3
 800208e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002092:	4b94      	ldr	r3, [pc, #592]	; (80022e4 <main+0x364>)
 8002094:	edc3 7a00 	vstr	s15, [r3]

			gyr_x = bmi270_lsb_to_dps(gyr_x, gyr_range);
 8002098:	4b90      	ldr	r3, [pc, #576]	; (80022dc <main+0x35c>)
 800209a:	edd3 7a00 	vldr	s15, [r3]
 800209e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020a2:	ee17 3a90 	vmov	r3, s15
 80020a6:	b21b      	sxth	r3, r3
 80020a8:	4a88      	ldr	r2, [pc, #544]	; (80022cc <main+0x34c>)
 80020aa:	edd2 7a00 	vldr	s15, [r2]
 80020ae:	eeb0 0a67 	vmov.f32	s0, s15
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff f9fc 	bl	80014b0 <bmi270_lsb_to_dps>
 80020b8:	eef0 7a40 	vmov.f32	s15, s0
 80020bc:	4b87      	ldr	r3, [pc, #540]	; (80022dc <main+0x35c>)
 80020be:	edc3 7a00 	vstr	s15, [r3]
			gyr_y = bmi270_lsb_to_dps(gyr_y, gyr_range);
 80020c2:	4b87      	ldr	r3, [pc, #540]	; (80022e0 <main+0x360>)
 80020c4:	edd3 7a00 	vldr	s15, [r3]
 80020c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020cc:	ee17 3a90 	vmov	r3, s15
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	4a7e      	ldr	r2, [pc, #504]	; (80022cc <main+0x34c>)
 80020d4:	edd2 7a00 	vldr	s15, [r2]
 80020d8:	eeb0 0a67 	vmov.f32	s0, s15
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff f9e7 	bl	80014b0 <bmi270_lsb_to_dps>
 80020e2:	eef0 7a40 	vmov.f32	s15, s0
 80020e6:	4b7e      	ldr	r3, [pc, #504]	; (80022e0 <main+0x360>)
 80020e8:	edc3 7a00 	vstr	s15, [r3]
			gyr_z = bmi270_lsb_to_dps(gyr_z, gyr_range);
 80020ec:	4b7d      	ldr	r3, [pc, #500]	; (80022e4 <main+0x364>)
 80020ee:	edd3 7a00 	vldr	s15, [r3]
 80020f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020f6:	ee17 3a90 	vmov	r3, s15
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	4a73      	ldr	r2, [pc, #460]	; (80022cc <main+0x34c>)
 80020fe:	edd2 7a00 	vldr	s15, [r2]
 8002102:	eeb0 0a67 	vmov.f32	s0, s15
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff f9d2 	bl	80014b0 <bmi270_lsb_to_dps>
 800210c:	eef0 7a40 	vmov.f32	s15, s0
 8002110:	4b74      	ldr	r3, [pc, #464]	; (80022e4 <main+0x364>)
 8002112:	edc3 7a00 	vstr	s15, [r3]
		}



		//Wait before updating quaternion. This avoids div by zero in different Quaternion functions.
		if (waitUpdate >= 1 && !USE_SIM) {
 8002116:	4b74      	ldr	r3, [pc, #464]	; (80022e8 <main+0x368>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d049      	beq.n	80021b2 <main+0x232>
			filterUpdate(gyr_x * DEG_TO_RAD, gyr_y * DEG_TO_RAD,
 800211e:	4b6f      	ldr	r3, [pc, #444]	; (80022dc <main+0x35c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fa18 	bl	8000558 <__aeabi_f2d>
 8002128:	a361      	add	r3, pc, #388	; (adr r3, 80022b0 <main+0x330>)
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	f7fe fa6b 	bl	8000608 <__aeabi_dmul>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4610      	mov	r0, r2
 8002138:	4619      	mov	r1, r3
 800213a:	f7fe fd3d 	bl	8000bb8 <__aeabi_d2f>
 800213e:	4604      	mov	r4, r0
 8002140:	4b67      	ldr	r3, [pc, #412]	; (80022e0 <main+0x360>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fa07 	bl	8000558 <__aeabi_f2d>
 800214a:	a359      	add	r3, pc, #356	; (adr r3, 80022b0 <main+0x330>)
 800214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002150:	f7fe fa5a 	bl	8000608 <__aeabi_dmul>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	f7fe fd2c 	bl	8000bb8 <__aeabi_d2f>
 8002160:	4605      	mov	r5, r0
					gyr_z * DEG_TO_RAD, acc_x, acc_y, acc_z);
 8002162:	4b60      	ldr	r3, [pc, #384]	; (80022e4 <main+0x364>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe f9f6 	bl	8000558 <__aeabi_f2d>
 800216c:	a350      	add	r3, pc, #320	; (adr r3, 80022b0 <main+0x330>)
 800216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002172:	f7fe fa49 	bl	8000608 <__aeabi_dmul>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
			filterUpdate(gyr_x * DEG_TO_RAD, gyr_y * DEG_TO_RAD,
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	f7fe fd1b 	bl	8000bb8 <__aeabi_d2f>
 8002182:	4602      	mov	r2, r0
 8002184:	4b59      	ldr	r3, [pc, #356]	; (80022ec <main+0x36c>)
 8002186:	edd3 7a00 	vldr	s15, [r3]
 800218a:	4b59      	ldr	r3, [pc, #356]	; (80022f0 <main+0x370>)
 800218c:	ed93 7a00 	vldr	s14, [r3]
 8002190:	4b58      	ldr	r3, [pc, #352]	; (80022f4 <main+0x374>)
 8002192:	edd3 6a00 	vldr	s13, [r3]
 8002196:	eef0 2a66 	vmov.f32	s5, s13
 800219a:	eeb0 2a47 	vmov.f32	s4, s14
 800219e:	eef0 1a67 	vmov.f32	s3, s15
 80021a2:	ee01 2a10 	vmov	s2, r2
 80021a6:	ee00 5a90 	vmov	s1, r5
 80021aa:	ee00 4a10 	vmov	s0, r4
 80021ae:	f7ff fa85 	bl	80016bc <filterUpdate>
			az_s = 0.0;
			filterUpdate(gx_s * DEG_TO_RAD, gy_s * DEG_TO_RAD,
					gz_s * DEG_TO_RAD, ax_s, ay_s, az_s);
		}

		waitUpdate++;
 80021b2:	4b4d      	ldr	r3, [pc, #308]	; (80022e8 <main+0x368>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	3301      	adds	r3, #1
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b4b      	ldr	r3, [pc, #300]	; (80022e8 <main+0x368>)
 80021bc:	701a      	strb	r2, [r3, #0]

		euler = ToEulerAngles(q0, q1, q2, q3);
 80021be:	4b4e      	ldr	r3, [pc, #312]	; (80022f8 <main+0x378>)
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	4b4d      	ldr	r3, [pc, #308]	; (80022fc <main+0x37c>)
 80021c6:	ed93 7a00 	vldr	s14, [r3]
 80021ca:	4b4d      	ldr	r3, [pc, #308]	; (8002300 <main+0x380>)
 80021cc:	edd3 6a00 	vldr	s13, [r3]
 80021d0:	4b4c      	ldr	r3, [pc, #304]	; (8002304 <main+0x384>)
 80021d2:	ed93 6a00 	vldr	s12, [r3]
 80021d6:	eef0 1a46 	vmov.f32	s3, s12
 80021da:	eeb0 1a66 	vmov.f32	s2, s13
 80021de:	eef0 0a47 	vmov.f32	s1, s14
 80021e2:	eeb0 0a67 	vmov.f32	s0, s15
 80021e6:	f7ff fd9f 	bl	8001d28 <ToEulerAngles>
 80021ea:	eef0 6a40 	vmov.f32	s13, s0
 80021ee:	eeb0 7a60 	vmov.f32	s14, s1
 80021f2:	eef0 7a41 	vmov.f32	s15, s2
 80021f6:	4b44      	ldr	r3, [pc, #272]	; (8002308 <main+0x388>)
 80021f8:	edc3 6a00 	vstr	s13, [r3]
 80021fc:	ed83 7a01 	vstr	s14, [r3, #4]
 8002200:	edc3 7a02 	vstr	s15, [r3, #8]

		roll = euler.x * RAD_TO_DEG;
 8002204:	4b40      	ldr	r3, [pc, #256]	; (8002308 <main+0x388>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe f9a5 	bl	8000558 <__aeabi_f2d>
 800220e:	a32a      	add	r3, pc, #168	; (adr r3, 80022b8 <main+0x338>)
 8002210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002214:	f7fe f9f8 	bl	8000608 <__aeabi_dmul>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	f7fe fcca 	bl	8000bb8 <__aeabi_d2f>
 8002224:	4603      	mov	r3, r0
 8002226:	4a39      	ldr	r2, [pc, #228]	; (800230c <main+0x38c>)
 8002228:	6013      	str	r3, [r2, #0]
		pitch = euler.y * RAD_TO_DEG;
 800222a:	4b37      	ldr	r3, [pc, #220]	; (8002308 <main+0x388>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f992 	bl	8000558 <__aeabi_f2d>
 8002234:	a320      	add	r3, pc, #128	; (adr r3, 80022b8 <main+0x338>)
 8002236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223a:	f7fe f9e5 	bl	8000608 <__aeabi_dmul>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	f7fe fcb7 	bl	8000bb8 <__aeabi_d2f>
 800224a:	4603      	mov	r3, r0
 800224c:	4a30      	ldr	r2, [pc, #192]	; (8002310 <main+0x390>)
 800224e:	6013      	str	r3, [r2, #0]
		yaw = euler.z * RAD_TO_DEG;
 8002250:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <main+0x388>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe f97f 	bl	8000558 <__aeabi_f2d>
 800225a:	a317      	add	r3, pc, #92	; (adr r3, 80022b8 <main+0x338>)
 800225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002260:	f7fe f9d2 	bl	8000608 <__aeabi_dmul>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	f7fe fca4 	bl	8000bb8 <__aeabi_d2f>
 8002270:	4603      	mov	r3, r0
 8002272:	4a28      	ldr	r2, [pc, #160]	; (8002314 <main+0x394>)
 8002274:	6013      	str	r3, [r2, #0]

		sprintf((char*) buff, "gyr_range: %f\r\n"
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <main+0x34c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe f96c 	bl	8000558 <__aeabi_f2d>
 8002280:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 8002284:	4b24      	ldr	r3, [pc, #144]	; (8002318 <main+0x398>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe f965 	bl	8000558 <__aeabi_f2d>
 800228e:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <main+0x35c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe f95e 	bl	8000558 <__aeabi_f2d>
 800229c:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <main+0x360>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe f957 	bl	8000558 <__aeabi_f2d>
 80022aa:	e037      	b.n	800231c <main+0x39c>
 80022ac:	f3af 8000 	nop.w
 80022b0:	a226e211 	.word	0xa226e211
 80022b4:	3f91df46 	.word	0x3f91df46
 80022b8:	1aa9cdba 	.word	0x1aa9cdba
 80022bc:	404ca5dc 	.word	0x404ca5dc
 80022c0:	080089b4 	.word	0x080089b4
 80022c4:	200022a8 	.word	0x200022a8
 80022c8:	2000252c 	.word	0x2000252c
 80022cc:	20002240 	.word	0x20002240
 80022d0:	200022a0 	.word	0x200022a0
 80022d4:	2000258c 	.word	0x2000258c
 80022d8:	200024c0 	.word	0x200024c0
 80022dc:	200024b0 	.word	0x200024b0
 80022e0:	200024bc 	.word	0x200024bc
 80022e4:	200024b4 	.word	0x200024b4
 80022e8:	20002218 	.word	0x20002218
 80022ec:	200024c8 	.word	0x200024c8
 80022f0:	2000229c 	.word	0x2000229c
 80022f4:	20002578 	.word	0x20002578
 80022f8:	20002004 	.word	0x20002004
 80022fc:	2000220c 	.word	0x2000220c
 8002300:	20002210 	.word	0x20002210
 8002304:	20002214 	.word	0x20002214
 8002308:	20002580 	.word	0x20002580
 800230c:	20002574 	.word	0x20002574
 8002310:	20002570 	.word	0x20002570
 8002314:	20002528 	.word	0x20002528
 8002318:	2000200c 	.word	0x2000200c
 800231c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8002320:	4b54      	ldr	r3, [pc, #336]	; (8002474 <main+0x4f4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe f917 	bl	8000558 <__aeabi_f2d>
 800232a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 800232e:	4b52      	ldr	r3, [pc, #328]	; (8002478 <main+0x4f8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe f910 	bl	8000558 <__aeabi_f2d>
 8002338:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 800233c:	4b4f      	ldr	r3, [pc, #316]	; (800247c <main+0x4fc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f909 	bl	8000558 <__aeabi_f2d>
 8002346:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800234a:	4b4d      	ldr	r3, [pc, #308]	; (8002480 <main+0x500>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe f902 	bl	8000558 <__aeabi_f2d>
 8002354:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002358:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <main+0x504>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f8fb 	bl	8000558 <__aeabi_f2d>
 8002362:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002366:	4b48      	ldr	r3, [pc, #288]	; (8002488 <main+0x508>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe f8f4 	bl	8000558 <__aeabi_f2d>
 8002370:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002374:	4b45      	ldr	r3, [pc, #276]	; (800248c <main+0x50c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe f8ed 	bl	8000558 <__aeabi_f2d>
 800237e:	e9c7 0100 	strd	r0, r1, [r7]
 8002382:	4b43      	ldr	r3, [pc, #268]	; (8002490 <main+0x510>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe f8e6 	bl	8000558 <__aeabi_f2d>
 800238c:	4682      	mov	sl, r0
 800238e:	468b      	mov	fp, r1
 8002390:	4b40      	ldr	r3, [pc, #256]	; (8002494 <main+0x514>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe f8df 	bl	8000558 <__aeabi_f2d>
 800239a:	4680      	mov	r8, r0
 800239c:	4689      	mov	r9, r1
 800239e:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <main+0x518>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe f8d8 	bl	8000558 <__aeabi_f2d>
 80023a8:	4604      	mov	r4, r0
 80023aa:	460d      	mov	r5, r1
 80023ac:	4b3b      	ldr	r3, [pc, #236]	; (800249c <main+0x51c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe f8d1 	bl	8000558 <__aeabi_f2d>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 80023be:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 80023c2:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 80023c6:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 80023ca:	ed97 7b00 	vldr	d7, [r7]
 80023ce:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80023d2:	ed97 7b02 	vldr	d7, [r7, #8]
 80023d6:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80023da:	ed97 7b04 	vldr	d7, [r7, #16]
 80023de:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80023e2:	ed97 7b06 	vldr	d7, [r7, #24]
 80023e6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80023ea:	ed97 7b08 	vldr	d7, [r7, #32]
 80023ee:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80023f2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80023f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80023fa:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80023fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002402:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002406:	ed8d 7b04 	vstr	d7, [sp, #16]
 800240a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800240e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002412:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002416:	ed8d 7b00 	vstr	d7, [sp]
 800241a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800241e:	4920      	ldr	r1, [pc, #128]	; (80024a0 <main+0x520>)
 8002420:	4820      	ldr	r0, [pc, #128]	; (80024a4 <main+0x524>)
 8002422:	f003 fa33 	bl	800588c <siprintf>
				"roll: %f, pitch: %f, yaw: %f\r\n", gyr_range, while_t,
				gyr_x, gyr_y, gyr_z, acc_x, acc_y, acc_z,
				q0, q1, q2, q3,
				roll, pitch, yaw);

		HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8002426:	481f      	ldr	r0, [pc, #124]	; (80024a4 <main+0x524>)
 8002428:	f7fd feda 	bl	80001e0 <strlen>
 800242c:	4603      	mov	r3, r0
 800242e:	b29a      	uxth	r2, r3
 8002430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002434:	491b      	ldr	r1, [pc, #108]	; (80024a4 <main+0x524>)
 8002436:	481c      	ldr	r0, [pc, #112]	; (80024a8 <main+0x528>)
 8002438:	f002 fab1 	bl	800499e <HAL_UART_Transmit>

		HAL_Delay(sampleDelay);
 800243c:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <main+0x52c>)
 800243e:	edd3 7a00 	vldr	s15, [r3]
 8002442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002446:	ee17 0a90 	vmov	r0, s15
 800244a:	f000 fc45 	bl	8002cd8 <HAL_Delay>
		t2 = HAL_GetTick();
 800244e:	f000 fc37 	bl	8002cc0 <HAL_GetTick>
 8002452:	4603      	mov	r3, r0
 8002454:	4a16      	ldr	r2, [pc, #88]	; (80024b0 <main+0x530>)
 8002456:	6013      	str	r3, [r2, #0]
		while_t = t2 - t1;
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <main+0x530>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <main+0x534>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	ee07 3a90 	vmov	s15, r3
 8002466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800246a:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <main+0x538>)
 800246c:	edc3 7a00 	vstr	s15, [r3]
		t1 = HAL_GetTick();
 8002470:	e5ea      	b.n	8002048 <main+0xc8>
 8002472:	bf00      	nop
 8002474:	200024b4 	.word	0x200024b4
 8002478:	200024c8 	.word	0x200024c8
 800247c:	2000229c 	.word	0x2000229c
 8002480:	20002578 	.word	0x20002578
 8002484:	20002004 	.word	0x20002004
 8002488:	2000220c 	.word	0x2000220c
 800248c:	20002210 	.word	0x20002210
 8002490:	20002214 	.word	0x20002214
 8002494:	20002574 	.word	0x20002574
 8002498:	20002570 	.word	0x20002570
 800249c:	20002528 	.word	0x20002528
 80024a0:	080089d4 	.word	0x080089d4
 80024a4:	200022a8 	.word	0x200022a8
 80024a8:	2000252c 	.word	0x2000252c
 80024ac:	20002008 	.word	0x20002008
 80024b0:	200024a8 	.word	0x200024a8
 80024b4:	200024c0 	.word	0x200024c0
 80024b8:	2000200c 	.word	0x2000200c

080024bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b094      	sub	sp, #80	; 0x50
 80024c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80024c2:	f107 0320 	add.w	r3, r7, #32
 80024c6:	2230      	movs	r2, #48	; 0x30
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f002 fd5a 	bl	8004f84 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	4b29      	ldr	r3, [pc, #164]	; (800258c <SystemClock_Config+0xd0>)
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	4a28      	ldr	r2, [pc, #160]	; (800258c <SystemClock_Config+0xd0>)
 80024ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ee:	6413      	str	r3, [r2, #64]	; 0x40
 80024f0:	4b26      	ldr	r3, [pc, #152]	; (800258c <SystemClock_Config+0xd0>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80024fc:	2300      	movs	r3, #0
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	4b23      	ldr	r3, [pc, #140]	; (8002590 <SystemClock_Config+0xd4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002508:	4a21      	ldr	r2, [pc, #132]	; (8002590 <SystemClock_Config+0xd4>)
 800250a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b1f      	ldr	r3, [pc, #124]	; (8002590 <SystemClock_Config+0xd4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800251c:	2302      	movs	r3, #2
 800251e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002520:	2301      	movs	r3, #1
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002524:	2310      	movs	r3, #16
 8002526:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002528:	2302      	movs	r3, #2
 800252a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800252c:	2300      	movs	r3, #0
 800252e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8002530:	2310      	movs	r3, #16
 8002532:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002534:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002538:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800253a:	2304      	movs	r3, #4
 800253c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800253e:	2307      	movs	r3, #7
 8002540:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002542:	f107 0320 	add.w	r3, r7, #32
 8002546:	4618      	mov	r0, r3
 8002548:	f000 ffb2 	bl	80034b0 <HAL_RCC_OscConfig>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <SystemClock_Config+0x9a>
		Error_Handler();
 8002552:	f000 f91d 	bl	8002790 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002556:	230f      	movs	r3, #15
 8002558:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800255a:	2302      	movs	r3, #2
 800255c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002566:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	2102      	movs	r1, #2
 8002572:	4618      	mov	r0, r3
 8002574:	f001 fa14 	bl	80039a0 <HAL_RCC_ClockConfig>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <SystemClock_Config+0xc6>
		Error_Handler();
 800257e:	f000 f907 	bl	8002790 <Error_Handler>
	}
}
 8002582:	bf00      	nop
 8002584:	3750      	adds	r7, #80	; 0x50
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800
 8002590:	40007000 	.word	0x40007000

08002594 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <MX_I2C1_Init+0x50>)
 800259a:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <MX_I2C1_Init+0x54>)
 800259c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <MX_I2C1_Init+0x50>)
 80025a0:	4a12      	ldr	r2, [pc, #72]	; (80025ec <MX_I2C1_Init+0x58>)
 80025a2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <MX_I2C1_Init+0x50>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <MX_I2C1_Init+0x50>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <MX_I2C1_Init+0x50>)
 80025b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025b6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <MX_I2C1_Init+0x50>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <MX_I2C1_Init+0x50>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <MX_I2C1_Init+0x50>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <MX_I2C1_Init+0x50>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80025d0:	4804      	ldr	r0, [pc, #16]	; (80025e4 <MX_I2C1_Init+0x50>)
 80025d2:	f000 fe29 	bl	8003228 <HAL_I2C_Init>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80025dc:	f000 f8d8 	bl	8002790 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20002244 	.word	0x20002244
 80025e8:	40005400 	.word	0x40005400
 80025ec:	00061a80 	.word	0x00061a80

080025f0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80025f4:	4b17      	ldr	r3, [pc, #92]	; (8002654 <MX_SPI1_Init+0x64>)
 80025f6:	4a18      	ldr	r2, [pc, #96]	; (8002658 <MX_SPI1_Init+0x68>)
 80025f8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80025fa:	4b16      	ldr	r3, [pc, #88]	; (8002654 <MX_SPI1_Init+0x64>)
 80025fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002600:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002602:	4b14      	ldr	r3, [pc, #80]	; (8002654 <MX_SPI1_Init+0x64>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <MX_SPI1_Init+0x64>)
 800260a:	2200      	movs	r2, #0
 800260c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800260e:	4b11      	ldr	r3, [pc, #68]	; (8002654 <MX_SPI1_Init+0x64>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002614:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <MX_SPI1_Init+0x64>)
 8002616:	2200      	movs	r2, #0
 8002618:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800261a:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <MX_SPI1_Init+0x64>)
 800261c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002620:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <MX_SPI1_Init+0x64>)
 8002624:	2228      	movs	r2, #40	; 0x28
 8002626:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002628:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <MX_SPI1_Init+0x64>)
 800262a:	2200      	movs	r2, #0
 800262c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <MX_SPI1_Init+0x64>)
 8002630:	2200      	movs	r2, #0
 8002632:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002634:	4b07      	ldr	r3, [pc, #28]	; (8002654 <MX_SPI1_Init+0x64>)
 8002636:	2200      	movs	r2, #0
 8002638:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <MX_SPI1_Init+0x64>)
 800263c:	220a      	movs	r2, #10
 800263e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002640:	4804      	ldr	r0, [pc, #16]	; (8002654 <MX_SPI1_Init+0x64>)
 8002642:	f001 fba9 	bl	8003d98 <HAL_SPI_Init>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_SPI1_Init+0x60>
		Error_Handler();
 800264c:	f000 f8a0 	bl	8002790 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	200024d0 	.word	0x200024d0
 8002658:	40013000 	.word	0x40013000

0800265c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002662:	4a12      	ldr	r2, [pc, #72]	; (80026ac <MX_USART2_UART_Init+0x50>)
 8002664:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800266c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002676:	2200      	movs	r2, #0
 8002678:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <MX_USART2_UART_Init+0x4c>)
 800267c:	2200      	movs	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002682:	220c      	movs	r2, #12
 8002684:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002688:	2200      	movs	r2, #0
 800268a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <MX_USART2_UART_Init+0x4c>)
 800268e:	2200      	movs	r2, #0
 8002690:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002692:	4805      	ldr	r0, [pc, #20]	; (80026a8 <MX_USART2_UART_Init+0x4c>)
 8002694:	f002 f936 	bl	8004904 <HAL_UART_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800269e:	f000 f877 	bl	8002790 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	2000252c 	.word	0x2000252c
 80026ac:	40004400 	.word	0x40004400

080026b0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08a      	sub	sp, #40	; 0x28
 80026b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	609a      	str	r2, [r3, #8]
 80026c2:	60da      	str	r2, [r3, #12]
 80026c4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	4b2e      	ldr	r3, [pc, #184]	; (8002784 <MX_GPIO_Init+0xd4>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4a2d      	ldr	r2, [pc, #180]	; (8002784 <MX_GPIO_Init+0xd4>)
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
 80026d6:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <MX_GPIO_Init+0xd4>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	4b27      	ldr	r3, [pc, #156]	; (8002784 <MX_GPIO_Init+0xd4>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a26      	ldr	r2, [pc, #152]	; (8002784 <MX_GPIO_Init+0xd4>)
 80026ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <MX_GPIO_Init+0xd4>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	4b20      	ldr	r3, [pc, #128]	; (8002784 <MX_GPIO_Init+0xd4>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a1f      	ldr	r2, [pc, #124]	; (8002784 <MX_GPIO_Init+0xd4>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <MX_GPIO_Init+0xd4>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	4b19      	ldr	r3, [pc, #100]	; (8002784 <MX_GPIO_Init+0xd4>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a18      	ldr	r2, [pc, #96]	; (8002784 <MX_GPIO_Init+0xd4>)
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b16      	ldr	r3, [pc, #88]	; (8002784 <MX_GPIO_Init+0xd4>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6,
 8002736:	2200      	movs	r2, #0
 8002738:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800273c:	4812      	ldr	r0, [pc, #72]	; (8002788 <MX_GPIO_Init+0xd8>)
 800273e:	f000 fd59 	bl	80031f4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002746:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002748:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800274c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002752:	f107 0314 	add.w	r3, r7, #20
 8002756:	4619      	mov	r1, r3
 8002758:	480c      	ldr	r0, [pc, #48]	; (800278c <MX_GPIO_Init+0xdc>)
 800275a:	f000 fbc7 	bl	8002eec <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB4 PB5 PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 800275e:	f44f 638e 	mov.w	r3, #1136	; 0x470
 8002762:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002764:	2301      	movs	r3, #1
 8002766:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276c:	2300      	movs	r3, #0
 800276e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	4619      	mov	r1, r3
 8002776:	4804      	ldr	r0, [pc, #16]	; (8002788 <MX_GPIO_Init+0xd8>)
 8002778:	f000 fbb8 	bl	8002eec <HAL_GPIO_Init>

}
 800277c:	bf00      	nop
 800277e:	3728      	adds	r7, #40	; 0x28
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40023800 	.word	0x40023800
 8002788:	40020400 	.word	0x40020400
 800278c:	40020800 	.word	0x40020800

08002790 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
 \brief   Disable IRQ Interrupts
 \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void) {
	__ASM volatile ("cpsid i" : : : "memory");
 8002794:	b672      	cpsid	i
}
 8002796:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002798:	e7fe      	b.n	8002798 <Error_Handler+0x8>
	...

0800279c <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <HAL_MspInit+0x4c>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <HAL_MspInit+0x4c>)
 80027ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <HAL_MspInit+0x4c>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ba:	607b      	str	r3, [r7, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_MspInit+0x4c>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <HAL_MspInit+0x4c>)
 80027c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027cc:	6413      	str	r3, [r2, #64]	; 0x40
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_MspInit+0x4c>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80027da:	2007      	movs	r0, #7
 80027dc:	f000 fb52 	bl	8002e84 <HAL_NVIC_SetPriorityGrouping>
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40023800 	.word	0x40023800

080027ec <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	; 0x28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
	if (hi2c->Instance == I2C1) {
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a19      	ldr	r2, [pc, #100]	; (8002870 <HAL_I2C_MspInit+0x84>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d12c      	bne.n	8002868 <HAL_I2C_MspInit+0x7c>
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	4b18      	ldr	r3, [pc, #96]	; (8002874 <HAL_I2C_MspInit+0x88>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a17      	ldr	r2, [pc, #92]	; (8002874 <HAL_I2C_MspInit+0x88>)
 8002818:	f043 0302 	orr.w	r3, r3, #2
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <HAL_I2C_MspInit+0x88>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	693b      	ldr	r3, [r7, #16]
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800282a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800282e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002830:	2312      	movs	r3, #18
 8002832:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002838:	2303      	movs	r3, #3
 800283a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800283c:	2304      	movs	r3, #4
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	4619      	mov	r1, r3
 8002846:	480c      	ldr	r0, [pc, #48]	; (8002878 <HAL_I2C_MspInit+0x8c>)
 8002848:	f000 fb50 	bl	8002eec <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <HAL_I2C_MspInit+0x88>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	4a07      	ldr	r2, [pc, #28]	; (8002874 <HAL_I2C_MspInit+0x88>)
 8002856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800285a:	6413      	str	r3, [r2, #64]	; 0x40
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_I2C_MspInit+0x88>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}

}
 8002868:	bf00      	nop
 800286a:	3728      	adds	r7, #40	; 0x28
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40005400 	.word	0x40005400
 8002874:	40023800 	.word	0x40023800
 8002878:	40020400 	.word	0x40020400

0800287c <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	; 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
	if (hspi->Instance == SPI1) {
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a19      	ldr	r2, [pc, #100]	; (8002900 <HAL_SPI_MspInit+0x84>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d12b      	bne.n	80028f6 <HAL_SPI_MspInit+0x7a>
		/* USER CODE BEGIN SPI1_MspInit 0 */

		/* USER CODE END SPI1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	4b18      	ldr	r3, [pc, #96]	; (8002904 <HAL_SPI_MspInit+0x88>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	4a17      	ldr	r2, [pc, #92]	; (8002904 <HAL_SPI_MspInit+0x88>)
 80028a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028ac:	6453      	str	r3, [r2, #68]	; 0x44
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <HAL_SPI_MspInit+0x88>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <HAL_SPI_MspInit+0x88>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a10      	ldr	r2, [pc, #64]	; (8002904 <HAL_SPI_MspInit+0x88>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <HAL_SPI_MspInit+0x88>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
		/**SPI1 GPIO Configuration
		 PA5     ------> SPI1_SCK
		 PA6     ------> SPI1_MISO
		 PA7     ------> SPI1_MOSI
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 80028d6:	23e0      	movs	r3, #224	; 0xe0
 80028d8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e2:	2303      	movs	r3, #3
 80028e4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028e6:	2305      	movs	r3, #5
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ea:	f107 0314 	add.w	r3, r7, #20
 80028ee:	4619      	mov	r1, r3
 80028f0:	4805      	ldr	r0, [pc, #20]	; (8002908 <HAL_SPI_MspInit+0x8c>)
 80028f2:	f000 fafb 	bl	8002eec <HAL_GPIO_Init>
		/* USER CODE BEGIN SPI1_MspInit 1 */

		/* USER CODE END SPI1_MspInit 1 */
	}

}
 80028f6:	bf00      	nop
 80028f8:	3728      	adds	r7, #40	; 0x28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40013000 	.word	0x40013000
 8002904:	40023800 	.word	0x40023800
 8002908:	40020000 	.word	0x40020000

0800290c <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
	if (huart->Instance == USART2) {
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a19      	ldr	r2, [pc, #100]	; (8002990 <HAL_UART_MspInit+0x84>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d12b      	bne.n	8002986 <HAL_UART_MspInit+0x7a>
		/* USER CODE BEGIN USART2_MspInit 0 */

		/* USER CODE END USART2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_UART_MspInit+0x88>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a17      	ldr	r2, [pc, #92]	; (8002994 <HAL_UART_MspInit+0x88>)
 8002938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <HAL_UART_MspInit+0x88>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <HAL_UART_MspInit+0x88>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a10      	ldr	r2, [pc, #64]	; (8002994 <HAL_UART_MspInit+0x88>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_UART_MspInit+0x88>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
		/**USART2 GPIO Configuration
		 PA2     ------> USART2_TX
		 PA3     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 8002966:	230c      	movs	r3, #12
 8002968:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002972:	2300      	movs	r3, #0
 8002974:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002976:	2307      	movs	r3, #7
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	4619      	mov	r1, r3
 8002980:	4805      	ldr	r0, [pc, #20]	; (8002998 <HAL_UART_MspInit+0x8c>)
 8002982:	f000 fab3 	bl	8002eec <HAL_GPIO_Init>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}

}
 8002986:	bf00      	nop
 8002988:	3728      	adds	r7, #40	; 0x28
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40004400 	.word	0x40004400
 8002994:	40023800 	.word	0x40023800
 8002998:	40020000 	.word	0x40020000

0800299c <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80029a0:	e7fe      	b.n	80029a0 <NMI_Handler+0x4>

080029a2 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80029a6:	e7fe      	b.n	80029a6 <HardFault_Handler+0x4>

080029a8 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80029ac:	e7fe      	b.n	80029ac <MemManage_Handler+0x4>

080029ae <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80029b2:	e7fe      	b.n	80029b2 <BusFault_Handler+0x4>

080029b4 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80029b8:	e7fe      	b.n	80029b8 <UsageFault_Handler+0x4>

080029ba <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80029e8:	f000 f956 	bl	8002c98 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80029ec:	bf00      	nop
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
	return 1;
 80029f4:	2301      	movs	r3, #1
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <_kill>:

int _kill(int pid, int sig) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a0a:	f002 fa91 	bl	8004f30 <__errno>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2216      	movs	r2, #22
 8002a12:	601a      	str	r2, [r3, #0]
	return -1;
 8002a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <_exit>:

void _exit(int status) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff ffe7 	bl	8002a00 <_kill>
	while (1) {
 8002a32:	e7fe      	b.n	8002a32 <_exit+0x12>

08002a34 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	e00a      	b.n	8002a5c <_read+0x28>
		*ptr++ = __io_getchar();
 8002a46:	f3af 8000 	nop.w
 8002a4a:	4601      	mov	r1, r0
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	60ba      	str	r2, [r7, #8]
 8002a52:	b2ca      	uxtb	r2, r1
 8002a54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	dbf0      	blt.n	8002a46 <_read+0x12>
	}

	return len;
 8002a64:	687b      	ldr	r3, [r7, #4]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	e009      	b.n	8002a94 <_write+0x26>
		__io_putchar(*ptr++);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	60ba      	str	r2, [r7, #8]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	3301      	adds	r3, #1
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	dbf1      	blt.n	8002a80 <_write+0x12>
	}
	return len;
 8002a9c:	687b      	ldr	r3, [r7, #4]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <_close>:

int _close(int file) {
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
	return -1;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <_fstat>:

int _fstat(int file, struct stat *st) {
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ace:	605a      	str	r2, [r3, #4]
	return 0;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <_isatty>:

int _isatty(int file) {
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ae6:	2301      	movs	r3, #1
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
	return 0;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002b18:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002b24:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <_sbrk+0x64>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <_sbrk+0x64>)
 8002b2e:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <_sbrk+0x68>)
 8002b30:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <_sbrk+0x64>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d207      	bcs.n	8002b50 <_sbrk+0x40>
		errno = ENOMEM;
 8002b40:	f002 f9f6 	bl	8004f30 <__errno>
 8002b44:	4603      	mov	r3, r0
 8002b46:	220c      	movs	r2, #12
 8002b48:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b4e:	e009      	b.n	8002b64 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <_sbrk+0x64>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002b56:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <_sbrk+0x64>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	4a05      	ldr	r2, [pc, #20]	; (8002b74 <_sbrk+0x64>)
 8002b60:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002b62:	68fb      	ldr	r3, [r7, #12]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20018000 	.word	0x20018000
 8002b70:	00000400 	.word	0x00000400
 8002b74:	2000221c 	.word	0x2000221c
 8002b78:	200025b0 	.word	0x200025b0

08002b7c <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <SystemInit+0x20>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <SystemInit+0x20>)
 8002b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ba4:	480d      	ldr	r0, [pc, #52]	; (8002bdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ba6:	490e      	ldr	r1, [pc, #56]	; (8002be0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ba8:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bac:	e002      	b.n	8002bb4 <LoopCopyDataInit>

08002bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bb2:	3304      	adds	r3, #4

08002bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb8:	d3f9      	bcc.n	8002bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bba:	4a0b      	ldr	r2, [pc, #44]	; (8002be8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bbc:	4c0b      	ldr	r4, [pc, #44]	; (8002bec <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bc0:	e001      	b.n	8002bc6 <LoopFillZerobss>

08002bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bc4:	3204      	adds	r2, #4

08002bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc8:	d3fb      	bcc.n	8002bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bca:	f7ff ffd7 	bl	8002b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bce:	f002 f9b5 	bl	8004f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bd2:	f7ff f9d5 	bl	8001f80 <main>
  bx  lr    
 8002bd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002be0:	200021f0 	.word	0x200021f0
  ldr r2, =_sidata
 8002be4:	08008f10 	.word	0x08008f10
  ldr r2, =_sbss
 8002be8:	200021f0 	.word	0x200021f0
  ldr r4, =_ebss
 8002bec:	200025ac 	.word	0x200025ac

08002bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bf0:	e7fe      	b.n	8002bf0 <ADC_IRQHandler>
	...

08002bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <HAL_Init+0x40>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <HAL_Init+0x40>)
 8002bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_Init+0x40>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <HAL_Init+0x40>)
 8002c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_Init+0x40>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a07      	ldr	r2, [pc, #28]	; (8002c34 <HAL_Init+0x40>)
 8002c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c1c:	2003      	movs	r0, #3
 8002c1e:	f000 f931 	bl	8002e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c22:	2000      	movs	r0, #0
 8002c24:	f000 f808 	bl	8002c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c28:	f7ff fdb8 	bl	800279c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023c00 	.word	0x40023c00

08002c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c40:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_InitTick+0x54>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <HAL_InitTick+0x58>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f93b 	bl	8002ed2 <HAL_SYSTICK_Config>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00e      	b.n	8002c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b0f      	cmp	r3, #15
 8002c6a:	d80a      	bhi.n	8002c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c74:	f000 f911 	bl	8002e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c78:	4a06      	ldr	r2, [pc, #24]	; (8002c94 <HAL_InitTick+0x5c>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e000      	b.n	8002c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20002010 	.word	0x20002010
 8002c90:	20002018 	.word	0x20002018
 8002c94:	20002014 	.word	0x20002014

08002c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_IncTick+0x20>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_IncTick+0x24>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <HAL_IncTick+0x24>)
 8002caa:	6013      	str	r3, [r2, #0]
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20002018 	.word	0x20002018
 8002cbc:	20002598 	.word	0x20002598

08002cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <HAL_GetTick+0x14>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20002598 	.word	0x20002598

08002cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ce0:	f7ff ffee 	bl	8002cc0 <HAL_GetTick>
 8002ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cf0:	d005      	beq.n	8002cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_Delay+0x44>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cfe:	bf00      	nop
 8002d00:	f7ff ffde 	bl	8002cc0 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d8f7      	bhi.n	8002d00 <HAL_Delay+0x28>
  {
  }
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20002018 	.word	0x20002018

08002d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d52:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	60d3      	str	r3, [r2, #12]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <__NVIC_GetPriorityGrouping+0x18>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f003 0307 	and.w	r3, r3, #7
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	6039      	str	r1, [r7, #0]
 8002d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	db0a      	blt.n	8002dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	490c      	ldr	r1, [pc, #48]	; (8002dd0 <__NVIC_SetPriority+0x4c>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	0112      	lsls	r2, r2, #4
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	440b      	add	r3, r1
 8002da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dac:	e00a      	b.n	8002dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4908      	ldr	r1, [pc, #32]	; (8002dd4 <__NVIC_SetPriority+0x50>)
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	3b04      	subs	r3, #4
 8002dbc:	0112      	lsls	r2, r2, #4
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	761a      	strb	r2, [r3, #24]
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000e100 	.word	0xe000e100
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b089      	sub	sp, #36	; 0x24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f1c3 0307 	rsb	r3, r3, #7
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	bf28      	it	cs
 8002df6:	2304      	movcs	r3, #4
 8002df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d902      	bls.n	8002e08 <NVIC_EncodePriority+0x30>
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3b03      	subs	r3, #3
 8002e06:	e000      	b.n	8002e0a <NVIC_EncodePriority+0x32>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43da      	mvns	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	43d9      	mvns	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	4313      	orrs	r3, r2
         );
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3724      	adds	r7, #36	; 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e50:	d301      	bcc.n	8002e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e52:	2301      	movs	r3, #1
 8002e54:	e00f      	b.n	8002e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e56:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <SysTick_Config+0x40>)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5e:	210f      	movs	r1, #15
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e64:	f7ff ff8e 	bl	8002d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <SysTick_Config+0x40>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6e:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <SysTick_Config+0x40>)
 8002e70:	2207      	movs	r2, #7
 8002e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	e000e010 	.word	0xe000e010

08002e84 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ff47 	bl	8002d20 <__NVIC_SetPriorityGrouping>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8002eac:	f7ff ff5c 	bl	8002d68 <__NVIC_GetPriorityGrouping>
 8002eb0:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	6978      	ldr	r0, [r7, #20]
 8002eb8:	f7ff ff8e 	bl	8002dd8 <NVIC_EncodePriority>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff5d 	bl	8002d84 <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002eca:	bf00      	nop
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ffb0 	bl	8002e40 <SysTick_Config>
 8002ee0:	4603      	mov	r3, r0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b089      	sub	sp, #36	; 0x24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	e159      	b.n	80031bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f08:	2201      	movs	r2, #1
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	f040 8148 	bne.w	80031b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d005      	beq.n	8002f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d130      	bne.n	8002fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	2203      	movs	r2, #3
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f74:	2201      	movs	r2, #1
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 0201 	and.w	r2, r3, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d017      	beq.n	8002fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d123      	bne.n	8003030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	08da      	lsrs	r2, r3, #3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3208      	adds	r2, #8
 8002ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	220f      	movs	r2, #15
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	08da      	lsrs	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3208      	adds	r2, #8
 800302a:	69b9      	ldr	r1, [r7, #24]
 800302c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2203      	movs	r2, #3
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0203 	and.w	r2, r3, #3
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 80a2 	beq.w	80031b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	4b57      	ldr	r3, [pc, #348]	; (80031d4 <HAL_GPIO_Init+0x2e8>)
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	4a56      	ldr	r2, [pc, #344]	; (80031d4 <HAL_GPIO_Init+0x2e8>)
 800307c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003080:	6453      	str	r3, [r2, #68]	; 0x44
 8003082:	4b54      	ldr	r3, [pc, #336]	; (80031d4 <HAL_GPIO_Init+0x2e8>)
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800308e:	4a52      	ldr	r2, [pc, #328]	; (80031d8 <HAL_GPIO_Init+0x2ec>)
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	089b      	lsrs	r3, r3, #2
 8003094:	3302      	adds	r3, #2
 8003096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	220f      	movs	r2, #15
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a49      	ldr	r2, [pc, #292]	; (80031dc <HAL_GPIO_Init+0x2f0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d019      	beq.n	80030ee <HAL_GPIO_Init+0x202>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a48      	ldr	r2, [pc, #288]	; (80031e0 <HAL_GPIO_Init+0x2f4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_GPIO_Init+0x1fe>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a47      	ldr	r2, [pc, #284]	; (80031e4 <HAL_GPIO_Init+0x2f8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00d      	beq.n	80030e6 <HAL_GPIO_Init+0x1fa>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a46      	ldr	r2, [pc, #280]	; (80031e8 <HAL_GPIO_Init+0x2fc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <HAL_GPIO_Init+0x1f6>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a45      	ldr	r2, [pc, #276]	; (80031ec <HAL_GPIO_Init+0x300>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d101      	bne.n	80030de <HAL_GPIO_Init+0x1f2>
 80030da:	2304      	movs	r3, #4
 80030dc:	e008      	b.n	80030f0 <HAL_GPIO_Init+0x204>
 80030de:	2307      	movs	r3, #7
 80030e0:	e006      	b.n	80030f0 <HAL_GPIO_Init+0x204>
 80030e2:	2303      	movs	r3, #3
 80030e4:	e004      	b.n	80030f0 <HAL_GPIO_Init+0x204>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e002      	b.n	80030f0 <HAL_GPIO_Init+0x204>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <HAL_GPIO_Init+0x204>
 80030ee:	2300      	movs	r3, #0
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	f002 0203 	and.w	r2, r2, #3
 80030f6:	0092      	lsls	r2, r2, #2
 80030f8:	4093      	lsls	r3, r2
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003100:	4935      	ldr	r1, [pc, #212]	; (80031d8 <HAL_GPIO_Init+0x2ec>)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	3302      	adds	r3, #2
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800310e:	4b38      	ldr	r3, [pc, #224]	; (80031f0 <HAL_GPIO_Init+0x304>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003132:	4a2f      	ldr	r2, [pc, #188]	; (80031f0 <HAL_GPIO_Init+0x304>)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003138:	4b2d      	ldr	r3, [pc, #180]	; (80031f0 <HAL_GPIO_Init+0x304>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800315c:	4a24      	ldr	r2, [pc, #144]	; (80031f0 <HAL_GPIO_Init+0x304>)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003162:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <HAL_GPIO_Init+0x304>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	43db      	mvns	r3, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003186:	4a1a      	ldr	r2, [pc, #104]	; (80031f0 <HAL_GPIO_Init+0x304>)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800318c:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <HAL_GPIO_Init+0x304>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031b0:	4a0f      	ldr	r2, [pc, #60]	; (80031f0 <HAL_GPIO_Init+0x304>)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3301      	adds	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b0f      	cmp	r3, #15
 80031c0:	f67f aea2 	bls.w	8002f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	3724      	adds	r7, #36	; 0x24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40013800 	.word	0x40013800
 80031dc:	40020000 	.word	0x40020000
 80031e0:	40020400 	.word	0x40020400
 80031e4:	40020800 	.word	0x40020800
 80031e8:	40020c00 	.word	0x40020c00
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40013c00 	.word	0x40013c00

080031f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	807b      	strh	r3, [r7, #2]
 8003200:	4613      	mov	r3, r2
 8003202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003204:	787b      	ldrb	r3, [r7, #1]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003210:	e003      	b.n	800321a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003212:	887b      	ldrh	r3, [r7, #2]
 8003214:	041a      	lsls	r2, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	619a      	str	r2, [r3, #24]
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
	...

08003228 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e12b      	b.n	8003492 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff facc 	bl	80027ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2224      	movs	r2, #36	; 0x24
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800327a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800328a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800328c:	f000 fd5c 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 8003290:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4a81      	ldr	r2, [pc, #516]	; (800349c <HAL_I2C_Init+0x274>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d807      	bhi.n	80032ac <HAL_I2C_Init+0x84>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4a80      	ldr	r2, [pc, #512]	; (80034a0 <HAL_I2C_Init+0x278>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	bf94      	ite	ls
 80032a4:	2301      	movls	r3, #1
 80032a6:	2300      	movhi	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	e006      	b.n	80032ba <HAL_I2C_Init+0x92>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a7d      	ldr	r2, [pc, #500]	; (80034a4 <HAL_I2C_Init+0x27c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	bf94      	ite	ls
 80032b4:	2301      	movls	r3, #1
 80032b6:	2300      	movhi	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e0e7      	b.n	8003492 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a78      	ldr	r2, [pc, #480]	; (80034a8 <HAL_I2C_Init+0x280>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	0c9b      	lsrs	r3, r3, #18
 80032cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	430a      	orrs	r2, r1
 80032e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4a6a      	ldr	r2, [pc, #424]	; (800349c <HAL_I2C_Init+0x274>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d802      	bhi.n	80032fc <HAL_I2C_Init+0xd4>
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	3301      	adds	r3, #1
 80032fa:	e009      	b.n	8003310 <HAL_I2C_Init+0xe8>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003302:	fb02 f303 	mul.w	r3, r2, r3
 8003306:	4a69      	ldr	r2, [pc, #420]	; (80034ac <HAL_I2C_Init+0x284>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	099b      	lsrs	r3, r3, #6
 800330e:	3301      	adds	r3, #1
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	430b      	orrs	r3, r1
 8003316:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003322:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	495c      	ldr	r1, [pc, #368]	; (800349c <HAL_I2C_Init+0x274>)
 800332c:	428b      	cmp	r3, r1
 800332e:	d819      	bhi.n	8003364 <HAL_I2C_Init+0x13c>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1e59      	subs	r1, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	fbb1 f3f3 	udiv	r3, r1, r3
 800333e:	1c59      	adds	r1, r3, #1
 8003340:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003344:	400b      	ands	r3, r1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_I2C_Init+0x138>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1e59      	subs	r1, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	fbb1 f3f3 	udiv	r3, r1, r3
 8003358:	3301      	adds	r3, #1
 800335a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335e:	e051      	b.n	8003404 <HAL_I2C_Init+0x1dc>
 8003360:	2304      	movs	r3, #4
 8003362:	e04f      	b.n	8003404 <HAL_I2C_Init+0x1dc>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d111      	bne.n	8003390 <HAL_I2C_Init+0x168>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1e58      	subs	r0, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	440b      	add	r3, r1
 800337a:	fbb0 f3f3 	udiv	r3, r0, r3
 800337e:	3301      	adds	r3, #1
 8003380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	e012      	b.n	80033b6 <HAL_I2C_Init+0x18e>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1e58      	subs	r0, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	0099      	lsls	r1, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a6:	3301      	adds	r3, #1
 80033a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_I2C_Init+0x196>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e022      	b.n	8003404 <HAL_I2C_Init+0x1dc>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10e      	bne.n	80033e4 <HAL_I2C_Init+0x1bc>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1e58      	subs	r0, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6859      	ldr	r1, [r3, #4]
 80033ce:	460b      	mov	r3, r1
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	440b      	add	r3, r1
 80033d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d8:	3301      	adds	r3, #1
 80033da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e2:	e00f      	b.n	8003404 <HAL_I2C_Init+0x1dc>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1e58      	subs	r0, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6859      	ldr	r1, [r3, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	0099      	lsls	r1, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fa:	3301      	adds	r3, #1
 80033fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003400:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	6809      	ldr	r1, [r1, #0]
 8003408:	4313      	orrs	r3, r2
 800340a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69da      	ldr	r2, [r3, #28]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003432:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6911      	ldr	r1, [r2, #16]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68d2      	ldr	r2, [r2, #12]
 800343e:	4311      	orrs	r1, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	430b      	orrs	r3, r1
 8003446:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695a      	ldr	r2, [r3, #20]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	000186a0 	.word	0x000186a0
 80034a0:	001e847f 	.word	0x001e847f
 80034a4:	003d08ff 	.word	0x003d08ff
 80034a8:	431bde83 	.word	0x431bde83
 80034ac:	10624dd3 	.word	0x10624dd3

080034b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e264      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d075      	beq.n	80035ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ce:	4ba3      	ldr	r3, [pc, #652]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d00c      	beq.n	80034f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034da:	4ba0      	ldr	r3, [pc, #640]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d112      	bne.n	800350c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034e6:	4b9d      	ldr	r3, [pc, #628]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034f2:	d10b      	bne.n	800350c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f4:	4b99      	ldr	r3, [pc, #612]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d05b      	beq.n	80035b8 <HAL_RCC_OscConfig+0x108>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d157      	bne.n	80035b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e23f      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003514:	d106      	bne.n	8003524 <HAL_RCC_OscConfig+0x74>
 8003516:	4b91      	ldr	r3, [pc, #580]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a90      	ldr	r2, [pc, #576]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e01d      	b.n	8003560 <HAL_RCC_OscConfig+0xb0>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800352c:	d10c      	bne.n	8003548 <HAL_RCC_OscConfig+0x98>
 800352e:	4b8b      	ldr	r3, [pc, #556]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a8a      	ldr	r2, [pc, #552]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	4b88      	ldr	r3, [pc, #544]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a87      	ldr	r2, [pc, #540]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e00b      	b.n	8003560 <HAL_RCC_OscConfig+0xb0>
 8003548:	4b84      	ldr	r3, [pc, #528]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a83      	ldr	r2, [pc, #524]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800354e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	4b81      	ldr	r3, [pc, #516]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a80      	ldr	r2, [pc, #512]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800355a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800355e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d013      	beq.n	8003590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7ff fbaa 	bl	8002cc0 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003570:	f7ff fba6 	bl	8002cc0 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	; 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e204      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	4b76      	ldr	r3, [pc, #472]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0xc0>
 800358e:	e014      	b.n	80035ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7ff fb96 	bl	8002cc0 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003598:	f7ff fb92 	bl	8002cc0 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e1f0      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035aa:	4b6c      	ldr	r3, [pc, #432]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0xe8>
 80035b6:	e000      	b.n	80035ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d063      	beq.n	800368e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035c6:	4b65      	ldr	r3, [pc, #404]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035d2:	4b62      	ldr	r3, [pc, #392]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d11c      	bne.n	8003618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035de:	4b5f      	ldr	r3, [pc, #380]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d116      	bne.n	8003618 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ea:	4b5c      	ldr	r3, [pc, #368]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <HAL_RCC_OscConfig+0x152>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d001      	beq.n	8003602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e1c4      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003602:	4b56      	ldr	r3, [pc, #344]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4952      	ldr	r1, [pc, #328]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003612:	4313      	orrs	r3, r2
 8003614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003616:	e03a      	b.n	800368e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d020      	beq.n	8003662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003620:	4b4f      	ldr	r3, [pc, #316]	; (8003760 <HAL_RCC_OscConfig+0x2b0>)
 8003622:	2201      	movs	r2, #1
 8003624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003626:	f7ff fb4b 	bl	8002cc0 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800362e:	f7ff fb47 	bl	8002cc0 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e1a5      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003640:	4b46      	ldr	r3, [pc, #280]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364c:	4b43      	ldr	r3, [pc, #268]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4940      	ldr	r1, [pc, #256]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800365c:	4313      	orrs	r3, r2
 800365e:	600b      	str	r3, [r1, #0]
 8003660:	e015      	b.n	800368e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003662:	4b3f      	ldr	r3, [pc, #252]	; (8003760 <HAL_RCC_OscConfig+0x2b0>)
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7ff fb2a 	bl	8002cc0 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003670:	f7ff fb26 	bl	8002cc0 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e184      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003682:	4b36      	ldr	r3, [pc, #216]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d030      	beq.n	80036fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d016      	beq.n	80036d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a2:	4b30      	ldr	r3, [pc, #192]	; (8003764 <HAL_RCC_OscConfig+0x2b4>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a8:	f7ff fb0a 	bl	8002cc0 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036b0:	f7ff fb06 	bl	8002cc0 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e164      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c2:	4b26      	ldr	r3, [pc, #152]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80036c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCC_OscConfig+0x200>
 80036ce:	e015      	b.n	80036fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d0:	4b24      	ldr	r3, [pc, #144]	; (8003764 <HAL_RCC_OscConfig+0x2b4>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d6:	f7ff faf3 	bl	8002cc0 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036de:	f7ff faef 	bl	8002cc0 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e14d      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f0:	4b1a      	ldr	r3, [pc, #104]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80036f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f0      	bne.n	80036de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80a0 	beq.w	800384a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800370a:	2300      	movs	r3, #0
 800370c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800370e:	4b13      	ldr	r3, [pc, #76]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10f      	bne.n	800373a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	4b0f      	ldr	r3, [pc, #60]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	4a0e      	ldr	r2, [pc, #56]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003728:	6413      	str	r3, [r2, #64]	; 0x40
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003736:	2301      	movs	r3, #1
 8003738:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373a:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_RCC_OscConfig+0x2b8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d121      	bne.n	800378a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <HAL_RCC_OscConfig+0x2b8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a07      	ldr	r2, [pc, #28]	; (8003768 <HAL_RCC_OscConfig+0x2b8>)
 800374c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003752:	f7ff fab5 	bl	8002cc0 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003758:	e011      	b.n	800377e <HAL_RCC_OscConfig+0x2ce>
 800375a:	bf00      	nop
 800375c:	40023800 	.word	0x40023800
 8003760:	42470000 	.word	0x42470000
 8003764:	42470e80 	.word	0x42470e80
 8003768:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376c:	f7ff faa8 	bl	8002cc0 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e106      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377e:	4b85      	ldr	r3, [pc, #532]	; (8003994 <HAL_RCC_OscConfig+0x4e4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d106      	bne.n	80037a0 <HAL_RCC_OscConfig+0x2f0>
 8003792:	4b81      	ldr	r3, [pc, #516]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	4a80      	ldr	r2, [pc, #512]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	6713      	str	r3, [r2, #112]	; 0x70
 800379e:	e01c      	b.n	80037da <HAL_RCC_OscConfig+0x32a>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b05      	cmp	r3, #5
 80037a6:	d10c      	bne.n	80037c2 <HAL_RCC_OscConfig+0x312>
 80037a8:	4b7b      	ldr	r3, [pc, #492]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	4a7a      	ldr	r2, [pc, #488]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80037ae:	f043 0304 	orr.w	r3, r3, #4
 80037b2:	6713      	str	r3, [r2, #112]	; 0x70
 80037b4:	4b78      	ldr	r3, [pc, #480]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b8:	4a77      	ldr	r2, [pc, #476]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6713      	str	r3, [r2, #112]	; 0x70
 80037c0:	e00b      	b.n	80037da <HAL_RCC_OscConfig+0x32a>
 80037c2:	4b75      	ldr	r3, [pc, #468]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c6:	4a74      	ldr	r2, [pc, #464]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	6713      	str	r3, [r2, #112]	; 0x70
 80037ce:	4b72      	ldr	r3, [pc, #456]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	4a71      	ldr	r2, [pc, #452]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80037d4:	f023 0304 	bic.w	r3, r3, #4
 80037d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d015      	beq.n	800380e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e2:	f7ff fa6d 	bl	8002cc0 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e8:	e00a      	b.n	8003800 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ea:	f7ff fa69 	bl	8002cc0 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e0c5      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003800:	4b65      	ldr	r3, [pc, #404]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ee      	beq.n	80037ea <HAL_RCC_OscConfig+0x33a>
 800380c:	e014      	b.n	8003838 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380e:	f7ff fa57 	bl	8002cc0 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003814:	e00a      	b.n	800382c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003816:	f7ff fa53 	bl	8002cc0 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	; 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e0af      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382c:	4b5a      	ldr	r3, [pc, #360]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1ee      	bne.n	8003816 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d105      	bne.n	800384a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383e:	4b56      	ldr	r3, [pc, #344]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	4a55      	ldr	r2, [pc, #340]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 8003844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003848:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 809b 	beq.w	800398a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003854:	4b50      	ldr	r3, [pc, #320]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 030c 	and.w	r3, r3, #12
 800385c:	2b08      	cmp	r3, #8
 800385e:	d05c      	beq.n	800391a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2b02      	cmp	r3, #2
 8003866:	d141      	bne.n	80038ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003868:	4b4c      	ldr	r3, [pc, #304]	; (800399c <HAL_RCC_OscConfig+0x4ec>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386e:	f7ff fa27 	bl	8002cc0 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003876:	f7ff fa23 	bl	8002cc0 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e081      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003888:	4b43      	ldr	r3, [pc, #268]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f0      	bne.n	8003876 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69da      	ldr	r2, [r3, #28]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	019b      	lsls	r3, r3, #6
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	3b01      	subs	r3, #1
 80038ae:	041b      	lsls	r3, r3, #16
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	061b      	lsls	r3, r3, #24
 80038b8:	4937      	ldr	r1, [pc, #220]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038be:	4b37      	ldr	r3, [pc, #220]	; (800399c <HAL_RCC_OscConfig+0x4ec>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7ff f9fc 	bl	8002cc0 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038cc:	f7ff f9f8 	bl	8002cc0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e056      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038de:	4b2e      	ldr	r3, [pc, #184]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0x41c>
 80038ea:	e04e      	b.n	800398a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ec:	4b2b      	ldr	r3, [pc, #172]	; (800399c <HAL_RCC_OscConfig+0x4ec>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f2:	f7ff f9e5 	bl	8002cc0 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038fa:	f7ff f9e1 	bl	8002cc0 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e03f      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390c:	4b22      	ldr	r3, [pc, #136]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f0      	bne.n	80038fa <HAL_RCC_OscConfig+0x44a>
 8003918:	e037      	b.n	800398a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e032      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003926:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d028      	beq.n	8003986 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800393e:	429a      	cmp	r2, r3
 8003940:	d121      	bne.n	8003986 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394c:	429a      	cmp	r2, r3
 800394e:	d11a      	bne.n	8003986 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003956:	4013      	ands	r3, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800395c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800395e:	4293      	cmp	r3, r2
 8003960:	d111      	bne.n	8003986 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	085b      	lsrs	r3, r3, #1
 800396e:	3b01      	subs	r3, #1
 8003970:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d107      	bne.n	8003986 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d001      	beq.n	800398a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40007000 	.word	0x40007000
 8003998:	40023800 	.word	0x40023800
 800399c:	42470060 	.word	0x42470060

080039a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0cc      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039b4:	4b68      	ldr	r3, [pc, #416]	; (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d90c      	bls.n	80039dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c2:	4b65      	ldr	r3, [pc, #404]	; (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ca:	4b63      	ldr	r3, [pc, #396]	; (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0b8      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d020      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039f4:	4b59      	ldr	r3, [pc, #356]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a58      	ldr	r2, [pc, #352]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a0c:	4b53      	ldr	r3, [pc, #332]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	4a52      	ldr	r2, [pc, #328]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a18:	4b50      	ldr	r3, [pc, #320]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	494d      	ldr	r1, [pc, #308]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d044      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d107      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d119      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e07f      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d003      	beq.n	8003a5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d107      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a5e:	4b3f      	ldr	r3, [pc, #252]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d109      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e06f      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6e:	4b3b      	ldr	r3, [pc, #236]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e067      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a7e:	4b37      	ldr	r3, [pc, #220]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f023 0203 	bic.w	r2, r3, #3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4934      	ldr	r1, [pc, #208]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a90:	f7ff f916 	bl	8002cc0 <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a98:	f7ff f912 	bl	8002cc0 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e04f      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	4b2b      	ldr	r3, [pc, #172]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 020c 	and.w	r2, r3, #12
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d1eb      	bne.n	8003a98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac0:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d20c      	bcs.n	8003ae8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ace:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad6:	4b20      	ldr	r3, [pc, #128]	; (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e032      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af4:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4916      	ldr	r1, [pc, #88]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b12:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	490e      	ldr	r1, [pc, #56]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b26:	f000 f821 	bl	8003b6c <HAL_RCC_GetSysClockFreq>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	490a      	ldr	r1, [pc, #40]	; (8003b60 <HAL_RCC_ClockConfig+0x1c0>)
 8003b38:	5ccb      	ldrb	r3, [r1, r3]
 8003b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b3e:	4a09      	ldr	r2, [pc, #36]	; (8003b64 <HAL_RCC_ClockConfig+0x1c4>)
 8003b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b42:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <HAL_RCC_ClockConfig+0x1c8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff f876 	bl	8002c38 <HAL_InitTick>

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40023c00 	.word	0x40023c00
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	08008a94 	.word	0x08008a94
 8003b64:	20002010 	.word	0x20002010
 8003b68:	20002014 	.word	0x20002014

08003b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b84:	4b67      	ldr	r3, [pc, #412]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 030c 	and.w	r3, r3, #12
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d00d      	beq.n	8003bac <HAL_RCC_GetSysClockFreq+0x40>
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	f200 80bd 	bhi.w	8003d10 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d003      	beq.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b9e:	e0b7      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ba0:	4b61      	ldr	r3, [pc, #388]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ba2:	60bb      	str	r3, [r7, #8]
       break;
 8003ba4:	e0b7      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ba6:	4b61      	ldr	r3, [pc, #388]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003ba8:	60bb      	str	r3, [r7, #8]
      break;
 8003baa:	e0b4      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bac:	4b5d      	ldr	r3, [pc, #372]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bb6:	4b5b      	ldr	r3, [pc, #364]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d04d      	beq.n	8003c5e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc2:	4b58      	ldr	r3, [pc, #352]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	099b      	lsrs	r3, r3, #6
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bd2:	f04f 0100 	mov.w	r1, #0
 8003bd6:	ea02 0800 	and.w	r8, r2, r0
 8003bda:	ea03 0901 	and.w	r9, r3, r1
 8003bde:	4640      	mov	r0, r8
 8003be0:	4649      	mov	r1, r9
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	014b      	lsls	r3, r1, #5
 8003bec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bf0:	0142      	lsls	r2, r0, #5
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	ebb0 0008 	subs.w	r0, r0, r8
 8003bfa:	eb61 0109 	sbc.w	r1, r1, r9
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	018b      	lsls	r3, r1, #6
 8003c08:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c0c:	0182      	lsls	r2, r0, #6
 8003c0e:	1a12      	subs	r2, r2, r0
 8003c10:	eb63 0301 	sbc.w	r3, r3, r1
 8003c14:	f04f 0000 	mov.w	r0, #0
 8003c18:	f04f 0100 	mov.w	r1, #0
 8003c1c:	00d9      	lsls	r1, r3, #3
 8003c1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c22:	00d0      	lsls	r0, r2, #3
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	eb12 0208 	adds.w	r2, r2, r8
 8003c2c:	eb43 0309 	adc.w	r3, r3, r9
 8003c30:	f04f 0000 	mov.w	r0, #0
 8003c34:	f04f 0100 	mov.w	r1, #0
 8003c38:	0259      	lsls	r1, r3, #9
 8003c3a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c3e:	0250      	lsls	r0, r2, #9
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	f7fd f802 	bl	8000c58 <__aeabi_uldivmod>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4613      	mov	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	e04a      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c5e:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	099b      	lsrs	r3, r3, #6
 8003c64:	461a      	mov	r2, r3
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c6e:	f04f 0100 	mov.w	r1, #0
 8003c72:	ea02 0400 	and.w	r4, r2, r0
 8003c76:	ea03 0501 	and.w	r5, r3, r1
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	4629      	mov	r1, r5
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	014b      	lsls	r3, r1, #5
 8003c88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c8c:	0142      	lsls	r2, r0, #5
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	1b00      	subs	r0, r0, r4
 8003c94:	eb61 0105 	sbc.w	r1, r1, r5
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	018b      	lsls	r3, r1, #6
 8003ca2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ca6:	0182      	lsls	r2, r0, #6
 8003ca8:	1a12      	subs	r2, r2, r0
 8003caa:	eb63 0301 	sbc.w	r3, r3, r1
 8003cae:	f04f 0000 	mov.w	r0, #0
 8003cb2:	f04f 0100 	mov.w	r1, #0
 8003cb6:	00d9      	lsls	r1, r3, #3
 8003cb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cbc:	00d0      	lsls	r0, r2, #3
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	1912      	adds	r2, r2, r4
 8003cc4:	eb45 0303 	adc.w	r3, r5, r3
 8003cc8:	f04f 0000 	mov.w	r0, #0
 8003ccc:	f04f 0100 	mov.w	r1, #0
 8003cd0:	0299      	lsls	r1, r3, #10
 8003cd2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cd6:	0290      	lsls	r0, r2, #10
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4619      	mov	r1, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	f7fc ffb6 	bl	8000c58 <__aeabi_uldivmod>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	0c1b      	lsrs	r3, r3, #16
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	60bb      	str	r3, [r7, #8]
      break;
 8003d0e:	e002      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d12:	60bb      	str	r3, [r7, #8]
      break;
 8003d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d16:	68bb      	ldr	r3, [r7, #8]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800
 8003d28:	00f42400 	.word	0x00f42400
 8003d2c:	007a1200 	.word	0x007a1200

08003d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d34:	4b03      	ldr	r3, [pc, #12]	; (8003d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d36:	681b      	ldr	r3, [r3, #0]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20002010 	.word	0x20002010

08003d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d4c:	f7ff fff0 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	0a9b      	lsrs	r3, r3, #10
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	4903      	ldr	r1, [pc, #12]	; (8003d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	08008aa4 	.word	0x08008aa4

08003d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d74:	f7ff ffdc 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	0b5b      	lsrs	r3, r3, #13
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	4903      	ldr	r1, [pc, #12]	; (8003d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d86:	5ccb      	ldrb	r3, [r1, r3]
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40023800 	.word	0x40023800
 8003d94:	08008aa4 	.word	0x08008aa4

08003d98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e07b      	b.n	8003ea2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d108      	bne.n	8003dc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dba:	d009      	beq.n	8003dd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	61da      	str	r2, [r3, #28]
 8003dc2:	e005      	b.n	8003dd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fe fd46 	bl	800287c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e40:	431a      	orrs	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e54:	ea42 0103 	orr.w	r1, r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	0c1b      	lsrs	r3, r3, #16
 8003e6e:	f003 0104 	and.w	r1, r3, #4
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	f003 0210 	and.w	r2, r3, #16
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69da      	ldr	r2, [r3, #28]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b088      	sub	sp, #32
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	603b      	str	r3, [r7, #0]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_SPI_Transmit+0x22>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e126      	b.n	800411a <HAL_SPI_Transmit+0x270>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ed4:	f7fe fef4 	bl	8002cc0 <HAL_GetTick>
 8003ed8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d002      	beq.n	8003ef0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
 8003eec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003eee:	e10b      	b.n	8004108 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_SPI_Transmit+0x52>
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d102      	bne.n	8003f02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f00:	e102      	b.n	8004108 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2203      	movs	r2, #3
 8003f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	88fa      	ldrh	r2, [r7, #6]
 8003f1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	88fa      	ldrh	r2, [r7, #6]
 8003f20:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f48:	d10f      	bne.n	8003f6a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f74:	2b40      	cmp	r3, #64	; 0x40
 8003f76:	d007      	beq.n	8003f88 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f90:	d14b      	bne.n	800402a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <HAL_SPI_Transmit+0xf6>
 8003f9a:	8afb      	ldrh	r3, [r7, #22]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d13e      	bne.n	800401e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	881a      	ldrh	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	1c9a      	adds	r2, r3, #2
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003fc4:	e02b      	b.n	800401e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d112      	bne.n	8003ffa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	881a      	ldrh	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	1c9a      	adds	r2, r3, #2
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ff8:	e011      	b.n	800401e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ffa:	f7fe fe61 	bl	8002cc0 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d803      	bhi.n	8004012 <HAL_SPI_Transmit+0x168>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004010:	d102      	bne.n	8004018 <HAL_SPI_Transmit+0x16e>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d102      	bne.n	800401e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800401c:	e074      	b.n	8004108 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1ce      	bne.n	8003fc6 <HAL_SPI_Transmit+0x11c>
 8004028:	e04c      	b.n	80040c4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_SPI_Transmit+0x18e>
 8004032:	8afb      	ldrh	r3, [r7, #22]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d140      	bne.n	80040ba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	330c      	adds	r3, #12
 8004042:	7812      	ldrb	r2, [r2, #0]
 8004044:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800405e:	e02c      	b.n	80040ba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b02      	cmp	r3, #2
 800406c:	d113      	bne.n	8004096 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	330c      	adds	r3, #12
 8004078:	7812      	ldrb	r2, [r2, #0]
 800407a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	86da      	strh	r2, [r3, #54]	; 0x36
 8004094:	e011      	b.n	80040ba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004096:	f7fe fe13 	bl	8002cc0 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d803      	bhi.n	80040ae <HAL_SPI_Transmit+0x204>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040ac:	d102      	bne.n	80040b4 <HAL_SPI_Transmit+0x20a>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d102      	bne.n	80040ba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040b8:	e026      	b.n	8004108 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040be:	b29b      	uxth	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1cd      	bne.n	8004060 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	6839      	ldr	r1, [r7, #0]
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 fbd9 	bl	8004880 <SPI_EndRxTxTransaction>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040e2:	2300      	movs	r3, #0
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e000      	b.n	8004108 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004106:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004118:	7ffb      	ldrb	r3, [r7, #31]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3720      	adds	r7, #32
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b088      	sub	sp, #32
 8004126:	af02      	add	r7, sp, #8
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	603b      	str	r3, [r7, #0]
 800412e:	4613      	mov	r3, r2
 8004130:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800413e:	d112      	bne.n	8004166 <HAL_SPI_Receive+0x44>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10e      	bne.n	8004166 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2204      	movs	r2, #4
 800414c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004150:	88fa      	ldrh	r2, [r7, #6]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	4613      	mov	r3, r2
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f8f1 	bl	8004344 <HAL_SPI_TransmitReceive>
 8004162:	4603      	mov	r3, r0
 8004164:	e0ea      	b.n	800433c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_SPI_Receive+0x52>
 8004170:	2302      	movs	r3, #2
 8004172:	e0e3      	b.n	800433c <HAL_SPI_Receive+0x21a>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800417c:	f7fe fda0 	bl	8002cc0 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b01      	cmp	r3, #1
 800418c:	d002      	beq.n	8004194 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800418e:	2302      	movs	r3, #2
 8004190:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004192:	e0ca      	b.n	800432a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_SPI_Receive+0x7e>
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041a4:	e0c1      	b.n	800432a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2204      	movs	r2, #4
 80041aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	88fa      	ldrh	r2, [r7, #6]
 80041be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	88fa      	ldrh	r2, [r7, #6]
 80041c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ec:	d10f      	bne.n	800420e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800420c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004218:	2b40      	cmp	r3, #64	; 0x40
 800421a:	d007      	beq.n	800422c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800422a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d162      	bne.n	80042fa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004234:	e02e      	b.n	8004294 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b01      	cmp	r3, #1
 8004242:	d115      	bne.n	8004270 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f103 020c 	add.w	r2, r3, #12
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004250:	7812      	ldrb	r2, [r2, #0]
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800426e:	e011      	b.n	8004294 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004270:	f7fe fd26 	bl	8002cc0 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d803      	bhi.n	8004288 <HAL_SPI_Receive+0x166>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004286:	d102      	bne.n	800428e <HAL_SPI_Receive+0x16c>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d102      	bne.n	8004294 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004292:	e04a      	b.n	800432a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1cb      	bne.n	8004236 <HAL_SPI_Receive+0x114>
 800429e:	e031      	b.n	8004304 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d113      	bne.n	80042d6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	b292      	uxth	r2, r2
 80042ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	1c9a      	adds	r2, r3, #2
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042d4:	e011      	b.n	80042fa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042d6:	f7fe fcf3 	bl	8002cc0 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d803      	bhi.n	80042ee <HAL_SPI_Receive+0x1cc>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ec:	d102      	bne.n	80042f4 <HAL_SPI_Receive+0x1d2>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d102      	bne.n	80042fa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80042f8:	e017      	b.n	800432a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1cd      	bne.n	80042a0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	6839      	ldr	r1, [r7, #0]
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 fa53 	bl	80047b4 <SPI_EndRxTransaction>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	75fb      	strb	r3, [r7, #23]
 8004326:	e000      	b.n	800432a <HAL_SPI_Receive+0x208>
  }

error :
 8004328:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800433a:	7dfb      	ldrb	r3, [r7, #23]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08c      	sub	sp, #48	; 0x30
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004352:	2301      	movs	r3, #1
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_SPI_TransmitReceive+0x26>
 8004366:	2302      	movs	r3, #2
 8004368:	e18a      	b.n	8004680 <HAL_SPI_TransmitReceive+0x33c>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004372:	f7fe fca5 	bl	8002cc0 <HAL_GetTick>
 8004376:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004388:	887b      	ldrh	r3, [r7, #2]
 800438a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800438c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004390:	2b01      	cmp	r3, #1
 8004392:	d00f      	beq.n	80043b4 <HAL_SPI_TransmitReceive+0x70>
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800439a:	d107      	bne.n	80043ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d103      	bne.n	80043ac <HAL_SPI_TransmitReceive+0x68>
 80043a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d003      	beq.n	80043b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80043ac:	2302      	movs	r3, #2
 80043ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043b2:	e15b      	b.n	800466c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_SPI_TransmitReceive+0x82>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <HAL_SPI_TransmitReceive+0x82>
 80043c0:	887b      	ldrh	r3, [r7, #2]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d103      	bne.n	80043ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043cc:	e14e      	b.n	800466c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d003      	beq.n	80043e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2205      	movs	r2, #5
 80043de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	887a      	ldrh	r2, [r7, #2]
 80043f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	887a      	ldrh	r2, [r7, #2]
 80043f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	887a      	ldrh	r2, [r7, #2]
 8004404:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	887a      	ldrh	r2, [r7, #2]
 800440a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004422:	2b40      	cmp	r3, #64	; 0x40
 8004424:	d007      	beq.n	8004436 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004434:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800443e:	d178      	bne.n	8004532 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_SPI_TransmitReceive+0x10a>
 8004448:	8b7b      	ldrh	r3, [r7, #26]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d166      	bne.n	800451c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	881a      	ldrh	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	1c9a      	adds	r2, r3, #2
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004472:	e053      	b.n	800451c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b02      	cmp	r3, #2
 8004480:	d11b      	bne.n	80044ba <HAL_SPI_TransmitReceive+0x176>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d016      	beq.n	80044ba <HAL_SPI_TransmitReceive+0x176>
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	2b01      	cmp	r3, #1
 8004490:	d113      	bne.n	80044ba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	881a      	ldrh	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	1c9a      	adds	r2, r3, #2
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d119      	bne.n	80044fc <HAL_SPI_TransmitReceive+0x1b8>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d014      	beq.n	80044fc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	b292      	uxth	r2, r2
 80044de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	1c9a      	adds	r2, r3, #2
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044f8:	2301      	movs	r3, #1
 80044fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044fc:	f7fe fbe0 	bl	8002cc0 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004508:	429a      	cmp	r2, r3
 800450a:	d807      	bhi.n	800451c <HAL_SPI_TransmitReceive+0x1d8>
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004512:	d003      	beq.n	800451c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800451a:	e0a7      	b.n	800466c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1a6      	bne.n	8004474 <HAL_SPI_TransmitReceive+0x130>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1a1      	bne.n	8004474 <HAL_SPI_TransmitReceive+0x130>
 8004530:	e07c      	b.n	800462c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_SPI_TransmitReceive+0x1fc>
 800453a:	8b7b      	ldrh	r3, [r7, #26]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d16b      	bne.n	8004618 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	330c      	adds	r3, #12
 800454a:	7812      	ldrb	r2, [r2, #0]
 800454c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004566:	e057      	b.n	8004618 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b02      	cmp	r3, #2
 8004574:	d11c      	bne.n	80045b0 <HAL_SPI_TransmitReceive+0x26c>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d017      	beq.n	80045b0 <HAL_SPI_TransmitReceive+0x26c>
 8004580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004582:	2b01      	cmp	r3, #1
 8004584:	d114      	bne.n	80045b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	330c      	adds	r3, #12
 8004590:	7812      	ldrb	r2, [r2, #0]
 8004592:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d119      	bne.n	80045f2 <HAL_SPI_TransmitReceive+0x2ae>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d014      	beq.n	80045f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045ee:	2301      	movs	r3, #1
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045f2:	f7fe fb65 	bl	8002cc0 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045fe:	429a      	cmp	r2, r3
 8004600:	d803      	bhi.n	800460a <HAL_SPI_TransmitReceive+0x2c6>
 8004602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004608:	d102      	bne.n	8004610 <HAL_SPI_TransmitReceive+0x2cc>
 800460a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460c:	2b00      	cmp	r3, #0
 800460e:	d103      	bne.n	8004618 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004616:	e029      	b.n	800466c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1a2      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x224>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d19d      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800462c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f925 	bl	8004880 <SPI_EndRxTxTransaction>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d006      	beq.n	800464a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2220      	movs	r2, #32
 8004646:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004648:	e010      	b.n	800466c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10b      	bne.n	800466a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	e000      	b.n	800466c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800466a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800467c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004680:	4618      	mov	r0, r3
 8004682:	3730      	adds	r7, #48	; 0x30
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004696:	b2db      	uxtb	r3, r3
}
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	4613      	mov	r3, r2
 80046b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046b4:	f7fe fb04 	bl	8002cc0 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	4413      	add	r3, r2
 80046c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046c4:	f7fe fafc 	bl	8002cc0 <HAL_GetTick>
 80046c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046ca:	4b39      	ldr	r3, [pc, #228]	; (80047b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	015b      	lsls	r3, r3, #5
 80046d0:	0d1b      	lsrs	r3, r3, #20
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	fb02 f303 	mul.w	r3, r2, r3
 80046d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046da:	e054      	b.n	8004786 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046e2:	d050      	beq.n	8004786 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046e4:	f7fe faec 	bl	8002cc0 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d902      	bls.n	80046fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d13d      	bne.n	8004776 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004708:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004712:	d111      	bne.n	8004738 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471c:	d004      	beq.n	8004728 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004726:	d107      	bne.n	8004738 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004736:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004740:	d10f      	bne.n	8004762 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004760:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e017      	b.n	80047a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	3b01      	subs	r3, #1
 8004784:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4013      	ands	r3, r2
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	429a      	cmp	r2, r3
 8004794:	bf0c      	ite	eq
 8004796:	2301      	moveq	r3, #1
 8004798:	2300      	movne	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d19b      	bne.n	80046dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20002010 	.word	0x20002010

080047b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047c8:	d111      	bne.n	80047ee <SPI_EndRxTransaction+0x3a>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d2:	d004      	beq.n	80047de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047dc:	d107      	bne.n	80047ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047f6:	d12a      	bne.n	800484e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004800:	d012      	beq.n	8004828 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2200      	movs	r2, #0
 800480a:	2180      	movs	r1, #128	; 0x80
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f7ff ff49 	bl	80046a4 <SPI_WaitFlagStateUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d02d      	beq.n	8004874 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481c:	f043 0220 	orr.w	r2, r3, #32
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e026      	b.n	8004876 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2200      	movs	r2, #0
 8004830:	2101      	movs	r1, #1
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f7ff ff36 	bl	80046a4 <SPI_WaitFlagStateUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d01a      	beq.n	8004874 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	f043 0220 	orr.w	r2, r3, #32
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e013      	b.n	8004876 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2200      	movs	r2, #0
 8004856:	2101      	movs	r1, #1
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f7ff ff23 	bl	80046a4 <SPI_WaitFlagStateUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d007      	beq.n	8004874 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004868:	f043 0220 	orr.w	r2, r3, #32
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e000      	b.n	8004876 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af02      	add	r7, sp, #8
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800488c:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <SPI_EndRxTxTransaction+0x7c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a1b      	ldr	r2, [pc, #108]	; (8004900 <SPI_EndRxTxTransaction+0x80>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	0d5b      	lsrs	r3, r3, #21
 8004898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800489c:	fb02 f303 	mul.w	r3, r2, r3
 80048a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048aa:	d112      	bne.n	80048d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2200      	movs	r2, #0
 80048b4:	2180      	movs	r1, #128	; 0x80
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f7ff fef4 	bl	80046a4 <SPI_WaitFlagStateUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d016      	beq.n	80048f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f043 0220 	orr.w	r2, r3, #32
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e00f      	b.n	80048f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	3b01      	subs	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e8:	2b80      	cmp	r3, #128	; 0x80
 80048ea:	d0f2      	beq.n	80048d2 <SPI_EndRxTxTransaction+0x52>
 80048ec:	e000      	b.n	80048f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80048ee:	bf00      	nop
  }

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20002010 	.word	0x20002010
 8004900:	165e9f81 	.word	0x165e9f81

08004904 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e03f      	b.n	8004996 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fd ffee 	bl	800290c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2224      	movs	r2, #36	; 0x24
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004946:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f929 	bl	8004ba0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800495c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695a      	ldr	r2, [r3, #20]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800496c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800497c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b08a      	sub	sp, #40	; 0x28
 80049a2:	af02      	add	r7, sp, #8
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	603b      	str	r3, [r7, #0]
 80049aa:	4613      	mov	r3, r2
 80049ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b20      	cmp	r3, #32
 80049bc:	d17c      	bne.n	8004ab8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <HAL_UART_Transmit+0x2c>
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e075      	b.n	8004aba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_UART_Transmit+0x3e>
 80049d8:	2302      	movs	r3, #2
 80049da:	e06e      	b.n	8004aba <HAL_UART_Transmit+0x11c>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2221      	movs	r2, #33	; 0x21
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049f2:	f7fe f965 	bl	8002cc0 <HAL_GetTick>
 80049f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	88fa      	ldrh	r2, [r7, #6]
 80049fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	88fa      	ldrh	r2, [r7, #6]
 8004a02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0c:	d108      	bne.n	8004a20 <HAL_UART_Transmit+0x82>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d104      	bne.n	8004a20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	e003      	b.n	8004a28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a30:	e02a      	b.n	8004a88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2180      	movs	r1, #128	; 0x80
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 f840 	bl	8004ac2 <UART_WaitOnFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e036      	b.n	8004aba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10b      	bne.n	8004a6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	3302      	adds	r3, #2
 8004a66:	61bb      	str	r3, [r7, #24]
 8004a68:	e007      	b.n	8004a7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	781a      	ldrb	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	3301      	adds	r3, #1
 8004a78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1cf      	bne.n	8004a32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2140      	movs	r1, #64	; 0x40
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f810 	bl	8004ac2 <UART_WaitOnFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e006      	b.n	8004aba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e000      	b.n	8004aba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ab8:	2302      	movs	r3, #2
  }
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3720      	adds	r7, #32
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b090      	sub	sp, #64	; 0x40
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	603b      	str	r3, [r7, #0]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad2:	e050      	b.n	8004b76 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ada:	d04c      	beq.n	8004b76 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ae2:	f7fe f8ed 	bl	8002cc0 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d241      	bcs.n	8004b76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	330c      	adds	r3, #12
 8004af8:	62bb      	str	r3, [r7, #40]	; 0x28
 \return        value of type uint32_t at (*ptr)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr) {
	uint32_t result;

	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
	return (result);
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	330c      	adds	r3, #12
 8004b10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b12:	637a      	str	r2, [r7, #52]	; 0x34
 8004b14:	633b      	str	r3, [r7, #48]	; 0x30
 \return          1  Function failed
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr) {
	uint32_t result;

	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	return (result);
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e5      	bne.n	8004af2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3314      	adds	r3, #20
 8004b2c:	617b      	str	r3, [r7, #20]
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	613b      	str	r3, [r7, #16]
	return (result);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f023 0301 	bic.w	r3, r3, #1
 8004b3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3314      	adds	r3, #20
 8004b44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b46:	623a      	str	r2, [r7, #32]
 8004b48:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	69f9      	ldr	r1, [r7, #28]
 8004b4c:	6a3a      	ldr	r2, [r7, #32]
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	61bb      	str	r3, [r7, #24]
	return (result);
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e5      	bne.n	8004b26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e00f      	b.n	8004b96 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	bf0c      	ite	eq
 8004b86:	2301      	moveq	r3, #1
 8004b88:	2300      	movne	r3, #0
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d09f      	beq.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3740      	adds	r7, #64	; 0x40
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba4:	b09f      	sub	sp, #124	; 0x7c
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb6:	68d9      	ldr	r1, [r3, #12]
 8004bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	ea40 0301 	orr.w	r3, r0, r1
 8004bc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004be4:	f021 010c 	bic.w	r1, r1, #12
 8004be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bfe:	6999      	ldr	r1, [r3, #24]
 8004c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	ea40 0301 	orr.w	r3, r0, r1
 8004c08:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4bc5      	ldr	r3, [pc, #788]	; (8004f24 <UART_SetConfig+0x384>)
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d004      	beq.n	8004c1e <UART_SetConfig+0x7e>
 8004c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	4bc3      	ldr	r3, [pc, #780]	; (8004f28 <UART_SetConfig+0x388>)
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d103      	bne.n	8004c26 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c1e:	f7ff f8a7 	bl	8003d70 <HAL_RCC_GetPCLK2Freq>
 8004c22:	6778      	str	r0, [r7, #116]	; 0x74
 8004c24:	e002      	b.n	8004c2c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c26:	f7ff f88f 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 8004c2a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c34:	f040 80b6 	bne.w	8004da4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c3a:	461c      	mov	r4, r3
 8004c3c:	f04f 0500 	mov.w	r5, #0
 8004c40:	4622      	mov	r2, r4
 8004c42:	462b      	mov	r3, r5
 8004c44:	1891      	adds	r1, r2, r2
 8004c46:	6439      	str	r1, [r7, #64]	; 0x40
 8004c48:	415b      	adcs	r3, r3
 8004c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c50:	1912      	adds	r2, r2, r4
 8004c52:	eb45 0303 	adc.w	r3, r5, r3
 8004c56:	f04f 0000 	mov.w	r0, #0
 8004c5a:	f04f 0100 	mov.w	r1, #0
 8004c5e:	00d9      	lsls	r1, r3, #3
 8004c60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c64:	00d0      	lsls	r0, r2, #3
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	1911      	adds	r1, r2, r4
 8004c6c:	6639      	str	r1, [r7, #96]	; 0x60
 8004c6e:	416b      	adcs	r3, r5
 8004c70:	667b      	str	r3, [r7, #100]	; 0x64
 8004c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	461a      	mov	r2, r3
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	1891      	adds	r1, r2, r2
 8004c7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c80:	415b      	adcs	r3, r3
 8004c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c88:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c8c:	f7fb ffe4 	bl	8000c58 <__aeabi_uldivmod>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4ba5      	ldr	r3, [pc, #660]	; (8004f2c <UART_SetConfig+0x38c>)
 8004c96:	fba3 2302 	umull	r2, r3, r3, r2
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	011e      	lsls	r6, r3, #4
 8004c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ca0:	461c      	mov	r4, r3
 8004ca2:	f04f 0500 	mov.w	r5, #0
 8004ca6:	4622      	mov	r2, r4
 8004ca8:	462b      	mov	r3, r5
 8004caa:	1891      	adds	r1, r2, r2
 8004cac:	6339      	str	r1, [r7, #48]	; 0x30
 8004cae:	415b      	adcs	r3, r3
 8004cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8004cb2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004cb6:	1912      	adds	r2, r2, r4
 8004cb8:	eb45 0303 	adc.w	r3, r5, r3
 8004cbc:	f04f 0000 	mov.w	r0, #0
 8004cc0:	f04f 0100 	mov.w	r1, #0
 8004cc4:	00d9      	lsls	r1, r3, #3
 8004cc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cca:	00d0      	lsls	r0, r2, #3
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	1911      	adds	r1, r2, r4
 8004cd2:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cd4:	416b      	adcs	r3, r5
 8004cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	1891      	adds	r1, r2, r2
 8004ce4:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ce6:	415b      	adcs	r3, r3
 8004ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004cf2:	f7fb ffb1 	bl	8000c58 <__aeabi_uldivmod>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4b8c      	ldr	r3, [pc, #560]	; (8004f2c <UART_SetConfig+0x38c>)
 8004cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004d00:	095b      	lsrs	r3, r3, #5
 8004d02:	2164      	movs	r1, #100	; 0x64
 8004d04:	fb01 f303 	mul.w	r3, r1, r3
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	3332      	adds	r3, #50	; 0x32
 8004d0e:	4a87      	ldr	r2, [pc, #540]	; (8004f2c <UART_SetConfig+0x38c>)
 8004d10:	fba2 2303 	umull	r2, r3, r2, r3
 8004d14:	095b      	lsrs	r3, r3, #5
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d1c:	441e      	add	r6, r3
 8004d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d20:	4618      	mov	r0, r3
 8004d22:	f04f 0100 	mov.w	r1, #0
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	1894      	adds	r4, r2, r2
 8004d2c:	623c      	str	r4, [r7, #32]
 8004d2e:	415b      	adcs	r3, r3
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
 8004d32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d36:	1812      	adds	r2, r2, r0
 8004d38:	eb41 0303 	adc.w	r3, r1, r3
 8004d3c:	f04f 0400 	mov.w	r4, #0
 8004d40:	f04f 0500 	mov.w	r5, #0
 8004d44:	00dd      	lsls	r5, r3, #3
 8004d46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d4a:	00d4      	lsls	r4, r2, #3
 8004d4c:	4622      	mov	r2, r4
 8004d4e:	462b      	mov	r3, r5
 8004d50:	1814      	adds	r4, r2, r0
 8004d52:	653c      	str	r4, [r7, #80]	; 0x50
 8004d54:	414b      	adcs	r3, r1
 8004d56:	657b      	str	r3, [r7, #84]	; 0x54
 8004d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	1891      	adds	r1, r2, r2
 8004d64:	61b9      	str	r1, [r7, #24]
 8004d66:	415b      	adcs	r3, r3
 8004d68:	61fb      	str	r3, [r7, #28]
 8004d6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d6e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004d72:	f7fb ff71 	bl	8000c58 <__aeabi_uldivmod>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4b6c      	ldr	r3, [pc, #432]	; (8004f2c <UART_SetConfig+0x38c>)
 8004d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	2164      	movs	r1, #100	; 0x64
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	3332      	adds	r3, #50	; 0x32
 8004d8e:	4a67      	ldr	r2, [pc, #412]	; (8004f2c <UART_SetConfig+0x38c>)
 8004d90:	fba2 2303 	umull	r2, r3, r2, r3
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	f003 0207 	and.w	r2, r3, #7
 8004d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4432      	add	r2, r6
 8004da0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004da2:	e0b9      	b.n	8004f18 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004da4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004da6:	461c      	mov	r4, r3
 8004da8:	f04f 0500 	mov.w	r5, #0
 8004dac:	4622      	mov	r2, r4
 8004dae:	462b      	mov	r3, r5
 8004db0:	1891      	adds	r1, r2, r2
 8004db2:	6139      	str	r1, [r7, #16]
 8004db4:	415b      	adcs	r3, r3
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004dbc:	1912      	adds	r2, r2, r4
 8004dbe:	eb45 0303 	adc.w	r3, r5, r3
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f04f 0100 	mov.w	r1, #0
 8004dca:	00d9      	lsls	r1, r3, #3
 8004dcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dd0:	00d0      	lsls	r0, r2, #3
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	eb12 0804 	adds.w	r8, r2, r4
 8004dda:	eb43 0905 	adc.w	r9, r3, r5
 8004dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f04f 0100 	mov.w	r1, #0
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	008b      	lsls	r3, r1, #2
 8004df2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004df6:	0082      	lsls	r2, r0, #2
 8004df8:	4640      	mov	r0, r8
 8004dfa:	4649      	mov	r1, r9
 8004dfc:	f7fb ff2c 	bl	8000c58 <__aeabi_uldivmod>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4b49      	ldr	r3, [pc, #292]	; (8004f2c <UART_SetConfig+0x38c>)
 8004e06:	fba3 2302 	umull	r2, r3, r3, r2
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	011e      	lsls	r6, r3, #4
 8004e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e10:	4618      	mov	r0, r3
 8004e12:	f04f 0100 	mov.w	r1, #0
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	1894      	adds	r4, r2, r2
 8004e1c:	60bc      	str	r4, [r7, #8]
 8004e1e:	415b      	adcs	r3, r3
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e26:	1812      	adds	r2, r2, r0
 8004e28:	eb41 0303 	adc.w	r3, r1, r3
 8004e2c:	f04f 0400 	mov.w	r4, #0
 8004e30:	f04f 0500 	mov.w	r5, #0
 8004e34:	00dd      	lsls	r5, r3, #3
 8004e36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e3a:	00d4      	lsls	r4, r2, #3
 8004e3c:	4622      	mov	r2, r4
 8004e3e:	462b      	mov	r3, r5
 8004e40:	1814      	adds	r4, r2, r0
 8004e42:	64bc      	str	r4, [r7, #72]	; 0x48
 8004e44:	414b      	adcs	r3, r1
 8004e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f04f 0100 	mov.w	r1, #0
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	008b      	lsls	r3, r1, #2
 8004e5c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e60:	0082      	lsls	r2, r0, #2
 8004e62:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e66:	f7fb fef7 	bl	8000c58 <__aeabi_uldivmod>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4b2f      	ldr	r3, [pc, #188]	; (8004f2c <UART_SetConfig+0x38c>)
 8004e70:	fba3 1302 	umull	r1, r3, r3, r2
 8004e74:	095b      	lsrs	r3, r3, #5
 8004e76:	2164      	movs	r1, #100	; 0x64
 8004e78:	fb01 f303 	mul.w	r3, r1, r3
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	3332      	adds	r3, #50	; 0x32
 8004e82:	4a2a      	ldr	r2, [pc, #168]	; (8004f2c <UART_SetConfig+0x38c>)
 8004e84:	fba2 2303 	umull	r2, r3, r2, r3
 8004e88:	095b      	lsrs	r3, r3, #5
 8004e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e8e:	441e      	add	r6, r3
 8004e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e92:	4618      	mov	r0, r3
 8004e94:	f04f 0100 	mov.w	r1, #0
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	1894      	adds	r4, r2, r2
 8004e9e:	603c      	str	r4, [r7, #0]
 8004ea0:	415b      	adcs	r3, r3
 8004ea2:	607b      	str	r3, [r7, #4]
 8004ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ea8:	1812      	adds	r2, r2, r0
 8004eaa:	eb41 0303 	adc.w	r3, r1, r3
 8004eae:	f04f 0400 	mov.w	r4, #0
 8004eb2:	f04f 0500 	mov.w	r5, #0
 8004eb6:	00dd      	lsls	r5, r3, #3
 8004eb8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ebc:	00d4      	lsls	r4, r2, #3
 8004ebe:	4622      	mov	r2, r4
 8004ec0:	462b      	mov	r3, r5
 8004ec2:	eb12 0a00 	adds.w	sl, r2, r0
 8004ec6:	eb43 0b01 	adc.w	fp, r3, r1
 8004eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f04f 0100 	mov.w	r1, #0
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	008b      	lsls	r3, r1, #2
 8004ede:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ee2:	0082      	lsls	r2, r0, #2
 8004ee4:	4650      	mov	r0, sl
 8004ee6:	4659      	mov	r1, fp
 8004ee8:	f7fb feb6 	bl	8000c58 <__aeabi_uldivmod>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4b0e      	ldr	r3, [pc, #56]	; (8004f2c <UART_SetConfig+0x38c>)
 8004ef2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	2164      	movs	r1, #100	; 0x64
 8004efa:	fb01 f303 	mul.w	r3, r1, r3
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	3332      	adds	r3, #50	; 0x32
 8004f04:	4a09      	ldr	r2, [pc, #36]	; (8004f2c <UART_SetConfig+0x38c>)
 8004f06:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	f003 020f 	and.w	r2, r3, #15
 8004f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4432      	add	r2, r6
 8004f16:	609a      	str	r2, [r3, #8]
}
 8004f18:	bf00      	nop
 8004f1a:	377c      	adds	r7, #124	; 0x7c
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f22:	bf00      	nop
 8004f24:	40011000 	.word	0x40011000
 8004f28:	40011400 	.word	0x40011400
 8004f2c:	51eb851f 	.word	0x51eb851f

08004f30 <__errno>:
 8004f30:	4b01      	ldr	r3, [pc, #4]	; (8004f38 <__errno+0x8>)
 8004f32:	6818      	ldr	r0, [r3, #0]
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	2000201c 	.word	0x2000201c

08004f3c <__libc_init_array>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	4d0d      	ldr	r5, [pc, #52]	; (8004f74 <__libc_init_array+0x38>)
 8004f40:	4c0d      	ldr	r4, [pc, #52]	; (8004f78 <__libc_init_array+0x3c>)
 8004f42:	1b64      	subs	r4, r4, r5
 8004f44:	10a4      	asrs	r4, r4, #2
 8004f46:	2600      	movs	r6, #0
 8004f48:	42a6      	cmp	r6, r4
 8004f4a:	d109      	bne.n	8004f60 <__libc_init_array+0x24>
 8004f4c:	4d0b      	ldr	r5, [pc, #44]	; (8004f7c <__libc_init_array+0x40>)
 8004f4e:	4c0c      	ldr	r4, [pc, #48]	; (8004f80 <__libc_init_array+0x44>)
 8004f50:	f003 fc4e 	bl	80087f0 <_init>
 8004f54:	1b64      	subs	r4, r4, r5
 8004f56:	10a4      	asrs	r4, r4, #2
 8004f58:	2600      	movs	r6, #0
 8004f5a:	42a6      	cmp	r6, r4
 8004f5c:	d105      	bne.n	8004f6a <__libc_init_array+0x2e>
 8004f5e:	bd70      	pop	{r4, r5, r6, pc}
 8004f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f64:	4798      	blx	r3
 8004f66:	3601      	adds	r6, #1
 8004f68:	e7ee      	b.n	8004f48 <__libc_init_array+0xc>
 8004f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f6e:	4798      	blx	r3
 8004f70:	3601      	adds	r6, #1
 8004f72:	e7f2      	b.n	8004f5a <__libc_init_array+0x1e>
 8004f74:	08008f08 	.word	0x08008f08
 8004f78:	08008f08 	.word	0x08008f08
 8004f7c:	08008f08 	.word	0x08008f08
 8004f80:	08008f0c 	.word	0x08008f0c

08004f84 <memset>:
 8004f84:	4402      	add	r2, r0
 8004f86:	4603      	mov	r3, r0
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d100      	bne.n	8004f8e <memset+0xa>
 8004f8c:	4770      	bx	lr
 8004f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f92:	e7f9      	b.n	8004f88 <memset+0x4>

08004f94 <__cvt>:
 8004f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f98:	ec55 4b10 	vmov	r4, r5, d0
 8004f9c:	2d00      	cmp	r5, #0
 8004f9e:	460e      	mov	r6, r1
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	462b      	mov	r3, r5
 8004fa4:	bfbb      	ittet	lt
 8004fa6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004faa:	461d      	movlt	r5, r3
 8004fac:	2300      	movge	r3, #0
 8004fae:	232d      	movlt	r3, #45	; 0x2d
 8004fb0:	700b      	strb	r3, [r1, #0]
 8004fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004fb8:	4691      	mov	r9, r2
 8004fba:	f023 0820 	bic.w	r8, r3, #32
 8004fbe:	bfbc      	itt	lt
 8004fc0:	4622      	movlt	r2, r4
 8004fc2:	4614      	movlt	r4, r2
 8004fc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fc8:	d005      	beq.n	8004fd6 <__cvt+0x42>
 8004fca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004fce:	d100      	bne.n	8004fd2 <__cvt+0x3e>
 8004fd0:	3601      	adds	r6, #1
 8004fd2:	2102      	movs	r1, #2
 8004fd4:	e000      	b.n	8004fd8 <__cvt+0x44>
 8004fd6:	2103      	movs	r1, #3
 8004fd8:	ab03      	add	r3, sp, #12
 8004fda:	9301      	str	r3, [sp, #4]
 8004fdc:	ab02      	add	r3, sp, #8
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	ec45 4b10 	vmov	d0, r4, r5
 8004fe4:	4653      	mov	r3, sl
 8004fe6:	4632      	mov	r2, r6
 8004fe8:	f000 fcfe 	bl	80059e8 <_dtoa_r>
 8004fec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ff0:	4607      	mov	r7, r0
 8004ff2:	d102      	bne.n	8004ffa <__cvt+0x66>
 8004ff4:	f019 0f01 	tst.w	r9, #1
 8004ff8:	d022      	beq.n	8005040 <__cvt+0xac>
 8004ffa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ffe:	eb07 0906 	add.w	r9, r7, r6
 8005002:	d110      	bne.n	8005026 <__cvt+0x92>
 8005004:	783b      	ldrb	r3, [r7, #0]
 8005006:	2b30      	cmp	r3, #48	; 0x30
 8005008:	d10a      	bne.n	8005020 <__cvt+0x8c>
 800500a:	2200      	movs	r2, #0
 800500c:	2300      	movs	r3, #0
 800500e:	4620      	mov	r0, r4
 8005010:	4629      	mov	r1, r5
 8005012:	f7fb fd61 	bl	8000ad8 <__aeabi_dcmpeq>
 8005016:	b918      	cbnz	r0, 8005020 <__cvt+0x8c>
 8005018:	f1c6 0601 	rsb	r6, r6, #1
 800501c:	f8ca 6000 	str.w	r6, [sl]
 8005020:	f8da 3000 	ldr.w	r3, [sl]
 8005024:	4499      	add	r9, r3
 8005026:	2200      	movs	r2, #0
 8005028:	2300      	movs	r3, #0
 800502a:	4620      	mov	r0, r4
 800502c:	4629      	mov	r1, r5
 800502e:	f7fb fd53 	bl	8000ad8 <__aeabi_dcmpeq>
 8005032:	b108      	cbz	r0, 8005038 <__cvt+0xa4>
 8005034:	f8cd 900c 	str.w	r9, [sp, #12]
 8005038:	2230      	movs	r2, #48	; 0x30
 800503a:	9b03      	ldr	r3, [sp, #12]
 800503c:	454b      	cmp	r3, r9
 800503e:	d307      	bcc.n	8005050 <__cvt+0xbc>
 8005040:	9b03      	ldr	r3, [sp, #12]
 8005042:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005044:	1bdb      	subs	r3, r3, r7
 8005046:	4638      	mov	r0, r7
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	b004      	add	sp, #16
 800504c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005050:	1c59      	adds	r1, r3, #1
 8005052:	9103      	str	r1, [sp, #12]
 8005054:	701a      	strb	r2, [r3, #0]
 8005056:	e7f0      	b.n	800503a <__cvt+0xa6>

08005058 <__exponent>:
 8005058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800505a:	4603      	mov	r3, r0
 800505c:	2900      	cmp	r1, #0
 800505e:	bfb8      	it	lt
 8005060:	4249      	neglt	r1, r1
 8005062:	f803 2b02 	strb.w	r2, [r3], #2
 8005066:	bfb4      	ite	lt
 8005068:	222d      	movlt	r2, #45	; 0x2d
 800506a:	222b      	movge	r2, #43	; 0x2b
 800506c:	2909      	cmp	r1, #9
 800506e:	7042      	strb	r2, [r0, #1]
 8005070:	dd2a      	ble.n	80050c8 <__exponent+0x70>
 8005072:	f10d 0407 	add.w	r4, sp, #7
 8005076:	46a4      	mov	ip, r4
 8005078:	270a      	movs	r7, #10
 800507a:	46a6      	mov	lr, r4
 800507c:	460a      	mov	r2, r1
 800507e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005082:	fb07 1516 	mls	r5, r7, r6, r1
 8005086:	3530      	adds	r5, #48	; 0x30
 8005088:	2a63      	cmp	r2, #99	; 0x63
 800508a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800508e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005092:	4631      	mov	r1, r6
 8005094:	dcf1      	bgt.n	800507a <__exponent+0x22>
 8005096:	3130      	adds	r1, #48	; 0x30
 8005098:	f1ae 0502 	sub.w	r5, lr, #2
 800509c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80050a0:	1c44      	adds	r4, r0, #1
 80050a2:	4629      	mov	r1, r5
 80050a4:	4561      	cmp	r1, ip
 80050a6:	d30a      	bcc.n	80050be <__exponent+0x66>
 80050a8:	f10d 0209 	add.w	r2, sp, #9
 80050ac:	eba2 020e 	sub.w	r2, r2, lr
 80050b0:	4565      	cmp	r5, ip
 80050b2:	bf88      	it	hi
 80050b4:	2200      	movhi	r2, #0
 80050b6:	4413      	add	r3, r2
 80050b8:	1a18      	subs	r0, r3, r0
 80050ba:	b003      	add	sp, #12
 80050bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80050c6:	e7ed      	b.n	80050a4 <__exponent+0x4c>
 80050c8:	2330      	movs	r3, #48	; 0x30
 80050ca:	3130      	adds	r1, #48	; 0x30
 80050cc:	7083      	strb	r3, [r0, #2]
 80050ce:	70c1      	strb	r1, [r0, #3]
 80050d0:	1d03      	adds	r3, r0, #4
 80050d2:	e7f1      	b.n	80050b8 <__exponent+0x60>

080050d4 <_printf_float>:
 80050d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d8:	ed2d 8b02 	vpush	{d8}
 80050dc:	b08d      	sub	sp, #52	; 0x34
 80050de:	460c      	mov	r4, r1
 80050e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80050e4:	4616      	mov	r6, r2
 80050e6:	461f      	mov	r7, r3
 80050e8:	4605      	mov	r5, r0
 80050ea:	f001 fa69 	bl	80065c0 <_localeconv_r>
 80050ee:	f8d0 a000 	ldr.w	sl, [r0]
 80050f2:	4650      	mov	r0, sl
 80050f4:	f7fb f874 	bl	80001e0 <strlen>
 80050f8:	2300      	movs	r3, #0
 80050fa:	930a      	str	r3, [sp, #40]	; 0x28
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	9305      	str	r3, [sp, #20]
 8005100:	f8d8 3000 	ldr.w	r3, [r8]
 8005104:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005108:	3307      	adds	r3, #7
 800510a:	f023 0307 	bic.w	r3, r3, #7
 800510e:	f103 0208 	add.w	r2, r3, #8
 8005112:	f8c8 2000 	str.w	r2, [r8]
 8005116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800511e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005122:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005126:	9307      	str	r3, [sp, #28]
 8005128:	f8cd 8018 	str.w	r8, [sp, #24]
 800512c:	ee08 0a10 	vmov	s16, r0
 8005130:	4b9f      	ldr	r3, [pc, #636]	; (80053b0 <_printf_float+0x2dc>)
 8005132:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005136:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800513a:	f7fb fcff 	bl	8000b3c <__aeabi_dcmpun>
 800513e:	bb88      	cbnz	r0, 80051a4 <_printf_float+0xd0>
 8005140:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005144:	4b9a      	ldr	r3, [pc, #616]	; (80053b0 <_printf_float+0x2dc>)
 8005146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800514a:	f7fb fcd9 	bl	8000b00 <__aeabi_dcmple>
 800514e:	bb48      	cbnz	r0, 80051a4 <_printf_float+0xd0>
 8005150:	2200      	movs	r2, #0
 8005152:	2300      	movs	r3, #0
 8005154:	4640      	mov	r0, r8
 8005156:	4649      	mov	r1, r9
 8005158:	f7fb fcc8 	bl	8000aec <__aeabi_dcmplt>
 800515c:	b110      	cbz	r0, 8005164 <_printf_float+0x90>
 800515e:	232d      	movs	r3, #45	; 0x2d
 8005160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005164:	4b93      	ldr	r3, [pc, #588]	; (80053b4 <_printf_float+0x2e0>)
 8005166:	4894      	ldr	r0, [pc, #592]	; (80053b8 <_printf_float+0x2e4>)
 8005168:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800516c:	bf94      	ite	ls
 800516e:	4698      	movls	r8, r3
 8005170:	4680      	movhi	r8, r0
 8005172:	2303      	movs	r3, #3
 8005174:	6123      	str	r3, [r4, #16]
 8005176:	9b05      	ldr	r3, [sp, #20]
 8005178:	f023 0204 	bic.w	r2, r3, #4
 800517c:	6022      	str	r2, [r4, #0]
 800517e:	f04f 0900 	mov.w	r9, #0
 8005182:	9700      	str	r7, [sp, #0]
 8005184:	4633      	mov	r3, r6
 8005186:	aa0b      	add	r2, sp, #44	; 0x2c
 8005188:	4621      	mov	r1, r4
 800518a:	4628      	mov	r0, r5
 800518c:	f000 f9d8 	bl	8005540 <_printf_common>
 8005190:	3001      	adds	r0, #1
 8005192:	f040 8090 	bne.w	80052b6 <_printf_float+0x1e2>
 8005196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800519a:	b00d      	add	sp, #52	; 0x34
 800519c:	ecbd 8b02 	vpop	{d8}
 80051a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a4:	4642      	mov	r2, r8
 80051a6:	464b      	mov	r3, r9
 80051a8:	4640      	mov	r0, r8
 80051aa:	4649      	mov	r1, r9
 80051ac:	f7fb fcc6 	bl	8000b3c <__aeabi_dcmpun>
 80051b0:	b140      	cbz	r0, 80051c4 <_printf_float+0xf0>
 80051b2:	464b      	mov	r3, r9
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	bfbc      	itt	lt
 80051b8:	232d      	movlt	r3, #45	; 0x2d
 80051ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80051be:	487f      	ldr	r0, [pc, #508]	; (80053bc <_printf_float+0x2e8>)
 80051c0:	4b7f      	ldr	r3, [pc, #508]	; (80053c0 <_printf_float+0x2ec>)
 80051c2:	e7d1      	b.n	8005168 <_printf_float+0x94>
 80051c4:	6863      	ldr	r3, [r4, #4]
 80051c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80051ca:	9206      	str	r2, [sp, #24]
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	d13f      	bne.n	8005250 <_printf_float+0x17c>
 80051d0:	2306      	movs	r3, #6
 80051d2:	6063      	str	r3, [r4, #4]
 80051d4:	9b05      	ldr	r3, [sp, #20]
 80051d6:	6861      	ldr	r1, [r4, #4]
 80051d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80051dc:	2300      	movs	r3, #0
 80051de:	9303      	str	r3, [sp, #12]
 80051e0:	ab0a      	add	r3, sp, #40	; 0x28
 80051e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80051e6:	ab09      	add	r3, sp, #36	; 0x24
 80051e8:	ec49 8b10 	vmov	d0, r8, r9
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	6022      	str	r2, [r4, #0]
 80051f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80051f4:	4628      	mov	r0, r5
 80051f6:	f7ff fecd 	bl	8004f94 <__cvt>
 80051fa:	9b06      	ldr	r3, [sp, #24]
 80051fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051fe:	2b47      	cmp	r3, #71	; 0x47
 8005200:	4680      	mov	r8, r0
 8005202:	d108      	bne.n	8005216 <_printf_float+0x142>
 8005204:	1cc8      	adds	r0, r1, #3
 8005206:	db02      	blt.n	800520e <_printf_float+0x13a>
 8005208:	6863      	ldr	r3, [r4, #4]
 800520a:	4299      	cmp	r1, r3
 800520c:	dd41      	ble.n	8005292 <_printf_float+0x1be>
 800520e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005212:	fa5f fb8b 	uxtb.w	fp, fp
 8005216:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800521a:	d820      	bhi.n	800525e <_printf_float+0x18a>
 800521c:	3901      	subs	r1, #1
 800521e:	465a      	mov	r2, fp
 8005220:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005224:	9109      	str	r1, [sp, #36]	; 0x24
 8005226:	f7ff ff17 	bl	8005058 <__exponent>
 800522a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800522c:	1813      	adds	r3, r2, r0
 800522e:	2a01      	cmp	r2, #1
 8005230:	4681      	mov	r9, r0
 8005232:	6123      	str	r3, [r4, #16]
 8005234:	dc02      	bgt.n	800523c <_printf_float+0x168>
 8005236:	6822      	ldr	r2, [r4, #0]
 8005238:	07d2      	lsls	r2, r2, #31
 800523a:	d501      	bpl.n	8005240 <_printf_float+0x16c>
 800523c:	3301      	adds	r3, #1
 800523e:	6123      	str	r3, [r4, #16]
 8005240:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005244:	2b00      	cmp	r3, #0
 8005246:	d09c      	beq.n	8005182 <_printf_float+0xae>
 8005248:	232d      	movs	r3, #45	; 0x2d
 800524a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800524e:	e798      	b.n	8005182 <_printf_float+0xae>
 8005250:	9a06      	ldr	r2, [sp, #24]
 8005252:	2a47      	cmp	r2, #71	; 0x47
 8005254:	d1be      	bne.n	80051d4 <_printf_float+0x100>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1bc      	bne.n	80051d4 <_printf_float+0x100>
 800525a:	2301      	movs	r3, #1
 800525c:	e7b9      	b.n	80051d2 <_printf_float+0xfe>
 800525e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005262:	d118      	bne.n	8005296 <_printf_float+0x1c2>
 8005264:	2900      	cmp	r1, #0
 8005266:	6863      	ldr	r3, [r4, #4]
 8005268:	dd0b      	ble.n	8005282 <_printf_float+0x1ae>
 800526a:	6121      	str	r1, [r4, #16]
 800526c:	b913      	cbnz	r3, 8005274 <_printf_float+0x1a0>
 800526e:	6822      	ldr	r2, [r4, #0]
 8005270:	07d0      	lsls	r0, r2, #31
 8005272:	d502      	bpl.n	800527a <_printf_float+0x1a6>
 8005274:	3301      	adds	r3, #1
 8005276:	440b      	add	r3, r1
 8005278:	6123      	str	r3, [r4, #16]
 800527a:	65a1      	str	r1, [r4, #88]	; 0x58
 800527c:	f04f 0900 	mov.w	r9, #0
 8005280:	e7de      	b.n	8005240 <_printf_float+0x16c>
 8005282:	b913      	cbnz	r3, 800528a <_printf_float+0x1b6>
 8005284:	6822      	ldr	r2, [r4, #0]
 8005286:	07d2      	lsls	r2, r2, #31
 8005288:	d501      	bpl.n	800528e <_printf_float+0x1ba>
 800528a:	3302      	adds	r3, #2
 800528c:	e7f4      	b.n	8005278 <_printf_float+0x1a4>
 800528e:	2301      	movs	r3, #1
 8005290:	e7f2      	b.n	8005278 <_printf_float+0x1a4>
 8005292:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005298:	4299      	cmp	r1, r3
 800529a:	db05      	blt.n	80052a8 <_printf_float+0x1d4>
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	6121      	str	r1, [r4, #16]
 80052a0:	07d8      	lsls	r0, r3, #31
 80052a2:	d5ea      	bpl.n	800527a <_printf_float+0x1a6>
 80052a4:	1c4b      	adds	r3, r1, #1
 80052a6:	e7e7      	b.n	8005278 <_printf_float+0x1a4>
 80052a8:	2900      	cmp	r1, #0
 80052aa:	bfd4      	ite	le
 80052ac:	f1c1 0202 	rsble	r2, r1, #2
 80052b0:	2201      	movgt	r2, #1
 80052b2:	4413      	add	r3, r2
 80052b4:	e7e0      	b.n	8005278 <_printf_float+0x1a4>
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	055a      	lsls	r2, r3, #21
 80052ba:	d407      	bmi.n	80052cc <_printf_float+0x1f8>
 80052bc:	6923      	ldr	r3, [r4, #16]
 80052be:	4642      	mov	r2, r8
 80052c0:	4631      	mov	r1, r6
 80052c2:	4628      	mov	r0, r5
 80052c4:	47b8      	blx	r7
 80052c6:	3001      	adds	r0, #1
 80052c8:	d12c      	bne.n	8005324 <_printf_float+0x250>
 80052ca:	e764      	b.n	8005196 <_printf_float+0xc2>
 80052cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80052d0:	f240 80e0 	bls.w	8005494 <_printf_float+0x3c0>
 80052d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052d8:	2200      	movs	r2, #0
 80052da:	2300      	movs	r3, #0
 80052dc:	f7fb fbfc 	bl	8000ad8 <__aeabi_dcmpeq>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	d034      	beq.n	800534e <_printf_float+0x27a>
 80052e4:	4a37      	ldr	r2, [pc, #220]	; (80053c4 <_printf_float+0x2f0>)
 80052e6:	2301      	movs	r3, #1
 80052e8:	4631      	mov	r1, r6
 80052ea:	4628      	mov	r0, r5
 80052ec:	47b8      	blx	r7
 80052ee:	3001      	adds	r0, #1
 80052f0:	f43f af51 	beq.w	8005196 <_printf_float+0xc2>
 80052f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052f8:	429a      	cmp	r2, r3
 80052fa:	db02      	blt.n	8005302 <_printf_float+0x22e>
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	07d8      	lsls	r0, r3, #31
 8005300:	d510      	bpl.n	8005324 <_printf_float+0x250>
 8005302:	ee18 3a10 	vmov	r3, s16
 8005306:	4652      	mov	r2, sl
 8005308:	4631      	mov	r1, r6
 800530a:	4628      	mov	r0, r5
 800530c:	47b8      	blx	r7
 800530e:	3001      	adds	r0, #1
 8005310:	f43f af41 	beq.w	8005196 <_printf_float+0xc2>
 8005314:	f04f 0800 	mov.w	r8, #0
 8005318:	f104 091a 	add.w	r9, r4, #26
 800531c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800531e:	3b01      	subs	r3, #1
 8005320:	4543      	cmp	r3, r8
 8005322:	dc09      	bgt.n	8005338 <_printf_float+0x264>
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	079b      	lsls	r3, r3, #30
 8005328:	f100 8105 	bmi.w	8005536 <_printf_float+0x462>
 800532c:	68e0      	ldr	r0, [r4, #12]
 800532e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005330:	4298      	cmp	r0, r3
 8005332:	bfb8      	it	lt
 8005334:	4618      	movlt	r0, r3
 8005336:	e730      	b.n	800519a <_printf_float+0xc6>
 8005338:	2301      	movs	r3, #1
 800533a:	464a      	mov	r2, r9
 800533c:	4631      	mov	r1, r6
 800533e:	4628      	mov	r0, r5
 8005340:	47b8      	blx	r7
 8005342:	3001      	adds	r0, #1
 8005344:	f43f af27 	beq.w	8005196 <_printf_float+0xc2>
 8005348:	f108 0801 	add.w	r8, r8, #1
 800534c:	e7e6      	b.n	800531c <_printf_float+0x248>
 800534e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005350:	2b00      	cmp	r3, #0
 8005352:	dc39      	bgt.n	80053c8 <_printf_float+0x2f4>
 8005354:	4a1b      	ldr	r2, [pc, #108]	; (80053c4 <_printf_float+0x2f0>)
 8005356:	2301      	movs	r3, #1
 8005358:	4631      	mov	r1, r6
 800535a:	4628      	mov	r0, r5
 800535c:	47b8      	blx	r7
 800535e:	3001      	adds	r0, #1
 8005360:	f43f af19 	beq.w	8005196 <_printf_float+0xc2>
 8005364:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005368:	4313      	orrs	r3, r2
 800536a:	d102      	bne.n	8005372 <_printf_float+0x29e>
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	07d9      	lsls	r1, r3, #31
 8005370:	d5d8      	bpl.n	8005324 <_printf_float+0x250>
 8005372:	ee18 3a10 	vmov	r3, s16
 8005376:	4652      	mov	r2, sl
 8005378:	4631      	mov	r1, r6
 800537a:	4628      	mov	r0, r5
 800537c:	47b8      	blx	r7
 800537e:	3001      	adds	r0, #1
 8005380:	f43f af09 	beq.w	8005196 <_printf_float+0xc2>
 8005384:	f04f 0900 	mov.w	r9, #0
 8005388:	f104 0a1a 	add.w	sl, r4, #26
 800538c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800538e:	425b      	negs	r3, r3
 8005390:	454b      	cmp	r3, r9
 8005392:	dc01      	bgt.n	8005398 <_printf_float+0x2c4>
 8005394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005396:	e792      	b.n	80052be <_printf_float+0x1ea>
 8005398:	2301      	movs	r3, #1
 800539a:	4652      	mov	r2, sl
 800539c:	4631      	mov	r1, r6
 800539e:	4628      	mov	r0, r5
 80053a0:	47b8      	blx	r7
 80053a2:	3001      	adds	r0, #1
 80053a4:	f43f aef7 	beq.w	8005196 <_printf_float+0xc2>
 80053a8:	f109 0901 	add.w	r9, r9, #1
 80053ac:	e7ee      	b.n	800538c <_printf_float+0x2b8>
 80053ae:	bf00      	nop
 80053b0:	7fefffff 	.word	0x7fefffff
 80053b4:	08008ab0 	.word	0x08008ab0
 80053b8:	08008ab4 	.word	0x08008ab4
 80053bc:	08008abc 	.word	0x08008abc
 80053c0:	08008ab8 	.word	0x08008ab8
 80053c4:	08008ac0 	.word	0x08008ac0
 80053c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053cc:	429a      	cmp	r2, r3
 80053ce:	bfa8      	it	ge
 80053d0:	461a      	movge	r2, r3
 80053d2:	2a00      	cmp	r2, #0
 80053d4:	4691      	mov	r9, r2
 80053d6:	dc37      	bgt.n	8005448 <_printf_float+0x374>
 80053d8:	f04f 0b00 	mov.w	fp, #0
 80053dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053e0:	f104 021a 	add.w	r2, r4, #26
 80053e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053e6:	9305      	str	r3, [sp, #20]
 80053e8:	eba3 0309 	sub.w	r3, r3, r9
 80053ec:	455b      	cmp	r3, fp
 80053ee:	dc33      	bgt.n	8005458 <_printf_float+0x384>
 80053f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053f4:	429a      	cmp	r2, r3
 80053f6:	db3b      	blt.n	8005470 <_printf_float+0x39c>
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	07da      	lsls	r2, r3, #31
 80053fc:	d438      	bmi.n	8005470 <_printf_float+0x39c>
 80053fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005400:	9b05      	ldr	r3, [sp, #20]
 8005402:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	eba2 0901 	sub.w	r9, r2, r1
 800540a:	4599      	cmp	r9, r3
 800540c:	bfa8      	it	ge
 800540e:	4699      	movge	r9, r3
 8005410:	f1b9 0f00 	cmp.w	r9, #0
 8005414:	dc35      	bgt.n	8005482 <_printf_float+0x3ae>
 8005416:	f04f 0800 	mov.w	r8, #0
 800541a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800541e:	f104 0a1a 	add.w	sl, r4, #26
 8005422:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005426:	1a9b      	subs	r3, r3, r2
 8005428:	eba3 0309 	sub.w	r3, r3, r9
 800542c:	4543      	cmp	r3, r8
 800542e:	f77f af79 	ble.w	8005324 <_printf_float+0x250>
 8005432:	2301      	movs	r3, #1
 8005434:	4652      	mov	r2, sl
 8005436:	4631      	mov	r1, r6
 8005438:	4628      	mov	r0, r5
 800543a:	47b8      	blx	r7
 800543c:	3001      	adds	r0, #1
 800543e:	f43f aeaa 	beq.w	8005196 <_printf_float+0xc2>
 8005442:	f108 0801 	add.w	r8, r8, #1
 8005446:	e7ec      	b.n	8005422 <_printf_float+0x34e>
 8005448:	4613      	mov	r3, r2
 800544a:	4631      	mov	r1, r6
 800544c:	4642      	mov	r2, r8
 800544e:	4628      	mov	r0, r5
 8005450:	47b8      	blx	r7
 8005452:	3001      	adds	r0, #1
 8005454:	d1c0      	bne.n	80053d8 <_printf_float+0x304>
 8005456:	e69e      	b.n	8005196 <_printf_float+0xc2>
 8005458:	2301      	movs	r3, #1
 800545a:	4631      	mov	r1, r6
 800545c:	4628      	mov	r0, r5
 800545e:	9205      	str	r2, [sp, #20]
 8005460:	47b8      	blx	r7
 8005462:	3001      	adds	r0, #1
 8005464:	f43f ae97 	beq.w	8005196 <_printf_float+0xc2>
 8005468:	9a05      	ldr	r2, [sp, #20]
 800546a:	f10b 0b01 	add.w	fp, fp, #1
 800546e:	e7b9      	b.n	80053e4 <_printf_float+0x310>
 8005470:	ee18 3a10 	vmov	r3, s16
 8005474:	4652      	mov	r2, sl
 8005476:	4631      	mov	r1, r6
 8005478:	4628      	mov	r0, r5
 800547a:	47b8      	blx	r7
 800547c:	3001      	adds	r0, #1
 800547e:	d1be      	bne.n	80053fe <_printf_float+0x32a>
 8005480:	e689      	b.n	8005196 <_printf_float+0xc2>
 8005482:	9a05      	ldr	r2, [sp, #20]
 8005484:	464b      	mov	r3, r9
 8005486:	4442      	add	r2, r8
 8005488:	4631      	mov	r1, r6
 800548a:	4628      	mov	r0, r5
 800548c:	47b8      	blx	r7
 800548e:	3001      	adds	r0, #1
 8005490:	d1c1      	bne.n	8005416 <_printf_float+0x342>
 8005492:	e680      	b.n	8005196 <_printf_float+0xc2>
 8005494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005496:	2a01      	cmp	r2, #1
 8005498:	dc01      	bgt.n	800549e <_printf_float+0x3ca>
 800549a:	07db      	lsls	r3, r3, #31
 800549c:	d538      	bpl.n	8005510 <_printf_float+0x43c>
 800549e:	2301      	movs	r3, #1
 80054a0:	4642      	mov	r2, r8
 80054a2:	4631      	mov	r1, r6
 80054a4:	4628      	mov	r0, r5
 80054a6:	47b8      	blx	r7
 80054a8:	3001      	adds	r0, #1
 80054aa:	f43f ae74 	beq.w	8005196 <_printf_float+0xc2>
 80054ae:	ee18 3a10 	vmov	r3, s16
 80054b2:	4652      	mov	r2, sl
 80054b4:	4631      	mov	r1, r6
 80054b6:	4628      	mov	r0, r5
 80054b8:	47b8      	blx	r7
 80054ba:	3001      	adds	r0, #1
 80054bc:	f43f ae6b 	beq.w	8005196 <_printf_float+0xc2>
 80054c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054c4:	2200      	movs	r2, #0
 80054c6:	2300      	movs	r3, #0
 80054c8:	f7fb fb06 	bl	8000ad8 <__aeabi_dcmpeq>
 80054cc:	b9d8      	cbnz	r0, 8005506 <_printf_float+0x432>
 80054ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054d0:	f108 0201 	add.w	r2, r8, #1
 80054d4:	3b01      	subs	r3, #1
 80054d6:	4631      	mov	r1, r6
 80054d8:	4628      	mov	r0, r5
 80054da:	47b8      	blx	r7
 80054dc:	3001      	adds	r0, #1
 80054de:	d10e      	bne.n	80054fe <_printf_float+0x42a>
 80054e0:	e659      	b.n	8005196 <_printf_float+0xc2>
 80054e2:	2301      	movs	r3, #1
 80054e4:	4652      	mov	r2, sl
 80054e6:	4631      	mov	r1, r6
 80054e8:	4628      	mov	r0, r5
 80054ea:	47b8      	blx	r7
 80054ec:	3001      	adds	r0, #1
 80054ee:	f43f ae52 	beq.w	8005196 <_printf_float+0xc2>
 80054f2:	f108 0801 	add.w	r8, r8, #1
 80054f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054f8:	3b01      	subs	r3, #1
 80054fa:	4543      	cmp	r3, r8
 80054fc:	dcf1      	bgt.n	80054e2 <_printf_float+0x40e>
 80054fe:	464b      	mov	r3, r9
 8005500:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005504:	e6dc      	b.n	80052c0 <_printf_float+0x1ec>
 8005506:	f04f 0800 	mov.w	r8, #0
 800550a:	f104 0a1a 	add.w	sl, r4, #26
 800550e:	e7f2      	b.n	80054f6 <_printf_float+0x422>
 8005510:	2301      	movs	r3, #1
 8005512:	4642      	mov	r2, r8
 8005514:	e7df      	b.n	80054d6 <_printf_float+0x402>
 8005516:	2301      	movs	r3, #1
 8005518:	464a      	mov	r2, r9
 800551a:	4631      	mov	r1, r6
 800551c:	4628      	mov	r0, r5
 800551e:	47b8      	blx	r7
 8005520:	3001      	adds	r0, #1
 8005522:	f43f ae38 	beq.w	8005196 <_printf_float+0xc2>
 8005526:	f108 0801 	add.w	r8, r8, #1
 800552a:	68e3      	ldr	r3, [r4, #12]
 800552c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800552e:	1a5b      	subs	r3, r3, r1
 8005530:	4543      	cmp	r3, r8
 8005532:	dcf0      	bgt.n	8005516 <_printf_float+0x442>
 8005534:	e6fa      	b.n	800532c <_printf_float+0x258>
 8005536:	f04f 0800 	mov.w	r8, #0
 800553a:	f104 0919 	add.w	r9, r4, #25
 800553e:	e7f4      	b.n	800552a <_printf_float+0x456>

08005540 <_printf_common>:
 8005540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005544:	4616      	mov	r6, r2
 8005546:	4699      	mov	r9, r3
 8005548:	688a      	ldr	r2, [r1, #8]
 800554a:	690b      	ldr	r3, [r1, #16]
 800554c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005550:	4293      	cmp	r3, r2
 8005552:	bfb8      	it	lt
 8005554:	4613      	movlt	r3, r2
 8005556:	6033      	str	r3, [r6, #0]
 8005558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800555c:	4607      	mov	r7, r0
 800555e:	460c      	mov	r4, r1
 8005560:	b10a      	cbz	r2, 8005566 <_printf_common+0x26>
 8005562:	3301      	adds	r3, #1
 8005564:	6033      	str	r3, [r6, #0]
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	0699      	lsls	r1, r3, #26
 800556a:	bf42      	ittt	mi
 800556c:	6833      	ldrmi	r3, [r6, #0]
 800556e:	3302      	addmi	r3, #2
 8005570:	6033      	strmi	r3, [r6, #0]
 8005572:	6825      	ldr	r5, [r4, #0]
 8005574:	f015 0506 	ands.w	r5, r5, #6
 8005578:	d106      	bne.n	8005588 <_printf_common+0x48>
 800557a:	f104 0a19 	add.w	sl, r4, #25
 800557e:	68e3      	ldr	r3, [r4, #12]
 8005580:	6832      	ldr	r2, [r6, #0]
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	42ab      	cmp	r3, r5
 8005586:	dc26      	bgt.n	80055d6 <_printf_common+0x96>
 8005588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800558c:	1e13      	subs	r3, r2, #0
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	bf18      	it	ne
 8005592:	2301      	movne	r3, #1
 8005594:	0692      	lsls	r2, r2, #26
 8005596:	d42b      	bmi.n	80055f0 <_printf_common+0xb0>
 8005598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800559c:	4649      	mov	r1, r9
 800559e:	4638      	mov	r0, r7
 80055a0:	47c0      	blx	r8
 80055a2:	3001      	adds	r0, #1
 80055a4:	d01e      	beq.n	80055e4 <_printf_common+0xa4>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	68e5      	ldr	r5, [r4, #12]
 80055aa:	6832      	ldr	r2, [r6, #0]
 80055ac:	f003 0306 	and.w	r3, r3, #6
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	bf08      	it	eq
 80055b4:	1aad      	subeq	r5, r5, r2
 80055b6:	68a3      	ldr	r3, [r4, #8]
 80055b8:	6922      	ldr	r2, [r4, #16]
 80055ba:	bf0c      	ite	eq
 80055bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055c0:	2500      	movne	r5, #0
 80055c2:	4293      	cmp	r3, r2
 80055c4:	bfc4      	itt	gt
 80055c6:	1a9b      	subgt	r3, r3, r2
 80055c8:	18ed      	addgt	r5, r5, r3
 80055ca:	2600      	movs	r6, #0
 80055cc:	341a      	adds	r4, #26
 80055ce:	42b5      	cmp	r5, r6
 80055d0:	d11a      	bne.n	8005608 <_printf_common+0xc8>
 80055d2:	2000      	movs	r0, #0
 80055d4:	e008      	b.n	80055e8 <_printf_common+0xa8>
 80055d6:	2301      	movs	r3, #1
 80055d8:	4652      	mov	r2, sl
 80055da:	4649      	mov	r1, r9
 80055dc:	4638      	mov	r0, r7
 80055de:	47c0      	blx	r8
 80055e0:	3001      	adds	r0, #1
 80055e2:	d103      	bne.n	80055ec <_printf_common+0xac>
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ec:	3501      	adds	r5, #1
 80055ee:	e7c6      	b.n	800557e <_printf_common+0x3e>
 80055f0:	18e1      	adds	r1, r4, r3
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	2030      	movs	r0, #48	; 0x30
 80055f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055fa:	4422      	add	r2, r4
 80055fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005604:	3302      	adds	r3, #2
 8005606:	e7c7      	b.n	8005598 <_printf_common+0x58>
 8005608:	2301      	movs	r3, #1
 800560a:	4622      	mov	r2, r4
 800560c:	4649      	mov	r1, r9
 800560e:	4638      	mov	r0, r7
 8005610:	47c0      	blx	r8
 8005612:	3001      	adds	r0, #1
 8005614:	d0e6      	beq.n	80055e4 <_printf_common+0xa4>
 8005616:	3601      	adds	r6, #1
 8005618:	e7d9      	b.n	80055ce <_printf_common+0x8e>
	...

0800561c <_printf_i>:
 800561c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005620:	460c      	mov	r4, r1
 8005622:	4691      	mov	r9, r2
 8005624:	7e27      	ldrb	r7, [r4, #24]
 8005626:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005628:	2f78      	cmp	r7, #120	; 0x78
 800562a:	4680      	mov	r8, r0
 800562c:	469a      	mov	sl, r3
 800562e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005632:	d807      	bhi.n	8005644 <_printf_i+0x28>
 8005634:	2f62      	cmp	r7, #98	; 0x62
 8005636:	d80a      	bhi.n	800564e <_printf_i+0x32>
 8005638:	2f00      	cmp	r7, #0
 800563a:	f000 80d8 	beq.w	80057ee <_printf_i+0x1d2>
 800563e:	2f58      	cmp	r7, #88	; 0x58
 8005640:	f000 80a3 	beq.w	800578a <_printf_i+0x16e>
 8005644:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800564c:	e03a      	b.n	80056c4 <_printf_i+0xa8>
 800564e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005652:	2b15      	cmp	r3, #21
 8005654:	d8f6      	bhi.n	8005644 <_printf_i+0x28>
 8005656:	a001      	add	r0, pc, #4	; (adr r0, 800565c <_printf_i+0x40>)
 8005658:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800565c:	080056b5 	.word	0x080056b5
 8005660:	080056c9 	.word	0x080056c9
 8005664:	08005645 	.word	0x08005645
 8005668:	08005645 	.word	0x08005645
 800566c:	08005645 	.word	0x08005645
 8005670:	08005645 	.word	0x08005645
 8005674:	080056c9 	.word	0x080056c9
 8005678:	08005645 	.word	0x08005645
 800567c:	08005645 	.word	0x08005645
 8005680:	08005645 	.word	0x08005645
 8005684:	08005645 	.word	0x08005645
 8005688:	080057d5 	.word	0x080057d5
 800568c:	080056f9 	.word	0x080056f9
 8005690:	080057b7 	.word	0x080057b7
 8005694:	08005645 	.word	0x08005645
 8005698:	08005645 	.word	0x08005645
 800569c:	080057f7 	.word	0x080057f7
 80056a0:	08005645 	.word	0x08005645
 80056a4:	080056f9 	.word	0x080056f9
 80056a8:	08005645 	.word	0x08005645
 80056ac:	08005645 	.word	0x08005645
 80056b0:	080057bf 	.word	0x080057bf
 80056b4:	680b      	ldr	r3, [r1, #0]
 80056b6:	1d1a      	adds	r2, r3, #4
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	600a      	str	r2, [r1, #0]
 80056bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0a3      	b.n	8005810 <_printf_i+0x1f4>
 80056c8:	6825      	ldr	r5, [r4, #0]
 80056ca:	6808      	ldr	r0, [r1, #0]
 80056cc:	062e      	lsls	r6, r5, #24
 80056ce:	f100 0304 	add.w	r3, r0, #4
 80056d2:	d50a      	bpl.n	80056ea <_printf_i+0xce>
 80056d4:	6805      	ldr	r5, [r0, #0]
 80056d6:	600b      	str	r3, [r1, #0]
 80056d8:	2d00      	cmp	r5, #0
 80056da:	da03      	bge.n	80056e4 <_printf_i+0xc8>
 80056dc:	232d      	movs	r3, #45	; 0x2d
 80056de:	426d      	negs	r5, r5
 80056e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e4:	485e      	ldr	r0, [pc, #376]	; (8005860 <_printf_i+0x244>)
 80056e6:	230a      	movs	r3, #10
 80056e8:	e019      	b.n	800571e <_printf_i+0x102>
 80056ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80056ee:	6805      	ldr	r5, [r0, #0]
 80056f0:	600b      	str	r3, [r1, #0]
 80056f2:	bf18      	it	ne
 80056f4:	b22d      	sxthne	r5, r5
 80056f6:	e7ef      	b.n	80056d8 <_printf_i+0xbc>
 80056f8:	680b      	ldr	r3, [r1, #0]
 80056fa:	6825      	ldr	r5, [r4, #0]
 80056fc:	1d18      	adds	r0, r3, #4
 80056fe:	6008      	str	r0, [r1, #0]
 8005700:	0628      	lsls	r0, r5, #24
 8005702:	d501      	bpl.n	8005708 <_printf_i+0xec>
 8005704:	681d      	ldr	r5, [r3, #0]
 8005706:	e002      	b.n	800570e <_printf_i+0xf2>
 8005708:	0669      	lsls	r1, r5, #25
 800570a:	d5fb      	bpl.n	8005704 <_printf_i+0xe8>
 800570c:	881d      	ldrh	r5, [r3, #0]
 800570e:	4854      	ldr	r0, [pc, #336]	; (8005860 <_printf_i+0x244>)
 8005710:	2f6f      	cmp	r7, #111	; 0x6f
 8005712:	bf0c      	ite	eq
 8005714:	2308      	moveq	r3, #8
 8005716:	230a      	movne	r3, #10
 8005718:	2100      	movs	r1, #0
 800571a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800571e:	6866      	ldr	r6, [r4, #4]
 8005720:	60a6      	str	r6, [r4, #8]
 8005722:	2e00      	cmp	r6, #0
 8005724:	bfa2      	ittt	ge
 8005726:	6821      	ldrge	r1, [r4, #0]
 8005728:	f021 0104 	bicge.w	r1, r1, #4
 800572c:	6021      	strge	r1, [r4, #0]
 800572e:	b90d      	cbnz	r5, 8005734 <_printf_i+0x118>
 8005730:	2e00      	cmp	r6, #0
 8005732:	d04d      	beq.n	80057d0 <_printf_i+0x1b4>
 8005734:	4616      	mov	r6, r2
 8005736:	fbb5 f1f3 	udiv	r1, r5, r3
 800573a:	fb03 5711 	mls	r7, r3, r1, r5
 800573e:	5dc7      	ldrb	r7, [r0, r7]
 8005740:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005744:	462f      	mov	r7, r5
 8005746:	42bb      	cmp	r3, r7
 8005748:	460d      	mov	r5, r1
 800574a:	d9f4      	bls.n	8005736 <_printf_i+0x11a>
 800574c:	2b08      	cmp	r3, #8
 800574e:	d10b      	bne.n	8005768 <_printf_i+0x14c>
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	07df      	lsls	r7, r3, #31
 8005754:	d508      	bpl.n	8005768 <_printf_i+0x14c>
 8005756:	6923      	ldr	r3, [r4, #16]
 8005758:	6861      	ldr	r1, [r4, #4]
 800575a:	4299      	cmp	r1, r3
 800575c:	bfde      	ittt	le
 800575e:	2330      	movle	r3, #48	; 0x30
 8005760:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005764:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005768:	1b92      	subs	r2, r2, r6
 800576a:	6122      	str	r2, [r4, #16]
 800576c:	f8cd a000 	str.w	sl, [sp]
 8005770:	464b      	mov	r3, r9
 8005772:	aa03      	add	r2, sp, #12
 8005774:	4621      	mov	r1, r4
 8005776:	4640      	mov	r0, r8
 8005778:	f7ff fee2 	bl	8005540 <_printf_common>
 800577c:	3001      	adds	r0, #1
 800577e:	d14c      	bne.n	800581a <_printf_i+0x1fe>
 8005780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005784:	b004      	add	sp, #16
 8005786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578a:	4835      	ldr	r0, [pc, #212]	; (8005860 <_printf_i+0x244>)
 800578c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	680e      	ldr	r6, [r1, #0]
 8005794:	061f      	lsls	r7, r3, #24
 8005796:	f856 5b04 	ldr.w	r5, [r6], #4
 800579a:	600e      	str	r6, [r1, #0]
 800579c:	d514      	bpl.n	80057c8 <_printf_i+0x1ac>
 800579e:	07d9      	lsls	r1, r3, #31
 80057a0:	bf44      	itt	mi
 80057a2:	f043 0320 	orrmi.w	r3, r3, #32
 80057a6:	6023      	strmi	r3, [r4, #0]
 80057a8:	b91d      	cbnz	r5, 80057b2 <_printf_i+0x196>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	f023 0320 	bic.w	r3, r3, #32
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	2310      	movs	r3, #16
 80057b4:	e7b0      	b.n	8005718 <_printf_i+0xfc>
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	f043 0320 	orr.w	r3, r3, #32
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	2378      	movs	r3, #120	; 0x78
 80057c0:	4828      	ldr	r0, [pc, #160]	; (8005864 <_printf_i+0x248>)
 80057c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057c6:	e7e3      	b.n	8005790 <_printf_i+0x174>
 80057c8:	065e      	lsls	r6, r3, #25
 80057ca:	bf48      	it	mi
 80057cc:	b2ad      	uxthmi	r5, r5
 80057ce:	e7e6      	b.n	800579e <_printf_i+0x182>
 80057d0:	4616      	mov	r6, r2
 80057d2:	e7bb      	b.n	800574c <_printf_i+0x130>
 80057d4:	680b      	ldr	r3, [r1, #0]
 80057d6:	6826      	ldr	r6, [r4, #0]
 80057d8:	6960      	ldr	r0, [r4, #20]
 80057da:	1d1d      	adds	r5, r3, #4
 80057dc:	600d      	str	r5, [r1, #0]
 80057de:	0635      	lsls	r5, r6, #24
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	d501      	bpl.n	80057e8 <_printf_i+0x1cc>
 80057e4:	6018      	str	r0, [r3, #0]
 80057e6:	e002      	b.n	80057ee <_printf_i+0x1d2>
 80057e8:	0671      	lsls	r1, r6, #25
 80057ea:	d5fb      	bpl.n	80057e4 <_printf_i+0x1c8>
 80057ec:	8018      	strh	r0, [r3, #0]
 80057ee:	2300      	movs	r3, #0
 80057f0:	6123      	str	r3, [r4, #16]
 80057f2:	4616      	mov	r6, r2
 80057f4:	e7ba      	b.n	800576c <_printf_i+0x150>
 80057f6:	680b      	ldr	r3, [r1, #0]
 80057f8:	1d1a      	adds	r2, r3, #4
 80057fa:	600a      	str	r2, [r1, #0]
 80057fc:	681e      	ldr	r6, [r3, #0]
 80057fe:	6862      	ldr	r2, [r4, #4]
 8005800:	2100      	movs	r1, #0
 8005802:	4630      	mov	r0, r6
 8005804:	f7fa fcf4 	bl	80001f0 <memchr>
 8005808:	b108      	cbz	r0, 800580e <_printf_i+0x1f2>
 800580a:	1b80      	subs	r0, r0, r6
 800580c:	6060      	str	r0, [r4, #4]
 800580e:	6863      	ldr	r3, [r4, #4]
 8005810:	6123      	str	r3, [r4, #16]
 8005812:	2300      	movs	r3, #0
 8005814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005818:	e7a8      	b.n	800576c <_printf_i+0x150>
 800581a:	6923      	ldr	r3, [r4, #16]
 800581c:	4632      	mov	r2, r6
 800581e:	4649      	mov	r1, r9
 8005820:	4640      	mov	r0, r8
 8005822:	47d0      	blx	sl
 8005824:	3001      	adds	r0, #1
 8005826:	d0ab      	beq.n	8005780 <_printf_i+0x164>
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	079b      	lsls	r3, r3, #30
 800582c:	d413      	bmi.n	8005856 <_printf_i+0x23a>
 800582e:	68e0      	ldr	r0, [r4, #12]
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	4298      	cmp	r0, r3
 8005834:	bfb8      	it	lt
 8005836:	4618      	movlt	r0, r3
 8005838:	e7a4      	b.n	8005784 <_printf_i+0x168>
 800583a:	2301      	movs	r3, #1
 800583c:	4632      	mov	r2, r6
 800583e:	4649      	mov	r1, r9
 8005840:	4640      	mov	r0, r8
 8005842:	47d0      	blx	sl
 8005844:	3001      	adds	r0, #1
 8005846:	d09b      	beq.n	8005780 <_printf_i+0x164>
 8005848:	3501      	adds	r5, #1
 800584a:	68e3      	ldr	r3, [r4, #12]
 800584c:	9903      	ldr	r1, [sp, #12]
 800584e:	1a5b      	subs	r3, r3, r1
 8005850:	42ab      	cmp	r3, r5
 8005852:	dcf2      	bgt.n	800583a <_printf_i+0x21e>
 8005854:	e7eb      	b.n	800582e <_printf_i+0x212>
 8005856:	2500      	movs	r5, #0
 8005858:	f104 0619 	add.w	r6, r4, #25
 800585c:	e7f5      	b.n	800584a <_printf_i+0x22e>
 800585e:	bf00      	nop
 8005860:	08008ac2 	.word	0x08008ac2
 8005864:	08008ad3 	.word	0x08008ad3

08005868 <copysign>:
 8005868:	b082      	sub	sp, #8
 800586a:	ec51 0b10 	vmov	r0, r1, d0
 800586e:	ed8d 1b00 	vstr	d1, [sp]
 8005872:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8005876:	9901      	ldr	r1, [sp, #4]
 8005878:	ee10 2a10 	vmov	r2, s0
 800587c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005880:	ea40 0301 	orr.w	r3, r0, r1
 8005884:	ec43 2b10 	vmov	d0, r2, r3
 8005888:	b002      	add	sp, #8
 800588a:	4770      	bx	lr

0800588c <siprintf>:
 800588c:	b40e      	push	{r1, r2, r3}
 800588e:	b500      	push	{lr}
 8005890:	b09c      	sub	sp, #112	; 0x70
 8005892:	ab1d      	add	r3, sp, #116	; 0x74
 8005894:	9002      	str	r0, [sp, #8]
 8005896:	9006      	str	r0, [sp, #24]
 8005898:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800589c:	4809      	ldr	r0, [pc, #36]	; (80058c4 <siprintf+0x38>)
 800589e:	9107      	str	r1, [sp, #28]
 80058a0:	9104      	str	r1, [sp, #16]
 80058a2:	4909      	ldr	r1, [pc, #36]	; (80058c8 <siprintf+0x3c>)
 80058a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80058a8:	9105      	str	r1, [sp, #20]
 80058aa:	6800      	ldr	r0, [r0, #0]
 80058ac:	9301      	str	r3, [sp, #4]
 80058ae:	a902      	add	r1, sp, #8
 80058b0:	f001 fb34 	bl	8006f1c <_svfiprintf_r>
 80058b4:	9b02      	ldr	r3, [sp, #8]
 80058b6:	2200      	movs	r2, #0
 80058b8:	701a      	strb	r2, [r3, #0]
 80058ba:	b01c      	add	sp, #112	; 0x70
 80058bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80058c0:	b003      	add	sp, #12
 80058c2:	4770      	bx	lr
 80058c4:	2000201c 	.word	0x2000201c
 80058c8:	ffff0208 	.word	0xffff0208

080058cc <quorem>:
 80058cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d0:	6903      	ldr	r3, [r0, #16]
 80058d2:	690c      	ldr	r4, [r1, #16]
 80058d4:	42a3      	cmp	r3, r4
 80058d6:	4607      	mov	r7, r0
 80058d8:	f2c0 8081 	blt.w	80059de <quorem+0x112>
 80058dc:	3c01      	subs	r4, #1
 80058de:	f101 0814 	add.w	r8, r1, #20
 80058e2:	f100 0514 	add.w	r5, r0, #20
 80058e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058ea:	9301      	str	r3, [sp, #4]
 80058ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80058f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058f4:	3301      	adds	r3, #1
 80058f6:	429a      	cmp	r2, r3
 80058f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80058fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005900:	fbb2 f6f3 	udiv	r6, r2, r3
 8005904:	d331      	bcc.n	800596a <quorem+0x9e>
 8005906:	f04f 0e00 	mov.w	lr, #0
 800590a:	4640      	mov	r0, r8
 800590c:	46ac      	mov	ip, r5
 800590e:	46f2      	mov	sl, lr
 8005910:	f850 2b04 	ldr.w	r2, [r0], #4
 8005914:	b293      	uxth	r3, r2
 8005916:	fb06 e303 	mla	r3, r6, r3, lr
 800591a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800591e:	b29b      	uxth	r3, r3
 8005920:	ebaa 0303 	sub.w	r3, sl, r3
 8005924:	0c12      	lsrs	r2, r2, #16
 8005926:	f8dc a000 	ldr.w	sl, [ip]
 800592a:	fb06 e202 	mla	r2, r6, r2, lr
 800592e:	fa13 f38a 	uxtah	r3, r3, sl
 8005932:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005936:	fa1f fa82 	uxth.w	sl, r2
 800593a:	f8dc 2000 	ldr.w	r2, [ip]
 800593e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005942:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005946:	b29b      	uxth	r3, r3
 8005948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800594c:	4581      	cmp	r9, r0
 800594e:	f84c 3b04 	str.w	r3, [ip], #4
 8005952:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005956:	d2db      	bcs.n	8005910 <quorem+0x44>
 8005958:	f855 300b 	ldr.w	r3, [r5, fp]
 800595c:	b92b      	cbnz	r3, 800596a <quorem+0x9e>
 800595e:	9b01      	ldr	r3, [sp, #4]
 8005960:	3b04      	subs	r3, #4
 8005962:	429d      	cmp	r5, r3
 8005964:	461a      	mov	r2, r3
 8005966:	d32e      	bcc.n	80059c6 <quorem+0xfa>
 8005968:	613c      	str	r4, [r7, #16]
 800596a:	4638      	mov	r0, r7
 800596c:	f001 f8c0 	bl	8006af0 <__mcmp>
 8005970:	2800      	cmp	r0, #0
 8005972:	db24      	blt.n	80059be <quorem+0xf2>
 8005974:	3601      	adds	r6, #1
 8005976:	4628      	mov	r0, r5
 8005978:	f04f 0c00 	mov.w	ip, #0
 800597c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005980:	f8d0 e000 	ldr.w	lr, [r0]
 8005984:	b293      	uxth	r3, r2
 8005986:	ebac 0303 	sub.w	r3, ip, r3
 800598a:	0c12      	lsrs	r2, r2, #16
 800598c:	fa13 f38e 	uxtah	r3, r3, lr
 8005990:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005994:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005998:	b29b      	uxth	r3, r3
 800599a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800599e:	45c1      	cmp	r9, r8
 80059a0:	f840 3b04 	str.w	r3, [r0], #4
 80059a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80059a8:	d2e8      	bcs.n	800597c <quorem+0xb0>
 80059aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059b2:	b922      	cbnz	r2, 80059be <quorem+0xf2>
 80059b4:	3b04      	subs	r3, #4
 80059b6:	429d      	cmp	r5, r3
 80059b8:	461a      	mov	r2, r3
 80059ba:	d30a      	bcc.n	80059d2 <quorem+0x106>
 80059bc:	613c      	str	r4, [r7, #16]
 80059be:	4630      	mov	r0, r6
 80059c0:	b003      	add	sp, #12
 80059c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c6:	6812      	ldr	r2, [r2, #0]
 80059c8:	3b04      	subs	r3, #4
 80059ca:	2a00      	cmp	r2, #0
 80059cc:	d1cc      	bne.n	8005968 <quorem+0x9c>
 80059ce:	3c01      	subs	r4, #1
 80059d0:	e7c7      	b.n	8005962 <quorem+0x96>
 80059d2:	6812      	ldr	r2, [r2, #0]
 80059d4:	3b04      	subs	r3, #4
 80059d6:	2a00      	cmp	r2, #0
 80059d8:	d1f0      	bne.n	80059bc <quorem+0xf0>
 80059da:	3c01      	subs	r4, #1
 80059dc:	e7eb      	b.n	80059b6 <quorem+0xea>
 80059de:	2000      	movs	r0, #0
 80059e0:	e7ee      	b.n	80059c0 <quorem+0xf4>
 80059e2:	0000      	movs	r0, r0
 80059e4:	0000      	movs	r0, r0
	...

080059e8 <_dtoa_r>:
 80059e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	ed2d 8b02 	vpush	{d8}
 80059f0:	ec57 6b10 	vmov	r6, r7, d0
 80059f4:	b095      	sub	sp, #84	; 0x54
 80059f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80059f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80059fc:	9105      	str	r1, [sp, #20]
 80059fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005a02:	4604      	mov	r4, r0
 8005a04:	9209      	str	r2, [sp, #36]	; 0x24
 8005a06:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a08:	b975      	cbnz	r5, 8005a28 <_dtoa_r+0x40>
 8005a0a:	2010      	movs	r0, #16
 8005a0c:	f000 fddc 	bl	80065c8 <malloc>
 8005a10:	4602      	mov	r2, r0
 8005a12:	6260      	str	r0, [r4, #36]	; 0x24
 8005a14:	b920      	cbnz	r0, 8005a20 <_dtoa_r+0x38>
 8005a16:	4bb2      	ldr	r3, [pc, #712]	; (8005ce0 <_dtoa_r+0x2f8>)
 8005a18:	21ea      	movs	r1, #234	; 0xea
 8005a1a:	48b2      	ldr	r0, [pc, #712]	; (8005ce4 <_dtoa_r+0x2fc>)
 8005a1c:	f001 fb8e 	bl	800713c <__assert_func>
 8005a20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a24:	6005      	str	r5, [r0, #0]
 8005a26:	60c5      	str	r5, [r0, #12]
 8005a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a2a:	6819      	ldr	r1, [r3, #0]
 8005a2c:	b151      	cbz	r1, 8005a44 <_dtoa_r+0x5c>
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	604a      	str	r2, [r1, #4]
 8005a32:	2301      	movs	r3, #1
 8005a34:	4093      	lsls	r3, r2
 8005a36:	608b      	str	r3, [r1, #8]
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f000 fe1b 	bl	8006674 <_Bfree>
 8005a3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	1e3b      	subs	r3, r7, #0
 8005a46:	bfb9      	ittee	lt
 8005a48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a4c:	9303      	strlt	r3, [sp, #12]
 8005a4e:	2300      	movge	r3, #0
 8005a50:	f8c8 3000 	strge.w	r3, [r8]
 8005a54:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005a58:	4ba3      	ldr	r3, [pc, #652]	; (8005ce8 <_dtoa_r+0x300>)
 8005a5a:	bfbc      	itt	lt
 8005a5c:	2201      	movlt	r2, #1
 8005a5e:	f8c8 2000 	strlt.w	r2, [r8]
 8005a62:	ea33 0309 	bics.w	r3, r3, r9
 8005a66:	d11b      	bne.n	8005aa0 <_dtoa_r+0xb8>
 8005a68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a74:	4333      	orrs	r3, r6
 8005a76:	f000 857a 	beq.w	800656e <_dtoa_r+0xb86>
 8005a7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a7c:	b963      	cbnz	r3, 8005a98 <_dtoa_r+0xb0>
 8005a7e:	4b9b      	ldr	r3, [pc, #620]	; (8005cec <_dtoa_r+0x304>)
 8005a80:	e024      	b.n	8005acc <_dtoa_r+0xe4>
 8005a82:	4b9b      	ldr	r3, [pc, #620]	; (8005cf0 <_dtoa_r+0x308>)
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	3308      	adds	r3, #8
 8005a88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	9800      	ldr	r0, [sp, #0]
 8005a8e:	b015      	add	sp, #84	; 0x54
 8005a90:	ecbd 8b02 	vpop	{d8}
 8005a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a98:	4b94      	ldr	r3, [pc, #592]	; (8005cec <_dtoa_r+0x304>)
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	3303      	adds	r3, #3
 8005a9e:	e7f3      	b.n	8005a88 <_dtoa_r+0xa0>
 8005aa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	ec51 0b17 	vmov	r0, r1, d7
 8005aaa:	2300      	movs	r3, #0
 8005aac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005ab0:	f7fb f812 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ab4:	4680      	mov	r8, r0
 8005ab6:	b158      	cbz	r0, 8005ad0 <_dtoa_r+0xe8>
 8005ab8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005aba:	2301      	movs	r3, #1
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 8551 	beq.w	8006568 <_dtoa_r+0xb80>
 8005ac6:	488b      	ldr	r0, [pc, #556]	; (8005cf4 <_dtoa_r+0x30c>)
 8005ac8:	6018      	str	r0, [r3, #0]
 8005aca:	1e43      	subs	r3, r0, #1
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	e7dd      	b.n	8005a8c <_dtoa_r+0xa4>
 8005ad0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005ad4:	aa12      	add	r2, sp, #72	; 0x48
 8005ad6:	a913      	add	r1, sp, #76	; 0x4c
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f001 f8ad 	bl	8006c38 <__d2b>
 8005ade:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005ae2:	4683      	mov	fp, r0
 8005ae4:	2d00      	cmp	r5, #0
 8005ae6:	d07c      	beq.n	8005be2 <_dtoa_r+0x1fa>
 8005ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005af2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005af6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005afa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005afe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b02:	4b7d      	ldr	r3, [pc, #500]	; (8005cf8 <_dtoa_r+0x310>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	4630      	mov	r0, r6
 8005b08:	4639      	mov	r1, r7
 8005b0a:	f7fa fbc5 	bl	8000298 <__aeabi_dsub>
 8005b0e:	a36e      	add	r3, pc, #440	; (adr r3, 8005cc8 <_dtoa_r+0x2e0>)
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f7fa fd78 	bl	8000608 <__aeabi_dmul>
 8005b18:	a36d      	add	r3, pc, #436	; (adr r3, 8005cd0 <_dtoa_r+0x2e8>)
 8005b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1e:	f7fa fbbd 	bl	800029c <__adddf3>
 8005b22:	4606      	mov	r6, r0
 8005b24:	4628      	mov	r0, r5
 8005b26:	460f      	mov	r7, r1
 8005b28:	f7fa fd04 	bl	8000534 <__aeabi_i2d>
 8005b2c:	a36a      	add	r3, pc, #424	; (adr r3, 8005cd8 <_dtoa_r+0x2f0>)
 8005b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b32:	f7fa fd69 	bl	8000608 <__aeabi_dmul>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	4639      	mov	r1, r7
 8005b3e:	f7fa fbad 	bl	800029c <__adddf3>
 8005b42:	4606      	mov	r6, r0
 8005b44:	460f      	mov	r7, r1
 8005b46:	f7fb f80f 	bl	8000b68 <__aeabi_d2iz>
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	4682      	mov	sl, r0
 8005b4e:	2300      	movs	r3, #0
 8005b50:	4630      	mov	r0, r6
 8005b52:	4639      	mov	r1, r7
 8005b54:	f7fa ffca 	bl	8000aec <__aeabi_dcmplt>
 8005b58:	b148      	cbz	r0, 8005b6e <_dtoa_r+0x186>
 8005b5a:	4650      	mov	r0, sl
 8005b5c:	f7fa fcea 	bl	8000534 <__aeabi_i2d>
 8005b60:	4632      	mov	r2, r6
 8005b62:	463b      	mov	r3, r7
 8005b64:	f7fa ffb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b68:	b908      	cbnz	r0, 8005b6e <_dtoa_r+0x186>
 8005b6a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005b6e:	f1ba 0f16 	cmp.w	sl, #22
 8005b72:	d854      	bhi.n	8005c1e <_dtoa_r+0x236>
 8005b74:	4b61      	ldr	r3, [pc, #388]	; (8005cfc <_dtoa_r+0x314>)
 8005b76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b82:	f7fa ffb3 	bl	8000aec <__aeabi_dcmplt>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	d04b      	beq.n	8005c22 <_dtoa_r+0x23a>
 8005b8a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005b8e:	2300      	movs	r3, #0
 8005b90:	930e      	str	r3, [sp, #56]	; 0x38
 8005b92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b94:	1b5d      	subs	r5, r3, r5
 8005b96:	1e6b      	subs	r3, r5, #1
 8005b98:	9304      	str	r3, [sp, #16]
 8005b9a:	bf43      	ittte	mi
 8005b9c:	2300      	movmi	r3, #0
 8005b9e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005ba2:	9304      	strmi	r3, [sp, #16]
 8005ba4:	f04f 0800 	movpl.w	r8, #0
 8005ba8:	f1ba 0f00 	cmp.w	sl, #0
 8005bac:	db3b      	blt.n	8005c26 <_dtoa_r+0x23e>
 8005bae:	9b04      	ldr	r3, [sp, #16]
 8005bb0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005bb4:	4453      	add	r3, sl
 8005bb6:	9304      	str	r3, [sp, #16]
 8005bb8:	2300      	movs	r3, #0
 8005bba:	9306      	str	r3, [sp, #24]
 8005bbc:	9b05      	ldr	r3, [sp, #20]
 8005bbe:	2b09      	cmp	r3, #9
 8005bc0:	d869      	bhi.n	8005c96 <_dtoa_r+0x2ae>
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	bfc4      	itt	gt
 8005bc6:	3b04      	subgt	r3, #4
 8005bc8:	9305      	strgt	r3, [sp, #20]
 8005bca:	9b05      	ldr	r3, [sp, #20]
 8005bcc:	f1a3 0302 	sub.w	r3, r3, #2
 8005bd0:	bfcc      	ite	gt
 8005bd2:	2500      	movgt	r5, #0
 8005bd4:	2501      	movle	r5, #1
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d869      	bhi.n	8005cae <_dtoa_r+0x2c6>
 8005bda:	e8df f003 	tbb	[pc, r3]
 8005bde:	4e2c      	.short	0x4e2c
 8005be0:	5a4c      	.short	0x5a4c
 8005be2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005be6:	441d      	add	r5, r3
 8005be8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	bfc1      	itttt	gt
 8005bf0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005bf4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005bf8:	fa09 f303 	lslgt.w	r3, r9, r3
 8005bfc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005c00:	bfda      	itte	le
 8005c02:	f1c3 0320 	rsble	r3, r3, #32
 8005c06:	fa06 f003 	lslle.w	r0, r6, r3
 8005c0a:	4318      	orrgt	r0, r3
 8005c0c:	f7fa fc82 	bl	8000514 <__aeabi_ui2d>
 8005c10:	2301      	movs	r3, #1
 8005c12:	4606      	mov	r6, r0
 8005c14:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005c18:	3d01      	subs	r5, #1
 8005c1a:	9310      	str	r3, [sp, #64]	; 0x40
 8005c1c:	e771      	b.n	8005b02 <_dtoa_r+0x11a>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e7b6      	b.n	8005b90 <_dtoa_r+0x1a8>
 8005c22:	900e      	str	r0, [sp, #56]	; 0x38
 8005c24:	e7b5      	b.n	8005b92 <_dtoa_r+0x1aa>
 8005c26:	f1ca 0300 	rsb	r3, sl, #0
 8005c2a:	9306      	str	r3, [sp, #24]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	eba8 080a 	sub.w	r8, r8, sl
 8005c32:	930d      	str	r3, [sp, #52]	; 0x34
 8005c34:	e7c2      	b.n	8005bbc <_dtoa_r+0x1d4>
 8005c36:	2300      	movs	r3, #0
 8005c38:	9308      	str	r3, [sp, #32]
 8005c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	dc39      	bgt.n	8005cb4 <_dtoa_r+0x2cc>
 8005c40:	f04f 0901 	mov.w	r9, #1
 8005c44:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c48:	464b      	mov	r3, r9
 8005c4a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005c4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005c50:	2200      	movs	r2, #0
 8005c52:	6042      	str	r2, [r0, #4]
 8005c54:	2204      	movs	r2, #4
 8005c56:	f102 0614 	add.w	r6, r2, #20
 8005c5a:	429e      	cmp	r6, r3
 8005c5c:	6841      	ldr	r1, [r0, #4]
 8005c5e:	d92f      	bls.n	8005cc0 <_dtoa_r+0x2d8>
 8005c60:	4620      	mov	r0, r4
 8005c62:	f000 fcc7 	bl	80065f4 <_Balloc>
 8005c66:	9000      	str	r0, [sp, #0]
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d14b      	bne.n	8005d04 <_dtoa_r+0x31c>
 8005c6c:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <_dtoa_r+0x318>)
 8005c6e:	4602      	mov	r2, r0
 8005c70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005c74:	e6d1      	b.n	8005a1a <_dtoa_r+0x32>
 8005c76:	2301      	movs	r3, #1
 8005c78:	e7de      	b.n	8005c38 <_dtoa_r+0x250>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	9308      	str	r3, [sp, #32]
 8005c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c80:	eb0a 0903 	add.w	r9, sl, r3
 8005c84:	f109 0301 	add.w	r3, r9, #1
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	9301      	str	r3, [sp, #4]
 8005c8c:	bfb8      	it	lt
 8005c8e:	2301      	movlt	r3, #1
 8005c90:	e7dd      	b.n	8005c4e <_dtoa_r+0x266>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e7f2      	b.n	8005c7c <_dtoa_r+0x294>
 8005c96:	2501      	movs	r5, #1
 8005c98:	2300      	movs	r3, #0
 8005c9a:	9305      	str	r3, [sp, #20]
 8005c9c:	9508      	str	r5, [sp, #32]
 8005c9e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005ca8:	2312      	movs	r3, #18
 8005caa:	9209      	str	r2, [sp, #36]	; 0x24
 8005cac:	e7cf      	b.n	8005c4e <_dtoa_r+0x266>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	9308      	str	r3, [sp, #32]
 8005cb2:	e7f4      	b.n	8005c9e <_dtoa_r+0x2b6>
 8005cb4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005cb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8005cbc:	464b      	mov	r3, r9
 8005cbe:	e7c6      	b.n	8005c4e <_dtoa_r+0x266>
 8005cc0:	3101      	adds	r1, #1
 8005cc2:	6041      	str	r1, [r0, #4]
 8005cc4:	0052      	lsls	r2, r2, #1
 8005cc6:	e7c6      	b.n	8005c56 <_dtoa_r+0x26e>
 8005cc8:	636f4361 	.word	0x636f4361
 8005ccc:	3fd287a7 	.word	0x3fd287a7
 8005cd0:	8b60c8b3 	.word	0x8b60c8b3
 8005cd4:	3fc68a28 	.word	0x3fc68a28
 8005cd8:	509f79fb 	.word	0x509f79fb
 8005cdc:	3fd34413 	.word	0x3fd34413
 8005ce0:	08008af1 	.word	0x08008af1
 8005ce4:	08008b08 	.word	0x08008b08
 8005ce8:	7ff00000 	.word	0x7ff00000
 8005cec:	08008aed 	.word	0x08008aed
 8005cf0:	08008ae4 	.word	0x08008ae4
 8005cf4:	08008ac1 	.word	0x08008ac1
 8005cf8:	3ff80000 	.word	0x3ff80000
 8005cfc:	08008c00 	.word	0x08008c00
 8005d00:	08008b67 	.word	0x08008b67
 8005d04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d06:	9a00      	ldr	r2, [sp, #0]
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	9b01      	ldr	r3, [sp, #4]
 8005d0c:	2b0e      	cmp	r3, #14
 8005d0e:	f200 80ad 	bhi.w	8005e6c <_dtoa_r+0x484>
 8005d12:	2d00      	cmp	r5, #0
 8005d14:	f000 80aa 	beq.w	8005e6c <_dtoa_r+0x484>
 8005d18:	f1ba 0f00 	cmp.w	sl, #0
 8005d1c:	dd36      	ble.n	8005d8c <_dtoa_r+0x3a4>
 8005d1e:	4ac3      	ldr	r2, [pc, #780]	; (800602c <_dtoa_r+0x644>)
 8005d20:	f00a 030f 	and.w	r3, sl, #15
 8005d24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d28:	ed93 7b00 	vldr	d7, [r3]
 8005d2c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005d30:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005d34:	eeb0 8a47 	vmov.f32	s16, s14
 8005d38:	eef0 8a67 	vmov.f32	s17, s15
 8005d3c:	d016      	beq.n	8005d6c <_dtoa_r+0x384>
 8005d3e:	4bbc      	ldr	r3, [pc, #752]	; (8006030 <_dtoa_r+0x648>)
 8005d40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d48:	f7fa fd88 	bl	800085c <__aeabi_ddiv>
 8005d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d50:	f007 070f 	and.w	r7, r7, #15
 8005d54:	2503      	movs	r5, #3
 8005d56:	4eb6      	ldr	r6, [pc, #728]	; (8006030 <_dtoa_r+0x648>)
 8005d58:	b957      	cbnz	r7, 8005d70 <_dtoa_r+0x388>
 8005d5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d5e:	ec53 2b18 	vmov	r2, r3, d8
 8005d62:	f7fa fd7b 	bl	800085c <__aeabi_ddiv>
 8005d66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d6a:	e029      	b.n	8005dc0 <_dtoa_r+0x3d8>
 8005d6c:	2502      	movs	r5, #2
 8005d6e:	e7f2      	b.n	8005d56 <_dtoa_r+0x36e>
 8005d70:	07f9      	lsls	r1, r7, #31
 8005d72:	d508      	bpl.n	8005d86 <_dtoa_r+0x39e>
 8005d74:	ec51 0b18 	vmov	r0, r1, d8
 8005d78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d7c:	f7fa fc44 	bl	8000608 <__aeabi_dmul>
 8005d80:	ec41 0b18 	vmov	d8, r0, r1
 8005d84:	3501      	adds	r5, #1
 8005d86:	107f      	asrs	r7, r7, #1
 8005d88:	3608      	adds	r6, #8
 8005d8a:	e7e5      	b.n	8005d58 <_dtoa_r+0x370>
 8005d8c:	f000 80a6 	beq.w	8005edc <_dtoa_r+0x4f4>
 8005d90:	f1ca 0600 	rsb	r6, sl, #0
 8005d94:	4ba5      	ldr	r3, [pc, #660]	; (800602c <_dtoa_r+0x644>)
 8005d96:	4fa6      	ldr	r7, [pc, #664]	; (8006030 <_dtoa_r+0x648>)
 8005d98:	f006 020f 	and.w	r2, r6, #15
 8005d9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005da8:	f7fa fc2e 	bl	8000608 <__aeabi_dmul>
 8005dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005db0:	1136      	asrs	r6, r6, #4
 8005db2:	2300      	movs	r3, #0
 8005db4:	2502      	movs	r5, #2
 8005db6:	2e00      	cmp	r6, #0
 8005db8:	f040 8085 	bne.w	8005ec6 <_dtoa_r+0x4de>
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1d2      	bne.n	8005d66 <_dtoa_r+0x37e>
 8005dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 808c 	beq.w	8005ee0 <_dtoa_r+0x4f8>
 8005dc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005dcc:	4b99      	ldr	r3, [pc, #612]	; (8006034 <_dtoa_r+0x64c>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	4639      	mov	r1, r7
 8005dd4:	f7fa fe8a 	bl	8000aec <__aeabi_dcmplt>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	f000 8081 	beq.w	8005ee0 <_dtoa_r+0x4f8>
 8005dde:	9b01      	ldr	r3, [sp, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d07d      	beq.n	8005ee0 <_dtoa_r+0x4f8>
 8005de4:	f1b9 0f00 	cmp.w	r9, #0
 8005de8:	dd3c      	ble.n	8005e64 <_dtoa_r+0x47c>
 8005dea:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005dee:	9307      	str	r3, [sp, #28]
 8005df0:	2200      	movs	r2, #0
 8005df2:	4b91      	ldr	r3, [pc, #580]	; (8006038 <_dtoa_r+0x650>)
 8005df4:	4630      	mov	r0, r6
 8005df6:	4639      	mov	r1, r7
 8005df8:	f7fa fc06 	bl	8000608 <__aeabi_dmul>
 8005dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e00:	3501      	adds	r5, #1
 8005e02:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005e06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	f7fa fb92 	bl	8000534 <__aeabi_i2d>
 8005e10:	4632      	mov	r2, r6
 8005e12:	463b      	mov	r3, r7
 8005e14:	f7fa fbf8 	bl	8000608 <__aeabi_dmul>
 8005e18:	4b88      	ldr	r3, [pc, #544]	; (800603c <_dtoa_r+0x654>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f7fa fa3e 	bl	800029c <__adddf3>
 8005e20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e28:	9303      	str	r3, [sp, #12]
 8005e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d15c      	bne.n	8005eea <_dtoa_r+0x502>
 8005e30:	4b83      	ldr	r3, [pc, #524]	; (8006040 <_dtoa_r+0x658>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	4630      	mov	r0, r6
 8005e36:	4639      	mov	r1, r7
 8005e38:	f7fa fa2e 	bl	8000298 <__aeabi_dsub>
 8005e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e40:	4606      	mov	r6, r0
 8005e42:	460f      	mov	r7, r1
 8005e44:	f7fa fe70 	bl	8000b28 <__aeabi_dcmpgt>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	f040 8296 	bne.w	800637a <_dtoa_r+0x992>
 8005e4e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005e52:	4630      	mov	r0, r6
 8005e54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e58:	4639      	mov	r1, r7
 8005e5a:	f7fa fe47 	bl	8000aec <__aeabi_dcmplt>
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	f040 8288 	bne.w	8006374 <_dtoa_r+0x98c>
 8005e64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f2c0 8158 	blt.w	8006124 <_dtoa_r+0x73c>
 8005e74:	f1ba 0f0e 	cmp.w	sl, #14
 8005e78:	f300 8154 	bgt.w	8006124 <_dtoa_r+0x73c>
 8005e7c:	4b6b      	ldr	r3, [pc, #428]	; (800602c <_dtoa_r+0x644>)
 8005e7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e82:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f280 80e3 	bge.w	8006054 <_dtoa_r+0x66c>
 8005e8e:	9b01      	ldr	r3, [sp, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f300 80df 	bgt.w	8006054 <_dtoa_r+0x66c>
 8005e96:	f040 826d 	bne.w	8006374 <_dtoa_r+0x98c>
 8005e9a:	4b69      	ldr	r3, [pc, #420]	; (8006040 <_dtoa_r+0x658>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	f7fa fbb1 	bl	8000608 <__aeabi_dmul>
 8005ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eaa:	f7fa fe33 	bl	8000b14 <__aeabi_dcmpge>
 8005eae:	9e01      	ldr	r6, [sp, #4]
 8005eb0:	4637      	mov	r7, r6
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	f040 8243 	bne.w	800633e <_dtoa_r+0x956>
 8005eb8:	9d00      	ldr	r5, [sp, #0]
 8005eba:	2331      	movs	r3, #49	; 0x31
 8005ebc:	f805 3b01 	strb.w	r3, [r5], #1
 8005ec0:	f10a 0a01 	add.w	sl, sl, #1
 8005ec4:	e23f      	b.n	8006346 <_dtoa_r+0x95e>
 8005ec6:	07f2      	lsls	r2, r6, #31
 8005ec8:	d505      	bpl.n	8005ed6 <_dtoa_r+0x4ee>
 8005eca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ece:	f7fa fb9b 	bl	8000608 <__aeabi_dmul>
 8005ed2:	3501      	adds	r5, #1
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	1076      	asrs	r6, r6, #1
 8005ed8:	3708      	adds	r7, #8
 8005eda:	e76c      	b.n	8005db6 <_dtoa_r+0x3ce>
 8005edc:	2502      	movs	r5, #2
 8005ede:	e76f      	b.n	8005dc0 <_dtoa_r+0x3d8>
 8005ee0:	9b01      	ldr	r3, [sp, #4]
 8005ee2:	f8cd a01c 	str.w	sl, [sp, #28]
 8005ee6:	930c      	str	r3, [sp, #48]	; 0x30
 8005ee8:	e78d      	b.n	8005e06 <_dtoa_r+0x41e>
 8005eea:	9900      	ldr	r1, [sp, #0]
 8005eec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005eee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ef0:	4b4e      	ldr	r3, [pc, #312]	; (800602c <_dtoa_r+0x644>)
 8005ef2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ef6:	4401      	add	r1, r0
 8005ef8:	9102      	str	r1, [sp, #8]
 8005efa:	9908      	ldr	r1, [sp, #32]
 8005efc:	eeb0 8a47 	vmov.f32	s16, s14
 8005f00:	eef0 8a67 	vmov.f32	s17, s15
 8005f04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f0c:	2900      	cmp	r1, #0
 8005f0e:	d045      	beq.n	8005f9c <_dtoa_r+0x5b4>
 8005f10:	494c      	ldr	r1, [pc, #304]	; (8006044 <_dtoa_r+0x65c>)
 8005f12:	2000      	movs	r0, #0
 8005f14:	f7fa fca2 	bl	800085c <__aeabi_ddiv>
 8005f18:	ec53 2b18 	vmov	r2, r3, d8
 8005f1c:	f7fa f9bc 	bl	8000298 <__aeabi_dsub>
 8005f20:	9d00      	ldr	r5, [sp, #0]
 8005f22:	ec41 0b18 	vmov	d8, r0, r1
 8005f26:	4639      	mov	r1, r7
 8005f28:	4630      	mov	r0, r6
 8005f2a:	f7fa fe1d 	bl	8000b68 <__aeabi_d2iz>
 8005f2e:	900c      	str	r0, [sp, #48]	; 0x30
 8005f30:	f7fa fb00 	bl	8000534 <__aeabi_i2d>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4630      	mov	r0, r6
 8005f3a:	4639      	mov	r1, r7
 8005f3c:	f7fa f9ac 	bl	8000298 <__aeabi_dsub>
 8005f40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f42:	3330      	adds	r3, #48	; 0x30
 8005f44:	f805 3b01 	strb.w	r3, [r5], #1
 8005f48:	ec53 2b18 	vmov	r2, r3, d8
 8005f4c:	4606      	mov	r6, r0
 8005f4e:	460f      	mov	r7, r1
 8005f50:	f7fa fdcc 	bl	8000aec <__aeabi_dcmplt>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d165      	bne.n	8006024 <_dtoa_r+0x63c>
 8005f58:	4632      	mov	r2, r6
 8005f5a:	463b      	mov	r3, r7
 8005f5c:	4935      	ldr	r1, [pc, #212]	; (8006034 <_dtoa_r+0x64c>)
 8005f5e:	2000      	movs	r0, #0
 8005f60:	f7fa f99a 	bl	8000298 <__aeabi_dsub>
 8005f64:	ec53 2b18 	vmov	r2, r3, d8
 8005f68:	f7fa fdc0 	bl	8000aec <__aeabi_dcmplt>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	f040 80b9 	bne.w	80060e4 <_dtoa_r+0x6fc>
 8005f72:	9b02      	ldr	r3, [sp, #8]
 8005f74:	429d      	cmp	r5, r3
 8005f76:	f43f af75 	beq.w	8005e64 <_dtoa_r+0x47c>
 8005f7a:	4b2f      	ldr	r3, [pc, #188]	; (8006038 <_dtoa_r+0x650>)
 8005f7c:	ec51 0b18 	vmov	r0, r1, d8
 8005f80:	2200      	movs	r2, #0
 8005f82:	f7fa fb41 	bl	8000608 <__aeabi_dmul>
 8005f86:	4b2c      	ldr	r3, [pc, #176]	; (8006038 <_dtoa_r+0x650>)
 8005f88:	ec41 0b18 	vmov	d8, r0, r1
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	4630      	mov	r0, r6
 8005f90:	4639      	mov	r1, r7
 8005f92:	f7fa fb39 	bl	8000608 <__aeabi_dmul>
 8005f96:	4606      	mov	r6, r0
 8005f98:	460f      	mov	r7, r1
 8005f9a:	e7c4      	b.n	8005f26 <_dtoa_r+0x53e>
 8005f9c:	ec51 0b17 	vmov	r0, r1, d7
 8005fa0:	f7fa fb32 	bl	8000608 <__aeabi_dmul>
 8005fa4:	9b02      	ldr	r3, [sp, #8]
 8005fa6:	9d00      	ldr	r5, [sp, #0]
 8005fa8:	930c      	str	r3, [sp, #48]	; 0x30
 8005faa:	ec41 0b18 	vmov	d8, r0, r1
 8005fae:	4639      	mov	r1, r7
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	f7fa fdd9 	bl	8000b68 <__aeabi_d2iz>
 8005fb6:	9011      	str	r0, [sp, #68]	; 0x44
 8005fb8:	f7fa fabc 	bl	8000534 <__aeabi_i2d>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	f7fa f968 	bl	8000298 <__aeabi_dsub>
 8005fc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fca:	3330      	adds	r3, #48	; 0x30
 8005fcc:	f805 3b01 	strb.w	r3, [r5], #1
 8005fd0:	9b02      	ldr	r3, [sp, #8]
 8005fd2:	429d      	cmp	r5, r3
 8005fd4:	4606      	mov	r6, r0
 8005fd6:	460f      	mov	r7, r1
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	d134      	bne.n	8006048 <_dtoa_r+0x660>
 8005fde:	4b19      	ldr	r3, [pc, #100]	; (8006044 <_dtoa_r+0x65c>)
 8005fe0:	ec51 0b18 	vmov	r0, r1, d8
 8005fe4:	f7fa f95a 	bl	800029c <__adddf3>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4630      	mov	r0, r6
 8005fee:	4639      	mov	r1, r7
 8005ff0:	f7fa fd9a 	bl	8000b28 <__aeabi_dcmpgt>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d175      	bne.n	80060e4 <_dtoa_r+0x6fc>
 8005ff8:	ec53 2b18 	vmov	r2, r3, d8
 8005ffc:	4911      	ldr	r1, [pc, #68]	; (8006044 <_dtoa_r+0x65c>)
 8005ffe:	2000      	movs	r0, #0
 8006000:	f7fa f94a 	bl	8000298 <__aeabi_dsub>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4630      	mov	r0, r6
 800600a:	4639      	mov	r1, r7
 800600c:	f7fa fd6e 	bl	8000aec <__aeabi_dcmplt>
 8006010:	2800      	cmp	r0, #0
 8006012:	f43f af27 	beq.w	8005e64 <_dtoa_r+0x47c>
 8006016:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006018:	1e6b      	subs	r3, r5, #1
 800601a:	930c      	str	r3, [sp, #48]	; 0x30
 800601c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006020:	2b30      	cmp	r3, #48	; 0x30
 8006022:	d0f8      	beq.n	8006016 <_dtoa_r+0x62e>
 8006024:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006028:	e04a      	b.n	80060c0 <_dtoa_r+0x6d8>
 800602a:	bf00      	nop
 800602c:	08008c00 	.word	0x08008c00
 8006030:	08008bd8 	.word	0x08008bd8
 8006034:	3ff00000 	.word	0x3ff00000
 8006038:	40240000 	.word	0x40240000
 800603c:	401c0000 	.word	0x401c0000
 8006040:	40140000 	.word	0x40140000
 8006044:	3fe00000 	.word	0x3fe00000
 8006048:	4baf      	ldr	r3, [pc, #700]	; (8006308 <_dtoa_r+0x920>)
 800604a:	f7fa fadd 	bl	8000608 <__aeabi_dmul>
 800604e:	4606      	mov	r6, r0
 8006050:	460f      	mov	r7, r1
 8006052:	e7ac      	b.n	8005fae <_dtoa_r+0x5c6>
 8006054:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006058:	9d00      	ldr	r5, [sp, #0]
 800605a:	4642      	mov	r2, r8
 800605c:	464b      	mov	r3, r9
 800605e:	4630      	mov	r0, r6
 8006060:	4639      	mov	r1, r7
 8006062:	f7fa fbfb 	bl	800085c <__aeabi_ddiv>
 8006066:	f7fa fd7f 	bl	8000b68 <__aeabi_d2iz>
 800606a:	9002      	str	r0, [sp, #8]
 800606c:	f7fa fa62 	bl	8000534 <__aeabi_i2d>
 8006070:	4642      	mov	r2, r8
 8006072:	464b      	mov	r3, r9
 8006074:	f7fa fac8 	bl	8000608 <__aeabi_dmul>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4630      	mov	r0, r6
 800607e:	4639      	mov	r1, r7
 8006080:	f7fa f90a 	bl	8000298 <__aeabi_dsub>
 8006084:	9e02      	ldr	r6, [sp, #8]
 8006086:	9f01      	ldr	r7, [sp, #4]
 8006088:	3630      	adds	r6, #48	; 0x30
 800608a:	f805 6b01 	strb.w	r6, [r5], #1
 800608e:	9e00      	ldr	r6, [sp, #0]
 8006090:	1bae      	subs	r6, r5, r6
 8006092:	42b7      	cmp	r7, r6
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	d137      	bne.n	800610a <_dtoa_r+0x722>
 800609a:	f7fa f8ff 	bl	800029c <__adddf3>
 800609e:	4642      	mov	r2, r8
 80060a0:	464b      	mov	r3, r9
 80060a2:	4606      	mov	r6, r0
 80060a4:	460f      	mov	r7, r1
 80060a6:	f7fa fd3f 	bl	8000b28 <__aeabi_dcmpgt>
 80060aa:	b9c8      	cbnz	r0, 80060e0 <_dtoa_r+0x6f8>
 80060ac:	4642      	mov	r2, r8
 80060ae:	464b      	mov	r3, r9
 80060b0:	4630      	mov	r0, r6
 80060b2:	4639      	mov	r1, r7
 80060b4:	f7fa fd10 	bl	8000ad8 <__aeabi_dcmpeq>
 80060b8:	b110      	cbz	r0, 80060c0 <_dtoa_r+0x6d8>
 80060ba:	9b02      	ldr	r3, [sp, #8]
 80060bc:	07d9      	lsls	r1, r3, #31
 80060be:	d40f      	bmi.n	80060e0 <_dtoa_r+0x6f8>
 80060c0:	4620      	mov	r0, r4
 80060c2:	4659      	mov	r1, fp
 80060c4:	f000 fad6 	bl	8006674 <_Bfree>
 80060c8:	2300      	movs	r3, #0
 80060ca:	702b      	strb	r3, [r5, #0]
 80060cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060ce:	f10a 0001 	add.w	r0, sl, #1
 80060d2:	6018      	str	r0, [r3, #0]
 80060d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f43f acd8 	beq.w	8005a8c <_dtoa_r+0xa4>
 80060dc:	601d      	str	r5, [r3, #0]
 80060de:	e4d5      	b.n	8005a8c <_dtoa_r+0xa4>
 80060e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80060e4:	462b      	mov	r3, r5
 80060e6:	461d      	mov	r5, r3
 80060e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060ec:	2a39      	cmp	r2, #57	; 0x39
 80060ee:	d108      	bne.n	8006102 <_dtoa_r+0x71a>
 80060f0:	9a00      	ldr	r2, [sp, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d1f7      	bne.n	80060e6 <_dtoa_r+0x6fe>
 80060f6:	9a07      	ldr	r2, [sp, #28]
 80060f8:	9900      	ldr	r1, [sp, #0]
 80060fa:	3201      	adds	r2, #1
 80060fc:	9207      	str	r2, [sp, #28]
 80060fe:	2230      	movs	r2, #48	; 0x30
 8006100:	700a      	strb	r2, [r1, #0]
 8006102:	781a      	ldrb	r2, [r3, #0]
 8006104:	3201      	adds	r2, #1
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	e78c      	b.n	8006024 <_dtoa_r+0x63c>
 800610a:	4b7f      	ldr	r3, [pc, #508]	; (8006308 <_dtoa_r+0x920>)
 800610c:	2200      	movs	r2, #0
 800610e:	f7fa fa7b 	bl	8000608 <__aeabi_dmul>
 8006112:	2200      	movs	r2, #0
 8006114:	2300      	movs	r3, #0
 8006116:	4606      	mov	r6, r0
 8006118:	460f      	mov	r7, r1
 800611a:	f7fa fcdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800611e:	2800      	cmp	r0, #0
 8006120:	d09b      	beq.n	800605a <_dtoa_r+0x672>
 8006122:	e7cd      	b.n	80060c0 <_dtoa_r+0x6d8>
 8006124:	9a08      	ldr	r2, [sp, #32]
 8006126:	2a00      	cmp	r2, #0
 8006128:	f000 80c4 	beq.w	80062b4 <_dtoa_r+0x8cc>
 800612c:	9a05      	ldr	r2, [sp, #20]
 800612e:	2a01      	cmp	r2, #1
 8006130:	f300 80a8 	bgt.w	8006284 <_dtoa_r+0x89c>
 8006134:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006136:	2a00      	cmp	r2, #0
 8006138:	f000 80a0 	beq.w	800627c <_dtoa_r+0x894>
 800613c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006140:	9e06      	ldr	r6, [sp, #24]
 8006142:	4645      	mov	r5, r8
 8006144:	9a04      	ldr	r2, [sp, #16]
 8006146:	2101      	movs	r1, #1
 8006148:	441a      	add	r2, r3
 800614a:	4620      	mov	r0, r4
 800614c:	4498      	add	r8, r3
 800614e:	9204      	str	r2, [sp, #16]
 8006150:	f000 fb4c 	bl	80067ec <__i2b>
 8006154:	4607      	mov	r7, r0
 8006156:	2d00      	cmp	r5, #0
 8006158:	dd0b      	ble.n	8006172 <_dtoa_r+0x78a>
 800615a:	9b04      	ldr	r3, [sp, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	dd08      	ble.n	8006172 <_dtoa_r+0x78a>
 8006160:	42ab      	cmp	r3, r5
 8006162:	9a04      	ldr	r2, [sp, #16]
 8006164:	bfa8      	it	ge
 8006166:	462b      	movge	r3, r5
 8006168:	eba8 0803 	sub.w	r8, r8, r3
 800616c:	1aed      	subs	r5, r5, r3
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	9304      	str	r3, [sp, #16]
 8006172:	9b06      	ldr	r3, [sp, #24]
 8006174:	b1fb      	cbz	r3, 80061b6 <_dtoa_r+0x7ce>
 8006176:	9b08      	ldr	r3, [sp, #32]
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 809f 	beq.w	80062bc <_dtoa_r+0x8d4>
 800617e:	2e00      	cmp	r6, #0
 8006180:	dd11      	ble.n	80061a6 <_dtoa_r+0x7be>
 8006182:	4639      	mov	r1, r7
 8006184:	4632      	mov	r2, r6
 8006186:	4620      	mov	r0, r4
 8006188:	f000 fbec 	bl	8006964 <__pow5mult>
 800618c:	465a      	mov	r2, fp
 800618e:	4601      	mov	r1, r0
 8006190:	4607      	mov	r7, r0
 8006192:	4620      	mov	r0, r4
 8006194:	f000 fb40 	bl	8006818 <__multiply>
 8006198:	4659      	mov	r1, fp
 800619a:	9007      	str	r0, [sp, #28]
 800619c:	4620      	mov	r0, r4
 800619e:	f000 fa69 	bl	8006674 <_Bfree>
 80061a2:	9b07      	ldr	r3, [sp, #28]
 80061a4:	469b      	mov	fp, r3
 80061a6:	9b06      	ldr	r3, [sp, #24]
 80061a8:	1b9a      	subs	r2, r3, r6
 80061aa:	d004      	beq.n	80061b6 <_dtoa_r+0x7ce>
 80061ac:	4659      	mov	r1, fp
 80061ae:	4620      	mov	r0, r4
 80061b0:	f000 fbd8 	bl	8006964 <__pow5mult>
 80061b4:	4683      	mov	fp, r0
 80061b6:	2101      	movs	r1, #1
 80061b8:	4620      	mov	r0, r4
 80061ba:	f000 fb17 	bl	80067ec <__i2b>
 80061be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	4606      	mov	r6, r0
 80061c4:	dd7c      	ble.n	80062c0 <_dtoa_r+0x8d8>
 80061c6:	461a      	mov	r2, r3
 80061c8:	4601      	mov	r1, r0
 80061ca:	4620      	mov	r0, r4
 80061cc:	f000 fbca 	bl	8006964 <__pow5mult>
 80061d0:	9b05      	ldr	r3, [sp, #20]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	4606      	mov	r6, r0
 80061d6:	dd76      	ble.n	80062c6 <_dtoa_r+0x8de>
 80061d8:	2300      	movs	r3, #0
 80061da:	9306      	str	r3, [sp, #24]
 80061dc:	6933      	ldr	r3, [r6, #16]
 80061de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80061e2:	6918      	ldr	r0, [r3, #16]
 80061e4:	f000 fab2 	bl	800674c <__hi0bits>
 80061e8:	f1c0 0020 	rsb	r0, r0, #32
 80061ec:	9b04      	ldr	r3, [sp, #16]
 80061ee:	4418      	add	r0, r3
 80061f0:	f010 001f 	ands.w	r0, r0, #31
 80061f4:	f000 8086 	beq.w	8006304 <_dtoa_r+0x91c>
 80061f8:	f1c0 0320 	rsb	r3, r0, #32
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	dd7f      	ble.n	8006300 <_dtoa_r+0x918>
 8006200:	f1c0 001c 	rsb	r0, r0, #28
 8006204:	9b04      	ldr	r3, [sp, #16]
 8006206:	4403      	add	r3, r0
 8006208:	4480      	add	r8, r0
 800620a:	4405      	add	r5, r0
 800620c:	9304      	str	r3, [sp, #16]
 800620e:	f1b8 0f00 	cmp.w	r8, #0
 8006212:	dd05      	ble.n	8006220 <_dtoa_r+0x838>
 8006214:	4659      	mov	r1, fp
 8006216:	4642      	mov	r2, r8
 8006218:	4620      	mov	r0, r4
 800621a:	f000 fbfd 	bl	8006a18 <__lshift>
 800621e:	4683      	mov	fp, r0
 8006220:	9b04      	ldr	r3, [sp, #16]
 8006222:	2b00      	cmp	r3, #0
 8006224:	dd05      	ble.n	8006232 <_dtoa_r+0x84a>
 8006226:	4631      	mov	r1, r6
 8006228:	461a      	mov	r2, r3
 800622a:	4620      	mov	r0, r4
 800622c:	f000 fbf4 	bl	8006a18 <__lshift>
 8006230:	4606      	mov	r6, r0
 8006232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006234:	2b00      	cmp	r3, #0
 8006236:	d069      	beq.n	800630c <_dtoa_r+0x924>
 8006238:	4631      	mov	r1, r6
 800623a:	4658      	mov	r0, fp
 800623c:	f000 fc58 	bl	8006af0 <__mcmp>
 8006240:	2800      	cmp	r0, #0
 8006242:	da63      	bge.n	800630c <_dtoa_r+0x924>
 8006244:	2300      	movs	r3, #0
 8006246:	4659      	mov	r1, fp
 8006248:	220a      	movs	r2, #10
 800624a:	4620      	mov	r0, r4
 800624c:	f000 fa34 	bl	80066b8 <__multadd>
 8006250:	9b08      	ldr	r3, [sp, #32]
 8006252:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006256:	4683      	mov	fp, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 818f 	beq.w	800657c <_dtoa_r+0xb94>
 800625e:	4639      	mov	r1, r7
 8006260:	2300      	movs	r3, #0
 8006262:	220a      	movs	r2, #10
 8006264:	4620      	mov	r0, r4
 8006266:	f000 fa27 	bl	80066b8 <__multadd>
 800626a:	f1b9 0f00 	cmp.w	r9, #0
 800626e:	4607      	mov	r7, r0
 8006270:	f300 808e 	bgt.w	8006390 <_dtoa_r+0x9a8>
 8006274:	9b05      	ldr	r3, [sp, #20]
 8006276:	2b02      	cmp	r3, #2
 8006278:	dc50      	bgt.n	800631c <_dtoa_r+0x934>
 800627a:	e089      	b.n	8006390 <_dtoa_r+0x9a8>
 800627c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800627e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006282:	e75d      	b.n	8006140 <_dtoa_r+0x758>
 8006284:	9b01      	ldr	r3, [sp, #4]
 8006286:	1e5e      	subs	r6, r3, #1
 8006288:	9b06      	ldr	r3, [sp, #24]
 800628a:	42b3      	cmp	r3, r6
 800628c:	bfbf      	itttt	lt
 800628e:	9b06      	ldrlt	r3, [sp, #24]
 8006290:	9606      	strlt	r6, [sp, #24]
 8006292:	1af2      	sublt	r2, r6, r3
 8006294:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006296:	bfb6      	itet	lt
 8006298:	189b      	addlt	r3, r3, r2
 800629a:	1b9e      	subge	r6, r3, r6
 800629c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800629e:	9b01      	ldr	r3, [sp, #4]
 80062a0:	bfb8      	it	lt
 80062a2:	2600      	movlt	r6, #0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	bfb5      	itete	lt
 80062a8:	eba8 0503 	sublt.w	r5, r8, r3
 80062ac:	9b01      	ldrge	r3, [sp, #4]
 80062ae:	2300      	movlt	r3, #0
 80062b0:	4645      	movge	r5, r8
 80062b2:	e747      	b.n	8006144 <_dtoa_r+0x75c>
 80062b4:	9e06      	ldr	r6, [sp, #24]
 80062b6:	9f08      	ldr	r7, [sp, #32]
 80062b8:	4645      	mov	r5, r8
 80062ba:	e74c      	b.n	8006156 <_dtoa_r+0x76e>
 80062bc:	9a06      	ldr	r2, [sp, #24]
 80062be:	e775      	b.n	80061ac <_dtoa_r+0x7c4>
 80062c0:	9b05      	ldr	r3, [sp, #20]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	dc18      	bgt.n	80062f8 <_dtoa_r+0x910>
 80062c6:	9b02      	ldr	r3, [sp, #8]
 80062c8:	b9b3      	cbnz	r3, 80062f8 <_dtoa_r+0x910>
 80062ca:	9b03      	ldr	r3, [sp, #12]
 80062cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062d0:	b9a3      	cbnz	r3, 80062fc <_dtoa_r+0x914>
 80062d2:	9b03      	ldr	r3, [sp, #12]
 80062d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062d8:	0d1b      	lsrs	r3, r3, #20
 80062da:	051b      	lsls	r3, r3, #20
 80062dc:	b12b      	cbz	r3, 80062ea <_dtoa_r+0x902>
 80062de:	9b04      	ldr	r3, [sp, #16]
 80062e0:	3301      	adds	r3, #1
 80062e2:	9304      	str	r3, [sp, #16]
 80062e4:	f108 0801 	add.w	r8, r8, #1
 80062e8:	2301      	movs	r3, #1
 80062ea:	9306      	str	r3, [sp, #24]
 80062ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f47f af74 	bne.w	80061dc <_dtoa_r+0x7f4>
 80062f4:	2001      	movs	r0, #1
 80062f6:	e779      	b.n	80061ec <_dtoa_r+0x804>
 80062f8:	2300      	movs	r3, #0
 80062fa:	e7f6      	b.n	80062ea <_dtoa_r+0x902>
 80062fc:	9b02      	ldr	r3, [sp, #8]
 80062fe:	e7f4      	b.n	80062ea <_dtoa_r+0x902>
 8006300:	d085      	beq.n	800620e <_dtoa_r+0x826>
 8006302:	4618      	mov	r0, r3
 8006304:	301c      	adds	r0, #28
 8006306:	e77d      	b.n	8006204 <_dtoa_r+0x81c>
 8006308:	40240000 	.word	0x40240000
 800630c:	9b01      	ldr	r3, [sp, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	dc38      	bgt.n	8006384 <_dtoa_r+0x99c>
 8006312:	9b05      	ldr	r3, [sp, #20]
 8006314:	2b02      	cmp	r3, #2
 8006316:	dd35      	ble.n	8006384 <_dtoa_r+0x99c>
 8006318:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800631c:	f1b9 0f00 	cmp.w	r9, #0
 8006320:	d10d      	bne.n	800633e <_dtoa_r+0x956>
 8006322:	4631      	mov	r1, r6
 8006324:	464b      	mov	r3, r9
 8006326:	2205      	movs	r2, #5
 8006328:	4620      	mov	r0, r4
 800632a:	f000 f9c5 	bl	80066b8 <__multadd>
 800632e:	4601      	mov	r1, r0
 8006330:	4606      	mov	r6, r0
 8006332:	4658      	mov	r0, fp
 8006334:	f000 fbdc 	bl	8006af0 <__mcmp>
 8006338:	2800      	cmp	r0, #0
 800633a:	f73f adbd 	bgt.w	8005eb8 <_dtoa_r+0x4d0>
 800633e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006340:	9d00      	ldr	r5, [sp, #0]
 8006342:	ea6f 0a03 	mvn.w	sl, r3
 8006346:	f04f 0800 	mov.w	r8, #0
 800634a:	4631      	mov	r1, r6
 800634c:	4620      	mov	r0, r4
 800634e:	f000 f991 	bl	8006674 <_Bfree>
 8006352:	2f00      	cmp	r7, #0
 8006354:	f43f aeb4 	beq.w	80060c0 <_dtoa_r+0x6d8>
 8006358:	f1b8 0f00 	cmp.w	r8, #0
 800635c:	d005      	beq.n	800636a <_dtoa_r+0x982>
 800635e:	45b8      	cmp	r8, r7
 8006360:	d003      	beq.n	800636a <_dtoa_r+0x982>
 8006362:	4641      	mov	r1, r8
 8006364:	4620      	mov	r0, r4
 8006366:	f000 f985 	bl	8006674 <_Bfree>
 800636a:	4639      	mov	r1, r7
 800636c:	4620      	mov	r0, r4
 800636e:	f000 f981 	bl	8006674 <_Bfree>
 8006372:	e6a5      	b.n	80060c0 <_dtoa_r+0x6d8>
 8006374:	2600      	movs	r6, #0
 8006376:	4637      	mov	r7, r6
 8006378:	e7e1      	b.n	800633e <_dtoa_r+0x956>
 800637a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800637c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006380:	4637      	mov	r7, r6
 8006382:	e599      	b.n	8005eb8 <_dtoa_r+0x4d0>
 8006384:	9b08      	ldr	r3, [sp, #32]
 8006386:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 80fd 	beq.w	800658a <_dtoa_r+0xba2>
 8006390:	2d00      	cmp	r5, #0
 8006392:	dd05      	ble.n	80063a0 <_dtoa_r+0x9b8>
 8006394:	4639      	mov	r1, r7
 8006396:	462a      	mov	r2, r5
 8006398:	4620      	mov	r0, r4
 800639a:	f000 fb3d 	bl	8006a18 <__lshift>
 800639e:	4607      	mov	r7, r0
 80063a0:	9b06      	ldr	r3, [sp, #24]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d05c      	beq.n	8006460 <_dtoa_r+0xa78>
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	4620      	mov	r0, r4
 80063aa:	f000 f923 	bl	80065f4 <_Balloc>
 80063ae:	4605      	mov	r5, r0
 80063b0:	b928      	cbnz	r0, 80063be <_dtoa_r+0x9d6>
 80063b2:	4b80      	ldr	r3, [pc, #512]	; (80065b4 <_dtoa_r+0xbcc>)
 80063b4:	4602      	mov	r2, r0
 80063b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80063ba:	f7ff bb2e 	b.w	8005a1a <_dtoa_r+0x32>
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	3202      	adds	r2, #2
 80063c2:	0092      	lsls	r2, r2, #2
 80063c4:	f107 010c 	add.w	r1, r7, #12
 80063c8:	300c      	adds	r0, #12
 80063ca:	f000 f905 	bl	80065d8 <memcpy>
 80063ce:	2201      	movs	r2, #1
 80063d0:	4629      	mov	r1, r5
 80063d2:	4620      	mov	r0, r4
 80063d4:	f000 fb20 	bl	8006a18 <__lshift>
 80063d8:	9b00      	ldr	r3, [sp, #0]
 80063da:	3301      	adds	r3, #1
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	9b00      	ldr	r3, [sp, #0]
 80063e0:	444b      	add	r3, r9
 80063e2:	9307      	str	r3, [sp, #28]
 80063e4:	9b02      	ldr	r3, [sp, #8]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	46b8      	mov	r8, r7
 80063ec:	9306      	str	r3, [sp, #24]
 80063ee:	4607      	mov	r7, r0
 80063f0:	9b01      	ldr	r3, [sp, #4]
 80063f2:	4631      	mov	r1, r6
 80063f4:	3b01      	subs	r3, #1
 80063f6:	4658      	mov	r0, fp
 80063f8:	9302      	str	r3, [sp, #8]
 80063fa:	f7ff fa67 	bl	80058cc <quorem>
 80063fe:	4603      	mov	r3, r0
 8006400:	3330      	adds	r3, #48	; 0x30
 8006402:	9004      	str	r0, [sp, #16]
 8006404:	4641      	mov	r1, r8
 8006406:	4658      	mov	r0, fp
 8006408:	9308      	str	r3, [sp, #32]
 800640a:	f000 fb71 	bl	8006af0 <__mcmp>
 800640e:	463a      	mov	r2, r7
 8006410:	4681      	mov	r9, r0
 8006412:	4631      	mov	r1, r6
 8006414:	4620      	mov	r0, r4
 8006416:	f000 fb87 	bl	8006b28 <__mdiff>
 800641a:	68c2      	ldr	r2, [r0, #12]
 800641c:	9b08      	ldr	r3, [sp, #32]
 800641e:	4605      	mov	r5, r0
 8006420:	bb02      	cbnz	r2, 8006464 <_dtoa_r+0xa7c>
 8006422:	4601      	mov	r1, r0
 8006424:	4658      	mov	r0, fp
 8006426:	f000 fb63 	bl	8006af0 <__mcmp>
 800642a:	9b08      	ldr	r3, [sp, #32]
 800642c:	4602      	mov	r2, r0
 800642e:	4629      	mov	r1, r5
 8006430:	4620      	mov	r0, r4
 8006432:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006436:	f000 f91d 	bl	8006674 <_Bfree>
 800643a:	9b05      	ldr	r3, [sp, #20]
 800643c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800643e:	9d01      	ldr	r5, [sp, #4]
 8006440:	ea43 0102 	orr.w	r1, r3, r2
 8006444:	9b06      	ldr	r3, [sp, #24]
 8006446:	430b      	orrs	r3, r1
 8006448:	9b08      	ldr	r3, [sp, #32]
 800644a:	d10d      	bne.n	8006468 <_dtoa_r+0xa80>
 800644c:	2b39      	cmp	r3, #57	; 0x39
 800644e:	d029      	beq.n	80064a4 <_dtoa_r+0xabc>
 8006450:	f1b9 0f00 	cmp.w	r9, #0
 8006454:	dd01      	ble.n	800645a <_dtoa_r+0xa72>
 8006456:	9b04      	ldr	r3, [sp, #16]
 8006458:	3331      	adds	r3, #49	; 0x31
 800645a:	9a02      	ldr	r2, [sp, #8]
 800645c:	7013      	strb	r3, [r2, #0]
 800645e:	e774      	b.n	800634a <_dtoa_r+0x962>
 8006460:	4638      	mov	r0, r7
 8006462:	e7b9      	b.n	80063d8 <_dtoa_r+0x9f0>
 8006464:	2201      	movs	r2, #1
 8006466:	e7e2      	b.n	800642e <_dtoa_r+0xa46>
 8006468:	f1b9 0f00 	cmp.w	r9, #0
 800646c:	db06      	blt.n	800647c <_dtoa_r+0xa94>
 800646e:	9905      	ldr	r1, [sp, #20]
 8006470:	ea41 0909 	orr.w	r9, r1, r9
 8006474:	9906      	ldr	r1, [sp, #24]
 8006476:	ea59 0101 	orrs.w	r1, r9, r1
 800647a:	d120      	bne.n	80064be <_dtoa_r+0xad6>
 800647c:	2a00      	cmp	r2, #0
 800647e:	ddec      	ble.n	800645a <_dtoa_r+0xa72>
 8006480:	4659      	mov	r1, fp
 8006482:	2201      	movs	r2, #1
 8006484:	4620      	mov	r0, r4
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	f000 fac6 	bl	8006a18 <__lshift>
 800648c:	4631      	mov	r1, r6
 800648e:	4683      	mov	fp, r0
 8006490:	f000 fb2e 	bl	8006af0 <__mcmp>
 8006494:	2800      	cmp	r0, #0
 8006496:	9b01      	ldr	r3, [sp, #4]
 8006498:	dc02      	bgt.n	80064a0 <_dtoa_r+0xab8>
 800649a:	d1de      	bne.n	800645a <_dtoa_r+0xa72>
 800649c:	07da      	lsls	r2, r3, #31
 800649e:	d5dc      	bpl.n	800645a <_dtoa_r+0xa72>
 80064a0:	2b39      	cmp	r3, #57	; 0x39
 80064a2:	d1d8      	bne.n	8006456 <_dtoa_r+0xa6e>
 80064a4:	9a02      	ldr	r2, [sp, #8]
 80064a6:	2339      	movs	r3, #57	; 0x39
 80064a8:	7013      	strb	r3, [r2, #0]
 80064aa:	462b      	mov	r3, r5
 80064ac:	461d      	mov	r5, r3
 80064ae:	3b01      	subs	r3, #1
 80064b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80064b4:	2a39      	cmp	r2, #57	; 0x39
 80064b6:	d050      	beq.n	800655a <_dtoa_r+0xb72>
 80064b8:	3201      	adds	r2, #1
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	e745      	b.n	800634a <_dtoa_r+0x962>
 80064be:	2a00      	cmp	r2, #0
 80064c0:	dd03      	ble.n	80064ca <_dtoa_r+0xae2>
 80064c2:	2b39      	cmp	r3, #57	; 0x39
 80064c4:	d0ee      	beq.n	80064a4 <_dtoa_r+0xabc>
 80064c6:	3301      	adds	r3, #1
 80064c8:	e7c7      	b.n	800645a <_dtoa_r+0xa72>
 80064ca:	9a01      	ldr	r2, [sp, #4]
 80064cc:	9907      	ldr	r1, [sp, #28]
 80064ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80064d2:	428a      	cmp	r2, r1
 80064d4:	d02a      	beq.n	800652c <_dtoa_r+0xb44>
 80064d6:	4659      	mov	r1, fp
 80064d8:	2300      	movs	r3, #0
 80064da:	220a      	movs	r2, #10
 80064dc:	4620      	mov	r0, r4
 80064de:	f000 f8eb 	bl	80066b8 <__multadd>
 80064e2:	45b8      	cmp	r8, r7
 80064e4:	4683      	mov	fp, r0
 80064e6:	f04f 0300 	mov.w	r3, #0
 80064ea:	f04f 020a 	mov.w	r2, #10
 80064ee:	4641      	mov	r1, r8
 80064f0:	4620      	mov	r0, r4
 80064f2:	d107      	bne.n	8006504 <_dtoa_r+0xb1c>
 80064f4:	f000 f8e0 	bl	80066b8 <__multadd>
 80064f8:	4680      	mov	r8, r0
 80064fa:	4607      	mov	r7, r0
 80064fc:	9b01      	ldr	r3, [sp, #4]
 80064fe:	3301      	adds	r3, #1
 8006500:	9301      	str	r3, [sp, #4]
 8006502:	e775      	b.n	80063f0 <_dtoa_r+0xa08>
 8006504:	f000 f8d8 	bl	80066b8 <__multadd>
 8006508:	4639      	mov	r1, r7
 800650a:	4680      	mov	r8, r0
 800650c:	2300      	movs	r3, #0
 800650e:	220a      	movs	r2, #10
 8006510:	4620      	mov	r0, r4
 8006512:	f000 f8d1 	bl	80066b8 <__multadd>
 8006516:	4607      	mov	r7, r0
 8006518:	e7f0      	b.n	80064fc <_dtoa_r+0xb14>
 800651a:	f1b9 0f00 	cmp.w	r9, #0
 800651e:	9a00      	ldr	r2, [sp, #0]
 8006520:	bfcc      	ite	gt
 8006522:	464d      	movgt	r5, r9
 8006524:	2501      	movle	r5, #1
 8006526:	4415      	add	r5, r2
 8006528:	f04f 0800 	mov.w	r8, #0
 800652c:	4659      	mov	r1, fp
 800652e:	2201      	movs	r2, #1
 8006530:	4620      	mov	r0, r4
 8006532:	9301      	str	r3, [sp, #4]
 8006534:	f000 fa70 	bl	8006a18 <__lshift>
 8006538:	4631      	mov	r1, r6
 800653a:	4683      	mov	fp, r0
 800653c:	f000 fad8 	bl	8006af0 <__mcmp>
 8006540:	2800      	cmp	r0, #0
 8006542:	dcb2      	bgt.n	80064aa <_dtoa_r+0xac2>
 8006544:	d102      	bne.n	800654c <_dtoa_r+0xb64>
 8006546:	9b01      	ldr	r3, [sp, #4]
 8006548:	07db      	lsls	r3, r3, #31
 800654a:	d4ae      	bmi.n	80064aa <_dtoa_r+0xac2>
 800654c:	462b      	mov	r3, r5
 800654e:	461d      	mov	r5, r3
 8006550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006554:	2a30      	cmp	r2, #48	; 0x30
 8006556:	d0fa      	beq.n	800654e <_dtoa_r+0xb66>
 8006558:	e6f7      	b.n	800634a <_dtoa_r+0x962>
 800655a:	9a00      	ldr	r2, [sp, #0]
 800655c:	429a      	cmp	r2, r3
 800655e:	d1a5      	bne.n	80064ac <_dtoa_r+0xac4>
 8006560:	f10a 0a01 	add.w	sl, sl, #1
 8006564:	2331      	movs	r3, #49	; 0x31
 8006566:	e779      	b.n	800645c <_dtoa_r+0xa74>
 8006568:	4b13      	ldr	r3, [pc, #76]	; (80065b8 <_dtoa_r+0xbd0>)
 800656a:	f7ff baaf 	b.w	8005acc <_dtoa_r+0xe4>
 800656e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006570:	2b00      	cmp	r3, #0
 8006572:	f47f aa86 	bne.w	8005a82 <_dtoa_r+0x9a>
 8006576:	4b11      	ldr	r3, [pc, #68]	; (80065bc <_dtoa_r+0xbd4>)
 8006578:	f7ff baa8 	b.w	8005acc <_dtoa_r+0xe4>
 800657c:	f1b9 0f00 	cmp.w	r9, #0
 8006580:	dc03      	bgt.n	800658a <_dtoa_r+0xba2>
 8006582:	9b05      	ldr	r3, [sp, #20]
 8006584:	2b02      	cmp	r3, #2
 8006586:	f73f aec9 	bgt.w	800631c <_dtoa_r+0x934>
 800658a:	9d00      	ldr	r5, [sp, #0]
 800658c:	4631      	mov	r1, r6
 800658e:	4658      	mov	r0, fp
 8006590:	f7ff f99c 	bl	80058cc <quorem>
 8006594:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006598:	f805 3b01 	strb.w	r3, [r5], #1
 800659c:	9a00      	ldr	r2, [sp, #0]
 800659e:	1aaa      	subs	r2, r5, r2
 80065a0:	4591      	cmp	r9, r2
 80065a2:	ddba      	ble.n	800651a <_dtoa_r+0xb32>
 80065a4:	4659      	mov	r1, fp
 80065a6:	2300      	movs	r3, #0
 80065a8:	220a      	movs	r2, #10
 80065aa:	4620      	mov	r0, r4
 80065ac:	f000 f884 	bl	80066b8 <__multadd>
 80065b0:	4683      	mov	fp, r0
 80065b2:	e7eb      	b.n	800658c <_dtoa_r+0xba4>
 80065b4:	08008b67 	.word	0x08008b67
 80065b8:	08008ac0 	.word	0x08008ac0
 80065bc:	08008ae4 	.word	0x08008ae4

080065c0 <_localeconv_r>:
 80065c0:	4800      	ldr	r0, [pc, #0]	; (80065c4 <_localeconv_r+0x4>)
 80065c2:	4770      	bx	lr
 80065c4:	20002170 	.word	0x20002170

080065c8 <malloc>:
 80065c8:	4b02      	ldr	r3, [pc, #8]	; (80065d4 <malloc+0xc>)
 80065ca:	4601      	mov	r1, r0
 80065cc:	6818      	ldr	r0, [r3, #0]
 80065ce:	f000 bbef 	b.w	8006db0 <_malloc_r>
 80065d2:	bf00      	nop
 80065d4:	2000201c 	.word	0x2000201c

080065d8 <memcpy>:
 80065d8:	440a      	add	r2, r1
 80065da:	4291      	cmp	r1, r2
 80065dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80065e0:	d100      	bne.n	80065e4 <memcpy+0xc>
 80065e2:	4770      	bx	lr
 80065e4:	b510      	push	{r4, lr}
 80065e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ee:	4291      	cmp	r1, r2
 80065f0:	d1f9      	bne.n	80065e6 <memcpy+0xe>
 80065f2:	bd10      	pop	{r4, pc}

080065f4 <_Balloc>:
 80065f4:	b570      	push	{r4, r5, r6, lr}
 80065f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065f8:	4604      	mov	r4, r0
 80065fa:	460d      	mov	r5, r1
 80065fc:	b976      	cbnz	r6, 800661c <_Balloc+0x28>
 80065fe:	2010      	movs	r0, #16
 8006600:	f7ff ffe2 	bl	80065c8 <malloc>
 8006604:	4602      	mov	r2, r0
 8006606:	6260      	str	r0, [r4, #36]	; 0x24
 8006608:	b920      	cbnz	r0, 8006614 <_Balloc+0x20>
 800660a:	4b18      	ldr	r3, [pc, #96]	; (800666c <_Balloc+0x78>)
 800660c:	4818      	ldr	r0, [pc, #96]	; (8006670 <_Balloc+0x7c>)
 800660e:	2166      	movs	r1, #102	; 0x66
 8006610:	f000 fd94 	bl	800713c <__assert_func>
 8006614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006618:	6006      	str	r6, [r0, #0]
 800661a:	60c6      	str	r6, [r0, #12]
 800661c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800661e:	68f3      	ldr	r3, [r6, #12]
 8006620:	b183      	cbz	r3, 8006644 <_Balloc+0x50>
 8006622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800662a:	b9b8      	cbnz	r0, 800665c <_Balloc+0x68>
 800662c:	2101      	movs	r1, #1
 800662e:	fa01 f605 	lsl.w	r6, r1, r5
 8006632:	1d72      	adds	r2, r6, #5
 8006634:	0092      	lsls	r2, r2, #2
 8006636:	4620      	mov	r0, r4
 8006638:	f000 fb5a 	bl	8006cf0 <_calloc_r>
 800663c:	b160      	cbz	r0, 8006658 <_Balloc+0x64>
 800663e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006642:	e00e      	b.n	8006662 <_Balloc+0x6e>
 8006644:	2221      	movs	r2, #33	; 0x21
 8006646:	2104      	movs	r1, #4
 8006648:	4620      	mov	r0, r4
 800664a:	f000 fb51 	bl	8006cf0 <_calloc_r>
 800664e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006650:	60f0      	str	r0, [r6, #12]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e4      	bne.n	8006622 <_Balloc+0x2e>
 8006658:	2000      	movs	r0, #0
 800665a:	bd70      	pop	{r4, r5, r6, pc}
 800665c:	6802      	ldr	r2, [r0, #0]
 800665e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006662:	2300      	movs	r3, #0
 8006664:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006668:	e7f7      	b.n	800665a <_Balloc+0x66>
 800666a:	bf00      	nop
 800666c:	08008af1 	.word	0x08008af1
 8006670:	08008b78 	.word	0x08008b78

08006674 <_Bfree>:
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006678:	4605      	mov	r5, r0
 800667a:	460c      	mov	r4, r1
 800667c:	b976      	cbnz	r6, 800669c <_Bfree+0x28>
 800667e:	2010      	movs	r0, #16
 8006680:	f7ff ffa2 	bl	80065c8 <malloc>
 8006684:	4602      	mov	r2, r0
 8006686:	6268      	str	r0, [r5, #36]	; 0x24
 8006688:	b920      	cbnz	r0, 8006694 <_Bfree+0x20>
 800668a:	4b09      	ldr	r3, [pc, #36]	; (80066b0 <_Bfree+0x3c>)
 800668c:	4809      	ldr	r0, [pc, #36]	; (80066b4 <_Bfree+0x40>)
 800668e:	218a      	movs	r1, #138	; 0x8a
 8006690:	f000 fd54 	bl	800713c <__assert_func>
 8006694:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006698:	6006      	str	r6, [r0, #0]
 800669a:	60c6      	str	r6, [r0, #12]
 800669c:	b13c      	cbz	r4, 80066ae <_Bfree+0x3a>
 800669e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80066a0:	6862      	ldr	r2, [r4, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066a8:	6021      	str	r1, [r4, #0]
 80066aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
 80066b0:	08008af1 	.word	0x08008af1
 80066b4:	08008b78 	.word	0x08008b78

080066b8 <__multadd>:
 80066b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066bc:	690e      	ldr	r6, [r1, #16]
 80066be:	4607      	mov	r7, r0
 80066c0:	4698      	mov	r8, r3
 80066c2:	460c      	mov	r4, r1
 80066c4:	f101 0014 	add.w	r0, r1, #20
 80066c8:	2300      	movs	r3, #0
 80066ca:	6805      	ldr	r5, [r0, #0]
 80066cc:	b2a9      	uxth	r1, r5
 80066ce:	fb02 8101 	mla	r1, r2, r1, r8
 80066d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80066d6:	0c2d      	lsrs	r5, r5, #16
 80066d8:	fb02 c505 	mla	r5, r2, r5, ip
 80066dc:	b289      	uxth	r1, r1
 80066de:	3301      	adds	r3, #1
 80066e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80066e4:	429e      	cmp	r6, r3
 80066e6:	f840 1b04 	str.w	r1, [r0], #4
 80066ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80066ee:	dcec      	bgt.n	80066ca <__multadd+0x12>
 80066f0:	f1b8 0f00 	cmp.w	r8, #0
 80066f4:	d022      	beq.n	800673c <__multadd+0x84>
 80066f6:	68a3      	ldr	r3, [r4, #8]
 80066f8:	42b3      	cmp	r3, r6
 80066fa:	dc19      	bgt.n	8006730 <__multadd+0x78>
 80066fc:	6861      	ldr	r1, [r4, #4]
 80066fe:	4638      	mov	r0, r7
 8006700:	3101      	adds	r1, #1
 8006702:	f7ff ff77 	bl	80065f4 <_Balloc>
 8006706:	4605      	mov	r5, r0
 8006708:	b928      	cbnz	r0, 8006716 <__multadd+0x5e>
 800670a:	4602      	mov	r2, r0
 800670c:	4b0d      	ldr	r3, [pc, #52]	; (8006744 <__multadd+0x8c>)
 800670e:	480e      	ldr	r0, [pc, #56]	; (8006748 <__multadd+0x90>)
 8006710:	21b5      	movs	r1, #181	; 0xb5
 8006712:	f000 fd13 	bl	800713c <__assert_func>
 8006716:	6922      	ldr	r2, [r4, #16]
 8006718:	3202      	adds	r2, #2
 800671a:	f104 010c 	add.w	r1, r4, #12
 800671e:	0092      	lsls	r2, r2, #2
 8006720:	300c      	adds	r0, #12
 8006722:	f7ff ff59 	bl	80065d8 <memcpy>
 8006726:	4621      	mov	r1, r4
 8006728:	4638      	mov	r0, r7
 800672a:	f7ff ffa3 	bl	8006674 <_Bfree>
 800672e:	462c      	mov	r4, r5
 8006730:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006734:	3601      	adds	r6, #1
 8006736:	f8c3 8014 	str.w	r8, [r3, #20]
 800673a:	6126      	str	r6, [r4, #16]
 800673c:	4620      	mov	r0, r4
 800673e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006742:	bf00      	nop
 8006744:	08008b67 	.word	0x08008b67
 8006748:	08008b78 	.word	0x08008b78

0800674c <__hi0bits>:
 800674c:	0c03      	lsrs	r3, r0, #16
 800674e:	041b      	lsls	r3, r3, #16
 8006750:	b9d3      	cbnz	r3, 8006788 <__hi0bits+0x3c>
 8006752:	0400      	lsls	r0, r0, #16
 8006754:	2310      	movs	r3, #16
 8006756:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800675a:	bf04      	itt	eq
 800675c:	0200      	lsleq	r0, r0, #8
 800675e:	3308      	addeq	r3, #8
 8006760:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006764:	bf04      	itt	eq
 8006766:	0100      	lsleq	r0, r0, #4
 8006768:	3304      	addeq	r3, #4
 800676a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800676e:	bf04      	itt	eq
 8006770:	0080      	lsleq	r0, r0, #2
 8006772:	3302      	addeq	r3, #2
 8006774:	2800      	cmp	r0, #0
 8006776:	db05      	blt.n	8006784 <__hi0bits+0x38>
 8006778:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800677c:	f103 0301 	add.w	r3, r3, #1
 8006780:	bf08      	it	eq
 8006782:	2320      	moveq	r3, #32
 8006784:	4618      	mov	r0, r3
 8006786:	4770      	bx	lr
 8006788:	2300      	movs	r3, #0
 800678a:	e7e4      	b.n	8006756 <__hi0bits+0xa>

0800678c <__lo0bits>:
 800678c:	6803      	ldr	r3, [r0, #0]
 800678e:	f013 0207 	ands.w	r2, r3, #7
 8006792:	4601      	mov	r1, r0
 8006794:	d00b      	beq.n	80067ae <__lo0bits+0x22>
 8006796:	07da      	lsls	r2, r3, #31
 8006798:	d424      	bmi.n	80067e4 <__lo0bits+0x58>
 800679a:	0798      	lsls	r0, r3, #30
 800679c:	bf49      	itett	mi
 800679e:	085b      	lsrmi	r3, r3, #1
 80067a0:	089b      	lsrpl	r3, r3, #2
 80067a2:	2001      	movmi	r0, #1
 80067a4:	600b      	strmi	r3, [r1, #0]
 80067a6:	bf5c      	itt	pl
 80067a8:	600b      	strpl	r3, [r1, #0]
 80067aa:	2002      	movpl	r0, #2
 80067ac:	4770      	bx	lr
 80067ae:	b298      	uxth	r0, r3
 80067b0:	b9b0      	cbnz	r0, 80067e0 <__lo0bits+0x54>
 80067b2:	0c1b      	lsrs	r3, r3, #16
 80067b4:	2010      	movs	r0, #16
 80067b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80067ba:	bf04      	itt	eq
 80067bc:	0a1b      	lsreq	r3, r3, #8
 80067be:	3008      	addeq	r0, #8
 80067c0:	071a      	lsls	r2, r3, #28
 80067c2:	bf04      	itt	eq
 80067c4:	091b      	lsreq	r3, r3, #4
 80067c6:	3004      	addeq	r0, #4
 80067c8:	079a      	lsls	r2, r3, #30
 80067ca:	bf04      	itt	eq
 80067cc:	089b      	lsreq	r3, r3, #2
 80067ce:	3002      	addeq	r0, #2
 80067d0:	07da      	lsls	r2, r3, #31
 80067d2:	d403      	bmi.n	80067dc <__lo0bits+0x50>
 80067d4:	085b      	lsrs	r3, r3, #1
 80067d6:	f100 0001 	add.w	r0, r0, #1
 80067da:	d005      	beq.n	80067e8 <__lo0bits+0x5c>
 80067dc:	600b      	str	r3, [r1, #0]
 80067de:	4770      	bx	lr
 80067e0:	4610      	mov	r0, r2
 80067e2:	e7e8      	b.n	80067b6 <__lo0bits+0x2a>
 80067e4:	2000      	movs	r0, #0
 80067e6:	4770      	bx	lr
 80067e8:	2020      	movs	r0, #32
 80067ea:	4770      	bx	lr

080067ec <__i2b>:
 80067ec:	b510      	push	{r4, lr}
 80067ee:	460c      	mov	r4, r1
 80067f0:	2101      	movs	r1, #1
 80067f2:	f7ff feff 	bl	80065f4 <_Balloc>
 80067f6:	4602      	mov	r2, r0
 80067f8:	b928      	cbnz	r0, 8006806 <__i2b+0x1a>
 80067fa:	4b05      	ldr	r3, [pc, #20]	; (8006810 <__i2b+0x24>)
 80067fc:	4805      	ldr	r0, [pc, #20]	; (8006814 <__i2b+0x28>)
 80067fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006802:	f000 fc9b 	bl	800713c <__assert_func>
 8006806:	2301      	movs	r3, #1
 8006808:	6144      	str	r4, [r0, #20]
 800680a:	6103      	str	r3, [r0, #16]
 800680c:	bd10      	pop	{r4, pc}
 800680e:	bf00      	nop
 8006810:	08008b67 	.word	0x08008b67
 8006814:	08008b78 	.word	0x08008b78

08006818 <__multiply>:
 8006818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681c:	4614      	mov	r4, r2
 800681e:	690a      	ldr	r2, [r1, #16]
 8006820:	6923      	ldr	r3, [r4, #16]
 8006822:	429a      	cmp	r2, r3
 8006824:	bfb8      	it	lt
 8006826:	460b      	movlt	r3, r1
 8006828:	460d      	mov	r5, r1
 800682a:	bfbc      	itt	lt
 800682c:	4625      	movlt	r5, r4
 800682e:	461c      	movlt	r4, r3
 8006830:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006834:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006838:	68ab      	ldr	r3, [r5, #8]
 800683a:	6869      	ldr	r1, [r5, #4]
 800683c:	eb0a 0709 	add.w	r7, sl, r9
 8006840:	42bb      	cmp	r3, r7
 8006842:	b085      	sub	sp, #20
 8006844:	bfb8      	it	lt
 8006846:	3101      	addlt	r1, #1
 8006848:	f7ff fed4 	bl	80065f4 <_Balloc>
 800684c:	b930      	cbnz	r0, 800685c <__multiply+0x44>
 800684e:	4602      	mov	r2, r0
 8006850:	4b42      	ldr	r3, [pc, #264]	; (800695c <__multiply+0x144>)
 8006852:	4843      	ldr	r0, [pc, #268]	; (8006960 <__multiply+0x148>)
 8006854:	f240 115d 	movw	r1, #349	; 0x15d
 8006858:	f000 fc70 	bl	800713c <__assert_func>
 800685c:	f100 0614 	add.w	r6, r0, #20
 8006860:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006864:	4633      	mov	r3, r6
 8006866:	2200      	movs	r2, #0
 8006868:	4543      	cmp	r3, r8
 800686a:	d31e      	bcc.n	80068aa <__multiply+0x92>
 800686c:	f105 0c14 	add.w	ip, r5, #20
 8006870:	f104 0314 	add.w	r3, r4, #20
 8006874:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006878:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800687c:	9202      	str	r2, [sp, #8]
 800687e:	ebac 0205 	sub.w	r2, ip, r5
 8006882:	3a15      	subs	r2, #21
 8006884:	f022 0203 	bic.w	r2, r2, #3
 8006888:	3204      	adds	r2, #4
 800688a:	f105 0115 	add.w	r1, r5, #21
 800688e:	458c      	cmp	ip, r1
 8006890:	bf38      	it	cc
 8006892:	2204      	movcc	r2, #4
 8006894:	9201      	str	r2, [sp, #4]
 8006896:	9a02      	ldr	r2, [sp, #8]
 8006898:	9303      	str	r3, [sp, #12]
 800689a:	429a      	cmp	r2, r3
 800689c:	d808      	bhi.n	80068b0 <__multiply+0x98>
 800689e:	2f00      	cmp	r7, #0
 80068a0:	dc55      	bgt.n	800694e <__multiply+0x136>
 80068a2:	6107      	str	r7, [r0, #16]
 80068a4:	b005      	add	sp, #20
 80068a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068aa:	f843 2b04 	str.w	r2, [r3], #4
 80068ae:	e7db      	b.n	8006868 <__multiply+0x50>
 80068b0:	f8b3 a000 	ldrh.w	sl, [r3]
 80068b4:	f1ba 0f00 	cmp.w	sl, #0
 80068b8:	d020      	beq.n	80068fc <__multiply+0xe4>
 80068ba:	f105 0e14 	add.w	lr, r5, #20
 80068be:	46b1      	mov	r9, r6
 80068c0:	2200      	movs	r2, #0
 80068c2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80068c6:	f8d9 b000 	ldr.w	fp, [r9]
 80068ca:	b2a1      	uxth	r1, r4
 80068cc:	fa1f fb8b 	uxth.w	fp, fp
 80068d0:	fb0a b101 	mla	r1, sl, r1, fp
 80068d4:	4411      	add	r1, r2
 80068d6:	f8d9 2000 	ldr.w	r2, [r9]
 80068da:	0c24      	lsrs	r4, r4, #16
 80068dc:	0c12      	lsrs	r2, r2, #16
 80068de:	fb0a 2404 	mla	r4, sl, r4, r2
 80068e2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80068e6:	b289      	uxth	r1, r1
 80068e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80068ec:	45f4      	cmp	ip, lr
 80068ee:	f849 1b04 	str.w	r1, [r9], #4
 80068f2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80068f6:	d8e4      	bhi.n	80068c2 <__multiply+0xaa>
 80068f8:	9901      	ldr	r1, [sp, #4]
 80068fa:	5072      	str	r2, [r6, r1]
 80068fc:	9a03      	ldr	r2, [sp, #12]
 80068fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006902:	3304      	adds	r3, #4
 8006904:	f1b9 0f00 	cmp.w	r9, #0
 8006908:	d01f      	beq.n	800694a <__multiply+0x132>
 800690a:	6834      	ldr	r4, [r6, #0]
 800690c:	f105 0114 	add.w	r1, r5, #20
 8006910:	46b6      	mov	lr, r6
 8006912:	f04f 0a00 	mov.w	sl, #0
 8006916:	880a      	ldrh	r2, [r1, #0]
 8006918:	f8be b002 	ldrh.w	fp, [lr, #2]
 800691c:	fb09 b202 	mla	r2, r9, r2, fp
 8006920:	4492      	add	sl, r2
 8006922:	b2a4      	uxth	r4, r4
 8006924:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006928:	f84e 4b04 	str.w	r4, [lr], #4
 800692c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006930:	f8be 2000 	ldrh.w	r2, [lr]
 8006934:	0c24      	lsrs	r4, r4, #16
 8006936:	fb09 2404 	mla	r4, r9, r4, r2
 800693a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800693e:	458c      	cmp	ip, r1
 8006940:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006944:	d8e7      	bhi.n	8006916 <__multiply+0xfe>
 8006946:	9a01      	ldr	r2, [sp, #4]
 8006948:	50b4      	str	r4, [r6, r2]
 800694a:	3604      	adds	r6, #4
 800694c:	e7a3      	b.n	8006896 <__multiply+0x7e>
 800694e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1a5      	bne.n	80068a2 <__multiply+0x8a>
 8006956:	3f01      	subs	r7, #1
 8006958:	e7a1      	b.n	800689e <__multiply+0x86>
 800695a:	bf00      	nop
 800695c:	08008b67 	.word	0x08008b67
 8006960:	08008b78 	.word	0x08008b78

08006964 <__pow5mult>:
 8006964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006968:	4615      	mov	r5, r2
 800696a:	f012 0203 	ands.w	r2, r2, #3
 800696e:	4606      	mov	r6, r0
 8006970:	460f      	mov	r7, r1
 8006972:	d007      	beq.n	8006984 <__pow5mult+0x20>
 8006974:	4c25      	ldr	r4, [pc, #148]	; (8006a0c <__pow5mult+0xa8>)
 8006976:	3a01      	subs	r2, #1
 8006978:	2300      	movs	r3, #0
 800697a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800697e:	f7ff fe9b 	bl	80066b8 <__multadd>
 8006982:	4607      	mov	r7, r0
 8006984:	10ad      	asrs	r5, r5, #2
 8006986:	d03d      	beq.n	8006a04 <__pow5mult+0xa0>
 8006988:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800698a:	b97c      	cbnz	r4, 80069ac <__pow5mult+0x48>
 800698c:	2010      	movs	r0, #16
 800698e:	f7ff fe1b 	bl	80065c8 <malloc>
 8006992:	4602      	mov	r2, r0
 8006994:	6270      	str	r0, [r6, #36]	; 0x24
 8006996:	b928      	cbnz	r0, 80069a4 <__pow5mult+0x40>
 8006998:	4b1d      	ldr	r3, [pc, #116]	; (8006a10 <__pow5mult+0xac>)
 800699a:	481e      	ldr	r0, [pc, #120]	; (8006a14 <__pow5mult+0xb0>)
 800699c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80069a0:	f000 fbcc 	bl	800713c <__assert_func>
 80069a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069a8:	6004      	str	r4, [r0, #0]
 80069aa:	60c4      	str	r4, [r0, #12]
 80069ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80069b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069b4:	b94c      	cbnz	r4, 80069ca <__pow5mult+0x66>
 80069b6:	f240 2171 	movw	r1, #625	; 0x271
 80069ba:	4630      	mov	r0, r6
 80069bc:	f7ff ff16 	bl	80067ec <__i2b>
 80069c0:	2300      	movs	r3, #0
 80069c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80069c6:	4604      	mov	r4, r0
 80069c8:	6003      	str	r3, [r0, #0]
 80069ca:	f04f 0900 	mov.w	r9, #0
 80069ce:	07eb      	lsls	r3, r5, #31
 80069d0:	d50a      	bpl.n	80069e8 <__pow5mult+0x84>
 80069d2:	4639      	mov	r1, r7
 80069d4:	4622      	mov	r2, r4
 80069d6:	4630      	mov	r0, r6
 80069d8:	f7ff ff1e 	bl	8006818 <__multiply>
 80069dc:	4639      	mov	r1, r7
 80069de:	4680      	mov	r8, r0
 80069e0:	4630      	mov	r0, r6
 80069e2:	f7ff fe47 	bl	8006674 <_Bfree>
 80069e6:	4647      	mov	r7, r8
 80069e8:	106d      	asrs	r5, r5, #1
 80069ea:	d00b      	beq.n	8006a04 <__pow5mult+0xa0>
 80069ec:	6820      	ldr	r0, [r4, #0]
 80069ee:	b938      	cbnz	r0, 8006a00 <__pow5mult+0x9c>
 80069f0:	4622      	mov	r2, r4
 80069f2:	4621      	mov	r1, r4
 80069f4:	4630      	mov	r0, r6
 80069f6:	f7ff ff0f 	bl	8006818 <__multiply>
 80069fa:	6020      	str	r0, [r4, #0]
 80069fc:	f8c0 9000 	str.w	r9, [r0]
 8006a00:	4604      	mov	r4, r0
 8006a02:	e7e4      	b.n	80069ce <__pow5mult+0x6a>
 8006a04:	4638      	mov	r0, r7
 8006a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a0a:	bf00      	nop
 8006a0c:	08008cc8 	.word	0x08008cc8
 8006a10:	08008af1 	.word	0x08008af1
 8006a14:	08008b78 	.word	0x08008b78

08006a18 <__lshift>:
 8006a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a1c:	460c      	mov	r4, r1
 8006a1e:	6849      	ldr	r1, [r1, #4]
 8006a20:	6923      	ldr	r3, [r4, #16]
 8006a22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a26:	68a3      	ldr	r3, [r4, #8]
 8006a28:	4607      	mov	r7, r0
 8006a2a:	4691      	mov	r9, r2
 8006a2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a30:	f108 0601 	add.w	r6, r8, #1
 8006a34:	42b3      	cmp	r3, r6
 8006a36:	db0b      	blt.n	8006a50 <__lshift+0x38>
 8006a38:	4638      	mov	r0, r7
 8006a3a:	f7ff fddb 	bl	80065f4 <_Balloc>
 8006a3e:	4605      	mov	r5, r0
 8006a40:	b948      	cbnz	r0, 8006a56 <__lshift+0x3e>
 8006a42:	4602      	mov	r2, r0
 8006a44:	4b28      	ldr	r3, [pc, #160]	; (8006ae8 <__lshift+0xd0>)
 8006a46:	4829      	ldr	r0, [pc, #164]	; (8006aec <__lshift+0xd4>)
 8006a48:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a4c:	f000 fb76 	bl	800713c <__assert_func>
 8006a50:	3101      	adds	r1, #1
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	e7ee      	b.n	8006a34 <__lshift+0x1c>
 8006a56:	2300      	movs	r3, #0
 8006a58:	f100 0114 	add.w	r1, r0, #20
 8006a5c:	f100 0210 	add.w	r2, r0, #16
 8006a60:	4618      	mov	r0, r3
 8006a62:	4553      	cmp	r3, sl
 8006a64:	db33      	blt.n	8006ace <__lshift+0xb6>
 8006a66:	6920      	ldr	r0, [r4, #16]
 8006a68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a6c:	f104 0314 	add.w	r3, r4, #20
 8006a70:	f019 091f 	ands.w	r9, r9, #31
 8006a74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a7c:	d02b      	beq.n	8006ad6 <__lshift+0xbe>
 8006a7e:	f1c9 0e20 	rsb	lr, r9, #32
 8006a82:	468a      	mov	sl, r1
 8006a84:	2200      	movs	r2, #0
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	fa00 f009 	lsl.w	r0, r0, r9
 8006a8c:	4302      	orrs	r2, r0
 8006a8e:	f84a 2b04 	str.w	r2, [sl], #4
 8006a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a96:	459c      	cmp	ip, r3
 8006a98:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a9c:	d8f3      	bhi.n	8006a86 <__lshift+0x6e>
 8006a9e:	ebac 0304 	sub.w	r3, ip, r4
 8006aa2:	3b15      	subs	r3, #21
 8006aa4:	f023 0303 	bic.w	r3, r3, #3
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	f104 0015 	add.w	r0, r4, #21
 8006aae:	4584      	cmp	ip, r0
 8006ab0:	bf38      	it	cc
 8006ab2:	2304      	movcc	r3, #4
 8006ab4:	50ca      	str	r2, [r1, r3]
 8006ab6:	b10a      	cbz	r2, 8006abc <__lshift+0xa4>
 8006ab8:	f108 0602 	add.w	r6, r8, #2
 8006abc:	3e01      	subs	r6, #1
 8006abe:	4638      	mov	r0, r7
 8006ac0:	612e      	str	r6, [r5, #16]
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	f7ff fdd6 	bl	8006674 <_Bfree>
 8006ac8:	4628      	mov	r0, r5
 8006aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ace:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	e7c5      	b.n	8006a62 <__lshift+0x4a>
 8006ad6:	3904      	subs	r1, #4
 8006ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006adc:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ae0:	459c      	cmp	ip, r3
 8006ae2:	d8f9      	bhi.n	8006ad8 <__lshift+0xc0>
 8006ae4:	e7ea      	b.n	8006abc <__lshift+0xa4>
 8006ae6:	bf00      	nop
 8006ae8:	08008b67 	.word	0x08008b67
 8006aec:	08008b78 	.word	0x08008b78

08006af0 <__mcmp>:
 8006af0:	b530      	push	{r4, r5, lr}
 8006af2:	6902      	ldr	r2, [r0, #16]
 8006af4:	690c      	ldr	r4, [r1, #16]
 8006af6:	1b12      	subs	r2, r2, r4
 8006af8:	d10e      	bne.n	8006b18 <__mcmp+0x28>
 8006afa:	f100 0314 	add.w	r3, r0, #20
 8006afe:	3114      	adds	r1, #20
 8006b00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006b04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006b08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006b0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006b10:	42a5      	cmp	r5, r4
 8006b12:	d003      	beq.n	8006b1c <__mcmp+0x2c>
 8006b14:	d305      	bcc.n	8006b22 <__mcmp+0x32>
 8006b16:	2201      	movs	r2, #1
 8006b18:	4610      	mov	r0, r2
 8006b1a:	bd30      	pop	{r4, r5, pc}
 8006b1c:	4283      	cmp	r3, r0
 8006b1e:	d3f3      	bcc.n	8006b08 <__mcmp+0x18>
 8006b20:	e7fa      	b.n	8006b18 <__mcmp+0x28>
 8006b22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b26:	e7f7      	b.n	8006b18 <__mcmp+0x28>

08006b28 <__mdiff>:
 8006b28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2c:	460c      	mov	r4, r1
 8006b2e:	4606      	mov	r6, r0
 8006b30:	4611      	mov	r1, r2
 8006b32:	4620      	mov	r0, r4
 8006b34:	4617      	mov	r7, r2
 8006b36:	f7ff ffdb 	bl	8006af0 <__mcmp>
 8006b3a:	1e05      	subs	r5, r0, #0
 8006b3c:	d110      	bne.n	8006b60 <__mdiff+0x38>
 8006b3e:	4629      	mov	r1, r5
 8006b40:	4630      	mov	r0, r6
 8006b42:	f7ff fd57 	bl	80065f4 <_Balloc>
 8006b46:	b930      	cbnz	r0, 8006b56 <__mdiff+0x2e>
 8006b48:	4b39      	ldr	r3, [pc, #228]	; (8006c30 <__mdiff+0x108>)
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	f240 2132 	movw	r1, #562	; 0x232
 8006b50:	4838      	ldr	r0, [pc, #224]	; (8006c34 <__mdiff+0x10c>)
 8006b52:	f000 faf3 	bl	800713c <__assert_func>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b60:	bfa4      	itt	ge
 8006b62:	463b      	movge	r3, r7
 8006b64:	4627      	movge	r7, r4
 8006b66:	4630      	mov	r0, r6
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	bfa6      	itte	ge
 8006b6c:	461c      	movge	r4, r3
 8006b6e:	2500      	movge	r5, #0
 8006b70:	2501      	movlt	r5, #1
 8006b72:	f7ff fd3f 	bl	80065f4 <_Balloc>
 8006b76:	b920      	cbnz	r0, 8006b82 <__mdiff+0x5a>
 8006b78:	4b2d      	ldr	r3, [pc, #180]	; (8006c30 <__mdiff+0x108>)
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006b80:	e7e6      	b.n	8006b50 <__mdiff+0x28>
 8006b82:	693e      	ldr	r6, [r7, #16]
 8006b84:	60c5      	str	r5, [r0, #12]
 8006b86:	6925      	ldr	r5, [r4, #16]
 8006b88:	f107 0114 	add.w	r1, r7, #20
 8006b8c:	f104 0914 	add.w	r9, r4, #20
 8006b90:	f100 0e14 	add.w	lr, r0, #20
 8006b94:	f107 0210 	add.w	r2, r7, #16
 8006b98:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006b9c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006ba0:	46f2      	mov	sl, lr
 8006ba2:	2700      	movs	r7, #0
 8006ba4:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ba8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006bac:	fa1f f883 	uxth.w	r8, r3
 8006bb0:	fa17 f78b 	uxtah	r7, r7, fp
 8006bb4:	0c1b      	lsrs	r3, r3, #16
 8006bb6:	eba7 0808 	sub.w	r8, r7, r8
 8006bba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006bbe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006bc2:	fa1f f888 	uxth.w	r8, r8
 8006bc6:	141f      	asrs	r7, r3, #16
 8006bc8:	454d      	cmp	r5, r9
 8006bca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006bce:	f84a 3b04 	str.w	r3, [sl], #4
 8006bd2:	d8e7      	bhi.n	8006ba4 <__mdiff+0x7c>
 8006bd4:	1b2b      	subs	r3, r5, r4
 8006bd6:	3b15      	subs	r3, #21
 8006bd8:	f023 0303 	bic.w	r3, r3, #3
 8006bdc:	3304      	adds	r3, #4
 8006bde:	3415      	adds	r4, #21
 8006be0:	42a5      	cmp	r5, r4
 8006be2:	bf38      	it	cc
 8006be4:	2304      	movcc	r3, #4
 8006be6:	4419      	add	r1, r3
 8006be8:	4473      	add	r3, lr
 8006bea:	469e      	mov	lr, r3
 8006bec:	460d      	mov	r5, r1
 8006bee:	4565      	cmp	r5, ip
 8006bf0:	d30e      	bcc.n	8006c10 <__mdiff+0xe8>
 8006bf2:	f10c 0203 	add.w	r2, ip, #3
 8006bf6:	1a52      	subs	r2, r2, r1
 8006bf8:	f022 0203 	bic.w	r2, r2, #3
 8006bfc:	3903      	subs	r1, #3
 8006bfe:	458c      	cmp	ip, r1
 8006c00:	bf38      	it	cc
 8006c02:	2200      	movcc	r2, #0
 8006c04:	441a      	add	r2, r3
 8006c06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006c0a:	b17b      	cbz	r3, 8006c2c <__mdiff+0x104>
 8006c0c:	6106      	str	r6, [r0, #16]
 8006c0e:	e7a5      	b.n	8006b5c <__mdiff+0x34>
 8006c10:	f855 8b04 	ldr.w	r8, [r5], #4
 8006c14:	fa17 f488 	uxtah	r4, r7, r8
 8006c18:	1422      	asrs	r2, r4, #16
 8006c1a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006c1e:	b2a4      	uxth	r4, r4
 8006c20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006c24:	f84e 4b04 	str.w	r4, [lr], #4
 8006c28:	1417      	asrs	r7, r2, #16
 8006c2a:	e7e0      	b.n	8006bee <__mdiff+0xc6>
 8006c2c:	3e01      	subs	r6, #1
 8006c2e:	e7ea      	b.n	8006c06 <__mdiff+0xde>
 8006c30:	08008b67 	.word	0x08008b67
 8006c34:	08008b78 	.word	0x08008b78

08006c38 <__d2b>:
 8006c38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c3c:	4689      	mov	r9, r1
 8006c3e:	2101      	movs	r1, #1
 8006c40:	ec57 6b10 	vmov	r6, r7, d0
 8006c44:	4690      	mov	r8, r2
 8006c46:	f7ff fcd5 	bl	80065f4 <_Balloc>
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	b930      	cbnz	r0, 8006c5c <__d2b+0x24>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	4b25      	ldr	r3, [pc, #148]	; (8006ce8 <__d2b+0xb0>)
 8006c52:	4826      	ldr	r0, [pc, #152]	; (8006cec <__d2b+0xb4>)
 8006c54:	f240 310a 	movw	r1, #778	; 0x30a
 8006c58:	f000 fa70 	bl	800713c <__assert_func>
 8006c5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006c60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c64:	bb35      	cbnz	r5, 8006cb4 <__d2b+0x7c>
 8006c66:	2e00      	cmp	r6, #0
 8006c68:	9301      	str	r3, [sp, #4]
 8006c6a:	d028      	beq.n	8006cbe <__d2b+0x86>
 8006c6c:	4668      	mov	r0, sp
 8006c6e:	9600      	str	r6, [sp, #0]
 8006c70:	f7ff fd8c 	bl	800678c <__lo0bits>
 8006c74:	9900      	ldr	r1, [sp, #0]
 8006c76:	b300      	cbz	r0, 8006cba <__d2b+0x82>
 8006c78:	9a01      	ldr	r2, [sp, #4]
 8006c7a:	f1c0 0320 	rsb	r3, r0, #32
 8006c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c82:	430b      	orrs	r3, r1
 8006c84:	40c2      	lsrs	r2, r0
 8006c86:	6163      	str	r3, [r4, #20]
 8006c88:	9201      	str	r2, [sp, #4]
 8006c8a:	9b01      	ldr	r3, [sp, #4]
 8006c8c:	61a3      	str	r3, [r4, #24]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	bf14      	ite	ne
 8006c92:	2202      	movne	r2, #2
 8006c94:	2201      	moveq	r2, #1
 8006c96:	6122      	str	r2, [r4, #16]
 8006c98:	b1d5      	cbz	r5, 8006cd0 <__d2b+0x98>
 8006c9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c9e:	4405      	add	r5, r0
 8006ca0:	f8c9 5000 	str.w	r5, [r9]
 8006ca4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ca8:	f8c8 0000 	str.w	r0, [r8]
 8006cac:	4620      	mov	r0, r4
 8006cae:	b003      	add	sp, #12
 8006cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cb8:	e7d5      	b.n	8006c66 <__d2b+0x2e>
 8006cba:	6161      	str	r1, [r4, #20]
 8006cbc:	e7e5      	b.n	8006c8a <__d2b+0x52>
 8006cbe:	a801      	add	r0, sp, #4
 8006cc0:	f7ff fd64 	bl	800678c <__lo0bits>
 8006cc4:	9b01      	ldr	r3, [sp, #4]
 8006cc6:	6163      	str	r3, [r4, #20]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	6122      	str	r2, [r4, #16]
 8006ccc:	3020      	adds	r0, #32
 8006cce:	e7e3      	b.n	8006c98 <__d2b+0x60>
 8006cd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006cd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006cd8:	f8c9 0000 	str.w	r0, [r9]
 8006cdc:	6918      	ldr	r0, [r3, #16]
 8006cde:	f7ff fd35 	bl	800674c <__hi0bits>
 8006ce2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ce6:	e7df      	b.n	8006ca8 <__d2b+0x70>
 8006ce8:	08008b67 	.word	0x08008b67
 8006cec:	08008b78 	.word	0x08008b78

08006cf0 <_calloc_r>:
 8006cf0:	b513      	push	{r0, r1, r4, lr}
 8006cf2:	434a      	muls	r2, r1
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	9201      	str	r2, [sp, #4]
 8006cf8:	f000 f85a 	bl	8006db0 <_malloc_r>
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	b118      	cbz	r0, 8006d08 <_calloc_r+0x18>
 8006d00:	9a01      	ldr	r2, [sp, #4]
 8006d02:	2100      	movs	r1, #0
 8006d04:	f7fe f93e 	bl	8004f84 <memset>
 8006d08:	4620      	mov	r0, r4
 8006d0a:	b002      	add	sp, #8
 8006d0c:	bd10      	pop	{r4, pc}
	...

08006d10 <_free_r>:
 8006d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d12:	2900      	cmp	r1, #0
 8006d14:	d048      	beq.n	8006da8 <_free_r+0x98>
 8006d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d1a:	9001      	str	r0, [sp, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d22:	bfb8      	it	lt
 8006d24:	18e4      	addlt	r4, r4, r3
 8006d26:	f000 fa65 	bl	80071f4 <__malloc_lock>
 8006d2a:	4a20      	ldr	r2, [pc, #128]	; (8006dac <_free_r+0x9c>)
 8006d2c:	9801      	ldr	r0, [sp, #4]
 8006d2e:	6813      	ldr	r3, [r2, #0]
 8006d30:	4615      	mov	r5, r2
 8006d32:	b933      	cbnz	r3, 8006d42 <_free_r+0x32>
 8006d34:	6063      	str	r3, [r4, #4]
 8006d36:	6014      	str	r4, [r2, #0]
 8006d38:	b003      	add	sp, #12
 8006d3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d3e:	f000 ba5f 	b.w	8007200 <__malloc_unlock>
 8006d42:	42a3      	cmp	r3, r4
 8006d44:	d90b      	bls.n	8006d5e <_free_r+0x4e>
 8006d46:	6821      	ldr	r1, [r4, #0]
 8006d48:	1862      	adds	r2, r4, r1
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	bf04      	itt	eq
 8006d4e:	681a      	ldreq	r2, [r3, #0]
 8006d50:	685b      	ldreq	r3, [r3, #4]
 8006d52:	6063      	str	r3, [r4, #4]
 8006d54:	bf04      	itt	eq
 8006d56:	1852      	addeq	r2, r2, r1
 8006d58:	6022      	streq	r2, [r4, #0]
 8006d5a:	602c      	str	r4, [r5, #0]
 8006d5c:	e7ec      	b.n	8006d38 <_free_r+0x28>
 8006d5e:	461a      	mov	r2, r3
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	b10b      	cbz	r3, 8006d68 <_free_r+0x58>
 8006d64:	42a3      	cmp	r3, r4
 8006d66:	d9fa      	bls.n	8006d5e <_free_r+0x4e>
 8006d68:	6811      	ldr	r1, [r2, #0]
 8006d6a:	1855      	adds	r5, r2, r1
 8006d6c:	42a5      	cmp	r5, r4
 8006d6e:	d10b      	bne.n	8006d88 <_free_r+0x78>
 8006d70:	6824      	ldr	r4, [r4, #0]
 8006d72:	4421      	add	r1, r4
 8006d74:	1854      	adds	r4, r2, r1
 8006d76:	42a3      	cmp	r3, r4
 8006d78:	6011      	str	r1, [r2, #0]
 8006d7a:	d1dd      	bne.n	8006d38 <_free_r+0x28>
 8006d7c:	681c      	ldr	r4, [r3, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	6053      	str	r3, [r2, #4]
 8006d82:	4421      	add	r1, r4
 8006d84:	6011      	str	r1, [r2, #0]
 8006d86:	e7d7      	b.n	8006d38 <_free_r+0x28>
 8006d88:	d902      	bls.n	8006d90 <_free_r+0x80>
 8006d8a:	230c      	movs	r3, #12
 8006d8c:	6003      	str	r3, [r0, #0]
 8006d8e:	e7d3      	b.n	8006d38 <_free_r+0x28>
 8006d90:	6825      	ldr	r5, [r4, #0]
 8006d92:	1961      	adds	r1, r4, r5
 8006d94:	428b      	cmp	r3, r1
 8006d96:	bf04      	itt	eq
 8006d98:	6819      	ldreq	r1, [r3, #0]
 8006d9a:	685b      	ldreq	r3, [r3, #4]
 8006d9c:	6063      	str	r3, [r4, #4]
 8006d9e:	bf04      	itt	eq
 8006da0:	1949      	addeq	r1, r1, r5
 8006da2:	6021      	streq	r1, [r4, #0]
 8006da4:	6054      	str	r4, [r2, #4]
 8006da6:	e7c7      	b.n	8006d38 <_free_r+0x28>
 8006da8:	b003      	add	sp, #12
 8006daa:	bd30      	pop	{r4, r5, pc}
 8006dac:	20002220 	.word	0x20002220

08006db0 <_malloc_r>:
 8006db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db2:	1ccd      	adds	r5, r1, #3
 8006db4:	f025 0503 	bic.w	r5, r5, #3
 8006db8:	3508      	adds	r5, #8
 8006dba:	2d0c      	cmp	r5, #12
 8006dbc:	bf38      	it	cc
 8006dbe:	250c      	movcc	r5, #12
 8006dc0:	2d00      	cmp	r5, #0
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	db01      	blt.n	8006dca <_malloc_r+0x1a>
 8006dc6:	42a9      	cmp	r1, r5
 8006dc8:	d903      	bls.n	8006dd2 <_malloc_r+0x22>
 8006dca:	230c      	movs	r3, #12
 8006dcc:	6033      	str	r3, [r6, #0]
 8006dce:	2000      	movs	r0, #0
 8006dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd2:	f000 fa0f 	bl	80071f4 <__malloc_lock>
 8006dd6:	4921      	ldr	r1, [pc, #132]	; (8006e5c <_malloc_r+0xac>)
 8006dd8:	680a      	ldr	r2, [r1, #0]
 8006dda:	4614      	mov	r4, r2
 8006ddc:	b99c      	cbnz	r4, 8006e06 <_malloc_r+0x56>
 8006dde:	4f20      	ldr	r7, [pc, #128]	; (8006e60 <_malloc_r+0xb0>)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	b923      	cbnz	r3, 8006dee <_malloc_r+0x3e>
 8006de4:	4621      	mov	r1, r4
 8006de6:	4630      	mov	r0, r6
 8006de8:	f000 f998 	bl	800711c <_sbrk_r>
 8006dec:	6038      	str	r0, [r7, #0]
 8006dee:	4629      	mov	r1, r5
 8006df0:	4630      	mov	r0, r6
 8006df2:	f000 f993 	bl	800711c <_sbrk_r>
 8006df6:	1c43      	adds	r3, r0, #1
 8006df8:	d123      	bne.n	8006e42 <_malloc_r+0x92>
 8006dfa:	230c      	movs	r3, #12
 8006dfc:	6033      	str	r3, [r6, #0]
 8006dfe:	4630      	mov	r0, r6
 8006e00:	f000 f9fe 	bl	8007200 <__malloc_unlock>
 8006e04:	e7e3      	b.n	8006dce <_malloc_r+0x1e>
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	1b5b      	subs	r3, r3, r5
 8006e0a:	d417      	bmi.n	8006e3c <_malloc_r+0x8c>
 8006e0c:	2b0b      	cmp	r3, #11
 8006e0e:	d903      	bls.n	8006e18 <_malloc_r+0x68>
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	441c      	add	r4, r3
 8006e14:	6025      	str	r5, [r4, #0]
 8006e16:	e004      	b.n	8006e22 <_malloc_r+0x72>
 8006e18:	6863      	ldr	r3, [r4, #4]
 8006e1a:	42a2      	cmp	r2, r4
 8006e1c:	bf0c      	ite	eq
 8006e1e:	600b      	streq	r3, [r1, #0]
 8006e20:	6053      	strne	r3, [r2, #4]
 8006e22:	4630      	mov	r0, r6
 8006e24:	f000 f9ec 	bl	8007200 <__malloc_unlock>
 8006e28:	f104 000b 	add.w	r0, r4, #11
 8006e2c:	1d23      	adds	r3, r4, #4
 8006e2e:	f020 0007 	bic.w	r0, r0, #7
 8006e32:	1ac2      	subs	r2, r0, r3
 8006e34:	d0cc      	beq.n	8006dd0 <_malloc_r+0x20>
 8006e36:	1a1b      	subs	r3, r3, r0
 8006e38:	50a3      	str	r3, [r4, r2]
 8006e3a:	e7c9      	b.n	8006dd0 <_malloc_r+0x20>
 8006e3c:	4622      	mov	r2, r4
 8006e3e:	6864      	ldr	r4, [r4, #4]
 8006e40:	e7cc      	b.n	8006ddc <_malloc_r+0x2c>
 8006e42:	1cc4      	adds	r4, r0, #3
 8006e44:	f024 0403 	bic.w	r4, r4, #3
 8006e48:	42a0      	cmp	r0, r4
 8006e4a:	d0e3      	beq.n	8006e14 <_malloc_r+0x64>
 8006e4c:	1a21      	subs	r1, r4, r0
 8006e4e:	4630      	mov	r0, r6
 8006e50:	f000 f964 	bl	800711c <_sbrk_r>
 8006e54:	3001      	adds	r0, #1
 8006e56:	d1dd      	bne.n	8006e14 <_malloc_r+0x64>
 8006e58:	e7cf      	b.n	8006dfa <_malloc_r+0x4a>
 8006e5a:	bf00      	nop
 8006e5c:	20002220 	.word	0x20002220
 8006e60:	20002224 	.word	0x20002224

08006e64 <__ssputs_r>:
 8006e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e68:	688e      	ldr	r6, [r1, #8]
 8006e6a:	429e      	cmp	r6, r3
 8006e6c:	4682      	mov	sl, r0
 8006e6e:	460c      	mov	r4, r1
 8006e70:	4690      	mov	r8, r2
 8006e72:	461f      	mov	r7, r3
 8006e74:	d838      	bhi.n	8006ee8 <__ssputs_r+0x84>
 8006e76:	898a      	ldrh	r2, [r1, #12]
 8006e78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e7c:	d032      	beq.n	8006ee4 <__ssputs_r+0x80>
 8006e7e:	6825      	ldr	r5, [r4, #0]
 8006e80:	6909      	ldr	r1, [r1, #16]
 8006e82:	eba5 0901 	sub.w	r9, r5, r1
 8006e86:	6965      	ldr	r5, [r4, #20]
 8006e88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e90:	3301      	adds	r3, #1
 8006e92:	444b      	add	r3, r9
 8006e94:	106d      	asrs	r5, r5, #1
 8006e96:	429d      	cmp	r5, r3
 8006e98:	bf38      	it	cc
 8006e9a:	461d      	movcc	r5, r3
 8006e9c:	0553      	lsls	r3, r2, #21
 8006e9e:	d531      	bpl.n	8006f04 <__ssputs_r+0xa0>
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	f7ff ff85 	bl	8006db0 <_malloc_r>
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	b950      	cbnz	r0, 8006ec0 <__ssputs_r+0x5c>
 8006eaa:	230c      	movs	r3, #12
 8006eac:	f8ca 3000 	str.w	r3, [sl]
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb6:	81a3      	strh	r3, [r4, #12]
 8006eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec0:	6921      	ldr	r1, [r4, #16]
 8006ec2:	464a      	mov	r2, r9
 8006ec4:	f7ff fb88 	bl	80065d8 <memcpy>
 8006ec8:	89a3      	ldrh	r3, [r4, #12]
 8006eca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed2:	81a3      	strh	r3, [r4, #12]
 8006ed4:	6126      	str	r6, [r4, #16]
 8006ed6:	6165      	str	r5, [r4, #20]
 8006ed8:	444e      	add	r6, r9
 8006eda:	eba5 0509 	sub.w	r5, r5, r9
 8006ede:	6026      	str	r6, [r4, #0]
 8006ee0:	60a5      	str	r5, [r4, #8]
 8006ee2:	463e      	mov	r6, r7
 8006ee4:	42be      	cmp	r6, r7
 8006ee6:	d900      	bls.n	8006eea <__ssputs_r+0x86>
 8006ee8:	463e      	mov	r6, r7
 8006eea:	4632      	mov	r2, r6
 8006eec:	6820      	ldr	r0, [r4, #0]
 8006eee:	4641      	mov	r1, r8
 8006ef0:	f000 f966 	bl	80071c0 <memmove>
 8006ef4:	68a3      	ldr	r3, [r4, #8]
 8006ef6:	6822      	ldr	r2, [r4, #0]
 8006ef8:	1b9b      	subs	r3, r3, r6
 8006efa:	4432      	add	r2, r6
 8006efc:	60a3      	str	r3, [r4, #8]
 8006efe:	6022      	str	r2, [r4, #0]
 8006f00:	2000      	movs	r0, #0
 8006f02:	e7db      	b.n	8006ebc <__ssputs_r+0x58>
 8006f04:	462a      	mov	r2, r5
 8006f06:	f000 f981 	bl	800720c <_realloc_r>
 8006f0a:	4606      	mov	r6, r0
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d1e1      	bne.n	8006ed4 <__ssputs_r+0x70>
 8006f10:	6921      	ldr	r1, [r4, #16]
 8006f12:	4650      	mov	r0, sl
 8006f14:	f7ff fefc 	bl	8006d10 <_free_r>
 8006f18:	e7c7      	b.n	8006eaa <__ssputs_r+0x46>
	...

08006f1c <_svfiprintf_r>:
 8006f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f20:	4698      	mov	r8, r3
 8006f22:	898b      	ldrh	r3, [r1, #12]
 8006f24:	061b      	lsls	r3, r3, #24
 8006f26:	b09d      	sub	sp, #116	; 0x74
 8006f28:	4607      	mov	r7, r0
 8006f2a:	460d      	mov	r5, r1
 8006f2c:	4614      	mov	r4, r2
 8006f2e:	d50e      	bpl.n	8006f4e <_svfiprintf_r+0x32>
 8006f30:	690b      	ldr	r3, [r1, #16]
 8006f32:	b963      	cbnz	r3, 8006f4e <_svfiprintf_r+0x32>
 8006f34:	2140      	movs	r1, #64	; 0x40
 8006f36:	f7ff ff3b 	bl	8006db0 <_malloc_r>
 8006f3a:	6028      	str	r0, [r5, #0]
 8006f3c:	6128      	str	r0, [r5, #16]
 8006f3e:	b920      	cbnz	r0, 8006f4a <_svfiprintf_r+0x2e>
 8006f40:	230c      	movs	r3, #12
 8006f42:	603b      	str	r3, [r7, #0]
 8006f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f48:	e0d1      	b.n	80070ee <_svfiprintf_r+0x1d2>
 8006f4a:	2340      	movs	r3, #64	; 0x40
 8006f4c:	616b      	str	r3, [r5, #20]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	9309      	str	r3, [sp, #36]	; 0x24
 8006f52:	2320      	movs	r3, #32
 8006f54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f58:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f5c:	2330      	movs	r3, #48	; 0x30
 8006f5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007108 <_svfiprintf_r+0x1ec>
 8006f62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f66:	f04f 0901 	mov.w	r9, #1
 8006f6a:	4623      	mov	r3, r4
 8006f6c:	469a      	mov	sl, r3
 8006f6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f72:	b10a      	cbz	r2, 8006f78 <_svfiprintf_r+0x5c>
 8006f74:	2a25      	cmp	r2, #37	; 0x25
 8006f76:	d1f9      	bne.n	8006f6c <_svfiprintf_r+0x50>
 8006f78:	ebba 0b04 	subs.w	fp, sl, r4
 8006f7c:	d00b      	beq.n	8006f96 <_svfiprintf_r+0x7a>
 8006f7e:	465b      	mov	r3, fp
 8006f80:	4622      	mov	r2, r4
 8006f82:	4629      	mov	r1, r5
 8006f84:	4638      	mov	r0, r7
 8006f86:	f7ff ff6d 	bl	8006e64 <__ssputs_r>
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	f000 80aa 	beq.w	80070e4 <_svfiprintf_r+0x1c8>
 8006f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f92:	445a      	add	r2, fp
 8006f94:	9209      	str	r2, [sp, #36]	; 0x24
 8006f96:	f89a 3000 	ldrb.w	r3, [sl]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 80a2 	beq.w	80070e4 <_svfiprintf_r+0x1c8>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006faa:	f10a 0a01 	add.w	sl, sl, #1
 8006fae:	9304      	str	r3, [sp, #16]
 8006fb0:	9307      	str	r3, [sp, #28]
 8006fb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fb6:	931a      	str	r3, [sp, #104]	; 0x68
 8006fb8:	4654      	mov	r4, sl
 8006fba:	2205      	movs	r2, #5
 8006fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fc0:	4851      	ldr	r0, [pc, #324]	; (8007108 <_svfiprintf_r+0x1ec>)
 8006fc2:	f7f9 f915 	bl	80001f0 <memchr>
 8006fc6:	9a04      	ldr	r2, [sp, #16]
 8006fc8:	b9d8      	cbnz	r0, 8007002 <_svfiprintf_r+0xe6>
 8006fca:	06d0      	lsls	r0, r2, #27
 8006fcc:	bf44      	itt	mi
 8006fce:	2320      	movmi	r3, #32
 8006fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fd4:	0711      	lsls	r1, r2, #28
 8006fd6:	bf44      	itt	mi
 8006fd8:	232b      	movmi	r3, #43	; 0x2b
 8006fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fde:	f89a 3000 	ldrb.w	r3, [sl]
 8006fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8006fe4:	d015      	beq.n	8007012 <_svfiprintf_r+0xf6>
 8006fe6:	9a07      	ldr	r2, [sp, #28]
 8006fe8:	4654      	mov	r4, sl
 8006fea:	2000      	movs	r0, #0
 8006fec:	f04f 0c0a 	mov.w	ip, #10
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ff6:	3b30      	subs	r3, #48	; 0x30
 8006ff8:	2b09      	cmp	r3, #9
 8006ffa:	d94e      	bls.n	800709a <_svfiprintf_r+0x17e>
 8006ffc:	b1b0      	cbz	r0, 800702c <_svfiprintf_r+0x110>
 8006ffe:	9207      	str	r2, [sp, #28]
 8007000:	e014      	b.n	800702c <_svfiprintf_r+0x110>
 8007002:	eba0 0308 	sub.w	r3, r0, r8
 8007006:	fa09 f303 	lsl.w	r3, r9, r3
 800700a:	4313      	orrs	r3, r2
 800700c:	9304      	str	r3, [sp, #16]
 800700e:	46a2      	mov	sl, r4
 8007010:	e7d2      	b.n	8006fb8 <_svfiprintf_r+0x9c>
 8007012:	9b03      	ldr	r3, [sp, #12]
 8007014:	1d19      	adds	r1, r3, #4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	9103      	str	r1, [sp, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	bfbb      	ittet	lt
 800701e:	425b      	neglt	r3, r3
 8007020:	f042 0202 	orrlt.w	r2, r2, #2
 8007024:	9307      	strge	r3, [sp, #28]
 8007026:	9307      	strlt	r3, [sp, #28]
 8007028:	bfb8      	it	lt
 800702a:	9204      	strlt	r2, [sp, #16]
 800702c:	7823      	ldrb	r3, [r4, #0]
 800702e:	2b2e      	cmp	r3, #46	; 0x2e
 8007030:	d10c      	bne.n	800704c <_svfiprintf_r+0x130>
 8007032:	7863      	ldrb	r3, [r4, #1]
 8007034:	2b2a      	cmp	r3, #42	; 0x2a
 8007036:	d135      	bne.n	80070a4 <_svfiprintf_r+0x188>
 8007038:	9b03      	ldr	r3, [sp, #12]
 800703a:	1d1a      	adds	r2, r3, #4
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	9203      	str	r2, [sp, #12]
 8007040:	2b00      	cmp	r3, #0
 8007042:	bfb8      	it	lt
 8007044:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007048:	3402      	adds	r4, #2
 800704a:	9305      	str	r3, [sp, #20]
 800704c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007118 <_svfiprintf_r+0x1fc>
 8007050:	7821      	ldrb	r1, [r4, #0]
 8007052:	2203      	movs	r2, #3
 8007054:	4650      	mov	r0, sl
 8007056:	f7f9 f8cb 	bl	80001f0 <memchr>
 800705a:	b140      	cbz	r0, 800706e <_svfiprintf_r+0x152>
 800705c:	2340      	movs	r3, #64	; 0x40
 800705e:	eba0 000a 	sub.w	r0, r0, sl
 8007062:	fa03 f000 	lsl.w	r0, r3, r0
 8007066:	9b04      	ldr	r3, [sp, #16]
 8007068:	4303      	orrs	r3, r0
 800706a:	3401      	adds	r4, #1
 800706c:	9304      	str	r3, [sp, #16]
 800706e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007072:	4826      	ldr	r0, [pc, #152]	; (800710c <_svfiprintf_r+0x1f0>)
 8007074:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007078:	2206      	movs	r2, #6
 800707a:	f7f9 f8b9 	bl	80001f0 <memchr>
 800707e:	2800      	cmp	r0, #0
 8007080:	d038      	beq.n	80070f4 <_svfiprintf_r+0x1d8>
 8007082:	4b23      	ldr	r3, [pc, #140]	; (8007110 <_svfiprintf_r+0x1f4>)
 8007084:	bb1b      	cbnz	r3, 80070ce <_svfiprintf_r+0x1b2>
 8007086:	9b03      	ldr	r3, [sp, #12]
 8007088:	3307      	adds	r3, #7
 800708a:	f023 0307 	bic.w	r3, r3, #7
 800708e:	3308      	adds	r3, #8
 8007090:	9303      	str	r3, [sp, #12]
 8007092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007094:	4433      	add	r3, r6
 8007096:	9309      	str	r3, [sp, #36]	; 0x24
 8007098:	e767      	b.n	8006f6a <_svfiprintf_r+0x4e>
 800709a:	fb0c 3202 	mla	r2, ip, r2, r3
 800709e:	460c      	mov	r4, r1
 80070a0:	2001      	movs	r0, #1
 80070a2:	e7a5      	b.n	8006ff0 <_svfiprintf_r+0xd4>
 80070a4:	2300      	movs	r3, #0
 80070a6:	3401      	adds	r4, #1
 80070a8:	9305      	str	r3, [sp, #20]
 80070aa:	4619      	mov	r1, r3
 80070ac:	f04f 0c0a 	mov.w	ip, #10
 80070b0:	4620      	mov	r0, r4
 80070b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070b6:	3a30      	subs	r2, #48	; 0x30
 80070b8:	2a09      	cmp	r2, #9
 80070ba:	d903      	bls.n	80070c4 <_svfiprintf_r+0x1a8>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d0c5      	beq.n	800704c <_svfiprintf_r+0x130>
 80070c0:	9105      	str	r1, [sp, #20]
 80070c2:	e7c3      	b.n	800704c <_svfiprintf_r+0x130>
 80070c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80070c8:	4604      	mov	r4, r0
 80070ca:	2301      	movs	r3, #1
 80070cc:	e7f0      	b.n	80070b0 <_svfiprintf_r+0x194>
 80070ce:	ab03      	add	r3, sp, #12
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	462a      	mov	r2, r5
 80070d4:	4b0f      	ldr	r3, [pc, #60]	; (8007114 <_svfiprintf_r+0x1f8>)
 80070d6:	a904      	add	r1, sp, #16
 80070d8:	4638      	mov	r0, r7
 80070da:	f7fd fffb 	bl	80050d4 <_printf_float>
 80070de:	1c42      	adds	r2, r0, #1
 80070e0:	4606      	mov	r6, r0
 80070e2:	d1d6      	bne.n	8007092 <_svfiprintf_r+0x176>
 80070e4:	89ab      	ldrh	r3, [r5, #12]
 80070e6:	065b      	lsls	r3, r3, #25
 80070e8:	f53f af2c 	bmi.w	8006f44 <_svfiprintf_r+0x28>
 80070ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070ee:	b01d      	add	sp, #116	; 0x74
 80070f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f4:	ab03      	add	r3, sp, #12
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	462a      	mov	r2, r5
 80070fa:	4b06      	ldr	r3, [pc, #24]	; (8007114 <_svfiprintf_r+0x1f8>)
 80070fc:	a904      	add	r1, sp, #16
 80070fe:	4638      	mov	r0, r7
 8007100:	f7fe fa8c 	bl	800561c <_printf_i>
 8007104:	e7eb      	b.n	80070de <_svfiprintf_r+0x1c2>
 8007106:	bf00      	nop
 8007108:	08008cd4 	.word	0x08008cd4
 800710c:	08008cde 	.word	0x08008cde
 8007110:	080050d5 	.word	0x080050d5
 8007114:	08006e65 	.word	0x08006e65
 8007118:	08008cda 	.word	0x08008cda

0800711c <_sbrk_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4d06      	ldr	r5, [pc, #24]	; (8007138 <_sbrk_r+0x1c>)
 8007120:	2300      	movs	r3, #0
 8007122:	4604      	mov	r4, r0
 8007124:	4608      	mov	r0, r1
 8007126:	602b      	str	r3, [r5, #0]
 8007128:	f7fb fcf2 	bl	8002b10 <_sbrk>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	d102      	bne.n	8007136 <_sbrk_r+0x1a>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	b103      	cbz	r3, 8007136 <_sbrk_r+0x1a>
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	2000259c 	.word	0x2000259c

0800713c <__assert_func>:
 800713c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800713e:	4614      	mov	r4, r2
 8007140:	461a      	mov	r2, r3
 8007142:	4b09      	ldr	r3, [pc, #36]	; (8007168 <__assert_func+0x2c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4605      	mov	r5, r0
 8007148:	68d8      	ldr	r0, [r3, #12]
 800714a:	b14c      	cbz	r4, 8007160 <__assert_func+0x24>
 800714c:	4b07      	ldr	r3, [pc, #28]	; (800716c <__assert_func+0x30>)
 800714e:	9100      	str	r1, [sp, #0]
 8007150:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007154:	4906      	ldr	r1, [pc, #24]	; (8007170 <__assert_func+0x34>)
 8007156:	462b      	mov	r3, r5
 8007158:	f000 f80e 	bl	8007178 <fiprintf>
 800715c:	f000 faa4 	bl	80076a8 <abort>
 8007160:	4b04      	ldr	r3, [pc, #16]	; (8007174 <__assert_func+0x38>)
 8007162:	461c      	mov	r4, r3
 8007164:	e7f3      	b.n	800714e <__assert_func+0x12>
 8007166:	bf00      	nop
 8007168:	2000201c 	.word	0x2000201c
 800716c:	08008ce5 	.word	0x08008ce5
 8007170:	08008cf2 	.word	0x08008cf2
 8007174:	08008d20 	.word	0x08008d20

08007178 <fiprintf>:
 8007178:	b40e      	push	{r1, r2, r3}
 800717a:	b503      	push	{r0, r1, lr}
 800717c:	4601      	mov	r1, r0
 800717e:	ab03      	add	r3, sp, #12
 8007180:	4805      	ldr	r0, [pc, #20]	; (8007198 <fiprintf+0x20>)
 8007182:	f853 2b04 	ldr.w	r2, [r3], #4
 8007186:	6800      	ldr	r0, [r0, #0]
 8007188:	9301      	str	r3, [sp, #4]
 800718a:	f000 f88f 	bl	80072ac <_vfiprintf_r>
 800718e:	b002      	add	sp, #8
 8007190:	f85d eb04 	ldr.w	lr, [sp], #4
 8007194:	b003      	add	sp, #12
 8007196:	4770      	bx	lr
 8007198:	2000201c 	.word	0x2000201c

0800719c <__ascii_mbtowc>:
 800719c:	b082      	sub	sp, #8
 800719e:	b901      	cbnz	r1, 80071a2 <__ascii_mbtowc+0x6>
 80071a0:	a901      	add	r1, sp, #4
 80071a2:	b142      	cbz	r2, 80071b6 <__ascii_mbtowc+0x1a>
 80071a4:	b14b      	cbz	r3, 80071ba <__ascii_mbtowc+0x1e>
 80071a6:	7813      	ldrb	r3, [r2, #0]
 80071a8:	600b      	str	r3, [r1, #0]
 80071aa:	7812      	ldrb	r2, [r2, #0]
 80071ac:	1e10      	subs	r0, r2, #0
 80071ae:	bf18      	it	ne
 80071b0:	2001      	movne	r0, #1
 80071b2:	b002      	add	sp, #8
 80071b4:	4770      	bx	lr
 80071b6:	4610      	mov	r0, r2
 80071b8:	e7fb      	b.n	80071b2 <__ascii_mbtowc+0x16>
 80071ba:	f06f 0001 	mvn.w	r0, #1
 80071be:	e7f8      	b.n	80071b2 <__ascii_mbtowc+0x16>

080071c0 <memmove>:
 80071c0:	4288      	cmp	r0, r1
 80071c2:	b510      	push	{r4, lr}
 80071c4:	eb01 0402 	add.w	r4, r1, r2
 80071c8:	d902      	bls.n	80071d0 <memmove+0x10>
 80071ca:	4284      	cmp	r4, r0
 80071cc:	4623      	mov	r3, r4
 80071ce:	d807      	bhi.n	80071e0 <memmove+0x20>
 80071d0:	1e43      	subs	r3, r0, #1
 80071d2:	42a1      	cmp	r1, r4
 80071d4:	d008      	beq.n	80071e8 <memmove+0x28>
 80071d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071de:	e7f8      	b.n	80071d2 <memmove+0x12>
 80071e0:	4402      	add	r2, r0
 80071e2:	4601      	mov	r1, r0
 80071e4:	428a      	cmp	r2, r1
 80071e6:	d100      	bne.n	80071ea <memmove+0x2a>
 80071e8:	bd10      	pop	{r4, pc}
 80071ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071f2:	e7f7      	b.n	80071e4 <memmove+0x24>

080071f4 <__malloc_lock>:
 80071f4:	4801      	ldr	r0, [pc, #4]	; (80071fc <__malloc_lock+0x8>)
 80071f6:	f000 bc17 	b.w	8007a28 <__retarget_lock_acquire_recursive>
 80071fa:	bf00      	nop
 80071fc:	200025a4 	.word	0x200025a4

08007200 <__malloc_unlock>:
 8007200:	4801      	ldr	r0, [pc, #4]	; (8007208 <__malloc_unlock+0x8>)
 8007202:	f000 bc12 	b.w	8007a2a <__retarget_lock_release_recursive>
 8007206:	bf00      	nop
 8007208:	200025a4 	.word	0x200025a4

0800720c <_realloc_r>:
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720e:	4607      	mov	r7, r0
 8007210:	4614      	mov	r4, r2
 8007212:	460e      	mov	r6, r1
 8007214:	b921      	cbnz	r1, 8007220 <_realloc_r+0x14>
 8007216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800721a:	4611      	mov	r1, r2
 800721c:	f7ff bdc8 	b.w	8006db0 <_malloc_r>
 8007220:	b922      	cbnz	r2, 800722c <_realloc_r+0x20>
 8007222:	f7ff fd75 	bl	8006d10 <_free_r>
 8007226:	4625      	mov	r5, r4
 8007228:	4628      	mov	r0, r5
 800722a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800722c:	f000 fc62 	bl	8007af4 <_malloc_usable_size_r>
 8007230:	42a0      	cmp	r0, r4
 8007232:	d20f      	bcs.n	8007254 <_realloc_r+0x48>
 8007234:	4621      	mov	r1, r4
 8007236:	4638      	mov	r0, r7
 8007238:	f7ff fdba 	bl	8006db0 <_malloc_r>
 800723c:	4605      	mov	r5, r0
 800723e:	2800      	cmp	r0, #0
 8007240:	d0f2      	beq.n	8007228 <_realloc_r+0x1c>
 8007242:	4631      	mov	r1, r6
 8007244:	4622      	mov	r2, r4
 8007246:	f7ff f9c7 	bl	80065d8 <memcpy>
 800724a:	4631      	mov	r1, r6
 800724c:	4638      	mov	r0, r7
 800724e:	f7ff fd5f 	bl	8006d10 <_free_r>
 8007252:	e7e9      	b.n	8007228 <_realloc_r+0x1c>
 8007254:	4635      	mov	r5, r6
 8007256:	e7e7      	b.n	8007228 <_realloc_r+0x1c>

08007258 <__sfputc_r>:
 8007258:	6893      	ldr	r3, [r2, #8]
 800725a:	3b01      	subs	r3, #1
 800725c:	2b00      	cmp	r3, #0
 800725e:	b410      	push	{r4}
 8007260:	6093      	str	r3, [r2, #8]
 8007262:	da08      	bge.n	8007276 <__sfputc_r+0x1e>
 8007264:	6994      	ldr	r4, [r2, #24]
 8007266:	42a3      	cmp	r3, r4
 8007268:	db01      	blt.n	800726e <__sfputc_r+0x16>
 800726a:	290a      	cmp	r1, #10
 800726c:	d103      	bne.n	8007276 <__sfputc_r+0x1e>
 800726e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007272:	f000 b94b 	b.w	800750c <__swbuf_r>
 8007276:	6813      	ldr	r3, [r2, #0]
 8007278:	1c58      	adds	r0, r3, #1
 800727a:	6010      	str	r0, [r2, #0]
 800727c:	7019      	strb	r1, [r3, #0]
 800727e:	4608      	mov	r0, r1
 8007280:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007284:	4770      	bx	lr

08007286 <__sfputs_r>:
 8007286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007288:	4606      	mov	r6, r0
 800728a:	460f      	mov	r7, r1
 800728c:	4614      	mov	r4, r2
 800728e:	18d5      	adds	r5, r2, r3
 8007290:	42ac      	cmp	r4, r5
 8007292:	d101      	bne.n	8007298 <__sfputs_r+0x12>
 8007294:	2000      	movs	r0, #0
 8007296:	e007      	b.n	80072a8 <__sfputs_r+0x22>
 8007298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800729c:	463a      	mov	r2, r7
 800729e:	4630      	mov	r0, r6
 80072a0:	f7ff ffda 	bl	8007258 <__sfputc_r>
 80072a4:	1c43      	adds	r3, r0, #1
 80072a6:	d1f3      	bne.n	8007290 <__sfputs_r+0xa>
 80072a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072ac <_vfiprintf_r>:
 80072ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b0:	460d      	mov	r5, r1
 80072b2:	b09d      	sub	sp, #116	; 0x74
 80072b4:	4614      	mov	r4, r2
 80072b6:	4698      	mov	r8, r3
 80072b8:	4606      	mov	r6, r0
 80072ba:	b118      	cbz	r0, 80072c4 <_vfiprintf_r+0x18>
 80072bc:	6983      	ldr	r3, [r0, #24]
 80072be:	b90b      	cbnz	r3, 80072c4 <_vfiprintf_r+0x18>
 80072c0:	f000 fb14 	bl	80078ec <__sinit>
 80072c4:	4b89      	ldr	r3, [pc, #548]	; (80074ec <_vfiprintf_r+0x240>)
 80072c6:	429d      	cmp	r5, r3
 80072c8:	d11b      	bne.n	8007302 <_vfiprintf_r+0x56>
 80072ca:	6875      	ldr	r5, [r6, #4]
 80072cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072ce:	07d9      	lsls	r1, r3, #31
 80072d0:	d405      	bmi.n	80072de <_vfiprintf_r+0x32>
 80072d2:	89ab      	ldrh	r3, [r5, #12]
 80072d4:	059a      	lsls	r2, r3, #22
 80072d6:	d402      	bmi.n	80072de <_vfiprintf_r+0x32>
 80072d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072da:	f000 fba5 	bl	8007a28 <__retarget_lock_acquire_recursive>
 80072de:	89ab      	ldrh	r3, [r5, #12]
 80072e0:	071b      	lsls	r3, r3, #28
 80072e2:	d501      	bpl.n	80072e8 <_vfiprintf_r+0x3c>
 80072e4:	692b      	ldr	r3, [r5, #16]
 80072e6:	b9eb      	cbnz	r3, 8007324 <_vfiprintf_r+0x78>
 80072e8:	4629      	mov	r1, r5
 80072ea:	4630      	mov	r0, r6
 80072ec:	f000 f96e 	bl	80075cc <__swsetup_r>
 80072f0:	b1c0      	cbz	r0, 8007324 <_vfiprintf_r+0x78>
 80072f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072f4:	07dc      	lsls	r4, r3, #31
 80072f6:	d50e      	bpl.n	8007316 <_vfiprintf_r+0x6a>
 80072f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072fc:	b01d      	add	sp, #116	; 0x74
 80072fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007302:	4b7b      	ldr	r3, [pc, #492]	; (80074f0 <_vfiprintf_r+0x244>)
 8007304:	429d      	cmp	r5, r3
 8007306:	d101      	bne.n	800730c <_vfiprintf_r+0x60>
 8007308:	68b5      	ldr	r5, [r6, #8]
 800730a:	e7df      	b.n	80072cc <_vfiprintf_r+0x20>
 800730c:	4b79      	ldr	r3, [pc, #484]	; (80074f4 <_vfiprintf_r+0x248>)
 800730e:	429d      	cmp	r5, r3
 8007310:	bf08      	it	eq
 8007312:	68f5      	ldreq	r5, [r6, #12]
 8007314:	e7da      	b.n	80072cc <_vfiprintf_r+0x20>
 8007316:	89ab      	ldrh	r3, [r5, #12]
 8007318:	0598      	lsls	r0, r3, #22
 800731a:	d4ed      	bmi.n	80072f8 <_vfiprintf_r+0x4c>
 800731c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800731e:	f000 fb84 	bl	8007a2a <__retarget_lock_release_recursive>
 8007322:	e7e9      	b.n	80072f8 <_vfiprintf_r+0x4c>
 8007324:	2300      	movs	r3, #0
 8007326:	9309      	str	r3, [sp, #36]	; 0x24
 8007328:	2320      	movs	r3, #32
 800732a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800732e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007332:	2330      	movs	r3, #48	; 0x30
 8007334:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80074f8 <_vfiprintf_r+0x24c>
 8007338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800733c:	f04f 0901 	mov.w	r9, #1
 8007340:	4623      	mov	r3, r4
 8007342:	469a      	mov	sl, r3
 8007344:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007348:	b10a      	cbz	r2, 800734e <_vfiprintf_r+0xa2>
 800734a:	2a25      	cmp	r2, #37	; 0x25
 800734c:	d1f9      	bne.n	8007342 <_vfiprintf_r+0x96>
 800734e:	ebba 0b04 	subs.w	fp, sl, r4
 8007352:	d00b      	beq.n	800736c <_vfiprintf_r+0xc0>
 8007354:	465b      	mov	r3, fp
 8007356:	4622      	mov	r2, r4
 8007358:	4629      	mov	r1, r5
 800735a:	4630      	mov	r0, r6
 800735c:	f7ff ff93 	bl	8007286 <__sfputs_r>
 8007360:	3001      	adds	r0, #1
 8007362:	f000 80aa 	beq.w	80074ba <_vfiprintf_r+0x20e>
 8007366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007368:	445a      	add	r2, fp
 800736a:	9209      	str	r2, [sp, #36]	; 0x24
 800736c:	f89a 3000 	ldrb.w	r3, [sl]
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 80a2 	beq.w	80074ba <_vfiprintf_r+0x20e>
 8007376:	2300      	movs	r3, #0
 8007378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800737c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007380:	f10a 0a01 	add.w	sl, sl, #1
 8007384:	9304      	str	r3, [sp, #16]
 8007386:	9307      	str	r3, [sp, #28]
 8007388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800738c:	931a      	str	r3, [sp, #104]	; 0x68
 800738e:	4654      	mov	r4, sl
 8007390:	2205      	movs	r2, #5
 8007392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007396:	4858      	ldr	r0, [pc, #352]	; (80074f8 <_vfiprintf_r+0x24c>)
 8007398:	f7f8 ff2a 	bl	80001f0 <memchr>
 800739c:	9a04      	ldr	r2, [sp, #16]
 800739e:	b9d8      	cbnz	r0, 80073d8 <_vfiprintf_r+0x12c>
 80073a0:	06d1      	lsls	r1, r2, #27
 80073a2:	bf44      	itt	mi
 80073a4:	2320      	movmi	r3, #32
 80073a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073aa:	0713      	lsls	r3, r2, #28
 80073ac:	bf44      	itt	mi
 80073ae:	232b      	movmi	r3, #43	; 0x2b
 80073b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073b4:	f89a 3000 	ldrb.w	r3, [sl]
 80073b8:	2b2a      	cmp	r3, #42	; 0x2a
 80073ba:	d015      	beq.n	80073e8 <_vfiprintf_r+0x13c>
 80073bc:	9a07      	ldr	r2, [sp, #28]
 80073be:	4654      	mov	r4, sl
 80073c0:	2000      	movs	r0, #0
 80073c2:	f04f 0c0a 	mov.w	ip, #10
 80073c6:	4621      	mov	r1, r4
 80073c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073cc:	3b30      	subs	r3, #48	; 0x30
 80073ce:	2b09      	cmp	r3, #9
 80073d0:	d94e      	bls.n	8007470 <_vfiprintf_r+0x1c4>
 80073d2:	b1b0      	cbz	r0, 8007402 <_vfiprintf_r+0x156>
 80073d4:	9207      	str	r2, [sp, #28]
 80073d6:	e014      	b.n	8007402 <_vfiprintf_r+0x156>
 80073d8:	eba0 0308 	sub.w	r3, r0, r8
 80073dc:	fa09 f303 	lsl.w	r3, r9, r3
 80073e0:	4313      	orrs	r3, r2
 80073e2:	9304      	str	r3, [sp, #16]
 80073e4:	46a2      	mov	sl, r4
 80073e6:	e7d2      	b.n	800738e <_vfiprintf_r+0xe2>
 80073e8:	9b03      	ldr	r3, [sp, #12]
 80073ea:	1d19      	adds	r1, r3, #4
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	9103      	str	r1, [sp, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	bfbb      	ittet	lt
 80073f4:	425b      	neglt	r3, r3
 80073f6:	f042 0202 	orrlt.w	r2, r2, #2
 80073fa:	9307      	strge	r3, [sp, #28]
 80073fc:	9307      	strlt	r3, [sp, #28]
 80073fe:	bfb8      	it	lt
 8007400:	9204      	strlt	r2, [sp, #16]
 8007402:	7823      	ldrb	r3, [r4, #0]
 8007404:	2b2e      	cmp	r3, #46	; 0x2e
 8007406:	d10c      	bne.n	8007422 <_vfiprintf_r+0x176>
 8007408:	7863      	ldrb	r3, [r4, #1]
 800740a:	2b2a      	cmp	r3, #42	; 0x2a
 800740c:	d135      	bne.n	800747a <_vfiprintf_r+0x1ce>
 800740e:	9b03      	ldr	r3, [sp, #12]
 8007410:	1d1a      	adds	r2, r3, #4
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	9203      	str	r2, [sp, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	bfb8      	it	lt
 800741a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800741e:	3402      	adds	r4, #2
 8007420:	9305      	str	r3, [sp, #20]
 8007422:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007508 <_vfiprintf_r+0x25c>
 8007426:	7821      	ldrb	r1, [r4, #0]
 8007428:	2203      	movs	r2, #3
 800742a:	4650      	mov	r0, sl
 800742c:	f7f8 fee0 	bl	80001f0 <memchr>
 8007430:	b140      	cbz	r0, 8007444 <_vfiprintf_r+0x198>
 8007432:	2340      	movs	r3, #64	; 0x40
 8007434:	eba0 000a 	sub.w	r0, r0, sl
 8007438:	fa03 f000 	lsl.w	r0, r3, r0
 800743c:	9b04      	ldr	r3, [sp, #16]
 800743e:	4303      	orrs	r3, r0
 8007440:	3401      	adds	r4, #1
 8007442:	9304      	str	r3, [sp, #16]
 8007444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007448:	482c      	ldr	r0, [pc, #176]	; (80074fc <_vfiprintf_r+0x250>)
 800744a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800744e:	2206      	movs	r2, #6
 8007450:	f7f8 fece 	bl	80001f0 <memchr>
 8007454:	2800      	cmp	r0, #0
 8007456:	d03f      	beq.n	80074d8 <_vfiprintf_r+0x22c>
 8007458:	4b29      	ldr	r3, [pc, #164]	; (8007500 <_vfiprintf_r+0x254>)
 800745a:	bb1b      	cbnz	r3, 80074a4 <_vfiprintf_r+0x1f8>
 800745c:	9b03      	ldr	r3, [sp, #12]
 800745e:	3307      	adds	r3, #7
 8007460:	f023 0307 	bic.w	r3, r3, #7
 8007464:	3308      	adds	r3, #8
 8007466:	9303      	str	r3, [sp, #12]
 8007468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800746a:	443b      	add	r3, r7
 800746c:	9309      	str	r3, [sp, #36]	; 0x24
 800746e:	e767      	b.n	8007340 <_vfiprintf_r+0x94>
 8007470:	fb0c 3202 	mla	r2, ip, r2, r3
 8007474:	460c      	mov	r4, r1
 8007476:	2001      	movs	r0, #1
 8007478:	e7a5      	b.n	80073c6 <_vfiprintf_r+0x11a>
 800747a:	2300      	movs	r3, #0
 800747c:	3401      	adds	r4, #1
 800747e:	9305      	str	r3, [sp, #20]
 8007480:	4619      	mov	r1, r3
 8007482:	f04f 0c0a 	mov.w	ip, #10
 8007486:	4620      	mov	r0, r4
 8007488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800748c:	3a30      	subs	r2, #48	; 0x30
 800748e:	2a09      	cmp	r2, #9
 8007490:	d903      	bls.n	800749a <_vfiprintf_r+0x1ee>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0c5      	beq.n	8007422 <_vfiprintf_r+0x176>
 8007496:	9105      	str	r1, [sp, #20]
 8007498:	e7c3      	b.n	8007422 <_vfiprintf_r+0x176>
 800749a:	fb0c 2101 	mla	r1, ip, r1, r2
 800749e:	4604      	mov	r4, r0
 80074a0:	2301      	movs	r3, #1
 80074a2:	e7f0      	b.n	8007486 <_vfiprintf_r+0x1da>
 80074a4:	ab03      	add	r3, sp, #12
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	462a      	mov	r2, r5
 80074aa:	4b16      	ldr	r3, [pc, #88]	; (8007504 <_vfiprintf_r+0x258>)
 80074ac:	a904      	add	r1, sp, #16
 80074ae:	4630      	mov	r0, r6
 80074b0:	f7fd fe10 	bl	80050d4 <_printf_float>
 80074b4:	4607      	mov	r7, r0
 80074b6:	1c78      	adds	r0, r7, #1
 80074b8:	d1d6      	bne.n	8007468 <_vfiprintf_r+0x1bc>
 80074ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074bc:	07d9      	lsls	r1, r3, #31
 80074be:	d405      	bmi.n	80074cc <_vfiprintf_r+0x220>
 80074c0:	89ab      	ldrh	r3, [r5, #12]
 80074c2:	059a      	lsls	r2, r3, #22
 80074c4:	d402      	bmi.n	80074cc <_vfiprintf_r+0x220>
 80074c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074c8:	f000 faaf 	bl	8007a2a <__retarget_lock_release_recursive>
 80074cc:	89ab      	ldrh	r3, [r5, #12]
 80074ce:	065b      	lsls	r3, r3, #25
 80074d0:	f53f af12 	bmi.w	80072f8 <_vfiprintf_r+0x4c>
 80074d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074d6:	e711      	b.n	80072fc <_vfiprintf_r+0x50>
 80074d8:	ab03      	add	r3, sp, #12
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	462a      	mov	r2, r5
 80074de:	4b09      	ldr	r3, [pc, #36]	; (8007504 <_vfiprintf_r+0x258>)
 80074e0:	a904      	add	r1, sp, #16
 80074e2:	4630      	mov	r0, r6
 80074e4:	f7fe f89a 	bl	800561c <_printf_i>
 80074e8:	e7e4      	b.n	80074b4 <_vfiprintf_r+0x208>
 80074ea:	bf00      	nop
 80074ec:	08008e4c 	.word	0x08008e4c
 80074f0:	08008e6c 	.word	0x08008e6c
 80074f4:	08008e2c 	.word	0x08008e2c
 80074f8:	08008cd4 	.word	0x08008cd4
 80074fc:	08008cde 	.word	0x08008cde
 8007500:	080050d5 	.word	0x080050d5
 8007504:	08007287 	.word	0x08007287
 8007508:	08008cda 	.word	0x08008cda

0800750c <__swbuf_r>:
 800750c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750e:	460e      	mov	r6, r1
 8007510:	4614      	mov	r4, r2
 8007512:	4605      	mov	r5, r0
 8007514:	b118      	cbz	r0, 800751e <__swbuf_r+0x12>
 8007516:	6983      	ldr	r3, [r0, #24]
 8007518:	b90b      	cbnz	r3, 800751e <__swbuf_r+0x12>
 800751a:	f000 f9e7 	bl	80078ec <__sinit>
 800751e:	4b21      	ldr	r3, [pc, #132]	; (80075a4 <__swbuf_r+0x98>)
 8007520:	429c      	cmp	r4, r3
 8007522:	d12b      	bne.n	800757c <__swbuf_r+0x70>
 8007524:	686c      	ldr	r4, [r5, #4]
 8007526:	69a3      	ldr	r3, [r4, #24]
 8007528:	60a3      	str	r3, [r4, #8]
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	071a      	lsls	r2, r3, #28
 800752e:	d52f      	bpl.n	8007590 <__swbuf_r+0x84>
 8007530:	6923      	ldr	r3, [r4, #16]
 8007532:	b36b      	cbz	r3, 8007590 <__swbuf_r+0x84>
 8007534:	6923      	ldr	r3, [r4, #16]
 8007536:	6820      	ldr	r0, [r4, #0]
 8007538:	1ac0      	subs	r0, r0, r3
 800753a:	6963      	ldr	r3, [r4, #20]
 800753c:	b2f6      	uxtb	r6, r6
 800753e:	4283      	cmp	r3, r0
 8007540:	4637      	mov	r7, r6
 8007542:	dc04      	bgt.n	800754e <__swbuf_r+0x42>
 8007544:	4621      	mov	r1, r4
 8007546:	4628      	mov	r0, r5
 8007548:	f000 f93c 	bl	80077c4 <_fflush_r>
 800754c:	bb30      	cbnz	r0, 800759c <__swbuf_r+0x90>
 800754e:	68a3      	ldr	r3, [r4, #8]
 8007550:	3b01      	subs	r3, #1
 8007552:	60a3      	str	r3, [r4, #8]
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	1c5a      	adds	r2, r3, #1
 8007558:	6022      	str	r2, [r4, #0]
 800755a:	701e      	strb	r6, [r3, #0]
 800755c:	6963      	ldr	r3, [r4, #20]
 800755e:	3001      	adds	r0, #1
 8007560:	4283      	cmp	r3, r0
 8007562:	d004      	beq.n	800756e <__swbuf_r+0x62>
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	07db      	lsls	r3, r3, #31
 8007568:	d506      	bpl.n	8007578 <__swbuf_r+0x6c>
 800756a:	2e0a      	cmp	r6, #10
 800756c:	d104      	bne.n	8007578 <__swbuf_r+0x6c>
 800756e:	4621      	mov	r1, r4
 8007570:	4628      	mov	r0, r5
 8007572:	f000 f927 	bl	80077c4 <_fflush_r>
 8007576:	b988      	cbnz	r0, 800759c <__swbuf_r+0x90>
 8007578:	4638      	mov	r0, r7
 800757a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800757c:	4b0a      	ldr	r3, [pc, #40]	; (80075a8 <__swbuf_r+0x9c>)
 800757e:	429c      	cmp	r4, r3
 8007580:	d101      	bne.n	8007586 <__swbuf_r+0x7a>
 8007582:	68ac      	ldr	r4, [r5, #8]
 8007584:	e7cf      	b.n	8007526 <__swbuf_r+0x1a>
 8007586:	4b09      	ldr	r3, [pc, #36]	; (80075ac <__swbuf_r+0xa0>)
 8007588:	429c      	cmp	r4, r3
 800758a:	bf08      	it	eq
 800758c:	68ec      	ldreq	r4, [r5, #12]
 800758e:	e7ca      	b.n	8007526 <__swbuf_r+0x1a>
 8007590:	4621      	mov	r1, r4
 8007592:	4628      	mov	r0, r5
 8007594:	f000 f81a 	bl	80075cc <__swsetup_r>
 8007598:	2800      	cmp	r0, #0
 800759a:	d0cb      	beq.n	8007534 <__swbuf_r+0x28>
 800759c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80075a0:	e7ea      	b.n	8007578 <__swbuf_r+0x6c>
 80075a2:	bf00      	nop
 80075a4:	08008e4c 	.word	0x08008e4c
 80075a8:	08008e6c 	.word	0x08008e6c
 80075ac:	08008e2c 	.word	0x08008e2c

080075b0 <__ascii_wctomb>:
 80075b0:	b149      	cbz	r1, 80075c6 <__ascii_wctomb+0x16>
 80075b2:	2aff      	cmp	r2, #255	; 0xff
 80075b4:	bf85      	ittet	hi
 80075b6:	238a      	movhi	r3, #138	; 0x8a
 80075b8:	6003      	strhi	r3, [r0, #0]
 80075ba:	700a      	strbls	r2, [r1, #0]
 80075bc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80075c0:	bf98      	it	ls
 80075c2:	2001      	movls	r0, #1
 80075c4:	4770      	bx	lr
 80075c6:	4608      	mov	r0, r1
 80075c8:	4770      	bx	lr
	...

080075cc <__swsetup_r>:
 80075cc:	4b32      	ldr	r3, [pc, #200]	; (8007698 <__swsetup_r+0xcc>)
 80075ce:	b570      	push	{r4, r5, r6, lr}
 80075d0:	681d      	ldr	r5, [r3, #0]
 80075d2:	4606      	mov	r6, r0
 80075d4:	460c      	mov	r4, r1
 80075d6:	b125      	cbz	r5, 80075e2 <__swsetup_r+0x16>
 80075d8:	69ab      	ldr	r3, [r5, #24]
 80075da:	b913      	cbnz	r3, 80075e2 <__swsetup_r+0x16>
 80075dc:	4628      	mov	r0, r5
 80075de:	f000 f985 	bl	80078ec <__sinit>
 80075e2:	4b2e      	ldr	r3, [pc, #184]	; (800769c <__swsetup_r+0xd0>)
 80075e4:	429c      	cmp	r4, r3
 80075e6:	d10f      	bne.n	8007608 <__swsetup_r+0x3c>
 80075e8:	686c      	ldr	r4, [r5, #4]
 80075ea:	89a3      	ldrh	r3, [r4, #12]
 80075ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075f0:	0719      	lsls	r1, r3, #28
 80075f2:	d42c      	bmi.n	800764e <__swsetup_r+0x82>
 80075f4:	06dd      	lsls	r5, r3, #27
 80075f6:	d411      	bmi.n	800761c <__swsetup_r+0x50>
 80075f8:	2309      	movs	r3, #9
 80075fa:	6033      	str	r3, [r6, #0]
 80075fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007600:	81a3      	strh	r3, [r4, #12]
 8007602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007606:	e03e      	b.n	8007686 <__swsetup_r+0xba>
 8007608:	4b25      	ldr	r3, [pc, #148]	; (80076a0 <__swsetup_r+0xd4>)
 800760a:	429c      	cmp	r4, r3
 800760c:	d101      	bne.n	8007612 <__swsetup_r+0x46>
 800760e:	68ac      	ldr	r4, [r5, #8]
 8007610:	e7eb      	b.n	80075ea <__swsetup_r+0x1e>
 8007612:	4b24      	ldr	r3, [pc, #144]	; (80076a4 <__swsetup_r+0xd8>)
 8007614:	429c      	cmp	r4, r3
 8007616:	bf08      	it	eq
 8007618:	68ec      	ldreq	r4, [r5, #12]
 800761a:	e7e6      	b.n	80075ea <__swsetup_r+0x1e>
 800761c:	0758      	lsls	r0, r3, #29
 800761e:	d512      	bpl.n	8007646 <__swsetup_r+0x7a>
 8007620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007622:	b141      	cbz	r1, 8007636 <__swsetup_r+0x6a>
 8007624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007628:	4299      	cmp	r1, r3
 800762a:	d002      	beq.n	8007632 <__swsetup_r+0x66>
 800762c:	4630      	mov	r0, r6
 800762e:	f7ff fb6f 	bl	8006d10 <_free_r>
 8007632:	2300      	movs	r3, #0
 8007634:	6363      	str	r3, [r4, #52]	; 0x34
 8007636:	89a3      	ldrh	r3, [r4, #12]
 8007638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800763c:	81a3      	strh	r3, [r4, #12]
 800763e:	2300      	movs	r3, #0
 8007640:	6063      	str	r3, [r4, #4]
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	6023      	str	r3, [r4, #0]
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	f043 0308 	orr.w	r3, r3, #8
 800764c:	81a3      	strh	r3, [r4, #12]
 800764e:	6923      	ldr	r3, [r4, #16]
 8007650:	b94b      	cbnz	r3, 8007666 <__swsetup_r+0x9a>
 8007652:	89a3      	ldrh	r3, [r4, #12]
 8007654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800765c:	d003      	beq.n	8007666 <__swsetup_r+0x9a>
 800765e:	4621      	mov	r1, r4
 8007660:	4630      	mov	r0, r6
 8007662:	f000 fa07 	bl	8007a74 <__smakebuf_r>
 8007666:	89a0      	ldrh	r0, [r4, #12]
 8007668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800766c:	f010 0301 	ands.w	r3, r0, #1
 8007670:	d00a      	beq.n	8007688 <__swsetup_r+0xbc>
 8007672:	2300      	movs	r3, #0
 8007674:	60a3      	str	r3, [r4, #8]
 8007676:	6963      	ldr	r3, [r4, #20]
 8007678:	425b      	negs	r3, r3
 800767a:	61a3      	str	r3, [r4, #24]
 800767c:	6923      	ldr	r3, [r4, #16]
 800767e:	b943      	cbnz	r3, 8007692 <__swsetup_r+0xc6>
 8007680:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007684:	d1ba      	bne.n	80075fc <__swsetup_r+0x30>
 8007686:	bd70      	pop	{r4, r5, r6, pc}
 8007688:	0781      	lsls	r1, r0, #30
 800768a:	bf58      	it	pl
 800768c:	6963      	ldrpl	r3, [r4, #20]
 800768e:	60a3      	str	r3, [r4, #8]
 8007690:	e7f4      	b.n	800767c <__swsetup_r+0xb0>
 8007692:	2000      	movs	r0, #0
 8007694:	e7f7      	b.n	8007686 <__swsetup_r+0xba>
 8007696:	bf00      	nop
 8007698:	2000201c 	.word	0x2000201c
 800769c:	08008e4c 	.word	0x08008e4c
 80076a0:	08008e6c 	.word	0x08008e6c
 80076a4:	08008e2c 	.word	0x08008e2c

080076a8 <abort>:
 80076a8:	b508      	push	{r3, lr}
 80076aa:	2006      	movs	r0, #6
 80076ac:	f000 fa52 	bl	8007b54 <raise>
 80076b0:	2001      	movs	r0, #1
 80076b2:	f7fb f9b5 	bl	8002a20 <_exit>
	...

080076b8 <__sflush_r>:
 80076b8:	898a      	ldrh	r2, [r1, #12]
 80076ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076be:	4605      	mov	r5, r0
 80076c0:	0710      	lsls	r0, r2, #28
 80076c2:	460c      	mov	r4, r1
 80076c4:	d458      	bmi.n	8007778 <__sflush_r+0xc0>
 80076c6:	684b      	ldr	r3, [r1, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	dc05      	bgt.n	80076d8 <__sflush_r+0x20>
 80076cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	dc02      	bgt.n	80076d8 <__sflush_r+0x20>
 80076d2:	2000      	movs	r0, #0
 80076d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076da:	2e00      	cmp	r6, #0
 80076dc:	d0f9      	beq.n	80076d2 <__sflush_r+0x1a>
 80076de:	2300      	movs	r3, #0
 80076e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076e4:	682f      	ldr	r7, [r5, #0]
 80076e6:	602b      	str	r3, [r5, #0]
 80076e8:	d032      	beq.n	8007750 <__sflush_r+0x98>
 80076ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	075a      	lsls	r2, r3, #29
 80076f0:	d505      	bpl.n	80076fe <__sflush_r+0x46>
 80076f2:	6863      	ldr	r3, [r4, #4]
 80076f4:	1ac0      	subs	r0, r0, r3
 80076f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076f8:	b10b      	cbz	r3, 80076fe <__sflush_r+0x46>
 80076fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076fc:	1ac0      	subs	r0, r0, r3
 80076fe:	2300      	movs	r3, #0
 8007700:	4602      	mov	r2, r0
 8007702:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007704:	6a21      	ldr	r1, [r4, #32]
 8007706:	4628      	mov	r0, r5
 8007708:	47b0      	blx	r6
 800770a:	1c43      	adds	r3, r0, #1
 800770c:	89a3      	ldrh	r3, [r4, #12]
 800770e:	d106      	bne.n	800771e <__sflush_r+0x66>
 8007710:	6829      	ldr	r1, [r5, #0]
 8007712:	291d      	cmp	r1, #29
 8007714:	d82c      	bhi.n	8007770 <__sflush_r+0xb8>
 8007716:	4a2a      	ldr	r2, [pc, #168]	; (80077c0 <__sflush_r+0x108>)
 8007718:	40ca      	lsrs	r2, r1
 800771a:	07d6      	lsls	r6, r2, #31
 800771c:	d528      	bpl.n	8007770 <__sflush_r+0xb8>
 800771e:	2200      	movs	r2, #0
 8007720:	6062      	str	r2, [r4, #4]
 8007722:	04d9      	lsls	r1, r3, #19
 8007724:	6922      	ldr	r2, [r4, #16]
 8007726:	6022      	str	r2, [r4, #0]
 8007728:	d504      	bpl.n	8007734 <__sflush_r+0x7c>
 800772a:	1c42      	adds	r2, r0, #1
 800772c:	d101      	bne.n	8007732 <__sflush_r+0x7a>
 800772e:	682b      	ldr	r3, [r5, #0]
 8007730:	b903      	cbnz	r3, 8007734 <__sflush_r+0x7c>
 8007732:	6560      	str	r0, [r4, #84]	; 0x54
 8007734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007736:	602f      	str	r7, [r5, #0]
 8007738:	2900      	cmp	r1, #0
 800773a:	d0ca      	beq.n	80076d2 <__sflush_r+0x1a>
 800773c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007740:	4299      	cmp	r1, r3
 8007742:	d002      	beq.n	800774a <__sflush_r+0x92>
 8007744:	4628      	mov	r0, r5
 8007746:	f7ff fae3 	bl	8006d10 <_free_r>
 800774a:	2000      	movs	r0, #0
 800774c:	6360      	str	r0, [r4, #52]	; 0x34
 800774e:	e7c1      	b.n	80076d4 <__sflush_r+0x1c>
 8007750:	6a21      	ldr	r1, [r4, #32]
 8007752:	2301      	movs	r3, #1
 8007754:	4628      	mov	r0, r5
 8007756:	47b0      	blx	r6
 8007758:	1c41      	adds	r1, r0, #1
 800775a:	d1c7      	bne.n	80076ec <__sflush_r+0x34>
 800775c:	682b      	ldr	r3, [r5, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d0c4      	beq.n	80076ec <__sflush_r+0x34>
 8007762:	2b1d      	cmp	r3, #29
 8007764:	d001      	beq.n	800776a <__sflush_r+0xb2>
 8007766:	2b16      	cmp	r3, #22
 8007768:	d101      	bne.n	800776e <__sflush_r+0xb6>
 800776a:	602f      	str	r7, [r5, #0]
 800776c:	e7b1      	b.n	80076d2 <__sflush_r+0x1a>
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007774:	81a3      	strh	r3, [r4, #12]
 8007776:	e7ad      	b.n	80076d4 <__sflush_r+0x1c>
 8007778:	690f      	ldr	r7, [r1, #16]
 800777a:	2f00      	cmp	r7, #0
 800777c:	d0a9      	beq.n	80076d2 <__sflush_r+0x1a>
 800777e:	0793      	lsls	r3, r2, #30
 8007780:	680e      	ldr	r6, [r1, #0]
 8007782:	bf08      	it	eq
 8007784:	694b      	ldreq	r3, [r1, #20]
 8007786:	600f      	str	r7, [r1, #0]
 8007788:	bf18      	it	ne
 800778a:	2300      	movne	r3, #0
 800778c:	eba6 0807 	sub.w	r8, r6, r7
 8007790:	608b      	str	r3, [r1, #8]
 8007792:	f1b8 0f00 	cmp.w	r8, #0
 8007796:	dd9c      	ble.n	80076d2 <__sflush_r+0x1a>
 8007798:	6a21      	ldr	r1, [r4, #32]
 800779a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800779c:	4643      	mov	r3, r8
 800779e:	463a      	mov	r2, r7
 80077a0:	4628      	mov	r0, r5
 80077a2:	47b0      	blx	r6
 80077a4:	2800      	cmp	r0, #0
 80077a6:	dc06      	bgt.n	80077b6 <__sflush_r+0xfe>
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ae:	81a3      	strh	r3, [r4, #12]
 80077b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077b4:	e78e      	b.n	80076d4 <__sflush_r+0x1c>
 80077b6:	4407      	add	r7, r0
 80077b8:	eba8 0800 	sub.w	r8, r8, r0
 80077bc:	e7e9      	b.n	8007792 <__sflush_r+0xda>
 80077be:	bf00      	nop
 80077c0:	20400001 	.word	0x20400001

080077c4 <_fflush_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	690b      	ldr	r3, [r1, #16]
 80077c8:	4605      	mov	r5, r0
 80077ca:	460c      	mov	r4, r1
 80077cc:	b913      	cbnz	r3, 80077d4 <_fflush_r+0x10>
 80077ce:	2500      	movs	r5, #0
 80077d0:	4628      	mov	r0, r5
 80077d2:	bd38      	pop	{r3, r4, r5, pc}
 80077d4:	b118      	cbz	r0, 80077de <_fflush_r+0x1a>
 80077d6:	6983      	ldr	r3, [r0, #24]
 80077d8:	b90b      	cbnz	r3, 80077de <_fflush_r+0x1a>
 80077da:	f000 f887 	bl	80078ec <__sinit>
 80077de:	4b14      	ldr	r3, [pc, #80]	; (8007830 <_fflush_r+0x6c>)
 80077e0:	429c      	cmp	r4, r3
 80077e2:	d11b      	bne.n	800781c <_fflush_r+0x58>
 80077e4:	686c      	ldr	r4, [r5, #4]
 80077e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0ef      	beq.n	80077ce <_fflush_r+0xa>
 80077ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077f0:	07d0      	lsls	r0, r2, #31
 80077f2:	d404      	bmi.n	80077fe <_fflush_r+0x3a>
 80077f4:	0599      	lsls	r1, r3, #22
 80077f6:	d402      	bmi.n	80077fe <_fflush_r+0x3a>
 80077f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077fa:	f000 f915 	bl	8007a28 <__retarget_lock_acquire_recursive>
 80077fe:	4628      	mov	r0, r5
 8007800:	4621      	mov	r1, r4
 8007802:	f7ff ff59 	bl	80076b8 <__sflush_r>
 8007806:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007808:	07da      	lsls	r2, r3, #31
 800780a:	4605      	mov	r5, r0
 800780c:	d4e0      	bmi.n	80077d0 <_fflush_r+0xc>
 800780e:	89a3      	ldrh	r3, [r4, #12]
 8007810:	059b      	lsls	r3, r3, #22
 8007812:	d4dd      	bmi.n	80077d0 <_fflush_r+0xc>
 8007814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007816:	f000 f908 	bl	8007a2a <__retarget_lock_release_recursive>
 800781a:	e7d9      	b.n	80077d0 <_fflush_r+0xc>
 800781c:	4b05      	ldr	r3, [pc, #20]	; (8007834 <_fflush_r+0x70>)
 800781e:	429c      	cmp	r4, r3
 8007820:	d101      	bne.n	8007826 <_fflush_r+0x62>
 8007822:	68ac      	ldr	r4, [r5, #8]
 8007824:	e7df      	b.n	80077e6 <_fflush_r+0x22>
 8007826:	4b04      	ldr	r3, [pc, #16]	; (8007838 <_fflush_r+0x74>)
 8007828:	429c      	cmp	r4, r3
 800782a:	bf08      	it	eq
 800782c:	68ec      	ldreq	r4, [r5, #12]
 800782e:	e7da      	b.n	80077e6 <_fflush_r+0x22>
 8007830:	08008e4c 	.word	0x08008e4c
 8007834:	08008e6c 	.word	0x08008e6c
 8007838:	08008e2c 	.word	0x08008e2c

0800783c <std>:
 800783c:	2300      	movs	r3, #0
 800783e:	b510      	push	{r4, lr}
 8007840:	4604      	mov	r4, r0
 8007842:	e9c0 3300 	strd	r3, r3, [r0]
 8007846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800784a:	6083      	str	r3, [r0, #8]
 800784c:	8181      	strh	r1, [r0, #12]
 800784e:	6643      	str	r3, [r0, #100]	; 0x64
 8007850:	81c2      	strh	r2, [r0, #14]
 8007852:	6183      	str	r3, [r0, #24]
 8007854:	4619      	mov	r1, r3
 8007856:	2208      	movs	r2, #8
 8007858:	305c      	adds	r0, #92	; 0x5c
 800785a:	f7fd fb93 	bl	8004f84 <memset>
 800785e:	4b05      	ldr	r3, [pc, #20]	; (8007874 <std+0x38>)
 8007860:	6263      	str	r3, [r4, #36]	; 0x24
 8007862:	4b05      	ldr	r3, [pc, #20]	; (8007878 <std+0x3c>)
 8007864:	62a3      	str	r3, [r4, #40]	; 0x28
 8007866:	4b05      	ldr	r3, [pc, #20]	; (800787c <std+0x40>)
 8007868:	62e3      	str	r3, [r4, #44]	; 0x2c
 800786a:	4b05      	ldr	r3, [pc, #20]	; (8007880 <std+0x44>)
 800786c:	6224      	str	r4, [r4, #32]
 800786e:	6323      	str	r3, [r4, #48]	; 0x30
 8007870:	bd10      	pop	{r4, pc}
 8007872:	bf00      	nop
 8007874:	08007b8d 	.word	0x08007b8d
 8007878:	08007baf 	.word	0x08007baf
 800787c:	08007be7 	.word	0x08007be7
 8007880:	08007c0b 	.word	0x08007c0b

08007884 <_cleanup_r>:
 8007884:	4901      	ldr	r1, [pc, #4]	; (800788c <_cleanup_r+0x8>)
 8007886:	f000 b8af 	b.w	80079e8 <_fwalk_reent>
 800788a:	bf00      	nop
 800788c:	080077c5 	.word	0x080077c5

08007890 <__sfmoreglue>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	1e4a      	subs	r2, r1, #1
 8007894:	2568      	movs	r5, #104	; 0x68
 8007896:	4355      	muls	r5, r2
 8007898:	460e      	mov	r6, r1
 800789a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800789e:	f7ff fa87 	bl	8006db0 <_malloc_r>
 80078a2:	4604      	mov	r4, r0
 80078a4:	b140      	cbz	r0, 80078b8 <__sfmoreglue+0x28>
 80078a6:	2100      	movs	r1, #0
 80078a8:	e9c0 1600 	strd	r1, r6, [r0]
 80078ac:	300c      	adds	r0, #12
 80078ae:	60a0      	str	r0, [r4, #8]
 80078b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078b4:	f7fd fb66 	bl	8004f84 <memset>
 80078b8:	4620      	mov	r0, r4
 80078ba:	bd70      	pop	{r4, r5, r6, pc}

080078bc <__sfp_lock_acquire>:
 80078bc:	4801      	ldr	r0, [pc, #4]	; (80078c4 <__sfp_lock_acquire+0x8>)
 80078be:	f000 b8b3 	b.w	8007a28 <__retarget_lock_acquire_recursive>
 80078c2:	bf00      	nop
 80078c4:	200025a8 	.word	0x200025a8

080078c8 <__sfp_lock_release>:
 80078c8:	4801      	ldr	r0, [pc, #4]	; (80078d0 <__sfp_lock_release+0x8>)
 80078ca:	f000 b8ae 	b.w	8007a2a <__retarget_lock_release_recursive>
 80078ce:	bf00      	nop
 80078d0:	200025a8 	.word	0x200025a8

080078d4 <__sinit_lock_acquire>:
 80078d4:	4801      	ldr	r0, [pc, #4]	; (80078dc <__sinit_lock_acquire+0x8>)
 80078d6:	f000 b8a7 	b.w	8007a28 <__retarget_lock_acquire_recursive>
 80078da:	bf00      	nop
 80078dc:	200025a3 	.word	0x200025a3

080078e0 <__sinit_lock_release>:
 80078e0:	4801      	ldr	r0, [pc, #4]	; (80078e8 <__sinit_lock_release+0x8>)
 80078e2:	f000 b8a2 	b.w	8007a2a <__retarget_lock_release_recursive>
 80078e6:	bf00      	nop
 80078e8:	200025a3 	.word	0x200025a3

080078ec <__sinit>:
 80078ec:	b510      	push	{r4, lr}
 80078ee:	4604      	mov	r4, r0
 80078f0:	f7ff fff0 	bl	80078d4 <__sinit_lock_acquire>
 80078f4:	69a3      	ldr	r3, [r4, #24]
 80078f6:	b11b      	cbz	r3, 8007900 <__sinit+0x14>
 80078f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078fc:	f7ff bff0 	b.w	80078e0 <__sinit_lock_release>
 8007900:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007904:	6523      	str	r3, [r4, #80]	; 0x50
 8007906:	4b13      	ldr	r3, [pc, #76]	; (8007954 <__sinit+0x68>)
 8007908:	4a13      	ldr	r2, [pc, #76]	; (8007958 <__sinit+0x6c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	62a2      	str	r2, [r4, #40]	; 0x28
 800790e:	42a3      	cmp	r3, r4
 8007910:	bf04      	itt	eq
 8007912:	2301      	moveq	r3, #1
 8007914:	61a3      	streq	r3, [r4, #24]
 8007916:	4620      	mov	r0, r4
 8007918:	f000 f820 	bl	800795c <__sfp>
 800791c:	6060      	str	r0, [r4, #4]
 800791e:	4620      	mov	r0, r4
 8007920:	f000 f81c 	bl	800795c <__sfp>
 8007924:	60a0      	str	r0, [r4, #8]
 8007926:	4620      	mov	r0, r4
 8007928:	f000 f818 	bl	800795c <__sfp>
 800792c:	2200      	movs	r2, #0
 800792e:	60e0      	str	r0, [r4, #12]
 8007930:	2104      	movs	r1, #4
 8007932:	6860      	ldr	r0, [r4, #4]
 8007934:	f7ff ff82 	bl	800783c <std>
 8007938:	68a0      	ldr	r0, [r4, #8]
 800793a:	2201      	movs	r2, #1
 800793c:	2109      	movs	r1, #9
 800793e:	f7ff ff7d 	bl	800783c <std>
 8007942:	68e0      	ldr	r0, [r4, #12]
 8007944:	2202      	movs	r2, #2
 8007946:	2112      	movs	r1, #18
 8007948:	f7ff ff78 	bl	800783c <std>
 800794c:	2301      	movs	r3, #1
 800794e:	61a3      	str	r3, [r4, #24]
 8007950:	e7d2      	b.n	80078f8 <__sinit+0xc>
 8007952:	bf00      	nop
 8007954:	08008aac 	.word	0x08008aac
 8007958:	08007885 	.word	0x08007885

0800795c <__sfp>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	4607      	mov	r7, r0
 8007960:	f7ff ffac 	bl	80078bc <__sfp_lock_acquire>
 8007964:	4b1e      	ldr	r3, [pc, #120]	; (80079e0 <__sfp+0x84>)
 8007966:	681e      	ldr	r6, [r3, #0]
 8007968:	69b3      	ldr	r3, [r6, #24]
 800796a:	b913      	cbnz	r3, 8007972 <__sfp+0x16>
 800796c:	4630      	mov	r0, r6
 800796e:	f7ff ffbd 	bl	80078ec <__sinit>
 8007972:	3648      	adds	r6, #72	; 0x48
 8007974:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007978:	3b01      	subs	r3, #1
 800797a:	d503      	bpl.n	8007984 <__sfp+0x28>
 800797c:	6833      	ldr	r3, [r6, #0]
 800797e:	b30b      	cbz	r3, 80079c4 <__sfp+0x68>
 8007980:	6836      	ldr	r6, [r6, #0]
 8007982:	e7f7      	b.n	8007974 <__sfp+0x18>
 8007984:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007988:	b9d5      	cbnz	r5, 80079c0 <__sfp+0x64>
 800798a:	4b16      	ldr	r3, [pc, #88]	; (80079e4 <__sfp+0x88>)
 800798c:	60e3      	str	r3, [r4, #12]
 800798e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007992:	6665      	str	r5, [r4, #100]	; 0x64
 8007994:	f000 f847 	bl	8007a26 <__retarget_lock_init_recursive>
 8007998:	f7ff ff96 	bl	80078c8 <__sfp_lock_release>
 800799c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079a4:	6025      	str	r5, [r4, #0]
 80079a6:	61a5      	str	r5, [r4, #24]
 80079a8:	2208      	movs	r2, #8
 80079aa:	4629      	mov	r1, r5
 80079ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079b0:	f7fd fae8 	bl	8004f84 <memset>
 80079b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079bc:	4620      	mov	r0, r4
 80079be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c0:	3468      	adds	r4, #104	; 0x68
 80079c2:	e7d9      	b.n	8007978 <__sfp+0x1c>
 80079c4:	2104      	movs	r1, #4
 80079c6:	4638      	mov	r0, r7
 80079c8:	f7ff ff62 	bl	8007890 <__sfmoreglue>
 80079cc:	4604      	mov	r4, r0
 80079ce:	6030      	str	r0, [r6, #0]
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d1d5      	bne.n	8007980 <__sfp+0x24>
 80079d4:	f7ff ff78 	bl	80078c8 <__sfp_lock_release>
 80079d8:	230c      	movs	r3, #12
 80079da:	603b      	str	r3, [r7, #0]
 80079dc:	e7ee      	b.n	80079bc <__sfp+0x60>
 80079de:	bf00      	nop
 80079e0:	08008aac 	.word	0x08008aac
 80079e4:	ffff0001 	.word	0xffff0001

080079e8 <_fwalk_reent>:
 80079e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079ec:	4606      	mov	r6, r0
 80079ee:	4688      	mov	r8, r1
 80079f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079f4:	2700      	movs	r7, #0
 80079f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079fa:	f1b9 0901 	subs.w	r9, r9, #1
 80079fe:	d505      	bpl.n	8007a0c <_fwalk_reent+0x24>
 8007a00:	6824      	ldr	r4, [r4, #0]
 8007a02:	2c00      	cmp	r4, #0
 8007a04:	d1f7      	bne.n	80079f6 <_fwalk_reent+0xe>
 8007a06:	4638      	mov	r0, r7
 8007a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a0c:	89ab      	ldrh	r3, [r5, #12]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d907      	bls.n	8007a22 <_fwalk_reent+0x3a>
 8007a12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a16:	3301      	adds	r3, #1
 8007a18:	d003      	beq.n	8007a22 <_fwalk_reent+0x3a>
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	47c0      	blx	r8
 8007a20:	4307      	orrs	r7, r0
 8007a22:	3568      	adds	r5, #104	; 0x68
 8007a24:	e7e9      	b.n	80079fa <_fwalk_reent+0x12>

08007a26 <__retarget_lock_init_recursive>:
 8007a26:	4770      	bx	lr

08007a28 <__retarget_lock_acquire_recursive>:
 8007a28:	4770      	bx	lr

08007a2a <__retarget_lock_release_recursive>:
 8007a2a:	4770      	bx	lr

08007a2c <__swhatbuf_r>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	460e      	mov	r6, r1
 8007a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a34:	2900      	cmp	r1, #0
 8007a36:	b096      	sub	sp, #88	; 0x58
 8007a38:	4614      	mov	r4, r2
 8007a3a:	461d      	mov	r5, r3
 8007a3c:	da07      	bge.n	8007a4e <__swhatbuf_r+0x22>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	602b      	str	r3, [r5, #0]
 8007a42:	89b3      	ldrh	r3, [r6, #12]
 8007a44:	061a      	lsls	r2, r3, #24
 8007a46:	d410      	bmi.n	8007a6a <__swhatbuf_r+0x3e>
 8007a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a4c:	e00e      	b.n	8007a6c <__swhatbuf_r+0x40>
 8007a4e:	466a      	mov	r2, sp
 8007a50:	f000 f902 	bl	8007c58 <_fstat_r>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	dbf2      	blt.n	8007a3e <__swhatbuf_r+0x12>
 8007a58:	9a01      	ldr	r2, [sp, #4]
 8007a5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a62:	425a      	negs	r2, r3
 8007a64:	415a      	adcs	r2, r3
 8007a66:	602a      	str	r2, [r5, #0]
 8007a68:	e7ee      	b.n	8007a48 <__swhatbuf_r+0x1c>
 8007a6a:	2340      	movs	r3, #64	; 0x40
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	6023      	str	r3, [r4, #0]
 8007a70:	b016      	add	sp, #88	; 0x58
 8007a72:	bd70      	pop	{r4, r5, r6, pc}

08007a74 <__smakebuf_r>:
 8007a74:	898b      	ldrh	r3, [r1, #12]
 8007a76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a78:	079d      	lsls	r5, r3, #30
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	d507      	bpl.n	8007a90 <__smakebuf_r+0x1c>
 8007a80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	6123      	str	r3, [r4, #16]
 8007a88:	2301      	movs	r3, #1
 8007a8a:	6163      	str	r3, [r4, #20]
 8007a8c:	b002      	add	sp, #8
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	ab01      	add	r3, sp, #4
 8007a92:	466a      	mov	r2, sp
 8007a94:	f7ff ffca 	bl	8007a2c <__swhatbuf_r>
 8007a98:	9900      	ldr	r1, [sp, #0]
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f7ff f987 	bl	8006db0 <_malloc_r>
 8007aa2:	b948      	cbnz	r0, 8007ab8 <__smakebuf_r+0x44>
 8007aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aa8:	059a      	lsls	r2, r3, #22
 8007aaa:	d4ef      	bmi.n	8007a8c <__smakebuf_r+0x18>
 8007aac:	f023 0303 	bic.w	r3, r3, #3
 8007ab0:	f043 0302 	orr.w	r3, r3, #2
 8007ab4:	81a3      	strh	r3, [r4, #12]
 8007ab6:	e7e3      	b.n	8007a80 <__smakebuf_r+0xc>
 8007ab8:	4b0d      	ldr	r3, [pc, #52]	; (8007af0 <__smakebuf_r+0x7c>)
 8007aba:	62b3      	str	r3, [r6, #40]	; 0x28
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	6020      	str	r0, [r4, #0]
 8007ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ac4:	81a3      	strh	r3, [r4, #12]
 8007ac6:	9b00      	ldr	r3, [sp, #0]
 8007ac8:	6163      	str	r3, [r4, #20]
 8007aca:	9b01      	ldr	r3, [sp, #4]
 8007acc:	6120      	str	r0, [r4, #16]
 8007ace:	b15b      	cbz	r3, 8007ae8 <__smakebuf_r+0x74>
 8007ad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f000 f8d1 	bl	8007c7c <_isatty_r>
 8007ada:	b128      	cbz	r0, 8007ae8 <__smakebuf_r+0x74>
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	f023 0303 	bic.w	r3, r3, #3
 8007ae2:	f043 0301 	orr.w	r3, r3, #1
 8007ae6:	81a3      	strh	r3, [r4, #12]
 8007ae8:	89a0      	ldrh	r0, [r4, #12]
 8007aea:	4305      	orrs	r5, r0
 8007aec:	81a5      	strh	r5, [r4, #12]
 8007aee:	e7cd      	b.n	8007a8c <__smakebuf_r+0x18>
 8007af0:	08007885 	.word	0x08007885

08007af4 <_malloc_usable_size_r>:
 8007af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007af8:	1f18      	subs	r0, r3, #4
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	bfbc      	itt	lt
 8007afe:	580b      	ldrlt	r3, [r1, r0]
 8007b00:	18c0      	addlt	r0, r0, r3
 8007b02:	4770      	bx	lr

08007b04 <_raise_r>:
 8007b04:	291f      	cmp	r1, #31
 8007b06:	b538      	push	{r3, r4, r5, lr}
 8007b08:	4604      	mov	r4, r0
 8007b0a:	460d      	mov	r5, r1
 8007b0c:	d904      	bls.n	8007b18 <_raise_r+0x14>
 8007b0e:	2316      	movs	r3, #22
 8007b10:	6003      	str	r3, [r0, #0]
 8007b12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b16:	bd38      	pop	{r3, r4, r5, pc}
 8007b18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b1a:	b112      	cbz	r2, 8007b22 <_raise_r+0x1e>
 8007b1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b20:	b94b      	cbnz	r3, 8007b36 <_raise_r+0x32>
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 f830 	bl	8007b88 <_getpid_r>
 8007b28:	462a      	mov	r2, r5
 8007b2a:	4601      	mov	r1, r0
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b32:	f000 b817 	b.w	8007b64 <_kill_r>
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d00a      	beq.n	8007b50 <_raise_r+0x4c>
 8007b3a:	1c59      	adds	r1, r3, #1
 8007b3c:	d103      	bne.n	8007b46 <_raise_r+0x42>
 8007b3e:	2316      	movs	r3, #22
 8007b40:	6003      	str	r3, [r0, #0]
 8007b42:	2001      	movs	r0, #1
 8007b44:	e7e7      	b.n	8007b16 <_raise_r+0x12>
 8007b46:	2400      	movs	r4, #0
 8007b48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	4798      	blx	r3
 8007b50:	2000      	movs	r0, #0
 8007b52:	e7e0      	b.n	8007b16 <_raise_r+0x12>

08007b54 <raise>:
 8007b54:	4b02      	ldr	r3, [pc, #8]	; (8007b60 <raise+0xc>)
 8007b56:	4601      	mov	r1, r0
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	f7ff bfd3 	b.w	8007b04 <_raise_r>
 8007b5e:	bf00      	nop
 8007b60:	2000201c 	.word	0x2000201c

08007b64 <_kill_r>:
 8007b64:	b538      	push	{r3, r4, r5, lr}
 8007b66:	4d07      	ldr	r5, [pc, #28]	; (8007b84 <_kill_r+0x20>)
 8007b68:	2300      	movs	r3, #0
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	4608      	mov	r0, r1
 8007b6e:	4611      	mov	r1, r2
 8007b70:	602b      	str	r3, [r5, #0]
 8007b72:	f7fa ff45 	bl	8002a00 <_kill>
 8007b76:	1c43      	adds	r3, r0, #1
 8007b78:	d102      	bne.n	8007b80 <_kill_r+0x1c>
 8007b7a:	682b      	ldr	r3, [r5, #0]
 8007b7c:	b103      	cbz	r3, 8007b80 <_kill_r+0x1c>
 8007b7e:	6023      	str	r3, [r4, #0]
 8007b80:	bd38      	pop	{r3, r4, r5, pc}
 8007b82:	bf00      	nop
 8007b84:	2000259c 	.word	0x2000259c

08007b88 <_getpid_r>:
 8007b88:	f7fa bf32 	b.w	80029f0 <_getpid>

08007b8c <__sread>:
 8007b8c:	b510      	push	{r4, lr}
 8007b8e:	460c      	mov	r4, r1
 8007b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b94:	f000 f894 	bl	8007cc0 <_read_r>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	bfab      	itete	ge
 8007b9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b9e:	89a3      	ldrhlt	r3, [r4, #12]
 8007ba0:	181b      	addge	r3, r3, r0
 8007ba2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ba6:	bfac      	ite	ge
 8007ba8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007baa:	81a3      	strhlt	r3, [r4, #12]
 8007bac:	bd10      	pop	{r4, pc}

08007bae <__swrite>:
 8007bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb2:	461f      	mov	r7, r3
 8007bb4:	898b      	ldrh	r3, [r1, #12]
 8007bb6:	05db      	lsls	r3, r3, #23
 8007bb8:	4605      	mov	r5, r0
 8007bba:	460c      	mov	r4, r1
 8007bbc:	4616      	mov	r6, r2
 8007bbe:	d505      	bpl.n	8007bcc <__swrite+0x1e>
 8007bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f000 f868 	bl	8007c9c <_lseek_r>
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bd6:	81a3      	strh	r3, [r4, #12]
 8007bd8:	4632      	mov	r2, r6
 8007bda:	463b      	mov	r3, r7
 8007bdc:	4628      	mov	r0, r5
 8007bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007be2:	f000 b817 	b.w	8007c14 <_write_r>

08007be6 <__sseek>:
 8007be6:	b510      	push	{r4, lr}
 8007be8:	460c      	mov	r4, r1
 8007bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bee:	f000 f855 	bl	8007c9c <_lseek_r>
 8007bf2:	1c43      	adds	r3, r0, #1
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	bf15      	itete	ne
 8007bf8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c02:	81a3      	strheq	r3, [r4, #12]
 8007c04:	bf18      	it	ne
 8007c06:	81a3      	strhne	r3, [r4, #12]
 8007c08:	bd10      	pop	{r4, pc}

08007c0a <__sclose>:
 8007c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0e:	f000 b813 	b.w	8007c38 <_close_r>
	...

08007c14 <_write_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	4d07      	ldr	r5, [pc, #28]	; (8007c34 <_write_r+0x20>)
 8007c18:	4604      	mov	r4, r0
 8007c1a:	4608      	mov	r0, r1
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	2200      	movs	r2, #0
 8007c20:	602a      	str	r2, [r5, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	f7fa ff23 	bl	8002a6e <_write>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d102      	bne.n	8007c32 <_write_r+0x1e>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	b103      	cbz	r3, 8007c32 <_write_r+0x1e>
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	bd38      	pop	{r3, r4, r5, pc}
 8007c34:	2000259c 	.word	0x2000259c

08007c38 <_close_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	4d06      	ldr	r5, [pc, #24]	; (8007c54 <_close_r+0x1c>)
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	4604      	mov	r4, r0
 8007c40:	4608      	mov	r0, r1
 8007c42:	602b      	str	r3, [r5, #0]
 8007c44:	f7fa ff2f 	bl	8002aa6 <_close>
 8007c48:	1c43      	adds	r3, r0, #1
 8007c4a:	d102      	bne.n	8007c52 <_close_r+0x1a>
 8007c4c:	682b      	ldr	r3, [r5, #0]
 8007c4e:	b103      	cbz	r3, 8007c52 <_close_r+0x1a>
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
 8007c54:	2000259c 	.word	0x2000259c

08007c58 <_fstat_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	4d07      	ldr	r5, [pc, #28]	; (8007c78 <_fstat_r+0x20>)
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	4604      	mov	r4, r0
 8007c60:	4608      	mov	r0, r1
 8007c62:	4611      	mov	r1, r2
 8007c64:	602b      	str	r3, [r5, #0]
 8007c66:	f7fa ff2a 	bl	8002abe <_fstat>
 8007c6a:	1c43      	adds	r3, r0, #1
 8007c6c:	d102      	bne.n	8007c74 <_fstat_r+0x1c>
 8007c6e:	682b      	ldr	r3, [r5, #0]
 8007c70:	b103      	cbz	r3, 8007c74 <_fstat_r+0x1c>
 8007c72:	6023      	str	r3, [r4, #0]
 8007c74:	bd38      	pop	{r3, r4, r5, pc}
 8007c76:	bf00      	nop
 8007c78:	2000259c 	.word	0x2000259c

08007c7c <_isatty_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4d06      	ldr	r5, [pc, #24]	; (8007c98 <_isatty_r+0x1c>)
 8007c80:	2300      	movs	r3, #0
 8007c82:	4604      	mov	r4, r0
 8007c84:	4608      	mov	r0, r1
 8007c86:	602b      	str	r3, [r5, #0]
 8007c88:	f7fa ff29 	bl	8002ade <_isatty>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	d102      	bne.n	8007c96 <_isatty_r+0x1a>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	b103      	cbz	r3, 8007c96 <_isatty_r+0x1a>
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	2000259c 	.word	0x2000259c

08007c9c <_lseek_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4d07      	ldr	r5, [pc, #28]	; (8007cbc <_lseek_r+0x20>)
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	4608      	mov	r0, r1
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	602a      	str	r2, [r5, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	f7fa ff22 	bl	8002af4 <_lseek>
 8007cb0:	1c43      	adds	r3, r0, #1
 8007cb2:	d102      	bne.n	8007cba <_lseek_r+0x1e>
 8007cb4:	682b      	ldr	r3, [r5, #0]
 8007cb6:	b103      	cbz	r3, 8007cba <_lseek_r+0x1e>
 8007cb8:	6023      	str	r3, [r4, #0]
 8007cba:	bd38      	pop	{r3, r4, r5, pc}
 8007cbc:	2000259c 	.word	0x2000259c

08007cc0 <_read_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4d07      	ldr	r5, [pc, #28]	; (8007ce0 <_read_r+0x20>)
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	4608      	mov	r0, r1
 8007cc8:	4611      	mov	r1, r2
 8007cca:	2200      	movs	r2, #0
 8007ccc:	602a      	str	r2, [r5, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	f7fa feb0 	bl	8002a34 <_read>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	d102      	bne.n	8007cde <_read_r+0x1e>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	b103      	cbz	r3, 8007cde <_read_r+0x1e>
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	2000259c 	.word	0x2000259c

08007ce4 <asin>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	ed2d 8b02 	vpush	{d8}
 8007cea:	ec55 4b10 	vmov	r4, r5, d0
 8007cee:	f000 f837 	bl	8007d60 <__ieee754_asin>
 8007cf2:	4b16      	ldr	r3, [pc, #88]	; (8007d4c <asin+0x68>)
 8007cf4:	eeb0 8a40 	vmov.f32	s16, s0
 8007cf8:	eef0 8a60 	vmov.f32	s17, s1
 8007cfc:	f993 3000 	ldrsb.w	r3, [r3]
 8007d00:	3301      	adds	r3, #1
 8007d02:	d01c      	beq.n	8007d3e <asin+0x5a>
 8007d04:	4622      	mov	r2, r4
 8007d06:	462b      	mov	r3, r5
 8007d08:	4620      	mov	r0, r4
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	f7f8 ff16 	bl	8000b3c <__aeabi_dcmpun>
 8007d10:	b9a8      	cbnz	r0, 8007d3e <asin+0x5a>
 8007d12:	ec45 4b10 	vmov	d0, r4, r5
 8007d16:	f000 fd57 	bl	80087c8 <fabs>
 8007d1a:	4b0d      	ldr	r3, [pc, #52]	; (8007d50 <asin+0x6c>)
 8007d1c:	ec51 0b10 	vmov	r0, r1, d0
 8007d20:	2200      	movs	r2, #0
 8007d22:	f7f8 ff01 	bl	8000b28 <__aeabi_dcmpgt>
 8007d26:	b150      	cbz	r0, 8007d3e <asin+0x5a>
 8007d28:	f7fd f902 	bl	8004f30 <__errno>
 8007d2c:	ecbd 8b02 	vpop	{d8}
 8007d30:	2321      	movs	r3, #33	; 0x21
 8007d32:	6003      	str	r3, [r0, #0]
 8007d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d38:	4806      	ldr	r0, [pc, #24]	; (8007d54 <asin+0x70>)
 8007d3a:	f000 bd51 	b.w	80087e0 <nan>
 8007d3e:	eeb0 0a48 	vmov.f32	s0, s16
 8007d42:	eef0 0a68 	vmov.f32	s1, s17
 8007d46:	ecbd 8b02 	vpop	{d8}
 8007d4a:	bd38      	pop	{r3, r4, r5, pc}
 8007d4c:	200021ec 	.word	0x200021ec
 8007d50:	3ff00000 	.word	0x3ff00000
 8007d54:	08008d20 	.word	0x08008d20

08007d58 <atan2>:
 8007d58:	f000 ba16 	b.w	8008188 <__ieee754_atan2>
 8007d5c:	0000      	movs	r0, r0
	...

08007d60 <__ieee754_asin>:
 8007d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d64:	ed2d 8b04 	vpush	{d8-d9}
 8007d68:	ec55 4b10 	vmov	r4, r5, d0
 8007d6c:	4bcc      	ldr	r3, [pc, #816]	; (80080a0 <__ieee754_asin+0x340>)
 8007d6e:	b083      	sub	sp, #12
 8007d70:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007d74:	4598      	cmp	r8, r3
 8007d76:	9501      	str	r5, [sp, #4]
 8007d78:	dd35      	ble.n	8007de6 <__ieee754_asin+0x86>
 8007d7a:	ee10 3a10 	vmov	r3, s0
 8007d7e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8007d82:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8007d86:	ea58 0303 	orrs.w	r3, r8, r3
 8007d8a:	d117      	bne.n	8007dbc <__ieee754_asin+0x5c>
 8007d8c:	a3aa      	add	r3, pc, #680	; (adr r3, 8008038 <__ieee754_asin+0x2d8>)
 8007d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d92:	ee10 0a10 	vmov	r0, s0
 8007d96:	4629      	mov	r1, r5
 8007d98:	f7f8 fc36 	bl	8000608 <__aeabi_dmul>
 8007d9c:	a3a8      	add	r3, pc, #672	; (adr r3, 8008040 <__ieee754_asin+0x2e0>)
 8007d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da2:	4606      	mov	r6, r0
 8007da4:	460f      	mov	r7, r1
 8007da6:	4620      	mov	r0, r4
 8007da8:	4629      	mov	r1, r5
 8007daa:	f7f8 fc2d 	bl	8000608 <__aeabi_dmul>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	4630      	mov	r0, r6
 8007db4:	4639      	mov	r1, r7
 8007db6:	f7f8 fa71 	bl	800029c <__adddf3>
 8007dba:	e00b      	b.n	8007dd4 <__ieee754_asin+0x74>
 8007dbc:	ee10 2a10 	vmov	r2, s0
 8007dc0:	462b      	mov	r3, r5
 8007dc2:	ee10 0a10 	vmov	r0, s0
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7f8 fa66 	bl	8000298 <__aeabi_dsub>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	f7f8 fd44 	bl	800085c <__aeabi_ddiv>
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	460d      	mov	r5, r1
 8007dd8:	ec45 4b10 	vmov	d0, r4, r5
 8007ddc:	b003      	add	sp, #12
 8007dde:	ecbd 8b04 	vpop	{d8-d9}
 8007de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de6:	4baf      	ldr	r3, [pc, #700]	; (80080a4 <__ieee754_asin+0x344>)
 8007de8:	4598      	cmp	r8, r3
 8007dea:	dc11      	bgt.n	8007e10 <__ieee754_asin+0xb0>
 8007dec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007df0:	f280 80ae 	bge.w	8007f50 <__ieee754_asin+0x1f0>
 8007df4:	a394      	add	r3, pc, #592	; (adr r3, 8008048 <__ieee754_asin+0x2e8>)
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	ee10 0a10 	vmov	r0, s0
 8007dfe:	4629      	mov	r1, r5
 8007e00:	f7f8 fa4c 	bl	800029c <__adddf3>
 8007e04:	4ba8      	ldr	r3, [pc, #672]	; (80080a8 <__ieee754_asin+0x348>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	f7f8 fe8e 	bl	8000b28 <__aeabi_dcmpgt>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d1e3      	bne.n	8007dd8 <__ieee754_asin+0x78>
 8007e10:	ec45 4b10 	vmov	d0, r4, r5
 8007e14:	f000 fcd8 	bl	80087c8 <fabs>
 8007e18:	49a3      	ldr	r1, [pc, #652]	; (80080a8 <__ieee754_asin+0x348>)
 8007e1a:	ec53 2b10 	vmov	r2, r3, d0
 8007e1e:	2000      	movs	r0, #0
 8007e20:	f7f8 fa3a 	bl	8000298 <__aeabi_dsub>
 8007e24:	4ba1      	ldr	r3, [pc, #644]	; (80080ac <__ieee754_asin+0x34c>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	f7f8 fbee 	bl	8000608 <__aeabi_dmul>
 8007e2c:	a388      	add	r3, pc, #544	; (adr r3, 8008050 <__ieee754_asin+0x2f0>)
 8007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e32:	4604      	mov	r4, r0
 8007e34:	460d      	mov	r5, r1
 8007e36:	f7f8 fbe7 	bl	8000608 <__aeabi_dmul>
 8007e3a:	a387      	add	r3, pc, #540	; (adr r3, 8008058 <__ieee754_asin+0x2f8>)
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	f7f8 fa2c 	bl	800029c <__adddf3>
 8007e44:	4622      	mov	r2, r4
 8007e46:	462b      	mov	r3, r5
 8007e48:	f7f8 fbde 	bl	8000608 <__aeabi_dmul>
 8007e4c:	a384      	add	r3, pc, #528	; (adr r3, 8008060 <__ieee754_asin+0x300>)
 8007e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e52:	f7f8 fa21 	bl	8000298 <__aeabi_dsub>
 8007e56:	4622      	mov	r2, r4
 8007e58:	462b      	mov	r3, r5
 8007e5a:	f7f8 fbd5 	bl	8000608 <__aeabi_dmul>
 8007e5e:	a382      	add	r3, pc, #520	; (adr r3, 8008068 <__ieee754_asin+0x308>)
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	f7f8 fa1a 	bl	800029c <__adddf3>
 8007e68:	4622      	mov	r2, r4
 8007e6a:	462b      	mov	r3, r5
 8007e6c:	f7f8 fbcc 	bl	8000608 <__aeabi_dmul>
 8007e70:	a37f      	add	r3, pc, #508	; (adr r3, 8008070 <__ieee754_asin+0x310>)
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f7f8 fa0f 	bl	8000298 <__aeabi_dsub>
 8007e7a:	4622      	mov	r2, r4
 8007e7c:	462b      	mov	r3, r5
 8007e7e:	f7f8 fbc3 	bl	8000608 <__aeabi_dmul>
 8007e82:	a37d      	add	r3, pc, #500	; (adr r3, 8008078 <__ieee754_asin+0x318>)
 8007e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e88:	f7f8 fa08 	bl	800029c <__adddf3>
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	462b      	mov	r3, r5
 8007e90:	f7f8 fbba 	bl	8000608 <__aeabi_dmul>
 8007e94:	a37a      	add	r3, pc, #488	; (adr r3, 8008080 <__ieee754_asin+0x320>)
 8007e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9a:	ec41 0b18 	vmov	d8, r0, r1
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	f7f8 fbb1 	bl	8000608 <__aeabi_dmul>
 8007ea6:	a378      	add	r3, pc, #480	; (adr r3, 8008088 <__ieee754_asin+0x328>)
 8007ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eac:	f7f8 f9f4 	bl	8000298 <__aeabi_dsub>
 8007eb0:	4622      	mov	r2, r4
 8007eb2:	462b      	mov	r3, r5
 8007eb4:	f7f8 fba8 	bl	8000608 <__aeabi_dmul>
 8007eb8:	a375      	add	r3, pc, #468	; (adr r3, 8008090 <__ieee754_asin+0x330>)
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	f7f8 f9ed 	bl	800029c <__adddf3>
 8007ec2:	4622      	mov	r2, r4
 8007ec4:	462b      	mov	r3, r5
 8007ec6:	f7f8 fb9f 	bl	8000608 <__aeabi_dmul>
 8007eca:	a373      	add	r3, pc, #460	; (adr r3, 8008098 <__ieee754_asin+0x338>)
 8007ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed0:	f7f8 f9e2 	bl	8000298 <__aeabi_dsub>
 8007ed4:	4622      	mov	r2, r4
 8007ed6:	462b      	mov	r3, r5
 8007ed8:	f7f8 fb96 	bl	8000608 <__aeabi_dmul>
 8007edc:	4b72      	ldr	r3, [pc, #456]	; (80080a8 <__ieee754_asin+0x348>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f7f8 f9dc 	bl	800029c <__adddf3>
 8007ee4:	ec45 4b10 	vmov	d0, r4, r5
 8007ee8:	4606      	mov	r6, r0
 8007eea:	460f      	mov	r7, r1
 8007eec:	f000 fa16 	bl	800831c <__ieee754_sqrt>
 8007ef0:	4b6f      	ldr	r3, [pc, #444]	; (80080b0 <__ieee754_asin+0x350>)
 8007ef2:	4598      	cmp	r8, r3
 8007ef4:	ec5b ab10 	vmov	sl, fp, d0
 8007ef8:	f340 80dc 	ble.w	80080b4 <__ieee754_asin+0x354>
 8007efc:	4632      	mov	r2, r6
 8007efe:	463b      	mov	r3, r7
 8007f00:	ec51 0b18 	vmov	r0, r1, d8
 8007f04:	f7f8 fcaa 	bl	800085c <__aeabi_ddiv>
 8007f08:	4652      	mov	r2, sl
 8007f0a:	465b      	mov	r3, fp
 8007f0c:	f7f8 fb7c 	bl	8000608 <__aeabi_dmul>
 8007f10:	4652      	mov	r2, sl
 8007f12:	465b      	mov	r3, fp
 8007f14:	f7f8 f9c2 	bl	800029c <__adddf3>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	f7f8 f9be 	bl	800029c <__adddf3>
 8007f20:	a347      	add	r3, pc, #284	; (adr r3, 8008040 <__ieee754_asin+0x2e0>)
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	f7f8 f9b7 	bl	8000298 <__aeabi_dsub>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	a142      	add	r1, pc, #264	; (adr r1, 8008038 <__ieee754_asin+0x2d8>)
 8007f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f34:	f7f8 f9b0 	bl	8000298 <__aeabi_dsub>
 8007f38:	9b01      	ldr	r3, [sp, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	bfdc      	itt	le
 8007f3e:	4602      	movle	r2, r0
 8007f40:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8007f44:	4604      	mov	r4, r0
 8007f46:	460d      	mov	r5, r1
 8007f48:	bfdc      	itt	le
 8007f4a:	4614      	movle	r4, r2
 8007f4c:	461d      	movle	r5, r3
 8007f4e:	e743      	b.n	8007dd8 <__ieee754_asin+0x78>
 8007f50:	ee10 2a10 	vmov	r2, s0
 8007f54:	ee10 0a10 	vmov	r0, s0
 8007f58:	462b      	mov	r3, r5
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	f7f8 fb54 	bl	8000608 <__aeabi_dmul>
 8007f60:	a33b      	add	r3, pc, #236	; (adr r3, 8008050 <__ieee754_asin+0x2f0>)
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	4606      	mov	r6, r0
 8007f68:	460f      	mov	r7, r1
 8007f6a:	f7f8 fb4d 	bl	8000608 <__aeabi_dmul>
 8007f6e:	a33a      	add	r3, pc, #232	; (adr r3, 8008058 <__ieee754_asin+0x2f8>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	f7f8 f992 	bl	800029c <__adddf3>
 8007f78:	4632      	mov	r2, r6
 8007f7a:	463b      	mov	r3, r7
 8007f7c:	f7f8 fb44 	bl	8000608 <__aeabi_dmul>
 8007f80:	a337      	add	r3, pc, #220	; (adr r3, 8008060 <__ieee754_asin+0x300>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f7f8 f987 	bl	8000298 <__aeabi_dsub>
 8007f8a:	4632      	mov	r2, r6
 8007f8c:	463b      	mov	r3, r7
 8007f8e:	f7f8 fb3b 	bl	8000608 <__aeabi_dmul>
 8007f92:	a335      	add	r3, pc, #212	; (adr r3, 8008068 <__ieee754_asin+0x308>)
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f7f8 f980 	bl	800029c <__adddf3>
 8007f9c:	4632      	mov	r2, r6
 8007f9e:	463b      	mov	r3, r7
 8007fa0:	f7f8 fb32 	bl	8000608 <__aeabi_dmul>
 8007fa4:	a332      	add	r3, pc, #200	; (adr r3, 8008070 <__ieee754_asin+0x310>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f7f8 f975 	bl	8000298 <__aeabi_dsub>
 8007fae:	4632      	mov	r2, r6
 8007fb0:	463b      	mov	r3, r7
 8007fb2:	f7f8 fb29 	bl	8000608 <__aeabi_dmul>
 8007fb6:	a330      	add	r3, pc, #192	; (adr r3, 8008078 <__ieee754_asin+0x318>)
 8007fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbc:	f7f8 f96e 	bl	800029c <__adddf3>
 8007fc0:	4632      	mov	r2, r6
 8007fc2:	463b      	mov	r3, r7
 8007fc4:	f7f8 fb20 	bl	8000608 <__aeabi_dmul>
 8007fc8:	a32d      	add	r3, pc, #180	; (adr r3, 8008080 <__ieee754_asin+0x320>)
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	4680      	mov	r8, r0
 8007fd0:	4689      	mov	r9, r1
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	4639      	mov	r1, r7
 8007fd6:	f7f8 fb17 	bl	8000608 <__aeabi_dmul>
 8007fda:	a32b      	add	r3, pc, #172	; (adr r3, 8008088 <__ieee754_asin+0x328>)
 8007fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe0:	f7f8 f95a 	bl	8000298 <__aeabi_dsub>
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	463b      	mov	r3, r7
 8007fe8:	f7f8 fb0e 	bl	8000608 <__aeabi_dmul>
 8007fec:	a328      	add	r3, pc, #160	; (adr r3, 8008090 <__ieee754_asin+0x330>)
 8007fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff2:	f7f8 f953 	bl	800029c <__adddf3>
 8007ff6:	4632      	mov	r2, r6
 8007ff8:	463b      	mov	r3, r7
 8007ffa:	f7f8 fb05 	bl	8000608 <__aeabi_dmul>
 8007ffe:	a326      	add	r3, pc, #152	; (adr r3, 8008098 <__ieee754_asin+0x338>)
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	f7f8 f948 	bl	8000298 <__aeabi_dsub>
 8008008:	4632      	mov	r2, r6
 800800a:	463b      	mov	r3, r7
 800800c:	f7f8 fafc 	bl	8000608 <__aeabi_dmul>
 8008010:	4b25      	ldr	r3, [pc, #148]	; (80080a8 <__ieee754_asin+0x348>)
 8008012:	2200      	movs	r2, #0
 8008014:	f7f8 f942 	bl	800029c <__adddf3>
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	4640      	mov	r0, r8
 800801e:	4649      	mov	r1, r9
 8008020:	f7f8 fc1c 	bl	800085c <__aeabi_ddiv>
 8008024:	4622      	mov	r2, r4
 8008026:	462b      	mov	r3, r5
 8008028:	f7f8 faee 	bl	8000608 <__aeabi_dmul>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	4620      	mov	r0, r4
 8008032:	4629      	mov	r1, r5
 8008034:	e6bf      	b.n	8007db6 <__ieee754_asin+0x56>
 8008036:	bf00      	nop
 8008038:	54442d18 	.word	0x54442d18
 800803c:	3ff921fb 	.word	0x3ff921fb
 8008040:	33145c07 	.word	0x33145c07
 8008044:	3c91a626 	.word	0x3c91a626
 8008048:	8800759c 	.word	0x8800759c
 800804c:	7e37e43c 	.word	0x7e37e43c
 8008050:	0dfdf709 	.word	0x0dfdf709
 8008054:	3f023de1 	.word	0x3f023de1
 8008058:	7501b288 	.word	0x7501b288
 800805c:	3f49efe0 	.word	0x3f49efe0
 8008060:	b5688f3b 	.word	0xb5688f3b
 8008064:	3fa48228 	.word	0x3fa48228
 8008068:	0e884455 	.word	0x0e884455
 800806c:	3fc9c155 	.word	0x3fc9c155
 8008070:	03eb6f7d 	.word	0x03eb6f7d
 8008074:	3fd4d612 	.word	0x3fd4d612
 8008078:	55555555 	.word	0x55555555
 800807c:	3fc55555 	.word	0x3fc55555
 8008080:	b12e9282 	.word	0xb12e9282
 8008084:	3fb3b8c5 	.word	0x3fb3b8c5
 8008088:	1b8d0159 	.word	0x1b8d0159
 800808c:	3fe6066c 	.word	0x3fe6066c
 8008090:	9c598ac8 	.word	0x9c598ac8
 8008094:	40002ae5 	.word	0x40002ae5
 8008098:	1c8a2d4b 	.word	0x1c8a2d4b
 800809c:	40033a27 	.word	0x40033a27
 80080a0:	3fefffff 	.word	0x3fefffff
 80080a4:	3fdfffff 	.word	0x3fdfffff
 80080a8:	3ff00000 	.word	0x3ff00000
 80080ac:	3fe00000 	.word	0x3fe00000
 80080b0:	3fef3332 	.word	0x3fef3332
 80080b4:	ee10 2a10 	vmov	r2, s0
 80080b8:	ee10 0a10 	vmov	r0, s0
 80080bc:	465b      	mov	r3, fp
 80080be:	4659      	mov	r1, fp
 80080c0:	f7f8 f8ec 	bl	800029c <__adddf3>
 80080c4:	4632      	mov	r2, r6
 80080c6:	463b      	mov	r3, r7
 80080c8:	ec41 0b19 	vmov	d9, r0, r1
 80080cc:	ec51 0b18 	vmov	r0, r1, d8
 80080d0:	f7f8 fbc4 	bl	800085c <__aeabi_ddiv>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	ec51 0b19 	vmov	r0, r1, d9
 80080dc:	f7f8 fa94 	bl	8000608 <__aeabi_dmul>
 80080e0:	f04f 0800 	mov.w	r8, #0
 80080e4:	4606      	mov	r6, r0
 80080e6:	460f      	mov	r7, r1
 80080e8:	4642      	mov	r2, r8
 80080ea:	465b      	mov	r3, fp
 80080ec:	4640      	mov	r0, r8
 80080ee:	4659      	mov	r1, fp
 80080f0:	f7f8 fa8a 	bl	8000608 <__aeabi_dmul>
 80080f4:	4602      	mov	r2, r0
 80080f6:	460b      	mov	r3, r1
 80080f8:	4620      	mov	r0, r4
 80080fa:	4629      	mov	r1, r5
 80080fc:	f7f8 f8cc 	bl	8000298 <__aeabi_dsub>
 8008100:	4642      	mov	r2, r8
 8008102:	4604      	mov	r4, r0
 8008104:	460d      	mov	r5, r1
 8008106:	465b      	mov	r3, fp
 8008108:	4650      	mov	r0, sl
 800810a:	4659      	mov	r1, fp
 800810c:	f7f8 f8c6 	bl	800029c <__adddf3>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	4620      	mov	r0, r4
 8008116:	4629      	mov	r1, r5
 8008118:	f7f8 fba0 	bl	800085c <__aeabi_ddiv>
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	f7f8 f8bc 	bl	800029c <__adddf3>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	a113      	add	r1, pc, #76	; (adr r1, 8008178 <__ieee754_asin+0x418>)
 800812a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800812e:	f7f8 f8b3 	bl	8000298 <__aeabi_dsub>
 8008132:	4602      	mov	r2, r0
 8008134:	460b      	mov	r3, r1
 8008136:	4630      	mov	r0, r6
 8008138:	4639      	mov	r1, r7
 800813a:	f7f8 f8ad 	bl	8000298 <__aeabi_dsub>
 800813e:	4642      	mov	r2, r8
 8008140:	4604      	mov	r4, r0
 8008142:	460d      	mov	r5, r1
 8008144:	465b      	mov	r3, fp
 8008146:	4640      	mov	r0, r8
 8008148:	4659      	mov	r1, fp
 800814a:	f7f8 f8a7 	bl	800029c <__adddf3>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	a10b      	add	r1, pc, #44	; (adr r1, 8008180 <__ieee754_asin+0x420>)
 8008154:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008158:	f7f8 f89e 	bl	8000298 <__aeabi_dsub>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	4620      	mov	r0, r4
 8008162:	4629      	mov	r1, r5
 8008164:	f7f8 f898 	bl	8000298 <__aeabi_dsub>
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
 800816c:	a104      	add	r1, pc, #16	; (adr r1, 8008180 <__ieee754_asin+0x420>)
 800816e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008172:	e6df      	b.n	8007f34 <__ieee754_asin+0x1d4>
 8008174:	f3af 8000 	nop.w
 8008178:	33145c07 	.word	0x33145c07
 800817c:	3c91a626 	.word	0x3c91a626
 8008180:	54442d18 	.word	0x54442d18
 8008184:	3fe921fb 	.word	0x3fe921fb

08008188 <__ieee754_atan2>:
 8008188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800818c:	ec57 6b11 	vmov	r6, r7, d1
 8008190:	4273      	negs	r3, r6
 8008192:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008318 <__ieee754_atan2+0x190>
 8008196:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800819a:	4333      	orrs	r3, r6
 800819c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80081a0:	4573      	cmp	r3, lr
 80081a2:	ec51 0b10 	vmov	r0, r1, d0
 80081a6:	ee11 8a10 	vmov	r8, s2
 80081aa:	d80a      	bhi.n	80081c2 <__ieee754_atan2+0x3a>
 80081ac:	4244      	negs	r4, r0
 80081ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081b2:	4304      	orrs	r4, r0
 80081b4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80081b8:	4574      	cmp	r4, lr
 80081ba:	ee10 9a10 	vmov	r9, s0
 80081be:	468c      	mov	ip, r1
 80081c0:	d907      	bls.n	80081d2 <__ieee754_atan2+0x4a>
 80081c2:	4632      	mov	r2, r6
 80081c4:	463b      	mov	r3, r7
 80081c6:	f7f8 f869 	bl	800029c <__adddf3>
 80081ca:	ec41 0b10 	vmov	d0, r0, r1
 80081ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081d2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80081d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80081da:	4334      	orrs	r4, r6
 80081dc:	d103      	bne.n	80081e6 <__ieee754_atan2+0x5e>
 80081de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e2:	f000 b951 	b.w	8008488 <atan>
 80081e6:	17bc      	asrs	r4, r7, #30
 80081e8:	f004 0402 	and.w	r4, r4, #2
 80081ec:	ea53 0909 	orrs.w	r9, r3, r9
 80081f0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80081f4:	d107      	bne.n	8008206 <__ieee754_atan2+0x7e>
 80081f6:	2c02      	cmp	r4, #2
 80081f8:	d060      	beq.n	80082bc <__ieee754_atan2+0x134>
 80081fa:	2c03      	cmp	r4, #3
 80081fc:	d1e5      	bne.n	80081ca <__ieee754_atan2+0x42>
 80081fe:	a142      	add	r1, pc, #264	; (adr r1, 8008308 <__ieee754_atan2+0x180>)
 8008200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008204:	e7e1      	b.n	80081ca <__ieee754_atan2+0x42>
 8008206:	ea52 0808 	orrs.w	r8, r2, r8
 800820a:	d106      	bne.n	800821a <__ieee754_atan2+0x92>
 800820c:	f1bc 0f00 	cmp.w	ip, #0
 8008210:	da5f      	bge.n	80082d2 <__ieee754_atan2+0x14a>
 8008212:	a13f      	add	r1, pc, #252	; (adr r1, 8008310 <__ieee754_atan2+0x188>)
 8008214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008218:	e7d7      	b.n	80081ca <__ieee754_atan2+0x42>
 800821a:	4572      	cmp	r2, lr
 800821c:	d10f      	bne.n	800823e <__ieee754_atan2+0xb6>
 800821e:	4293      	cmp	r3, r2
 8008220:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008224:	d107      	bne.n	8008236 <__ieee754_atan2+0xae>
 8008226:	2c02      	cmp	r4, #2
 8008228:	d84c      	bhi.n	80082c4 <__ieee754_atan2+0x13c>
 800822a:	4b35      	ldr	r3, [pc, #212]	; (8008300 <__ieee754_atan2+0x178>)
 800822c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008230:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008234:	e7c9      	b.n	80081ca <__ieee754_atan2+0x42>
 8008236:	2c02      	cmp	r4, #2
 8008238:	d848      	bhi.n	80082cc <__ieee754_atan2+0x144>
 800823a:	4b32      	ldr	r3, [pc, #200]	; (8008304 <__ieee754_atan2+0x17c>)
 800823c:	e7f6      	b.n	800822c <__ieee754_atan2+0xa4>
 800823e:	4573      	cmp	r3, lr
 8008240:	d0e4      	beq.n	800820c <__ieee754_atan2+0x84>
 8008242:	1a9b      	subs	r3, r3, r2
 8008244:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008248:	ea4f 5223 	mov.w	r2, r3, asr #20
 800824c:	da1e      	bge.n	800828c <__ieee754_atan2+0x104>
 800824e:	2f00      	cmp	r7, #0
 8008250:	da01      	bge.n	8008256 <__ieee754_atan2+0xce>
 8008252:	323c      	adds	r2, #60	; 0x3c
 8008254:	db1e      	blt.n	8008294 <__ieee754_atan2+0x10c>
 8008256:	4632      	mov	r2, r6
 8008258:	463b      	mov	r3, r7
 800825a:	f7f8 faff 	bl	800085c <__aeabi_ddiv>
 800825e:	ec41 0b10 	vmov	d0, r0, r1
 8008262:	f000 fab1 	bl	80087c8 <fabs>
 8008266:	f000 f90f 	bl	8008488 <atan>
 800826a:	ec51 0b10 	vmov	r0, r1, d0
 800826e:	2c01      	cmp	r4, #1
 8008270:	d013      	beq.n	800829a <__ieee754_atan2+0x112>
 8008272:	2c02      	cmp	r4, #2
 8008274:	d015      	beq.n	80082a2 <__ieee754_atan2+0x11a>
 8008276:	2c00      	cmp	r4, #0
 8008278:	d0a7      	beq.n	80081ca <__ieee754_atan2+0x42>
 800827a:	a319      	add	r3, pc, #100	; (adr r3, 80082e0 <__ieee754_atan2+0x158>)
 800827c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008280:	f7f8 f80a 	bl	8000298 <__aeabi_dsub>
 8008284:	a318      	add	r3, pc, #96	; (adr r3, 80082e8 <__ieee754_atan2+0x160>)
 8008286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828a:	e014      	b.n	80082b6 <__ieee754_atan2+0x12e>
 800828c:	a118      	add	r1, pc, #96	; (adr r1, 80082f0 <__ieee754_atan2+0x168>)
 800828e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008292:	e7ec      	b.n	800826e <__ieee754_atan2+0xe6>
 8008294:	2000      	movs	r0, #0
 8008296:	2100      	movs	r1, #0
 8008298:	e7e9      	b.n	800826e <__ieee754_atan2+0xe6>
 800829a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800829e:	4619      	mov	r1, r3
 80082a0:	e793      	b.n	80081ca <__ieee754_atan2+0x42>
 80082a2:	a30f      	add	r3, pc, #60	; (adr r3, 80082e0 <__ieee754_atan2+0x158>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f7 fff6 	bl	8000298 <__aeabi_dsub>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	a10d      	add	r1, pc, #52	; (adr r1, 80082e8 <__ieee754_atan2+0x160>)
 80082b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082b6:	f7f7 ffef 	bl	8000298 <__aeabi_dsub>
 80082ba:	e786      	b.n	80081ca <__ieee754_atan2+0x42>
 80082bc:	a10a      	add	r1, pc, #40	; (adr r1, 80082e8 <__ieee754_atan2+0x160>)
 80082be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082c2:	e782      	b.n	80081ca <__ieee754_atan2+0x42>
 80082c4:	a10c      	add	r1, pc, #48	; (adr r1, 80082f8 <__ieee754_atan2+0x170>)
 80082c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082ca:	e77e      	b.n	80081ca <__ieee754_atan2+0x42>
 80082cc:	2000      	movs	r0, #0
 80082ce:	2100      	movs	r1, #0
 80082d0:	e77b      	b.n	80081ca <__ieee754_atan2+0x42>
 80082d2:	a107      	add	r1, pc, #28	; (adr r1, 80082f0 <__ieee754_atan2+0x168>)
 80082d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082d8:	e777      	b.n	80081ca <__ieee754_atan2+0x42>
 80082da:	bf00      	nop
 80082dc:	f3af 8000 	nop.w
 80082e0:	33145c07 	.word	0x33145c07
 80082e4:	3ca1a626 	.word	0x3ca1a626
 80082e8:	54442d18 	.word	0x54442d18
 80082ec:	400921fb 	.word	0x400921fb
 80082f0:	54442d18 	.word	0x54442d18
 80082f4:	3ff921fb 	.word	0x3ff921fb
 80082f8:	54442d18 	.word	0x54442d18
 80082fc:	3fe921fb 	.word	0x3fe921fb
 8008300:	08008e90 	.word	0x08008e90
 8008304:	08008ea8 	.word	0x08008ea8
 8008308:	54442d18 	.word	0x54442d18
 800830c:	c00921fb 	.word	0xc00921fb
 8008310:	54442d18 	.word	0x54442d18
 8008314:	bff921fb 	.word	0xbff921fb
 8008318:	7ff00000 	.word	0x7ff00000

0800831c <__ieee754_sqrt>:
 800831c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008320:	ec55 4b10 	vmov	r4, r5, d0
 8008324:	4e56      	ldr	r6, [pc, #344]	; (8008480 <__ieee754_sqrt+0x164>)
 8008326:	43ae      	bics	r6, r5
 8008328:	ee10 0a10 	vmov	r0, s0
 800832c:	ee10 3a10 	vmov	r3, s0
 8008330:	4629      	mov	r1, r5
 8008332:	462a      	mov	r2, r5
 8008334:	d110      	bne.n	8008358 <__ieee754_sqrt+0x3c>
 8008336:	ee10 2a10 	vmov	r2, s0
 800833a:	462b      	mov	r3, r5
 800833c:	f7f8 f964 	bl	8000608 <__aeabi_dmul>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	4620      	mov	r0, r4
 8008346:	4629      	mov	r1, r5
 8008348:	f7f7 ffa8 	bl	800029c <__adddf3>
 800834c:	4604      	mov	r4, r0
 800834e:	460d      	mov	r5, r1
 8008350:	ec45 4b10 	vmov	d0, r4, r5
 8008354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008358:	2d00      	cmp	r5, #0
 800835a:	dc10      	bgt.n	800837e <__ieee754_sqrt+0x62>
 800835c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008360:	4330      	orrs	r0, r6
 8008362:	d0f5      	beq.n	8008350 <__ieee754_sqrt+0x34>
 8008364:	b15d      	cbz	r5, 800837e <__ieee754_sqrt+0x62>
 8008366:	ee10 2a10 	vmov	r2, s0
 800836a:	462b      	mov	r3, r5
 800836c:	ee10 0a10 	vmov	r0, s0
 8008370:	f7f7 ff92 	bl	8000298 <__aeabi_dsub>
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	f7f8 fa70 	bl	800085c <__aeabi_ddiv>
 800837c:	e7e6      	b.n	800834c <__ieee754_sqrt+0x30>
 800837e:	1509      	asrs	r1, r1, #20
 8008380:	d076      	beq.n	8008470 <__ieee754_sqrt+0x154>
 8008382:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008386:	07ce      	lsls	r6, r1, #31
 8008388:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800838c:	bf5e      	ittt	pl
 800838e:	0fda      	lsrpl	r2, r3, #31
 8008390:	005b      	lslpl	r3, r3, #1
 8008392:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8008396:	0fda      	lsrs	r2, r3, #31
 8008398:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800839c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80083a0:	2000      	movs	r0, #0
 80083a2:	106d      	asrs	r5, r5, #1
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	f04f 0e16 	mov.w	lr, #22
 80083aa:	4684      	mov	ip, r0
 80083ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083b0:	eb0c 0401 	add.w	r4, ip, r1
 80083b4:	4294      	cmp	r4, r2
 80083b6:	bfde      	ittt	le
 80083b8:	1b12      	suble	r2, r2, r4
 80083ba:	eb04 0c01 	addle.w	ip, r4, r1
 80083be:	1840      	addle	r0, r0, r1
 80083c0:	0052      	lsls	r2, r2, #1
 80083c2:	f1be 0e01 	subs.w	lr, lr, #1
 80083c6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80083ca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80083ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80083d2:	d1ed      	bne.n	80083b0 <__ieee754_sqrt+0x94>
 80083d4:	4671      	mov	r1, lr
 80083d6:	2720      	movs	r7, #32
 80083d8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80083dc:	4562      	cmp	r2, ip
 80083de:	eb04 060e 	add.w	r6, r4, lr
 80083e2:	dc02      	bgt.n	80083ea <__ieee754_sqrt+0xce>
 80083e4:	d113      	bne.n	800840e <__ieee754_sqrt+0xf2>
 80083e6:	429e      	cmp	r6, r3
 80083e8:	d811      	bhi.n	800840e <__ieee754_sqrt+0xf2>
 80083ea:	2e00      	cmp	r6, #0
 80083ec:	eb06 0e04 	add.w	lr, r6, r4
 80083f0:	da43      	bge.n	800847a <__ieee754_sqrt+0x15e>
 80083f2:	f1be 0f00 	cmp.w	lr, #0
 80083f6:	db40      	blt.n	800847a <__ieee754_sqrt+0x15e>
 80083f8:	f10c 0801 	add.w	r8, ip, #1
 80083fc:	eba2 020c 	sub.w	r2, r2, ip
 8008400:	429e      	cmp	r6, r3
 8008402:	bf88      	it	hi
 8008404:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8008408:	1b9b      	subs	r3, r3, r6
 800840a:	4421      	add	r1, r4
 800840c:	46c4      	mov	ip, r8
 800840e:	0052      	lsls	r2, r2, #1
 8008410:	3f01      	subs	r7, #1
 8008412:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008416:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800841a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800841e:	d1dd      	bne.n	80083dc <__ieee754_sqrt+0xc0>
 8008420:	4313      	orrs	r3, r2
 8008422:	d006      	beq.n	8008432 <__ieee754_sqrt+0x116>
 8008424:	1c4c      	adds	r4, r1, #1
 8008426:	bf13      	iteet	ne
 8008428:	3101      	addne	r1, #1
 800842a:	3001      	addeq	r0, #1
 800842c:	4639      	moveq	r1, r7
 800842e:	f021 0101 	bicne.w	r1, r1, #1
 8008432:	1043      	asrs	r3, r0, #1
 8008434:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008438:	0849      	lsrs	r1, r1, #1
 800843a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800843e:	07c2      	lsls	r2, r0, #31
 8008440:	bf48      	it	mi
 8008442:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008446:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800844a:	460c      	mov	r4, r1
 800844c:	463d      	mov	r5, r7
 800844e:	e77f      	b.n	8008350 <__ieee754_sqrt+0x34>
 8008450:	0ada      	lsrs	r2, r3, #11
 8008452:	3815      	subs	r0, #21
 8008454:	055b      	lsls	r3, r3, #21
 8008456:	2a00      	cmp	r2, #0
 8008458:	d0fa      	beq.n	8008450 <__ieee754_sqrt+0x134>
 800845a:	02d7      	lsls	r7, r2, #11
 800845c:	d50a      	bpl.n	8008474 <__ieee754_sqrt+0x158>
 800845e:	f1c1 0420 	rsb	r4, r1, #32
 8008462:	fa23 f404 	lsr.w	r4, r3, r4
 8008466:	1e4d      	subs	r5, r1, #1
 8008468:	408b      	lsls	r3, r1
 800846a:	4322      	orrs	r2, r4
 800846c:	1b41      	subs	r1, r0, r5
 800846e:	e788      	b.n	8008382 <__ieee754_sqrt+0x66>
 8008470:	4608      	mov	r0, r1
 8008472:	e7f0      	b.n	8008456 <__ieee754_sqrt+0x13a>
 8008474:	0052      	lsls	r2, r2, #1
 8008476:	3101      	adds	r1, #1
 8008478:	e7ef      	b.n	800845a <__ieee754_sqrt+0x13e>
 800847a:	46e0      	mov	r8, ip
 800847c:	e7be      	b.n	80083fc <__ieee754_sqrt+0xe0>
 800847e:	bf00      	nop
 8008480:	7ff00000 	.word	0x7ff00000
 8008484:	00000000 	.word	0x00000000

08008488 <atan>:
 8008488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848c:	ec55 4b10 	vmov	r4, r5, d0
 8008490:	4bc3      	ldr	r3, [pc, #780]	; (80087a0 <atan+0x318>)
 8008492:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008496:	429e      	cmp	r6, r3
 8008498:	46ab      	mov	fp, r5
 800849a:	dd18      	ble.n	80084ce <atan+0x46>
 800849c:	4bc1      	ldr	r3, [pc, #772]	; (80087a4 <atan+0x31c>)
 800849e:	429e      	cmp	r6, r3
 80084a0:	dc01      	bgt.n	80084a6 <atan+0x1e>
 80084a2:	d109      	bne.n	80084b8 <atan+0x30>
 80084a4:	b144      	cbz	r4, 80084b8 <atan+0x30>
 80084a6:	4622      	mov	r2, r4
 80084a8:	462b      	mov	r3, r5
 80084aa:	4620      	mov	r0, r4
 80084ac:	4629      	mov	r1, r5
 80084ae:	f7f7 fef5 	bl	800029c <__adddf3>
 80084b2:	4604      	mov	r4, r0
 80084b4:	460d      	mov	r5, r1
 80084b6:	e006      	b.n	80084c6 <atan+0x3e>
 80084b8:	f1bb 0f00 	cmp.w	fp, #0
 80084bc:	f300 8131 	bgt.w	8008722 <atan+0x29a>
 80084c0:	a59b      	add	r5, pc, #620	; (adr r5, 8008730 <atan+0x2a8>)
 80084c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80084c6:	ec45 4b10 	vmov	d0, r4, r5
 80084ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ce:	4bb6      	ldr	r3, [pc, #728]	; (80087a8 <atan+0x320>)
 80084d0:	429e      	cmp	r6, r3
 80084d2:	dc14      	bgt.n	80084fe <atan+0x76>
 80084d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80084d8:	429e      	cmp	r6, r3
 80084da:	dc0d      	bgt.n	80084f8 <atan+0x70>
 80084dc:	a396      	add	r3, pc, #600	; (adr r3, 8008738 <atan+0x2b0>)
 80084de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e2:	ee10 0a10 	vmov	r0, s0
 80084e6:	4629      	mov	r1, r5
 80084e8:	f7f7 fed8 	bl	800029c <__adddf3>
 80084ec:	4baf      	ldr	r3, [pc, #700]	; (80087ac <atan+0x324>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	f7f8 fb1a 	bl	8000b28 <__aeabi_dcmpgt>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d1e6      	bne.n	80084c6 <atan+0x3e>
 80084f8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80084fc:	e02b      	b.n	8008556 <atan+0xce>
 80084fe:	f000 f963 	bl	80087c8 <fabs>
 8008502:	4bab      	ldr	r3, [pc, #684]	; (80087b0 <atan+0x328>)
 8008504:	429e      	cmp	r6, r3
 8008506:	ec55 4b10 	vmov	r4, r5, d0
 800850a:	f300 80bf 	bgt.w	800868c <atan+0x204>
 800850e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008512:	429e      	cmp	r6, r3
 8008514:	f300 80a0 	bgt.w	8008658 <atan+0x1d0>
 8008518:	ee10 2a10 	vmov	r2, s0
 800851c:	ee10 0a10 	vmov	r0, s0
 8008520:	462b      	mov	r3, r5
 8008522:	4629      	mov	r1, r5
 8008524:	f7f7 feba 	bl	800029c <__adddf3>
 8008528:	4ba0      	ldr	r3, [pc, #640]	; (80087ac <atan+0x324>)
 800852a:	2200      	movs	r2, #0
 800852c:	f7f7 feb4 	bl	8000298 <__aeabi_dsub>
 8008530:	2200      	movs	r2, #0
 8008532:	4606      	mov	r6, r0
 8008534:	460f      	mov	r7, r1
 8008536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800853a:	4620      	mov	r0, r4
 800853c:	4629      	mov	r1, r5
 800853e:	f7f7 fead 	bl	800029c <__adddf3>
 8008542:	4602      	mov	r2, r0
 8008544:	460b      	mov	r3, r1
 8008546:	4630      	mov	r0, r6
 8008548:	4639      	mov	r1, r7
 800854a:	f7f8 f987 	bl	800085c <__aeabi_ddiv>
 800854e:	f04f 0a00 	mov.w	sl, #0
 8008552:	4604      	mov	r4, r0
 8008554:	460d      	mov	r5, r1
 8008556:	4622      	mov	r2, r4
 8008558:	462b      	mov	r3, r5
 800855a:	4620      	mov	r0, r4
 800855c:	4629      	mov	r1, r5
 800855e:	f7f8 f853 	bl	8000608 <__aeabi_dmul>
 8008562:	4602      	mov	r2, r0
 8008564:	460b      	mov	r3, r1
 8008566:	4680      	mov	r8, r0
 8008568:	4689      	mov	r9, r1
 800856a:	f7f8 f84d 	bl	8000608 <__aeabi_dmul>
 800856e:	a374      	add	r3, pc, #464	; (adr r3, 8008740 <atan+0x2b8>)
 8008570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008574:	4606      	mov	r6, r0
 8008576:	460f      	mov	r7, r1
 8008578:	f7f8 f846 	bl	8000608 <__aeabi_dmul>
 800857c:	a372      	add	r3, pc, #456	; (adr r3, 8008748 <atan+0x2c0>)
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	f7f7 fe8b 	bl	800029c <__adddf3>
 8008586:	4632      	mov	r2, r6
 8008588:	463b      	mov	r3, r7
 800858a:	f7f8 f83d 	bl	8000608 <__aeabi_dmul>
 800858e:	a370      	add	r3, pc, #448	; (adr r3, 8008750 <atan+0x2c8>)
 8008590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008594:	f7f7 fe82 	bl	800029c <__adddf3>
 8008598:	4632      	mov	r2, r6
 800859a:	463b      	mov	r3, r7
 800859c:	f7f8 f834 	bl	8000608 <__aeabi_dmul>
 80085a0:	a36d      	add	r3, pc, #436	; (adr r3, 8008758 <atan+0x2d0>)
 80085a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a6:	f7f7 fe79 	bl	800029c <__adddf3>
 80085aa:	4632      	mov	r2, r6
 80085ac:	463b      	mov	r3, r7
 80085ae:	f7f8 f82b 	bl	8000608 <__aeabi_dmul>
 80085b2:	a36b      	add	r3, pc, #428	; (adr r3, 8008760 <atan+0x2d8>)
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	f7f7 fe70 	bl	800029c <__adddf3>
 80085bc:	4632      	mov	r2, r6
 80085be:	463b      	mov	r3, r7
 80085c0:	f7f8 f822 	bl	8000608 <__aeabi_dmul>
 80085c4:	a368      	add	r3, pc, #416	; (adr r3, 8008768 <atan+0x2e0>)
 80085c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ca:	f7f7 fe67 	bl	800029c <__adddf3>
 80085ce:	4642      	mov	r2, r8
 80085d0:	464b      	mov	r3, r9
 80085d2:	f7f8 f819 	bl	8000608 <__aeabi_dmul>
 80085d6:	a366      	add	r3, pc, #408	; (adr r3, 8008770 <atan+0x2e8>)
 80085d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085dc:	4680      	mov	r8, r0
 80085de:	4689      	mov	r9, r1
 80085e0:	4630      	mov	r0, r6
 80085e2:	4639      	mov	r1, r7
 80085e4:	f7f8 f810 	bl	8000608 <__aeabi_dmul>
 80085e8:	a363      	add	r3, pc, #396	; (adr r3, 8008778 <atan+0x2f0>)
 80085ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ee:	f7f7 fe53 	bl	8000298 <__aeabi_dsub>
 80085f2:	4632      	mov	r2, r6
 80085f4:	463b      	mov	r3, r7
 80085f6:	f7f8 f807 	bl	8000608 <__aeabi_dmul>
 80085fa:	a361      	add	r3, pc, #388	; (adr r3, 8008780 <atan+0x2f8>)
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	f7f7 fe4a 	bl	8000298 <__aeabi_dsub>
 8008604:	4632      	mov	r2, r6
 8008606:	463b      	mov	r3, r7
 8008608:	f7f7 fffe 	bl	8000608 <__aeabi_dmul>
 800860c:	a35e      	add	r3, pc, #376	; (adr r3, 8008788 <atan+0x300>)
 800860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008612:	f7f7 fe41 	bl	8000298 <__aeabi_dsub>
 8008616:	4632      	mov	r2, r6
 8008618:	463b      	mov	r3, r7
 800861a:	f7f7 fff5 	bl	8000608 <__aeabi_dmul>
 800861e:	a35c      	add	r3, pc, #368	; (adr r3, 8008790 <atan+0x308>)
 8008620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008624:	f7f7 fe38 	bl	8000298 <__aeabi_dsub>
 8008628:	4632      	mov	r2, r6
 800862a:	463b      	mov	r3, r7
 800862c:	f7f7 ffec 	bl	8000608 <__aeabi_dmul>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	4640      	mov	r0, r8
 8008636:	4649      	mov	r1, r9
 8008638:	f7f7 fe30 	bl	800029c <__adddf3>
 800863c:	4622      	mov	r2, r4
 800863e:	462b      	mov	r3, r5
 8008640:	f7f7 ffe2 	bl	8000608 <__aeabi_dmul>
 8008644:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	d14b      	bne.n	80086e6 <atan+0x25e>
 800864e:	4620      	mov	r0, r4
 8008650:	4629      	mov	r1, r5
 8008652:	f7f7 fe21 	bl	8000298 <__aeabi_dsub>
 8008656:	e72c      	b.n	80084b2 <atan+0x2a>
 8008658:	ee10 0a10 	vmov	r0, s0
 800865c:	4b53      	ldr	r3, [pc, #332]	; (80087ac <atan+0x324>)
 800865e:	2200      	movs	r2, #0
 8008660:	4629      	mov	r1, r5
 8008662:	f7f7 fe19 	bl	8000298 <__aeabi_dsub>
 8008666:	4b51      	ldr	r3, [pc, #324]	; (80087ac <atan+0x324>)
 8008668:	4606      	mov	r6, r0
 800866a:	460f      	mov	r7, r1
 800866c:	2200      	movs	r2, #0
 800866e:	4620      	mov	r0, r4
 8008670:	4629      	mov	r1, r5
 8008672:	f7f7 fe13 	bl	800029c <__adddf3>
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	4630      	mov	r0, r6
 800867c:	4639      	mov	r1, r7
 800867e:	f7f8 f8ed 	bl	800085c <__aeabi_ddiv>
 8008682:	f04f 0a01 	mov.w	sl, #1
 8008686:	4604      	mov	r4, r0
 8008688:	460d      	mov	r5, r1
 800868a:	e764      	b.n	8008556 <atan+0xce>
 800868c:	4b49      	ldr	r3, [pc, #292]	; (80087b4 <atan+0x32c>)
 800868e:	429e      	cmp	r6, r3
 8008690:	da1d      	bge.n	80086ce <atan+0x246>
 8008692:	ee10 0a10 	vmov	r0, s0
 8008696:	4b48      	ldr	r3, [pc, #288]	; (80087b8 <atan+0x330>)
 8008698:	2200      	movs	r2, #0
 800869a:	4629      	mov	r1, r5
 800869c:	f7f7 fdfc 	bl	8000298 <__aeabi_dsub>
 80086a0:	4b45      	ldr	r3, [pc, #276]	; (80087b8 <atan+0x330>)
 80086a2:	4606      	mov	r6, r0
 80086a4:	460f      	mov	r7, r1
 80086a6:	2200      	movs	r2, #0
 80086a8:	4620      	mov	r0, r4
 80086aa:	4629      	mov	r1, r5
 80086ac:	f7f7 ffac 	bl	8000608 <__aeabi_dmul>
 80086b0:	4b3e      	ldr	r3, [pc, #248]	; (80087ac <atan+0x324>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	f7f7 fdf2 	bl	800029c <__adddf3>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	4630      	mov	r0, r6
 80086be:	4639      	mov	r1, r7
 80086c0:	f7f8 f8cc 	bl	800085c <__aeabi_ddiv>
 80086c4:	f04f 0a02 	mov.w	sl, #2
 80086c8:	4604      	mov	r4, r0
 80086ca:	460d      	mov	r5, r1
 80086cc:	e743      	b.n	8008556 <atan+0xce>
 80086ce:	462b      	mov	r3, r5
 80086d0:	ee10 2a10 	vmov	r2, s0
 80086d4:	4939      	ldr	r1, [pc, #228]	; (80087bc <atan+0x334>)
 80086d6:	2000      	movs	r0, #0
 80086d8:	f7f8 f8c0 	bl	800085c <__aeabi_ddiv>
 80086dc:	f04f 0a03 	mov.w	sl, #3
 80086e0:	4604      	mov	r4, r0
 80086e2:	460d      	mov	r5, r1
 80086e4:	e737      	b.n	8008556 <atan+0xce>
 80086e6:	4b36      	ldr	r3, [pc, #216]	; (80087c0 <atan+0x338>)
 80086e8:	4e36      	ldr	r6, [pc, #216]	; (80087c4 <atan+0x33c>)
 80086ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80086ee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80086f2:	e9da 2300 	ldrd	r2, r3, [sl]
 80086f6:	f7f7 fdcf 	bl	8000298 <__aeabi_dsub>
 80086fa:	4622      	mov	r2, r4
 80086fc:	462b      	mov	r3, r5
 80086fe:	f7f7 fdcb 	bl	8000298 <__aeabi_dsub>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	e9d6 0100 	ldrd	r0, r1, [r6]
 800870a:	f7f7 fdc5 	bl	8000298 <__aeabi_dsub>
 800870e:	f1bb 0f00 	cmp.w	fp, #0
 8008712:	4604      	mov	r4, r0
 8008714:	460d      	mov	r5, r1
 8008716:	f6bf aed6 	bge.w	80084c6 <atan+0x3e>
 800871a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800871e:	461d      	mov	r5, r3
 8008720:	e6d1      	b.n	80084c6 <atan+0x3e>
 8008722:	a51d      	add	r5, pc, #116	; (adr r5, 8008798 <atan+0x310>)
 8008724:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008728:	e6cd      	b.n	80084c6 <atan+0x3e>
 800872a:	bf00      	nop
 800872c:	f3af 8000 	nop.w
 8008730:	54442d18 	.word	0x54442d18
 8008734:	bff921fb 	.word	0xbff921fb
 8008738:	8800759c 	.word	0x8800759c
 800873c:	7e37e43c 	.word	0x7e37e43c
 8008740:	e322da11 	.word	0xe322da11
 8008744:	3f90ad3a 	.word	0x3f90ad3a
 8008748:	24760deb 	.word	0x24760deb
 800874c:	3fa97b4b 	.word	0x3fa97b4b
 8008750:	a0d03d51 	.word	0xa0d03d51
 8008754:	3fb10d66 	.word	0x3fb10d66
 8008758:	c54c206e 	.word	0xc54c206e
 800875c:	3fb745cd 	.word	0x3fb745cd
 8008760:	920083ff 	.word	0x920083ff
 8008764:	3fc24924 	.word	0x3fc24924
 8008768:	5555550d 	.word	0x5555550d
 800876c:	3fd55555 	.word	0x3fd55555
 8008770:	2c6a6c2f 	.word	0x2c6a6c2f
 8008774:	bfa2b444 	.word	0xbfa2b444
 8008778:	52defd9a 	.word	0x52defd9a
 800877c:	3fadde2d 	.word	0x3fadde2d
 8008780:	af749a6d 	.word	0xaf749a6d
 8008784:	3fb3b0f2 	.word	0x3fb3b0f2
 8008788:	fe231671 	.word	0xfe231671
 800878c:	3fbc71c6 	.word	0x3fbc71c6
 8008790:	9998ebc4 	.word	0x9998ebc4
 8008794:	3fc99999 	.word	0x3fc99999
 8008798:	54442d18 	.word	0x54442d18
 800879c:	3ff921fb 	.word	0x3ff921fb
 80087a0:	440fffff 	.word	0x440fffff
 80087a4:	7ff00000 	.word	0x7ff00000
 80087a8:	3fdbffff 	.word	0x3fdbffff
 80087ac:	3ff00000 	.word	0x3ff00000
 80087b0:	3ff2ffff 	.word	0x3ff2ffff
 80087b4:	40038000 	.word	0x40038000
 80087b8:	3ff80000 	.word	0x3ff80000
 80087bc:	bff00000 	.word	0xbff00000
 80087c0:	08008ee0 	.word	0x08008ee0
 80087c4:	08008ec0 	.word	0x08008ec0

080087c8 <fabs>:
 80087c8:	ec51 0b10 	vmov	r0, r1, d0
 80087cc:	ee10 2a10 	vmov	r2, s0
 80087d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80087d4:	ec43 2b10 	vmov	d0, r2, r3
 80087d8:	4770      	bx	lr
 80087da:	0000      	movs	r0, r0
 80087dc:	0000      	movs	r0, r0
	...

080087e0 <nan>:
 80087e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80087e8 <nan+0x8>
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	00000000 	.word	0x00000000
 80087ec:	7ff80000 	.word	0x7ff80000

080087f0 <_init>:
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	bf00      	nop
 80087f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087f6:	bc08      	pop	{r3}
 80087f8:	469e      	mov	lr, r3
 80087fa:	4770      	bx	lr

080087fc <_fini>:
 80087fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fe:	bf00      	nop
 8008800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008802:	bc08      	pop	{r3}
 8008804:	469e      	mov	lr, r3
 8008806:	4770      	bx	lr
