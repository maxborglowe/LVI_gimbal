
BLDC_Gimbal1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008580  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  08008720  08008720  00018720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e28  08008e28  000221f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008e28  08008e28  00018e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e30  08008e30  000221f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e30  08008e30  00018e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e34  08008e34  00018e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000021f0  20000000  08008e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  200021f0  0800b028  000221f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025ac  0800b028  000225ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000221f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011191  00000000  00000000  00022220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002249  00000000  00000000  000333b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00035600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  00036238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003198  00000000  00000000  00036dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f407  00000000  00000000  00039f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf98  00000000  00000000  0004936f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5307  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000464c  00000000  00000000  000d535c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200021f0 	.word	0x200021f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008708 	.word	0x08008708

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200021f4 	.word	0x200021f4
 80001dc:	08008708 	.word	0x08008708

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <bmi270_spi_init>:
}

/*
 * @brief Initialization sequence for BMI270 as described on p. 20 in datasheet.
 */
void bmi270_spi_init() {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
	uint8_t chip_id = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOB, BMI270_CS, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f60:	481e      	ldr	r0, [pc, #120]	; (8000fdc <bmi270_spi_init+0x8c>)
 8000f62:	f002 f8e1 	bl	8003128 <HAL_GPIO_WritePin>

	chip_id = bmi270_spi_read_8(0x00);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f956 	bl	8001218 <bmi270_spi_read_8>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
	if (chip_id != 0x24) {
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b24      	cmp	r3, #36	; 0x24
 8000f74:	d003      	beq.n	8000f7e <bmi270_spi_init+0x2e>
		bmi270_print(0x0000);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 fa32 	bl	80013e0 <bmi270_print>
		bmi270_spi_write_8(REG_INIT_CTRL, 0x01);//complete config load INIT_CTRL = 0x01

		sprintf((char*) buff, "BMI270: initialization sequence complete\r\n");
		HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), 200);
	}
}
 8000f7c:	e02a      	b.n	8000fd4 <bmi270_spi_init+0x84>
	} else if (chip_id == 0x24) {
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b24      	cmp	r3, #36	; 0x24
 8000f82:	d127      	bne.n	8000fd4 <bmi270_spi_init+0x84>
		bmi270_print(0xFF00);
 8000f84:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8000f88:	f000 fa2a 	bl	80013e0 <bmi270_print>
		bmi270_spi_write_8(REG_PWR_CONF, 0x00); //Disable PWR_CONF.adv_power_save
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	207c      	movs	r0, #124	; 0x7c
 8000f90:	f000 f8da 	bl	8001148 <bmi270_spi_write_8>
		HAL_Delay(1);								//wait for 450us
 8000f94:	2001      	movs	r0, #1
 8000f96:	f001 fe39 	bl	8002c0c <HAL_Delay>
		bmi270_spi_write_8(REG_INIT_CTRL, 0x00); //prepare config load INIT_CTRL = 0x00
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2059      	movs	r0, #89	; 0x59
 8000f9e:	f000 f8d3 	bl	8001148 <bmi270_spi_write_8>
		bmi270_spi_write_burst(REG_INIT_DATA, bmi270_config_file,
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <bmi270_spi_init+0x90>)
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	490e      	ldr	r1, [pc, #56]	; (8000fe4 <bmi270_spi_init+0x94>)
 8000faa:	205e      	movs	r0, #94	; 0x5e
 8000fac:	f000 f8fa 	bl	80011a4 <bmi270_spi_write_burst>
		bmi270_spi_write_8(REG_INIT_CTRL, 0x01);//complete config load INIT_CTRL = 0x01
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2059      	movs	r0, #89	; 0x59
 8000fb4:	f000 f8c8 	bl	8001148 <bmi270_spi_write_8>
		sprintf((char*) buff, "BMI270: initialization sequence complete\r\n");
 8000fb8:	490b      	ldr	r1, [pc, #44]	; (8000fe8 <bmi270_spi_init+0x98>)
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <bmi270_spi_init+0x9c>)
 8000fbc:	f004 fbf2 	bl	80057a4 <siprintf>
		HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), 200);
 8000fc0:	480a      	ldr	r0, [pc, #40]	; (8000fec <bmi270_spi_init+0x9c>)
 8000fc2:	f7ff f90d 	bl	80001e0 <strlen>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	23c8      	movs	r3, #200	; 0xc8
 8000fcc:	4907      	ldr	r1, [pc, #28]	; (8000fec <bmi270_spi_init+0x9c>)
 8000fce:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <bmi270_spi_init+0xa0>)
 8000fd0:	f003 fc71 	bl	80048b6 <HAL_UART_Transmit>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	20002000 	.word	0x20002000
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	08008730 	.word	0x08008730
 8000fec:	200022bc 	.word	0x200022bc
 8000ff0:	20002530 	.word	0x20002530

08000ff4 <bmi270_pwr_conf>:
 *@param Power mode:
 *			0 = low power mode
 *			1 = normal power mode
 *			2 = performance power mode
 */
void bmi270_pwr_conf(uint8_t pwr_mode) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	if (pwr_mode == BMI270_PWR_MODE_LOW) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d10c      	bne.n	800101e <bmi270_pwr_conf+0x2a>
		bmi270_spi_write_8(REG_PWR_CTRL, 0x04); //enable acquisiton of acceleration data. disable the auxiliary interface, gyroscope data, temperature sensor data
 8001004:	2104      	movs	r1, #4
 8001006:	207d      	movs	r0, #125	; 0x7d
 8001008:	f000 f89e 	bl	8001148 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_ACC_CONF, 0x17); //disable the acc_filter_perf bit; set acc_bwp to 2 repetitions; set acc_odr to 50 Hz
 800100c:	2117      	movs	r1, #23
 800100e:	2040      	movs	r0, #64	; 0x40
 8001010:	f000 f89a 	bl	8001148 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_PWR_CONF, 0x03); //enable the adv_power_save bit; leave the fifo_self_wakeup enabled
 8001014:	2103      	movs	r1, #3
 8001016:	207c      	movs	r0, #124	; 0x7c
 8001018:	f000 f896 	bl	8001148 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_PWR_CTRL, 0x0E); //enable acquisiton of acceleration, gyroscope and temperature sensor data. disable the auxiliary interface.
		bmi270_spi_write_8(REG_ACC_CONF, 0xA8); //enable the acc_filter_perf bit; set acc_bwp to normal mode; set acc_odr to 100 Hz
		bmi270_spi_write_8(REG_GYR_CONF, 0xE9); //enable the gyr_filter_perf bit; enable gyr_noise_perf bit; set gyr_bwp to normal mode; set gyr_odr to 200 Hz
		bmi270_spi_write_8(REG_PWR_CONF, 0x02); //disable the adv_power_save bit; leave the fifo_self_wakeup enabled
	}
}
 800101c:	e026      	b.n	800106c <bmi270_pwr_conf+0x78>
	} else if (pwr_mode == BMI270_PWR_MODE_NORM) {
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d110      	bne.n	8001046 <bmi270_pwr_conf+0x52>
		bmi270_spi_write_8(REG_PWR_CTRL, 0x0E); //enable acquisiton of acceleration, gyroscope and temperature sensor data. disable the auxiliary interface.
 8001024:	210e      	movs	r1, #14
 8001026:	207d      	movs	r0, #125	; 0x7d
 8001028:	f000 f88e 	bl	8001148 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_ACC_CONF, 0xA8); //enable the acc_filter_perf bit; set acc_bwp to normal mode; set acc_odr to 100 Hz
 800102c:	21a8      	movs	r1, #168	; 0xa8
 800102e:	2040      	movs	r0, #64	; 0x40
 8001030:	f000 f88a 	bl	8001148 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_GYR_CONF, 0xA9); //enable the gyr_filter_perf bit; set gyr_bwp to normal mode; set gyr_odr to 200 Hz
 8001034:	21a9      	movs	r1, #169	; 0xa9
 8001036:	2042      	movs	r0, #66	; 0x42
 8001038:	f000 f886 	bl	8001148 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_PWR_CONF, 0x02); //disable the adv_power_save bit; leave the fifo_self_wakeup enabled
 800103c:	2102      	movs	r1, #2
 800103e:	207c      	movs	r0, #124	; 0x7c
 8001040:	f000 f882 	bl	8001148 <bmi270_spi_write_8>
}
 8001044:	e012      	b.n	800106c <bmi270_pwr_conf+0x78>
	} else if (pwr_mode == BMI270_PWR_MODE_PERF) {
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d10f      	bne.n	800106c <bmi270_pwr_conf+0x78>
		bmi270_spi_write_8(REG_PWR_CTRL, 0x0E); //enable acquisiton of acceleration, gyroscope and temperature sensor data. disable the auxiliary interface.
 800104c:	210e      	movs	r1, #14
 800104e:	207d      	movs	r0, #125	; 0x7d
 8001050:	f000 f87a 	bl	8001148 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_ACC_CONF, 0xA8); //enable the acc_filter_perf bit; set acc_bwp to normal mode; set acc_odr to 100 Hz
 8001054:	21a8      	movs	r1, #168	; 0xa8
 8001056:	2040      	movs	r0, #64	; 0x40
 8001058:	f000 f876 	bl	8001148 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_GYR_CONF, 0xE9); //enable the gyr_filter_perf bit; enable gyr_noise_perf bit; set gyr_bwp to normal mode; set gyr_odr to 200 Hz
 800105c:	21e9      	movs	r1, #233	; 0xe9
 800105e:	2042      	movs	r0, #66	; 0x42
 8001060:	f000 f872 	bl	8001148 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_PWR_CONF, 0x02); //disable the adv_power_save bit; leave the fifo_self_wakeup enabled
 8001064:	2102      	movs	r1, #2
 8001066:	207c      	movs	r0, #124	; 0x7c
 8001068:	f000 f86e 	bl	8001148 <bmi270_spi_write_8>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <bmi270_read_gyro>:

/*
 * @brief Read 2 bytes of gyroscope data in dps from the BMI270
 * @param Which axis to read
 */
uint16_t bmi270_read_gyro(uint8_t axis){
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	uint16_t data;

	data = bmi270_spi_read_8(2 * axis + REG_DATA_14);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	3309      	adds	r3, #9
 8001082:	b2db      	uxtb	r3, r3
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	b2db      	uxtb	r3, r3
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f8c5 	bl	8001218 <bmi270_spi_read_8>
 800108e:	4603      	mov	r3, r0
 8001090:	81fb      	strh	r3, [r7, #14]
	data |= bmi270_spi_read_8(2 * axis + REG_DATA_14 + 1)<<8;
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	3309      	adds	r3, #9
 8001096:	b2db      	uxtb	r3, r3
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	b2db      	uxtb	r3, r3
 800109c:	3301      	adds	r3, #1
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 f8b9 	bl	8001218 <bmi270_spi_read_8>
 80010a6:	4603      	mov	r3, r0
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	81fb      	strh	r3, [r7, #14]
//		data_z |= bmi270_spi_read_8(REG_DATA_19)<<8;
//		uint8_t factor_zx = (bmi270_spi_read_8(REG_GYR_CAS) & 0x3F);
//		data = data - factor_zx * data_z / factor_zx_div;
//	}

	return data;
 80010b6:	89fb      	ldrh	r3, [r7, #14]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <bmi270_read_accel>:

/*
 * @brief Read 2 bytes of accelerometer data in dps from the BMI270
 * @param Which axis to read
 */
uint16_t bmi270_read_accel(uint8_t axis){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	uint16_t data;

	data = bmi270_spi_read_8(2 * axis + REG_DATA_8);
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	3306      	adds	r3, #6
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 f89f 	bl	8001218 <bmi270_spi_read_8>
 80010da:	4603      	mov	r3, r0
 80010dc:	81fb      	strh	r3, [r7, #14]
	data |= (bmi270_spi_read_8(2 * axis + REG_DATA_8 + 1)<<8);
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	3306      	adds	r3, #6
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f893 	bl	8001218 <bmi270_spi_read_8>
 80010f2:	4603      	mov	r3, r0
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b21b      	sxth	r3, r3
 8001100:	81fb      	strh	r3, [r7, #14]

	return data;
 8001102:	89fb      	ldrh	r3, [r7, #14]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <bmi270_spi_init_check>:

/*
 * @brief Check the correct initialization status as described on p.21 in datasheet.
 */
void bmi270_spi_init_check() {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
	HAL_Delay(145); //wait >140 ms
 8001112:	2091      	movs	r0, #145	; 0x91
 8001114:	f001 fd7a 	bl	8002c0c <HAL_Delay>
	uint16_t init_status = bmi270_spi_read_8(REG_INTERNAL_STATUS);
 8001118:	2021      	movs	r0, #33	; 0x21
 800111a:	f000 f87d 	bl	8001218 <bmi270_spi_read_8>
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
	init_status = init_status & 0x0F;
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	f003 030f 	and.w	r3, r3, #15
 8001128:	80fb      	strh	r3, [r7, #6]
	init_status = init_status | 0xC000;
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8001130:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8001134:	80fb      	strh	r3, [r7, #6]

	bmi270_print(init_status);
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f951 	bl	80013e0 <bmi270_print>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <bmi270_spi_write_8>:
/*
 * @brief Writes 8 bits of data to SDI -pin on BMI270.
 * @param Which BMI270-register to perform the read on
 * @param 8-bit data to be written into the selected register
 */
void bmi270_spi_write_8(uint8_t reg, uint8_t data) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	460a      	mov	r2, r1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = reg | 0x00; //write command
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOB, BMI270_CS, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001162:	480e      	ldr	r0, [pc, #56]	; (800119c <bmi270_spi_write_8+0x54>)
 8001164:	f001 ffe0 	bl	8003128 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001168:	f107 010f 	add.w	r1, r7, #15
 800116c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001170:	2201      	movs	r2, #1
 8001172:	480b      	ldr	r0, [pc, #44]	; (80011a0 <bmi270_spi_write_8+0x58>)
 8001174:	f002 fe33 	bl	8003dde <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001178:	1db9      	adds	r1, r7, #6
 800117a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117e:	2201      	movs	r2, #1
 8001180:	4807      	ldr	r0, [pc, #28]	; (80011a0 <bmi270_spi_write_8+0x58>)
 8001182:	f002 fe2c 	bl	8003dde <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, BMI270_CS, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <bmi270_spi_write_8+0x54>)
 800118e:	f001 ffcb 	bl	8003128 <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40020400 	.word	0x40020400
 80011a0:	200024d4 	.word	0x200024d4

080011a4 <bmi270_spi_write_burst>:
 * @brief Writes burst of 8-bit array to SDI-pin on BMI270.
 * @param Which BMI270-register to perform the read on
 * @param Array to be written into the selected register
 * @param Size of passing array (pre-defined)
 */
void bmi270_spi_write_burst(uint8_t reg, uint8_t data[], uint16_t data_size) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	4613      	mov	r3, r2
 80011b2:	80bb      	strh	r3, [r7, #4]
	uint8_t cmd = reg | 0x00; //write command
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	737b      	strb	r3, [r7, #13]
	uint16_t i;

	HAL_GPIO_WritePin(GPIOB, BMI270_CS, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011be:	4814      	ldr	r0, [pc, #80]	; (8001210 <bmi270_spi_write_burst+0x6c>)
 80011c0:	f001 ffb2 	bl	8003128 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80011c4:	f107 010d 	add.w	r1, r7, #13
 80011c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011cc:	2201      	movs	r2, #1
 80011ce:	4811      	ldr	r0, [pc, #68]	; (8001214 <bmi270_spi_write_burst+0x70>)
 80011d0:	f002 fe05 	bl	8003dde <HAL_SPI_Transmit>
	for (i = 0; i < data_size; i++) {
 80011d4:	2300      	movs	r3, #0
 80011d6:	81fb      	strh	r3, [r7, #14]
 80011d8:	e00b      	b.n	80011f2 <bmi270_spi_write_burst+0x4e>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) &data[i], 1, 0xFFFF);
 80011da:	89fb      	ldrh	r3, [r7, #14]
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	18d1      	adds	r1, r2, r3
 80011e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e4:	2201      	movs	r2, #1
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <bmi270_spi_write_burst+0x70>)
 80011e8:	f002 fdf9 	bl	8003dde <HAL_SPI_Transmit>
	for (i = 0; i < data_size; i++) {
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	3301      	adds	r3, #1
 80011f0:	81fb      	strh	r3, [r7, #14]
 80011f2:	89fa      	ldrh	r2, [r7, #14]
 80011f4:	88bb      	ldrh	r3, [r7, #4]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d3ef      	bcc.n	80011da <bmi270_spi_write_burst+0x36>
	}
	HAL_GPIO_WritePin(GPIOB, BMI270_CS, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <bmi270_spi_write_burst+0x6c>)
 8001202:	f001 ff91 	bl	8003128 <HAL_GPIO_WritePin>
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40020400 	.word	0x40020400
 8001214:	200024d4 	.word	0x200024d4

08001218 <bmi270_spi_read_8>:

/*
 * @brief Read 8 bits of data from SDO-pin on BMI270.
 * @param Which BMI270-register to perform the read on
 */
uint8_t bmi270_spi_read_8(uint8_t reg) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy = 0x00;
 8001222:	2300      	movs	r3, #0
 8001224:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0x00;
 8001226:	2300      	movs	r3, #0
 8001228:	73bb      	strb	r3, [r7, #14]
	uint8_t cmd = reg | 0x80;
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001230:	b2db      	uxtb	r3, r3
 8001232:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(GPIOB, BMI270_CS, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800123a:	4813      	ldr	r0, [pc, #76]	; (8001288 <bmi270_spi_read_8+0x70>)
 800123c:	f001 ff74 	bl	8003128 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 8001240:	f107 010d 	add.w	r1, r7, #13
 8001244:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001248:	2201      	movs	r2, #1
 800124a:	4810      	ldr	r0, [pc, #64]	; (800128c <bmi270_spi_read_8+0x74>)
 800124c:	f002 fdc7 	bl	8003dde <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 8001250:	f107 010f 	add.w	r1, r7, #15
 8001254:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001258:	2201      	movs	r2, #1
 800125a:	480c      	ldr	r0, [pc, #48]	; (800128c <bmi270_spi_read_8+0x74>)
 800125c:	f002 fefb 	bl	8004056 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001260:	f107 010e 	add.w	r1, r7, #14
 8001264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001268:	2201      	movs	r2, #1
 800126a:	4808      	ldr	r0, [pc, #32]	; (800128c <bmi270_spi_read_8+0x74>)
 800126c:	f002 fef3 	bl	8004056 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, BMI270_CS, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001276:	4804      	ldr	r0, [pc, #16]	; (8001288 <bmi270_spi_read_8+0x70>)
 8001278:	f001 ff56 	bl	8003128 <HAL_GPIO_WritePin>

	return data;
 800127c:	7bbb      	ldrb	r3, [r7, #14]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40020400 	.word	0x40020400
 800128c:	200024d4 	.word	0x200024d4

08001290 <bmi270_getGyroRange>:

/*
 * @brief Read the currently active gyroscope range in the BMI270
 */
float bmi270_getGyroRange(){
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	switch(bmi270_spi_read_8(REG_GYR_RANGE)){//read gyro range
 8001294:	2043      	movs	r0, #67	; 0x43
 8001296:	f7ff ffbf 	bl	8001218 <bmi270_spi_read_8>
 800129a:	4603      	mov	r3, r0
 800129c:	2b04      	cmp	r3, #4
 800129e:	d817      	bhi.n	80012d0 <bmi270_getGyroRange+0x40>
 80012a0:	a201      	add	r2, pc, #4	; (adr r2, 80012a8 <bmi270_getGyroRange+0x18>)
 80012a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a6:	bf00      	nop
 80012a8:	080012bd 	.word	0x080012bd
 80012ac:	080012c1 	.word	0x080012c1
 80012b0:	080012c5 	.word	0x080012c5
 80012b4:	080012c9 	.word	0x080012c9
 80012b8:	080012cd 	.word	0x080012cd
	case range_2000:
		return BMI270_GYRO_2000_DPS;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <bmi270_getGyroRange+0x50>)
 80012be:	e009      	b.n	80012d4 <bmi270_getGyroRange+0x44>
	case range_1000:
		return BMI270_GYRO_1000_DPS;
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <bmi270_getGyroRange+0x54>)
 80012c2:	e007      	b.n	80012d4 <bmi270_getGyroRange+0x44>
	case range_500:
		return BMI270_GYRO_500_DPS;
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <bmi270_getGyroRange+0x58>)
 80012c6:	e005      	b.n	80012d4 <bmi270_getGyroRange+0x44>
	case range_250:
		return BMI270_GYRO_250_DPS;
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <bmi270_getGyroRange+0x5c>)
 80012ca:	e003      	b.n	80012d4 <bmi270_getGyroRange+0x44>
	case range_125:
		return BMI270_GYRO_125_DPS;
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <bmi270_getGyroRange+0x60>)
 80012ce:	e001      	b.n	80012d4 <bmi270_getGyroRange+0x44>
	}
	return 0.0f;
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	ee07 3a90 	vmov	s15, r3
}
 80012d8:	eeb0 0a67 	vmov.f32	s0, s15
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	41833333 	.word	0x41833333
 80012e4:	42033333 	.word	0x42033333
 80012e8:	42833333 	.word	0x42833333
 80012ec:	43033333 	.word	0x43033333
 80012f0:	43833333 	.word	0x43833333

080012f4 <bmi270_getAccelRange>:

/*
 * @brief Read the currently active accelerometer range in the BMI270
 */
float bmi270_getAccelRange(){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	switch(bmi270_spi_read_8(REG_ACC_RANGE)){//read gyro range
 80012f8:	2041      	movs	r0, #65	; 0x41
 80012fa:	f7ff ff8d 	bl	8001218 <bmi270_spi_read_8>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b03      	cmp	r3, #3
 8001302:	d817      	bhi.n	8001334 <bmi270_getAccelRange+0x40>
 8001304:	a201      	add	r2, pc, #4	; (adr r2, 800130c <bmi270_getAccelRange+0x18>)
 8001306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130a:	bf00      	nop
 800130c:	0800131d 	.word	0x0800131d
 8001310:	08001323 	.word	0x08001323
 8001314:	08001329 	.word	0x08001329
 8001318:	0800132f 	.word	0x0800132f
	case range_2g:
		return BMI270_ACCEL_2G;
 800131c:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8001320:	e00a      	b.n	8001338 <bmi270_getAccelRange+0x44>
	case range_4g:
		return BMI270_ACCEL_4G;
 8001322:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8001326:	e007      	b.n	8001338 <bmi270_getAccelRange+0x44>
	case range_8g:
		return BMI270_ACCEL_8G;
 8001328:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 800132c:	e004      	b.n	8001338 <bmi270_getAccelRange+0x44>
	case range_16g:
		return BMI270_ACCEL_16G;
 800132e:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8001332:	e001      	b.n	8001338 <bmi270_getAccelRange+0x44>
	}
	return 0.0f;
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	ee07 3a90 	vmov	s15, r3
}
 800133c:	eeb0 0a67 	vmov.f32	s0, s15
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop

08001344 <bmi270_lsb_to_mps2>:

/*!
 * @brief This function converts lsb to meter per second squared for 16 bit accelerometer at
 * range 2G, 4G, 8G or 16G.
 */
float bmi270_lsb_to_mps2(int16_t val, float acc_range) {
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	ed87 0a00 	vstr	s0, [r7]
 8001350:	80fb      	strh	r3, [r7, #6]
    float half_scale = ((float)(1 << 16) / 2.0f);
 8001352:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 8001356:	60fb      	str	r3, [r7, #12]
    return (BMI270_GRAVITY_EARTH * val * acc_range) / half_scale;
 8001358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001364:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001390 <bmi270_lsb_to_mps2+0x4c>
 8001368:	ee27 7a87 	vmul.f32	s14, s15, s14
 800136c:	edd7 7a00 	vldr	s15, [r7]
 8001370:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001374:	edd7 7a03 	vldr	s15, [r7, #12]
 8001378:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800137c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001380:	eeb0 0a67 	vmov.f32	s0, s15
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	411ce80a 	.word	0x411ce80a

08001394 <bmi270_lsb_to_dps>:

/*!
 * @brief This function converts lsb to degree per second for 16 bit gyro at
 * range 125, 250, 500, 1000 or 2000dps.
 */
float bmi270_lsb_to_dps(int16_t val, float dps) {
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	ed87 0a00 	vstr	s0, [r7]
 80013a0:	80fb      	strh	r3, [r7, #6]
	float half_scale = ((float)(1 << 16) / 2.0f);
 80013a2:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 80013a6:	60fb      	str	r3, [r7, #12]
	return (dps / ((half_scale) + BMI270_GYRO_2000_DPS)) * (val);
 80013a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ac:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80013dc <bmi270_lsb_to_dps+0x48>
 80013b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013b4:	edd7 6a00 	vldr	s13, [r7]
 80013b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c0:	ee07 3a90 	vmov	s15, r3
 80013c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c8:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80013cc:	eeb0 0a67 	vmov.f32	s0, s15
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	41833333 	.word	0x41833333

080013e0 <bmi270_print>:

void bmi270_print(uint16_t code) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
	if ((uint16_t*) code != NULL) {
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d009      	beq.n	8001404 <bmi270_print+0x24>
		sprintf((char*) buff, "BMI270: %s\r\n", bmi270_codeToStr(code));
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f81a 	bl	800142c <bmi270_codeToStr>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4908      	ldr	r1, [pc, #32]	; (8001420 <bmi270_print+0x40>)
 80013fe:	4809      	ldr	r0, [pc, #36]	; (8001424 <bmi270_print+0x44>)
 8001400:	f004 f9d0 	bl	80057a4 <siprintf>
	}

	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), 200);
 8001404:	4807      	ldr	r0, [pc, #28]	; (8001424 <bmi270_print+0x44>)
 8001406:	f7fe feeb 	bl	80001e0 <strlen>
 800140a:	4603      	mov	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	23c8      	movs	r3, #200	; 0xc8
 8001410:	4904      	ldr	r1, [pc, #16]	; (8001424 <bmi270_print+0x44>)
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <bmi270_print+0x48>)
 8001414:	f003 fa4f 	bl	80048b6 <HAL_UART_Transmit>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	0800875c 	.word	0x0800875c
 8001424:	200022bc 	.word	0x200022bc
 8001428:	20002530 	.word	0x20002530

0800142c <bmi270_codeToStr>:

const char* bmi270_codeToStr(uint16_t code) {
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]

	//error codes
	switch (code) {
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	f64f 7201 	movw	r2, #65281	; 0xff01
 800143c:	4293      	cmp	r3, r2
 800143e:	d049      	beq.n	80014d4 <bmi270_codeToStr+0xa8>
 8001440:	f64f 7201 	movw	r2, #65281	; 0xff01
 8001444:	4293      	cmp	r3, r2
 8001446:	dc47      	bgt.n	80014d8 <bmi270_codeToStr+0xac>
 8001448:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800144c:	d040      	beq.n	80014d0 <bmi270_codeToStr+0xa4>
 800144e:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8001452:	dc41      	bgt.n	80014d8 <bmi270_codeToStr+0xac>
 8001454:	f24c 0207 	movw	r2, #49159	; 0xc007
 8001458:	4293      	cmp	r3, r2
 800145a:	dc3d      	bgt.n	80014d8 <bmi270_codeToStr+0xac>
 800145c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001460:	da08      	bge.n	8001474 <bmi270_codeToStr+0x48>
 8001462:	2b02      	cmp	r3, #2
 8001464:	d022      	beq.n	80014ac <bmi270_codeToStr+0x80>
 8001466:	2b02      	cmp	r3, #2
 8001468:	dc36      	bgt.n	80014d8 <bmi270_codeToStr+0xac>
 800146a:	2b00      	cmp	r3, #0
 800146c:	d01a      	beq.n	80014a4 <bmi270_codeToStr+0x78>
 800146e:	2b01      	cmp	r3, #1
 8001470:	d01a      	beq.n	80014a8 <bmi270_codeToStr+0x7c>
 8001472:	e031      	b.n	80014d8 <bmi270_codeToStr+0xac>
 8001474:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
 8001478:	2b07      	cmp	r3, #7
 800147a:	d82d      	bhi.n	80014d8 <bmi270_codeToStr+0xac>
 800147c:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <bmi270_codeToStr+0x58>)
 800147e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001482:	bf00      	nop
 8001484:	080014b1 	.word	0x080014b1
 8001488:	080014b5 	.word	0x080014b5
 800148c:	080014b9 	.word	0x080014b9
 8001490:	080014bd 	.word	0x080014bd
 8001494:	080014c1 	.word	0x080014c1
 8001498:	080014c5 	.word	0x080014c5
 800149c:	080014c9 	.word	0x080014c9
 80014a0:	080014cd 	.word	0x080014cd
	case 0x0000:
		return "CHIP_ID error";
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <bmi270_codeToStr+0xb8>)
 80014a6:	e017      	b.n	80014d8 <bmi270_codeToStr+0xac>
	case 0x0001:
		return "Initialization error";
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <bmi270_codeToStr+0xbc>)
 80014aa:	e015      	b.n	80014d8 <bmi270_codeToStr+0xac>
	case 0x0002:
		return "";
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <bmi270_codeToStr+0xc0>)
 80014ae:	e013      	b.n	80014d8 <bmi270_codeToStr+0xac>

		//REG_INTERNAL_STATUS codes
	case 0xc000:
		return "REG_INTERNAL_STATUS: not_init";
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <bmi270_codeToStr+0xc4>)
 80014b2:	e011      	b.n	80014d8 <bmi270_codeToStr+0xac>
	case 0xc001:
		return "REG_INTERNAL_STATUS: init_ok";
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <bmi270_codeToStr+0xc8>)
 80014b6:	e00f      	b.n	80014d8 <bmi270_codeToStr+0xac>
	case 0xc002:
		return "REG_INTERNAL_STATUS: init_err";
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <bmi270_codeToStr+0xcc>)
 80014ba:	e00d      	b.n	80014d8 <bmi270_codeToStr+0xac>
	case 0xc003:
		return "REG_INTERNAL_STATUS: drv_error";
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <bmi270_codeToStr+0xd0>)
 80014be:	e00b      	b.n	80014d8 <bmi270_codeToStr+0xac>
	case 0xc004:
		return "REG_INTERNAL_STATUS: sns_stop";
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <bmi270_codeToStr+0xd4>)
 80014c2:	e009      	b.n	80014d8 <bmi270_codeToStr+0xac>
	case 0xc005:
		return "REG_INTERNAL_STATUS: nvm_error";
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <bmi270_codeToStr+0xd8>)
 80014c6:	e007      	b.n	80014d8 <bmi270_codeToStr+0xac>
	case 0xc006:
		return "REG_INTERNAL_STATUS: start_up_error";
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <bmi270_codeToStr+0xdc>)
 80014ca:	e005      	b.n	80014d8 <bmi270_codeToStr+0xac>
	case 0xc007:
		return "REG_INTERNAL_STATUS: compat_error";
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <bmi270_codeToStr+0xe0>)
 80014ce:	e003      	b.n	80014d8 <bmi270_codeToStr+0xac>

		//other codes
	case 0xFF00:
		return "CHIP_ID == 0x24";
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <bmi270_codeToStr+0xe4>)
 80014d2:	e001      	b.n	80014d8 <bmi270_codeToStr+0xac>
	case 0xFF01:
		return "Initialization sequence OK!";
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <bmi270_codeToStr+0xe8>)
 80014d6:	e7ff      	b.n	80014d8 <bmi270_codeToStr+0xac>
	}
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	0800876c 	.word	0x0800876c
 80014e8:	0800877c 	.word	0x0800877c
 80014ec:	08008794 	.word	0x08008794
 80014f0:	08008798 	.word	0x08008798
 80014f4:	080087b8 	.word	0x080087b8
 80014f8:	080087d8 	.word	0x080087d8
 80014fc:	080087f8 	.word	0x080087f8
 8001500:	08008818 	.word	0x08008818
 8001504:	08008838 	.word	0x08008838
 8001508:	08008858 	.word	0x08008858
 800150c:	0800887c 	.word	0x0800887c
 8001510:	080088a0 	.word	0x080088a0
 8001514:	080088b0 	.word	0x080088b0

08001518 <setSampleFreq>:
#include "Quaternions.h"

/*
 * @brief Set the sample frequency based on the while loop cycle time (in milliseconds)
 */
void setSampleFreq() {
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	sampleFreq = 1 / (0.001 * while_t);
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <setSampleFreq+0x48>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f819 	bl	8000558 <__aeabi_f2d>
 8001526:	a30c      	add	r3, pc, #48	; (adr r3, 8001558 <setSampleFreq+0x40>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f86c 	bl	8000608 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	f04f 0000 	mov.w	r0, #0
 8001538:	490a      	ldr	r1, [pc, #40]	; (8001564 <setSampleFreq+0x4c>)
 800153a:	f7ff f98f 	bl	800085c <__aeabi_ddiv>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff fb37 	bl	8000bb8 <__aeabi_d2f>
 800154a:	4603      	mov	r3, r0
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <setSampleFreq+0x50>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	f3af 8000 	nop.w
 8001558:	d2f1a9fc 	.word	0xd2f1a9fc
 800155c:	3f50624d 	.word	0x3f50624d
 8001560:	2000200c 	.word	0x2000200c
 8001564:	3ff00000 	.word	0x3ff00000
 8001568:	20002240 	.word	0x20002240

0800156c <filterUpdate>:
 * @param Current angular rate on z-axis from gyroscope
 * @param Current acceleration on x-axis from accelerometer
 * @param Current acceleration on y-axis from accelerometer
 * @param Current acceleration on z-axis from accelerometer
 */
void filterUpdate(float gx, float gy, float gz, float ax, float ay, float az) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b09c      	sub	sp, #112	; 0x70
 8001570:	af00      	add	r7, sp, #0
 8001572:	ed87 0a05 	vstr	s0, [r7, #20]
 8001576:	edc7 0a04 	vstr	s1, [r7, #16]
 800157a:	ed87 1a03 	vstr	s2, [r7, #12]
 800157e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001582:	ed87 2a01 	vstr	s4, [r7, #4]
 8001586:	edc7 2a00 	vstr	s5, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1,
			q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800158a:	4bee      	ldr	r3, [pc, #952]	; (8001944 <filterUpdate+0x3d8>)
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	eeb1 7a67 	vneg.f32	s14, s15
 8001594:	edd7 7a05 	vldr	s15, [r7, #20]
 8001598:	ee27 7a27 	vmul.f32	s14, s14, s15
 800159c:	4bea      	ldr	r3, [pc, #936]	; (8001948 <filterUpdate+0x3dc>)
 800159e:	edd3 6a00 	vldr	s13, [r3]
 80015a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80015a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015ae:	4be7      	ldr	r3, [pc, #924]	; (800194c <filterUpdate+0x3e0>)
 80015b0:	edd3 6a00 	vldr	s13, [r3]
 80015b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80015cc:	4be0      	ldr	r3, [pc, #896]	; (8001950 <filterUpdate+0x3e4>)
 80015ce:	ed93 7a00 	vldr	s14, [r3]
 80015d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015da:	4bdb      	ldr	r3, [pc, #876]	; (8001948 <filterUpdate+0x3dc>)
 80015dc:	edd3 6a00 	vldr	s13, [r3]
 80015e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ec:	4bd7      	ldr	r3, [pc, #860]	; (800194c <filterUpdate+0x3e0>)
 80015ee:	edd3 6a00 	vldr	s13, [r3]
 80015f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80015f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001606:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800160a:	4bd1      	ldr	r3, [pc, #836]	; (8001950 <filterUpdate+0x3e4>)
 800160c:	ed93 7a00 	vldr	s14, [r3]
 8001610:	edd7 7a04 	vldr	s15, [r7, #16]
 8001614:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001618:	4bca      	ldr	r3, [pc, #808]	; (8001944 <filterUpdate+0x3d8>)
 800161a:	edd3 6a00 	vldr	s13, [r3]
 800161e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001622:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001626:	ee37 7a67 	vsub.f32	s14, s14, s15
 800162a:	4bc8      	ldr	r3, [pc, #800]	; (800194c <filterUpdate+0x3e0>)
 800162c:	edd3 6a00 	vldr	s13, [r3]
 8001630:	edd7 7a05 	vldr	s15, [r7, #20]
 8001634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001644:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001648:	4bc1      	ldr	r3, [pc, #772]	; (8001950 <filterUpdate+0x3e4>)
 800164a:	ed93 7a00 	vldr	s14, [r3]
 800164e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001652:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001656:	4bbb      	ldr	r3, [pc, #748]	; (8001944 <filterUpdate+0x3d8>)
 8001658:	edd3 6a00 	vldr	s13, [r3]
 800165c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001664:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001668:	4bb7      	ldr	r3, [pc, #732]	; (8001948 <filterUpdate+0x3dc>)
 800166a:	edd3 6a00 	vldr	s13, [r3]
 800166e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800167e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001682:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001686:	edd7 7a02 	vldr	s15, [r7, #8]
 800168a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	d10e      	bne.n	80016b2 <filterUpdate+0x146>
 8001694:	edd7 7a01 	vldr	s15, [r7, #4]
 8001698:	eef5 7a40 	vcmp.f32	s15, #0.0
 800169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a0:	d107      	bne.n	80016b2 <filterUpdate+0x146>
 80016a2:	edd7 7a00 	vldr	s15, [r7]
 80016a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ae:	f000 81e1 	beq.w	8001a74 <filterUpdate+0x508>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80016b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80016b6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80016ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80016be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c6:	edd7 7a00 	vldr	s15, [r7]
 80016ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d2:	eeb0 0a67 	vmov.f32	s0, s15
 80016d6:	f000 fb5b 	bl	8001d90 <invSqrt>
 80016da:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 80016de:	ed97 7a02 	vldr	s14, [r7, #8]
 80016e2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ea:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 80016ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80016f2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fa:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;
 80016fe:	ed97 7a00 	vldr	s14, [r7]
 8001702:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800170a:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800170e:	4b90      	ldr	r3, [pc, #576]	; (8001950 <filterUpdate+0x3e4>)
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001718:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 800171c:	4b89      	ldr	r3, [pc, #548]	; (8001944 <filterUpdate+0x3d8>)
 800171e:	edd3 7a00 	vldr	s15, [r3]
 8001722:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001726:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 800172a:	4b87      	ldr	r3, [pc, #540]	; (8001948 <filterUpdate+0x3dc>)
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001734:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8001738:	4b84      	ldr	r3, [pc, #528]	; (800194c <filterUpdate+0x3e0>)
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001742:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 8001746:	4b82      	ldr	r3, [pc, #520]	; (8001950 <filterUpdate+0x3e4>)
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001754:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8001758:	4b7a      	ldr	r3, [pc, #488]	; (8001944 <filterUpdate+0x3d8>)
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001766:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 800176a:	4b77      	ldr	r3, [pc, #476]	; (8001948 <filterUpdate+0x3dc>)
 800176c:	edd3 7a00 	vldr	s15, [r3]
 8001770:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001774:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001778:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 800177c:	4b71      	ldr	r3, [pc, #452]	; (8001944 <filterUpdate+0x3d8>)
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001786:	ee67 7a87 	vmul.f32	s15, s15, s14
 800178a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 800178e:	4b6e      	ldr	r3, [pc, #440]	; (8001948 <filterUpdate+0x3dc>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001798:	ee67 7a87 	vmul.f32	s15, s15, s14
 800179c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 80017a0:	4b6b      	ldr	r3, [pc, #428]	; (8001950 <filterUpdate+0x3e4>)
 80017a2:	ed93 7a00 	vldr	s14, [r3]
 80017a6:	4b6a      	ldr	r3, [pc, #424]	; (8001950 <filterUpdate+0x3e4>)
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 80017b4:	4b63      	ldr	r3, [pc, #396]	; (8001944 <filterUpdate+0x3d8>)
 80017b6:	ed93 7a00 	vldr	s14, [r3]
 80017ba:	4b62      	ldr	r3, [pc, #392]	; (8001944 <filterUpdate+0x3d8>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 80017c8:	4b5f      	ldr	r3, [pc, #380]	; (8001948 <filterUpdate+0x3dc>)
 80017ca:	ed93 7a00 	vldr	s14, [r3]
 80017ce:	4b5e      	ldr	r3, [pc, #376]	; (8001948 <filterUpdate+0x3dc>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 80017dc:	4b5b      	ldr	r3, [pc, #364]	; (800194c <filterUpdate+0x3e0>)
 80017de:	ed93 7a00 	vldr	s14, [r3]
 80017e2:	4b5a      	ldr	r3, [pc, #360]	; (800194c <filterUpdate+0x3e0>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ec:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80017f0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80017f4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017fc:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001800:	edd7 7a02 	vldr	s15, [r7, #8]
 8001804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001808:	ee37 7a27 	vadd.f32	s14, s14, s15
 800180c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001810:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001818:	ee37 7a27 	vadd.f32	s14, s14, s15
 800181c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001820:	edd7 7a01 	vldr	s15, [r7, #4]
 8001824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800182c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1
 8001830:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001834:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001838:	ee27 7a27 	vmul.f32	s14, s14, s15
 800183c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001840:	edd7 7a02 	vldr	s15, [r7, #8]
 8001844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001848:	ee37 7a67 	vsub.f32	s14, s14, s15
 800184c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001850:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001854:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001858:	4b3a      	ldr	r3, [pc, #232]	; (8001944 <filterUpdate+0x3d8>)
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001862:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001866:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800186a:	edd7 7a01 	vldr	s15, [r7, #4]
 800186e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001872:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001876:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800187a:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800187e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001882:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800188e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001892:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800189a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800189e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80018a2:	edd7 7a00 	vldr	s15, [r7]
 80018a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1
 80018aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ae:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
 80018b2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80018b6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80018ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <filterUpdate+0x3dc>)
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80018cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018d8:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80018dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018e8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80018ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80018f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018f8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80018fc:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8001900:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001904:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001910:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001914:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800191c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001920:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001924:	edd7 7a00 	vldr	s15, [r7]
 8001928:	ee66 7aa7 	vmul.f32	s15, s13, s15
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
 800192c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001930:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8001934:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001938:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800193c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001940:	e008      	b.n	8001954 <filterUpdate+0x3e8>
 8001942:	bf00      	nop
 8001944:	2000220c 	.word	0x2000220c
 8001948:	20002210 	.word	0x20002210
 800194c:	20002214 	.word	0x20002214
 8001950:	20002004 	.word	0x20002004
 8001954:	4b99      	ldr	r3, [pc, #612]	; (8001bbc <filterUpdate+0x650>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800195e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001962:	edd7 7a02 	vldr	s15, [r7, #8]
 8001966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800196a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800196e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001972:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001976:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800197a:	4b90      	ldr	r3, [pc, #576]	; (8001bbc <filterUpdate+0x650>)
 800197c:	edd3 7a00 	vldr	s15, [r3]
 8001980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001984:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001988:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800198c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001990:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001994:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001998:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800199c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019a0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80019a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80019b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80019c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c8:	eeb0 0a67 	vmov.f32	s0, s15
 80019cc:	f000 f9e0 	bl	8001d90 <invSqrt>
 80019d0:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 80019d4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019d8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 80019e4:	ed97 7a08 	vldr	s14, [r7, #32]
 80019e8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f0:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 80019f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80019f8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a00:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8001a04:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a08:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a10:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 8001a14:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a18:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001bc0 <filterUpdate+0x654>
 8001a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a20:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a28:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8001a2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a30:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001bc0 <filterUpdate+0x654>
 8001a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a38:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001a3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a40:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8001a44:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a48:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001bc0 <filterUpdate+0x654>
 8001a4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a50:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001a54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a58:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 8001a5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a60:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001bc0 <filterUpdate+0x654>
 8001a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a68:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a70:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <filterUpdate+0x658>)
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a82:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001a86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a8a:	4b4f      	ldr	r3, [pc, #316]	; (8001bc8 <filterUpdate+0x65c>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	4b4c      	ldr	r3, [pc, #304]	; (8001bc8 <filterUpdate+0x65c>)
 8001a96:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001a9a:	4b4a      	ldr	r3, [pc, #296]	; (8001bc4 <filterUpdate+0x658>)
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001aa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aa8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001aac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab0:	4b46      	ldr	r3, [pc, #280]	; (8001bcc <filterUpdate+0x660>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aba:	4b44      	ldr	r3, [pc, #272]	; (8001bcc <filterUpdate+0x660>)
 8001abc:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001ac0:	4b40      	ldr	r3, [pc, #256]	; (8001bc4 <filterUpdate+0x658>)
 8001ac2:	edd3 7a00 	vldr	s15, [r3]
 8001ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ace:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001ad2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ad6:	4b3e      	ldr	r3, [pc, #248]	; (8001bd0 <filterUpdate+0x664>)
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae0:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <filterUpdate+0x664>)
 8001ae2:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001ae6:	4b37      	ldr	r3, [pc, #220]	; (8001bc4 <filterUpdate+0x658>)
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001af0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001af4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001af8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001afc:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <filterUpdate+0x650>)
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b06:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <filterUpdate+0x650>)
 8001b08:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001b0c:	4b2e      	ldr	r3, [pc, #184]	; (8001bc8 <filterUpdate+0x65c>)
 8001b0e:	ed93 7a00 	vldr	s14, [r3]
 8001b12:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <filterUpdate+0x65c>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b1c:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <filterUpdate+0x660>)
 8001b1e:	edd3 6a00 	vldr	s13, [r3]
 8001b22:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <filterUpdate+0x660>)
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b30:	4b27      	ldr	r3, [pc, #156]	; (8001bd0 <filterUpdate+0x664>)
 8001b32:	edd3 6a00 	vldr	s13, [r3]
 8001b36:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <filterUpdate+0x664>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b44:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <filterUpdate+0x650>)
 8001b46:	edd3 6a00 	vldr	s13, [r3]
 8001b4a:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <filterUpdate+0x650>)
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b58:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5c:	f000 f918 	bl	8001d90 <invSqrt>
 8001b60:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 8001b64:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <filterUpdate+0x65c>)
 8001b66:	ed93 7a00 	vldr	s14, [r3]
 8001b6a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <filterUpdate+0x65c>)
 8001b74:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <filterUpdate+0x660>)
 8001b7a:	ed93 7a00 	vldr	s14, [r3]
 8001b7e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <filterUpdate+0x660>)
 8001b88:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001b8c:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <filterUpdate+0x664>)
 8001b8e:	ed93 7a00 	vldr	s14, [r3]
 8001b92:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <filterUpdate+0x664>)
 8001b9c:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <filterUpdate+0x650>)
 8001ba2:	ed93 7a00 	vldr	s14, [r3]
 8001ba6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bae:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <filterUpdate+0x650>)
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
}
 8001bb4:	bf00      	nop
 8001bb6:	3770      	adds	r7, #112	; 0x70
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20002214 	.word	0x20002214
 8001bc0:	3dcccccd 	.word	0x3dcccccd
 8001bc4:	20002240 	.word	0x20002240
 8001bc8:	20002004 	.word	0x20002004
 8001bcc:	2000220c 	.word	0x2000220c
 8001bd0:	20002210 	.word	0x20002210
 8001bd4:	00000000 	.word	0x00000000

08001bd8 <ToEulerAngles>:
 * @param Real component
 * @param i-component
 * @param j-component
 * @param k-component
 */
struct EulerAngles ToEulerAngles(float _q0, float _q1, float _q2, float _q3) {
 8001bd8:	b5b0      	push	{r4, r5, r7, lr}
 8001bda:	b090      	sub	sp, #64	; 0x40
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	ed87 0a07 	vstr	s0, [r7, #28]
 8001be2:	edc7 0a06 	vstr	s1, [r7, #24]
 8001be6:	ed87 1a05 	vstr	s2, [r7, #20]
 8001bea:	edc7 1a04 	vstr	s3, [r7, #16]
	struct EulerAngles angles;

	// roll (x-axis rotation)
	angles.x = atan2(2 * (_q0 * _q1 + _q2 * _q3),
 8001bee:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bf2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bfa:	edd7 6a05 	vldr	s13, [r7, #20]
 8001bfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c0e:	ee17 0a90 	vmov	r0, s15
 8001c12:	f7fe fca1 	bl	8000558 <__aeabi_f2d>
 8001c16:	4604      	mov	r4, r0
 8001c18:	460d      	mov	r5, r1
			1 - 2 * (_q1 * _q1 + _q2 * _q2));
 8001c1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c1e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c22:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c26:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c36:	ee77 7a67 	vsub.f32	s15, s14, s15
	angles.x = atan2(2 * (_q0 * _q1 + _q2 * _q3),
 8001c3a:	ee17 0a90 	vmov	r0, s15
 8001c3e:	f7fe fc8b 	bl	8000558 <__aeabi_f2d>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	ec43 2b11 	vmov	d1, r2, r3
 8001c4a:	ec45 4b10 	vmov	d0, r4, r5
 8001c4e:	f006 f80f 	bl	8007c70 <atan2>
 8001c52:	ec53 2b10 	vmov	r2, r3, d0
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe ffad 	bl	8000bb8 <__aeabi_d2f>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	623b      	str	r3, [r7, #32]

	// pitch (y-axis rotation)
	double sinp = 2 * (_q0 * _q2 - _q3 * _q1);
 8001c62:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c66:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c6e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001c72:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c82:	ee17 0a90 	vmov	r0, s15
 8001c86:	f7fe fc67 	bl	8000558 <__aeabi_f2d>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	if (abs((int) sinp) >= 1)
 8001c92:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c96:	f7fe ff67 	bl	8000b68 <__aeabi_d2iz>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	bfb8      	it	lt
 8001ca0:	425b      	neglt	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	dd0e      	ble.n	8001cc4 <ToEulerAngles+0xec>
		angles.y = copysign(M_PI / 2, sinp); // use 90 degrees if out of range
 8001ca6:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 8001caa:	ed9f 0b37 	vldr	d0, [pc, #220]	; 8001d88 <ToEulerAngles+0x1b0>
 8001cae:	f003 fd67 	bl	8005780 <copysign>
 8001cb2:	ec53 2b10 	vmov	r2, r3, d0
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f7fe ff7d 	bl	8000bb8 <__aeabi_d2f>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc2:	e00b      	b.n	8001cdc <ToEulerAngles+0x104>
	else
		angles.y = asin(sinp);
 8001cc4:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001cc8:	f005 ff98 	bl	8007bfc <asin>
 8001ccc:	ec53 2b10 	vmov	r2, r3, d0
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f7fe ff70 	bl	8000bb8 <__aeabi_d2f>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24

	// yaw (z-axis rotation)
	angles.z = atan2(2 * (_q0 * _q3 + _q1 * _q2),
 8001cdc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ce0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce8:	edd7 6a06 	vldr	s13, [r7, #24]
 8001cec:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cfc:	ee17 0a90 	vmov	r0, s15
 8001d00:	f7fe fc2a 	bl	8000558 <__aeabi_f2d>
 8001d04:	4604      	mov	r4, r0
 8001d06:	460d      	mov	r5, r1
			1 - 2 * (_q2 * _q2 + _q3 * _q3));
 8001d08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d0c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d10:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d24:	ee77 7a67 	vsub.f32	s15, s14, s15
	angles.z = atan2(2 * (_q0 * _q3 + _q1 * _q2),
 8001d28:	ee17 0a90 	vmov	r0, s15
 8001d2c:	f7fe fc14 	bl	8000558 <__aeabi_f2d>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	ec43 2b11 	vmov	d1, r2, r3
 8001d38:	ec45 4b10 	vmov	d0, r4, r5
 8001d3c:	f005 ff98 	bl	8007c70 <atan2>
 8001d40:	ec53 2b10 	vmov	r2, r3, d0
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	f7fe ff36 	bl	8000bb8 <__aeabi_d2f>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28

	return angles;
 8001d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d54:	f107 0220 	add.w	r2, r7, #32
 8001d58:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001d5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d64:	ee06 1a90 	vmov	s13, r1
 8001d68:	ee07 2a10 	vmov	s14, r2
 8001d6c:	ee07 3a90 	vmov	s15, r3
}
 8001d70:	eeb0 0a66 	vmov.f32	s0, s13
 8001d74:	eef0 0a47 	vmov.f32	s1, s14
 8001d78:	eeb0 1a67 	vmov.f32	s2, s15
 8001d7c:	3740      	adds	r7, #64	; 0x40
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bdb0      	pop	{r4, r5, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	f3af 8000 	nop.w
 8001d88:	54442d18 	.word	0x54442d18
 8001d8c:	3ff921fb 	.word	0x3ff921fb

08001d90 <invSqrt>:

/*
 * @brief Fast inverse Square root
 * @param The input value which will be converted to its inverse sqrt
 */
float invSqrt(float x) {
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8001d9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 8001dae:	f107 0310 	add.w	r3, r7, #16
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i >> 1);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	105a      	asrs	r2, r3, #1
 8001dba:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <invSqrt+0x9c>)
 8001dbc:	1a9b      	subs	r3, r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001dc8:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ddc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001de0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001de4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dec:	edc7 7a04 	vstr	s15, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001df0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001df4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001df8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e04:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001e08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e14:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	ee07 3a90 	vmov	s15, r3
}
 8001e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	5f3759df 	.word	0x5f3759df

08001e30 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e34:	b0b6      	sub	sp, #216	; 0xd8
 8001e36:	af1e      	add	r7, sp, #120	; 0x78
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e38:	f000 fe76 	bl	8002b28 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e3c:	f000 fad8 	bl	80023f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e40:	f000 fbd0 	bl	80025e4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001e44:	f000 fba4 	bl	8002590 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8001e48:	f000 fb6c 	bl	8002524 <MX_SPI1_Init>
	MX_I2C1_Init();
 8001e4c:	f000 fb3c 	bl	80024c8 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	sprintf((char*) buff, "\r\n###########################\r\n");
 8001e50:	49d1      	ldr	r1, [pc, #836]	; (8002198 <main+0x368>)
 8001e52:	48d2      	ldr	r0, [pc, #840]	; (800219c <main+0x36c>)
 8001e54:	f003 fca6 	bl	80057a4 <siprintf>
	HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 8001e58:	48d0      	ldr	r0, [pc, #832]	; (800219c <main+0x36c>)
 8001e5a:	f7fe f9c1 	bl	80001e0 <strlen>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e66:	49cd      	ldr	r1, [pc, #820]	; (800219c <main+0x36c>)
 8001e68:	48cd      	ldr	r0, [pc, #820]	; (80021a0 <main+0x370>)
 8001e6a:	f002 fd24 	bl	80048b6 <HAL_UART_Transmit>




	if (USE_BMI270) {
		bmi270_spi_init();
 8001e6e:	f7ff f86f 	bl	8000f50 <bmi270_spi_init>
		bmi270_spi_init_check();
 8001e72:	f7ff f94b 	bl	800110c <bmi270_spi_init_check>

		bmi270_pwr_conf(BMI270_PWR_MODE_PERF);
 8001e76:	2002      	movs	r0, #2
 8001e78:	f7ff f8bc 	bl	8000ff4 <bmi270_pwr_conf>
		bmi270_spi_write_8(REG_GYR_RANGE, range_2000);
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2043      	movs	r0, #67	; 0x43
 8001e80:	f7ff f962 	bl	8001148 <bmi270_spi_write_8>
		gyr_range = bmi270_getGyroRange();
 8001e84:	f7ff fa04 	bl	8001290 <bmi270_getGyroRange>
 8001e88:	eef0 7a40 	vmov.f32	s15, s0
 8001e8c:	4bc5      	ldr	r3, [pc, #788]	; (80021a4 <main+0x374>)
 8001e8e:	edc3 7a00 	vstr	s15, [r3]
		acc_range = bmi270_getAccelRange();
 8001e92:	f7ff fa2f 	bl	80012f4 <bmi270_getAccelRange>
 8001e96:	eef0 7a40 	vmov.f32	s15, s0
 8001e9a:	4bc3      	ldr	r3, [pc, #780]	; (80021a8 <main+0x378>)
 8001e9c:	edc3 7a00 	vstr	s15, [r3]
		zero_pos_map[ENC_Y] = as5048a_readToAngle(zero_pos[ENC_Y]);
		zero_pos_map[ENC_Z] = as5048a_readToAngle(zero_pos[ENC_Z]);
	}


	setSampleFreq();
 8001ea0:	f7ff fb3a 	bl	8001518 <setSampleFreq>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		t1 = HAL_GetTick();
 8001ea4:	f000 fea6 	bl	8002bf4 <HAL_GetTick>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4ac0      	ldr	r2, [pc, #768]	; (80021ac <main+0x37c>)
 8001eac:	6013      	str	r3, [r2, #0]
		setSampleFreq();
 8001eae:	f7ff fb33 	bl	8001518 <setSampleFreq>
			acc_y = acc_y_raw / AFS_SEL;
			acc_z = acc_z_raw / AFS_SEL;
		}

		if(USE_BMI270){
			gyr_x = bmi270_read_gyro(BMI270_AXIS_X);
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7ff f8de 	bl	8001074 <bmi270_read_gyro>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec2:	4bbb      	ldr	r3, [pc, #748]	; (80021b0 <main+0x380>)
 8001ec4:	edc3 7a00 	vstr	s15, [r3]
			gyr_y = bmi270_read_gyro(BMI270_AXIS_Y);
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f7ff f8d3 	bl	8001074 <bmi270_read_gyro>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ed8:	4bb6      	ldr	r3, [pc, #728]	; (80021b4 <main+0x384>)
 8001eda:	edc3 7a00 	vstr	s15, [r3]
			gyr_z = bmi270_read_gyro(BMI270_AXIS_Z);
 8001ede:	2002      	movs	r0, #2
 8001ee0:	f7ff f8c8 	bl	8001074 <bmi270_read_gyro>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eee:	4bb2      	ldr	r3, [pc, #712]	; (80021b8 <main+0x388>)
 8001ef0:	edc3 7a00 	vstr	s15, [r3]

			gyr_x = bmi270_lsb_to_dps(gyr_x, gyr_range);
 8001ef4:	4bae      	ldr	r3, [pc, #696]	; (80021b0 <main+0x380>)
 8001ef6:	edd3 7a00 	vldr	s15, [r3]
 8001efa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001efe:	ee17 3a90 	vmov	r3, s15
 8001f02:	b21b      	sxth	r3, r3
 8001f04:	4aa7      	ldr	r2, [pc, #668]	; (80021a4 <main+0x374>)
 8001f06:	edd2 7a00 	vldr	s15, [r2]
 8001f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fa40 	bl	8001394 <bmi270_lsb_to_dps>
 8001f14:	eef0 7a40 	vmov.f32	s15, s0
 8001f18:	4ba5      	ldr	r3, [pc, #660]	; (80021b0 <main+0x380>)
 8001f1a:	edc3 7a00 	vstr	s15, [r3]
			gyr_y = bmi270_lsb_to_dps(gyr_y, gyr_range);
 8001f1e:	4ba5      	ldr	r3, [pc, #660]	; (80021b4 <main+0x384>)
 8001f20:	edd3 7a00 	vldr	s15, [r3]
 8001f24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f28:	ee17 3a90 	vmov	r3, s15
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	4a9d      	ldr	r2, [pc, #628]	; (80021a4 <main+0x374>)
 8001f30:	edd2 7a00 	vldr	s15, [r2]
 8001f34:	eeb0 0a67 	vmov.f32	s0, s15
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fa2b 	bl	8001394 <bmi270_lsb_to_dps>
 8001f3e:	eef0 7a40 	vmov.f32	s15, s0
 8001f42:	4b9c      	ldr	r3, [pc, #624]	; (80021b4 <main+0x384>)
 8001f44:	edc3 7a00 	vstr	s15, [r3]
			gyr_z = bmi270_lsb_to_dps(gyr_z, gyr_range);
 8001f48:	4b9b      	ldr	r3, [pc, #620]	; (80021b8 <main+0x388>)
 8001f4a:	edd3 7a00 	vldr	s15, [r3]
 8001f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f52:	ee17 3a90 	vmov	r3, s15
 8001f56:	b21b      	sxth	r3, r3
 8001f58:	4a92      	ldr	r2, [pc, #584]	; (80021a4 <main+0x374>)
 8001f5a:	edd2 7a00 	vldr	s15, [r2]
 8001f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fa16 	bl	8001394 <bmi270_lsb_to_dps>
 8001f68:	eef0 7a40 	vmov.f32	s15, s0
 8001f6c:	4b92      	ldr	r3, [pc, #584]	; (80021b8 <main+0x388>)
 8001f6e:	edc3 7a00 	vstr	s15, [r3]

			acc_x = bmi270_read_accel(BMI270_AXIS_X);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7ff f8a4 	bl	80010c0 <bmi270_read_accel>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f82:	4b8e      	ldr	r3, [pc, #568]	; (80021bc <main+0x38c>)
 8001f84:	edc3 7a00 	vstr	s15, [r3]
			acc_y = bmi270_read_accel(BMI270_AXIS_Y);
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f7ff f899 	bl	80010c0 <bmi270_read_accel>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	ee07 3a90 	vmov	s15, r3
 8001f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f98:	4b89      	ldr	r3, [pc, #548]	; (80021c0 <main+0x390>)
 8001f9a:	edc3 7a00 	vstr	s15, [r3]
			acc_z = bmi270_read_accel(BMI270_AXIS_Z);
 8001f9e:	2002      	movs	r0, #2
 8001fa0:	f7ff f88e 	bl	80010c0 <bmi270_read_accel>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fae:	4b85      	ldr	r3, [pc, #532]	; (80021c4 <main+0x394>)
 8001fb0:	edc3 7a00 	vstr	s15, [r3]

			acc_x = bmi270_lsb_to_mps2(acc_x, acc_range);
 8001fb4:	4b81      	ldr	r3, [pc, #516]	; (80021bc <main+0x38c>)
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fbe:	ee17 3a90 	vmov	r3, s15
 8001fc2:	b21b      	sxth	r3, r3
 8001fc4:	4a78      	ldr	r2, [pc, #480]	; (80021a8 <main+0x378>)
 8001fc6:	edd2 7a00 	vldr	s15, [r2]
 8001fca:	eeb0 0a67 	vmov.f32	s0, s15
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff f9b8 	bl	8001344 <bmi270_lsb_to_mps2>
 8001fd4:	eef0 7a40 	vmov.f32	s15, s0
 8001fd8:	4b78      	ldr	r3, [pc, #480]	; (80021bc <main+0x38c>)
 8001fda:	edc3 7a00 	vstr	s15, [r3]
			acc_y = bmi270_lsb_to_mps2(acc_y, acc_range);
 8001fde:	4b78      	ldr	r3, [pc, #480]	; (80021c0 <main+0x390>)
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fe8:	ee17 3a90 	vmov	r3, s15
 8001fec:	b21b      	sxth	r3, r3
 8001fee:	4a6e      	ldr	r2, [pc, #440]	; (80021a8 <main+0x378>)
 8001ff0:	edd2 7a00 	vldr	s15, [r2]
 8001ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff f9a3 	bl	8001344 <bmi270_lsb_to_mps2>
 8001ffe:	eef0 7a40 	vmov.f32	s15, s0
 8002002:	4b6f      	ldr	r3, [pc, #444]	; (80021c0 <main+0x390>)
 8002004:	edc3 7a00 	vstr	s15, [r3]
			acc_z = bmi270_lsb_to_mps2(acc_z, acc_range);
 8002008:	4b6e      	ldr	r3, [pc, #440]	; (80021c4 <main+0x394>)
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002012:	ee17 3a90 	vmov	r3, s15
 8002016:	b21b      	sxth	r3, r3
 8002018:	4a63      	ldr	r2, [pc, #396]	; (80021a8 <main+0x378>)
 800201a:	edd2 7a00 	vldr	s15, [r2]
 800201e:	eeb0 0a67 	vmov.f32	s0, s15
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff f98e 	bl	8001344 <bmi270_lsb_to_mps2>
 8002028:	eef0 7a40 	vmov.f32	s15, s0
 800202c:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <main+0x394>)
 800202e:	edc3 7a00 	vstr	s15, [r3]
		}

		//Wait before updating quaternion. This avoids div by zero in different Quaternion functions.
		if (waitUpdate >= 1 && !USE_SIM) {
 8002032:	4b65      	ldr	r3, [pc, #404]	; (80021c8 <main+0x398>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d049      	beq.n	80020ce <main+0x29e>
			filterUpdate(gyr_x * DEG_TO_RAD, gyr_y * DEG_TO_RAD,
 800203a:	4b5d      	ldr	r3, [pc, #372]	; (80021b0 <main+0x380>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fa8a 	bl	8000558 <__aeabi_f2d>
 8002044:	a350      	add	r3, pc, #320	; (adr r3, 8002188 <main+0x358>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	f7fe fadd 	bl	8000608 <__aeabi_dmul>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	f7fe fdaf 	bl	8000bb8 <__aeabi_d2f>
 800205a:	4604      	mov	r4, r0
 800205c:	4b55      	ldr	r3, [pc, #340]	; (80021b4 <main+0x384>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa79 	bl	8000558 <__aeabi_f2d>
 8002066:	a348      	add	r3, pc, #288	; (adr r3, 8002188 <main+0x358>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	f7fe facc 	bl	8000608 <__aeabi_dmul>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	f7fe fd9e 	bl	8000bb8 <__aeabi_d2f>
 800207c:	4605      	mov	r5, r0
					gyr_z * DEG_TO_RAD, acc_x, acc_y, acc_z);
 800207e:	4b4e      	ldr	r3, [pc, #312]	; (80021b8 <main+0x388>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fa68 	bl	8000558 <__aeabi_f2d>
 8002088:	a33f      	add	r3, pc, #252	; (adr r3, 8002188 <main+0x358>)
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	f7fe fabb 	bl	8000608 <__aeabi_dmul>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
			filterUpdate(gyr_x * DEG_TO_RAD, gyr_y * DEG_TO_RAD,
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f7fe fd8d 	bl	8000bb8 <__aeabi_d2f>
 800209e:	4602      	mov	r2, r0
 80020a0:	4b46      	ldr	r3, [pc, #280]	; (80021bc <main+0x38c>)
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	4b46      	ldr	r3, [pc, #280]	; (80021c0 <main+0x390>)
 80020a8:	ed93 7a00 	vldr	s14, [r3]
 80020ac:	4b45      	ldr	r3, [pc, #276]	; (80021c4 <main+0x394>)
 80020ae:	edd3 6a00 	vldr	s13, [r3]
 80020b2:	eef0 2a66 	vmov.f32	s5, s13
 80020b6:	eeb0 2a47 	vmov.f32	s4, s14
 80020ba:	eef0 1a67 	vmov.f32	s3, s15
 80020be:	ee01 2a10 	vmov	s2, r2
 80020c2:	ee00 5a90 	vmov	s1, r5
 80020c6:	ee00 4a10 	vmov	s0, r4
 80020ca:	f7ff fa4f 	bl	800156c <filterUpdate>
			az_s = 0.0;
			filterUpdate(gx_s * DEG_TO_RAD, gy_s * DEG_TO_RAD,
					gz_s * DEG_TO_RAD, ax_s, ay_s, az_s);
		}

		waitUpdate++;
 80020ce:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <main+0x398>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4b3c      	ldr	r3, [pc, #240]	; (80021c8 <main+0x398>)
 80020d8:	701a      	strb	r2, [r3, #0]

		euler = ToEulerAngles(q0, q1, q2, q3);
 80020da:	4b3c      	ldr	r3, [pc, #240]	; (80021cc <main+0x39c>)
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <main+0x3a0>)
 80020e2:	ed93 7a00 	vldr	s14, [r3]
 80020e6:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <main+0x3a4>)
 80020e8:	edd3 6a00 	vldr	s13, [r3]
 80020ec:	4b3a      	ldr	r3, [pc, #232]	; (80021d8 <main+0x3a8>)
 80020ee:	ed93 6a00 	vldr	s12, [r3]
 80020f2:	eef0 1a46 	vmov.f32	s3, s12
 80020f6:	eeb0 1a66 	vmov.f32	s2, s13
 80020fa:	eef0 0a47 	vmov.f32	s1, s14
 80020fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002102:	f7ff fd69 	bl	8001bd8 <ToEulerAngles>
 8002106:	eef0 6a40 	vmov.f32	s13, s0
 800210a:	eeb0 7a60 	vmov.f32	s14, s1
 800210e:	eef0 7a41 	vmov.f32	s15, s2
 8002112:	4b32      	ldr	r3, [pc, #200]	; (80021dc <main+0x3ac>)
 8002114:	edc3 6a00 	vstr	s13, [r3]
 8002118:	ed83 7a01 	vstr	s14, [r3, #4]
 800211c:	edc3 7a02 	vstr	s15, [r3, #8]

		roll = euler.x * RAD_TO_DEG;
 8002120:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <main+0x3ac>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe fa17 	bl	8000558 <__aeabi_f2d>
 800212a:	a319      	add	r3, pc, #100	; (adr r3, 8002190 <main+0x360>)
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	f7fe fa6a 	bl	8000608 <__aeabi_dmul>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4610      	mov	r0, r2
 800213a:	4619      	mov	r1, r3
 800213c:	f7fe fd3c 	bl	8000bb8 <__aeabi_d2f>
 8002140:	4603      	mov	r3, r0
 8002142:	4a27      	ldr	r2, [pc, #156]	; (80021e0 <main+0x3b0>)
 8002144:	6013      	str	r3, [r2, #0]
		pitch = euler.y * RAD_TO_DEG;
 8002146:	4b25      	ldr	r3, [pc, #148]	; (80021dc <main+0x3ac>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fa04 	bl	8000558 <__aeabi_f2d>
 8002150:	a30f      	add	r3, pc, #60	; (adr r3, 8002190 <main+0x360>)
 8002152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002156:	f7fe fa57 	bl	8000608 <__aeabi_dmul>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4610      	mov	r0, r2
 8002160:	4619      	mov	r1, r3
 8002162:	f7fe fd29 	bl	8000bb8 <__aeabi_d2f>
 8002166:	4603      	mov	r3, r0
 8002168:	4a1e      	ldr	r2, [pc, #120]	; (80021e4 <main+0x3b4>)
 800216a:	6013      	str	r3, [r2, #0]
		yaw = euler.z * RAD_TO_DEG;
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <main+0x3ac>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f9f1 	bl	8000558 <__aeabi_f2d>
 8002176:	a306      	add	r3, pc, #24	; (adr r3, 8002190 <main+0x360>)
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	f7fe fa44 	bl	8000608 <__aeabi_dmul>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	e030      	b.n	80021e8 <main+0x3b8>
 8002186:	bf00      	nop
 8002188:	a226e211 	.word	0xa226e211
 800218c:	3f91df46 	.word	0x3f91df46
 8002190:	1aa9cdba 	.word	0x1aa9cdba
 8002194:	404ca5dc 	.word	0x404ca5dc
 8002198:	080088cc 	.word	0x080088cc
 800219c:	200022bc 	.word	0x200022bc
 80021a0:	20002530 	.word	0x20002530
 80021a4:	20002258 	.word	0x20002258
 80021a8:	200024c4 	.word	0x200024c4
 80021ac:	200024c8 	.word	0x200024c8
 80021b0:	20002218 	.word	0x20002218
 80021b4:	2000221c 	.word	0x2000221c
 80021b8:	20002220 	.word	0x20002220
 80021bc:	20002224 	.word	0x20002224
 80021c0:	20002228 	.word	0x20002228
 80021c4:	2000222c 	.word	0x2000222c
 80021c8:	20002230 	.word	0x20002230
 80021cc:	20002004 	.word	0x20002004
 80021d0:	2000220c 	.word	0x2000220c
 80021d4:	20002210 	.word	0x20002210
 80021d8:	20002214 	.word	0x20002214
 80021dc:	20002580 	.word	0x20002580
 80021e0:	20002578 	.word	0x20002578
 80021e4:	20002574 	.word	0x20002574
 80021e8:	4610      	mov	r0, r2
 80021ea:	4619      	mov	r1, r3
 80021ec:	f7fe fce4 	bl	8000bb8 <__aeabi_d2f>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4a69      	ldr	r2, [pc, #420]	; (8002398 <main+0x568>)
 80021f4:	6013      	str	r3, [r2, #0]

		sprintf((char*) buff, "gyr_range: %f\r\n"
 80021f6:	4b69      	ldr	r3, [pc, #420]	; (800239c <main+0x56c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe f9ac 	bl	8000558 <__aeabi_f2d>
 8002200:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 8002204:	4b66      	ldr	r3, [pc, #408]	; (80023a0 <main+0x570>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe f9a5 	bl	8000558 <__aeabi_f2d>
 800220e:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 8002212:	4b64      	ldr	r3, [pc, #400]	; (80023a4 <main+0x574>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f99e 	bl	8000558 <__aeabi_f2d>
 800221c:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8002220:	4b61      	ldr	r3, [pc, #388]	; (80023a8 <main+0x578>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe f997 	bl	8000558 <__aeabi_f2d>
 800222a:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 800222e:	4b5f      	ldr	r3, [pc, #380]	; (80023ac <main+0x57c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f990 	bl	8000558 <__aeabi_f2d>
 8002238:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 800223c:	4b5c      	ldr	r3, [pc, #368]	; (80023b0 <main+0x580>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe f989 	bl	8000558 <__aeabi_f2d>
 8002246:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 800224a:	4b5a      	ldr	r3, [pc, #360]	; (80023b4 <main+0x584>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f982 	bl	8000558 <__aeabi_f2d>
 8002254:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8002258:	4b57      	ldr	r3, [pc, #348]	; (80023b8 <main+0x588>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe f97b 	bl	8000558 <__aeabi_f2d>
 8002262:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8002266:	4b55      	ldr	r3, [pc, #340]	; (80023bc <main+0x58c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe f974 	bl	8000558 <__aeabi_f2d>
 8002270:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002274:	4b52      	ldr	r3, [pc, #328]	; (80023c0 <main+0x590>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f96d 	bl	8000558 <__aeabi_f2d>
 800227e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002282:	4b50      	ldr	r3, [pc, #320]	; (80023c4 <main+0x594>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f966 	bl	8000558 <__aeabi_f2d>
 800228c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002290:	4b4d      	ldr	r3, [pc, #308]	; (80023c8 <main+0x598>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f95f 	bl	8000558 <__aeabi_f2d>
 800229a:	e9c7 0100 	strd	r0, r1, [r7]
 800229e:	4b4b      	ldr	r3, [pc, #300]	; (80023cc <main+0x59c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe f958 	bl	8000558 <__aeabi_f2d>
 80022a8:	4682      	mov	sl, r0
 80022aa:	468b      	mov	fp, r1
 80022ac:	4b48      	ldr	r3, [pc, #288]	; (80023d0 <main+0x5a0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f951 	bl	8000558 <__aeabi_f2d>
 80022b6:	4680      	mov	r8, r0
 80022b8:	4689      	mov	r9, r1
 80022ba:	4b46      	ldr	r3, [pc, #280]	; (80023d4 <main+0x5a4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe f94a 	bl	8000558 <__aeabi_f2d>
 80022c4:	4604      	mov	r4, r0
 80022c6:	460d      	mov	r5, r1
 80022c8:	4b33      	ldr	r3, [pc, #204]	; (8002398 <main+0x568>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f943 	bl	8000558 <__aeabi_f2d>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 80022da:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
 80022de:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
 80022e2:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
 80022e6:	ed97 7b00 	vldr	d7, [r7]
 80022ea:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80022ee:	ed97 7b02 	vldr	d7, [r7, #8]
 80022f2:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80022f6:	ed97 7b04 	vldr	d7, [r7, #16]
 80022fa:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80022fe:	ed97 7b06 	vldr	d7, [r7, #24]
 8002302:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002306:	ed97 7b08 	vldr	d7, [r7, #32]
 800230a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800230e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002312:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002316:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800231a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800231e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002322:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002326:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800232a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800232e:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002332:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002336:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800233a:	ed8d 7b00 	vstr	d7, [sp]
 800233e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002342:	4925      	ldr	r1, [pc, #148]	; (80023d8 <main+0x5a8>)
 8002344:	4825      	ldr	r0, [pc, #148]	; (80023dc <main+0x5ac>)
 8002346:	f003 fa2d 	bl	80057a4 <siprintf>
				while_t,
				gyr_x, gyr_y, gyr_z, acc_x, acc_y, acc_z,
				q0, q1, q2, q3,
				roll, pitch, yaw);

		HAL_UART_Transmit(&huart2, buff, strlen((char*) buff), HAL_MAX_DELAY);
 800234a:	4824      	ldr	r0, [pc, #144]	; (80023dc <main+0x5ac>)
 800234c:	f7fd ff48 	bl	80001e0 <strlen>
 8002350:	4603      	mov	r3, r0
 8002352:	b29a      	uxth	r2, r3
 8002354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002358:	4920      	ldr	r1, [pc, #128]	; (80023dc <main+0x5ac>)
 800235a:	4821      	ldr	r0, [pc, #132]	; (80023e0 <main+0x5b0>)
 800235c:	f002 faab 	bl	80048b6 <HAL_UART_Transmit>

		HAL_Delay(sampleDelay);
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <main+0x5b4>)
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800236a:	ee17 0a90 	vmov	r0, s15
 800236e:	f000 fc4d 	bl	8002c0c <HAL_Delay>
		t2 = HAL_GetTick();
 8002372:	f000 fc3f 	bl	8002bf4 <HAL_GetTick>
 8002376:	4603      	mov	r3, r0
 8002378:	4a1b      	ldr	r2, [pc, #108]	; (80023e8 <main+0x5b8>)
 800237a:	6013      	str	r3, [r2, #0]
		while_t = t2 - t1;
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <main+0x5b8>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <main+0x5bc>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <main+0x574>)
 8002390:	edc3 7a00 	vstr	s15, [r3]
		t1 = HAL_GetTick();
 8002394:	e586      	b.n	8001ea4 <main+0x74>
 8002396:	bf00      	nop
 8002398:	2000252c 	.word	0x2000252c
 800239c:	200024c4 	.word	0x200024c4
 80023a0:	20002258 	.word	0x20002258
 80023a4:	2000200c 	.word	0x2000200c
 80023a8:	20002218 	.word	0x20002218
 80023ac:	2000221c 	.word	0x2000221c
 80023b0:	20002220 	.word	0x20002220
 80023b4:	20002224 	.word	0x20002224
 80023b8:	20002228 	.word	0x20002228
 80023bc:	2000222c 	.word	0x2000222c
 80023c0:	20002004 	.word	0x20002004
 80023c4:	2000220c 	.word	0x2000220c
 80023c8:	20002210 	.word	0x20002210
 80023cc:	20002214 	.word	0x20002214
 80023d0:	20002578 	.word	0x20002578
 80023d4:	20002574 	.word	0x20002574
 80023d8:	080088ec 	.word	0x080088ec
 80023dc:	200022bc 	.word	0x200022bc
 80023e0:	20002530 	.word	0x20002530
 80023e4:	20002008 	.word	0x20002008
 80023e8:	200024bc 	.word	0x200024bc
 80023ec:	200024c8 	.word	0x200024c8

080023f0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b094      	sub	sp, #80	; 0x50
 80023f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80023f6:	f107 0320 	add.w	r3, r7, #32
 80023fa:	2230      	movs	r2, #48	; 0x30
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f002 fd4c 	bl	8004e9c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002414:	2300      	movs	r3, #0
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	4b29      	ldr	r3, [pc, #164]	; (80024c0 <SystemClock_Config+0xd0>)
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	4a28      	ldr	r2, [pc, #160]	; (80024c0 <SystemClock_Config+0xd0>)
 800241e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002422:	6413      	str	r3, [r2, #64]	; 0x40
 8002424:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <SystemClock_Config+0xd0>)
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002430:	2300      	movs	r3, #0
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <SystemClock_Config+0xd4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800243c:	4a21      	ldr	r2, [pc, #132]	; (80024c4 <SystemClock_Config+0xd4>)
 800243e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b1f      	ldr	r3, [pc, #124]	; (80024c4 <SystemClock_Config+0xd4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800244c:	607b      	str	r3, [r7, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002450:	2302      	movs	r3, #2
 8002452:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002454:	2301      	movs	r3, #1
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002458:	2310      	movs	r3, #16
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800245c:	2302      	movs	r3, #2
 800245e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002460:	2300      	movs	r3, #0
 8002462:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8002464:	2310      	movs	r3, #16
 8002466:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002468:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800246c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800246e:	2304      	movs	r3, #4
 8002470:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002472:	2307      	movs	r3, #7
 8002474:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002476:	f107 0320 	add.w	r3, r7, #32
 800247a:	4618      	mov	r0, r3
 800247c:	f000 ffb2 	bl	80033e4 <HAL_RCC_OscConfig>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <SystemClock_Config+0x9a>
		Error_Handler();
 8002486:	f000 f91d 	bl	80026c4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800248a:	230f      	movs	r3, #15
 800248c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800248e:	2302      	movs	r3, #2
 8002490:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800249a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80024a0:	f107 030c 	add.w	r3, r7, #12
 80024a4:	2102      	movs	r1, #2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f001 fa14 	bl	80038d4 <HAL_RCC_ClockConfig>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <SystemClock_Config+0xc6>
		Error_Handler();
 80024b2:	f000 f907 	bl	80026c4 <Error_Handler>
	}
}
 80024b6:	bf00      	nop
 80024b8:	3750      	adds	r7, #80	; 0x50
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40007000 	.word	0x40007000

080024c8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <MX_I2C1_Init+0x50>)
 80024ce:	4a13      	ldr	r2, [pc, #76]	; (800251c <MX_I2C1_Init+0x54>)
 80024d0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <MX_I2C1_Init+0x50>)
 80024d4:	4a12      	ldr	r2, [pc, #72]	; (8002520 <MX_I2C1_Init+0x58>)
 80024d6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <MX_I2C1_Init+0x50>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <MX_I2C1_Init+0x50>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <MX_I2C1_Init+0x50>)
 80024e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024ea:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024ec:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <MX_I2C1_Init+0x50>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <MX_I2C1_Init+0x50>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <MX_I2C1_Init+0x50>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <MX_I2C1_Init+0x50>)
 8002500:	2200      	movs	r2, #0
 8002502:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002504:	4804      	ldr	r0, [pc, #16]	; (8002518 <MX_I2C1_Init+0x50>)
 8002506:	f000 fe29 	bl	800315c <HAL_I2C_Init>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002510:	f000 f8d8 	bl	80026c4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}
 8002518:	2000225c 	.word	0x2000225c
 800251c:	40005400 	.word	0x40005400
 8002520:	00061a80 	.word	0x00061a80

08002524 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002528:	4b17      	ldr	r3, [pc, #92]	; (8002588 <MX_SPI1_Init+0x64>)
 800252a:	4a18      	ldr	r2, [pc, #96]	; (800258c <MX_SPI1_Init+0x68>)
 800252c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800252e:	4b16      	ldr	r3, [pc, #88]	; (8002588 <MX_SPI1_Init+0x64>)
 8002530:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002534:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002536:	4b14      	ldr	r3, [pc, #80]	; (8002588 <MX_SPI1_Init+0x64>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <MX_SPI1_Init+0x64>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002542:	4b11      	ldr	r3, [pc, #68]	; (8002588 <MX_SPI1_Init+0x64>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002548:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <MX_SPI1_Init+0x64>)
 800254a:	2200      	movs	r2, #0
 800254c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <MX_SPI1_Init+0x64>)
 8002550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002554:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <MX_SPI1_Init+0x64>)
 8002558:	2220      	movs	r2, #32
 800255a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <MX_SPI1_Init+0x64>)
 800255e:	2200      	movs	r2, #0
 8002560:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <MX_SPI1_Init+0x64>)
 8002564:	2200      	movs	r2, #0
 8002566:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002568:	4b07      	ldr	r3, [pc, #28]	; (8002588 <MX_SPI1_Init+0x64>)
 800256a:	2200      	movs	r2, #0
 800256c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <MX_SPI1_Init+0x64>)
 8002570:	220a      	movs	r2, #10
 8002572:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002574:	4804      	ldr	r0, [pc, #16]	; (8002588 <MX_SPI1_Init+0x64>)
 8002576:	f001 fba9 	bl	8003ccc <HAL_SPI_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_SPI1_Init+0x60>
		Error_Handler();
 8002580:	f000 f8a0 	bl	80026c4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}
 8002588:	200024d4 	.word	0x200024d4
 800258c:	40013000 	.word	0x40013000

08002590 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <MX_USART2_UART_Init+0x50>)
 8002598:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 800259c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025a0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025b6:	220c      	movs	r2, #12
 80025b8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80025c6:	4805      	ldr	r0, [pc, #20]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025c8:	f002 f928 	bl	800481c <HAL_UART_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80025d2:	f000 f877 	bl	80026c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20002530 	.word	0x20002530
 80025e0:	40004400 	.word	0x40004400

080025e4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	60da      	str	r2, [r3, #12]
 80025f8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	4b2e      	ldr	r3, [pc, #184]	; (80026b8 <MX_GPIO_Init+0xd4>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a2d      	ldr	r2, [pc, #180]	; (80026b8 <MX_GPIO_Init+0xd4>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b2b      	ldr	r3, [pc, #172]	; (80026b8 <MX_GPIO_Init+0xd4>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <MX_GPIO_Init+0xd4>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a26      	ldr	r2, [pc, #152]	; (80026b8 <MX_GPIO_Init+0xd4>)
 8002620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <MX_GPIO_Init+0xd4>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <MX_GPIO_Init+0xd4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a1f      	ldr	r2, [pc, #124]	; (80026b8 <MX_GPIO_Init+0xd4>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <MX_GPIO_Init+0xd4>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <MX_GPIO_Init+0xd4>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a18      	ldr	r2, [pc, #96]	; (80026b8 <MX_GPIO_Init+0xd4>)
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <MX_GPIO_Init+0xd4>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6,
 800266a:	2200      	movs	r2, #0
 800266c:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8002670:	4812      	ldr	r0, [pc, #72]	; (80026bc <MX_GPIO_Init+0xd8>)
 8002672:	f000 fd59 	bl	8003128 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002676:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800267a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800267c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002680:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	4619      	mov	r1, r3
 800268c:	480c      	ldr	r0, [pc, #48]	; (80026c0 <MX_GPIO_Init+0xdc>)
 800268e:	f000 fbc7 	bl	8002e20 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB4 PB5 PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8002692:	f44f 638e 	mov.w	r3, #1136	; 0x470
 8002696:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002698:	2301      	movs	r3, #1
 800269a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a0:	2300      	movs	r3, #0
 80026a2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	4619      	mov	r1, r3
 80026aa:	4804      	ldr	r0, [pc, #16]	; (80026bc <MX_GPIO_Init+0xd8>)
 80026ac:	f000 fbb8 	bl	8002e20 <HAL_GPIO_Init>

}
 80026b0:	bf00      	nop
 80026b2:	3728      	adds	r7, #40	; 0x28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40020400 	.word	0x40020400
 80026c0:	40020800 	.word	0x40020800

080026c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
 \brief   Disable IRQ Interrupts
 \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void) {
	__ASM volatile ("cpsid i" : : : "memory");
 80026c8:	b672      	cpsid	i
}
 80026ca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80026cc:	e7fe      	b.n	80026cc <Error_Handler+0x8>
	...

080026d0 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_MspInit+0x4c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	4a0f      	ldr	r2, [pc, #60]	; (800271c <HAL_MspInit+0x4c>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_MspInit+0x4c>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_MspInit+0x4c>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4a08      	ldr	r2, [pc, #32]	; (800271c <HAL_MspInit+0x4c>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_MspInit+0x4c>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800270e:	2007      	movs	r0, #7
 8002710:	f000 fb52 	bl	8002db8 <HAL_NVIC_SetPriorityGrouping>
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40023800 	.word	0x40023800

08002720 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
	if (hi2c->Instance == I2C1) {
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a19      	ldr	r2, [pc, #100]	; (80027a4 <HAL_I2C_MspInit+0x84>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d12c      	bne.n	800279c <HAL_I2C_MspInit+0x7c>
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <HAL_I2C_MspInit+0x88>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a17      	ldr	r2, [pc, #92]	; (80027a8 <HAL_I2C_MspInit+0x88>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <HAL_I2C_MspInit+0x88>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	693b      	ldr	r3, [r7, #16]
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800275e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002762:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002764:	2312      	movs	r3, #18
 8002766:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276c:	2303      	movs	r3, #3
 800276e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002770:	2304      	movs	r3, #4
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	4619      	mov	r1, r3
 800277a:	480c      	ldr	r0, [pc, #48]	; (80027ac <HAL_I2C_MspInit+0x8c>)
 800277c:	f000 fb50 	bl	8002e20 <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_I2C_MspInit+0x88>)
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <HAL_I2C_MspInit+0x88>)
 800278a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800278e:	6413      	str	r3, [r2, #64]	; 0x40
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_I2C_MspInit+0x88>)
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}

}
 800279c:	bf00      	nop
 800279e:	3728      	adds	r7, #40	; 0x28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40005400 	.word	0x40005400
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40020400 	.word	0x40020400

080027b0 <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
	if (hspi->Instance == SPI1) {
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a19      	ldr	r2, [pc, #100]	; (8002834 <HAL_SPI_MspInit+0x84>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d12b      	bne.n	800282a <HAL_SPI_MspInit+0x7a>
		/* USER CODE BEGIN SPI1_MspInit 0 */

		/* USER CODE END SPI1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	4b18      	ldr	r3, [pc, #96]	; (8002838 <HAL_SPI_MspInit+0x88>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	4a17      	ldr	r2, [pc, #92]	; (8002838 <HAL_SPI_MspInit+0x88>)
 80027dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027e0:	6453      	str	r3, [r2, #68]	; 0x44
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_SPI_MspInit+0x88>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_SPI_MspInit+0x88>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a10      	ldr	r2, [pc, #64]	; (8002838 <HAL_SPI_MspInit+0x88>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <HAL_SPI_MspInit+0x88>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
		/**SPI1 GPIO Configuration
		 PA5     ------> SPI1_SCK
		 PA6     ------> SPI1_MISO
		 PA7     ------> SPI1_MOSI
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 800280a:	23e0      	movs	r3, #224	; 0xe0
 800280c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280e:	2302      	movs	r3, #2
 8002810:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002816:	2303      	movs	r3, #3
 8002818:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800281a:	2305      	movs	r3, #5
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281e:	f107 0314 	add.w	r3, r7, #20
 8002822:	4619      	mov	r1, r3
 8002824:	4805      	ldr	r0, [pc, #20]	; (800283c <HAL_SPI_MspInit+0x8c>)
 8002826:	f000 fafb 	bl	8002e20 <HAL_GPIO_Init>
		/* USER CODE BEGIN SPI1_MspInit 1 */

		/* USER CODE END SPI1_MspInit 1 */
	}

}
 800282a:	bf00      	nop
 800282c:	3728      	adds	r7, #40	; 0x28
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40013000 	.word	0x40013000
 8002838:	40023800 	.word	0x40023800
 800283c:	40020000 	.word	0x40020000

08002840 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
	if (huart->Instance == USART2) {
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a19      	ldr	r2, [pc, #100]	; (80028c4 <HAL_UART_MspInit+0x84>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d12b      	bne.n	80028ba <HAL_UART_MspInit+0x7a>
		/* USER CODE BEGIN USART2_MspInit 0 */

		/* USER CODE END USART2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <HAL_UART_MspInit+0x88>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	4a17      	ldr	r2, [pc, #92]	; (80028c8 <HAL_UART_MspInit+0x88>)
 800286c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002870:	6413      	str	r3, [r2, #64]	; 0x40
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <HAL_UART_MspInit+0x88>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_UART_MspInit+0x88>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a10      	ldr	r2, [pc, #64]	; (80028c8 <HAL_UART_MspInit+0x88>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <HAL_UART_MspInit+0x88>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
		/**USART2 GPIO Configuration
		 PA2     ------> USART2_TX
		 PA3     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 800289a:	230c      	movs	r3, #12
 800289c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028aa:	2307      	movs	r3, #7
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ae:	f107 0314 	add.w	r3, r7, #20
 80028b2:	4619      	mov	r1, r3
 80028b4:	4805      	ldr	r0, [pc, #20]	; (80028cc <HAL_UART_MspInit+0x8c>)
 80028b6:	f000 fab3 	bl	8002e20 <HAL_GPIO_Init>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}

}
 80028ba:	bf00      	nop
 80028bc:	3728      	adds	r7, #40	; 0x28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40004400 	.word	0x40004400
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40020000 	.word	0x40020000

080028d0 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80028d4:	e7fe      	b.n	80028d4 <NMI_Handler+0x4>

080028d6 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80028da:	e7fe      	b.n	80028da <HardFault_Handler+0x4>

080028dc <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80028e0:	e7fe      	b.n	80028e0 <MemManage_Handler+0x4>

080028e2 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80028e6:	e7fe      	b.n	80028e6 <BusFault_Handler+0x4>

080028e8 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80028ec:	e7fe      	b.n	80028ec <UsageFault_Handler+0x4>

080028ee <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800291c:	f000 f956 	bl	8002bcc <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	bd80      	pop	{r7, pc}

08002924 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
	return 1;
 8002928:	2301      	movs	r3, #1
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <_kill>:

int _kill(int pid, int sig) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800293e:	f002 fa83 	bl	8004e48 <__errno>
 8002942:	4603      	mov	r3, r0
 8002944:	2216      	movs	r2, #22
 8002946:	601a      	str	r2, [r3, #0]
	return -1;
 8002948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <_exit>:

void _exit(int status) {
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800295c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff ffe7 	bl	8002934 <_kill>
	while (1) {
 8002966:	e7fe      	b.n	8002966 <_exit+0x12>

08002968 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	e00a      	b.n	8002990 <_read+0x28>
		*ptr++ = __io_getchar();
 800297a:	f3af 8000 	nop.w
 800297e:	4601      	mov	r1, r0
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	60ba      	str	r2, [r7, #8]
 8002986:	b2ca      	uxtb	r2, r1
 8002988:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	3301      	adds	r3, #1
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	dbf0      	blt.n	800297a <_read+0x12>
	}

	return len;
 8002998:	687b      	ldr	r3, [r7, #4]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b086      	sub	sp, #24
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	e009      	b.n	80029c8 <_write+0x26>
		__io_putchar(*ptr++);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	60ba      	str	r2, [r7, #8]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	3301      	adds	r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	dbf1      	blt.n	80029b4 <_write+0x12>
	}
	return len;
 80029d0:	687b      	ldr	r3, [r7, #4]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <_close>:

int _close(int file) {
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
	return -1;
 80029e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <_fstat>:

int _fstat(int file, struct stat *st) {
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a02:	605a      	str	r2, [r3, #4]
	return 0;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <_isatty>:

int _isatty(int file) {
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
	return 1;
 8002a1a:	2301      	movs	r3, #1
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
	return 0;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002a4c:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002a4e:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002a58:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <_sbrk+0x64>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <_sbrk+0x64>)
 8002a62:	4a12      	ldr	r2, [pc, #72]	; (8002aac <_sbrk+0x68>)
 8002a64:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <_sbrk+0x64>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d207      	bcs.n	8002a84 <_sbrk+0x40>
		errno = ENOMEM;
 8002a74:	f002 f9e8 	bl	8004e48 <__errno>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	220c      	movs	r2, #12
 8002a7c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a82:	e009      	b.n	8002a98 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <_sbrk+0x64>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002a8a:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <_sbrk+0x64>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	4a05      	ldr	r2, [pc, #20]	; (8002aa8 <_sbrk+0x64>)
 8002a94:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002a96:	68fb      	ldr	r3, [r7, #12]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	20018000 	.word	0x20018000
 8002aa4:	00000400 	.word	0x00000400
 8002aa8:	20002234 	.word	0x20002234
 8002aac:	200025b0 	.word	0x200025b0

08002ab0 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <SystemInit+0x20>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <SystemInit+0x20>)
 8002abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ad8:	480d      	ldr	r0, [pc, #52]	; (8002b10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ada:	490e      	ldr	r1, [pc, #56]	; (8002b14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002adc:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ae0:	e002      	b.n	8002ae8 <LoopCopyDataInit>

08002ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ae6:	3304      	adds	r3, #4

08002ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aec:	d3f9      	bcc.n	8002ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aee:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002af0:	4c0b      	ldr	r4, [pc, #44]	; (8002b20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af4:	e001      	b.n	8002afa <LoopFillZerobss>

08002af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af8:	3204      	adds	r2, #4

08002afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002afc:	d3fb      	bcc.n	8002af6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002afe:	f7ff ffd7 	bl	8002ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b02:	f002 f9a7 	bl	8004e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b06:	f7ff f993 	bl	8001e30 <main>
  bx  lr    
 8002b0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b14:	200021f0 	.word	0x200021f0
  ldr r2, =_sidata
 8002b18:	08008e38 	.word	0x08008e38
  ldr r2, =_sbss
 8002b1c:	200021f0 	.word	0x200021f0
  ldr r4, =_ebss
 8002b20:	200025ac 	.word	0x200025ac

08002b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b24:	e7fe      	b.n	8002b24 <ADC_IRQHandler>
	...

08002b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_Init+0x40>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0d      	ldr	r2, [pc, #52]	; (8002b68 <HAL_Init+0x40>)
 8002b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_Init+0x40>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <HAL_Init+0x40>)
 8002b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b44:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <HAL_Init+0x40>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a07      	ldr	r2, [pc, #28]	; (8002b68 <HAL_Init+0x40>)
 8002b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b50:	2003      	movs	r0, #3
 8002b52:	f000 f931 	bl	8002db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f000 f808 	bl	8002b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b5c:	f7ff fdb8 	bl	80026d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023c00 	.word	0x40023c00

08002b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b74:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_InitTick+0x54>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <HAL_InitTick+0x58>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f93b 	bl	8002e06 <HAL_SYSTICK_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e00e      	b.n	8002bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b0f      	cmp	r3, #15
 8002b9e:	d80a      	bhi.n	8002bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ba8:	f000 f911 	bl	8002dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bac:	4a06      	ldr	r2, [pc, #24]	; (8002bc8 <HAL_InitTick+0x5c>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e000      	b.n	8002bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20002010 	.word	0x20002010
 8002bc4:	20002018 	.word	0x20002018
 8002bc8:	20002014 	.word	0x20002014

08002bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_IncTick+0x20>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_IncTick+0x24>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4413      	add	r3, r2
 8002bdc:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <HAL_IncTick+0x24>)
 8002bde:	6013      	str	r3, [r2, #0]
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20002018 	.word	0x20002018
 8002bf0:	20002598 	.word	0x20002598

08002bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <HAL_GetTick+0x14>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20002598 	.word	0x20002598

08002c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c14:	f7ff ffee 	bl	8002bf4 <HAL_GetTick>
 8002c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c24:	d005      	beq.n	8002c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c26:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <HAL_Delay+0x44>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c32:	bf00      	nop
 8002c34:	f7ff ffde 	bl	8002bf4 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d8f7      	bhi.n	8002c34 <HAL_Delay+0x28>
  {
  }
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20002018 	.word	0x20002018

08002c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <__NVIC_SetPriorityGrouping+0x44>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c70:	4013      	ands	r3, r2
 8002c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c86:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <__NVIC_SetPriorityGrouping+0x44>)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	60d3      	str	r3, [r2, #12]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca0:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	0a1b      	lsrs	r3, r3, #8
 8002ca6:	f003 0307 	and.w	r3, r3, #7
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	db0a      	blt.n	8002ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	490c      	ldr	r1, [pc, #48]	; (8002d04 <__NVIC_SetPriority+0x4c>)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	0112      	lsls	r2, r2, #4
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	440b      	add	r3, r1
 8002cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce0:	e00a      	b.n	8002cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4908      	ldr	r1, [pc, #32]	; (8002d08 <__NVIC_SetPriority+0x50>)
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	3b04      	subs	r3, #4
 8002cf0:	0112      	lsls	r2, r2, #4
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	761a      	strb	r2, [r3, #24]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000e100 	.word	0xe000e100
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b089      	sub	sp, #36	; 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f1c3 0307 	rsb	r3, r3, #7
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	bf28      	it	cs
 8002d2a:	2304      	movcs	r3, #4
 8002d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3304      	adds	r3, #4
 8002d32:	2b06      	cmp	r3, #6
 8002d34:	d902      	bls.n	8002d3c <NVIC_EncodePriority+0x30>
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3b03      	subs	r3, #3
 8002d3a:	e000      	b.n	8002d3e <NVIC_EncodePriority+0x32>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	401a      	ands	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	43d9      	mvns	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	4313      	orrs	r3, r2
         );
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3724      	adds	r7, #36	; 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d84:	d301      	bcc.n	8002d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d86:	2301      	movs	r3, #1
 8002d88:	e00f      	b.n	8002daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <SysTick_Config+0x40>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d92:	210f      	movs	r1, #15
 8002d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d98:	f7ff ff8e 	bl	8002cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <SysTick_Config+0x40>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002da2:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <SysTick_Config+0x40>)
 8002da4:	2207      	movs	r2, #7
 8002da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	e000e010 	.word	0xe000e010

08002db8 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff ff47 	bl	8002c54 <__NVIC_SetPriorityGrouping>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8002de0:	f7ff ff5c 	bl	8002c9c <__NVIC_GetPriorityGrouping>
 8002de4:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	6978      	ldr	r0, [r7, #20]
 8002dec:	f7ff ff8e 	bl	8002d0c <NVIC_EncodePriority>
 8002df0:	4602      	mov	r2, r0
 8002df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df6:	4611      	mov	r1, r2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ff5d 	bl	8002cb8 <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002dfe:	bf00      	nop
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff ffb0 	bl	8002d74 <SysTick_Config>
 8002e14:	4603      	mov	r3, r0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	; 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	e159      	b.n	80030f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	f040 8148 	bne.w	80030ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d005      	beq.n	8002e72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d130      	bne.n	8002ed4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 0201 	and.w	r2, r3, #1
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d017      	beq.n	8002f10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	2203      	movs	r2, #3
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d123      	bne.n	8002f64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	08da      	lsrs	r2, r3, #3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3208      	adds	r2, #8
 8002f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	220f      	movs	r2, #15
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	08da      	lsrs	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3208      	adds	r2, #8
 8002f5e:	69b9      	ldr	r1, [r7, #24]
 8002f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	2203      	movs	r2, #3
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0203 	and.w	r2, r3, #3
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80a2 	beq.w	80030ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	4b57      	ldr	r3, [pc, #348]	; (8003108 <HAL_GPIO_Init+0x2e8>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	4a56      	ldr	r2, [pc, #344]	; (8003108 <HAL_GPIO_Init+0x2e8>)
 8002fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb6:	4b54      	ldr	r3, [pc, #336]	; (8003108 <HAL_GPIO_Init+0x2e8>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fc2:	4a52      	ldr	r2, [pc, #328]	; (800310c <HAL_GPIO_Init+0x2ec>)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	3302      	adds	r3, #2
 8002fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	220f      	movs	r2, #15
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a49      	ldr	r2, [pc, #292]	; (8003110 <HAL_GPIO_Init+0x2f0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d019      	beq.n	8003022 <HAL_GPIO_Init+0x202>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a48      	ldr	r2, [pc, #288]	; (8003114 <HAL_GPIO_Init+0x2f4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_GPIO_Init+0x1fe>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a47      	ldr	r2, [pc, #284]	; (8003118 <HAL_GPIO_Init+0x2f8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00d      	beq.n	800301a <HAL_GPIO_Init+0x1fa>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a46      	ldr	r2, [pc, #280]	; (800311c <HAL_GPIO_Init+0x2fc>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d007      	beq.n	8003016 <HAL_GPIO_Init+0x1f6>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a45      	ldr	r2, [pc, #276]	; (8003120 <HAL_GPIO_Init+0x300>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <HAL_GPIO_Init+0x1f2>
 800300e:	2304      	movs	r3, #4
 8003010:	e008      	b.n	8003024 <HAL_GPIO_Init+0x204>
 8003012:	2307      	movs	r3, #7
 8003014:	e006      	b.n	8003024 <HAL_GPIO_Init+0x204>
 8003016:	2303      	movs	r3, #3
 8003018:	e004      	b.n	8003024 <HAL_GPIO_Init+0x204>
 800301a:	2302      	movs	r3, #2
 800301c:	e002      	b.n	8003024 <HAL_GPIO_Init+0x204>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <HAL_GPIO_Init+0x204>
 8003022:	2300      	movs	r3, #0
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	f002 0203 	and.w	r2, r2, #3
 800302a:	0092      	lsls	r2, r2, #2
 800302c:	4093      	lsls	r3, r2
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003034:	4935      	ldr	r1, [pc, #212]	; (800310c <HAL_GPIO_Init+0x2ec>)
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	089b      	lsrs	r3, r3, #2
 800303a:	3302      	adds	r3, #2
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003042:	4b38      	ldr	r3, [pc, #224]	; (8003124 <HAL_GPIO_Init+0x304>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003066:	4a2f      	ldr	r2, [pc, #188]	; (8003124 <HAL_GPIO_Init+0x304>)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800306c:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <HAL_GPIO_Init+0x304>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003090:	4a24      	ldr	r2, [pc, #144]	; (8003124 <HAL_GPIO_Init+0x304>)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003096:	4b23      	ldr	r3, [pc, #140]	; (8003124 <HAL_GPIO_Init+0x304>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ba:	4a1a      	ldr	r2, [pc, #104]	; (8003124 <HAL_GPIO_Init+0x304>)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030c0:	4b18      	ldr	r3, [pc, #96]	; (8003124 <HAL_GPIO_Init+0x304>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030e4:	4a0f      	ldr	r2, [pc, #60]	; (8003124 <HAL_GPIO_Init+0x304>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3301      	adds	r3, #1
 80030ee:	61fb      	str	r3, [r7, #28]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b0f      	cmp	r3, #15
 80030f4:	f67f aea2 	bls.w	8002e3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	3724      	adds	r7, #36	; 0x24
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
 800310c:	40013800 	.word	0x40013800
 8003110:	40020000 	.word	0x40020000
 8003114:	40020400 	.word	0x40020400
 8003118:	40020800 	.word	0x40020800
 800311c:	40020c00 	.word	0x40020c00
 8003120:	40021000 	.word	0x40021000
 8003124:	40013c00 	.word	0x40013c00

08003128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	807b      	strh	r3, [r7, #2]
 8003134:	4613      	mov	r3, r2
 8003136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003138:	787b      	ldrb	r3, [r7, #1]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800313e:	887a      	ldrh	r2, [r7, #2]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003144:	e003      	b.n	800314e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003146:	887b      	ldrh	r3, [r7, #2]
 8003148:	041a      	lsls	r2, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	619a      	str	r2, [r3, #24]
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e12b      	b.n	80033c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff facc 	bl	8002720 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2224      	movs	r2, #36	; 0x24
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031c0:	f000 fd5c 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 80031c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4a81      	ldr	r2, [pc, #516]	; (80033d0 <HAL_I2C_Init+0x274>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d807      	bhi.n	80031e0 <HAL_I2C_Init+0x84>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4a80      	ldr	r2, [pc, #512]	; (80033d4 <HAL_I2C_Init+0x278>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	bf94      	ite	ls
 80031d8:	2301      	movls	r3, #1
 80031da:	2300      	movhi	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	e006      	b.n	80031ee <HAL_I2C_Init+0x92>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4a7d      	ldr	r2, [pc, #500]	; (80033d8 <HAL_I2C_Init+0x27c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	bf94      	ite	ls
 80031e8:	2301      	movls	r3, #1
 80031ea:	2300      	movhi	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0e7      	b.n	80033c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4a78      	ldr	r2, [pc, #480]	; (80033dc <HAL_I2C_Init+0x280>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	0c9b      	lsrs	r3, r3, #18
 8003200:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4a6a      	ldr	r2, [pc, #424]	; (80033d0 <HAL_I2C_Init+0x274>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d802      	bhi.n	8003230 <HAL_I2C_Init+0xd4>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	3301      	adds	r3, #1
 800322e:	e009      	b.n	8003244 <HAL_I2C_Init+0xe8>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003236:	fb02 f303 	mul.w	r3, r2, r3
 800323a:	4a69      	ldr	r2, [pc, #420]	; (80033e0 <HAL_I2C_Init+0x284>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	099b      	lsrs	r3, r3, #6
 8003242:	3301      	adds	r3, #1
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	430b      	orrs	r3, r1
 800324a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003256:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	495c      	ldr	r1, [pc, #368]	; (80033d0 <HAL_I2C_Init+0x274>)
 8003260:	428b      	cmp	r3, r1
 8003262:	d819      	bhi.n	8003298 <HAL_I2C_Init+0x13c>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1e59      	subs	r1, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003272:	1c59      	adds	r1, r3, #1
 8003274:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003278:	400b      	ands	r3, r1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <HAL_I2C_Init+0x138>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1e59      	subs	r1, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	fbb1 f3f3 	udiv	r3, r1, r3
 800328c:	3301      	adds	r3, #1
 800328e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003292:	e051      	b.n	8003338 <HAL_I2C_Init+0x1dc>
 8003294:	2304      	movs	r3, #4
 8003296:	e04f      	b.n	8003338 <HAL_I2C_Init+0x1dc>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d111      	bne.n	80032c4 <HAL_I2C_Init+0x168>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1e58      	subs	r0, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	440b      	add	r3, r1
 80032ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b2:	3301      	adds	r3, #1
 80032b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bf0c      	ite	eq
 80032bc:	2301      	moveq	r3, #1
 80032be:	2300      	movne	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e012      	b.n	80032ea <HAL_I2C_Init+0x18e>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1e58      	subs	r0, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	0099      	lsls	r1, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032da:	3301      	adds	r3, #1
 80032dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_I2C_Init+0x196>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e022      	b.n	8003338 <HAL_I2C_Init+0x1dc>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10e      	bne.n	8003318 <HAL_I2C_Init+0x1bc>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1e58      	subs	r0, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6859      	ldr	r1, [r3, #4]
 8003302:	460b      	mov	r3, r1
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	440b      	add	r3, r1
 8003308:	fbb0 f3f3 	udiv	r3, r0, r3
 800330c:	3301      	adds	r3, #1
 800330e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003316:	e00f      	b.n	8003338 <HAL_I2C_Init+0x1dc>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	1e58      	subs	r0, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6859      	ldr	r1, [r3, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	0099      	lsls	r1, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	fbb0 f3f3 	udiv	r3, r0, r3
 800332e:	3301      	adds	r3, #1
 8003330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003334:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	6809      	ldr	r1, [r1, #0]
 800333c:	4313      	orrs	r3, r2
 800333e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69da      	ldr	r2, [r3, #28]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003366:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6911      	ldr	r1, [r2, #16]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68d2      	ldr	r2, [r2, #12]
 8003372:	4311      	orrs	r1, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	430b      	orrs	r3, r1
 800337a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	000186a0 	.word	0x000186a0
 80033d4:	001e847f 	.word	0x001e847f
 80033d8:	003d08ff 	.word	0x003d08ff
 80033dc:	431bde83 	.word	0x431bde83
 80033e0:	10624dd3 	.word	0x10624dd3

080033e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e264      	b.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d075      	beq.n	80034ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003402:	4ba3      	ldr	r3, [pc, #652]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b04      	cmp	r3, #4
 800340c:	d00c      	beq.n	8003428 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340e:	4ba0      	ldr	r3, [pc, #640]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003416:	2b08      	cmp	r3, #8
 8003418:	d112      	bne.n	8003440 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341a:	4b9d      	ldr	r3, [pc, #628]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003426:	d10b      	bne.n	8003440 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003428:	4b99      	ldr	r3, [pc, #612]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d05b      	beq.n	80034ec <HAL_RCC_OscConfig+0x108>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d157      	bne.n	80034ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e23f      	b.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003448:	d106      	bne.n	8003458 <HAL_RCC_OscConfig+0x74>
 800344a:	4b91      	ldr	r3, [pc, #580]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a90      	ldr	r2, [pc, #576]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	e01d      	b.n	8003494 <HAL_RCC_OscConfig+0xb0>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003460:	d10c      	bne.n	800347c <HAL_RCC_OscConfig+0x98>
 8003462:	4b8b      	ldr	r3, [pc, #556]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a8a      	ldr	r2, [pc, #552]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4b88      	ldr	r3, [pc, #544]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a87      	ldr	r2, [pc, #540]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	e00b      	b.n	8003494 <HAL_RCC_OscConfig+0xb0>
 800347c:	4b84      	ldr	r3, [pc, #528]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a83      	ldr	r2, [pc, #524]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b81      	ldr	r3, [pc, #516]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a80      	ldr	r2, [pc, #512]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 800348e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7ff fbaa 	bl	8002bf4 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a4:	f7ff fba6 	bl	8002bf4 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e204      	b.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	4b76      	ldr	r3, [pc, #472]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0xc0>
 80034c2:	e014      	b.n	80034ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7ff fb96 	bl	8002bf4 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034cc:	f7ff fb92 	bl	8002bf4 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e1f0      	b.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034de:	4b6c      	ldr	r3, [pc, #432]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0xe8>
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d063      	beq.n	80035c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034fa:	4b65      	ldr	r3, [pc, #404]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003506:	4b62      	ldr	r3, [pc, #392]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800350e:	2b08      	cmp	r3, #8
 8003510:	d11c      	bne.n	800354c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003512:	4b5f      	ldr	r3, [pc, #380]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d116      	bne.n	800354c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351e:	4b5c      	ldr	r3, [pc, #368]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_RCC_OscConfig+0x152>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d001      	beq.n	8003536 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e1c4      	b.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003536:	4b56      	ldr	r3, [pc, #344]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4952      	ldr	r1, [pc, #328]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354a:	e03a      	b.n	80035c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d020      	beq.n	8003596 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003554:	4b4f      	ldr	r3, [pc, #316]	; (8003694 <HAL_RCC_OscConfig+0x2b0>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7ff fb4b 	bl	8002bf4 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003562:	f7ff fb47 	bl	8002bf4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e1a5      	b.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003574:	4b46      	ldr	r3, [pc, #280]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003580:	4b43      	ldr	r3, [pc, #268]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4940      	ldr	r1, [pc, #256]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003590:	4313      	orrs	r3, r2
 8003592:	600b      	str	r3, [r1, #0]
 8003594:	e015      	b.n	80035c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003596:	4b3f      	ldr	r3, [pc, #252]	; (8003694 <HAL_RCC_OscConfig+0x2b0>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7ff fb2a 	bl	8002bf4 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a4:	f7ff fb26 	bl	8002bf4 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e184      	b.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b6:	4b36      	ldr	r3, [pc, #216]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d030      	beq.n	8003630 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d016      	beq.n	8003604 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d6:	4b30      	ldr	r3, [pc, #192]	; (8003698 <HAL_RCC_OscConfig+0x2b4>)
 80035d8:	2201      	movs	r2, #1
 80035da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7ff fb0a 	bl	8002bf4 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e4:	f7ff fb06 	bl	8002bf4 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e164      	b.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f6:	4b26      	ldr	r3, [pc, #152]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x200>
 8003602:	e015      	b.n	8003630 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003604:	4b24      	ldr	r3, [pc, #144]	; (8003698 <HAL_RCC_OscConfig+0x2b4>)
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360a:	f7ff faf3 	bl	8002bf4 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003612:	f7ff faef 	bl	8002bf4 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e14d      	b.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003624:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1f0      	bne.n	8003612 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80a0 	beq.w	800377e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800363e:	2300      	movs	r3, #0
 8003640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003642:	4b13      	ldr	r3, [pc, #76]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10f      	bne.n	800366e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a0e      	ldr	r2, [pc, #56]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
 800365e:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <HAL_RCC_OscConfig+0x2ac>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366a:	2301      	movs	r3, #1
 800366c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366e:	4b0b      	ldr	r3, [pc, #44]	; (800369c <HAL_RCC_OscConfig+0x2b8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d121      	bne.n	80036be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800367a:	4b08      	ldr	r3, [pc, #32]	; (800369c <HAL_RCC_OscConfig+0x2b8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a07      	ldr	r2, [pc, #28]	; (800369c <HAL_RCC_OscConfig+0x2b8>)
 8003680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003686:	f7ff fab5 	bl	8002bf4 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368c:	e011      	b.n	80036b2 <HAL_RCC_OscConfig+0x2ce>
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
 8003694:	42470000 	.word	0x42470000
 8003698:	42470e80 	.word	0x42470e80
 800369c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a0:	f7ff faa8 	bl	8002bf4 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e106      	b.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b2:	4b85      	ldr	r3, [pc, #532]	; (80038c8 <HAL_RCC_OscConfig+0x4e4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d106      	bne.n	80036d4 <HAL_RCC_OscConfig+0x2f0>
 80036c6:	4b81      	ldr	r3, [pc, #516]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	4a80      	ldr	r2, [pc, #512]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	6713      	str	r3, [r2, #112]	; 0x70
 80036d2:	e01c      	b.n	800370e <HAL_RCC_OscConfig+0x32a>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b05      	cmp	r3, #5
 80036da:	d10c      	bne.n	80036f6 <HAL_RCC_OscConfig+0x312>
 80036dc:	4b7b      	ldr	r3, [pc, #492]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	4a7a      	ldr	r2, [pc, #488]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 80036e2:	f043 0304 	orr.w	r3, r3, #4
 80036e6:	6713      	str	r3, [r2, #112]	; 0x70
 80036e8:	4b78      	ldr	r3, [pc, #480]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	4a77      	ldr	r2, [pc, #476]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	6713      	str	r3, [r2, #112]	; 0x70
 80036f4:	e00b      	b.n	800370e <HAL_RCC_OscConfig+0x32a>
 80036f6:	4b75      	ldr	r3, [pc, #468]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	4a74      	ldr	r2, [pc, #464]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	6713      	str	r3, [r2, #112]	; 0x70
 8003702:	4b72      	ldr	r3, [pc, #456]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	4a71      	ldr	r2, [pc, #452]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 8003708:	f023 0304 	bic.w	r3, r3, #4
 800370c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d015      	beq.n	8003742 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003716:	f7ff fa6d 	bl	8002bf4 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371c:	e00a      	b.n	8003734 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f7ff fa69 	bl	8002bf4 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f241 3288 	movw	r2, #5000	; 0x1388
 800372c:	4293      	cmp	r3, r2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e0c5      	b.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003734:	4b65      	ldr	r3, [pc, #404]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ee      	beq.n	800371e <HAL_RCC_OscConfig+0x33a>
 8003740:	e014      	b.n	800376c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003742:	f7ff fa57 	bl	8002bf4 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003748:	e00a      	b.n	8003760 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800374a:	f7ff fa53 	bl	8002bf4 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	f241 3288 	movw	r2, #5000	; 0x1388
 8003758:	4293      	cmp	r3, r2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e0af      	b.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003760:	4b5a      	ldr	r3, [pc, #360]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1ee      	bne.n	800374a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800376c:	7dfb      	ldrb	r3, [r7, #23]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d105      	bne.n	800377e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003772:	4b56      	ldr	r3, [pc, #344]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	4a55      	ldr	r2, [pc, #340]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 8003778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800377c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 809b 	beq.w	80038be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003788:	4b50      	ldr	r3, [pc, #320]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b08      	cmp	r3, #8
 8003792:	d05c      	beq.n	800384e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d141      	bne.n	8003820 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379c:	4b4c      	ldr	r3, [pc, #304]	; (80038d0 <HAL_RCC_OscConfig+0x4ec>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a2:	f7ff fa27 	bl	8002bf4 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037aa:	f7ff fa23 	bl	8002bf4 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e081      	b.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037bc:	4b43      	ldr	r3, [pc, #268]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1f0      	bne.n	80037aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	019b      	lsls	r3, r3, #6
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	085b      	lsrs	r3, r3, #1
 80037e0:	3b01      	subs	r3, #1
 80037e2:	041b      	lsls	r3, r3, #16
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	061b      	lsls	r3, r3, #24
 80037ec:	4937      	ldr	r1, [pc, #220]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f2:	4b37      	ldr	r3, [pc, #220]	; (80038d0 <HAL_RCC_OscConfig+0x4ec>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7ff f9fc 	bl	8002bf4 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003800:	f7ff f9f8 	bl	8002bf4 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e056      	b.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003812:	4b2e      	ldr	r3, [pc, #184]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0x41c>
 800381e:	e04e      	b.n	80038be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003820:	4b2b      	ldr	r3, [pc, #172]	; (80038d0 <HAL_RCC_OscConfig+0x4ec>)
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003826:	f7ff f9e5 	bl	8002bf4 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800382e:	f7ff f9e1 	bl	8002bf4 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e03f      	b.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003840:	4b22      	ldr	r3, [pc, #136]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f0      	bne.n	800382e <HAL_RCC_OscConfig+0x44a>
 800384c:	e037      	b.n	80038be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e032      	b.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800385a:	4b1c      	ldr	r3, [pc, #112]	; (80038cc <HAL_RCC_OscConfig+0x4e8>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d028      	beq.n	80038ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003872:	429a      	cmp	r2, r3
 8003874:	d121      	bne.n	80038ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003880:	429a      	cmp	r2, r3
 8003882:	d11a      	bne.n	80038ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800388a:	4013      	ands	r3, r2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003890:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003892:	4293      	cmp	r3, r2
 8003894:	d111      	bne.n	80038ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	085b      	lsrs	r3, r3, #1
 80038a2:	3b01      	subs	r3, #1
 80038a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d107      	bne.n	80038ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d001      	beq.n	80038be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40007000 	.word	0x40007000
 80038cc:	40023800 	.word	0x40023800
 80038d0:	42470060 	.word	0x42470060

080038d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0cc      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038e8:	4b68      	ldr	r3, [pc, #416]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d90c      	bls.n	8003910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f6:	4b65      	ldr	r3, [pc, #404]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b63      	ldr	r3, [pc, #396]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0b8      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d020      	beq.n	800395e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003928:	4b59      	ldr	r3, [pc, #356]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4a58      	ldr	r2, [pc, #352]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003940:	4b53      	ldr	r3, [pc, #332]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a52      	ldr	r2, [pc, #328]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800394a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800394c:	4b50      	ldr	r3, [pc, #320]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	494d      	ldr	r1, [pc, #308]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d044      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	4b47      	ldr	r3, [pc, #284]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d119      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e07f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d003      	beq.n	8003992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800398e:	2b03      	cmp	r3, #3
 8003990:	d107      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003992:	4b3f      	ldr	r3, [pc, #252]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e06f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a2:	4b3b      	ldr	r3, [pc, #236]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e067      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b2:	4b37      	ldr	r3, [pc, #220]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f023 0203 	bic.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4934      	ldr	r1, [pc, #208]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c4:	f7ff f916 	bl	8002bf4 <HAL_GetTick>
 80039c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039cc:	f7ff f912 	bl	8002bf4 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039da:	4293      	cmp	r3, r2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e04f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 020c 	and.w	r2, r3, #12
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d1eb      	bne.n	80039cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f4:	4b25      	ldr	r3, [pc, #148]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d20c      	bcs.n	8003a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e032      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4916      	ldr	r1, [pc, #88]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a46:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	490e      	ldr	r1, [pc, #56]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a5a:	f000 f821 	bl	8003aa0 <HAL_RCC_GetSysClockFreq>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	490a      	ldr	r1, [pc, #40]	; (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 8003a6c:	5ccb      	ldrb	r3, [r1, r3]
 8003a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a72:	4a09      	ldr	r2, [pc, #36]	; (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff f876 	bl	8002b6c <HAL_InitTick>

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023c00 	.word	0x40023c00
 8003a90:	40023800 	.word	0x40023800
 8003a94:	080089bc 	.word	0x080089bc
 8003a98:	20002010 	.word	0x20002010
 8003a9c:	20002014 	.word	0x20002014

08003aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ab8:	4b67      	ldr	r3, [pc, #412]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 030c 	and.w	r3, r3, #12
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	f200 80bd 	bhi.w	8003c44 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d003      	beq.n	8003ada <HAL_RCC_GetSysClockFreq+0x3a>
 8003ad2:	e0b7      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ad4:	4b61      	ldr	r3, [pc, #388]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ad6:	60bb      	str	r3, [r7, #8]
       break;
 8003ad8:	e0b7      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ada:	4b61      	ldr	r3, [pc, #388]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003adc:	60bb      	str	r3, [r7, #8]
      break;
 8003ade:	e0b4      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ae0:	4b5d      	ldr	r3, [pc, #372]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aea:	4b5b      	ldr	r3, [pc, #364]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d04d      	beq.n	8003b92 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af6:	4b58      	ldr	r3, [pc, #352]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	099b      	lsrs	r3, r3, #6
 8003afc:	461a      	mov	r2, r3
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b06:	f04f 0100 	mov.w	r1, #0
 8003b0a:	ea02 0800 	and.w	r8, r2, r0
 8003b0e:	ea03 0901 	and.w	r9, r3, r1
 8003b12:	4640      	mov	r0, r8
 8003b14:	4649      	mov	r1, r9
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	014b      	lsls	r3, r1, #5
 8003b20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b24:	0142      	lsls	r2, r0, #5
 8003b26:	4610      	mov	r0, r2
 8003b28:	4619      	mov	r1, r3
 8003b2a:	ebb0 0008 	subs.w	r0, r0, r8
 8003b2e:	eb61 0109 	sbc.w	r1, r1, r9
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	018b      	lsls	r3, r1, #6
 8003b3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b40:	0182      	lsls	r2, r0, #6
 8003b42:	1a12      	subs	r2, r2, r0
 8003b44:	eb63 0301 	sbc.w	r3, r3, r1
 8003b48:	f04f 0000 	mov.w	r0, #0
 8003b4c:	f04f 0100 	mov.w	r1, #0
 8003b50:	00d9      	lsls	r1, r3, #3
 8003b52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b56:	00d0      	lsls	r0, r2, #3
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	eb12 0208 	adds.w	r2, r2, r8
 8003b60:	eb43 0309 	adc.w	r3, r3, r9
 8003b64:	f04f 0000 	mov.w	r0, #0
 8003b68:	f04f 0100 	mov.w	r1, #0
 8003b6c:	0259      	lsls	r1, r3, #9
 8003b6e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b72:	0250      	lsls	r0, r2, #9
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4610      	mov	r0, r2
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	f7fd f868 	bl	8000c58 <__aeabi_uldivmod>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e04a      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b92:	4b31      	ldr	r3, [pc, #196]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	099b      	lsrs	r3, r3, #6
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ba2:	f04f 0100 	mov.w	r1, #0
 8003ba6:	ea02 0400 	and.w	r4, r2, r0
 8003baa:	ea03 0501 	and.w	r5, r3, r1
 8003bae:	4620      	mov	r0, r4
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	014b      	lsls	r3, r1, #5
 8003bbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bc0:	0142      	lsls	r2, r0, #5
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	1b00      	subs	r0, r0, r4
 8003bc8:	eb61 0105 	sbc.w	r1, r1, r5
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	018b      	lsls	r3, r1, #6
 8003bd6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bda:	0182      	lsls	r2, r0, #6
 8003bdc:	1a12      	subs	r2, r2, r0
 8003bde:	eb63 0301 	sbc.w	r3, r3, r1
 8003be2:	f04f 0000 	mov.w	r0, #0
 8003be6:	f04f 0100 	mov.w	r1, #0
 8003bea:	00d9      	lsls	r1, r3, #3
 8003bec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bf0:	00d0      	lsls	r0, r2, #3
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	1912      	adds	r2, r2, r4
 8003bf8:	eb45 0303 	adc.w	r3, r5, r3
 8003bfc:	f04f 0000 	mov.w	r0, #0
 8003c00:	f04f 0100 	mov.w	r1, #0
 8003c04:	0299      	lsls	r1, r3, #10
 8003c06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c0a:	0290      	lsls	r0, r2, #10
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4610      	mov	r0, r2
 8003c12:	4619      	mov	r1, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	461a      	mov	r2, r3
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	f7fd f81c 	bl	8000c58 <__aeabi_uldivmod>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4613      	mov	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	0c1b      	lsrs	r3, r3, #16
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	3301      	adds	r3, #1
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c40:	60bb      	str	r3, [r7, #8]
      break;
 8003c42:	e002      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c44:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c46:	60bb      	str	r3, [r7, #8]
      break;
 8003c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c56:	bf00      	nop
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	00f42400 	.word	0x00f42400
 8003c60:	007a1200 	.word	0x007a1200

08003c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c68:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20002010 	.word	0x20002010

08003c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c80:	f7ff fff0 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	0a9b      	lsrs	r3, r3, #10
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	4903      	ldr	r1, [pc, #12]	; (8003ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c92:	5ccb      	ldrb	r3, [r1, r3]
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	080089cc 	.word	0x080089cc

08003ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ca8:	f7ff ffdc 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 8003cac:	4602      	mov	r2, r0
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	0b5b      	lsrs	r3, r3, #13
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	4903      	ldr	r1, [pc, #12]	; (8003cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cba:	5ccb      	ldrb	r3, [r1, r3]
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	080089cc 	.word	0x080089cc

08003ccc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e07b      	b.n	8003dd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d108      	bne.n	8003cf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cee:	d009      	beq.n	8003d04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	61da      	str	r2, [r3, #28]
 8003cf6:	e005      	b.n	8003d04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fe fd46 	bl	80027b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d88:	ea42 0103 	orr.w	r1, r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	f003 0104 	and.w	r1, r3, #4
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	f003 0210 	and.w	r2, r3, #16
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b088      	sub	sp, #32
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	60f8      	str	r0, [r7, #12]
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	603b      	str	r3, [r7, #0]
 8003dea:	4613      	mov	r3, r2
 8003dec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_SPI_Transmit+0x22>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e126      	b.n	800404e <HAL_SPI_Transmit+0x270>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e08:	f7fe fef4 	bl	8002bf4 <HAL_GetTick>
 8003e0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d002      	beq.n	8003e24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e22:	e10b      	b.n	800403c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_SPI_Transmit+0x52>
 8003e2a:	88fb      	ldrh	r3, [r7, #6]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d102      	bne.n	8003e36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e34:	e102      	b.n	800403c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2203      	movs	r2, #3
 8003e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	88fa      	ldrh	r2, [r7, #6]
 8003e4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	88fa      	ldrh	r2, [r7, #6]
 8003e54:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e7c:	d10f      	bne.n	8003e9e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	2b40      	cmp	r3, #64	; 0x40
 8003eaa:	d007      	beq.n	8003ebc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec4:	d14b      	bne.n	8003f5e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_SPI_Transmit+0xf6>
 8003ece:	8afb      	ldrh	r3, [r7, #22]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d13e      	bne.n	8003f52 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed8:	881a      	ldrh	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	1c9a      	adds	r2, r3, #2
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ef8:	e02b      	b.n	8003f52 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d112      	bne.n	8003f2e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	881a      	ldrh	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	1c9a      	adds	r2, r3, #2
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f2c:	e011      	b.n	8003f52 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f2e:	f7fe fe61 	bl	8002bf4 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d803      	bhi.n	8003f46 <HAL_SPI_Transmit+0x168>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f44:	d102      	bne.n	8003f4c <HAL_SPI_Transmit+0x16e>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d102      	bne.n	8003f52 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f50:	e074      	b.n	800403c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1ce      	bne.n	8003efa <HAL_SPI_Transmit+0x11c>
 8003f5c:	e04c      	b.n	8003ff8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_SPI_Transmit+0x18e>
 8003f66:	8afb      	ldrh	r3, [r7, #22]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d140      	bne.n	8003fee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	7812      	ldrb	r2, [r2, #0]
 8003f78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f92:	e02c      	b.n	8003fee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d113      	bne.n	8003fca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	330c      	adds	r3, #12
 8003fac:	7812      	ldrb	r2, [r2, #0]
 8003fae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fc8:	e011      	b.n	8003fee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fca:	f7fe fe13 	bl	8002bf4 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d803      	bhi.n	8003fe2 <HAL_SPI_Transmit+0x204>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fe0:	d102      	bne.n	8003fe8 <HAL_SPI_Transmit+0x20a>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fec:	e026      	b.n	800403c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1cd      	bne.n	8003f94 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	6839      	ldr	r1, [r7, #0]
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fbcb 	bl	8004798 <SPI_EndRxTxTransaction>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10a      	bne.n	800402c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e000      	b.n	800403c <HAL_SPI_Transmit+0x25e>
  }

error:
 800403a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800404c:	7ffb      	ldrb	r3, [r7, #31]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3720      	adds	r7, #32
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b088      	sub	sp, #32
 800405a:	af02      	add	r7, sp, #8
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	4613      	mov	r3, r2
 8004064:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004072:	d112      	bne.n	800409a <HAL_SPI_Receive+0x44>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10e      	bne.n	800409a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2204      	movs	r2, #4
 8004080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004084:	88fa      	ldrh	r2, [r7, #6]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	4613      	mov	r3, r2
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f8f1 	bl	8004278 <HAL_SPI_TransmitReceive>
 8004096:	4603      	mov	r3, r0
 8004098:	e0ea      	b.n	8004270 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_SPI_Receive+0x52>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e0e3      	b.n	8004270 <HAL_SPI_Receive+0x21a>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040b0:	f7fe fda0 	bl	8002bf4 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d002      	beq.n	80040c8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80040c2:	2302      	movs	r3, #2
 80040c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040c6:	e0ca      	b.n	800425e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <HAL_SPI_Receive+0x7e>
 80040ce:	88fb      	ldrh	r3, [r7, #6]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d102      	bne.n	80040da <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040d8:	e0c1      	b.n	800425e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2204      	movs	r2, #4
 80040de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	88fa      	ldrh	r2, [r7, #6]
 80040f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004120:	d10f      	bne.n	8004142 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004130:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004140:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d007      	beq.n	8004160 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800415e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d162      	bne.n	800422e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004168:	e02e      	b.n	80041c8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b01      	cmp	r3, #1
 8004176:	d115      	bne.n	80041a4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f103 020c 	add.w	r2, r3, #12
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	7812      	ldrb	r2, [r2, #0]
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041a2:	e011      	b.n	80041c8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041a4:	f7fe fd26 	bl	8002bf4 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d803      	bhi.n	80041bc <HAL_SPI_Receive+0x166>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ba:	d102      	bne.n	80041c2 <HAL_SPI_Receive+0x16c>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d102      	bne.n	80041c8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80041c6:	e04a      	b.n	800425e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1cb      	bne.n	800416a <HAL_SPI_Receive+0x114>
 80041d2:	e031      	b.n	8004238 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d113      	bne.n	800420a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	b292      	uxth	r2, r2
 80041ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	1c9a      	adds	r2, r3, #2
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004208:	e011      	b.n	800422e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800420a:	f7fe fcf3 	bl	8002bf4 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d803      	bhi.n	8004222 <HAL_SPI_Receive+0x1cc>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004220:	d102      	bne.n	8004228 <HAL_SPI_Receive+0x1d2>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d102      	bne.n	800422e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800422c:	e017      	b.n	800425e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1cd      	bne.n	80041d4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	6839      	ldr	r1, [r7, #0]
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fa45 	bl	80046cc <SPI_EndRxTransaction>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	75fb      	strb	r3, [r7, #23]
 800425a:	e000      	b.n	800425e <HAL_SPI_Receive+0x208>
  }

error :
 800425c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800426e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08c      	sub	sp, #48	; 0x30
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004286:	2301      	movs	r3, #1
 8004288:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_SPI_TransmitReceive+0x26>
 800429a:	2302      	movs	r3, #2
 800429c:	e18a      	b.n	80045b4 <HAL_SPI_TransmitReceive+0x33c>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042a6:	f7fe fca5 	bl	8002bf4 <HAL_GetTick>
 80042aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80042bc:	887b      	ldrh	r3, [r7, #2]
 80042be:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d00f      	beq.n	80042e8 <HAL_SPI_TransmitReceive+0x70>
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ce:	d107      	bne.n	80042e0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d103      	bne.n	80042e0 <HAL_SPI_TransmitReceive+0x68>
 80042d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d003      	beq.n	80042e8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80042e0:	2302      	movs	r3, #2
 80042e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80042e6:	e15b      	b.n	80045a0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_SPI_TransmitReceive+0x82>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <HAL_SPI_TransmitReceive+0x82>
 80042f4:	887b      	ldrh	r3, [r7, #2]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d103      	bne.n	8004302 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004300:	e14e      	b.n	80045a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b04      	cmp	r3, #4
 800430c:	d003      	beq.n	8004316 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2205      	movs	r2, #5
 8004312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	887a      	ldrh	r2, [r7, #2]
 8004326:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	887a      	ldrh	r2, [r7, #2]
 800432c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	887a      	ldrh	r2, [r7, #2]
 8004338:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	887a      	ldrh	r2, [r7, #2]
 800433e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b40      	cmp	r3, #64	; 0x40
 8004358:	d007      	beq.n	800436a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004368:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004372:	d178      	bne.n	8004466 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <HAL_SPI_TransmitReceive+0x10a>
 800437c:	8b7b      	ldrh	r3, [r7, #26]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d166      	bne.n	8004450 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	881a      	ldrh	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	1c9a      	adds	r2, r3, #2
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043a6:	e053      	b.n	8004450 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d11b      	bne.n	80043ee <HAL_SPI_TransmitReceive+0x176>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d016      	beq.n	80043ee <HAL_SPI_TransmitReceive+0x176>
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d113      	bne.n	80043ee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	881a      	ldrh	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	1c9a      	adds	r2, r3, #2
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d119      	bne.n	8004430 <HAL_SPI_TransmitReceive+0x1b8>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d014      	beq.n	8004430 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	b292      	uxth	r2, r2
 8004412:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	1c9a      	adds	r2, r3, #2
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800442c:	2301      	movs	r3, #1
 800442e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004430:	f7fe fbe0 	bl	8002bf4 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800443c:	429a      	cmp	r2, r3
 800443e:	d807      	bhi.n	8004450 <HAL_SPI_TransmitReceive+0x1d8>
 8004440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004446:	d003      	beq.n	8004450 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800444e:	e0a7      	b.n	80045a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1a6      	bne.n	80043a8 <HAL_SPI_TransmitReceive+0x130>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1a1      	bne.n	80043a8 <HAL_SPI_TransmitReceive+0x130>
 8004464:	e07c      	b.n	8004560 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_SPI_TransmitReceive+0x1fc>
 800446e:	8b7b      	ldrh	r3, [r7, #26]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d16b      	bne.n	800454c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	330c      	adds	r3, #12
 800447e:	7812      	ldrb	r2, [r2, #0]
 8004480:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800449a:	e057      	b.n	800454c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d11c      	bne.n	80044e4 <HAL_SPI_TransmitReceive+0x26c>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d017      	beq.n	80044e4 <HAL_SPI_TransmitReceive+0x26c>
 80044b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d114      	bne.n	80044e4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	330c      	adds	r3, #12
 80044c4:	7812      	ldrb	r2, [r2, #0]
 80044c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d119      	bne.n	8004526 <HAL_SPI_TransmitReceive+0x2ae>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d014      	beq.n	8004526 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004522:	2301      	movs	r3, #1
 8004524:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004526:	f7fe fb65 	bl	8002bf4 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004532:	429a      	cmp	r2, r3
 8004534:	d803      	bhi.n	800453e <HAL_SPI_TransmitReceive+0x2c6>
 8004536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800453c:	d102      	bne.n	8004544 <HAL_SPI_TransmitReceive+0x2cc>
 800453e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004540:	2b00      	cmp	r3, #0
 8004542:	d103      	bne.n	800454c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800454a:	e029      	b.n	80045a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1a2      	bne.n	800449c <HAL_SPI_TransmitReceive+0x224>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d19d      	bne.n	800449c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004562:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f917 	bl	8004798 <SPI_EndRxTxTransaction>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d006      	beq.n	800457e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2220      	movs	r2, #32
 800457a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800457c:	e010      	b.n	80045a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10b      	bne.n	800459e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	e000      	b.n	80045a0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800459e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3730      	adds	r7, #48	; 0x30
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	4613      	mov	r3, r2
 80045ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045cc:	f7fe fb12 	bl	8002bf4 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	4413      	add	r3, r2
 80045da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045dc:	f7fe fb0a 	bl	8002bf4 <HAL_GetTick>
 80045e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045e2:	4b39      	ldr	r3, [pc, #228]	; (80046c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	015b      	lsls	r3, r3, #5
 80045e8:	0d1b      	lsrs	r3, r3, #20
 80045ea:	69fa      	ldr	r2, [r7, #28]
 80045ec:	fb02 f303 	mul.w	r3, r2, r3
 80045f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045f2:	e054      	b.n	800469e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045fa:	d050      	beq.n	800469e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045fc:	f7fe fafa 	bl	8002bf4 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	429a      	cmp	r2, r3
 800460a:	d902      	bls.n	8004612 <SPI_WaitFlagStateUntilTimeout+0x56>
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d13d      	bne.n	800468e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004620:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800462a:	d111      	bne.n	8004650 <SPI_WaitFlagStateUntilTimeout+0x94>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004634:	d004      	beq.n	8004640 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463e:	d107      	bne.n	8004650 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800464e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004658:	d10f      	bne.n	800467a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004678:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e017      	b.n	80046be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	3b01      	subs	r3, #1
 800469c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4013      	ands	r3, r2
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	bf0c      	ite	eq
 80046ae:	2301      	moveq	r3, #1
 80046b0:	2300      	movne	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d19b      	bne.n	80045f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3720      	adds	r7, #32
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20002010 	.word	0x20002010

080046cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046e0:	d111      	bne.n	8004706 <SPI_EndRxTransaction+0x3a>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ea:	d004      	beq.n	80046f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f4:	d107      	bne.n	8004706 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004704:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470e:	d12a      	bne.n	8004766 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004718:	d012      	beq.n	8004740 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2200      	movs	r2, #0
 8004722:	2180      	movs	r1, #128	; 0x80
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f7ff ff49 	bl	80045bc <SPI_WaitFlagStateUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d02d      	beq.n	800478c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004734:	f043 0220 	orr.w	r2, r3, #32
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e026      	b.n	800478e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2200      	movs	r2, #0
 8004748:	2101      	movs	r1, #1
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f7ff ff36 	bl	80045bc <SPI_WaitFlagStateUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d01a      	beq.n	800478c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475a:	f043 0220 	orr.w	r2, r3, #32
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e013      	b.n	800478e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2200      	movs	r2, #0
 800476e:	2101      	movs	r1, #1
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff ff23 	bl	80045bc <SPI_WaitFlagStateUntilTimeout>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004780:	f043 0220 	orr.w	r2, r3, #32
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e000      	b.n	800478e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047a4:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <SPI_EndRxTxTransaction+0x7c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1b      	ldr	r2, [pc, #108]	; (8004818 <SPI_EndRxTxTransaction+0x80>)
 80047aa:	fba2 2303 	umull	r2, r3, r2, r3
 80047ae:	0d5b      	lsrs	r3, r3, #21
 80047b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047b4:	fb02 f303 	mul.w	r3, r2, r3
 80047b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047c2:	d112      	bne.n	80047ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2200      	movs	r2, #0
 80047cc:	2180      	movs	r1, #128	; 0x80
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f7ff fef4 	bl	80045bc <SPI_WaitFlagStateUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d016      	beq.n	8004808 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047de:	f043 0220 	orr.w	r2, r3, #32
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e00f      	b.n	800480a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004800:	2b80      	cmp	r3, #128	; 0x80
 8004802:	d0f2      	beq.n	80047ea <SPI_EndRxTxTransaction+0x52>
 8004804:	e000      	b.n	8004808 <SPI_EndRxTxTransaction+0x70>
        break;
 8004806:	bf00      	nop
  }

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20002010 	.word	0x20002010
 8004818:	165e9f81 	.word	0x165e9f81

0800481c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e03f      	b.n	80048ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fd fffc 	bl	8002840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2224      	movs	r2, #36	; 0x24
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800485e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f929 	bl	8004ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b08a      	sub	sp, #40	; 0x28
 80048ba:	af02      	add	r7, sp, #8
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	603b      	str	r3, [r7, #0]
 80048c2:	4613      	mov	r3, r2
 80048c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d17c      	bne.n	80049d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <HAL_UART_Transmit+0x2c>
 80048dc:	88fb      	ldrh	r3, [r7, #6]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e075      	b.n	80049d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_UART_Transmit+0x3e>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e06e      	b.n	80049d2 <HAL_UART_Transmit+0x11c>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2221      	movs	r2, #33	; 0x21
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800490a:	f7fe f973 	bl	8002bf4 <HAL_GetTick>
 800490e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	88fa      	ldrh	r2, [r7, #6]
 8004914:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	88fa      	ldrh	r2, [r7, #6]
 800491a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004924:	d108      	bne.n	8004938 <HAL_UART_Transmit+0x82>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d104      	bne.n	8004938 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	e003      	b.n	8004940 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800493c:	2300      	movs	r3, #0
 800493e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004948:	e02a      	b.n	80049a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2200      	movs	r2, #0
 8004952:	2180      	movs	r1, #128	; 0x80
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f840 	bl	80049da <UART_WaitOnFlagUntilTimeout>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e036      	b.n	80049d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10b      	bne.n	8004982 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004978:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	3302      	adds	r3, #2
 800497e:	61bb      	str	r3, [r7, #24]
 8004980:	e007      	b.n	8004992 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	781a      	ldrb	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	3301      	adds	r3, #1
 8004990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1cf      	bne.n	800494a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2200      	movs	r2, #0
 80049b2:	2140      	movs	r1, #64	; 0x40
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f810 	bl	80049da <UART_WaitOnFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e006      	b.n	80049d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	e000      	b.n	80049d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049d0:	2302      	movs	r3, #2
  }
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3720      	adds	r7, #32
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b090      	sub	sp, #64	; 0x40
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	603b      	str	r3, [r7, #0]
 80049e6:	4613      	mov	r3, r2
 80049e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ea:	e050      	b.n	8004a8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f2:	d04c      	beq.n	8004a8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d007      	beq.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x30>
 80049fa:	f7fe f8fb 	bl	8002bf4 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d241      	bcs.n	8004a8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	330c      	adds	r3, #12
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28
 \return        value of type uint32_t at (*ptr)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr) {
	uint32_t result;

	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
	return (result);
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	330c      	adds	r3, #12
 8004a28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a2a:	637a      	str	r2, [r7, #52]	; 0x34
 8004a2c:	633b      	str	r3, [r7, #48]	; 0x30
 \return          1  Function failed
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr) {
	uint32_t result;

	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
	return (result);
 8004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e5      	bne.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3314      	adds	r3, #20
 8004a44:	617b      	str	r3, [r7, #20]
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	613b      	str	r3, [r7, #16]
	return (result);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f023 0301 	bic.w	r3, r3, #1
 8004a54:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3314      	adds	r3, #20
 8004a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a5e:	623a      	str	r2, [r7, #32]
 8004a60:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a62:	69f9      	ldr	r1, [r7, #28]
 8004a64:	6a3a      	ldr	r2, [r7, #32]
 8004a66:	e841 2300 	strex	r3, r2, [r1]
 8004a6a:	61bb      	str	r3, [r7, #24]
	return (result);
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1e5      	bne.n	8004a3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e00f      	b.n	8004aae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4013      	ands	r3, r2
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	bf0c      	ite	eq
 8004a9e:	2301      	moveq	r3, #1
 8004aa0:	2300      	movne	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d09f      	beq.n	80049ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3740      	adds	r7, #64	; 0x40
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004abc:	b09f      	sub	sp, #124	; 0x7c
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ace:	68d9      	ldr	r1, [r3, #12]
 8004ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	ea40 0301 	orr.w	r3, r0, r1
 8004ad8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004afc:	f021 010c 	bic.w	r1, r1, #12
 8004b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b06:	430b      	orrs	r3, r1
 8004b08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b16:	6999      	ldr	r1, [r3, #24]
 8004b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	ea40 0301 	orr.w	r3, r0, r1
 8004b20:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4bc5      	ldr	r3, [pc, #788]	; (8004e3c <UART_SetConfig+0x384>)
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d004      	beq.n	8004b36 <UART_SetConfig+0x7e>
 8004b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4bc3      	ldr	r3, [pc, #780]	; (8004e40 <UART_SetConfig+0x388>)
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d103      	bne.n	8004b3e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b36:	f7ff f8b5 	bl	8003ca4 <HAL_RCC_GetPCLK2Freq>
 8004b3a:	6778      	str	r0, [r7, #116]	; 0x74
 8004b3c:	e002      	b.n	8004b44 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b3e:	f7ff f89d 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 8004b42:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b4c:	f040 80b6 	bne.w	8004cbc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b52:	461c      	mov	r4, r3
 8004b54:	f04f 0500 	mov.w	r5, #0
 8004b58:	4622      	mov	r2, r4
 8004b5a:	462b      	mov	r3, r5
 8004b5c:	1891      	adds	r1, r2, r2
 8004b5e:	6439      	str	r1, [r7, #64]	; 0x40
 8004b60:	415b      	adcs	r3, r3
 8004b62:	647b      	str	r3, [r7, #68]	; 0x44
 8004b64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b68:	1912      	adds	r2, r2, r4
 8004b6a:	eb45 0303 	adc.w	r3, r5, r3
 8004b6e:	f04f 0000 	mov.w	r0, #0
 8004b72:	f04f 0100 	mov.w	r1, #0
 8004b76:	00d9      	lsls	r1, r3, #3
 8004b78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b7c:	00d0      	lsls	r0, r2, #3
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	1911      	adds	r1, r2, r4
 8004b84:	6639      	str	r1, [r7, #96]	; 0x60
 8004b86:	416b      	adcs	r3, r5
 8004b88:	667b      	str	r3, [r7, #100]	; 0x64
 8004b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	1891      	adds	r1, r2, r2
 8004b96:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b98:	415b      	adcs	r3, r3
 8004b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ba0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004ba4:	f7fc f858 	bl	8000c58 <__aeabi_uldivmod>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4ba5      	ldr	r3, [pc, #660]	; (8004e44 <UART_SetConfig+0x38c>)
 8004bae:	fba3 2302 	umull	r2, r3, r3, r2
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	011e      	lsls	r6, r3, #4
 8004bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bb8:	461c      	mov	r4, r3
 8004bba:	f04f 0500 	mov.w	r5, #0
 8004bbe:	4622      	mov	r2, r4
 8004bc0:	462b      	mov	r3, r5
 8004bc2:	1891      	adds	r1, r2, r2
 8004bc4:	6339      	str	r1, [r7, #48]	; 0x30
 8004bc6:	415b      	adcs	r3, r3
 8004bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004bca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004bce:	1912      	adds	r2, r2, r4
 8004bd0:	eb45 0303 	adc.w	r3, r5, r3
 8004bd4:	f04f 0000 	mov.w	r0, #0
 8004bd8:	f04f 0100 	mov.w	r1, #0
 8004bdc:	00d9      	lsls	r1, r3, #3
 8004bde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004be2:	00d0      	lsls	r0, r2, #3
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	1911      	adds	r1, r2, r4
 8004bea:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bec:	416b      	adcs	r3, r5
 8004bee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	1891      	adds	r1, r2, r2
 8004bfc:	62b9      	str	r1, [r7, #40]	; 0x28
 8004bfe:	415b      	adcs	r3, r3
 8004c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c06:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004c0a:	f7fc f825 	bl	8000c58 <__aeabi_uldivmod>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4b8c      	ldr	r3, [pc, #560]	; (8004e44 <UART_SetConfig+0x38c>)
 8004c14:	fba3 1302 	umull	r1, r3, r3, r2
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	2164      	movs	r1, #100	; 0x64
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	3332      	adds	r3, #50	; 0x32
 8004c26:	4a87      	ldr	r2, [pc, #540]	; (8004e44 <UART_SetConfig+0x38c>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c34:	441e      	add	r6, r3
 8004c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f04f 0100 	mov.w	r1, #0
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	1894      	adds	r4, r2, r2
 8004c44:	623c      	str	r4, [r7, #32]
 8004c46:	415b      	adcs	r3, r3
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c4e:	1812      	adds	r2, r2, r0
 8004c50:	eb41 0303 	adc.w	r3, r1, r3
 8004c54:	f04f 0400 	mov.w	r4, #0
 8004c58:	f04f 0500 	mov.w	r5, #0
 8004c5c:	00dd      	lsls	r5, r3, #3
 8004c5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c62:	00d4      	lsls	r4, r2, #3
 8004c64:	4622      	mov	r2, r4
 8004c66:	462b      	mov	r3, r5
 8004c68:	1814      	adds	r4, r2, r0
 8004c6a:	653c      	str	r4, [r7, #80]	; 0x50
 8004c6c:	414b      	adcs	r3, r1
 8004c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8004c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	461a      	mov	r2, r3
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	1891      	adds	r1, r2, r2
 8004c7c:	61b9      	str	r1, [r7, #24]
 8004c7e:	415b      	adcs	r3, r3
 8004c80:	61fb      	str	r3, [r7, #28]
 8004c82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c86:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004c8a:	f7fb ffe5 	bl	8000c58 <__aeabi_uldivmod>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	4b6c      	ldr	r3, [pc, #432]	; (8004e44 <UART_SetConfig+0x38c>)
 8004c94:	fba3 1302 	umull	r1, r3, r3, r2
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	2164      	movs	r1, #100	; 0x64
 8004c9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	3332      	adds	r3, #50	; 0x32
 8004ca6:	4a67      	ldr	r2, [pc, #412]	; (8004e44 <UART_SetConfig+0x38c>)
 8004ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cac:	095b      	lsrs	r3, r3, #5
 8004cae:	f003 0207 	and.w	r2, r3, #7
 8004cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4432      	add	r2, r6
 8004cb8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cba:	e0b9      	b.n	8004e30 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cbe:	461c      	mov	r4, r3
 8004cc0:	f04f 0500 	mov.w	r5, #0
 8004cc4:	4622      	mov	r2, r4
 8004cc6:	462b      	mov	r3, r5
 8004cc8:	1891      	adds	r1, r2, r2
 8004cca:	6139      	str	r1, [r7, #16]
 8004ccc:	415b      	adcs	r3, r3
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004cd4:	1912      	adds	r2, r2, r4
 8004cd6:	eb45 0303 	adc.w	r3, r5, r3
 8004cda:	f04f 0000 	mov.w	r0, #0
 8004cde:	f04f 0100 	mov.w	r1, #0
 8004ce2:	00d9      	lsls	r1, r3, #3
 8004ce4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ce8:	00d0      	lsls	r0, r2, #3
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	eb12 0804 	adds.w	r8, r2, r4
 8004cf2:	eb43 0905 	adc.w	r9, r3, r5
 8004cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f04f 0100 	mov.w	r1, #0
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	008b      	lsls	r3, r1, #2
 8004d0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d0e:	0082      	lsls	r2, r0, #2
 8004d10:	4640      	mov	r0, r8
 8004d12:	4649      	mov	r1, r9
 8004d14:	f7fb ffa0 	bl	8000c58 <__aeabi_uldivmod>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4b49      	ldr	r3, [pc, #292]	; (8004e44 <UART_SetConfig+0x38c>)
 8004d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	011e      	lsls	r6, r3, #4
 8004d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f04f 0100 	mov.w	r1, #0
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	1894      	adds	r4, r2, r2
 8004d34:	60bc      	str	r4, [r7, #8]
 8004d36:	415b      	adcs	r3, r3
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d3e:	1812      	adds	r2, r2, r0
 8004d40:	eb41 0303 	adc.w	r3, r1, r3
 8004d44:	f04f 0400 	mov.w	r4, #0
 8004d48:	f04f 0500 	mov.w	r5, #0
 8004d4c:	00dd      	lsls	r5, r3, #3
 8004d4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d52:	00d4      	lsls	r4, r2, #3
 8004d54:	4622      	mov	r2, r4
 8004d56:	462b      	mov	r3, r5
 8004d58:	1814      	adds	r4, r2, r0
 8004d5a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004d5c:	414b      	adcs	r3, r1
 8004d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f04f 0100 	mov.w	r1, #0
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	008b      	lsls	r3, r1, #2
 8004d74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d78:	0082      	lsls	r2, r0, #2
 8004d7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004d7e:	f7fb ff6b 	bl	8000c58 <__aeabi_uldivmod>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4b2f      	ldr	r3, [pc, #188]	; (8004e44 <UART_SetConfig+0x38c>)
 8004d88:	fba3 1302 	umull	r1, r3, r3, r2
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	2164      	movs	r1, #100	; 0x64
 8004d90:	fb01 f303 	mul.w	r3, r1, r3
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	3332      	adds	r3, #50	; 0x32
 8004d9a:	4a2a      	ldr	r2, [pc, #168]	; (8004e44 <UART_SetConfig+0x38c>)
 8004d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004da0:	095b      	lsrs	r3, r3, #5
 8004da2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004da6:	441e      	add	r6, r3
 8004da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004daa:	4618      	mov	r0, r3
 8004dac:	f04f 0100 	mov.w	r1, #0
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	1894      	adds	r4, r2, r2
 8004db6:	603c      	str	r4, [r7, #0]
 8004db8:	415b      	adcs	r3, r3
 8004dba:	607b      	str	r3, [r7, #4]
 8004dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dc0:	1812      	adds	r2, r2, r0
 8004dc2:	eb41 0303 	adc.w	r3, r1, r3
 8004dc6:	f04f 0400 	mov.w	r4, #0
 8004dca:	f04f 0500 	mov.w	r5, #0
 8004dce:	00dd      	lsls	r5, r3, #3
 8004dd0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004dd4:	00d4      	lsls	r4, r2, #3
 8004dd6:	4622      	mov	r2, r4
 8004dd8:	462b      	mov	r3, r5
 8004dda:	eb12 0a00 	adds.w	sl, r2, r0
 8004dde:	eb43 0b01 	adc.w	fp, r3, r1
 8004de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f04f 0100 	mov.w	r1, #0
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	008b      	lsls	r3, r1, #2
 8004df6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dfa:	0082      	lsls	r2, r0, #2
 8004dfc:	4650      	mov	r0, sl
 8004dfe:	4659      	mov	r1, fp
 8004e00:	f7fb ff2a 	bl	8000c58 <__aeabi_uldivmod>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <UART_SetConfig+0x38c>)
 8004e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	2164      	movs	r1, #100	; 0x64
 8004e12:	fb01 f303 	mul.w	r3, r1, r3
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	011b      	lsls	r3, r3, #4
 8004e1a:	3332      	adds	r3, #50	; 0x32
 8004e1c:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <UART_SetConfig+0x38c>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	f003 020f 	and.w	r2, r3, #15
 8004e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4432      	add	r2, r6
 8004e2e:	609a      	str	r2, [r3, #8]
}
 8004e30:	bf00      	nop
 8004e32:	377c      	adds	r7, #124	; 0x7c
 8004e34:	46bd      	mov	sp, r7
 8004e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40011000 	.word	0x40011000
 8004e40:	40011400 	.word	0x40011400
 8004e44:	51eb851f 	.word	0x51eb851f

08004e48 <__errno>:
 8004e48:	4b01      	ldr	r3, [pc, #4]	; (8004e50 <__errno+0x8>)
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	2000201c 	.word	0x2000201c

08004e54 <__libc_init_array>:
 8004e54:	b570      	push	{r4, r5, r6, lr}
 8004e56:	4d0d      	ldr	r5, [pc, #52]	; (8004e8c <__libc_init_array+0x38>)
 8004e58:	4c0d      	ldr	r4, [pc, #52]	; (8004e90 <__libc_init_array+0x3c>)
 8004e5a:	1b64      	subs	r4, r4, r5
 8004e5c:	10a4      	asrs	r4, r4, #2
 8004e5e:	2600      	movs	r6, #0
 8004e60:	42a6      	cmp	r6, r4
 8004e62:	d109      	bne.n	8004e78 <__libc_init_array+0x24>
 8004e64:	4d0b      	ldr	r5, [pc, #44]	; (8004e94 <__libc_init_array+0x40>)
 8004e66:	4c0c      	ldr	r4, [pc, #48]	; (8004e98 <__libc_init_array+0x44>)
 8004e68:	f003 fc4e 	bl	8008708 <_init>
 8004e6c:	1b64      	subs	r4, r4, r5
 8004e6e:	10a4      	asrs	r4, r4, #2
 8004e70:	2600      	movs	r6, #0
 8004e72:	42a6      	cmp	r6, r4
 8004e74:	d105      	bne.n	8004e82 <__libc_init_array+0x2e>
 8004e76:	bd70      	pop	{r4, r5, r6, pc}
 8004e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e7c:	4798      	blx	r3
 8004e7e:	3601      	adds	r6, #1
 8004e80:	e7ee      	b.n	8004e60 <__libc_init_array+0xc>
 8004e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e86:	4798      	blx	r3
 8004e88:	3601      	adds	r6, #1
 8004e8a:	e7f2      	b.n	8004e72 <__libc_init_array+0x1e>
 8004e8c:	08008e30 	.word	0x08008e30
 8004e90:	08008e30 	.word	0x08008e30
 8004e94:	08008e30 	.word	0x08008e30
 8004e98:	08008e34 	.word	0x08008e34

08004e9c <memset>:
 8004e9c:	4402      	add	r2, r0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d100      	bne.n	8004ea6 <memset+0xa>
 8004ea4:	4770      	bx	lr
 8004ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eaa:	e7f9      	b.n	8004ea0 <memset+0x4>

08004eac <__cvt>:
 8004eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb0:	ec55 4b10 	vmov	r4, r5, d0
 8004eb4:	2d00      	cmp	r5, #0
 8004eb6:	460e      	mov	r6, r1
 8004eb8:	4619      	mov	r1, r3
 8004eba:	462b      	mov	r3, r5
 8004ebc:	bfbb      	ittet	lt
 8004ebe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004ec2:	461d      	movlt	r5, r3
 8004ec4:	2300      	movge	r3, #0
 8004ec6:	232d      	movlt	r3, #45	; 0x2d
 8004ec8:	700b      	strb	r3, [r1, #0]
 8004eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ecc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ed0:	4691      	mov	r9, r2
 8004ed2:	f023 0820 	bic.w	r8, r3, #32
 8004ed6:	bfbc      	itt	lt
 8004ed8:	4622      	movlt	r2, r4
 8004eda:	4614      	movlt	r4, r2
 8004edc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ee0:	d005      	beq.n	8004eee <__cvt+0x42>
 8004ee2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ee6:	d100      	bne.n	8004eea <__cvt+0x3e>
 8004ee8:	3601      	adds	r6, #1
 8004eea:	2102      	movs	r1, #2
 8004eec:	e000      	b.n	8004ef0 <__cvt+0x44>
 8004eee:	2103      	movs	r1, #3
 8004ef0:	ab03      	add	r3, sp, #12
 8004ef2:	9301      	str	r3, [sp, #4]
 8004ef4:	ab02      	add	r3, sp, #8
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	ec45 4b10 	vmov	d0, r4, r5
 8004efc:	4653      	mov	r3, sl
 8004efe:	4632      	mov	r2, r6
 8004f00:	f000 fcfe 	bl	8005900 <_dtoa_r>
 8004f04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f08:	4607      	mov	r7, r0
 8004f0a:	d102      	bne.n	8004f12 <__cvt+0x66>
 8004f0c:	f019 0f01 	tst.w	r9, #1
 8004f10:	d022      	beq.n	8004f58 <__cvt+0xac>
 8004f12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f16:	eb07 0906 	add.w	r9, r7, r6
 8004f1a:	d110      	bne.n	8004f3e <__cvt+0x92>
 8004f1c:	783b      	ldrb	r3, [r7, #0]
 8004f1e:	2b30      	cmp	r3, #48	; 0x30
 8004f20:	d10a      	bne.n	8004f38 <__cvt+0x8c>
 8004f22:	2200      	movs	r2, #0
 8004f24:	2300      	movs	r3, #0
 8004f26:	4620      	mov	r0, r4
 8004f28:	4629      	mov	r1, r5
 8004f2a:	f7fb fdd5 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f2e:	b918      	cbnz	r0, 8004f38 <__cvt+0x8c>
 8004f30:	f1c6 0601 	rsb	r6, r6, #1
 8004f34:	f8ca 6000 	str.w	r6, [sl]
 8004f38:	f8da 3000 	ldr.w	r3, [sl]
 8004f3c:	4499      	add	r9, r3
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2300      	movs	r3, #0
 8004f42:	4620      	mov	r0, r4
 8004f44:	4629      	mov	r1, r5
 8004f46:	f7fb fdc7 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f4a:	b108      	cbz	r0, 8004f50 <__cvt+0xa4>
 8004f4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f50:	2230      	movs	r2, #48	; 0x30
 8004f52:	9b03      	ldr	r3, [sp, #12]
 8004f54:	454b      	cmp	r3, r9
 8004f56:	d307      	bcc.n	8004f68 <__cvt+0xbc>
 8004f58:	9b03      	ldr	r3, [sp, #12]
 8004f5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f5c:	1bdb      	subs	r3, r3, r7
 8004f5e:	4638      	mov	r0, r7
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	b004      	add	sp, #16
 8004f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f68:	1c59      	adds	r1, r3, #1
 8004f6a:	9103      	str	r1, [sp, #12]
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	e7f0      	b.n	8004f52 <__cvt+0xa6>

08004f70 <__exponent>:
 8004f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f72:	4603      	mov	r3, r0
 8004f74:	2900      	cmp	r1, #0
 8004f76:	bfb8      	it	lt
 8004f78:	4249      	neglt	r1, r1
 8004f7a:	f803 2b02 	strb.w	r2, [r3], #2
 8004f7e:	bfb4      	ite	lt
 8004f80:	222d      	movlt	r2, #45	; 0x2d
 8004f82:	222b      	movge	r2, #43	; 0x2b
 8004f84:	2909      	cmp	r1, #9
 8004f86:	7042      	strb	r2, [r0, #1]
 8004f88:	dd2a      	ble.n	8004fe0 <__exponent+0x70>
 8004f8a:	f10d 0407 	add.w	r4, sp, #7
 8004f8e:	46a4      	mov	ip, r4
 8004f90:	270a      	movs	r7, #10
 8004f92:	46a6      	mov	lr, r4
 8004f94:	460a      	mov	r2, r1
 8004f96:	fb91 f6f7 	sdiv	r6, r1, r7
 8004f9a:	fb07 1516 	mls	r5, r7, r6, r1
 8004f9e:	3530      	adds	r5, #48	; 0x30
 8004fa0:	2a63      	cmp	r2, #99	; 0x63
 8004fa2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004fa6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004faa:	4631      	mov	r1, r6
 8004fac:	dcf1      	bgt.n	8004f92 <__exponent+0x22>
 8004fae:	3130      	adds	r1, #48	; 0x30
 8004fb0:	f1ae 0502 	sub.w	r5, lr, #2
 8004fb4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004fb8:	1c44      	adds	r4, r0, #1
 8004fba:	4629      	mov	r1, r5
 8004fbc:	4561      	cmp	r1, ip
 8004fbe:	d30a      	bcc.n	8004fd6 <__exponent+0x66>
 8004fc0:	f10d 0209 	add.w	r2, sp, #9
 8004fc4:	eba2 020e 	sub.w	r2, r2, lr
 8004fc8:	4565      	cmp	r5, ip
 8004fca:	bf88      	it	hi
 8004fcc:	2200      	movhi	r2, #0
 8004fce:	4413      	add	r3, r2
 8004fd0:	1a18      	subs	r0, r3, r0
 8004fd2:	b003      	add	sp, #12
 8004fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fda:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004fde:	e7ed      	b.n	8004fbc <__exponent+0x4c>
 8004fe0:	2330      	movs	r3, #48	; 0x30
 8004fe2:	3130      	adds	r1, #48	; 0x30
 8004fe4:	7083      	strb	r3, [r0, #2]
 8004fe6:	70c1      	strb	r1, [r0, #3]
 8004fe8:	1d03      	adds	r3, r0, #4
 8004fea:	e7f1      	b.n	8004fd0 <__exponent+0x60>

08004fec <_printf_float>:
 8004fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff0:	ed2d 8b02 	vpush	{d8}
 8004ff4:	b08d      	sub	sp, #52	; 0x34
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004ffc:	4616      	mov	r6, r2
 8004ffe:	461f      	mov	r7, r3
 8005000:	4605      	mov	r5, r0
 8005002:	f001 fa69 	bl	80064d8 <_localeconv_r>
 8005006:	f8d0 a000 	ldr.w	sl, [r0]
 800500a:	4650      	mov	r0, sl
 800500c:	f7fb f8e8 	bl	80001e0 <strlen>
 8005010:	2300      	movs	r3, #0
 8005012:	930a      	str	r3, [sp, #40]	; 0x28
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	9305      	str	r3, [sp, #20]
 8005018:	f8d8 3000 	ldr.w	r3, [r8]
 800501c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005020:	3307      	adds	r3, #7
 8005022:	f023 0307 	bic.w	r3, r3, #7
 8005026:	f103 0208 	add.w	r2, r3, #8
 800502a:	f8c8 2000 	str.w	r2, [r8]
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005036:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800503a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800503e:	9307      	str	r3, [sp, #28]
 8005040:	f8cd 8018 	str.w	r8, [sp, #24]
 8005044:	ee08 0a10 	vmov	s16, r0
 8005048:	4b9f      	ldr	r3, [pc, #636]	; (80052c8 <_printf_float+0x2dc>)
 800504a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800504e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005052:	f7fb fd73 	bl	8000b3c <__aeabi_dcmpun>
 8005056:	bb88      	cbnz	r0, 80050bc <_printf_float+0xd0>
 8005058:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800505c:	4b9a      	ldr	r3, [pc, #616]	; (80052c8 <_printf_float+0x2dc>)
 800505e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005062:	f7fb fd4d 	bl	8000b00 <__aeabi_dcmple>
 8005066:	bb48      	cbnz	r0, 80050bc <_printf_float+0xd0>
 8005068:	2200      	movs	r2, #0
 800506a:	2300      	movs	r3, #0
 800506c:	4640      	mov	r0, r8
 800506e:	4649      	mov	r1, r9
 8005070:	f7fb fd3c 	bl	8000aec <__aeabi_dcmplt>
 8005074:	b110      	cbz	r0, 800507c <_printf_float+0x90>
 8005076:	232d      	movs	r3, #45	; 0x2d
 8005078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800507c:	4b93      	ldr	r3, [pc, #588]	; (80052cc <_printf_float+0x2e0>)
 800507e:	4894      	ldr	r0, [pc, #592]	; (80052d0 <_printf_float+0x2e4>)
 8005080:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005084:	bf94      	ite	ls
 8005086:	4698      	movls	r8, r3
 8005088:	4680      	movhi	r8, r0
 800508a:	2303      	movs	r3, #3
 800508c:	6123      	str	r3, [r4, #16]
 800508e:	9b05      	ldr	r3, [sp, #20]
 8005090:	f023 0204 	bic.w	r2, r3, #4
 8005094:	6022      	str	r2, [r4, #0]
 8005096:	f04f 0900 	mov.w	r9, #0
 800509a:	9700      	str	r7, [sp, #0]
 800509c:	4633      	mov	r3, r6
 800509e:	aa0b      	add	r2, sp, #44	; 0x2c
 80050a0:	4621      	mov	r1, r4
 80050a2:	4628      	mov	r0, r5
 80050a4:	f000 f9d8 	bl	8005458 <_printf_common>
 80050a8:	3001      	adds	r0, #1
 80050aa:	f040 8090 	bne.w	80051ce <_printf_float+0x1e2>
 80050ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050b2:	b00d      	add	sp, #52	; 0x34
 80050b4:	ecbd 8b02 	vpop	{d8}
 80050b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050bc:	4642      	mov	r2, r8
 80050be:	464b      	mov	r3, r9
 80050c0:	4640      	mov	r0, r8
 80050c2:	4649      	mov	r1, r9
 80050c4:	f7fb fd3a 	bl	8000b3c <__aeabi_dcmpun>
 80050c8:	b140      	cbz	r0, 80050dc <_printf_float+0xf0>
 80050ca:	464b      	mov	r3, r9
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	bfbc      	itt	lt
 80050d0:	232d      	movlt	r3, #45	; 0x2d
 80050d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80050d6:	487f      	ldr	r0, [pc, #508]	; (80052d4 <_printf_float+0x2e8>)
 80050d8:	4b7f      	ldr	r3, [pc, #508]	; (80052d8 <_printf_float+0x2ec>)
 80050da:	e7d1      	b.n	8005080 <_printf_float+0x94>
 80050dc:	6863      	ldr	r3, [r4, #4]
 80050de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80050e2:	9206      	str	r2, [sp, #24]
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	d13f      	bne.n	8005168 <_printf_float+0x17c>
 80050e8:	2306      	movs	r3, #6
 80050ea:	6063      	str	r3, [r4, #4]
 80050ec:	9b05      	ldr	r3, [sp, #20]
 80050ee:	6861      	ldr	r1, [r4, #4]
 80050f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80050f4:	2300      	movs	r3, #0
 80050f6:	9303      	str	r3, [sp, #12]
 80050f8:	ab0a      	add	r3, sp, #40	; 0x28
 80050fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80050fe:	ab09      	add	r3, sp, #36	; 0x24
 8005100:	ec49 8b10 	vmov	d0, r8, r9
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	6022      	str	r2, [r4, #0]
 8005108:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800510c:	4628      	mov	r0, r5
 800510e:	f7ff fecd 	bl	8004eac <__cvt>
 8005112:	9b06      	ldr	r3, [sp, #24]
 8005114:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005116:	2b47      	cmp	r3, #71	; 0x47
 8005118:	4680      	mov	r8, r0
 800511a:	d108      	bne.n	800512e <_printf_float+0x142>
 800511c:	1cc8      	adds	r0, r1, #3
 800511e:	db02      	blt.n	8005126 <_printf_float+0x13a>
 8005120:	6863      	ldr	r3, [r4, #4]
 8005122:	4299      	cmp	r1, r3
 8005124:	dd41      	ble.n	80051aa <_printf_float+0x1be>
 8005126:	f1ab 0b02 	sub.w	fp, fp, #2
 800512a:	fa5f fb8b 	uxtb.w	fp, fp
 800512e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005132:	d820      	bhi.n	8005176 <_printf_float+0x18a>
 8005134:	3901      	subs	r1, #1
 8005136:	465a      	mov	r2, fp
 8005138:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800513c:	9109      	str	r1, [sp, #36]	; 0x24
 800513e:	f7ff ff17 	bl	8004f70 <__exponent>
 8005142:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005144:	1813      	adds	r3, r2, r0
 8005146:	2a01      	cmp	r2, #1
 8005148:	4681      	mov	r9, r0
 800514a:	6123      	str	r3, [r4, #16]
 800514c:	dc02      	bgt.n	8005154 <_printf_float+0x168>
 800514e:	6822      	ldr	r2, [r4, #0]
 8005150:	07d2      	lsls	r2, r2, #31
 8005152:	d501      	bpl.n	8005158 <_printf_float+0x16c>
 8005154:	3301      	adds	r3, #1
 8005156:	6123      	str	r3, [r4, #16]
 8005158:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800515c:	2b00      	cmp	r3, #0
 800515e:	d09c      	beq.n	800509a <_printf_float+0xae>
 8005160:	232d      	movs	r3, #45	; 0x2d
 8005162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005166:	e798      	b.n	800509a <_printf_float+0xae>
 8005168:	9a06      	ldr	r2, [sp, #24]
 800516a:	2a47      	cmp	r2, #71	; 0x47
 800516c:	d1be      	bne.n	80050ec <_printf_float+0x100>
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1bc      	bne.n	80050ec <_printf_float+0x100>
 8005172:	2301      	movs	r3, #1
 8005174:	e7b9      	b.n	80050ea <_printf_float+0xfe>
 8005176:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800517a:	d118      	bne.n	80051ae <_printf_float+0x1c2>
 800517c:	2900      	cmp	r1, #0
 800517e:	6863      	ldr	r3, [r4, #4]
 8005180:	dd0b      	ble.n	800519a <_printf_float+0x1ae>
 8005182:	6121      	str	r1, [r4, #16]
 8005184:	b913      	cbnz	r3, 800518c <_printf_float+0x1a0>
 8005186:	6822      	ldr	r2, [r4, #0]
 8005188:	07d0      	lsls	r0, r2, #31
 800518a:	d502      	bpl.n	8005192 <_printf_float+0x1a6>
 800518c:	3301      	adds	r3, #1
 800518e:	440b      	add	r3, r1
 8005190:	6123      	str	r3, [r4, #16]
 8005192:	65a1      	str	r1, [r4, #88]	; 0x58
 8005194:	f04f 0900 	mov.w	r9, #0
 8005198:	e7de      	b.n	8005158 <_printf_float+0x16c>
 800519a:	b913      	cbnz	r3, 80051a2 <_printf_float+0x1b6>
 800519c:	6822      	ldr	r2, [r4, #0]
 800519e:	07d2      	lsls	r2, r2, #31
 80051a0:	d501      	bpl.n	80051a6 <_printf_float+0x1ba>
 80051a2:	3302      	adds	r3, #2
 80051a4:	e7f4      	b.n	8005190 <_printf_float+0x1a4>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e7f2      	b.n	8005190 <_printf_float+0x1a4>
 80051aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80051ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051b0:	4299      	cmp	r1, r3
 80051b2:	db05      	blt.n	80051c0 <_printf_float+0x1d4>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	6121      	str	r1, [r4, #16]
 80051b8:	07d8      	lsls	r0, r3, #31
 80051ba:	d5ea      	bpl.n	8005192 <_printf_float+0x1a6>
 80051bc:	1c4b      	adds	r3, r1, #1
 80051be:	e7e7      	b.n	8005190 <_printf_float+0x1a4>
 80051c0:	2900      	cmp	r1, #0
 80051c2:	bfd4      	ite	le
 80051c4:	f1c1 0202 	rsble	r2, r1, #2
 80051c8:	2201      	movgt	r2, #1
 80051ca:	4413      	add	r3, r2
 80051cc:	e7e0      	b.n	8005190 <_printf_float+0x1a4>
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	055a      	lsls	r2, r3, #21
 80051d2:	d407      	bmi.n	80051e4 <_printf_float+0x1f8>
 80051d4:	6923      	ldr	r3, [r4, #16]
 80051d6:	4642      	mov	r2, r8
 80051d8:	4631      	mov	r1, r6
 80051da:	4628      	mov	r0, r5
 80051dc:	47b8      	blx	r7
 80051de:	3001      	adds	r0, #1
 80051e0:	d12c      	bne.n	800523c <_printf_float+0x250>
 80051e2:	e764      	b.n	80050ae <_printf_float+0xc2>
 80051e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051e8:	f240 80e0 	bls.w	80053ac <_printf_float+0x3c0>
 80051ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051f0:	2200      	movs	r2, #0
 80051f2:	2300      	movs	r3, #0
 80051f4:	f7fb fc70 	bl	8000ad8 <__aeabi_dcmpeq>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d034      	beq.n	8005266 <_printf_float+0x27a>
 80051fc:	4a37      	ldr	r2, [pc, #220]	; (80052dc <_printf_float+0x2f0>)
 80051fe:	2301      	movs	r3, #1
 8005200:	4631      	mov	r1, r6
 8005202:	4628      	mov	r0, r5
 8005204:	47b8      	blx	r7
 8005206:	3001      	adds	r0, #1
 8005208:	f43f af51 	beq.w	80050ae <_printf_float+0xc2>
 800520c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005210:	429a      	cmp	r2, r3
 8005212:	db02      	blt.n	800521a <_printf_float+0x22e>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	07d8      	lsls	r0, r3, #31
 8005218:	d510      	bpl.n	800523c <_printf_float+0x250>
 800521a:	ee18 3a10 	vmov	r3, s16
 800521e:	4652      	mov	r2, sl
 8005220:	4631      	mov	r1, r6
 8005222:	4628      	mov	r0, r5
 8005224:	47b8      	blx	r7
 8005226:	3001      	adds	r0, #1
 8005228:	f43f af41 	beq.w	80050ae <_printf_float+0xc2>
 800522c:	f04f 0800 	mov.w	r8, #0
 8005230:	f104 091a 	add.w	r9, r4, #26
 8005234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005236:	3b01      	subs	r3, #1
 8005238:	4543      	cmp	r3, r8
 800523a:	dc09      	bgt.n	8005250 <_printf_float+0x264>
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	079b      	lsls	r3, r3, #30
 8005240:	f100 8105 	bmi.w	800544e <_printf_float+0x462>
 8005244:	68e0      	ldr	r0, [r4, #12]
 8005246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005248:	4298      	cmp	r0, r3
 800524a:	bfb8      	it	lt
 800524c:	4618      	movlt	r0, r3
 800524e:	e730      	b.n	80050b2 <_printf_float+0xc6>
 8005250:	2301      	movs	r3, #1
 8005252:	464a      	mov	r2, r9
 8005254:	4631      	mov	r1, r6
 8005256:	4628      	mov	r0, r5
 8005258:	47b8      	blx	r7
 800525a:	3001      	adds	r0, #1
 800525c:	f43f af27 	beq.w	80050ae <_printf_float+0xc2>
 8005260:	f108 0801 	add.w	r8, r8, #1
 8005264:	e7e6      	b.n	8005234 <_printf_float+0x248>
 8005266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005268:	2b00      	cmp	r3, #0
 800526a:	dc39      	bgt.n	80052e0 <_printf_float+0x2f4>
 800526c:	4a1b      	ldr	r2, [pc, #108]	; (80052dc <_printf_float+0x2f0>)
 800526e:	2301      	movs	r3, #1
 8005270:	4631      	mov	r1, r6
 8005272:	4628      	mov	r0, r5
 8005274:	47b8      	blx	r7
 8005276:	3001      	adds	r0, #1
 8005278:	f43f af19 	beq.w	80050ae <_printf_float+0xc2>
 800527c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005280:	4313      	orrs	r3, r2
 8005282:	d102      	bne.n	800528a <_printf_float+0x29e>
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	07d9      	lsls	r1, r3, #31
 8005288:	d5d8      	bpl.n	800523c <_printf_float+0x250>
 800528a:	ee18 3a10 	vmov	r3, s16
 800528e:	4652      	mov	r2, sl
 8005290:	4631      	mov	r1, r6
 8005292:	4628      	mov	r0, r5
 8005294:	47b8      	blx	r7
 8005296:	3001      	adds	r0, #1
 8005298:	f43f af09 	beq.w	80050ae <_printf_float+0xc2>
 800529c:	f04f 0900 	mov.w	r9, #0
 80052a0:	f104 0a1a 	add.w	sl, r4, #26
 80052a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a6:	425b      	negs	r3, r3
 80052a8:	454b      	cmp	r3, r9
 80052aa:	dc01      	bgt.n	80052b0 <_printf_float+0x2c4>
 80052ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ae:	e792      	b.n	80051d6 <_printf_float+0x1ea>
 80052b0:	2301      	movs	r3, #1
 80052b2:	4652      	mov	r2, sl
 80052b4:	4631      	mov	r1, r6
 80052b6:	4628      	mov	r0, r5
 80052b8:	47b8      	blx	r7
 80052ba:	3001      	adds	r0, #1
 80052bc:	f43f aef7 	beq.w	80050ae <_printf_float+0xc2>
 80052c0:	f109 0901 	add.w	r9, r9, #1
 80052c4:	e7ee      	b.n	80052a4 <_printf_float+0x2b8>
 80052c6:	bf00      	nop
 80052c8:	7fefffff 	.word	0x7fefffff
 80052cc:	080089d8 	.word	0x080089d8
 80052d0:	080089dc 	.word	0x080089dc
 80052d4:	080089e4 	.word	0x080089e4
 80052d8:	080089e0 	.word	0x080089e0
 80052dc:	080089e8 	.word	0x080089e8
 80052e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052e4:	429a      	cmp	r2, r3
 80052e6:	bfa8      	it	ge
 80052e8:	461a      	movge	r2, r3
 80052ea:	2a00      	cmp	r2, #0
 80052ec:	4691      	mov	r9, r2
 80052ee:	dc37      	bgt.n	8005360 <_printf_float+0x374>
 80052f0:	f04f 0b00 	mov.w	fp, #0
 80052f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052f8:	f104 021a 	add.w	r2, r4, #26
 80052fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052fe:	9305      	str	r3, [sp, #20]
 8005300:	eba3 0309 	sub.w	r3, r3, r9
 8005304:	455b      	cmp	r3, fp
 8005306:	dc33      	bgt.n	8005370 <_printf_float+0x384>
 8005308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800530c:	429a      	cmp	r2, r3
 800530e:	db3b      	blt.n	8005388 <_printf_float+0x39c>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	07da      	lsls	r2, r3, #31
 8005314:	d438      	bmi.n	8005388 <_printf_float+0x39c>
 8005316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005318:	9b05      	ldr	r3, [sp, #20]
 800531a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	eba2 0901 	sub.w	r9, r2, r1
 8005322:	4599      	cmp	r9, r3
 8005324:	bfa8      	it	ge
 8005326:	4699      	movge	r9, r3
 8005328:	f1b9 0f00 	cmp.w	r9, #0
 800532c:	dc35      	bgt.n	800539a <_printf_float+0x3ae>
 800532e:	f04f 0800 	mov.w	r8, #0
 8005332:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005336:	f104 0a1a 	add.w	sl, r4, #26
 800533a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800533e:	1a9b      	subs	r3, r3, r2
 8005340:	eba3 0309 	sub.w	r3, r3, r9
 8005344:	4543      	cmp	r3, r8
 8005346:	f77f af79 	ble.w	800523c <_printf_float+0x250>
 800534a:	2301      	movs	r3, #1
 800534c:	4652      	mov	r2, sl
 800534e:	4631      	mov	r1, r6
 8005350:	4628      	mov	r0, r5
 8005352:	47b8      	blx	r7
 8005354:	3001      	adds	r0, #1
 8005356:	f43f aeaa 	beq.w	80050ae <_printf_float+0xc2>
 800535a:	f108 0801 	add.w	r8, r8, #1
 800535e:	e7ec      	b.n	800533a <_printf_float+0x34e>
 8005360:	4613      	mov	r3, r2
 8005362:	4631      	mov	r1, r6
 8005364:	4642      	mov	r2, r8
 8005366:	4628      	mov	r0, r5
 8005368:	47b8      	blx	r7
 800536a:	3001      	adds	r0, #1
 800536c:	d1c0      	bne.n	80052f0 <_printf_float+0x304>
 800536e:	e69e      	b.n	80050ae <_printf_float+0xc2>
 8005370:	2301      	movs	r3, #1
 8005372:	4631      	mov	r1, r6
 8005374:	4628      	mov	r0, r5
 8005376:	9205      	str	r2, [sp, #20]
 8005378:	47b8      	blx	r7
 800537a:	3001      	adds	r0, #1
 800537c:	f43f ae97 	beq.w	80050ae <_printf_float+0xc2>
 8005380:	9a05      	ldr	r2, [sp, #20]
 8005382:	f10b 0b01 	add.w	fp, fp, #1
 8005386:	e7b9      	b.n	80052fc <_printf_float+0x310>
 8005388:	ee18 3a10 	vmov	r3, s16
 800538c:	4652      	mov	r2, sl
 800538e:	4631      	mov	r1, r6
 8005390:	4628      	mov	r0, r5
 8005392:	47b8      	blx	r7
 8005394:	3001      	adds	r0, #1
 8005396:	d1be      	bne.n	8005316 <_printf_float+0x32a>
 8005398:	e689      	b.n	80050ae <_printf_float+0xc2>
 800539a:	9a05      	ldr	r2, [sp, #20]
 800539c:	464b      	mov	r3, r9
 800539e:	4442      	add	r2, r8
 80053a0:	4631      	mov	r1, r6
 80053a2:	4628      	mov	r0, r5
 80053a4:	47b8      	blx	r7
 80053a6:	3001      	adds	r0, #1
 80053a8:	d1c1      	bne.n	800532e <_printf_float+0x342>
 80053aa:	e680      	b.n	80050ae <_printf_float+0xc2>
 80053ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053ae:	2a01      	cmp	r2, #1
 80053b0:	dc01      	bgt.n	80053b6 <_printf_float+0x3ca>
 80053b2:	07db      	lsls	r3, r3, #31
 80053b4:	d538      	bpl.n	8005428 <_printf_float+0x43c>
 80053b6:	2301      	movs	r3, #1
 80053b8:	4642      	mov	r2, r8
 80053ba:	4631      	mov	r1, r6
 80053bc:	4628      	mov	r0, r5
 80053be:	47b8      	blx	r7
 80053c0:	3001      	adds	r0, #1
 80053c2:	f43f ae74 	beq.w	80050ae <_printf_float+0xc2>
 80053c6:	ee18 3a10 	vmov	r3, s16
 80053ca:	4652      	mov	r2, sl
 80053cc:	4631      	mov	r1, r6
 80053ce:	4628      	mov	r0, r5
 80053d0:	47b8      	blx	r7
 80053d2:	3001      	adds	r0, #1
 80053d4:	f43f ae6b 	beq.w	80050ae <_printf_float+0xc2>
 80053d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053dc:	2200      	movs	r2, #0
 80053de:	2300      	movs	r3, #0
 80053e0:	f7fb fb7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80053e4:	b9d8      	cbnz	r0, 800541e <_printf_float+0x432>
 80053e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e8:	f108 0201 	add.w	r2, r8, #1
 80053ec:	3b01      	subs	r3, #1
 80053ee:	4631      	mov	r1, r6
 80053f0:	4628      	mov	r0, r5
 80053f2:	47b8      	blx	r7
 80053f4:	3001      	adds	r0, #1
 80053f6:	d10e      	bne.n	8005416 <_printf_float+0x42a>
 80053f8:	e659      	b.n	80050ae <_printf_float+0xc2>
 80053fa:	2301      	movs	r3, #1
 80053fc:	4652      	mov	r2, sl
 80053fe:	4631      	mov	r1, r6
 8005400:	4628      	mov	r0, r5
 8005402:	47b8      	blx	r7
 8005404:	3001      	adds	r0, #1
 8005406:	f43f ae52 	beq.w	80050ae <_printf_float+0xc2>
 800540a:	f108 0801 	add.w	r8, r8, #1
 800540e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005410:	3b01      	subs	r3, #1
 8005412:	4543      	cmp	r3, r8
 8005414:	dcf1      	bgt.n	80053fa <_printf_float+0x40e>
 8005416:	464b      	mov	r3, r9
 8005418:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800541c:	e6dc      	b.n	80051d8 <_printf_float+0x1ec>
 800541e:	f04f 0800 	mov.w	r8, #0
 8005422:	f104 0a1a 	add.w	sl, r4, #26
 8005426:	e7f2      	b.n	800540e <_printf_float+0x422>
 8005428:	2301      	movs	r3, #1
 800542a:	4642      	mov	r2, r8
 800542c:	e7df      	b.n	80053ee <_printf_float+0x402>
 800542e:	2301      	movs	r3, #1
 8005430:	464a      	mov	r2, r9
 8005432:	4631      	mov	r1, r6
 8005434:	4628      	mov	r0, r5
 8005436:	47b8      	blx	r7
 8005438:	3001      	adds	r0, #1
 800543a:	f43f ae38 	beq.w	80050ae <_printf_float+0xc2>
 800543e:	f108 0801 	add.w	r8, r8, #1
 8005442:	68e3      	ldr	r3, [r4, #12]
 8005444:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005446:	1a5b      	subs	r3, r3, r1
 8005448:	4543      	cmp	r3, r8
 800544a:	dcf0      	bgt.n	800542e <_printf_float+0x442>
 800544c:	e6fa      	b.n	8005244 <_printf_float+0x258>
 800544e:	f04f 0800 	mov.w	r8, #0
 8005452:	f104 0919 	add.w	r9, r4, #25
 8005456:	e7f4      	b.n	8005442 <_printf_float+0x456>

08005458 <_printf_common>:
 8005458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800545c:	4616      	mov	r6, r2
 800545e:	4699      	mov	r9, r3
 8005460:	688a      	ldr	r2, [r1, #8]
 8005462:	690b      	ldr	r3, [r1, #16]
 8005464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005468:	4293      	cmp	r3, r2
 800546a:	bfb8      	it	lt
 800546c:	4613      	movlt	r3, r2
 800546e:	6033      	str	r3, [r6, #0]
 8005470:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005474:	4607      	mov	r7, r0
 8005476:	460c      	mov	r4, r1
 8005478:	b10a      	cbz	r2, 800547e <_printf_common+0x26>
 800547a:	3301      	adds	r3, #1
 800547c:	6033      	str	r3, [r6, #0]
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	0699      	lsls	r1, r3, #26
 8005482:	bf42      	ittt	mi
 8005484:	6833      	ldrmi	r3, [r6, #0]
 8005486:	3302      	addmi	r3, #2
 8005488:	6033      	strmi	r3, [r6, #0]
 800548a:	6825      	ldr	r5, [r4, #0]
 800548c:	f015 0506 	ands.w	r5, r5, #6
 8005490:	d106      	bne.n	80054a0 <_printf_common+0x48>
 8005492:	f104 0a19 	add.w	sl, r4, #25
 8005496:	68e3      	ldr	r3, [r4, #12]
 8005498:	6832      	ldr	r2, [r6, #0]
 800549a:	1a9b      	subs	r3, r3, r2
 800549c:	42ab      	cmp	r3, r5
 800549e:	dc26      	bgt.n	80054ee <_printf_common+0x96>
 80054a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054a4:	1e13      	subs	r3, r2, #0
 80054a6:	6822      	ldr	r2, [r4, #0]
 80054a8:	bf18      	it	ne
 80054aa:	2301      	movne	r3, #1
 80054ac:	0692      	lsls	r2, r2, #26
 80054ae:	d42b      	bmi.n	8005508 <_printf_common+0xb0>
 80054b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054b4:	4649      	mov	r1, r9
 80054b6:	4638      	mov	r0, r7
 80054b8:	47c0      	blx	r8
 80054ba:	3001      	adds	r0, #1
 80054bc:	d01e      	beq.n	80054fc <_printf_common+0xa4>
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	68e5      	ldr	r5, [r4, #12]
 80054c2:	6832      	ldr	r2, [r6, #0]
 80054c4:	f003 0306 	and.w	r3, r3, #6
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	bf08      	it	eq
 80054cc:	1aad      	subeq	r5, r5, r2
 80054ce:	68a3      	ldr	r3, [r4, #8]
 80054d0:	6922      	ldr	r2, [r4, #16]
 80054d2:	bf0c      	ite	eq
 80054d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054d8:	2500      	movne	r5, #0
 80054da:	4293      	cmp	r3, r2
 80054dc:	bfc4      	itt	gt
 80054de:	1a9b      	subgt	r3, r3, r2
 80054e0:	18ed      	addgt	r5, r5, r3
 80054e2:	2600      	movs	r6, #0
 80054e4:	341a      	adds	r4, #26
 80054e6:	42b5      	cmp	r5, r6
 80054e8:	d11a      	bne.n	8005520 <_printf_common+0xc8>
 80054ea:	2000      	movs	r0, #0
 80054ec:	e008      	b.n	8005500 <_printf_common+0xa8>
 80054ee:	2301      	movs	r3, #1
 80054f0:	4652      	mov	r2, sl
 80054f2:	4649      	mov	r1, r9
 80054f4:	4638      	mov	r0, r7
 80054f6:	47c0      	blx	r8
 80054f8:	3001      	adds	r0, #1
 80054fa:	d103      	bne.n	8005504 <_printf_common+0xac>
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005504:	3501      	adds	r5, #1
 8005506:	e7c6      	b.n	8005496 <_printf_common+0x3e>
 8005508:	18e1      	adds	r1, r4, r3
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	2030      	movs	r0, #48	; 0x30
 800550e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005512:	4422      	add	r2, r4
 8005514:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005518:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800551c:	3302      	adds	r3, #2
 800551e:	e7c7      	b.n	80054b0 <_printf_common+0x58>
 8005520:	2301      	movs	r3, #1
 8005522:	4622      	mov	r2, r4
 8005524:	4649      	mov	r1, r9
 8005526:	4638      	mov	r0, r7
 8005528:	47c0      	blx	r8
 800552a:	3001      	adds	r0, #1
 800552c:	d0e6      	beq.n	80054fc <_printf_common+0xa4>
 800552e:	3601      	adds	r6, #1
 8005530:	e7d9      	b.n	80054e6 <_printf_common+0x8e>
	...

08005534 <_printf_i>:
 8005534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005538:	460c      	mov	r4, r1
 800553a:	4691      	mov	r9, r2
 800553c:	7e27      	ldrb	r7, [r4, #24]
 800553e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005540:	2f78      	cmp	r7, #120	; 0x78
 8005542:	4680      	mov	r8, r0
 8005544:	469a      	mov	sl, r3
 8005546:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800554a:	d807      	bhi.n	800555c <_printf_i+0x28>
 800554c:	2f62      	cmp	r7, #98	; 0x62
 800554e:	d80a      	bhi.n	8005566 <_printf_i+0x32>
 8005550:	2f00      	cmp	r7, #0
 8005552:	f000 80d8 	beq.w	8005706 <_printf_i+0x1d2>
 8005556:	2f58      	cmp	r7, #88	; 0x58
 8005558:	f000 80a3 	beq.w	80056a2 <_printf_i+0x16e>
 800555c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005560:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005564:	e03a      	b.n	80055dc <_printf_i+0xa8>
 8005566:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800556a:	2b15      	cmp	r3, #21
 800556c:	d8f6      	bhi.n	800555c <_printf_i+0x28>
 800556e:	a001      	add	r0, pc, #4	; (adr r0, 8005574 <_printf_i+0x40>)
 8005570:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005574:	080055cd 	.word	0x080055cd
 8005578:	080055e1 	.word	0x080055e1
 800557c:	0800555d 	.word	0x0800555d
 8005580:	0800555d 	.word	0x0800555d
 8005584:	0800555d 	.word	0x0800555d
 8005588:	0800555d 	.word	0x0800555d
 800558c:	080055e1 	.word	0x080055e1
 8005590:	0800555d 	.word	0x0800555d
 8005594:	0800555d 	.word	0x0800555d
 8005598:	0800555d 	.word	0x0800555d
 800559c:	0800555d 	.word	0x0800555d
 80055a0:	080056ed 	.word	0x080056ed
 80055a4:	08005611 	.word	0x08005611
 80055a8:	080056cf 	.word	0x080056cf
 80055ac:	0800555d 	.word	0x0800555d
 80055b0:	0800555d 	.word	0x0800555d
 80055b4:	0800570f 	.word	0x0800570f
 80055b8:	0800555d 	.word	0x0800555d
 80055bc:	08005611 	.word	0x08005611
 80055c0:	0800555d 	.word	0x0800555d
 80055c4:	0800555d 	.word	0x0800555d
 80055c8:	080056d7 	.word	0x080056d7
 80055cc:	680b      	ldr	r3, [r1, #0]
 80055ce:	1d1a      	adds	r2, r3, #4
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	600a      	str	r2, [r1, #0]
 80055d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055dc:	2301      	movs	r3, #1
 80055de:	e0a3      	b.n	8005728 <_printf_i+0x1f4>
 80055e0:	6825      	ldr	r5, [r4, #0]
 80055e2:	6808      	ldr	r0, [r1, #0]
 80055e4:	062e      	lsls	r6, r5, #24
 80055e6:	f100 0304 	add.w	r3, r0, #4
 80055ea:	d50a      	bpl.n	8005602 <_printf_i+0xce>
 80055ec:	6805      	ldr	r5, [r0, #0]
 80055ee:	600b      	str	r3, [r1, #0]
 80055f0:	2d00      	cmp	r5, #0
 80055f2:	da03      	bge.n	80055fc <_printf_i+0xc8>
 80055f4:	232d      	movs	r3, #45	; 0x2d
 80055f6:	426d      	negs	r5, r5
 80055f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055fc:	485e      	ldr	r0, [pc, #376]	; (8005778 <_printf_i+0x244>)
 80055fe:	230a      	movs	r3, #10
 8005600:	e019      	b.n	8005636 <_printf_i+0x102>
 8005602:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005606:	6805      	ldr	r5, [r0, #0]
 8005608:	600b      	str	r3, [r1, #0]
 800560a:	bf18      	it	ne
 800560c:	b22d      	sxthne	r5, r5
 800560e:	e7ef      	b.n	80055f0 <_printf_i+0xbc>
 8005610:	680b      	ldr	r3, [r1, #0]
 8005612:	6825      	ldr	r5, [r4, #0]
 8005614:	1d18      	adds	r0, r3, #4
 8005616:	6008      	str	r0, [r1, #0]
 8005618:	0628      	lsls	r0, r5, #24
 800561a:	d501      	bpl.n	8005620 <_printf_i+0xec>
 800561c:	681d      	ldr	r5, [r3, #0]
 800561e:	e002      	b.n	8005626 <_printf_i+0xf2>
 8005620:	0669      	lsls	r1, r5, #25
 8005622:	d5fb      	bpl.n	800561c <_printf_i+0xe8>
 8005624:	881d      	ldrh	r5, [r3, #0]
 8005626:	4854      	ldr	r0, [pc, #336]	; (8005778 <_printf_i+0x244>)
 8005628:	2f6f      	cmp	r7, #111	; 0x6f
 800562a:	bf0c      	ite	eq
 800562c:	2308      	moveq	r3, #8
 800562e:	230a      	movne	r3, #10
 8005630:	2100      	movs	r1, #0
 8005632:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005636:	6866      	ldr	r6, [r4, #4]
 8005638:	60a6      	str	r6, [r4, #8]
 800563a:	2e00      	cmp	r6, #0
 800563c:	bfa2      	ittt	ge
 800563e:	6821      	ldrge	r1, [r4, #0]
 8005640:	f021 0104 	bicge.w	r1, r1, #4
 8005644:	6021      	strge	r1, [r4, #0]
 8005646:	b90d      	cbnz	r5, 800564c <_printf_i+0x118>
 8005648:	2e00      	cmp	r6, #0
 800564a:	d04d      	beq.n	80056e8 <_printf_i+0x1b4>
 800564c:	4616      	mov	r6, r2
 800564e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005652:	fb03 5711 	mls	r7, r3, r1, r5
 8005656:	5dc7      	ldrb	r7, [r0, r7]
 8005658:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800565c:	462f      	mov	r7, r5
 800565e:	42bb      	cmp	r3, r7
 8005660:	460d      	mov	r5, r1
 8005662:	d9f4      	bls.n	800564e <_printf_i+0x11a>
 8005664:	2b08      	cmp	r3, #8
 8005666:	d10b      	bne.n	8005680 <_printf_i+0x14c>
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	07df      	lsls	r7, r3, #31
 800566c:	d508      	bpl.n	8005680 <_printf_i+0x14c>
 800566e:	6923      	ldr	r3, [r4, #16]
 8005670:	6861      	ldr	r1, [r4, #4]
 8005672:	4299      	cmp	r1, r3
 8005674:	bfde      	ittt	le
 8005676:	2330      	movle	r3, #48	; 0x30
 8005678:	f806 3c01 	strble.w	r3, [r6, #-1]
 800567c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005680:	1b92      	subs	r2, r2, r6
 8005682:	6122      	str	r2, [r4, #16]
 8005684:	f8cd a000 	str.w	sl, [sp]
 8005688:	464b      	mov	r3, r9
 800568a:	aa03      	add	r2, sp, #12
 800568c:	4621      	mov	r1, r4
 800568e:	4640      	mov	r0, r8
 8005690:	f7ff fee2 	bl	8005458 <_printf_common>
 8005694:	3001      	adds	r0, #1
 8005696:	d14c      	bne.n	8005732 <_printf_i+0x1fe>
 8005698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800569c:	b004      	add	sp, #16
 800569e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a2:	4835      	ldr	r0, [pc, #212]	; (8005778 <_printf_i+0x244>)
 80056a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	680e      	ldr	r6, [r1, #0]
 80056ac:	061f      	lsls	r7, r3, #24
 80056ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80056b2:	600e      	str	r6, [r1, #0]
 80056b4:	d514      	bpl.n	80056e0 <_printf_i+0x1ac>
 80056b6:	07d9      	lsls	r1, r3, #31
 80056b8:	bf44      	itt	mi
 80056ba:	f043 0320 	orrmi.w	r3, r3, #32
 80056be:	6023      	strmi	r3, [r4, #0]
 80056c0:	b91d      	cbnz	r5, 80056ca <_printf_i+0x196>
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	f023 0320 	bic.w	r3, r3, #32
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	2310      	movs	r3, #16
 80056cc:	e7b0      	b.n	8005630 <_printf_i+0xfc>
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	f043 0320 	orr.w	r3, r3, #32
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	2378      	movs	r3, #120	; 0x78
 80056d8:	4828      	ldr	r0, [pc, #160]	; (800577c <_printf_i+0x248>)
 80056da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056de:	e7e3      	b.n	80056a8 <_printf_i+0x174>
 80056e0:	065e      	lsls	r6, r3, #25
 80056e2:	bf48      	it	mi
 80056e4:	b2ad      	uxthmi	r5, r5
 80056e6:	e7e6      	b.n	80056b6 <_printf_i+0x182>
 80056e8:	4616      	mov	r6, r2
 80056ea:	e7bb      	b.n	8005664 <_printf_i+0x130>
 80056ec:	680b      	ldr	r3, [r1, #0]
 80056ee:	6826      	ldr	r6, [r4, #0]
 80056f0:	6960      	ldr	r0, [r4, #20]
 80056f2:	1d1d      	adds	r5, r3, #4
 80056f4:	600d      	str	r5, [r1, #0]
 80056f6:	0635      	lsls	r5, r6, #24
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	d501      	bpl.n	8005700 <_printf_i+0x1cc>
 80056fc:	6018      	str	r0, [r3, #0]
 80056fe:	e002      	b.n	8005706 <_printf_i+0x1d2>
 8005700:	0671      	lsls	r1, r6, #25
 8005702:	d5fb      	bpl.n	80056fc <_printf_i+0x1c8>
 8005704:	8018      	strh	r0, [r3, #0]
 8005706:	2300      	movs	r3, #0
 8005708:	6123      	str	r3, [r4, #16]
 800570a:	4616      	mov	r6, r2
 800570c:	e7ba      	b.n	8005684 <_printf_i+0x150>
 800570e:	680b      	ldr	r3, [r1, #0]
 8005710:	1d1a      	adds	r2, r3, #4
 8005712:	600a      	str	r2, [r1, #0]
 8005714:	681e      	ldr	r6, [r3, #0]
 8005716:	6862      	ldr	r2, [r4, #4]
 8005718:	2100      	movs	r1, #0
 800571a:	4630      	mov	r0, r6
 800571c:	f7fa fd68 	bl	80001f0 <memchr>
 8005720:	b108      	cbz	r0, 8005726 <_printf_i+0x1f2>
 8005722:	1b80      	subs	r0, r0, r6
 8005724:	6060      	str	r0, [r4, #4]
 8005726:	6863      	ldr	r3, [r4, #4]
 8005728:	6123      	str	r3, [r4, #16]
 800572a:	2300      	movs	r3, #0
 800572c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005730:	e7a8      	b.n	8005684 <_printf_i+0x150>
 8005732:	6923      	ldr	r3, [r4, #16]
 8005734:	4632      	mov	r2, r6
 8005736:	4649      	mov	r1, r9
 8005738:	4640      	mov	r0, r8
 800573a:	47d0      	blx	sl
 800573c:	3001      	adds	r0, #1
 800573e:	d0ab      	beq.n	8005698 <_printf_i+0x164>
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	079b      	lsls	r3, r3, #30
 8005744:	d413      	bmi.n	800576e <_printf_i+0x23a>
 8005746:	68e0      	ldr	r0, [r4, #12]
 8005748:	9b03      	ldr	r3, [sp, #12]
 800574a:	4298      	cmp	r0, r3
 800574c:	bfb8      	it	lt
 800574e:	4618      	movlt	r0, r3
 8005750:	e7a4      	b.n	800569c <_printf_i+0x168>
 8005752:	2301      	movs	r3, #1
 8005754:	4632      	mov	r2, r6
 8005756:	4649      	mov	r1, r9
 8005758:	4640      	mov	r0, r8
 800575a:	47d0      	blx	sl
 800575c:	3001      	adds	r0, #1
 800575e:	d09b      	beq.n	8005698 <_printf_i+0x164>
 8005760:	3501      	adds	r5, #1
 8005762:	68e3      	ldr	r3, [r4, #12]
 8005764:	9903      	ldr	r1, [sp, #12]
 8005766:	1a5b      	subs	r3, r3, r1
 8005768:	42ab      	cmp	r3, r5
 800576a:	dcf2      	bgt.n	8005752 <_printf_i+0x21e>
 800576c:	e7eb      	b.n	8005746 <_printf_i+0x212>
 800576e:	2500      	movs	r5, #0
 8005770:	f104 0619 	add.w	r6, r4, #25
 8005774:	e7f5      	b.n	8005762 <_printf_i+0x22e>
 8005776:	bf00      	nop
 8005778:	080089ea 	.word	0x080089ea
 800577c:	080089fb 	.word	0x080089fb

08005780 <copysign>:
 8005780:	b082      	sub	sp, #8
 8005782:	ec51 0b10 	vmov	r0, r1, d0
 8005786:	ed8d 1b00 	vstr	d1, [sp]
 800578a:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800578e:	9901      	ldr	r1, [sp, #4]
 8005790:	ee10 2a10 	vmov	r2, s0
 8005794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005798:	ea40 0301 	orr.w	r3, r0, r1
 800579c:	ec43 2b10 	vmov	d0, r2, r3
 80057a0:	b002      	add	sp, #8
 80057a2:	4770      	bx	lr

080057a4 <siprintf>:
 80057a4:	b40e      	push	{r1, r2, r3}
 80057a6:	b500      	push	{lr}
 80057a8:	b09c      	sub	sp, #112	; 0x70
 80057aa:	ab1d      	add	r3, sp, #116	; 0x74
 80057ac:	9002      	str	r0, [sp, #8]
 80057ae:	9006      	str	r0, [sp, #24]
 80057b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057b4:	4809      	ldr	r0, [pc, #36]	; (80057dc <siprintf+0x38>)
 80057b6:	9107      	str	r1, [sp, #28]
 80057b8:	9104      	str	r1, [sp, #16]
 80057ba:	4909      	ldr	r1, [pc, #36]	; (80057e0 <siprintf+0x3c>)
 80057bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80057c0:	9105      	str	r1, [sp, #20]
 80057c2:	6800      	ldr	r0, [r0, #0]
 80057c4:	9301      	str	r3, [sp, #4]
 80057c6:	a902      	add	r1, sp, #8
 80057c8:	f001 fb34 	bl	8006e34 <_svfiprintf_r>
 80057cc:	9b02      	ldr	r3, [sp, #8]
 80057ce:	2200      	movs	r2, #0
 80057d0:	701a      	strb	r2, [r3, #0]
 80057d2:	b01c      	add	sp, #112	; 0x70
 80057d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80057d8:	b003      	add	sp, #12
 80057da:	4770      	bx	lr
 80057dc:	2000201c 	.word	0x2000201c
 80057e0:	ffff0208 	.word	0xffff0208

080057e4 <quorem>:
 80057e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e8:	6903      	ldr	r3, [r0, #16]
 80057ea:	690c      	ldr	r4, [r1, #16]
 80057ec:	42a3      	cmp	r3, r4
 80057ee:	4607      	mov	r7, r0
 80057f0:	f2c0 8081 	blt.w	80058f6 <quorem+0x112>
 80057f4:	3c01      	subs	r4, #1
 80057f6:	f101 0814 	add.w	r8, r1, #20
 80057fa:	f100 0514 	add.w	r5, r0, #20
 80057fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005802:	9301      	str	r3, [sp, #4]
 8005804:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005808:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800580c:	3301      	adds	r3, #1
 800580e:	429a      	cmp	r2, r3
 8005810:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005814:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005818:	fbb2 f6f3 	udiv	r6, r2, r3
 800581c:	d331      	bcc.n	8005882 <quorem+0x9e>
 800581e:	f04f 0e00 	mov.w	lr, #0
 8005822:	4640      	mov	r0, r8
 8005824:	46ac      	mov	ip, r5
 8005826:	46f2      	mov	sl, lr
 8005828:	f850 2b04 	ldr.w	r2, [r0], #4
 800582c:	b293      	uxth	r3, r2
 800582e:	fb06 e303 	mla	r3, r6, r3, lr
 8005832:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005836:	b29b      	uxth	r3, r3
 8005838:	ebaa 0303 	sub.w	r3, sl, r3
 800583c:	0c12      	lsrs	r2, r2, #16
 800583e:	f8dc a000 	ldr.w	sl, [ip]
 8005842:	fb06 e202 	mla	r2, r6, r2, lr
 8005846:	fa13 f38a 	uxtah	r3, r3, sl
 800584a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800584e:	fa1f fa82 	uxth.w	sl, r2
 8005852:	f8dc 2000 	ldr.w	r2, [ip]
 8005856:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800585a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800585e:	b29b      	uxth	r3, r3
 8005860:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005864:	4581      	cmp	r9, r0
 8005866:	f84c 3b04 	str.w	r3, [ip], #4
 800586a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800586e:	d2db      	bcs.n	8005828 <quorem+0x44>
 8005870:	f855 300b 	ldr.w	r3, [r5, fp]
 8005874:	b92b      	cbnz	r3, 8005882 <quorem+0x9e>
 8005876:	9b01      	ldr	r3, [sp, #4]
 8005878:	3b04      	subs	r3, #4
 800587a:	429d      	cmp	r5, r3
 800587c:	461a      	mov	r2, r3
 800587e:	d32e      	bcc.n	80058de <quorem+0xfa>
 8005880:	613c      	str	r4, [r7, #16]
 8005882:	4638      	mov	r0, r7
 8005884:	f001 f8c0 	bl	8006a08 <__mcmp>
 8005888:	2800      	cmp	r0, #0
 800588a:	db24      	blt.n	80058d6 <quorem+0xf2>
 800588c:	3601      	adds	r6, #1
 800588e:	4628      	mov	r0, r5
 8005890:	f04f 0c00 	mov.w	ip, #0
 8005894:	f858 2b04 	ldr.w	r2, [r8], #4
 8005898:	f8d0 e000 	ldr.w	lr, [r0]
 800589c:	b293      	uxth	r3, r2
 800589e:	ebac 0303 	sub.w	r3, ip, r3
 80058a2:	0c12      	lsrs	r2, r2, #16
 80058a4:	fa13 f38e 	uxtah	r3, r3, lr
 80058a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058b6:	45c1      	cmp	r9, r8
 80058b8:	f840 3b04 	str.w	r3, [r0], #4
 80058bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058c0:	d2e8      	bcs.n	8005894 <quorem+0xb0>
 80058c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058ca:	b922      	cbnz	r2, 80058d6 <quorem+0xf2>
 80058cc:	3b04      	subs	r3, #4
 80058ce:	429d      	cmp	r5, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	d30a      	bcc.n	80058ea <quorem+0x106>
 80058d4:	613c      	str	r4, [r7, #16]
 80058d6:	4630      	mov	r0, r6
 80058d8:	b003      	add	sp, #12
 80058da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058de:	6812      	ldr	r2, [r2, #0]
 80058e0:	3b04      	subs	r3, #4
 80058e2:	2a00      	cmp	r2, #0
 80058e4:	d1cc      	bne.n	8005880 <quorem+0x9c>
 80058e6:	3c01      	subs	r4, #1
 80058e8:	e7c7      	b.n	800587a <quorem+0x96>
 80058ea:	6812      	ldr	r2, [r2, #0]
 80058ec:	3b04      	subs	r3, #4
 80058ee:	2a00      	cmp	r2, #0
 80058f0:	d1f0      	bne.n	80058d4 <quorem+0xf0>
 80058f2:	3c01      	subs	r4, #1
 80058f4:	e7eb      	b.n	80058ce <quorem+0xea>
 80058f6:	2000      	movs	r0, #0
 80058f8:	e7ee      	b.n	80058d8 <quorem+0xf4>
 80058fa:	0000      	movs	r0, r0
 80058fc:	0000      	movs	r0, r0
	...

08005900 <_dtoa_r>:
 8005900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005904:	ed2d 8b02 	vpush	{d8}
 8005908:	ec57 6b10 	vmov	r6, r7, d0
 800590c:	b095      	sub	sp, #84	; 0x54
 800590e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005910:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005914:	9105      	str	r1, [sp, #20]
 8005916:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800591a:	4604      	mov	r4, r0
 800591c:	9209      	str	r2, [sp, #36]	; 0x24
 800591e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005920:	b975      	cbnz	r5, 8005940 <_dtoa_r+0x40>
 8005922:	2010      	movs	r0, #16
 8005924:	f000 fddc 	bl	80064e0 <malloc>
 8005928:	4602      	mov	r2, r0
 800592a:	6260      	str	r0, [r4, #36]	; 0x24
 800592c:	b920      	cbnz	r0, 8005938 <_dtoa_r+0x38>
 800592e:	4bb2      	ldr	r3, [pc, #712]	; (8005bf8 <_dtoa_r+0x2f8>)
 8005930:	21ea      	movs	r1, #234	; 0xea
 8005932:	48b2      	ldr	r0, [pc, #712]	; (8005bfc <_dtoa_r+0x2fc>)
 8005934:	f001 fb8e 	bl	8007054 <__assert_func>
 8005938:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800593c:	6005      	str	r5, [r0, #0]
 800593e:	60c5      	str	r5, [r0, #12]
 8005940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005942:	6819      	ldr	r1, [r3, #0]
 8005944:	b151      	cbz	r1, 800595c <_dtoa_r+0x5c>
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	604a      	str	r2, [r1, #4]
 800594a:	2301      	movs	r3, #1
 800594c:	4093      	lsls	r3, r2
 800594e:	608b      	str	r3, [r1, #8]
 8005950:	4620      	mov	r0, r4
 8005952:	f000 fe1b 	bl	800658c <_Bfree>
 8005956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	1e3b      	subs	r3, r7, #0
 800595e:	bfb9      	ittee	lt
 8005960:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005964:	9303      	strlt	r3, [sp, #12]
 8005966:	2300      	movge	r3, #0
 8005968:	f8c8 3000 	strge.w	r3, [r8]
 800596c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005970:	4ba3      	ldr	r3, [pc, #652]	; (8005c00 <_dtoa_r+0x300>)
 8005972:	bfbc      	itt	lt
 8005974:	2201      	movlt	r2, #1
 8005976:	f8c8 2000 	strlt.w	r2, [r8]
 800597a:	ea33 0309 	bics.w	r3, r3, r9
 800597e:	d11b      	bne.n	80059b8 <_dtoa_r+0xb8>
 8005980:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005982:	f242 730f 	movw	r3, #9999	; 0x270f
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800598c:	4333      	orrs	r3, r6
 800598e:	f000 857a 	beq.w	8006486 <_dtoa_r+0xb86>
 8005992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005994:	b963      	cbnz	r3, 80059b0 <_dtoa_r+0xb0>
 8005996:	4b9b      	ldr	r3, [pc, #620]	; (8005c04 <_dtoa_r+0x304>)
 8005998:	e024      	b.n	80059e4 <_dtoa_r+0xe4>
 800599a:	4b9b      	ldr	r3, [pc, #620]	; (8005c08 <_dtoa_r+0x308>)
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	3308      	adds	r3, #8
 80059a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	9800      	ldr	r0, [sp, #0]
 80059a6:	b015      	add	sp, #84	; 0x54
 80059a8:	ecbd 8b02 	vpop	{d8}
 80059ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b0:	4b94      	ldr	r3, [pc, #592]	; (8005c04 <_dtoa_r+0x304>)
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	3303      	adds	r3, #3
 80059b6:	e7f3      	b.n	80059a0 <_dtoa_r+0xa0>
 80059b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059bc:	2200      	movs	r2, #0
 80059be:	ec51 0b17 	vmov	r0, r1, d7
 80059c2:	2300      	movs	r3, #0
 80059c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80059c8:	f7fb f886 	bl	8000ad8 <__aeabi_dcmpeq>
 80059cc:	4680      	mov	r8, r0
 80059ce:	b158      	cbz	r0, 80059e8 <_dtoa_r+0xe8>
 80059d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059d2:	2301      	movs	r3, #1
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 8551 	beq.w	8006480 <_dtoa_r+0xb80>
 80059de:	488b      	ldr	r0, [pc, #556]	; (8005c0c <_dtoa_r+0x30c>)
 80059e0:	6018      	str	r0, [r3, #0]
 80059e2:	1e43      	subs	r3, r0, #1
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	e7dd      	b.n	80059a4 <_dtoa_r+0xa4>
 80059e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80059ec:	aa12      	add	r2, sp, #72	; 0x48
 80059ee:	a913      	add	r1, sp, #76	; 0x4c
 80059f0:	4620      	mov	r0, r4
 80059f2:	f001 f8ad 	bl	8006b50 <__d2b>
 80059f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80059fa:	4683      	mov	fp, r0
 80059fc:	2d00      	cmp	r5, #0
 80059fe:	d07c      	beq.n	8005afa <_dtoa_r+0x1fa>
 8005a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a02:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005a06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a0a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005a0e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005a12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005a16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a1a:	4b7d      	ldr	r3, [pc, #500]	; (8005c10 <_dtoa_r+0x310>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	4630      	mov	r0, r6
 8005a20:	4639      	mov	r1, r7
 8005a22:	f7fa fc39 	bl	8000298 <__aeabi_dsub>
 8005a26:	a36e      	add	r3, pc, #440	; (adr r3, 8005be0 <_dtoa_r+0x2e0>)
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	f7fa fdec 	bl	8000608 <__aeabi_dmul>
 8005a30:	a36d      	add	r3, pc, #436	; (adr r3, 8005be8 <_dtoa_r+0x2e8>)
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	f7fa fc31 	bl	800029c <__adddf3>
 8005a3a:	4606      	mov	r6, r0
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	460f      	mov	r7, r1
 8005a40:	f7fa fd78 	bl	8000534 <__aeabi_i2d>
 8005a44:	a36a      	add	r3, pc, #424	; (adr r3, 8005bf0 <_dtoa_r+0x2f0>)
 8005a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4a:	f7fa fddd 	bl	8000608 <__aeabi_dmul>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4630      	mov	r0, r6
 8005a54:	4639      	mov	r1, r7
 8005a56:	f7fa fc21 	bl	800029c <__adddf3>
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	460f      	mov	r7, r1
 8005a5e:	f7fb f883 	bl	8000b68 <__aeabi_d2iz>
 8005a62:	2200      	movs	r2, #0
 8005a64:	4682      	mov	sl, r0
 8005a66:	2300      	movs	r3, #0
 8005a68:	4630      	mov	r0, r6
 8005a6a:	4639      	mov	r1, r7
 8005a6c:	f7fb f83e 	bl	8000aec <__aeabi_dcmplt>
 8005a70:	b148      	cbz	r0, 8005a86 <_dtoa_r+0x186>
 8005a72:	4650      	mov	r0, sl
 8005a74:	f7fa fd5e 	bl	8000534 <__aeabi_i2d>
 8005a78:	4632      	mov	r2, r6
 8005a7a:	463b      	mov	r3, r7
 8005a7c:	f7fb f82c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a80:	b908      	cbnz	r0, 8005a86 <_dtoa_r+0x186>
 8005a82:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005a86:	f1ba 0f16 	cmp.w	sl, #22
 8005a8a:	d854      	bhi.n	8005b36 <_dtoa_r+0x236>
 8005a8c:	4b61      	ldr	r3, [pc, #388]	; (8005c14 <_dtoa_r+0x314>)
 8005a8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a9a:	f7fb f827 	bl	8000aec <__aeabi_dcmplt>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d04b      	beq.n	8005b3a <_dtoa_r+0x23a>
 8005aa2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	930e      	str	r3, [sp, #56]	; 0x38
 8005aaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005aac:	1b5d      	subs	r5, r3, r5
 8005aae:	1e6b      	subs	r3, r5, #1
 8005ab0:	9304      	str	r3, [sp, #16]
 8005ab2:	bf43      	ittte	mi
 8005ab4:	2300      	movmi	r3, #0
 8005ab6:	f1c5 0801 	rsbmi	r8, r5, #1
 8005aba:	9304      	strmi	r3, [sp, #16]
 8005abc:	f04f 0800 	movpl.w	r8, #0
 8005ac0:	f1ba 0f00 	cmp.w	sl, #0
 8005ac4:	db3b      	blt.n	8005b3e <_dtoa_r+0x23e>
 8005ac6:	9b04      	ldr	r3, [sp, #16]
 8005ac8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005acc:	4453      	add	r3, sl
 8005ace:	9304      	str	r3, [sp, #16]
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	9306      	str	r3, [sp, #24]
 8005ad4:	9b05      	ldr	r3, [sp, #20]
 8005ad6:	2b09      	cmp	r3, #9
 8005ad8:	d869      	bhi.n	8005bae <_dtoa_r+0x2ae>
 8005ada:	2b05      	cmp	r3, #5
 8005adc:	bfc4      	itt	gt
 8005ade:	3b04      	subgt	r3, #4
 8005ae0:	9305      	strgt	r3, [sp, #20]
 8005ae2:	9b05      	ldr	r3, [sp, #20]
 8005ae4:	f1a3 0302 	sub.w	r3, r3, #2
 8005ae8:	bfcc      	ite	gt
 8005aea:	2500      	movgt	r5, #0
 8005aec:	2501      	movle	r5, #1
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d869      	bhi.n	8005bc6 <_dtoa_r+0x2c6>
 8005af2:	e8df f003 	tbb	[pc, r3]
 8005af6:	4e2c      	.short	0x4e2c
 8005af8:	5a4c      	.short	0x5a4c
 8005afa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005afe:	441d      	add	r5, r3
 8005b00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	bfc1      	itttt	gt
 8005b08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b0c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005b10:	fa09 f303 	lslgt.w	r3, r9, r3
 8005b14:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005b18:	bfda      	itte	le
 8005b1a:	f1c3 0320 	rsble	r3, r3, #32
 8005b1e:	fa06 f003 	lslle.w	r0, r6, r3
 8005b22:	4318      	orrgt	r0, r3
 8005b24:	f7fa fcf6 	bl	8000514 <__aeabi_ui2d>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	4606      	mov	r6, r0
 8005b2c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005b30:	3d01      	subs	r5, #1
 8005b32:	9310      	str	r3, [sp, #64]	; 0x40
 8005b34:	e771      	b.n	8005a1a <_dtoa_r+0x11a>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e7b6      	b.n	8005aa8 <_dtoa_r+0x1a8>
 8005b3a:	900e      	str	r0, [sp, #56]	; 0x38
 8005b3c:	e7b5      	b.n	8005aaa <_dtoa_r+0x1aa>
 8005b3e:	f1ca 0300 	rsb	r3, sl, #0
 8005b42:	9306      	str	r3, [sp, #24]
 8005b44:	2300      	movs	r3, #0
 8005b46:	eba8 080a 	sub.w	r8, r8, sl
 8005b4a:	930d      	str	r3, [sp, #52]	; 0x34
 8005b4c:	e7c2      	b.n	8005ad4 <_dtoa_r+0x1d4>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	9308      	str	r3, [sp, #32]
 8005b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	dc39      	bgt.n	8005bcc <_dtoa_r+0x2cc>
 8005b58:	f04f 0901 	mov.w	r9, #1
 8005b5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b60:	464b      	mov	r3, r9
 8005b62:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005b66:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005b68:	2200      	movs	r2, #0
 8005b6a:	6042      	str	r2, [r0, #4]
 8005b6c:	2204      	movs	r2, #4
 8005b6e:	f102 0614 	add.w	r6, r2, #20
 8005b72:	429e      	cmp	r6, r3
 8005b74:	6841      	ldr	r1, [r0, #4]
 8005b76:	d92f      	bls.n	8005bd8 <_dtoa_r+0x2d8>
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f000 fcc7 	bl	800650c <_Balloc>
 8005b7e:	9000      	str	r0, [sp, #0]
 8005b80:	2800      	cmp	r0, #0
 8005b82:	d14b      	bne.n	8005c1c <_dtoa_r+0x31c>
 8005b84:	4b24      	ldr	r3, [pc, #144]	; (8005c18 <_dtoa_r+0x318>)
 8005b86:	4602      	mov	r2, r0
 8005b88:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005b8c:	e6d1      	b.n	8005932 <_dtoa_r+0x32>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e7de      	b.n	8005b50 <_dtoa_r+0x250>
 8005b92:	2300      	movs	r3, #0
 8005b94:	9308      	str	r3, [sp, #32]
 8005b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b98:	eb0a 0903 	add.w	r9, sl, r3
 8005b9c:	f109 0301 	add.w	r3, r9, #1
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	9301      	str	r3, [sp, #4]
 8005ba4:	bfb8      	it	lt
 8005ba6:	2301      	movlt	r3, #1
 8005ba8:	e7dd      	b.n	8005b66 <_dtoa_r+0x266>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e7f2      	b.n	8005b94 <_dtoa_r+0x294>
 8005bae:	2501      	movs	r5, #1
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	9305      	str	r3, [sp, #20]
 8005bb4:	9508      	str	r5, [sp, #32]
 8005bb6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005bc0:	2312      	movs	r3, #18
 8005bc2:	9209      	str	r2, [sp, #36]	; 0x24
 8005bc4:	e7cf      	b.n	8005b66 <_dtoa_r+0x266>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	9308      	str	r3, [sp, #32]
 8005bca:	e7f4      	b.n	8005bb6 <_dtoa_r+0x2b6>
 8005bcc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005bd0:	f8cd 9004 	str.w	r9, [sp, #4]
 8005bd4:	464b      	mov	r3, r9
 8005bd6:	e7c6      	b.n	8005b66 <_dtoa_r+0x266>
 8005bd8:	3101      	adds	r1, #1
 8005bda:	6041      	str	r1, [r0, #4]
 8005bdc:	0052      	lsls	r2, r2, #1
 8005bde:	e7c6      	b.n	8005b6e <_dtoa_r+0x26e>
 8005be0:	636f4361 	.word	0x636f4361
 8005be4:	3fd287a7 	.word	0x3fd287a7
 8005be8:	8b60c8b3 	.word	0x8b60c8b3
 8005bec:	3fc68a28 	.word	0x3fc68a28
 8005bf0:	509f79fb 	.word	0x509f79fb
 8005bf4:	3fd34413 	.word	0x3fd34413
 8005bf8:	08008a19 	.word	0x08008a19
 8005bfc:	08008a30 	.word	0x08008a30
 8005c00:	7ff00000 	.word	0x7ff00000
 8005c04:	08008a15 	.word	0x08008a15
 8005c08:	08008a0c 	.word	0x08008a0c
 8005c0c:	080089e9 	.word	0x080089e9
 8005c10:	3ff80000 	.word	0x3ff80000
 8005c14:	08008b28 	.word	0x08008b28
 8005c18:	08008a8f 	.word	0x08008a8f
 8005c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c1e:	9a00      	ldr	r2, [sp, #0]
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	9b01      	ldr	r3, [sp, #4]
 8005c24:	2b0e      	cmp	r3, #14
 8005c26:	f200 80ad 	bhi.w	8005d84 <_dtoa_r+0x484>
 8005c2a:	2d00      	cmp	r5, #0
 8005c2c:	f000 80aa 	beq.w	8005d84 <_dtoa_r+0x484>
 8005c30:	f1ba 0f00 	cmp.w	sl, #0
 8005c34:	dd36      	ble.n	8005ca4 <_dtoa_r+0x3a4>
 8005c36:	4ac3      	ldr	r2, [pc, #780]	; (8005f44 <_dtoa_r+0x644>)
 8005c38:	f00a 030f 	and.w	r3, sl, #15
 8005c3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c40:	ed93 7b00 	vldr	d7, [r3]
 8005c44:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005c48:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005c4c:	eeb0 8a47 	vmov.f32	s16, s14
 8005c50:	eef0 8a67 	vmov.f32	s17, s15
 8005c54:	d016      	beq.n	8005c84 <_dtoa_r+0x384>
 8005c56:	4bbc      	ldr	r3, [pc, #752]	; (8005f48 <_dtoa_r+0x648>)
 8005c58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c60:	f7fa fdfc 	bl	800085c <__aeabi_ddiv>
 8005c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c68:	f007 070f 	and.w	r7, r7, #15
 8005c6c:	2503      	movs	r5, #3
 8005c6e:	4eb6      	ldr	r6, [pc, #728]	; (8005f48 <_dtoa_r+0x648>)
 8005c70:	b957      	cbnz	r7, 8005c88 <_dtoa_r+0x388>
 8005c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c76:	ec53 2b18 	vmov	r2, r3, d8
 8005c7a:	f7fa fdef 	bl	800085c <__aeabi_ddiv>
 8005c7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c82:	e029      	b.n	8005cd8 <_dtoa_r+0x3d8>
 8005c84:	2502      	movs	r5, #2
 8005c86:	e7f2      	b.n	8005c6e <_dtoa_r+0x36e>
 8005c88:	07f9      	lsls	r1, r7, #31
 8005c8a:	d508      	bpl.n	8005c9e <_dtoa_r+0x39e>
 8005c8c:	ec51 0b18 	vmov	r0, r1, d8
 8005c90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c94:	f7fa fcb8 	bl	8000608 <__aeabi_dmul>
 8005c98:	ec41 0b18 	vmov	d8, r0, r1
 8005c9c:	3501      	adds	r5, #1
 8005c9e:	107f      	asrs	r7, r7, #1
 8005ca0:	3608      	adds	r6, #8
 8005ca2:	e7e5      	b.n	8005c70 <_dtoa_r+0x370>
 8005ca4:	f000 80a6 	beq.w	8005df4 <_dtoa_r+0x4f4>
 8005ca8:	f1ca 0600 	rsb	r6, sl, #0
 8005cac:	4ba5      	ldr	r3, [pc, #660]	; (8005f44 <_dtoa_r+0x644>)
 8005cae:	4fa6      	ldr	r7, [pc, #664]	; (8005f48 <_dtoa_r+0x648>)
 8005cb0:	f006 020f 	and.w	r2, r6, #15
 8005cb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cc0:	f7fa fca2 	bl	8000608 <__aeabi_dmul>
 8005cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cc8:	1136      	asrs	r6, r6, #4
 8005cca:	2300      	movs	r3, #0
 8005ccc:	2502      	movs	r5, #2
 8005cce:	2e00      	cmp	r6, #0
 8005cd0:	f040 8085 	bne.w	8005dde <_dtoa_r+0x4de>
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1d2      	bne.n	8005c7e <_dtoa_r+0x37e>
 8005cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 808c 	beq.w	8005df8 <_dtoa_r+0x4f8>
 8005ce0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005ce4:	4b99      	ldr	r3, [pc, #612]	; (8005f4c <_dtoa_r+0x64c>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	4630      	mov	r0, r6
 8005cea:	4639      	mov	r1, r7
 8005cec:	f7fa fefe 	bl	8000aec <__aeabi_dcmplt>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	f000 8081 	beq.w	8005df8 <_dtoa_r+0x4f8>
 8005cf6:	9b01      	ldr	r3, [sp, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d07d      	beq.n	8005df8 <_dtoa_r+0x4f8>
 8005cfc:	f1b9 0f00 	cmp.w	r9, #0
 8005d00:	dd3c      	ble.n	8005d7c <_dtoa_r+0x47c>
 8005d02:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005d06:	9307      	str	r3, [sp, #28]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	4b91      	ldr	r3, [pc, #580]	; (8005f50 <_dtoa_r+0x650>)
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	4639      	mov	r1, r7
 8005d10:	f7fa fc7a 	bl	8000608 <__aeabi_dmul>
 8005d14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d18:	3501      	adds	r5, #1
 8005d1a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005d1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d22:	4628      	mov	r0, r5
 8005d24:	f7fa fc06 	bl	8000534 <__aeabi_i2d>
 8005d28:	4632      	mov	r2, r6
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	f7fa fc6c 	bl	8000608 <__aeabi_dmul>
 8005d30:	4b88      	ldr	r3, [pc, #544]	; (8005f54 <_dtoa_r+0x654>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	f7fa fab2 	bl	800029c <__adddf3>
 8005d38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d40:	9303      	str	r3, [sp, #12]
 8005d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d15c      	bne.n	8005e02 <_dtoa_r+0x502>
 8005d48:	4b83      	ldr	r3, [pc, #524]	; (8005f58 <_dtoa_r+0x658>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	4639      	mov	r1, r7
 8005d50:	f7fa faa2 	bl	8000298 <__aeabi_dsub>
 8005d54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d58:	4606      	mov	r6, r0
 8005d5a:	460f      	mov	r7, r1
 8005d5c:	f7fa fee4 	bl	8000b28 <__aeabi_dcmpgt>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	f040 8296 	bne.w	8006292 <_dtoa_r+0x992>
 8005d66:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d70:	4639      	mov	r1, r7
 8005d72:	f7fa febb 	bl	8000aec <__aeabi_dcmplt>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	f040 8288 	bne.w	800628c <_dtoa_r+0x98c>
 8005d7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f2c0 8158 	blt.w	800603c <_dtoa_r+0x73c>
 8005d8c:	f1ba 0f0e 	cmp.w	sl, #14
 8005d90:	f300 8154 	bgt.w	800603c <_dtoa_r+0x73c>
 8005d94:	4b6b      	ldr	r3, [pc, #428]	; (8005f44 <_dtoa_r+0x644>)
 8005d96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005d9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f280 80e3 	bge.w	8005f6c <_dtoa_r+0x66c>
 8005da6:	9b01      	ldr	r3, [sp, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f300 80df 	bgt.w	8005f6c <_dtoa_r+0x66c>
 8005dae:	f040 826d 	bne.w	800628c <_dtoa_r+0x98c>
 8005db2:	4b69      	ldr	r3, [pc, #420]	; (8005f58 <_dtoa_r+0x658>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	4640      	mov	r0, r8
 8005db8:	4649      	mov	r1, r9
 8005dba:	f7fa fc25 	bl	8000608 <__aeabi_dmul>
 8005dbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dc2:	f7fa fea7 	bl	8000b14 <__aeabi_dcmpge>
 8005dc6:	9e01      	ldr	r6, [sp, #4]
 8005dc8:	4637      	mov	r7, r6
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	f040 8243 	bne.w	8006256 <_dtoa_r+0x956>
 8005dd0:	9d00      	ldr	r5, [sp, #0]
 8005dd2:	2331      	movs	r3, #49	; 0x31
 8005dd4:	f805 3b01 	strb.w	r3, [r5], #1
 8005dd8:	f10a 0a01 	add.w	sl, sl, #1
 8005ddc:	e23f      	b.n	800625e <_dtoa_r+0x95e>
 8005dde:	07f2      	lsls	r2, r6, #31
 8005de0:	d505      	bpl.n	8005dee <_dtoa_r+0x4ee>
 8005de2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005de6:	f7fa fc0f 	bl	8000608 <__aeabi_dmul>
 8005dea:	3501      	adds	r5, #1
 8005dec:	2301      	movs	r3, #1
 8005dee:	1076      	asrs	r6, r6, #1
 8005df0:	3708      	adds	r7, #8
 8005df2:	e76c      	b.n	8005cce <_dtoa_r+0x3ce>
 8005df4:	2502      	movs	r5, #2
 8005df6:	e76f      	b.n	8005cd8 <_dtoa_r+0x3d8>
 8005df8:	9b01      	ldr	r3, [sp, #4]
 8005dfa:	f8cd a01c 	str.w	sl, [sp, #28]
 8005dfe:	930c      	str	r3, [sp, #48]	; 0x30
 8005e00:	e78d      	b.n	8005d1e <_dtoa_r+0x41e>
 8005e02:	9900      	ldr	r1, [sp, #0]
 8005e04:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005e06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e08:	4b4e      	ldr	r3, [pc, #312]	; (8005f44 <_dtoa_r+0x644>)
 8005e0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e0e:	4401      	add	r1, r0
 8005e10:	9102      	str	r1, [sp, #8]
 8005e12:	9908      	ldr	r1, [sp, #32]
 8005e14:	eeb0 8a47 	vmov.f32	s16, s14
 8005e18:	eef0 8a67 	vmov.f32	s17, s15
 8005e1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e24:	2900      	cmp	r1, #0
 8005e26:	d045      	beq.n	8005eb4 <_dtoa_r+0x5b4>
 8005e28:	494c      	ldr	r1, [pc, #304]	; (8005f5c <_dtoa_r+0x65c>)
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	f7fa fd16 	bl	800085c <__aeabi_ddiv>
 8005e30:	ec53 2b18 	vmov	r2, r3, d8
 8005e34:	f7fa fa30 	bl	8000298 <__aeabi_dsub>
 8005e38:	9d00      	ldr	r5, [sp, #0]
 8005e3a:	ec41 0b18 	vmov	d8, r0, r1
 8005e3e:	4639      	mov	r1, r7
 8005e40:	4630      	mov	r0, r6
 8005e42:	f7fa fe91 	bl	8000b68 <__aeabi_d2iz>
 8005e46:	900c      	str	r0, [sp, #48]	; 0x30
 8005e48:	f7fa fb74 	bl	8000534 <__aeabi_i2d>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4630      	mov	r0, r6
 8005e52:	4639      	mov	r1, r7
 8005e54:	f7fa fa20 	bl	8000298 <__aeabi_dsub>
 8005e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e5a:	3330      	adds	r3, #48	; 0x30
 8005e5c:	f805 3b01 	strb.w	r3, [r5], #1
 8005e60:	ec53 2b18 	vmov	r2, r3, d8
 8005e64:	4606      	mov	r6, r0
 8005e66:	460f      	mov	r7, r1
 8005e68:	f7fa fe40 	bl	8000aec <__aeabi_dcmplt>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d165      	bne.n	8005f3c <_dtoa_r+0x63c>
 8005e70:	4632      	mov	r2, r6
 8005e72:	463b      	mov	r3, r7
 8005e74:	4935      	ldr	r1, [pc, #212]	; (8005f4c <_dtoa_r+0x64c>)
 8005e76:	2000      	movs	r0, #0
 8005e78:	f7fa fa0e 	bl	8000298 <__aeabi_dsub>
 8005e7c:	ec53 2b18 	vmov	r2, r3, d8
 8005e80:	f7fa fe34 	bl	8000aec <__aeabi_dcmplt>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	f040 80b9 	bne.w	8005ffc <_dtoa_r+0x6fc>
 8005e8a:	9b02      	ldr	r3, [sp, #8]
 8005e8c:	429d      	cmp	r5, r3
 8005e8e:	f43f af75 	beq.w	8005d7c <_dtoa_r+0x47c>
 8005e92:	4b2f      	ldr	r3, [pc, #188]	; (8005f50 <_dtoa_r+0x650>)
 8005e94:	ec51 0b18 	vmov	r0, r1, d8
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f7fa fbb5 	bl	8000608 <__aeabi_dmul>
 8005e9e:	4b2c      	ldr	r3, [pc, #176]	; (8005f50 <_dtoa_r+0x650>)
 8005ea0:	ec41 0b18 	vmov	d8, r0, r1
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	4639      	mov	r1, r7
 8005eaa:	f7fa fbad 	bl	8000608 <__aeabi_dmul>
 8005eae:	4606      	mov	r6, r0
 8005eb0:	460f      	mov	r7, r1
 8005eb2:	e7c4      	b.n	8005e3e <_dtoa_r+0x53e>
 8005eb4:	ec51 0b17 	vmov	r0, r1, d7
 8005eb8:	f7fa fba6 	bl	8000608 <__aeabi_dmul>
 8005ebc:	9b02      	ldr	r3, [sp, #8]
 8005ebe:	9d00      	ldr	r5, [sp, #0]
 8005ec0:	930c      	str	r3, [sp, #48]	; 0x30
 8005ec2:	ec41 0b18 	vmov	d8, r0, r1
 8005ec6:	4639      	mov	r1, r7
 8005ec8:	4630      	mov	r0, r6
 8005eca:	f7fa fe4d 	bl	8000b68 <__aeabi_d2iz>
 8005ece:	9011      	str	r0, [sp, #68]	; 0x44
 8005ed0:	f7fa fb30 	bl	8000534 <__aeabi_i2d>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4630      	mov	r0, r6
 8005eda:	4639      	mov	r1, r7
 8005edc:	f7fa f9dc 	bl	8000298 <__aeabi_dsub>
 8005ee0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ee2:	3330      	adds	r3, #48	; 0x30
 8005ee4:	f805 3b01 	strb.w	r3, [r5], #1
 8005ee8:	9b02      	ldr	r3, [sp, #8]
 8005eea:	429d      	cmp	r5, r3
 8005eec:	4606      	mov	r6, r0
 8005eee:	460f      	mov	r7, r1
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	d134      	bne.n	8005f60 <_dtoa_r+0x660>
 8005ef6:	4b19      	ldr	r3, [pc, #100]	; (8005f5c <_dtoa_r+0x65c>)
 8005ef8:	ec51 0b18 	vmov	r0, r1, d8
 8005efc:	f7fa f9ce 	bl	800029c <__adddf3>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4630      	mov	r0, r6
 8005f06:	4639      	mov	r1, r7
 8005f08:	f7fa fe0e 	bl	8000b28 <__aeabi_dcmpgt>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	d175      	bne.n	8005ffc <_dtoa_r+0x6fc>
 8005f10:	ec53 2b18 	vmov	r2, r3, d8
 8005f14:	4911      	ldr	r1, [pc, #68]	; (8005f5c <_dtoa_r+0x65c>)
 8005f16:	2000      	movs	r0, #0
 8005f18:	f7fa f9be 	bl	8000298 <__aeabi_dsub>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4630      	mov	r0, r6
 8005f22:	4639      	mov	r1, r7
 8005f24:	f7fa fde2 	bl	8000aec <__aeabi_dcmplt>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	f43f af27 	beq.w	8005d7c <_dtoa_r+0x47c>
 8005f2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f30:	1e6b      	subs	r3, r5, #1
 8005f32:	930c      	str	r3, [sp, #48]	; 0x30
 8005f34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f38:	2b30      	cmp	r3, #48	; 0x30
 8005f3a:	d0f8      	beq.n	8005f2e <_dtoa_r+0x62e>
 8005f3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005f40:	e04a      	b.n	8005fd8 <_dtoa_r+0x6d8>
 8005f42:	bf00      	nop
 8005f44:	08008b28 	.word	0x08008b28
 8005f48:	08008b00 	.word	0x08008b00
 8005f4c:	3ff00000 	.word	0x3ff00000
 8005f50:	40240000 	.word	0x40240000
 8005f54:	401c0000 	.word	0x401c0000
 8005f58:	40140000 	.word	0x40140000
 8005f5c:	3fe00000 	.word	0x3fe00000
 8005f60:	4baf      	ldr	r3, [pc, #700]	; (8006220 <_dtoa_r+0x920>)
 8005f62:	f7fa fb51 	bl	8000608 <__aeabi_dmul>
 8005f66:	4606      	mov	r6, r0
 8005f68:	460f      	mov	r7, r1
 8005f6a:	e7ac      	b.n	8005ec6 <_dtoa_r+0x5c6>
 8005f6c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005f70:	9d00      	ldr	r5, [sp, #0]
 8005f72:	4642      	mov	r2, r8
 8005f74:	464b      	mov	r3, r9
 8005f76:	4630      	mov	r0, r6
 8005f78:	4639      	mov	r1, r7
 8005f7a:	f7fa fc6f 	bl	800085c <__aeabi_ddiv>
 8005f7e:	f7fa fdf3 	bl	8000b68 <__aeabi_d2iz>
 8005f82:	9002      	str	r0, [sp, #8]
 8005f84:	f7fa fad6 	bl	8000534 <__aeabi_i2d>
 8005f88:	4642      	mov	r2, r8
 8005f8a:	464b      	mov	r3, r9
 8005f8c:	f7fa fb3c 	bl	8000608 <__aeabi_dmul>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4630      	mov	r0, r6
 8005f96:	4639      	mov	r1, r7
 8005f98:	f7fa f97e 	bl	8000298 <__aeabi_dsub>
 8005f9c:	9e02      	ldr	r6, [sp, #8]
 8005f9e:	9f01      	ldr	r7, [sp, #4]
 8005fa0:	3630      	adds	r6, #48	; 0x30
 8005fa2:	f805 6b01 	strb.w	r6, [r5], #1
 8005fa6:	9e00      	ldr	r6, [sp, #0]
 8005fa8:	1bae      	subs	r6, r5, r6
 8005faa:	42b7      	cmp	r7, r6
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	d137      	bne.n	8006022 <_dtoa_r+0x722>
 8005fb2:	f7fa f973 	bl	800029c <__adddf3>
 8005fb6:	4642      	mov	r2, r8
 8005fb8:	464b      	mov	r3, r9
 8005fba:	4606      	mov	r6, r0
 8005fbc:	460f      	mov	r7, r1
 8005fbe:	f7fa fdb3 	bl	8000b28 <__aeabi_dcmpgt>
 8005fc2:	b9c8      	cbnz	r0, 8005ff8 <_dtoa_r+0x6f8>
 8005fc4:	4642      	mov	r2, r8
 8005fc6:	464b      	mov	r3, r9
 8005fc8:	4630      	mov	r0, r6
 8005fca:	4639      	mov	r1, r7
 8005fcc:	f7fa fd84 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fd0:	b110      	cbz	r0, 8005fd8 <_dtoa_r+0x6d8>
 8005fd2:	9b02      	ldr	r3, [sp, #8]
 8005fd4:	07d9      	lsls	r1, r3, #31
 8005fd6:	d40f      	bmi.n	8005ff8 <_dtoa_r+0x6f8>
 8005fd8:	4620      	mov	r0, r4
 8005fda:	4659      	mov	r1, fp
 8005fdc:	f000 fad6 	bl	800658c <_Bfree>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	702b      	strb	r3, [r5, #0]
 8005fe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fe6:	f10a 0001 	add.w	r0, sl, #1
 8005fea:	6018      	str	r0, [r3, #0]
 8005fec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f43f acd8 	beq.w	80059a4 <_dtoa_r+0xa4>
 8005ff4:	601d      	str	r5, [r3, #0]
 8005ff6:	e4d5      	b.n	80059a4 <_dtoa_r+0xa4>
 8005ff8:	f8cd a01c 	str.w	sl, [sp, #28]
 8005ffc:	462b      	mov	r3, r5
 8005ffe:	461d      	mov	r5, r3
 8006000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006004:	2a39      	cmp	r2, #57	; 0x39
 8006006:	d108      	bne.n	800601a <_dtoa_r+0x71a>
 8006008:	9a00      	ldr	r2, [sp, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d1f7      	bne.n	8005ffe <_dtoa_r+0x6fe>
 800600e:	9a07      	ldr	r2, [sp, #28]
 8006010:	9900      	ldr	r1, [sp, #0]
 8006012:	3201      	adds	r2, #1
 8006014:	9207      	str	r2, [sp, #28]
 8006016:	2230      	movs	r2, #48	; 0x30
 8006018:	700a      	strb	r2, [r1, #0]
 800601a:	781a      	ldrb	r2, [r3, #0]
 800601c:	3201      	adds	r2, #1
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	e78c      	b.n	8005f3c <_dtoa_r+0x63c>
 8006022:	4b7f      	ldr	r3, [pc, #508]	; (8006220 <_dtoa_r+0x920>)
 8006024:	2200      	movs	r2, #0
 8006026:	f7fa faef 	bl	8000608 <__aeabi_dmul>
 800602a:	2200      	movs	r2, #0
 800602c:	2300      	movs	r3, #0
 800602e:	4606      	mov	r6, r0
 8006030:	460f      	mov	r7, r1
 8006032:	f7fa fd51 	bl	8000ad8 <__aeabi_dcmpeq>
 8006036:	2800      	cmp	r0, #0
 8006038:	d09b      	beq.n	8005f72 <_dtoa_r+0x672>
 800603a:	e7cd      	b.n	8005fd8 <_dtoa_r+0x6d8>
 800603c:	9a08      	ldr	r2, [sp, #32]
 800603e:	2a00      	cmp	r2, #0
 8006040:	f000 80c4 	beq.w	80061cc <_dtoa_r+0x8cc>
 8006044:	9a05      	ldr	r2, [sp, #20]
 8006046:	2a01      	cmp	r2, #1
 8006048:	f300 80a8 	bgt.w	800619c <_dtoa_r+0x89c>
 800604c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800604e:	2a00      	cmp	r2, #0
 8006050:	f000 80a0 	beq.w	8006194 <_dtoa_r+0x894>
 8006054:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006058:	9e06      	ldr	r6, [sp, #24]
 800605a:	4645      	mov	r5, r8
 800605c:	9a04      	ldr	r2, [sp, #16]
 800605e:	2101      	movs	r1, #1
 8006060:	441a      	add	r2, r3
 8006062:	4620      	mov	r0, r4
 8006064:	4498      	add	r8, r3
 8006066:	9204      	str	r2, [sp, #16]
 8006068:	f000 fb4c 	bl	8006704 <__i2b>
 800606c:	4607      	mov	r7, r0
 800606e:	2d00      	cmp	r5, #0
 8006070:	dd0b      	ble.n	800608a <_dtoa_r+0x78a>
 8006072:	9b04      	ldr	r3, [sp, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	dd08      	ble.n	800608a <_dtoa_r+0x78a>
 8006078:	42ab      	cmp	r3, r5
 800607a:	9a04      	ldr	r2, [sp, #16]
 800607c:	bfa8      	it	ge
 800607e:	462b      	movge	r3, r5
 8006080:	eba8 0803 	sub.w	r8, r8, r3
 8006084:	1aed      	subs	r5, r5, r3
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	9304      	str	r3, [sp, #16]
 800608a:	9b06      	ldr	r3, [sp, #24]
 800608c:	b1fb      	cbz	r3, 80060ce <_dtoa_r+0x7ce>
 800608e:	9b08      	ldr	r3, [sp, #32]
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 809f 	beq.w	80061d4 <_dtoa_r+0x8d4>
 8006096:	2e00      	cmp	r6, #0
 8006098:	dd11      	ble.n	80060be <_dtoa_r+0x7be>
 800609a:	4639      	mov	r1, r7
 800609c:	4632      	mov	r2, r6
 800609e:	4620      	mov	r0, r4
 80060a0:	f000 fbec 	bl	800687c <__pow5mult>
 80060a4:	465a      	mov	r2, fp
 80060a6:	4601      	mov	r1, r0
 80060a8:	4607      	mov	r7, r0
 80060aa:	4620      	mov	r0, r4
 80060ac:	f000 fb40 	bl	8006730 <__multiply>
 80060b0:	4659      	mov	r1, fp
 80060b2:	9007      	str	r0, [sp, #28]
 80060b4:	4620      	mov	r0, r4
 80060b6:	f000 fa69 	bl	800658c <_Bfree>
 80060ba:	9b07      	ldr	r3, [sp, #28]
 80060bc:	469b      	mov	fp, r3
 80060be:	9b06      	ldr	r3, [sp, #24]
 80060c0:	1b9a      	subs	r2, r3, r6
 80060c2:	d004      	beq.n	80060ce <_dtoa_r+0x7ce>
 80060c4:	4659      	mov	r1, fp
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 fbd8 	bl	800687c <__pow5mult>
 80060cc:	4683      	mov	fp, r0
 80060ce:	2101      	movs	r1, #1
 80060d0:	4620      	mov	r0, r4
 80060d2:	f000 fb17 	bl	8006704 <__i2b>
 80060d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060d8:	2b00      	cmp	r3, #0
 80060da:	4606      	mov	r6, r0
 80060dc:	dd7c      	ble.n	80061d8 <_dtoa_r+0x8d8>
 80060de:	461a      	mov	r2, r3
 80060e0:	4601      	mov	r1, r0
 80060e2:	4620      	mov	r0, r4
 80060e4:	f000 fbca 	bl	800687c <__pow5mult>
 80060e8:	9b05      	ldr	r3, [sp, #20]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	4606      	mov	r6, r0
 80060ee:	dd76      	ble.n	80061de <_dtoa_r+0x8de>
 80060f0:	2300      	movs	r3, #0
 80060f2:	9306      	str	r3, [sp, #24]
 80060f4:	6933      	ldr	r3, [r6, #16]
 80060f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80060fa:	6918      	ldr	r0, [r3, #16]
 80060fc:	f000 fab2 	bl	8006664 <__hi0bits>
 8006100:	f1c0 0020 	rsb	r0, r0, #32
 8006104:	9b04      	ldr	r3, [sp, #16]
 8006106:	4418      	add	r0, r3
 8006108:	f010 001f 	ands.w	r0, r0, #31
 800610c:	f000 8086 	beq.w	800621c <_dtoa_r+0x91c>
 8006110:	f1c0 0320 	rsb	r3, r0, #32
 8006114:	2b04      	cmp	r3, #4
 8006116:	dd7f      	ble.n	8006218 <_dtoa_r+0x918>
 8006118:	f1c0 001c 	rsb	r0, r0, #28
 800611c:	9b04      	ldr	r3, [sp, #16]
 800611e:	4403      	add	r3, r0
 8006120:	4480      	add	r8, r0
 8006122:	4405      	add	r5, r0
 8006124:	9304      	str	r3, [sp, #16]
 8006126:	f1b8 0f00 	cmp.w	r8, #0
 800612a:	dd05      	ble.n	8006138 <_dtoa_r+0x838>
 800612c:	4659      	mov	r1, fp
 800612e:	4642      	mov	r2, r8
 8006130:	4620      	mov	r0, r4
 8006132:	f000 fbfd 	bl	8006930 <__lshift>
 8006136:	4683      	mov	fp, r0
 8006138:	9b04      	ldr	r3, [sp, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	dd05      	ble.n	800614a <_dtoa_r+0x84a>
 800613e:	4631      	mov	r1, r6
 8006140:	461a      	mov	r2, r3
 8006142:	4620      	mov	r0, r4
 8006144:	f000 fbf4 	bl	8006930 <__lshift>
 8006148:	4606      	mov	r6, r0
 800614a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800614c:	2b00      	cmp	r3, #0
 800614e:	d069      	beq.n	8006224 <_dtoa_r+0x924>
 8006150:	4631      	mov	r1, r6
 8006152:	4658      	mov	r0, fp
 8006154:	f000 fc58 	bl	8006a08 <__mcmp>
 8006158:	2800      	cmp	r0, #0
 800615a:	da63      	bge.n	8006224 <_dtoa_r+0x924>
 800615c:	2300      	movs	r3, #0
 800615e:	4659      	mov	r1, fp
 8006160:	220a      	movs	r2, #10
 8006162:	4620      	mov	r0, r4
 8006164:	f000 fa34 	bl	80065d0 <__multadd>
 8006168:	9b08      	ldr	r3, [sp, #32]
 800616a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800616e:	4683      	mov	fp, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 818f 	beq.w	8006494 <_dtoa_r+0xb94>
 8006176:	4639      	mov	r1, r7
 8006178:	2300      	movs	r3, #0
 800617a:	220a      	movs	r2, #10
 800617c:	4620      	mov	r0, r4
 800617e:	f000 fa27 	bl	80065d0 <__multadd>
 8006182:	f1b9 0f00 	cmp.w	r9, #0
 8006186:	4607      	mov	r7, r0
 8006188:	f300 808e 	bgt.w	80062a8 <_dtoa_r+0x9a8>
 800618c:	9b05      	ldr	r3, [sp, #20]
 800618e:	2b02      	cmp	r3, #2
 8006190:	dc50      	bgt.n	8006234 <_dtoa_r+0x934>
 8006192:	e089      	b.n	80062a8 <_dtoa_r+0x9a8>
 8006194:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006196:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800619a:	e75d      	b.n	8006058 <_dtoa_r+0x758>
 800619c:	9b01      	ldr	r3, [sp, #4]
 800619e:	1e5e      	subs	r6, r3, #1
 80061a0:	9b06      	ldr	r3, [sp, #24]
 80061a2:	42b3      	cmp	r3, r6
 80061a4:	bfbf      	itttt	lt
 80061a6:	9b06      	ldrlt	r3, [sp, #24]
 80061a8:	9606      	strlt	r6, [sp, #24]
 80061aa:	1af2      	sublt	r2, r6, r3
 80061ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80061ae:	bfb6      	itet	lt
 80061b0:	189b      	addlt	r3, r3, r2
 80061b2:	1b9e      	subge	r6, r3, r6
 80061b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80061b6:	9b01      	ldr	r3, [sp, #4]
 80061b8:	bfb8      	it	lt
 80061ba:	2600      	movlt	r6, #0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	bfb5      	itete	lt
 80061c0:	eba8 0503 	sublt.w	r5, r8, r3
 80061c4:	9b01      	ldrge	r3, [sp, #4]
 80061c6:	2300      	movlt	r3, #0
 80061c8:	4645      	movge	r5, r8
 80061ca:	e747      	b.n	800605c <_dtoa_r+0x75c>
 80061cc:	9e06      	ldr	r6, [sp, #24]
 80061ce:	9f08      	ldr	r7, [sp, #32]
 80061d0:	4645      	mov	r5, r8
 80061d2:	e74c      	b.n	800606e <_dtoa_r+0x76e>
 80061d4:	9a06      	ldr	r2, [sp, #24]
 80061d6:	e775      	b.n	80060c4 <_dtoa_r+0x7c4>
 80061d8:	9b05      	ldr	r3, [sp, #20]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	dc18      	bgt.n	8006210 <_dtoa_r+0x910>
 80061de:	9b02      	ldr	r3, [sp, #8]
 80061e0:	b9b3      	cbnz	r3, 8006210 <_dtoa_r+0x910>
 80061e2:	9b03      	ldr	r3, [sp, #12]
 80061e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061e8:	b9a3      	cbnz	r3, 8006214 <_dtoa_r+0x914>
 80061ea:	9b03      	ldr	r3, [sp, #12]
 80061ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061f0:	0d1b      	lsrs	r3, r3, #20
 80061f2:	051b      	lsls	r3, r3, #20
 80061f4:	b12b      	cbz	r3, 8006202 <_dtoa_r+0x902>
 80061f6:	9b04      	ldr	r3, [sp, #16]
 80061f8:	3301      	adds	r3, #1
 80061fa:	9304      	str	r3, [sp, #16]
 80061fc:	f108 0801 	add.w	r8, r8, #1
 8006200:	2301      	movs	r3, #1
 8006202:	9306      	str	r3, [sp, #24]
 8006204:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006206:	2b00      	cmp	r3, #0
 8006208:	f47f af74 	bne.w	80060f4 <_dtoa_r+0x7f4>
 800620c:	2001      	movs	r0, #1
 800620e:	e779      	b.n	8006104 <_dtoa_r+0x804>
 8006210:	2300      	movs	r3, #0
 8006212:	e7f6      	b.n	8006202 <_dtoa_r+0x902>
 8006214:	9b02      	ldr	r3, [sp, #8]
 8006216:	e7f4      	b.n	8006202 <_dtoa_r+0x902>
 8006218:	d085      	beq.n	8006126 <_dtoa_r+0x826>
 800621a:	4618      	mov	r0, r3
 800621c:	301c      	adds	r0, #28
 800621e:	e77d      	b.n	800611c <_dtoa_r+0x81c>
 8006220:	40240000 	.word	0x40240000
 8006224:	9b01      	ldr	r3, [sp, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	dc38      	bgt.n	800629c <_dtoa_r+0x99c>
 800622a:	9b05      	ldr	r3, [sp, #20]
 800622c:	2b02      	cmp	r3, #2
 800622e:	dd35      	ble.n	800629c <_dtoa_r+0x99c>
 8006230:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006234:	f1b9 0f00 	cmp.w	r9, #0
 8006238:	d10d      	bne.n	8006256 <_dtoa_r+0x956>
 800623a:	4631      	mov	r1, r6
 800623c:	464b      	mov	r3, r9
 800623e:	2205      	movs	r2, #5
 8006240:	4620      	mov	r0, r4
 8006242:	f000 f9c5 	bl	80065d0 <__multadd>
 8006246:	4601      	mov	r1, r0
 8006248:	4606      	mov	r6, r0
 800624a:	4658      	mov	r0, fp
 800624c:	f000 fbdc 	bl	8006a08 <__mcmp>
 8006250:	2800      	cmp	r0, #0
 8006252:	f73f adbd 	bgt.w	8005dd0 <_dtoa_r+0x4d0>
 8006256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006258:	9d00      	ldr	r5, [sp, #0]
 800625a:	ea6f 0a03 	mvn.w	sl, r3
 800625e:	f04f 0800 	mov.w	r8, #0
 8006262:	4631      	mov	r1, r6
 8006264:	4620      	mov	r0, r4
 8006266:	f000 f991 	bl	800658c <_Bfree>
 800626a:	2f00      	cmp	r7, #0
 800626c:	f43f aeb4 	beq.w	8005fd8 <_dtoa_r+0x6d8>
 8006270:	f1b8 0f00 	cmp.w	r8, #0
 8006274:	d005      	beq.n	8006282 <_dtoa_r+0x982>
 8006276:	45b8      	cmp	r8, r7
 8006278:	d003      	beq.n	8006282 <_dtoa_r+0x982>
 800627a:	4641      	mov	r1, r8
 800627c:	4620      	mov	r0, r4
 800627e:	f000 f985 	bl	800658c <_Bfree>
 8006282:	4639      	mov	r1, r7
 8006284:	4620      	mov	r0, r4
 8006286:	f000 f981 	bl	800658c <_Bfree>
 800628a:	e6a5      	b.n	8005fd8 <_dtoa_r+0x6d8>
 800628c:	2600      	movs	r6, #0
 800628e:	4637      	mov	r7, r6
 8006290:	e7e1      	b.n	8006256 <_dtoa_r+0x956>
 8006292:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006294:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006298:	4637      	mov	r7, r6
 800629a:	e599      	b.n	8005dd0 <_dtoa_r+0x4d0>
 800629c:	9b08      	ldr	r3, [sp, #32]
 800629e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 80fd 	beq.w	80064a2 <_dtoa_r+0xba2>
 80062a8:	2d00      	cmp	r5, #0
 80062aa:	dd05      	ble.n	80062b8 <_dtoa_r+0x9b8>
 80062ac:	4639      	mov	r1, r7
 80062ae:	462a      	mov	r2, r5
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 fb3d 	bl	8006930 <__lshift>
 80062b6:	4607      	mov	r7, r0
 80062b8:	9b06      	ldr	r3, [sp, #24]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d05c      	beq.n	8006378 <_dtoa_r+0xa78>
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	4620      	mov	r0, r4
 80062c2:	f000 f923 	bl	800650c <_Balloc>
 80062c6:	4605      	mov	r5, r0
 80062c8:	b928      	cbnz	r0, 80062d6 <_dtoa_r+0x9d6>
 80062ca:	4b80      	ldr	r3, [pc, #512]	; (80064cc <_dtoa_r+0xbcc>)
 80062cc:	4602      	mov	r2, r0
 80062ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80062d2:	f7ff bb2e 	b.w	8005932 <_dtoa_r+0x32>
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	3202      	adds	r2, #2
 80062da:	0092      	lsls	r2, r2, #2
 80062dc:	f107 010c 	add.w	r1, r7, #12
 80062e0:	300c      	adds	r0, #12
 80062e2:	f000 f905 	bl	80064f0 <memcpy>
 80062e6:	2201      	movs	r2, #1
 80062e8:	4629      	mov	r1, r5
 80062ea:	4620      	mov	r0, r4
 80062ec:	f000 fb20 	bl	8006930 <__lshift>
 80062f0:	9b00      	ldr	r3, [sp, #0]
 80062f2:	3301      	adds	r3, #1
 80062f4:	9301      	str	r3, [sp, #4]
 80062f6:	9b00      	ldr	r3, [sp, #0]
 80062f8:	444b      	add	r3, r9
 80062fa:	9307      	str	r3, [sp, #28]
 80062fc:	9b02      	ldr	r3, [sp, #8]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	46b8      	mov	r8, r7
 8006304:	9306      	str	r3, [sp, #24]
 8006306:	4607      	mov	r7, r0
 8006308:	9b01      	ldr	r3, [sp, #4]
 800630a:	4631      	mov	r1, r6
 800630c:	3b01      	subs	r3, #1
 800630e:	4658      	mov	r0, fp
 8006310:	9302      	str	r3, [sp, #8]
 8006312:	f7ff fa67 	bl	80057e4 <quorem>
 8006316:	4603      	mov	r3, r0
 8006318:	3330      	adds	r3, #48	; 0x30
 800631a:	9004      	str	r0, [sp, #16]
 800631c:	4641      	mov	r1, r8
 800631e:	4658      	mov	r0, fp
 8006320:	9308      	str	r3, [sp, #32]
 8006322:	f000 fb71 	bl	8006a08 <__mcmp>
 8006326:	463a      	mov	r2, r7
 8006328:	4681      	mov	r9, r0
 800632a:	4631      	mov	r1, r6
 800632c:	4620      	mov	r0, r4
 800632e:	f000 fb87 	bl	8006a40 <__mdiff>
 8006332:	68c2      	ldr	r2, [r0, #12]
 8006334:	9b08      	ldr	r3, [sp, #32]
 8006336:	4605      	mov	r5, r0
 8006338:	bb02      	cbnz	r2, 800637c <_dtoa_r+0xa7c>
 800633a:	4601      	mov	r1, r0
 800633c:	4658      	mov	r0, fp
 800633e:	f000 fb63 	bl	8006a08 <__mcmp>
 8006342:	9b08      	ldr	r3, [sp, #32]
 8006344:	4602      	mov	r2, r0
 8006346:	4629      	mov	r1, r5
 8006348:	4620      	mov	r0, r4
 800634a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800634e:	f000 f91d 	bl	800658c <_Bfree>
 8006352:	9b05      	ldr	r3, [sp, #20]
 8006354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006356:	9d01      	ldr	r5, [sp, #4]
 8006358:	ea43 0102 	orr.w	r1, r3, r2
 800635c:	9b06      	ldr	r3, [sp, #24]
 800635e:	430b      	orrs	r3, r1
 8006360:	9b08      	ldr	r3, [sp, #32]
 8006362:	d10d      	bne.n	8006380 <_dtoa_r+0xa80>
 8006364:	2b39      	cmp	r3, #57	; 0x39
 8006366:	d029      	beq.n	80063bc <_dtoa_r+0xabc>
 8006368:	f1b9 0f00 	cmp.w	r9, #0
 800636c:	dd01      	ble.n	8006372 <_dtoa_r+0xa72>
 800636e:	9b04      	ldr	r3, [sp, #16]
 8006370:	3331      	adds	r3, #49	; 0x31
 8006372:	9a02      	ldr	r2, [sp, #8]
 8006374:	7013      	strb	r3, [r2, #0]
 8006376:	e774      	b.n	8006262 <_dtoa_r+0x962>
 8006378:	4638      	mov	r0, r7
 800637a:	e7b9      	b.n	80062f0 <_dtoa_r+0x9f0>
 800637c:	2201      	movs	r2, #1
 800637e:	e7e2      	b.n	8006346 <_dtoa_r+0xa46>
 8006380:	f1b9 0f00 	cmp.w	r9, #0
 8006384:	db06      	blt.n	8006394 <_dtoa_r+0xa94>
 8006386:	9905      	ldr	r1, [sp, #20]
 8006388:	ea41 0909 	orr.w	r9, r1, r9
 800638c:	9906      	ldr	r1, [sp, #24]
 800638e:	ea59 0101 	orrs.w	r1, r9, r1
 8006392:	d120      	bne.n	80063d6 <_dtoa_r+0xad6>
 8006394:	2a00      	cmp	r2, #0
 8006396:	ddec      	ble.n	8006372 <_dtoa_r+0xa72>
 8006398:	4659      	mov	r1, fp
 800639a:	2201      	movs	r2, #1
 800639c:	4620      	mov	r0, r4
 800639e:	9301      	str	r3, [sp, #4]
 80063a0:	f000 fac6 	bl	8006930 <__lshift>
 80063a4:	4631      	mov	r1, r6
 80063a6:	4683      	mov	fp, r0
 80063a8:	f000 fb2e 	bl	8006a08 <__mcmp>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	9b01      	ldr	r3, [sp, #4]
 80063b0:	dc02      	bgt.n	80063b8 <_dtoa_r+0xab8>
 80063b2:	d1de      	bne.n	8006372 <_dtoa_r+0xa72>
 80063b4:	07da      	lsls	r2, r3, #31
 80063b6:	d5dc      	bpl.n	8006372 <_dtoa_r+0xa72>
 80063b8:	2b39      	cmp	r3, #57	; 0x39
 80063ba:	d1d8      	bne.n	800636e <_dtoa_r+0xa6e>
 80063bc:	9a02      	ldr	r2, [sp, #8]
 80063be:	2339      	movs	r3, #57	; 0x39
 80063c0:	7013      	strb	r3, [r2, #0]
 80063c2:	462b      	mov	r3, r5
 80063c4:	461d      	mov	r5, r3
 80063c6:	3b01      	subs	r3, #1
 80063c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80063cc:	2a39      	cmp	r2, #57	; 0x39
 80063ce:	d050      	beq.n	8006472 <_dtoa_r+0xb72>
 80063d0:	3201      	adds	r2, #1
 80063d2:	701a      	strb	r2, [r3, #0]
 80063d4:	e745      	b.n	8006262 <_dtoa_r+0x962>
 80063d6:	2a00      	cmp	r2, #0
 80063d8:	dd03      	ble.n	80063e2 <_dtoa_r+0xae2>
 80063da:	2b39      	cmp	r3, #57	; 0x39
 80063dc:	d0ee      	beq.n	80063bc <_dtoa_r+0xabc>
 80063de:	3301      	adds	r3, #1
 80063e0:	e7c7      	b.n	8006372 <_dtoa_r+0xa72>
 80063e2:	9a01      	ldr	r2, [sp, #4]
 80063e4:	9907      	ldr	r1, [sp, #28]
 80063e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80063ea:	428a      	cmp	r2, r1
 80063ec:	d02a      	beq.n	8006444 <_dtoa_r+0xb44>
 80063ee:	4659      	mov	r1, fp
 80063f0:	2300      	movs	r3, #0
 80063f2:	220a      	movs	r2, #10
 80063f4:	4620      	mov	r0, r4
 80063f6:	f000 f8eb 	bl	80065d0 <__multadd>
 80063fa:	45b8      	cmp	r8, r7
 80063fc:	4683      	mov	fp, r0
 80063fe:	f04f 0300 	mov.w	r3, #0
 8006402:	f04f 020a 	mov.w	r2, #10
 8006406:	4641      	mov	r1, r8
 8006408:	4620      	mov	r0, r4
 800640a:	d107      	bne.n	800641c <_dtoa_r+0xb1c>
 800640c:	f000 f8e0 	bl	80065d0 <__multadd>
 8006410:	4680      	mov	r8, r0
 8006412:	4607      	mov	r7, r0
 8006414:	9b01      	ldr	r3, [sp, #4]
 8006416:	3301      	adds	r3, #1
 8006418:	9301      	str	r3, [sp, #4]
 800641a:	e775      	b.n	8006308 <_dtoa_r+0xa08>
 800641c:	f000 f8d8 	bl	80065d0 <__multadd>
 8006420:	4639      	mov	r1, r7
 8006422:	4680      	mov	r8, r0
 8006424:	2300      	movs	r3, #0
 8006426:	220a      	movs	r2, #10
 8006428:	4620      	mov	r0, r4
 800642a:	f000 f8d1 	bl	80065d0 <__multadd>
 800642e:	4607      	mov	r7, r0
 8006430:	e7f0      	b.n	8006414 <_dtoa_r+0xb14>
 8006432:	f1b9 0f00 	cmp.w	r9, #0
 8006436:	9a00      	ldr	r2, [sp, #0]
 8006438:	bfcc      	ite	gt
 800643a:	464d      	movgt	r5, r9
 800643c:	2501      	movle	r5, #1
 800643e:	4415      	add	r5, r2
 8006440:	f04f 0800 	mov.w	r8, #0
 8006444:	4659      	mov	r1, fp
 8006446:	2201      	movs	r2, #1
 8006448:	4620      	mov	r0, r4
 800644a:	9301      	str	r3, [sp, #4]
 800644c:	f000 fa70 	bl	8006930 <__lshift>
 8006450:	4631      	mov	r1, r6
 8006452:	4683      	mov	fp, r0
 8006454:	f000 fad8 	bl	8006a08 <__mcmp>
 8006458:	2800      	cmp	r0, #0
 800645a:	dcb2      	bgt.n	80063c2 <_dtoa_r+0xac2>
 800645c:	d102      	bne.n	8006464 <_dtoa_r+0xb64>
 800645e:	9b01      	ldr	r3, [sp, #4]
 8006460:	07db      	lsls	r3, r3, #31
 8006462:	d4ae      	bmi.n	80063c2 <_dtoa_r+0xac2>
 8006464:	462b      	mov	r3, r5
 8006466:	461d      	mov	r5, r3
 8006468:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800646c:	2a30      	cmp	r2, #48	; 0x30
 800646e:	d0fa      	beq.n	8006466 <_dtoa_r+0xb66>
 8006470:	e6f7      	b.n	8006262 <_dtoa_r+0x962>
 8006472:	9a00      	ldr	r2, [sp, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d1a5      	bne.n	80063c4 <_dtoa_r+0xac4>
 8006478:	f10a 0a01 	add.w	sl, sl, #1
 800647c:	2331      	movs	r3, #49	; 0x31
 800647e:	e779      	b.n	8006374 <_dtoa_r+0xa74>
 8006480:	4b13      	ldr	r3, [pc, #76]	; (80064d0 <_dtoa_r+0xbd0>)
 8006482:	f7ff baaf 	b.w	80059e4 <_dtoa_r+0xe4>
 8006486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006488:	2b00      	cmp	r3, #0
 800648a:	f47f aa86 	bne.w	800599a <_dtoa_r+0x9a>
 800648e:	4b11      	ldr	r3, [pc, #68]	; (80064d4 <_dtoa_r+0xbd4>)
 8006490:	f7ff baa8 	b.w	80059e4 <_dtoa_r+0xe4>
 8006494:	f1b9 0f00 	cmp.w	r9, #0
 8006498:	dc03      	bgt.n	80064a2 <_dtoa_r+0xba2>
 800649a:	9b05      	ldr	r3, [sp, #20]
 800649c:	2b02      	cmp	r3, #2
 800649e:	f73f aec9 	bgt.w	8006234 <_dtoa_r+0x934>
 80064a2:	9d00      	ldr	r5, [sp, #0]
 80064a4:	4631      	mov	r1, r6
 80064a6:	4658      	mov	r0, fp
 80064a8:	f7ff f99c 	bl	80057e4 <quorem>
 80064ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80064b0:	f805 3b01 	strb.w	r3, [r5], #1
 80064b4:	9a00      	ldr	r2, [sp, #0]
 80064b6:	1aaa      	subs	r2, r5, r2
 80064b8:	4591      	cmp	r9, r2
 80064ba:	ddba      	ble.n	8006432 <_dtoa_r+0xb32>
 80064bc:	4659      	mov	r1, fp
 80064be:	2300      	movs	r3, #0
 80064c0:	220a      	movs	r2, #10
 80064c2:	4620      	mov	r0, r4
 80064c4:	f000 f884 	bl	80065d0 <__multadd>
 80064c8:	4683      	mov	fp, r0
 80064ca:	e7eb      	b.n	80064a4 <_dtoa_r+0xba4>
 80064cc:	08008a8f 	.word	0x08008a8f
 80064d0:	080089e8 	.word	0x080089e8
 80064d4:	08008a0c 	.word	0x08008a0c

080064d8 <_localeconv_r>:
 80064d8:	4800      	ldr	r0, [pc, #0]	; (80064dc <_localeconv_r+0x4>)
 80064da:	4770      	bx	lr
 80064dc:	20002170 	.word	0x20002170

080064e0 <malloc>:
 80064e0:	4b02      	ldr	r3, [pc, #8]	; (80064ec <malloc+0xc>)
 80064e2:	4601      	mov	r1, r0
 80064e4:	6818      	ldr	r0, [r3, #0]
 80064e6:	f000 bbef 	b.w	8006cc8 <_malloc_r>
 80064ea:	bf00      	nop
 80064ec:	2000201c 	.word	0x2000201c

080064f0 <memcpy>:
 80064f0:	440a      	add	r2, r1
 80064f2:	4291      	cmp	r1, r2
 80064f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80064f8:	d100      	bne.n	80064fc <memcpy+0xc>
 80064fa:	4770      	bx	lr
 80064fc:	b510      	push	{r4, lr}
 80064fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006506:	4291      	cmp	r1, r2
 8006508:	d1f9      	bne.n	80064fe <memcpy+0xe>
 800650a:	bd10      	pop	{r4, pc}

0800650c <_Balloc>:
 800650c:	b570      	push	{r4, r5, r6, lr}
 800650e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006510:	4604      	mov	r4, r0
 8006512:	460d      	mov	r5, r1
 8006514:	b976      	cbnz	r6, 8006534 <_Balloc+0x28>
 8006516:	2010      	movs	r0, #16
 8006518:	f7ff ffe2 	bl	80064e0 <malloc>
 800651c:	4602      	mov	r2, r0
 800651e:	6260      	str	r0, [r4, #36]	; 0x24
 8006520:	b920      	cbnz	r0, 800652c <_Balloc+0x20>
 8006522:	4b18      	ldr	r3, [pc, #96]	; (8006584 <_Balloc+0x78>)
 8006524:	4818      	ldr	r0, [pc, #96]	; (8006588 <_Balloc+0x7c>)
 8006526:	2166      	movs	r1, #102	; 0x66
 8006528:	f000 fd94 	bl	8007054 <__assert_func>
 800652c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006530:	6006      	str	r6, [r0, #0]
 8006532:	60c6      	str	r6, [r0, #12]
 8006534:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006536:	68f3      	ldr	r3, [r6, #12]
 8006538:	b183      	cbz	r3, 800655c <_Balloc+0x50>
 800653a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006542:	b9b8      	cbnz	r0, 8006574 <_Balloc+0x68>
 8006544:	2101      	movs	r1, #1
 8006546:	fa01 f605 	lsl.w	r6, r1, r5
 800654a:	1d72      	adds	r2, r6, #5
 800654c:	0092      	lsls	r2, r2, #2
 800654e:	4620      	mov	r0, r4
 8006550:	f000 fb5a 	bl	8006c08 <_calloc_r>
 8006554:	b160      	cbz	r0, 8006570 <_Balloc+0x64>
 8006556:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800655a:	e00e      	b.n	800657a <_Balloc+0x6e>
 800655c:	2221      	movs	r2, #33	; 0x21
 800655e:	2104      	movs	r1, #4
 8006560:	4620      	mov	r0, r4
 8006562:	f000 fb51 	bl	8006c08 <_calloc_r>
 8006566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006568:	60f0      	str	r0, [r6, #12]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1e4      	bne.n	800653a <_Balloc+0x2e>
 8006570:	2000      	movs	r0, #0
 8006572:	bd70      	pop	{r4, r5, r6, pc}
 8006574:	6802      	ldr	r2, [r0, #0]
 8006576:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800657a:	2300      	movs	r3, #0
 800657c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006580:	e7f7      	b.n	8006572 <_Balloc+0x66>
 8006582:	bf00      	nop
 8006584:	08008a19 	.word	0x08008a19
 8006588:	08008aa0 	.word	0x08008aa0

0800658c <_Bfree>:
 800658c:	b570      	push	{r4, r5, r6, lr}
 800658e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006590:	4605      	mov	r5, r0
 8006592:	460c      	mov	r4, r1
 8006594:	b976      	cbnz	r6, 80065b4 <_Bfree+0x28>
 8006596:	2010      	movs	r0, #16
 8006598:	f7ff ffa2 	bl	80064e0 <malloc>
 800659c:	4602      	mov	r2, r0
 800659e:	6268      	str	r0, [r5, #36]	; 0x24
 80065a0:	b920      	cbnz	r0, 80065ac <_Bfree+0x20>
 80065a2:	4b09      	ldr	r3, [pc, #36]	; (80065c8 <_Bfree+0x3c>)
 80065a4:	4809      	ldr	r0, [pc, #36]	; (80065cc <_Bfree+0x40>)
 80065a6:	218a      	movs	r1, #138	; 0x8a
 80065a8:	f000 fd54 	bl	8007054 <__assert_func>
 80065ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065b0:	6006      	str	r6, [r0, #0]
 80065b2:	60c6      	str	r6, [r0, #12]
 80065b4:	b13c      	cbz	r4, 80065c6 <_Bfree+0x3a>
 80065b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065b8:	6862      	ldr	r2, [r4, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065c0:	6021      	str	r1, [r4, #0]
 80065c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065c6:	bd70      	pop	{r4, r5, r6, pc}
 80065c8:	08008a19 	.word	0x08008a19
 80065cc:	08008aa0 	.word	0x08008aa0

080065d0 <__multadd>:
 80065d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d4:	690e      	ldr	r6, [r1, #16]
 80065d6:	4607      	mov	r7, r0
 80065d8:	4698      	mov	r8, r3
 80065da:	460c      	mov	r4, r1
 80065dc:	f101 0014 	add.w	r0, r1, #20
 80065e0:	2300      	movs	r3, #0
 80065e2:	6805      	ldr	r5, [r0, #0]
 80065e4:	b2a9      	uxth	r1, r5
 80065e6:	fb02 8101 	mla	r1, r2, r1, r8
 80065ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80065ee:	0c2d      	lsrs	r5, r5, #16
 80065f0:	fb02 c505 	mla	r5, r2, r5, ip
 80065f4:	b289      	uxth	r1, r1
 80065f6:	3301      	adds	r3, #1
 80065f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80065fc:	429e      	cmp	r6, r3
 80065fe:	f840 1b04 	str.w	r1, [r0], #4
 8006602:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006606:	dcec      	bgt.n	80065e2 <__multadd+0x12>
 8006608:	f1b8 0f00 	cmp.w	r8, #0
 800660c:	d022      	beq.n	8006654 <__multadd+0x84>
 800660e:	68a3      	ldr	r3, [r4, #8]
 8006610:	42b3      	cmp	r3, r6
 8006612:	dc19      	bgt.n	8006648 <__multadd+0x78>
 8006614:	6861      	ldr	r1, [r4, #4]
 8006616:	4638      	mov	r0, r7
 8006618:	3101      	adds	r1, #1
 800661a:	f7ff ff77 	bl	800650c <_Balloc>
 800661e:	4605      	mov	r5, r0
 8006620:	b928      	cbnz	r0, 800662e <__multadd+0x5e>
 8006622:	4602      	mov	r2, r0
 8006624:	4b0d      	ldr	r3, [pc, #52]	; (800665c <__multadd+0x8c>)
 8006626:	480e      	ldr	r0, [pc, #56]	; (8006660 <__multadd+0x90>)
 8006628:	21b5      	movs	r1, #181	; 0xb5
 800662a:	f000 fd13 	bl	8007054 <__assert_func>
 800662e:	6922      	ldr	r2, [r4, #16]
 8006630:	3202      	adds	r2, #2
 8006632:	f104 010c 	add.w	r1, r4, #12
 8006636:	0092      	lsls	r2, r2, #2
 8006638:	300c      	adds	r0, #12
 800663a:	f7ff ff59 	bl	80064f0 <memcpy>
 800663e:	4621      	mov	r1, r4
 8006640:	4638      	mov	r0, r7
 8006642:	f7ff ffa3 	bl	800658c <_Bfree>
 8006646:	462c      	mov	r4, r5
 8006648:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800664c:	3601      	adds	r6, #1
 800664e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006652:	6126      	str	r6, [r4, #16]
 8006654:	4620      	mov	r0, r4
 8006656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800665a:	bf00      	nop
 800665c:	08008a8f 	.word	0x08008a8f
 8006660:	08008aa0 	.word	0x08008aa0

08006664 <__hi0bits>:
 8006664:	0c03      	lsrs	r3, r0, #16
 8006666:	041b      	lsls	r3, r3, #16
 8006668:	b9d3      	cbnz	r3, 80066a0 <__hi0bits+0x3c>
 800666a:	0400      	lsls	r0, r0, #16
 800666c:	2310      	movs	r3, #16
 800666e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006672:	bf04      	itt	eq
 8006674:	0200      	lsleq	r0, r0, #8
 8006676:	3308      	addeq	r3, #8
 8006678:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800667c:	bf04      	itt	eq
 800667e:	0100      	lsleq	r0, r0, #4
 8006680:	3304      	addeq	r3, #4
 8006682:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006686:	bf04      	itt	eq
 8006688:	0080      	lsleq	r0, r0, #2
 800668a:	3302      	addeq	r3, #2
 800668c:	2800      	cmp	r0, #0
 800668e:	db05      	blt.n	800669c <__hi0bits+0x38>
 8006690:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006694:	f103 0301 	add.w	r3, r3, #1
 8006698:	bf08      	it	eq
 800669a:	2320      	moveq	r3, #32
 800669c:	4618      	mov	r0, r3
 800669e:	4770      	bx	lr
 80066a0:	2300      	movs	r3, #0
 80066a2:	e7e4      	b.n	800666e <__hi0bits+0xa>

080066a4 <__lo0bits>:
 80066a4:	6803      	ldr	r3, [r0, #0]
 80066a6:	f013 0207 	ands.w	r2, r3, #7
 80066aa:	4601      	mov	r1, r0
 80066ac:	d00b      	beq.n	80066c6 <__lo0bits+0x22>
 80066ae:	07da      	lsls	r2, r3, #31
 80066b0:	d424      	bmi.n	80066fc <__lo0bits+0x58>
 80066b2:	0798      	lsls	r0, r3, #30
 80066b4:	bf49      	itett	mi
 80066b6:	085b      	lsrmi	r3, r3, #1
 80066b8:	089b      	lsrpl	r3, r3, #2
 80066ba:	2001      	movmi	r0, #1
 80066bc:	600b      	strmi	r3, [r1, #0]
 80066be:	bf5c      	itt	pl
 80066c0:	600b      	strpl	r3, [r1, #0]
 80066c2:	2002      	movpl	r0, #2
 80066c4:	4770      	bx	lr
 80066c6:	b298      	uxth	r0, r3
 80066c8:	b9b0      	cbnz	r0, 80066f8 <__lo0bits+0x54>
 80066ca:	0c1b      	lsrs	r3, r3, #16
 80066cc:	2010      	movs	r0, #16
 80066ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80066d2:	bf04      	itt	eq
 80066d4:	0a1b      	lsreq	r3, r3, #8
 80066d6:	3008      	addeq	r0, #8
 80066d8:	071a      	lsls	r2, r3, #28
 80066da:	bf04      	itt	eq
 80066dc:	091b      	lsreq	r3, r3, #4
 80066de:	3004      	addeq	r0, #4
 80066e0:	079a      	lsls	r2, r3, #30
 80066e2:	bf04      	itt	eq
 80066e4:	089b      	lsreq	r3, r3, #2
 80066e6:	3002      	addeq	r0, #2
 80066e8:	07da      	lsls	r2, r3, #31
 80066ea:	d403      	bmi.n	80066f4 <__lo0bits+0x50>
 80066ec:	085b      	lsrs	r3, r3, #1
 80066ee:	f100 0001 	add.w	r0, r0, #1
 80066f2:	d005      	beq.n	8006700 <__lo0bits+0x5c>
 80066f4:	600b      	str	r3, [r1, #0]
 80066f6:	4770      	bx	lr
 80066f8:	4610      	mov	r0, r2
 80066fa:	e7e8      	b.n	80066ce <__lo0bits+0x2a>
 80066fc:	2000      	movs	r0, #0
 80066fe:	4770      	bx	lr
 8006700:	2020      	movs	r0, #32
 8006702:	4770      	bx	lr

08006704 <__i2b>:
 8006704:	b510      	push	{r4, lr}
 8006706:	460c      	mov	r4, r1
 8006708:	2101      	movs	r1, #1
 800670a:	f7ff feff 	bl	800650c <_Balloc>
 800670e:	4602      	mov	r2, r0
 8006710:	b928      	cbnz	r0, 800671e <__i2b+0x1a>
 8006712:	4b05      	ldr	r3, [pc, #20]	; (8006728 <__i2b+0x24>)
 8006714:	4805      	ldr	r0, [pc, #20]	; (800672c <__i2b+0x28>)
 8006716:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800671a:	f000 fc9b 	bl	8007054 <__assert_func>
 800671e:	2301      	movs	r3, #1
 8006720:	6144      	str	r4, [r0, #20]
 8006722:	6103      	str	r3, [r0, #16]
 8006724:	bd10      	pop	{r4, pc}
 8006726:	bf00      	nop
 8006728:	08008a8f 	.word	0x08008a8f
 800672c:	08008aa0 	.word	0x08008aa0

08006730 <__multiply>:
 8006730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006734:	4614      	mov	r4, r2
 8006736:	690a      	ldr	r2, [r1, #16]
 8006738:	6923      	ldr	r3, [r4, #16]
 800673a:	429a      	cmp	r2, r3
 800673c:	bfb8      	it	lt
 800673e:	460b      	movlt	r3, r1
 8006740:	460d      	mov	r5, r1
 8006742:	bfbc      	itt	lt
 8006744:	4625      	movlt	r5, r4
 8006746:	461c      	movlt	r4, r3
 8006748:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800674c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006750:	68ab      	ldr	r3, [r5, #8]
 8006752:	6869      	ldr	r1, [r5, #4]
 8006754:	eb0a 0709 	add.w	r7, sl, r9
 8006758:	42bb      	cmp	r3, r7
 800675a:	b085      	sub	sp, #20
 800675c:	bfb8      	it	lt
 800675e:	3101      	addlt	r1, #1
 8006760:	f7ff fed4 	bl	800650c <_Balloc>
 8006764:	b930      	cbnz	r0, 8006774 <__multiply+0x44>
 8006766:	4602      	mov	r2, r0
 8006768:	4b42      	ldr	r3, [pc, #264]	; (8006874 <__multiply+0x144>)
 800676a:	4843      	ldr	r0, [pc, #268]	; (8006878 <__multiply+0x148>)
 800676c:	f240 115d 	movw	r1, #349	; 0x15d
 8006770:	f000 fc70 	bl	8007054 <__assert_func>
 8006774:	f100 0614 	add.w	r6, r0, #20
 8006778:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800677c:	4633      	mov	r3, r6
 800677e:	2200      	movs	r2, #0
 8006780:	4543      	cmp	r3, r8
 8006782:	d31e      	bcc.n	80067c2 <__multiply+0x92>
 8006784:	f105 0c14 	add.w	ip, r5, #20
 8006788:	f104 0314 	add.w	r3, r4, #20
 800678c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006790:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006794:	9202      	str	r2, [sp, #8]
 8006796:	ebac 0205 	sub.w	r2, ip, r5
 800679a:	3a15      	subs	r2, #21
 800679c:	f022 0203 	bic.w	r2, r2, #3
 80067a0:	3204      	adds	r2, #4
 80067a2:	f105 0115 	add.w	r1, r5, #21
 80067a6:	458c      	cmp	ip, r1
 80067a8:	bf38      	it	cc
 80067aa:	2204      	movcc	r2, #4
 80067ac:	9201      	str	r2, [sp, #4]
 80067ae:	9a02      	ldr	r2, [sp, #8]
 80067b0:	9303      	str	r3, [sp, #12]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d808      	bhi.n	80067c8 <__multiply+0x98>
 80067b6:	2f00      	cmp	r7, #0
 80067b8:	dc55      	bgt.n	8006866 <__multiply+0x136>
 80067ba:	6107      	str	r7, [r0, #16]
 80067bc:	b005      	add	sp, #20
 80067be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c2:	f843 2b04 	str.w	r2, [r3], #4
 80067c6:	e7db      	b.n	8006780 <__multiply+0x50>
 80067c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80067cc:	f1ba 0f00 	cmp.w	sl, #0
 80067d0:	d020      	beq.n	8006814 <__multiply+0xe4>
 80067d2:	f105 0e14 	add.w	lr, r5, #20
 80067d6:	46b1      	mov	r9, r6
 80067d8:	2200      	movs	r2, #0
 80067da:	f85e 4b04 	ldr.w	r4, [lr], #4
 80067de:	f8d9 b000 	ldr.w	fp, [r9]
 80067e2:	b2a1      	uxth	r1, r4
 80067e4:	fa1f fb8b 	uxth.w	fp, fp
 80067e8:	fb0a b101 	mla	r1, sl, r1, fp
 80067ec:	4411      	add	r1, r2
 80067ee:	f8d9 2000 	ldr.w	r2, [r9]
 80067f2:	0c24      	lsrs	r4, r4, #16
 80067f4:	0c12      	lsrs	r2, r2, #16
 80067f6:	fb0a 2404 	mla	r4, sl, r4, r2
 80067fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80067fe:	b289      	uxth	r1, r1
 8006800:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006804:	45f4      	cmp	ip, lr
 8006806:	f849 1b04 	str.w	r1, [r9], #4
 800680a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800680e:	d8e4      	bhi.n	80067da <__multiply+0xaa>
 8006810:	9901      	ldr	r1, [sp, #4]
 8006812:	5072      	str	r2, [r6, r1]
 8006814:	9a03      	ldr	r2, [sp, #12]
 8006816:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800681a:	3304      	adds	r3, #4
 800681c:	f1b9 0f00 	cmp.w	r9, #0
 8006820:	d01f      	beq.n	8006862 <__multiply+0x132>
 8006822:	6834      	ldr	r4, [r6, #0]
 8006824:	f105 0114 	add.w	r1, r5, #20
 8006828:	46b6      	mov	lr, r6
 800682a:	f04f 0a00 	mov.w	sl, #0
 800682e:	880a      	ldrh	r2, [r1, #0]
 8006830:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006834:	fb09 b202 	mla	r2, r9, r2, fp
 8006838:	4492      	add	sl, r2
 800683a:	b2a4      	uxth	r4, r4
 800683c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006840:	f84e 4b04 	str.w	r4, [lr], #4
 8006844:	f851 4b04 	ldr.w	r4, [r1], #4
 8006848:	f8be 2000 	ldrh.w	r2, [lr]
 800684c:	0c24      	lsrs	r4, r4, #16
 800684e:	fb09 2404 	mla	r4, r9, r4, r2
 8006852:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006856:	458c      	cmp	ip, r1
 8006858:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800685c:	d8e7      	bhi.n	800682e <__multiply+0xfe>
 800685e:	9a01      	ldr	r2, [sp, #4]
 8006860:	50b4      	str	r4, [r6, r2]
 8006862:	3604      	adds	r6, #4
 8006864:	e7a3      	b.n	80067ae <__multiply+0x7e>
 8006866:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1a5      	bne.n	80067ba <__multiply+0x8a>
 800686e:	3f01      	subs	r7, #1
 8006870:	e7a1      	b.n	80067b6 <__multiply+0x86>
 8006872:	bf00      	nop
 8006874:	08008a8f 	.word	0x08008a8f
 8006878:	08008aa0 	.word	0x08008aa0

0800687c <__pow5mult>:
 800687c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006880:	4615      	mov	r5, r2
 8006882:	f012 0203 	ands.w	r2, r2, #3
 8006886:	4606      	mov	r6, r0
 8006888:	460f      	mov	r7, r1
 800688a:	d007      	beq.n	800689c <__pow5mult+0x20>
 800688c:	4c25      	ldr	r4, [pc, #148]	; (8006924 <__pow5mult+0xa8>)
 800688e:	3a01      	subs	r2, #1
 8006890:	2300      	movs	r3, #0
 8006892:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006896:	f7ff fe9b 	bl	80065d0 <__multadd>
 800689a:	4607      	mov	r7, r0
 800689c:	10ad      	asrs	r5, r5, #2
 800689e:	d03d      	beq.n	800691c <__pow5mult+0xa0>
 80068a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80068a2:	b97c      	cbnz	r4, 80068c4 <__pow5mult+0x48>
 80068a4:	2010      	movs	r0, #16
 80068a6:	f7ff fe1b 	bl	80064e0 <malloc>
 80068aa:	4602      	mov	r2, r0
 80068ac:	6270      	str	r0, [r6, #36]	; 0x24
 80068ae:	b928      	cbnz	r0, 80068bc <__pow5mult+0x40>
 80068b0:	4b1d      	ldr	r3, [pc, #116]	; (8006928 <__pow5mult+0xac>)
 80068b2:	481e      	ldr	r0, [pc, #120]	; (800692c <__pow5mult+0xb0>)
 80068b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80068b8:	f000 fbcc 	bl	8007054 <__assert_func>
 80068bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068c0:	6004      	str	r4, [r0, #0]
 80068c2:	60c4      	str	r4, [r0, #12]
 80068c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80068c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068cc:	b94c      	cbnz	r4, 80068e2 <__pow5mult+0x66>
 80068ce:	f240 2171 	movw	r1, #625	; 0x271
 80068d2:	4630      	mov	r0, r6
 80068d4:	f7ff ff16 	bl	8006704 <__i2b>
 80068d8:	2300      	movs	r3, #0
 80068da:	f8c8 0008 	str.w	r0, [r8, #8]
 80068de:	4604      	mov	r4, r0
 80068e0:	6003      	str	r3, [r0, #0]
 80068e2:	f04f 0900 	mov.w	r9, #0
 80068e6:	07eb      	lsls	r3, r5, #31
 80068e8:	d50a      	bpl.n	8006900 <__pow5mult+0x84>
 80068ea:	4639      	mov	r1, r7
 80068ec:	4622      	mov	r2, r4
 80068ee:	4630      	mov	r0, r6
 80068f0:	f7ff ff1e 	bl	8006730 <__multiply>
 80068f4:	4639      	mov	r1, r7
 80068f6:	4680      	mov	r8, r0
 80068f8:	4630      	mov	r0, r6
 80068fa:	f7ff fe47 	bl	800658c <_Bfree>
 80068fe:	4647      	mov	r7, r8
 8006900:	106d      	asrs	r5, r5, #1
 8006902:	d00b      	beq.n	800691c <__pow5mult+0xa0>
 8006904:	6820      	ldr	r0, [r4, #0]
 8006906:	b938      	cbnz	r0, 8006918 <__pow5mult+0x9c>
 8006908:	4622      	mov	r2, r4
 800690a:	4621      	mov	r1, r4
 800690c:	4630      	mov	r0, r6
 800690e:	f7ff ff0f 	bl	8006730 <__multiply>
 8006912:	6020      	str	r0, [r4, #0]
 8006914:	f8c0 9000 	str.w	r9, [r0]
 8006918:	4604      	mov	r4, r0
 800691a:	e7e4      	b.n	80068e6 <__pow5mult+0x6a>
 800691c:	4638      	mov	r0, r7
 800691e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006922:	bf00      	nop
 8006924:	08008bf0 	.word	0x08008bf0
 8006928:	08008a19 	.word	0x08008a19
 800692c:	08008aa0 	.word	0x08008aa0

08006930 <__lshift>:
 8006930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006934:	460c      	mov	r4, r1
 8006936:	6849      	ldr	r1, [r1, #4]
 8006938:	6923      	ldr	r3, [r4, #16]
 800693a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800693e:	68a3      	ldr	r3, [r4, #8]
 8006940:	4607      	mov	r7, r0
 8006942:	4691      	mov	r9, r2
 8006944:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006948:	f108 0601 	add.w	r6, r8, #1
 800694c:	42b3      	cmp	r3, r6
 800694e:	db0b      	blt.n	8006968 <__lshift+0x38>
 8006950:	4638      	mov	r0, r7
 8006952:	f7ff fddb 	bl	800650c <_Balloc>
 8006956:	4605      	mov	r5, r0
 8006958:	b948      	cbnz	r0, 800696e <__lshift+0x3e>
 800695a:	4602      	mov	r2, r0
 800695c:	4b28      	ldr	r3, [pc, #160]	; (8006a00 <__lshift+0xd0>)
 800695e:	4829      	ldr	r0, [pc, #164]	; (8006a04 <__lshift+0xd4>)
 8006960:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006964:	f000 fb76 	bl	8007054 <__assert_func>
 8006968:	3101      	adds	r1, #1
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	e7ee      	b.n	800694c <__lshift+0x1c>
 800696e:	2300      	movs	r3, #0
 8006970:	f100 0114 	add.w	r1, r0, #20
 8006974:	f100 0210 	add.w	r2, r0, #16
 8006978:	4618      	mov	r0, r3
 800697a:	4553      	cmp	r3, sl
 800697c:	db33      	blt.n	80069e6 <__lshift+0xb6>
 800697e:	6920      	ldr	r0, [r4, #16]
 8006980:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006984:	f104 0314 	add.w	r3, r4, #20
 8006988:	f019 091f 	ands.w	r9, r9, #31
 800698c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006990:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006994:	d02b      	beq.n	80069ee <__lshift+0xbe>
 8006996:	f1c9 0e20 	rsb	lr, r9, #32
 800699a:	468a      	mov	sl, r1
 800699c:	2200      	movs	r2, #0
 800699e:	6818      	ldr	r0, [r3, #0]
 80069a0:	fa00 f009 	lsl.w	r0, r0, r9
 80069a4:	4302      	orrs	r2, r0
 80069a6:	f84a 2b04 	str.w	r2, [sl], #4
 80069aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ae:	459c      	cmp	ip, r3
 80069b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80069b4:	d8f3      	bhi.n	800699e <__lshift+0x6e>
 80069b6:	ebac 0304 	sub.w	r3, ip, r4
 80069ba:	3b15      	subs	r3, #21
 80069bc:	f023 0303 	bic.w	r3, r3, #3
 80069c0:	3304      	adds	r3, #4
 80069c2:	f104 0015 	add.w	r0, r4, #21
 80069c6:	4584      	cmp	ip, r0
 80069c8:	bf38      	it	cc
 80069ca:	2304      	movcc	r3, #4
 80069cc:	50ca      	str	r2, [r1, r3]
 80069ce:	b10a      	cbz	r2, 80069d4 <__lshift+0xa4>
 80069d0:	f108 0602 	add.w	r6, r8, #2
 80069d4:	3e01      	subs	r6, #1
 80069d6:	4638      	mov	r0, r7
 80069d8:	612e      	str	r6, [r5, #16]
 80069da:	4621      	mov	r1, r4
 80069dc:	f7ff fdd6 	bl	800658c <_Bfree>
 80069e0:	4628      	mov	r0, r5
 80069e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80069ea:	3301      	adds	r3, #1
 80069ec:	e7c5      	b.n	800697a <__lshift+0x4a>
 80069ee:	3904      	subs	r1, #4
 80069f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80069f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80069f8:	459c      	cmp	ip, r3
 80069fa:	d8f9      	bhi.n	80069f0 <__lshift+0xc0>
 80069fc:	e7ea      	b.n	80069d4 <__lshift+0xa4>
 80069fe:	bf00      	nop
 8006a00:	08008a8f 	.word	0x08008a8f
 8006a04:	08008aa0 	.word	0x08008aa0

08006a08 <__mcmp>:
 8006a08:	b530      	push	{r4, r5, lr}
 8006a0a:	6902      	ldr	r2, [r0, #16]
 8006a0c:	690c      	ldr	r4, [r1, #16]
 8006a0e:	1b12      	subs	r2, r2, r4
 8006a10:	d10e      	bne.n	8006a30 <__mcmp+0x28>
 8006a12:	f100 0314 	add.w	r3, r0, #20
 8006a16:	3114      	adds	r1, #20
 8006a18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006a1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006a20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006a24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006a28:	42a5      	cmp	r5, r4
 8006a2a:	d003      	beq.n	8006a34 <__mcmp+0x2c>
 8006a2c:	d305      	bcc.n	8006a3a <__mcmp+0x32>
 8006a2e:	2201      	movs	r2, #1
 8006a30:	4610      	mov	r0, r2
 8006a32:	bd30      	pop	{r4, r5, pc}
 8006a34:	4283      	cmp	r3, r0
 8006a36:	d3f3      	bcc.n	8006a20 <__mcmp+0x18>
 8006a38:	e7fa      	b.n	8006a30 <__mcmp+0x28>
 8006a3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a3e:	e7f7      	b.n	8006a30 <__mcmp+0x28>

08006a40 <__mdiff>:
 8006a40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a44:	460c      	mov	r4, r1
 8006a46:	4606      	mov	r6, r0
 8006a48:	4611      	mov	r1, r2
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	4617      	mov	r7, r2
 8006a4e:	f7ff ffdb 	bl	8006a08 <__mcmp>
 8006a52:	1e05      	subs	r5, r0, #0
 8006a54:	d110      	bne.n	8006a78 <__mdiff+0x38>
 8006a56:	4629      	mov	r1, r5
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f7ff fd57 	bl	800650c <_Balloc>
 8006a5e:	b930      	cbnz	r0, 8006a6e <__mdiff+0x2e>
 8006a60:	4b39      	ldr	r3, [pc, #228]	; (8006b48 <__mdiff+0x108>)
 8006a62:	4602      	mov	r2, r0
 8006a64:	f240 2132 	movw	r1, #562	; 0x232
 8006a68:	4838      	ldr	r0, [pc, #224]	; (8006b4c <__mdiff+0x10c>)
 8006a6a:	f000 faf3 	bl	8007054 <__assert_func>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a78:	bfa4      	itt	ge
 8006a7a:	463b      	movge	r3, r7
 8006a7c:	4627      	movge	r7, r4
 8006a7e:	4630      	mov	r0, r6
 8006a80:	6879      	ldr	r1, [r7, #4]
 8006a82:	bfa6      	itte	ge
 8006a84:	461c      	movge	r4, r3
 8006a86:	2500      	movge	r5, #0
 8006a88:	2501      	movlt	r5, #1
 8006a8a:	f7ff fd3f 	bl	800650c <_Balloc>
 8006a8e:	b920      	cbnz	r0, 8006a9a <__mdiff+0x5a>
 8006a90:	4b2d      	ldr	r3, [pc, #180]	; (8006b48 <__mdiff+0x108>)
 8006a92:	4602      	mov	r2, r0
 8006a94:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a98:	e7e6      	b.n	8006a68 <__mdiff+0x28>
 8006a9a:	693e      	ldr	r6, [r7, #16]
 8006a9c:	60c5      	str	r5, [r0, #12]
 8006a9e:	6925      	ldr	r5, [r4, #16]
 8006aa0:	f107 0114 	add.w	r1, r7, #20
 8006aa4:	f104 0914 	add.w	r9, r4, #20
 8006aa8:	f100 0e14 	add.w	lr, r0, #20
 8006aac:	f107 0210 	add.w	r2, r7, #16
 8006ab0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006ab4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006ab8:	46f2      	mov	sl, lr
 8006aba:	2700      	movs	r7, #0
 8006abc:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ac0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ac4:	fa1f f883 	uxth.w	r8, r3
 8006ac8:	fa17 f78b 	uxtah	r7, r7, fp
 8006acc:	0c1b      	lsrs	r3, r3, #16
 8006ace:	eba7 0808 	sub.w	r8, r7, r8
 8006ad2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ad6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ada:	fa1f f888 	uxth.w	r8, r8
 8006ade:	141f      	asrs	r7, r3, #16
 8006ae0:	454d      	cmp	r5, r9
 8006ae2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ae6:	f84a 3b04 	str.w	r3, [sl], #4
 8006aea:	d8e7      	bhi.n	8006abc <__mdiff+0x7c>
 8006aec:	1b2b      	subs	r3, r5, r4
 8006aee:	3b15      	subs	r3, #21
 8006af0:	f023 0303 	bic.w	r3, r3, #3
 8006af4:	3304      	adds	r3, #4
 8006af6:	3415      	adds	r4, #21
 8006af8:	42a5      	cmp	r5, r4
 8006afa:	bf38      	it	cc
 8006afc:	2304      	movcc	r3, #4
 8006afe:	4419      	add	r1, r3
 8006b00:	4473      	add	r3, lr
 8006b02:	469e      	mov	lr, r3
 8006b04:	460d      	mov	r5, r1
 8006b06:	4565      	cmp	r5, ip
 8006b08:	d30e      	bcc.n	8006b28 <__mdiff+0xe8>
 8006b0a:	f10c 0203 	add.w	r2, ip, #3
 8006b0e:	1a52      	subs	r2, r2, r1
 8006b10:	f022 0203 	bic.w	r2, r2, #3
 8006b14:	3903      	subs	r1, #3
 8006b16:	458c      	cmp	ip, r1
 8006b18:	bf38      	it	cc
 8006b1a:	2200      	movcc	r2, #0
 8006b1c:	441a      	add	r2, r3
 8006b1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006b22:	b17b      	cbz	r3, 8006b44 <__mdiff+0x104>
 8006b24:	6106      	str	r6, [r0, #16]
 8006b26:	e7a5      	b.n	8006a74 <__mdiff+0x34>
 8006b28:	f855 8b04 	ldr.w	r8, [r5], #4
 8006b2c:	fa17 f488 	uxtah	r4, r7, r8
 8006b30:	1422      	asrs	r2, r4, #16
 8006b32:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006b36:	b2a4      	uxth	r4, r4
 8006b38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006b3c:	f84e 4b04 	str.w	r4, [lr], #4
 8006b40:	1417      	asrs	r7, r2, #16
 8006b42:	e7e0      	b.n	8006b06 <__mdiff+0xc6>
 8006b44:	3e01      	subs	r6, #1
 8006b46:	e7ea      	b.n	8006b1e <__mdiff+0xde>
 8006b48:	08008a8f 	.word	0x08008a8f
 8006b4c:	08008aa0 	.word	0x08008aa0

08006b50 <__d2b>:
 8006b50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b54:	4689      	mov	r9, r1
 8006b56:	2101      	movs	r1, #1
 8006b58:	ec57 6b10 	vmov	r6, r7, d0
 8006b5c:	4690      	mov	r8, r2
 8006b5e:	f7ff fcd5 	bl	800650c <_Balloc>
 8006b62:	4604      	mov	r4, r0
 8006b64:	b930      	cbnz	r0, 8006b74 <__d2b+0x24>
 8006b66:	4602      	mov	r2, r0
 8006b68:	4b25      	ldr	r3, [pc, #148]	; (8006c00 <__d2b+0xb0>)
 8006b6a:	4826      	ldr	r0, [pc, #152]	; (8006c04 <__d2b+0xb4>)
 8006b6c:	f240 310a 	movw	r1, #778	; 0x30a
 8006b70:	f000 fa70 	bl	8007054 <__assert_func>
 8006b74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006b78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b7c:	bb35      	cbnz	r5, 8006bcc <__d2b+0x7c>
 8006b7e:	2e00      	cmp	r6, #0
 8006b80:	9301      	str	r3, [sp, #4]
 8006b82:	d028      	beq.n	8006bd6 <__d2b+0x86>
 8006b84:	4668      	mov	r0, sp
 8006b86:	9600      	str	r6, [sp, #0]
 8006b88:	f7ff fd8c 	bl	80066a4 <__lo0bits>
 8006b8c:	9900      	ldr	r1, [sp, #0]
 8006b8e:	b300      	cbz	r0, 8006bd2 <__d2b+0x82>
 8006b90:	9a01      	ldr	r2, [sp, #4]
 8006b92:	f1c0 0320 	rsb	r3, r0, #32
 8006b96:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9a:	430b      	orrs	r3, r1
 8006b9c:	40c2      	lsrs	r2, r0
 8006b9e:	6163      	str	r3, [r4, #20]
 8006ba0:	9201      	str	r2, [sp, #4]
 8006ba2:	9b01      	ldr	r3, [sp, #4]
 8006ba4:	61a3      	str	r3, [r4, #24]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	bf14      	ite	ne
 8006baa:	2202      	movne	r2, #2
 8006bac:	2201      	moveq	r2, #1
 8006bae:	6122      	str	r2, [r4, #16]
 8006bb0:	b1d5      	cbz	r5, 8006be8 <__d2b+0x98>
 8006bb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006bb6:	4405      	add	r5, r0
 8006bb8:	f8c9 5000 	str.w	r5, [r9]
 8006bbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006bc0:	f8c8 0000 	str.w	r0, [r8]
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	b003      	add	sp, #12
 8006bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bd0:	e7d5      	b.n	8006b7e <__d2b+0x2e>
 8006bd2:	6161      	str	r1, [r4, #20]
 8006bd4:	e7e5      	b.n	8006ba2 <__d2b+0x52>
 8006bd6:	a801      	add	r0, sp, #4
 8006bd8:	f7ff fd64 	bl	80066a4 <__lo0bits>
 8006bdc:	9b01      	ldr	r3, [sp, #4]
 8006bde:	6163      	str	r3, [r4, #20]
 8006be0:	2201      	movs	r2, #1
 8006be2:	6122      	str	r2, [r4, #16]
 8006be4:	3020      	adds	r0, #32
 8006be6:	e7e3      	b.n	8006bb0 <__d2b+0x60>
 8006be8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006bec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006bf0:	f8c9 0000 	str.w	r0, [r9]
 8006bf4:	6918      	ldr	r0, [r3, #16]
 8006bf6:	f7ff fd35 	bl	8006664 <__hi0bits>
 8006bfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006bfe:	e7df      	b.n	8006bc0 <__d2b+0x70>
 8006c00:	08008a8f 	.word	0x08008a8f
 8006c04:	08008aa0 	.word	0x08008aa0

08006c08 <_calloc_r>:
 8006c08:	b513      	push	{r0, r1, r4, lr}
 8006c0a:	434a      	muls	r2, r1
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	9201      	str	r2, [sp, #4]
 8006c10:	f000 f85a 	bl	8006cc8 <_malloc_r>
 8006c14:	4604      	mov	r4, r0
 8006c16:	b118      	cbz	r0, 8006c20 <_calloc_r+0x18>
 8006c18:	9a01      	ldr	r2, [sp, #4]
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	f7fe f93e 	bl	8004e9c <memset>
 8006c20:	4620      	mov	r0, r4
 8006c22:	b002      	add	sp, #8
 8006c24:	bd10      	pop	{r4, pc}
	...

08006c28 <_free_r>:
 8006c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c2a:	2900      	cmp	r1, #0
 8006c2c:	d048      	beq.n	8006cc0 <_free_r+0x98>
 8006c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c32:	9001      	str	r0, [sp, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f1a1 0404 	sub.w	r4, r1, #4
 8006c3a:	bfb8      	it	lt
 8006c3c:	18e4      	addlt	r4, r4, r3
 8006c3e:	f000 fa65 	bl	800710c <__malloc_lock>
 8006c42:	4a20      	ldr	r2, [pc, #128]	; (8006cc4 <_free_r+0x9c>)
 8006c44:	9801      	ldr	r0, [sp, #4]
 8006c46:	6813      	ldr	r3, [r2, #0]
 8006c48:	4615      	mov	r5, r2
 8006c4a:	b933      	cbnz	r3, 8006c5a <_free_r+0x32>
 8006c4c:	6063      	str	r3, [r4, #4]
 8006c4e:	6014      	str	r4, [r2, #0]
 8006c50:	b003      	add	sp, #12
 8006c52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c56:	f000 ba5f 	b.w	8007118 <__malloc_unlock>
 8006c5a:	42a3      	cmp	r3, r4
 8006c5c:	d90b      	bls.n	8006c76 <_free_r+0x4e>
 8006c5e:	6821      	ldr	r1, [r4, #0]
 8006c60:	1862      	adds	r2, r4, r1
 8006c62:	4293      	cmp	r3, r2
 8006c64:	bf04      	itt	eq
 8006c66:	681a      	ldreq	r2, [r3, #0]
 8006c68:	685b      	ldreq	r3, [r3, #4]
 8006c6a:	6063      	str	r3, [r4, #4]
 8006c6c:	bf04      	itt	eq
 8006c6e:	1852      	addeq	r2, r2, r1
 8006c70:	6022      	streq	r2, [r4, #0]
 8006c72:	602c      	str	r4, [r5, #0]
 8006c74:	e7ec      	b.n	8006c50 <_free_r+0x28>
 8006c76:	461a      	mov	r2, r3
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	b10b      	cbz	r3, 8006c80 <_free_r+0x58>
 8006c7c:	42a3      	cmp	r3, r4
 8006c7e:	d9fa      	bls.n	8006c76 <_free_r+0x4e>
 8006c80:	6811      	ldr	r1, [r2, #0]
 8006c82:	1855      	adds	r5, r2, r1
 8006c84:	42a5      	cmp	r5, r4
 8006c86:	d10b      	bne.n	8006ca0 <_free_r+0x78>
 8006c88:	6824      	ldr	r4, [r4, #0]
 8006c8a:	4421      	add	r1, r4
 8006c8c:	1854      	adds	r4, r2, r1
 8006c8e:	42a3      	cmp	r3, r4
 8006c90:	6011      	str	r1, [r2, #0]
 8006c92:	d1dd      	bne.n	8006c50 <_free_r+0x28>
 8006c94:	681c      	ldr	r4, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	6053      	str	r3, [r2, #4]
 8006c9a:	4421      	add	r1, r4
 8006c9c:	6011      	str	r1, [r2, #0]
 8006c9e:	e7d7      	b.n	8006c50 <_free_r+0x28>
 8006ca0:	d902      	bls.n	8006ca8 <_free_r+0x80>
 8006ca2:	230c      	movs	r3, #12
 8006ca4:	6003      	str	r3, [r0, #0]
 8006ca6:	e7d3      	b.n	8006c50 <_free_r+0x28>
 8006ca8:	6825      	ldr	r5, [r4, #0]
 8006caa:	1961      	adds	r1, r4, r5
 8006cac:	428b      	cmp	r3, r1
 8006cae:	bf04      	itt	eq
 8006cb0:	6819      	ldreq	r1, [r3, #0]
 8006cb2:	685b      	ldreq	r3, [r3, #4]
 8006cb4:	6063      	str	r3, [r4, #4]
 8006cb6:	bf04      	itt	eq
 8006cb8:	1949      	addeq	r1, r1, r5
 8006cba:	6021      	streq	r1, [r4, #0]
 8006cbc:	6054      	str	r4, [r2, #4]
 8006cbe:	e7c7      	b.n	8006c50 <_free_r+0x28>
 8006cc0:	b003      	add	sp, #12
 8006cc2:	bd30      	pop	{r4, r5, pc}
 8006cc4:	20002238 	.word	0x20002238

08006cc8 <_malloc_r>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	1ccd      	adds	r5, r1, #3
 8006ccc:	f025 0503 	bic.w	r5, r5, #3
 8006cd0:	3508      	adds	r5, #8
 8006cd2:	2d0c      	cmp	r5, #12
 8006cd4:	bf38      	it	cc
 8006cd6:	250c      	movcc	r5, #12
 8006cd8:	2d00      	cmp	r5, #0
 8006cda:	4606      	mov	r6, r0
 8006cdc:	db01      	blt.n	8006ce2 <_malloc_r+0x1a>
 8006cde:	42a9      	cmp	r1, r5
 8006ce0:	d903      	bls.n	8006cea <_malloc_r+0x22>
 8006ce2:	230c      	movs	r3, #12
 8006ce4:	6033      	str	r3, [r6, #0]
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cea:	f000 fa0f 	bl	800710c <__malloc_lock>
 8006cee:	4921      	ldr	r1, [pc, #132]	; (8006d74 <_malloc_r+0xac>)
 8006cf0:	680a      	ldr	r2, [r1, #0]
 8006cf2:	4614      	mov	r4, r2
 8006cf4:	b99c      	cbnz	r4, 8006d1e <_malloc_r+0x56>
 8006cf6:	4f20      	ldr	r7, [pc, #128]	; (8006d78 <_malloc_r+0xb0>)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	b923      	cbnz	r3, 8006d06 <_malloc_r+0x3e>
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	4630      	mov	r0, r6
 8006d00:	f000 f998 	bl	8007034 <_sbrk_r>
 8006d04:	6038      	str	r0, [r7, #0]
 8006d06:	4629      	mov	r1, r5
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f000 f993 	bl	8007034 <_sbrk_r>
 8006d0e:	1c43      	adds	r3, r0, #1
 8006d10:	d123      	bne.n	8006d5a <_malloc_r+0x92>
 8006d12:	230c      	movs	r3, #12
 8006d14:	6033      	str	r3, [r6, #0]
 8006d16:	4630      	mov	r0, r6
 8006d18:	f000 f9fe 	bl	8007118 <__malloc_unlock>
 8006d1c:	e7e3      	b.n	8006ce6 <_malloc_r+0x1e>
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	1b5b      	subs	r3, r3, r5
 8006d22:	d417      	bmi.n	8006d54 <_malloc_r+0x8c>
 8006d24:	2b0b      	cmp	r3, #11
 8006d26:	d903      	bls.n	8006d30 <_malloc_r+0x68>
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	441c      	add	r4, r3
 8006d2c:	6025      	str	r5, [r4, #0]
 8006d2e:	e004      	b.n	8006d3a <_malloc_r+0x72>
 8006d30:	6863      	ldr	r3, [r4, #4]
 8006d32:	42a2      	cmp	r2, r4
 8006d34:	bf0c      	ite	eq
 8006d36:	600b      	streq	r3, [r1, #0]
 8006d38:	6053      	strne	r3, [r2, #4]
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f000 f9ec 	bl	8007118 <__malloc_unlock>
 8006d40:	f104 000b 	add.w	r0, r4, #11
 8006d44:	1d23      	adds	r3, r4, #4
 8006d46:	f020 0007 	bic.w	r0, r0, #7
 8006d4a:	1ac2      	subs	r2, r0, r3
 8006d4c:	d0cc      	beq.n	8006ce8 <_malloc_r+0x20>
 8006d4e:	1a1b      	subs	r3, r3, r0
 8006d50:	50a3      	str	r3, [r4, r2]
 8006d52:	e7c9      	b.n	8006ce8 <_malloc_r+0x20>
 8006d54:	4622      	mov	r2, r4
 8006d56:	6864      	ldr	r4, [r4, #4]
 8006d58:	e7cc      	b.n	8006cf4 <_malloc_r+0x2c>
 8006d5a:	1cc4      	adds	r4, r0, #3
 8006d5c:	f024 0403 	bic.w	r4, r4, #3
 8006d60:	42a0      	cmp	r0, r4
 8006d62:	d0e3      	beq.n	8006d2c <_malloc_r+0x64>
 8006d64:	1a21      	subs	r1, r4, r0
 8006d66:	4630      	mov	r0, r6
 8006d68:	f000 f964 	bl	8007034 <_sbrk_r>
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	d1dd      	bne.n	8006d2c <_malloc_r+0x64>
 8006d70:	e7cf      	b.n	8006d12 <_malloc_r+0x4a>
 8006d72:	bf00      	nop
 8006d74:	20002238 	.word	0x20002238
 8006d78:	2000223c 	.word	0x2000223c

08006d7c <__ssputs_r>:
 8006d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d80:	688e      	ldr	r6, [r1, #8]
 8006d82:	429e      	cmp	r6, r3
 8006d84:	4682      	mov	sl, r0
 8006d86:	460c      	mov	r4, r1
 8006d88:	4690      	mov	r8, r2
 8006d8a:	461f      	mov	r7, r3
 8006d8c:	d838      	bhi.n	8006e00 <__ssputs_r+0x84>
 8006d8e:	898a      	ldrh	r2, [r1, #12]
 8006d90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d94:	d032      	beq.n	8006dfc <__ssputs_r+0x80>
 8006d96:	6825      	ldr	r5, [r4, #0]
 8006d98:	6909      	ldr	r1, [r1, #16]
 8006d9a:	eba5 0901 	sub.w	r9, r5, r1
 8006d9e:	6965      	ldr	r5, [r4, #20]
 8006da0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006da4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006da8:	3301      	adds	r3, #1
 8006daa:	444b      	add	r3, r9
 8006dac:	106d      	asrs	r5, r5, #1
 8006dae:	429d      	cmp	r5, r3
 8006db0:	bf38      	it	cc
 8006db2:	461d      	movcc	r5, r3
 8006db4:	0553      	lsls	r3, r2, #21
 8006db6:	d531      	bpl.n	8006e1c <__ssputs_r+0xa0>
 8006db8:	4629      	mov	r1, r5
 8006dba:	f7ff ff85 	bl	8006cc8 <_malloc_r>
 8006dbe:	4606      	mov	r6, r0
 8006dc0:	b950      	cbnz	r0, 8006dd8 <__ssputs_r+0x5c>
 8006dc2:	230c      	movs	r3, #12
 8006dc4:	f8ca 3000 	str.w	r3, [sl]
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dce:	81a3      	strh	r3, [r4, #12]
 8006dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd8:	6921      	ldr	r1, [r4, #16]
 8006dda:	464a      	mov	r2, r9
 8006ddc:	f7ff fb88 	bl	80064f0 <memcpy>
 8006de0:	89a3      	ldrh	r3, [r4, #12]
 8006de2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dea:	81a3      	strh	r3, [r4, #12]
 8006dec:	6126      	str	r6, [r4, #16]
 8006dee:	6165      	str	r5, [r4, #20]
 8006df0:	444e      	add	r6, r9
 8006df2:	eba5 0509 	sub.w	r5, r5, r9
 8006df6:	6026      	str	r6, [r4, #0]
 8006df8:	60a5      	str	r5, [r4, #8]
 8006dfa:	463e      	mov	r6, r7
 8006dfc:	42be      	cmp	r6, r7
 8006dfe:	d900      	bls.n	8006e02 <__ssputs_r+0x86>
 8006e00:	463e      	mov	r6, r7
 8006e02:	4632      	mov	r2, r6
 8006e04:	6820      	ldr	r0, [r4, #0]
 8006e06:	4641      	mov	r1, r8
 8006e08:	f000 f966 	bl	80070d8 <memmove>
 8006e0c:	68a3      	ldr	r3, [r4, #8]
 8006e0e:	6822      	ldr	r2, [r4, #0]
 8006e10:	1b9b      	subs	r3, r3, r6
 8006e12:	4432      	add	r2, r6
 8006e14:	60a3      	str	r3, [r4, #8]
 8006e16:	6022      	str	r2, [r4, #0]
 8006e18:	2000      	movs	r0, #0
 8006e1a:	e7db      	b.n	8006dd4 <__ssputs_r+0x58>
 8006e1c:	462a      	mov	r2, r5
 8006e1e:	f000 f981 	bl	8007124 <_realloc_r>
 8006e22:	4606      	mov	r6, r0
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d1e1      	bne.n	8006dec <__ssputs_r+0x70>
 8006e28:	6921      	ldr	r1, [r4, #16]
 8006e2a:	4650      	mov	r0, sl
 8006e2c:	f7ff fefc 	bl	8006c28 <_free_r>
 8006e30:	e7c7      	b.n	8006dc2 <__ssputs_r+0x46>
	...

08006e34 <_svfiprintf_r>:
 8006e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e38:	4698      	mov	r8, r3
 8006e3a:	898b      	ldrh	r3, [r1, #12]
 8006e3c:	061b      	lsls	r3, r3, #24
 8006e3e:	b09d      	sub	sp, #116	; 0x74
 8006e40:	4607      	mov	r7, r0
 8006e42:	460d      	mov	r5, r1
 8006e44:	4614      	mov	r4, r2
 8006e46:	d50e      	bpl.n	8006e66 <_svfiprintf_r+0x32>
 8006e48:	690b      	ldr	r3, [r1, #16]
 8006e4a:	b963      	cbnz	r3, 8006e66 <_svfiprintf_r+0x32>
 8006e4c:	2140      	movs	r1, #64	; 0x40
 8006e4e:	f7ff ff3b 	bl	8006cc8 <_malloc_r>
 8006e52:	6028      	str	r0, [r5, #0]
 8006e54:	6128      	str	r0, [r5, #16]
 8006e56:	b920      	cbnz	r0, 8006e62 <_svfiprintf_r+0x2e>
 8006e58:	230c      	movs	r3, #12
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e60:	e0d1      	b.n	8007006 <_svfiprintf_r+0x1d2>
 8006e62:	2340      	movs	r3, #64	; 0x40
 8006e64:	616b      	str	r3, [r5, #20]
 8006e66:	2300      	movs	r3, #0
 8006e68:	9309      	str	r3, [sp, #36]	; 0x24
 8006e6a:	2320      	movs	r3, #32
 8006e6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e70:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e74:	2330      	movs	r3, #48	; 0x30
 8006e76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007020 <_svfiprintf_r+0x1ec>
 8006e7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e7e:	f04f 0901 	mov.w	r9, #1
 8006e82:	4623      	mov	r3, r4
 8006e84:	469a      	mov	sl, r3
 8006e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e8a:	b10a      	cbz	r2, 8006e90 <_svfiprintf_r+0x5c>
 8006e8c:	2a25      	cmp	r2, #37	; 0x25
 8006e8e:	d1f9      	bne.n	8006e84 <_svfiprintf_r+0x50>
 8006e90:	ebba 0b04 	subs.w	fp, sl, r4
 8006e94:	d00b      	beq.n	8006eae <_svfiprintf_r+0x7a>
 8006e96:	465b      	mov	r3, fp
 8006e98:	4622      	mov	r2, r4
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	4638      	mov	r0, r7
 8006e9e:	f7ff ff6d 	bl	8006d7c <__ssputs_r>
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	f000 80aa 	beq.w	8006ffc <_svfiprintf_r+0x1c8>
 8006ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eaa:	445a      	add	r2, fp
 8006eac:	9209      	str	r2, [sp, #36]	; 0x24
 8006eae:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 80a2 	beq.w	8006ffc <_svfiprintf_r+0x1c8>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ec2:	f10a 0a01 	add.w	sl, sl, #1
 8006ec6:	9304      	str	r3, [sp, #16]
 8006ec8:	9307      	str	r3, [sp, #28]
 8006eca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ece:	931a      	str	r3, [sp, #104]	; 0x68
 8006ed0:	4654      	mov	r4, sl
 8006ed2:	2205      	movs	r2, #5
 8006ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed8:	4851      	ldr	r0, [pc, #324]	; (8007020 <_svfiprintf_r+0x1ec>)
 8006eda:	f7f9 f989 	bl	80001f0 <memchr>
 8006ede:	9a04      	ldr	r2, [sp, #16]
 8006ee0:	b9d8      	cbnz	r0, 8006f1a <_svfiprintf_r+0xe6>
 8006ee2:	06d0      	lsls	r0, r2, #27
 8006ee4:	bf44      	itt	mi
 8006ee6:	2320      	movmi	r3, #32
 8006ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eec:	0711      	lsls	r1, r2, #28
 8006eee:	bf44      	itt	mi
 8006ef0:	232b      	movmi	r3, #43	; 0x2b
 8006ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8006efa:	2b2a      	cmp	r3, #42	; 0x2a
 8006efc:	d015      	beq.n	8006f2a <_svfiprintf_r+0xf6>
 8006efe:	9a07      	ldr	r2, [sp, #28]
 8006f00:	4654      	mov	r4, sl
 8006f02:	2000      	movs	r0, #0
 8006f04:	f04f 0c0a 	mov.w	ip, #10
 8006f08:	4621      	mov	r1, r4
 8006f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f0e:	3b30      	subs	r3, #48	; 0x30
 8006f10:	2b09      	cmp	r3, #9
 8006f12:	d94e      	bls.n	8006fb2 <_svfiprintf_r+0x17e>
 8006f14:	b1b0      	cbz	r0, 8006f44 <_svfiprintf_r+0x110>
 8006f16:	9207      	str	r2, [sp, #28]
 8006f18:	e014      	b.n	8006f44 <_svfiprintf_r+0x110>
 8006f1a:	eba0 0308 	sub.w	r3, r0, r8
 8006f1e:	fa09 f303 	lsl.w	r3, r9, r3
 8006f22:	4313      	orrs	r3, r2
 8006f24:	9304      	str	r3, [sp, #16]
 8006f26:	46a2      	mov	sl, r4
 8006f28:	e7d2      	b.n	8006ed0 <_svfiprintf_r+0x9c>
 8006f2a:	9b03      	ldr	r3, [sp, #12]
 8006f2c:	1d19      	adds	r1, r3, #4
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	9103      	str	r1, [sp, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	bfbb      	ittet	lt
 8006f36:	425b      	neglt	r3, r3
 8006f38:	f042 0202 	orrlt.w	r2, r2, #2
 8006f3c:	9307      	strge	r3, [sp, #28]
 8006f3e:	9307      	strlt	r3, [sp, #28]
 8006f40:	bfb8      	it	lt
 8006f42:	9204      	strlt	r2, [sp, #16]
 8006f44:	7823      	ldrb	r3, [r4, #0]
 8006f46:	2b2e      	cmp	r3, #46	; 0x2e
 8006f48:	d10c      	bne.n	8006f64 <_svfiprintf_r+0x130>
 8006f4a:	7863      	ldrb	r3, [r4, #1]
 8006f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f4e:	d135      	bne.n	8006fbc <_svfiprintf_r+0x188>
 8006f50:	9b03      	ldr	r3, [sp, #12]
 8006f52:	1d1a      	adds	r2, r3, #4
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	9203      	str	r2, [sp, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	bfb8      	it	lt
 8006f5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006f60:	3402      	adds	r4, #2
 8006f62:	9305      	str	r3, [sp, #20]
 8006f64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007030 <_svfiprintf_r+0x1fc>
 8006f68:	7821      	ldrb	r1, [r4, #0]
 8006f6a:	2203      	movs	r2, #3
 8006f6c:	4650      	mov	r0, sl
 8006f6e:	f7f9 f93f 	bl	80001f0 <memchr>
 8006f72:	b140      	cbz	r0, 8006f86 <_svfiprintf_r+0x152>
 8006f74:	2340      	movs	r3, #64	; 0x40
 8006f76:	eba0 000a 	sub.w	r0, r0, sl
 8006f7a:	fa03 f000 	lsl.w	r0, r3, r0
 8006f7e:	9b04      	ldr	r3, [sp, #16]
 8006f80:	4303      	orrs	r3, r0
 8006f82:	3401      	adds	r4, #1
 8006f84:	9304      	str	r3, [sp, #16]
 8006f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f8a:	4826      	ldr	r0, [pc, #152]	; (8007024 <_svfiprintf_r+0x1f0>)
 8006f8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f90:	2206      	movs	r2, #6
 8006f92:	f7f9 f92d 	bl	80001f0 <memchr>
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d038      	beq.n	800700c <_svfiprintf_r+0x1d8>
 8006f9a:	4b23      	ldr	r3, [pc, #140]	; (8007028 <_svfiprintf_r+0x1f4>)
 8006f9c:	bb1b      	cbnz	r3, 8006fe6 <_svfiprintf_r+0x1b2>
 8006f9e:	9b03      	ldr	r3, [sp, #12]
 8006fa0:	3307      	adds	r3, #7
 8006fa2:	f023 0307 	bic.w	r3, r3, #7
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	9303      	str	r3, [sp, #12]
 8006faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fac:	4433      	add	r3, r6
 8006fae:	9309      	str	r3, [sp, #36]	; 0x24
 8006fb0:	e767      	b.n	8006e82 <_svfiprintf_r+0x4e>
 8006fb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	2001      	movs	r0, #1
 8006fba:	e7a5      	b.n	8006f08 <_svfiprintf_r+0xd4>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	3401      	adds	r4, #1
 8006fc0:	9305      	str	r3, [sp, #20]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	f04f 0c0a 	mov.w	ip, #10
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fce:	3a30      	subs	r2, #48	; 0x30
 8006fd0:	2a09      	cmp	r2, #9
 8006fd2:	d903      	bls.n	8006fdc <_svfiprintf_r+0x1a8>
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0c5      	beq.n	8006f64 <_svfiprintf_r+0x130>
 8006fd8:	9105      	str	r1, [sp, #20]
 8006fda:	e7c3      	b.n	8006f64 <_svfiprintf_r+0x130>
 8006fdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e7f0      	b.n	8006fc8 <_svfiprintf_r+0x194>
 8006fe6:	ab03      	add	r3, sp, #12
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	462a      	mov	r2, r5
 8006fec:	4b0f      	ldr	r3, [pc, #60]	; (800702c <_svfiprintf_r+0x1f8>)
 8006fee:	a904      	add	r1, sp, #16
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	f7fd fffb 	bl	8004fec <_printf_float>
 8006ff6:	1c42      	adds	r2, r0, #1
 8006ff8:	4606      	mov	r6, r0
 8006ffa:	d1d6      	bne.n	8006faa <_svfiprintf_r+0x176>
 8006ffc:	89ab      	ldrh	r3, [r5, #12]
 8006ffe:	065b      	lsls	r3, r3, #25
 8007000:	f53f af2c 	bmi.w	8006e5c <_svfiprintf_r+0x28>
 8007004:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007006:	b01d      	add	sp, #116	; 0x74
 8007008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700c:	ab03      	add	r3, sp, #12
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	462a      	mov	r2, r5
 8007012:	4b06      	ldr	r3, [pc, #24]	; (800702c <_svfiprintf_r+0x1f8>)
 8007014:	a904      	add	r1, sp, #16
 8007016:	4638      	mov	r0, r7
 8007018:	f7fe fa8c 	bl	8005534 <_printf_i>
 800701c:	e7eb      	b.n	8006ff6 <_svfiprintf_r+0x1c2>
 800701e:	bf00      	nop
 8007020:	08008bfc 	.word	0x08008bfc
 8007024:	08008c06 	.word	0x08008c06
 8007028:	08004fed 	.word	0x08004fed
 800702c:	08006d7d 	.word	0x08006d7d
 8007030:	08008c02 	.word	0x08008c02

08007034 <_sbrk_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	4d06      	ldr	r5, [pc, #24]	; (8007050 <_sbrk_r+0x1c>)
 8007038:	2300      	movs	r3, #0
 800703a:	4604      	mov	r4, r0
 800703c:	4608      	mov	r0, r1
 800703e:	602b      	str	r3, [r5, #0]
 8007040:	f7fb fd00 	bl	8002a44 <_sbrk>
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	d102      	bne.n	800704e <_sbrk_r+0x1a>
 8007048:	682b      	ldr	r3, [r5, #0]
 800704a:	b103      	cbz	r3, 800704e <_sbrk_r+0x1a>
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	bd38      	pop	{r3, r4, r5, pc}
 8007050:	2000259c 	.word	0x2000259c

08007054 <__assert_func>:
 8007054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007056:	4614      	mov	r4, r2
 8007058:	461a      	mov	r2, r3
 800705a:	4b09      	ldr	r3, [pc, #36]	; (8007080 <__assert_func+0x2c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4605      	mov	r5, r0
 8007060:	68d8      	ldr	r0, [r3, #12]
 8007062:	b14c      	cbz	r4, 8007078 <__assert_func+0x24>
 8007064:	4b07      	ldr	r3, [pc, #28]	; (8007084 <__assert_func+0x30>)
 8007066:	9100      	str	r1, [sp, #0]
 8007068:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800706c:	4906      	ldr	r1, [pc, #24]	; (8007088 <__assert_func+0x34>)
 800706e:	462b      	mov	r3, r5
 8007070:	f000 f80e 	bl	8007090 <fiprintf>
 8007074:	f000 faa4 	bl	80075c0 <abort>
 8007078:	4b04      	ldr	r3, [pc, #16]	; (800708c <__assert_func+0x38>)
 800707a:	461c      	mov	r4, r3
 800707c:	e7f3      	b.n	8007066 <__assert_func+0x12>
 800707e:	bf00      	nop
 8007080:	2000201c 	.word	0x2000201c
 8007084:	08008c0d 	.word	0x08008c0d
 8007088:	08008c1a 	.word	0x08008c1a
 800708c:	08008c48 	.word	0x08008c48

08007090 <fiprintf>:
 8007090:	b40e      	push	{r1, r2, r3}
 8007092:	b503      	push	{r0, r1, lr}
 8007094:	4601      	mov	r1, r0
 8007096:	ab03      	add	r3, sp, #12
 8007098:	4805      	ldr	r0, [pc, #20]	; (80070b0 <fiprintf+0x20>)
 800709a:	f853 2b04 	ldr.w	r2, [r3], #4
 800709e:	6800      	ldr	r0, [r0, #0]
 80070a0:	9301      	str	r3, [sp, #4]
 80070a2:	f000 f88f 	bl	80071c4 <_vfiprintf_r>
 80070a6:	b002      	add	sp, #8
 80070a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070ac:	b003      	add	sp, #12
 80070ae:	4770      	bx	lr
 80070b0:	2000201c 	.word	0x2000201c

080070b4 <__ascii_mbtowc>:
 80070b4:	b082      	sub	sp, #8
 80070b6:	b901      	cbnz	r1, 80070ba <__ascii_mbtowc+0x6>
 80070b8:	a901      	add	r1, sp, #4
 80070ba:	b142      	cbz	r2, 80070ce <__ascii_mbtowc+0x1a>
 80070bc:	b14b      	cbz	r3, 80070d2 <__ascii_mbtowc+0x1e>
 80070be:	7813      	ldrb	r3, [r2, #0]
 80070c0:	600b      	str	r3, [r1, #0]
 80070c2:	7812      	ldrb	r2, [r2, #0]
 80070c4:	1e10      	subs	r0, r2, #0
 80070c6:	bf18      	it	ne
 80070c8:	2001      	movne	r0, #1
 80070ca:	b002      	add	sp, #8
 80070cc:	4770      	bx	lr
 80070ce:	4610      	mov	r0, r2
 80070d0:	e7fb      	b.n	80070ca <__ascii_mbtowc+0x16>
 80070d2:	f06f 0001 	mvn.w	r0, #1
 80070d6:	e7f8      	b.n	80070ca <__ascii_mbtowc+0x16>

080070d8 <memmove>:
 80070d8:	4288      	cmp	r0, r1
 80070da:	b510      	push	{r4, lr}
 80070dc:	eb01 0402 	add.w	r4, r1, r2
 80070e0:	d902      	bls.n	80070e8 <memmove+0x10>
 80070e2:	4284      	cmp	r4, r0
 80070e4:	4623      	mov	r3, r4
 80070e6:	d807      	bhi.n	80070f8 <memmove+0x20>
 80070e8:	1e43      	subs	r3, r0, #1
 80070ea:	42a1      	cmp	r1, r4
 80070ec:	d008      	beq.n	8007100 <memmove+0x28>
 80070ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070f6:	e7f8      	b.n	80070ea <memmove+0x12>
 80070f8:	4402      	add	r2, r0
 80070fa:	4601      	mov	r1, r0
 80070fc:	428a      	cmp	r2, r1
 80070fe:	d100      	bne.n	8007102 <memmove+0x2a>
 8007100:	bd10      	pop	{r4, pc}
 8007102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800710a:	e7f7      	b.n	80070fc <memmove+0x24>

0800710c <__malloc_lock>:
 800710c:	4801      	ldr	r0, [pc, #4]	; (8007114 <__malloc_lock+0x8>)
 800710e:	f000 bc17 	b.w	8007940 <__retarget_lock_acquire_recursive>
 8007112:	bf00      	nop
 8007114:	200025a4 	.word	0x200025a4

08007118 <__malloc_unlock>:
 8007118:	4801      	ldr	r0, [pc, #4]	; (8007120 <__malloc_unlock+0x8>)
 800711a:	f000 bc12 	b.w	8007942 <__retarget_lock_release_recursive>
 800711e:	bf00      	nop
 8007120:	200025a4 	.word	0x200025a4

08007124 <_realloc_r>:
 8007124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007126:	4607      	mov	r7, r0
 8007128:	4614      	mov	r4, r2
 800712a:	460e      	mov	r6, r1
 800712c:	b921      	cbnz	r1, 8007138 <_realloc_r+0x14>
 800712e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007132:	4611      	mov	r1, r2
 8007134:	f7ff bdc8 	b.w	8006cc8 <_malloc_r>
 8007138:	b922      	cbnz	r2, 8007144 <_realloc_r+0x20>
 800713a:	f7ff fd75 	bl	8006c28 <_free_r>
 800713e:	4625      	mov	r5, r4
 8007140:	4628      	mov	r0, r5
 8007142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007144:	f000 fc62 	bl	8007a0c <_malloc_usable_size_r>
 8007148:	42a0      	cmp	r0, r4
 800714a:	d20f      	bcs.n	800716c <_realloc_r+0x48>
 800714c:	4621      	mov	r1, r4
 800714e:	4638      	mov	r0, r7
 8007150:	f7ff fdba 	bl	8006cc8 <_malloc_r>
 8007154:	4605      	mov	r5, r0
 8007156:	2800      	cmp	r0, #0
 8007158:	d0f2      	beq.n	8007140 <_realloc_r+0x1c>
 800715a:	4631      	mov	r1, r6
 800715c:	4622      	mov	r2, r4
 800715e:	f7ff f9c7 	bl	80064f0 <memcpy>
 8007162:	4631      	mov	r1, r6
 8007164:	4638      	mov	r0, r7
 8007166:	f7ff fd5f 	bl	8006c28 <_free_r>
 800716a:	e7e9      	b.n	8007140 <_realloc_r+0x1c>
 800716c:	4635      	mov	r5, r6
 800716e:	e7e7      	b.n	8007140 <_realloc_r+0x1c>

08007170 <__sfputc_r>:
 8007170:	6893      	ldr	r3, [r2, #8]
 8007172:	3b01      	subs	r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	b410      	push	{r4}
 8007178:	6093      	str	r3, [r2, #8]
 800717a:	da08      	bge.n	800718e <__sfputc_r+0x1e>
 800717c:	6994      	ldr	r4, [r2, #24]
 800717e:	42a3      	cmp	r3, r4
 8007180:	db01      	blt.n	8007186 <__sfputc_r+0x16>
 8007182:	290a      	cmp	r1, #10
 8007184:	d103      	bne.n	800718e <__sfputc_r+0x1e>
 8007186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800718a:	f000 b94b 	b.w	8007424 <__swbuf_r>
 800718e:	6813      	ldr	r3, [r2, #0]
 8007190:	1c58      	adds	r0, r3, #1
 8007192:	6010      	str	r0, [r2, #0]
 8007194:	7019      	strb	r1, [r3, #0]
 8007196:	4608      	mov	r0, r1
 8007198:	f85d 4b04 	ldr.w	r4, [sp], #4
 800719c:	4770      	bx	lr

0800719e <__sfputs_r>:
 800719e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a0:	4606      	mov	r6, r0
 80071a2:	460f      	mov	r7, r1
 80071a4:	4614      	mov	r4, r2
 80071a6:	18d5      	adds	r5, r2, r3
 80071a8:	42ac      	cmp	r4, r5
 80071aa:	d101      	bne.n	80071b0 <__sfputs_r+0x12>
 80071ac:	2000      	movs	r0, #0
 80071ae:	e007      	b.n	80071c0 <__sfputs_r+0x22>
 80071b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b4:	463a      	mov	r2, r7
 80071b6:	4630      	mov	r0, r6
 80071b8:	f7ff ffda 	bl	8007170 <__sfputc_r>
 80071bc:	1c43      	adds	r3, r0, #1
 80071be:	d1f3      	bne.n	80071a8 <__sfputs_r+0xa>
 80071c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071c4 <_vfiprintf_r>:
 80071c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c8:	460d      	mov	r5, r1
 80071ca:	b09d      	sub	sp, #116	; 0x74
 80071cc:	4614      	mov	r4, r2
 80071ce:	4698      	mov	r8, r3
 80071d0:	4606      	mov	r6, r0
 80071d2:	b118      	cbz	r0, 80071dc <_vfiprintf_r+0x18>
 80071d4:	6983      	ldr	r3, [r0, #24]
 80071d6:	b90b      	cbnz	r3, 80071dc <_vfiprintf_r+0x18>
 80071d8:	f000 fb14 	bl	8007804 <__sinit>
 80071dc:	4b89      	ldr	r3, [pc, #548]	; (8007404 <_vfiprintf_r+0x240>)
 80071de:	429d      	cmp	r5, r3
 80071e0:	d11b      	bne.n	800721a <_vfiprintf_r+0x56>
 80071e2:	6875      	ldr	r5, [r6, #4]
 80071e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071e6:	07d9      	lsls	r1, r3, #31
 80071e8:	d405      	bmi.n	80071f6 <_vfiprintf_r+0x32>
 80071ea:	89ab      	ldrh	r3, [r5, #12]
 80071ec:	059a      	lsls	r2, r3, #22
 80071ee:	d402      	bmi.n	80071f6 <_vfiprintf_r+0x32>
 80071f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071f2:	f000 fba5 	bl	8007940 <__retarget_lock_acquire_recursive>
 80071f6:	89ab      	ldrh	r3, [r5, #12]
 80071f8:	071b      	lsls	r3, r3, #28
 80071fa:	d501      	bpl.n	8007200 <_vfiprintf_r+0x3c>
 80071fc:	692b      	ldr	r3, [r5, #16]
 80071fe:	b9eb      	cbnz	r3, 800723c <_vfiprintf_r+0x78>
 8007200:	4629      	mov	r1, r5
 8007202:	4630      	mov	r0, r6
 8007204:	f000 f96e 	bl	80074e4 <__swsetup_r>
 8007208:	b1c0      	cbz	r0, 800723c <_vfiprintf_r+0x78>
 800720a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800720c:	07dc      	lsls	r4, r3, #31
 800720e:	d50e      	bpl.n	800722e <_vfiprintf_r+0x6a>
 8007210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007214:	b01d      	add	sp, #116	; 0x74
 8007216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721a:	4b7b      	ldr	r3, [pc, #492]	; (8007408 <_vfiprintf_r+0x244>)
 800721c:	429d      	cmp	r5, r3
 800721e:	d101      	bne.n	8007224 <_vfiprintf_r+0x60>
 8007220:	68b5      	ldr	r5, [r6, #8]
 8007222:	e7df      	b.n	80071e4 <_vfiprintf_r+0x20>
 8007224:	4b79      	ldr	r3, [pc, #484]	; (800740c <_vfiprintf_r+0x248>)
 8007226:	429d      	cmp	r5, r3
 8007228:	bf08      	it	eq
 800722a:	68f5      	ldreq	r5, [r6, #12]
 800722c:	e7da      	b.n	80071e4 <_vfiprintf_r+0x20>
 800722e:	89ab      	ldrh	r3, [r5, #12]
 8007230:	0598      	lsls	r0, r3, #22
 8007232:	d4ed      	bmi.n	8007210 <_vfiprintf_r+0x4c>
 8007234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007236:	f000 fb84 	bl	8007942 <__retarget_lock_release_recursive>
 800723a:	e7e9      	b.n	8007210 <_vfiprintf_r+0x4c>
 800723c:	2300      	movs	r3, #0
 800723e:	9309      	str	r3, [sp, #36]	; 0x24
 8007240:	2320      	movs	r3, #32
 8007242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007246:	f8cd 800c 	str.w	r8, [sp, #12]
 800724a:	2330      	movs	r3, #48	; 0x30
 800724c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007410 <_vfiprintf_r+0x24c>
 8007250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007254:	f04f 0901 	mov.w	r9, #1
 8007258:	4623      	mov	r3, r4
 800725a:	469a      	mov	sl, r3
 800725c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007260:	b10a      	cbz	r2, 8007266 <_vfiprintf_r+0xa2>
 8007262:	2a25      	cmp	r2, #37	; 0x25
 8007264:	d1f9      	bne.n	800725a <_vfiprintf_r+0x96>
 8007266:	ebba 0b04 	subs.w	fp, sl, r4
 800726a:	d00b      	beq.n	8007284 <_vfiprintf_r+0xc0>
 800726c:	465b      	mov	r3, fp
 800726e:	4622      	mov	r2, r4
 8007270:	4629      	mov	r1, r5
 8007272:	4630      	mov	r0, r6
 8007274:	f7ff ff93 	bl	800719e <__sfputs_r>
 8007278:	3001      	adds	r0, #1
 800727a:	f000 80aa 	beq.w	80073d2 <_vfiprintf_r+0x20e>
 800727e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007280:	445a      	add	r2, fp
 8007282:	9209      	str	r2, [sp, #36]	; 0x24
 8007284:	f89a 3000 	ldrb.w	r3, [sl]
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 80a2 	beq.w	80073d2 <_vfiprintf_r+0x20e>
 800728e:	2300      	movs	r3, #0
 8007290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007298:	f10a 0a01 	add.w	sl, sl, #1
 800729c:	9304      	str	r3, [sp, #16]
 800729e:	9307      	str	r3, [sp, #28]
 80072a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072a4:	931a      	str	r3, [sp, #104]	; 0x68
 80072a6:	4654      	mov	r4, sl
 80072a8:	2205      	movs	r2, #5
 80072aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ae:	4858      	ldr	r0, [pc, #352]	; (8007410 <_vfiprintf_r+0x24c>)
 80072b0:	f7f8 ff9e 	bl	80001f0 <memchr>
 80072b4:	9a04      	ldr	r2, [sp, #16]
 80072b6:	b9d8      	cbnz	r0, 80072f0 <_vfiprintf_r+0x12c>
 80072b8:	06d1      	lsls	r1, r2, #27
 80072ba:	bf44      	itt	mi
 80072bc:	2320      	movmi	r3, #32
 80072be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072c2:	0713      	lsls	r3, r2, #28
 80072c4:	bf44      	itt	mi
 80072c6:	232b      	movmi	r3, #43	; 0x2b
 80072c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072cc:	f89a 3000 	ldrb.w	r3, [sl]
 80072d0:	2b2a      	cmp	r3, #42	; 0x2a
 80072d2:	d015      	beq.n	8007300 <_vfiprintf_r+0x13c>
 80072d4:	9a07      	ldr	r2, [sp, #28]
 80072d6:	4654      	mov	r4, sl
 80072d8:	2000      	movs	r0, #0
 80072da:	f04f 0c0a 	mov.w	ip, #10
 80072de:	4621      	mov	r1, r4
 80072e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072e4:	3b30      	subs	r3, #48	; 0x30
 80072e6:	2b09      	cmp	r3, #9
 80072e8:	d94e      	bls.n	8007388 <_vfiprintf_r+0x1c4>
 80072ea:	b1b0      	cbz	r0, 800731a <_vfiprintf_r+0x156>
 80072ec:	9207      	str	r2, [sp, #28]
 80072ee:	e014      	b.n	800731a <_vfiprintf_r+0x156>
 80072f0:	eba0 0308 	sub.w	r3, r0, r8
 80072f4:	fa09 f303 	lsl.w	r3, r9, r3
 80072f8:	4313      	orrs	r3, r2
 80072fa:	9304      	str	r3, [sp, #16]
 80072fc:	46a2      	mov	sl, r4
 80072fe:	e7d2      	b.n	80072a6 <_vfiprintf_r+0xe2>
 8007300:	9b03      	ldr	r3, [sp, #12]
 8007302:	1d19      	adds	r1, r3, #4
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	9103      	str	r1, [sp, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	bfbb      	ittet	lt
 800730c:	425b      	neglt	r3, r3
 800730e:	f042 0202 	orrlt.w	r2, r2, #2
 8007312:	9307      	strge	r3, [sp, #28]
 8007314:	9307      	strlt	r3, [sp, #28]
 8007316:	bfb8      	it	lt
 8007318:	9204      	strlt	r2, [sp, #16]
 800731a:	7823      	ldrb	r3, [r4, #0]
 800731c:	2b2e      	cmp	r3, #46	; 0x2e
 800731e:	d10c      	bne.n	800733a <_vfiprintf_r+0x176>
 8007320:	7863      	ldrb	r3, [r4, #1]
 8007322:	2b2a      	cmp	r3, #42	; 0x2a
 8007324:	d135      	bne.n	8007392 <_vfiprintf_r+0x1ce>
 8007326:	9b03      	ldr	r3, [sp, #12]
 8007328:	1d1a      	adds	r2, r3, #4
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	9203      	str	r2, [sp, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	bfb8      	it	lt
 8007332:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007336:	3402      	adds	r4, #2
 8007338:	9305      	str	r3, [sp, #20]
 800733a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007420 <_vfiprintf_r+0x25c>
 800733e:	7821      	ldrb	r1, [r4, #0]
 8007340:	2203      	movs	r2, #3
 8007342:	4650      	mov	r0, sl
 8007344:	f7f8 ff54 	bl	80001f0 <memchr>
 8007348:	b140      	cbz	r0, 800735c <_vfiprintf_r+0x198>
 800734a:	2340      	movs	r3, #64	; 0x40
 800734c:	eba0 000a 	sub.w	r0, r0, sl
 8007350:	fa03 f000 	lsl.w	r0, r3, r0
 8007354:	9b04      	ldr	r3, [sp, #16]
 8007356:	4303      	orrs	r3, r0
 8007358:	3401      	adds	r4, #1
 800735a:	9304      	str	r3, [sp, #16]
 800735c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007360:	482c      	ldr	r0, [pc, #176]	; (8007414 <_vfiprintf_r+0x250>)
 8007362:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007366:	2206      	movs	r2, #6
 8007368:	f7f8 ff42 	bl	80001f0 <memchr>
 800736c:	2800      	cmp	r0, #0
 800736e:	d03f      	beq.n	80073f0 <_vfiprintf_r+0x22c>
 8007370:	4b29      	ldr	r3, [pc, #164]	; (8007418 <_vfiprintf_r+0x254>)
 8007372:	bb1b      	cbnz	r3, 80073bc <_vfiprintf_r+0x1f8>
 8007374:	9b03      	ldr	r3, [sp, #12]
 8007376:	3307      	adds	r3, #7
 8007378:	f023 0307 	bic.w	r3, r3, #7
 800737c:	3308      	adds	r3, #8
 800737e:	9303      	str	r3, [sp, #12]
 8007380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007382:	443b      	add	r3, r7
 8007384:	9309      	str	r3, [sp, #36]	; 0x24
 8007386:	e767      	b.n	8007258 <_vfiprintf_r+0x94>
 8007388:	fb0c 3202 	mla	r2, ip, r2, r3
 800738c:	460c      	mov	r4, r1
 800738e:	2001      	movs	r0, #1
 8007390:	e7a5      	b.n	80072de <_vfiprintf_r+0x11a>
 8007392:	2300      	movs	r3, #0
 8007394:	3401      	adds	r4, #1
 8007396:	9305      	str	r3, [sp, #20]
 8007398:	4619      	mov	r1, r3
 800739a:	f04f 0c0a 	mov.w	ip, #10
 800739e:	4620      	mov	r0, r4
 80073a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073a4:	3a30      	subs	r2, #48	; 0x30
 80073a6:	2a09      	cmp	r2, #9
 80073a8:	d903      	bls.n	80073b2 <_vfiprintf_r+0x1ee>
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0c5      	beq.n	800733a <_vfiprintf_r+0x176>
 80073ae:	9105      	str	r1, [sp, #20]
 80073b0:	e7c3      	b.n	800733a <_vfiprintf_r+0x176>
 80073b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80073b6:	4604      	mov	r4, r0
 80073b8:	2301      	movs	r3, #1
 80073ba:	e7f0      	b.n	800739e <_vfiprintf_r+0x1da>
 80073bc:	ab03      	add	r3, sp, #12
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	462a      	mov	r2, r5
 80073c2:	4b16      	ldr	r3, [pc, #88]	; (800741c <_vfiprintf_r+0x258>)
 80073c4:	a904      	add	r1, sp, #16
 80073c6:	4630      	mov	r0, r6
 80073c8:	f7fd fe10 	bl	8004fec <_printf_float>
 80073cc:	4607      	mov	r7, r0
 80073ce:	1c78      	adds	r0, r7, #1
 80073d0:	d1d6      	bne.n	8007380 <_vfiprintf_r+0x1bc>
 80073d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073d4:	07d9      	lsls	r1, r3, #31
 80073d6:	d405      	bmi.n	80073e4 <_vfiprintf_r+0x220>
 80073d8:	89ab      	ldrh	r3, [r5, #12]
 80073da:	059a      	lsls	r2, r3, #22
 80073dc:	d402      	bmi.n	80073e4 <_vfiprintf_r+0x220>
 80073de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073e0:	f000 faaf 	bl	8007942 <__retarget_lock_release_recursive>
 80073e4:	89ab      	ldrh	r3, [r5, #12]
 80073e6:	065b      	lsls	r3, r3, #25
 80073e8:	f53f af12 	bmi.w	8007210 <_vfiprintf_r+0x4c>
 80073ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073ee:	e711      	b.n	8007214 <_vfiprintf_r+0x50>
 80073f0:	ab03      	add	r3, sp, #12
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	462a      	mov	r2, r5
 80073f6:	4b09      	ldr	r3, [pc, #36]	; (800741c <_vfiprintf_r+0x258>)
 80073f8:	a904      	add	r1, sp, #16
 80073fa:	4630      	mov	r0, r6
 80073fc:	f7fe f89a 	bl	8005534 <_printf_i>
 8007400:	e7e4      	b.n	80073cc <_vfiprintf_r+0x208>
 8007402:	bf00      	nop
 8007404:	08008d74 	.word	0x08008d74
 8007408:	08008d94 	.word	0x08008d94
 800740c:	08008d54 	.word	0x08008d54
 8007410:	08008bfc 	.word	0x08008bfc
 8007414:	08008c06 	.word	0x08008c06
 8007418:	08004fed 	.word	0x08004fed
 800741c:	0800719f 	.word	0x0800719f
 8007420:	08008c02 	.word	0x08008c02

08007424 <__swbuf_r>:
 8007424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007426:	460e      	mov	r6, r1
 8007428:	4614      	mov	r4, r2
 800742a:	4605      	mov	r5, r0
 800742c:	b118      	cbz	r0, 8007436 <__swbuf_r+0x12>
 800742e:	6983      	ldr	r3, [r0, #24]
 8007430:	b90b      	cbnz	r3, 8007436 <__swbuf_r+0x12>
 8007432:	f000 f9e7 	bl	8007804 <__sinit>
 8007436:	4b21      	ldr	r3, [pc, #132]	; (80074bc <__swbuf_r+0x98>)
 8007438:	429c      	cmp	r4, r3
 800743a:	d12b      	bne.n	8007494 <__swbuf_r+0x70>
 800743c:	686c      	ldr	r4, [r5, #4]
 800743e:	69a3      	ldr	r3, [r4, #24]
 8007440:	60a3      	str	r3, [r4, #8]
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	071a      	lsls	r2, r3, #28
 8007446:	d52f      	bpl.n	80074a8 <__swbuf_r+0x84>
 8007448:	6923      	ldr	r3, [r4, #16]
 800744a:	b36b      	cbz	r3, 80074a8 <__swbuf_r+0x84>
 800744c:	6923      	ldr	r3, [r4, #16]
 800744e:	6820      	ldr	r0, [r4, #0]
 8007450:	1ac0      	subs	r0, r0, r3
 8007452:	6963      	ldr	r3, [r4, #20]
 8007454:	b2f6      	uxtb	r6, r6
 8007456:	4283      	cmp	r3, r0
 8007458:	4637      	mov	r7, r6
 800745a:	dc04      	bgt.n	8007466 <__swbuf_r+0x42>
 800745c:	4621      	mov	r1, r4
 800745e:	4628      	mov	r0, r5
 8007460:	f000 f93c 	bl	80076dc <_fflush_r>
 8007464:	bb30      	cbnz	r0, 80074b4 <__swbuf_r+0x90>
 8007466:	68a3      	ldr	r3, [r4, #8]
 8007468:	3b01      	subs	r3, #1
 800746a:	60a3      	str	r3, [r4, #8]
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	1c5a      	adds	r2, r3, #1
 8007470:	6022      	str	r2, [r4, #0]
 8007472:	701e      	strb	r6, [r3, #0]
 8007474:	6963      	ldr	r3, [r4, #20]
 8007476:	3001      	adds	r0, #1
 8007478:	4283      	cmp	r3, r0
 800747a:	d004      	beq.n	8007486 <__swbuf_r+0x62>
 800747c:	89a3      	ldrh	r3, [r4, #12]
 800747e:	07db      	lsls	r3, r3, #31
 8007480:	d506      	bpl.n	8007490 <__swbuf_r+0x6c>
 8007482:	2e0a      	cmp	r6, #10
 8007484:	d104      	bne.n	8007490 <__swbuf_r+0x6c>
 8007486:	4621      	mov	r1, r4
 8007488:	4628      	mov	r0, r5
 800748a:	f000 f927 	bl	80076dc <_fflush_r>
 800748e:	b988      	cbnz	r0, 80074b4 <__swbuf_r+0x90>
 8007490:	4638      	mov	r0, r7
 8007492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007494:	4b0a      	ldr	r3, [pc, #40]	; (80074c0 <__swbuf_r+0x9c>)
 8007496:	429c      	cmp	r4, r3
 8007498:	d101      	bne.n	800749e <__swbuf_r+0x7a>
 800749a:	68ac      	ldr	r4, [r5, #8]
 800749c:	e7cf      	b.n	800743e <__swbuf_r+0x1a>
 800749e:	4b09      	ldr	r3, [pc, #36]	; (80074c4 <__swbuf_r+0xa0>)
 80074a0:	429c      	cmp	r4, r3
 80074a2:	bf08      	it	eq
 80074a4:	68ec      	ldreq	r4, [r5, #12]
 80074a6:	e7ca      	b.n	800743e <__swbuf_r+0x1a>
 80074a8:	4621      	mov	r1, r4
 80074aa:	4628      	mov	r0, r5
 80074ac:	f000 f81a 	bl	80074e4 <__swsetup_r>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	d0cb      	beq.n	800744c <__swbuf_r+0x28>
 80074b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80074b8:	e7ea      	b.n	8007490 <__swbuf_r+0x6c>
 80074ba:	bf00      	nop
 80074bc:	08008d74 	.word	0x08008d74
 80074c0:	08008d94 	.word	0x08008d94
 80074c4:	08008d54 	.word	0x08008d54

080074c8 <__ascii_wctomb>:
 80074c8:	b149      	cbz	r1, 80074de <__ascii_wctomb+0x16>
 80074ca:	2aff      	cmp	r2, #255	; 0xff
 80074cc:	bf85      	ittet	hi
 80074ce:	238a      	movhi	r3, #138	; 0x8a
 80074d0:	6003      	strhi	r3, [r0, #0]
 80074d2:	700a      	strbls	r2, [r1, #0]
 80074d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80074d8:	bf98      	it	ls
 80074da:	2001      	movls	r0, #1
 80074dc:	4770      	bx	lr
 80074de:	4608      	mov	r0, r1
 80074e0:	4770      	bx	lr
	...

080074e4 <__swsetup_r>:
 80074e4:	4b32      	ldr	r3, [pc, #200]	; (80075b0 <__swsetup_r+0xcc>)
 80074e6:	b570      	push	{r4, r5, r6, lr}
 80074e8:	681d      	ldr	r5, [r3, #0]
 80074ea:	4606      	mov	r6, r0
 80074ec:	460c      	mov	r4, r1
 80074ee:	b125      	cbz	r5, 80074fa <__swsetup_r+0x16>
 80074f0:	69ab      	ldr	r3, [r5, #24]
 80074f2:	b913      	cbnz	r3, 80074fa <__swsetup_r+0x16>
 80074f4:	4628      	mov	r0, r5
 80074f6:	f000 f985 	bl	8007804 <__sinit>
 80074fa:	4b2e      	ldr	r3, [pc, #184]	; (80075b4 <__swsetup_r+0xd0>)
 80074fc:	429c      	cmp	r4, r3
 80074fe:	d10f      	bne.n	8007520 <__swsetup_r+0x3c>
 8007500:	686c      	ldr	r4, [r5, #4]
 8007502:	89a3      	ldrh	r3, [r4, #12]
 8007504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007508:	0719      	lsls	r1, r3, #28
 800750a:	d42c      	bmi.n	8007566 <__swsetup_r+0x82>
 800750c:	06dd      	lsls	r5, r3, #27
 800750e:	d411      	bmi.n	8007534 <__swsetup_r+0x50>
 8007510:	2309      	movs	r3, #9
 8007512:	6033      	str	r3, [r6, #0]
 8007514:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007518:	81a3      	strh	r3, [r4, #12]
 800751a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800751e:	e03e      	b.n	800759e <__swsetup_r+0xba>
 8007520:	4b25      	ldr	r3, [pc, #148]	; (80075b8 <__swsetup_r+0xd4>)
 8007522:	429c      	cmp	r4, r3
 8007524:	d101      	bne.n	800752a <__swsetup_r+0x46>
 8007526:	68ac      	ldr	r4, [r5, #8]
 8007528:	e7eb      	b.n	8007502 <__swsetup_r+0x1e>
 800752a:	4b24      	ldr	r3, [pc, #144]	; (80075bc <__swsetup_r+0xd8>)
 800752c:	429c      	cmp	r4, r3
 800752e:	bf08      	it	eq
 8007530:	68ec      	ldreq	r4, [r5, #12]
 8007532:	e7e6      	b.n	8007502 <__swsetup_r+0x1e>
 8007534:	0758      	lsls	r0, r3, #29
 8007536:	d512      	bpl.n	800755e <__swsetup_r+0x7a>
 8007538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800753a:	b141      	cbz	r1, 800754e <__swsetup_r+0x6a>
 800753c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007540:	4299      	cmp	r1, r3
 8007542:	d002      	beq.n	800754a <__swsetup_r+0x66>
 8007544:	4630      	mov	r0, r6
 8007546:	f7ff fb6f 	bl	8006c28 <_free_r>
 800754a:	2300      	movs	r3, #0
 800754c:	6363      	str	r3, [r4, #52]	; 0x34
 800754e:	89a3      	ldrh	r3, [r4, #12]
 8007550:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007554:	81a3      	strh	r3, [r4, #12]
 8007556:	2300      	movs	r3, #0
 8007558:	6063      	str	r3, [r4, #4]
 800755a:	6923      	ldr	r3, [r4, #16]
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	89a3      	ldrh	r3, [r4, #12]
 8007560:	f043 0308 	orr.w	r3, r3, #8
 8007564:	81a3      	strh	r3, [r4, #12]
 8007566:	6923      	ldr	r3, [r4, #16]
 8007568:	b94b      	cbnz	r3, 800757e <__swsetup_r+0x9a>
 800756a:	89a3      	ldrh	r3, [r4, #12]
 800756c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007574:	d003      	beq.n	800757e <__swsetup_r+0x9a>
 8007576:	4621      	mov	r1, r4
 8007578:	4630      	mov	r0, r6
 800757a:	f000 fa07 	bl	800798c <__smakebuf_r>
 800757e:	89a0      	ldrh	r0, [r4, #12]
 8007580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007584:	f010 0301 	ands.w	r3, r0, #1
 8007588:	d00a      	beq.n	80075a0 <__swsetup_r+0xbc>
 800758a:	2300      	movs	r3, #0
 800758c:	60a3      	str	r3, [r4, #8]
 800758e:	6963      	ldr	r3, [r4, #20]
 8007590:	425b      	negs	r3, r3
 8007592:	61a3      	str	r3, [r4, #24]
 8007594:	6923      	ldr	r3, [r4, #16]
 8007596:	b943      	cbnz	r3, 80075aa <__swsetup_r+0xc6>
 8007598:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800759c:	d1ba      	bne.n	8007514 <__swsetup_r+0x30>
 800759e:	bd70      	pop	{r4, r5, r6, pc}
 80075a0:	0781      	lsls	r1, r0, #30
 80075a2:	bf58      	it	pl
 80075a4:	6963      	ldrpl	r3, [r4, #20]
 80075a6:	60a3      	str	r3, [r4, #8]
 80075a8:	e7f4      	b.n	8007594 <__swsetup_r+0xb0>
 80075aa:	2000      	movs	r0, #0
 80075ac:	e7f7      	b.n	800759e <__swsetup_r+0xba>
 80075ae:	bf00      	nop
 80075b0:	2000201c 	.word	0x2000201c
 80075b4:	08008d74 	.word	0x08008d74
 80075b8:	08008d94 	.word	0x08008d94
 80075bc:	08008d54 	.word	0x08008d54

080075c0 <abort>:
 80075c0:	b508      	push	{r3, lr}
 80075c2:	2006      	movs	r0, #6
 80075c4:	f000 fa52 	bl	8007a6c <raise>
 80075c8:	2001      	movs	r0, #1
 80075ca:	f7fb f9c3 	bl	8002954 <_exit>
	...

080075d0 <__sflush_r>:
 80075d0:	898a      	ldrh	r2, [r1, #12]
 80075d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d6:	4605      	mov	r5, r0
 80075d8:	0710      	lsls	r0, r2, #28
 80075da:	460c      	mov	r4, r1
 80075dc:	d458      	bmi.n	8007690 <__sflush_r+0xc0>
 80075de:	684b      	ldr	r3, [r1, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	dc05      	bgt.n	80075f0 <__sflush_r+0x20>
 80075e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	dc02      	bgt.n	80075f0 <__sflush_r+0x20>
 80075ea:	2000      	movs	r0, #0
 80075ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075f2:	2e00      	cmp	r6, #0
 80075f4:	d0f9      	beq.n	80075ea <__sflush_r+0x1a>
 80075f6:	2300      	movs	r3, #0
 80075f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075fc:	682f      	ldr	r7, [r5, #0]
 80075fe:	602b      	str	r3, [r5, #0]
 8007600:	d032      	beq.n	8007668 <__sflush_r+0x98>
 8007602:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007604:	89a3      	ldrh	r3, [r4, #12]
 8007606:	075a      	lsls	r2, r3, #29
 8007608:	d505      	bpl.n	8007616 <__sflush_r+0x46>
 800760a:	6863      	ldr	r3, [r4, #4]
 800760c:	1ac0      	subs	r0, r0, r3
 800760e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007610:	b10b      	cbz	r3, 8007616 <__sflush_r+0x46>
 8007612:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007614:	1ac0      	subs	r0, r0, r3
 8007616:	2300      	movs	r3, #0
 8007618:	4602      	mov	r2, r0
 800761a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800761c:	6a21      	ldr	r1, [r4, #32]
 800761e:	4628      	mov	r0, r5
 8007620:	47b0      	blx	r6
 8007622:	1c43      	adds	r3, r0, #1
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	d106      	bne.n	8007636 <__sflush_r+0x66>
 8007628:	6829      	ldr	r1, [r5, #0]
 800762a:	291d      	cmp	r1, #29
 800762c:	d82c      	bhi.n	8007688 <__sflush_r+0xb8>
 800762e:	4a2a      	ldr	r2, [pc, #168]	; (80076d8 <__sflush_r+0x108>)
 8007630:	40ca      	lsrs	r2, r1
 8007632:	07d6      	lsls	r6, r2, #31
 8007634:	d528      	bpl.n	8007688 <__sflush_r+0xb8>
 8007636:	2200      	movs	r2, #0
 8007638:	6062      	str	r2, [r4, #4]
 800763a:	04d9      	lsls	r1, r3, #19
 800763c:	6922      	ldr	r2, [r4, #16]
 800763e:	6022      	str	r2, [r4, #0]
 8007640:	d504      	bpl.n	800764c <__sflush_r+0x7c>
 8007642:	1c42      	adds	r2, r0, #1
 8007644:	d101      	bne.n	800764a <__sflush_r+0x7a>
 8007646:	682b      	ldr	r3, [r5, #0]
 8007648:	b903      	cbnz	r3, 800764c <__sflush_r+0x7c>
 800764a:	6560      	str	r0, [r4, #84]	; 0x54
 800764c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800764e:	602f      	str	r7, [r5, #0]
 8007650:	2900      	cmp	r1, #0
 8007652:	d0ca      	beq.n	80075ea <__sflush_r+0x1a>
 8007654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007658:	4299      	cmp	r1, r3
 800765a:	d002      	beq.n	8007662 <__sflush_r+0x92>
 800765c:	4628      	mov	r0, r5
 800765e:	f7ff fae3 	bl	8006c28 <_free_r>
 8007662:	2000      	movs	r0, #0
 8007664:	6360      	str	r0, [r4, #52]	; 0x34
 8007666:	e7c1      	b.n	80075ec <__sflush_r+0x1c>
 8007668:	6a21      	ldr	r1, [r4, #32]
 800766a:	2301      	movs	r3, #1
 800766c:	4628      	mov	r0, r5
 800766e:	47b0      	blx	r6
 8007670:	1c41      	adds	r1, r0, #1
 8007672:	d1c7      	bne.n	8007604 <__sflush_r+0x34>
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0c4      	beq.n	8007604 <__sflush_r+0x34>
 800767a:	2b1d      	cmp	r3, #29
 800767c:	d001      	beq.n	8007682 <__sflush_r+0xb2>
 800767e:	2b16      	cmp	r3, #22
 8007680:	d101      	bne.n	8007686 <__sflush_r+0xb6>
 8007682:	602f      	str	r7, [r5, #0]
 8007684:	e7b1      	b.n	80075ea <__sflush_r+0x1a>
 8007686:	89a3      	ldrh	r3, [r4, #12]
 8007688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800768c:	81a3      	strh	r3, [r4, #12]
 800768e:	e7ad      	b.n	80075ec <__sflush_r+0x1c>
 8007690:	690f      	ldr	r7, [r1, #16]
 8007692:	2f00      	cmp	r7, #0
 8007694:	d0a9      	beq.n	80075ea <__sflush_r+0x1a>
 8007696:	0793      	lsls	r3, r2, #30
 8007698:	680e      	ldr	r6, [r1, #0]
 800769a:	bf08      	it	eq
 800769c:	694b      	ldreq	r3, [r1, #20]
 800769e:	600f      	str	r7, [r1, #0]
 80076a0:	bf18      	it	ne
 80076a2:	2300      	movne	r3, #0
 80076a4:	eba6 0807 	sub.w	r8, r6, r7
 80076a8:	608b      	str	r3, [r1, #8]
 80076aa:	f1b8 0f00 	cmp.w	r8, #0
 80076ae:	dd9c      	ble.n	80075ea <__sflush_r+0x1a>
 80076b0:	6a21      	ldr	r1, [r4, #32]
 80076b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076b4:	4643      	mov	r3, r8
 80076b6:	463a      	mov	r2, r7
 80076b8:	4628      	mov	r0, r5
 80076ba:	47b0      	blx	r6
 80076bc:	2800      	cmp	r0, #0
 80076be:	dc06      	bgt.n	80076ce <__sflush_r+0xfe>
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c6:	81a3      	strh	r3, [r4, #12]
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076cc:	e78e      	b.n	80075ec <__sflush_r+0x1c>
 80076ce:	4407      	add	r7, r0
 80076d0:	eba8 0800 	sub.w	r8, r8, r0
 80076d4:	e7e9      	b.n	80076aa <__sflush_r+0xda>
 80076d6:	bf00      	nop
 80076d8:	20400001 	.word	0x20400001

080076dc <_fflush_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	690b      	ldr	r3, [r1, #16]
 80076e0:	4605      	mov	r5, r0
 80076e2:	460c      	mov	r4, r1
 80076e4:	b913      	cbnz	r3, 80076ec <_fflush_r+0x10>
 80076e6:	2500      	movs	r5, #0
 80076e8:	4628      	mov	r0, r5
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	b118      	cbz	r0, 80076f6 <_fflush_r+0x1a>
 80076ee:	6983      	ldr	r3, [r0, #24]
 80076f0:	b90b      	cbnz	r3, 80076f6 <_fflush_r+0x1a>
 80076f2:	f000 f887 	bl	8007804 <__sinit>
 80076f6:	4b14      	ldr	r3, [pc, #80]	; (8007748 <_fflush_r+0x6c>)
 80076f8:	429c      	cmp	r4, r3
 80076fa:	d11b      	bne.n	8007734 <_fflush_r+0x58>
 80076fc:	686c      	ldr	r4, [r5, #4]
 80076fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d0ef      	beq.n	80076e6 <_fflush_r+0xa>
 8007706:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007708:	07d0      	lsls	r0, r2, #31
 800770a:	d404      	bmi.n	8007716 <_fflush_r+0x3a>
 800770c:	0599      	lsls	r1, r3, #22
 800770e:	d402      	bmi.n	8007716 <_fflush_r+0x3a>
 8007710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007712:	f000 f915 	bl	8007940 <__retarget_lock_acquire_recursive>
 8007716:	4628      	mov	r0, r5
 8007718:	4621      	mov	r1, r4
 800771a:	f7ff ff59 	bl	80075d0 <__sflush_r>
 800771e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007720:	07da      	lsls	r2, r3, #31
 8007722:	4605      	mov	r5, r0
 8007724:	d4e0      	bmi.n	80076e8 <_fflush_r+0xc>
 8007726:	89a3      	ldrh	r3, [r4, #12]
 8007728:	059b      	lsls	r3, r3, #22
 800772a:	d4dd      	bmi.n	80076e8 <_fflush_r+0xc>
 800772c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800772e:	f000 f908 	bl	8007942 <__retarget_lock_release_recursive>
 8007732:	e7d9      	b.n	80076e8 <_fflush_r+0xc>
 8007734:	4b05      	ldr	r3, [pc, #20]	; (800774c <_fflush_r+0x70>)
 8007736:	429c      	cmp	r4, r3
 8007738:	d101      	bne.n	800773e <_fflush_r+0x62>
 800773a:	68ac      	ldr	r4, [r5, #8]
 800773c:	e7df      	b.n	80076fe <_fflush_r+0x22>
 800773e:	4b04      	ldr	r3, [pc, #16]	; (8007750 <_fflush_r+0x74>)
 8007740:	429c      	cmp	r4, r3
 8007742:	bf08      	it	eq
 8007744:	68ec      	ldreq	r4, [r5, #12]
 8007746:	e7da      	b.n	80076fe <_fflush_r+0x22>
 8007748:	08008d74 	.word	0x08008d74
 800774c:	08008d94 	.word	0x08008d94
 8007750:	08008d54 	.word	0x08008d54

08007754 <std>:
 8007754:	2300      	movs	r3, #0
 8007756:	b510      	push	{r4, lr}
 8007758:	4604      	mov	r4, r0
 800775a:	e9c0 3300 	strd	r3, r3, [r0]
 800775e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007762:	6083      	str	r3, [r0, #8]
 8007764:	8181      	strh	r1, [r0, #12]
 8007766:	6643      	str	r3, [r0, #100]	; 0x64
 8007768:	81c2      	strh	r2, [r0, #14]
 800776a:	6183      	str	r3, [r0, #24]
 800776c:	4619      	mov	r1, r3
 800776e:	2208      	movs	r2, #8
 8007770:	305c      	adds	r0, #92	; 0x5c
 8007772:	f7fd fb93 	bl	8004e9c <memset>
 8007776:	4b05      	ldr	r3, [pc, #20]	; (800778c <std+0x38>)
 8007778:	6263      	str	r3, [r4, #36]	; 0x24
 800777a:	4b05      	ldr	r3, [pc, #20]	; (8007790 <std+0x3c>)
 800777c:	62a3      	str	r3, [r4, #40]	; 0x28
 800777e:	4b05      	ldr	r3, [pc, #20]	; (8007794 <std+0x40>)
 8007780:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007782:	4b05      	ldr	r3, [pc, #20]	; (8007798 <std+0x44>)
 8007784:	6224      	str	r4, [r4, #32]
 8007786:	6323      	str	r3, [r4, #48]	; 0x30
 8007788:	bd10      	pop	{r4, pc}
 800778a:	bf00      	nop
 800778c:	08007aa5 	.word	0x08007aa5
 8007790:	08007ac7 	.word	0x08007ac7
 8007794:	08007aff 	.word	0x08007aff
 8007798:	08007b23 	.word	0x08007b23

0800779c <_cleanup_r>:
 800779c:	4901      	ldr	r1, [pc, #4]	; (80077a4 <_cleanup_r+0x8>)
 800779e:	f000 b8af 	b.w	8007900 <_fwalk_reent>
 80077a2:	bf00      	nop
 80077a4:	080076dd 	.word	0x080076dd

080077a8 <__sfmoreglue>:
 80077a8:	b570      	push	{r4, r5, r6, lr}
 80077aa:	1e4a      	subs	r2, r1, #1
 80077ac:	2568      	movs	r5, #104	; 0x68
 80077ae:	4355      	muls	r5, r2
 80077b0:	460e      	mov	r6, r1
 80077b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077b6:	f7ff fa87 	bl	8006cc8 <_malloc_r>
 80077ba:	4604      	mov	r4, r0
 80077bc:	b140      	cbz	r0, 80077d0 <__sfmoreglue+0x28>
 80077be:	2100      	movs	r1, #0
 80077c0:	e9c0 1600 	strd	r1, r6, [r0]
 80077c4:	300c      	adds	r0, #12
 80077c6:	60a0      	str	r0, [r4, #8]
 80077c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077cc:	f7fd fb66 	bl	8004e9c <memset>
 80077d0:	4620      	mov	r0, r4
 80077d2:	bd70      	pop	{r4, r5, r6, pc}

080077d4 <__sfp_lock_acquire>:
 80077d4:	4801      	ldr	r0, [pc, #4]	; (80077dc <__sfp_lock_acquire+0x8>)
 80077d6:	f000 b8b3 	b.w	8007940 <__retarget_lock_acquire_recursive>
 80077da:	bf00      	nop
 80077dc:	200025a8 	.word	0x200025a8

080077e0 <__sfp_lock_release>:
 80077e0:	4801      	ldr	r0, [pc, #4]	; (80077e8 <__sfp_lock_release+0x8>)
 80077e2:	f000 b8ae 	b.w	8007942 <__retarget_lock_release_recursive>
 80077e6:	bf00      	nop
 80077e8:	200025a8 	.word	0x200025a8

080077ec <__sinit_lock_acquire>:
 80077ec:	4801      	ldr	r0, [pc, #4]	; (80077f4 <__sinit_lock_acquire+0x8>)
 80077ee:	f000 b8a7 	b.w	8007940 <__retarget_lock_acquire_recursive>
 80077f2:	bf00      	nop
 80077f4:	200025a3 	.word	0x200025a3

080077f8 <__sinit_lock_release>:
 80077f8:	4801      	ldr	r0, [pc, #4]	; (8007800 <__sinit_lock_release+0x8>)
 80077fa:	f000 b8a2 	b.w	8007942 <__retarget_lock_release_recursive>
 80077fe:	bf00      	nop
 8007800:	200025a3 	.word	0x200025a3

08007804 <__sinit>:
 8007804:	b510      	push	{r4, lr}
 8007806:	4604      	mov	r4, r0
 8007808:	f7ff fff0 	bl	80077ec <__sinit_lock_acquire>
 800780c:	69a3      	ldr	r3, [r4, #24]
 800780e:	b11b      	cbz	r3, 8007818 <__sinit+0x14>
 8007810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007814:	f7ff bff0 	b.w	80077f8 <__sinit_lock_release>
 8007818:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800781c:	6523      	str	r3, [r4, #80]	; 0x50
 800781e:	4b13      	ldr	r3, [pc, #76]	; (800786c <__sinit+0x68>)
 8007820:	4a13      	ldr	r2, [pc, #76]	; (8007870 <__sinit+0x6c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	62a2      	str	r2, [r4, #40]	; 0x28
 8007826:	42a3      	cmp	r3, r4
 8007828:	bf04      	itt	eq
 800782a:	2301      	moveq	r3, #1
 800782c:	61a3      	streq	r3, [r4, #24]
 800782e:	4620      	mov	r0, r4
 8007830:	f000 f820 	bl	8007874 <__sfp>
 8007834:	6060      	str	r0, [r4, #4]
 8007836:	4620      	mov	r0, r4
 8007838:	f000 f81c 	bl	8007874 <__sfp>
 800783c:	60a0      	str	r0, [r4, #8]
 800783e:	4620      	mov	r0, r4
 8007840:	f000 f818 	bl	8007874 <__sfp>
 8007844:	2200      	movs	r2, #0
 8007846:	60e0      	str	r0, [r4, #12]
 8007848:	2104      	movs	r1, #4
 800784a:	6860      	ldr	r0, [r4, #4]
 800784c:	f7ff ff82 	bl	8007754 <std>
 8007850:	68a0      	ldr	r0, [r4, #8]
 8007852:	2201      	movs	r2, #1
 8007854:	2109      	movs	r1, #9
 8007856:	f7ff ff7d 	bl	8007754 <std>
 800785a:	68e0      	ldr	r0, [r4, #12]
 800785c:	2202      	movs	r2, #2
 800785e:	2112      	movs	r1, #18
 8007860:	f7ff ff78 	bl	8007754 <std>
 8007864:	2301      	movs	r3, #1
 8007866:	61a3      	str	r3, [r4, #24]
 8007868:	e7d2      	b.n	8007810 <__sinit+0xc>
 800786a:	bf00      	nop
 800786c:	080089d4 	.word	0x080089d4
 8007870:	0800779d 	.word	0x0800779d

08007874 <__sfp>:
 8007874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007876:	4607      	mov	r7, r0
 8007878:	f7ff ffac 	bl	80077d4 <__sfp_lock_acquire>
 800787c:	4b1e      	ldr	r3, [pc, #120]	; (80078f8 <__sfp+0x84>)
 800787e:	681e      	ldr	r6, [r3, #0]
 8007880:	69b3      	ldr	r3, [r6, #24]
 8007882:	b913      	cbnz	r3, 800788a <__sfp+0x16>
 8007884:	4630      	mov	r0, r6
 8007886:	f7ff ffbd 	bl	8007804 <__sinit>
 800788a:	3648      	adds	r6, #72	; 0x48
 800788c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007890:	3b01      	subs	r3, #1
 8007892:	d503      	bpl.n	800789c <__sfp+0x28>
 8007894:	6833      	ldr	r3, [r6, #0]
 8007896:	b30b      	cbz	r3, 80078dc <__sfp+0x68>
 8007898:	6836      	ldr	r6, [r6, #0]
 800789a:	e7f7      	b.n	800788c <__sfp+0x18>
 800789c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078a0:	b9d5      	cbnz	r5, 80078d8 <__sfp+0x64>
 80078a2:	4b16      	ldr	r3, [pc, #88]	; (80078fc <__sfp+0x88>)
 80078a4:	60e3      	str	r3, [r4, #12]
 80078a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078aa:	6665      	str	r5, [r4, #100]	; 0x64
 80078ac:	f000 f847 	bl	800793e <__retarget_lock_init_recursive>
 80078b0:	f7ff ff96 	bl	80077e0 <__sfp_lock_release>
 80078b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078bc:	6025      	str	r5, [r4, #0]
 80078be:	61a5      	str	r5, [r4, #24]
 80078c0:	2208      	movs	r2, #8
 80078c2:	4629      	mov	r1, r5
 80078c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078c8:	f7fd fae8 	bl	8004e9c <memset>
 80078cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078d4:	4620      	mov	r0, r4
 80078d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d8:	3468      	adds	r4, #104	; 0x68
 80078da:	e7d9      	b.n	8007890 <__sfp+0x1c>
 80078dc:	2104      	movs	r1, #4
 80078de:	4638      	mov	r0, r7
 80078e0:	f7ff ff62 	bl	80077a8 <__sfmoreglue>
 80078e4:	4604      	mov	r4, r0
 80078e6:	6030      	str	r0, [r6, #0]
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d1d5      	bne.n	8007898 <__sfp+0x24>
 80078ec:	f7ff ff78 	bl	80077e0 <__sfp_lock_release>
 80078f0:	230c      	movs	r3, #12
 80078f2:	603b      	str	r3, [r7, #0]
 80078f4:	e7ee      	b.n	80078d4 <__sfp+0x60>
 80078f6:	bf00      	nop
 80078f8:	080089d4 	.word	0x080089d4
 80078fc:	ffff0001 	.word	0xffff0001

08007900 <_fwalk_reent>:
 8007900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007904:	4606      	mov	r6, r0
 8007906:	4688      	mov	r8, r1
 8007908:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800790c:	2700      	movs	r7, #0
 800790e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007912:	f1b9 0901 	subs.w	r9, r9, #1
 8007916:	d505      	bpl.n	8007924 <_fwalk_reent+0x24>
 8007918:	6824      	ldr	r4, [r4, #0]
 800791a:	2c00      	cmp	r4, #0
 800791c:	d1f7      	bne.n	800790e <_fwalk_reent+0xe>
 800791e:	4638      	mov	r0, r7
 8007920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007924:	89ab      	ldrh	r3, [r5, #12]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d907      	bls.n	800793a <_fwalk_reent+0x3a>
 800792a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800792e:	3301      	adds	r3, #1
 8007930:	d003      	beq.n	800793a <_fwalk_reent+0x3a>
 8007932:	4629      	mov	r1, r5
 8007934:	4630      	mov	r0, r6
 8007936:	47c0      	blx	r8
 8007938:	4307      	orrs	r7, r0
 800793a:	3568      	adds	r5, #104	; 0x68
 800793c:	e7e9      	b.n	8007912 <_fwalk_reent+0x12>

0800793e <__retarget_lock_init_recursive>:
 800793e:	4770      	bx	lr

08007940 <__retarget_lock_acquire_recursive>:
 8007940:	4770      	bx	lr

08007942 <__retarget_lock_release_recursive>:
 8007942:	4770      	bx	lr

08007944 <__swhatbuf_r>:
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	460e      	mov	r6, r1
 8007948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800794c:	2900      	cmp	r1, #0
 800794e:	b096      	sub	sp, #88	; 0x58
 8007950:	4614      	mov	r4, r2
 8007952:	461d      	mov	r5, r3
 8007954:	da07      	bge.n	8007966 <__swhatbuf_r+0x22>
 8007956:	2300      	movs	r3, #0
 8007958:	602b      	str	r3, [r5, #0]
 800795a:	89b3      	ldrh	r3, [r6, #12]
 800795c:	061a      	lsls	r2, r3, #24
 800795e:	d410      	bmi.n	8007982 <__swhatbuf_r+0x3e>
 8007960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007964:	e00e      	b.n	8007984 <__swhatbuf_r+0x40>
 8007966:	466a      	mov	r2, sp
 8007968:	f000 f902 	bl	8007b70 <_fstat_r>
 800796c:	2800      	cmp	r0, #0
 800796e:	dbf2      	blt.n	8007956 <__swhatbuf_r+0x12>
 8007970:	9a01      	ldr	r2, [sp, #4]
 8007972:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007976:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800797a:	425a      	negs	r2, r3
 800797c:	415a      	adcs	r2, r3
 800797e:	602a      	str	r2, [r5, #0]
 8007980:	e7ee      	b.n	8007960 <__swhatbuf_r+0x1c>
 8007982:	2340      	movs	r3, #64	; 0x40
 8007984:	2000      	movs	r0, #0
 8007986:	6023      	str	r3, [r4, #0]
 8007988:	b016      	add	sp, #88	; 0x58
 800798a:	bd70      	pop	{r4, r5, r6, pc}

0800798c <__smakebuf_r>:
 800798c:	898b      	ldrh	r3, [r1, #12]
 800798e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007990:	079d      	lsls	r5, r3, #30
 8007992:	4606      	mov	r6, r0
 8007994:	460c      	mov	r4, r1
 8007996:	d507      	bpl.n	80079a8 <__smakebuf_r+0x1c>
 8007998:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	6123      	str	r3, [r4, #16]
 80079a0:	2301      	movs	r3, #1
 80079a2:	6163      	str	r3, [r4, #20]
 80079a4:	b002      	add	sp, #8
 80079a6:	bd70      	pop	{r4, r5, r6, pc}
 80079a8:	ab01      	add	r3, sp, #4
 80079aa:	466a      	mov	r2, sp
 80079ac:	f7ff ffca 	bl	8007944 <__swhatbuf_r>
 80079b0:	9900      	ldr	r1, [sp, #0]
 80079b2:	4605      	mov	r5, r0
 80079b4:	4630      	mov	r0, r6
 80079b6:	f7ff f987 	bl	8006cc8 <_malloc_r>
 80079ba:	b948      	cbnz	r0, 80079d0 <__smakebuf_r+0x44>
 80079bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079c0:	059a      	lsls	r2, r3, #22
 80079c2:	d4ef      	bmi.n	80079a4 <__smakebuf_r+0x18>
 80079c4:	f023 0303 	bic.w	r3, r3, #3
 80079c8:	f043 0302 	orr.w	r3, r3, #2
 80079cc:	81a3      	strh	r3, [r4, #12]
 80079ce:	e7e3      	b.n	8007998 <__smakebuf_r+0xc>
 80079d0:	4b0d      	ldr	r3, [pc, #52]	; (8007a08 <__smakebuf_r+0x7c>)
 80079d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	6020      	str	r0, [r4, #0]
 80079d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079dc:	81a3      	strh	r3, [r4, #12]
 80079de:	9b00      	ldr	r3, [sp, #0]
 80079e0:	6163      	str	r3, [r4, #20]
 80079e2:	9b01      	ldr	r3, [sp, #4]
 80079e4:	6120      	str	r0, [r4, #16]
 80079e6:	b15b      	cbz	r3, 8007a00 <__smakebuf_r+0x74>
 80079e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ec:	4630      	mov	r0, r6
 80079ee:	f000 f8d1 	bl	8007b94 <_isatty_r>
 80079f2:	b128      	cbz	r0, 8007a00 <__smakebuf_r+0x74>
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	f023 0303 	bic.w	r3, r3, #3
 80079fa:	f043 0301 	orr.w	r3, r3, #1
 80079fe:	81a3      	strh	r3, [r4, #12]
 8007a00:	89a0      	ldrh	r0, [r4, #12]
 8007a02:	4305      	orrs	r5, r0
 8007a04:	81a5      	strh	r5, [r4, #12]
 8007a06:	e7cd      	b.n	80079a4 <__smakebuf_r+0x18>
 8007a08:	0800779d 	.word	0x0800779d

08007a0c <_malloc_usable_size_r>:
 8007a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a10:	1f18      	subs	r0, r3, #4
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	bfbc      	itt	lt
 8007a16:	580b      	ldrlt	r3, [r1, r0]
 8007a18:	18c0      	addlt	r0, r0, r3
 8007a1a:	4770      	bx	lr

08007a1c <_raise_r>:
 8007a1c:	291f      	cmp	r1, #31
 8007a1e:	b538      	push	{r3, r4, r5, lr}
 8007a20:	4604      	mov	r4, r0
 8007a22:	460d      	mov	r5, r1
 8007a24:	d904      	bls.n	8007a30 <_raise_r+0x14>
 8007a26:	2316      	movs	r3, #22
 8007a28:	6003      	str	r3, [r0, #0]
 8007a2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a32:	b112      	cbz	r2, 8007a3a <_raise_r+0x1e>
 8007a34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a38:	b94b      	cbnz	r3, 8007a4e <_raise_r+0x32>
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f000 f830 	bl	8007aa0 <_getpid_r>
 8007a40:	462a      	mov	r2, r5
 8007a42:	4601      	mov	r1, r0
 8007a44:	4620      	mov	r0, r4
 8007a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a4a:	f000 b817 	b.w	8007a7c <_kill_r>
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d00a      	beq.n	8007a68 <_raise_r+0x4c>
 8007a52:	1c59      	adds	r1, r3, #1
 8007a54:	d103      	bne.n	8007a5e <_raise_r+0x42>
 8007a56:	2316      	movs	r3, #22
 8007a58:	6003      	str	r3, [r0, #0]
 8007a5a:	2001      	movs	r0, #1
 8007a5c:	e7e7      	b.n	8007a2e <_raise_r+0x12>
 8007a5e:	2400      	movs	r4, #0
 8007a60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a64:	4628      	mov	r0, r5
 8007a66:	4798      	blx	r3
 8007a68:	2000      	movs	r0, #0
 8007a6a:	e7e0      	b.n	8007a2e <_raise_r+0x12>

08007a6c <raise>:
 8007a6c:	4b02      	ldr	r3, [pc, #8]	; (8007a78 <raise+0xc>)
 8007a6e:	4601      	mov	r1, r0
 8007a70:	6818      	ldr	r0, [r3, #0]
 8007a72:	f7ff bfd3 	b.w	8007a1c <_raise_r>
 8007a76:	bf00      	nop
 8007a78:	2000201c 	.word	0x2000201c

08007a7c <_kill_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	4d07      	ldr	r5, [pc, #28]	; (8007a9c <_kill_r+0x20>)
 8007a80:	2300      	movs	r3, #0
 8007a82:	4604      	mov	r4, r0
 8007a84:	4608      	mov	r0, r1
 8007a86:	4611      	mov	r1, r2
 8007a88:	602b      	str	r3, [r5, #0]
 8007a8a:	f7fa ff53 	bl	8002934 <_kill>
 8007a8e:	1c43      	adds	r3, r0, #1
 8007a90:	d102      	bne.n	8007a98 <_kill_r+0x1c>
 8007a92:	682b      	ldr	r3, [r5, #0]
 8007a94:	b103      	cbz	r3, 8007a98 <_kill_r+0x1c>
 8007a96:	6023      	str	r3, [r4, #0]
 8007a98:	bd38      	pop	{r3, r4, r5, pc}
 8007a9a:	bf00      	nop
 8007a9c:	2000259c 	.word	0x2000259c

08007aa0 <_getpid_r>:
 8007aa0:	f7fa bf40 	b.w	8002924 <_getpid>

08007aa4 <__sread>:
 8007aa4:	b510      	push	{r4, lr}
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aac:	f000 f894 	bl	8007bd8 <_read_r>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	bfab      	itete	ge
 8007ab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ab8:	181b      	addge	r3, r3, r0
 8007aba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007abe:	bfac      	ite	ge
 8007ac0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ac2:	81a3      	strhlt	r3, [r4, #12]
 8007ac4:	bd10      	pop	{r4, pc}

08007ac6 <__swrite>:
 8007ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aca:	461f      	mov	r7, r3
 8007acc:	898b      	ldrh	r3, [r1, #12]
 8007ace:	05db      	lsls	r3, r3, #23
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	4616      	mov	r6, r2
 8007ad6:	d505      	bpl.n	8007ae4 <__swrite+0x1e>
 8007ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007adc:	2302      	movs	r3, #2
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f000 f868 	bl	8007bb4 <_lseek_r>
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aee:	81a3      	strh	r3, [r4, #12]
 8007af0:	4632      	mov	r2, r6
 8007af2:	463b      	mov	r3, r7
 8007af4:	4628      	mov	r0, r5
 8007af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007afa:	f000 b817 	b.w	8007b2c <_write_r>

08007afe <__sseek>:
 8007afe:	b510      	push	{r4, lr}
 8007b00:	460c      	mov	r4, r1
 8007b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b06:	f000 f855 	bl	8007bb4 <_lseek_r>
 8007b0a:	1c43      	adds	r3, r0, #1
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	bf15      	itete	ne
 8007b10:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b1a:	81a3      	strheq	r3, [r4, #12]
 8007b1c:	bf18      	it	ne
 8007b1e:	81a3      	strhne	r3, [r4, #12]
 8007b20:	bd10      	pop	{r4, pc}

08007b22 <__sclose>:
 8007b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b26:	f000 b813 	b.w	8007b50 <_close_r>
	...

08007b2c <_write_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4d07      	ldr	r5, [pc, #28]	; (8007b4c <_write_r+0x20>)
 8007b30:	4604      	mov	r4, r0
 8007b32:	4608      	mov	r0, r1
 8007b34:	4611      	mov	r1, r2
 8007b36:	2200      	movs	r2, #0
 8007b38:	602a      	str	r2, [r5, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f7fa ff31 	bl	80029a2 <_write>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d102      	bne.n	8007b4a <_write_r+0x1e>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	b103      	cbz	r3, 8007b4a <_write_r+0x1e>
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
 8007b4c:	2000259c 	.word	0x2000259c

08007b50 <_close_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	4d06      	ldr	r5, [pc, #24]	; (8007b6c <_close_r+0x1c>)
 8007b54:	2300      	movs	r3, #0
 8007b56:	4604      	mov	r4, r0
 8007b58:	4608      	mov	r0, r1
 8007b5a:	602b      	str	r3, [r5, #0]
 8007b5c:	f7fa ff3d 	bl	80029da <_close>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_close_r+0x1a>
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_close_r+0x1a>
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	2000259c 	.word	0x2000259c

08007b70 <_fstat_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4d07      	ldr	r5, [pc, #28]	; (8007b90 <_fstat_r+0x20>)
 8007b74:	2300      	movs	r3, #0
 8007b76:	4604      	mov	r4, r0
 8007b78:	4608      	mov	r0, r1
 8007b7a:	4611      	mov	r1, r2
 8007b7c:	602b      	str	r3, [r5, #0]
 8007b7e:	f7fa ff38 	bl	80029f2 <_fstat>
 8007b82:	1c43      	adds	r3, r0, #1
 8007b84:	d102      	bne.n	8007b8c <_fstat_r+0x1c>
 8007b86:	682b      	ldr	r3, [r5, #0]
 8007b88:	b103      	cbz	r3, 8007b8c <_fstat_r+0x1c>
 8007b8a:	6023      	str	r3, [r4, #0]
 8007b8c:	bd38      	pop	{r3, r4, r5, pc}
 8007b8e:	bf00      	nop
 8007b90:	2000259c 	.word	0x2000259c

08007b94 <_isatty_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4d06      	ldr	r5, [pc, #24]	; (8007bb0 <_isatty_r+0x1c>)
 8007b98:	2300      	movs	r3, #0
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	4608      	mov	r0, r1
 8007b9e:	602b      	str	r3, [r5, #0]
 8007ba0:	f7fa ff37 	bl	8002a12 <_isatty>
 8007ba4:	1c43      	adds	r3, r0, #1
 8007ba6:	d102      	bne.n	8007bae <_isatty_r+0x1a>
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	b103      	cbz	r3, 8007bae <_isatty_r+0x1a>
 8007bac:	6023      	str	r3, [r4, #0]
 8007bae:	bd38      	pop	{r3, r4, r5, pc}
 8007bb0:	2000259c 	.word	0x2000259c

08007bb4 <_lseek_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4d07      	ldr	r5, [pc, #28]	; (8007bd4 <_lseek_r+0x20>)
 8007bb8:	4604      	mov	r4, r0
 8007bba:	4608      	mov	r0, r1
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	602a      	str	r2, [r5, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f7fa ff30 	bl	8002a28 <_lseek>
 8007bc8:	1c43      	adds	r3, r0, #1
 8007bca:	d102      	bne.n	8007bd2 <_lseek_r+0x1e>
 8007bcc:	682b      	ldr	r3, [r5, #0]
 8007bce:	b103      	cbz	r3, 8007bd2 <_lseek_r+0x1e>
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	2000259c 	.word	0x2000259c

08007bd8 <_read_r>:
 8007bd8:	b538      	push	{r3, r4, r5, lr}
 8007bda:	4d07      	ldr	r5, [pc, #28]	; (8007bf8 <_read_r+0x20>)
 8007bdc:	4604      	mov	r4, r0
 8007bde:	4608      	mov	r0, r1
 8007be0:	4611      	mov	r1, r2
 8007be2:	2200      	movs	r2, #0
 8007be4:	602a      	str	r2, [r5, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	f7fa febe 	bl	8002968 <_read>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d102      	bne.n	8007bf6 <_read_r+0x1e>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	b103      	cbz	r3, 8007bf6 <_read_r+0x1e>
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	2000259c 	.word	0x2000259c

08007bfc <asin>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	ed2d 8b02 	vpush	{d8}
 8007c02:	ec55 4b10 	vmov	r4, r5, d0
 8007c06:	f000 f837 	bl	8007c78 <__ieee754_asin>
 8007c0a:	4b16      	ldr	r3, [pc, #88]	; (8007c64 <asin+0x68>)
 8007c0c:	eeb0 8a40 	vmov.f32	s16, s0
 8007c10:	eef0 8a60 	vmov.f32	s17, s1
 8007c14:	f993 3000 	ldrsb.w	r3, [r3]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	d01c      	beq.n	8007c56 <asin+0x5a>
 8007c1c:	4622      	mov	r2, r4
 8007c1e:	462b      	mov	r3, r5
 8007c20:	4620      	mov	r0, r4
 8007c22:	4629      	mov	r1, r5
 8007c24:	f7f8 ff8a 	bl	8000b3c <__aeabi_dcmpun>
 8007c28:	b9a8      	cbnz	r0, 8007c56 <asin+0x5a>
 8007c2a:	ec45 4b10 	vmov	d0, r4, r5
 8007c2e:	f000 fd57 	bl	80086e0 <fabs>
 8007c32:	4b0d      	ldr	r3, [pc, #52]	; (8007c68 <asin+0x6c>)
 8007c34:	ec51 0b10 	vmov	r0, r1, d0
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f7f8 ff75 	bl	8000b28 <__aeabi_dcmpgt>
 8007c3e:	b150      	cbz	r0, 8007c56 <asin+0x5a>
 8007c40:	f7fd f902 	bl	8004e48 <__errno>
 8007c44:	ecbd 8b02 	vpop	{d8}
 8007c48:	2321      	movs	r3, #33	; 0x21
 8007c4a:	6003      	str	r3, [r0, #0]
 8007c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c50:	4806      	ldr	r0, [pc, #24]	; (8007c6c <asin+0x70>)
 8007c52:	f000 bd51 	b.w	80086f8 <nan>
 8007c56:	eeb0 0a48 	vmov.f32	s0, s16
 8007c5a:	eef0 0a68 	vmov.f32	s1, s17
 8007c5e:	ecbd 8b02 	vpop	{d8}
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	200021ec 	.word	0x200021ec
 8007c68:	3ff00000 	.word	0x3ff00000
 8007c6c:	08008c48 	.word	0x08008c48

08007c70 <atan2>:
 8007c70:	f000 ba16 	b.w	80080a0 <__ieee754_atan2>
 8007c74:	0000      	movs	r0, r0
	...

08007c78 <__ieee754_asin>:
 8007c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7c:	ed2d 8b04 	vpush	{d8-d9}
 8007c80:	ec55 4b10 	vmov	r4, r5, d0
 8007c84:	4bcc      	ldr	r3, [pc, #816]	; (8007fb8 <__ieee754_asin+0x340>)
 8007c86:	b083      	sub	sp, #12
 8007c88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007c8c:	4598      	cmp	r8, r3
 8007c8e:	9501      	str	r5, [sp, #4]
 8007c90:	dd35      	ble.n	8007cfe <__ieee754_asin+0x86>
 8007c92:	ee10 3a10 	vmov	r3, s0
 8007c96:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8007c9a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8007c9e:	ea58 0303 	orrs.w	r3, r8, r3
 8007ca2:	d117      	bne.n	8007cd4 <__ieee754_asin+0x5c>
 8007ca4:	a3aa      	add	r3, pc, #680	; (adr r3, 8007f50 <__ieee754_asin+0x2d8>)
 8007ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007caa:	ee10 0a10 	vmov	r0, s0
 8007cae:	4629      	mov	r1, r5
 8007cb0:	f7f8 fcaa 	bl	8000608 <__aeabi_dmul>
 8007cb4:	a3a8      	add	r3, pc, #672	; (adr r3, 8007f58 <__ieee754_asin+0x2e0>)
 8007cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cba:	4606      	mov	r6, r0
 8007cbc:	460f      	mov	r7, r1
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	f7f8 fca1 	bl	8000608 <__aeabi_dmul>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4630      	mov	r0, r6
 8007ccc:	4639      	mov	r1, r7
 8007cce:	f7f8 fae5 	bl	800029c <__adddf3>
 8007cd2:	e00b      	b.n	8007cec <__ieee754_asin+0x74>
 8007cd4:	ee10 2a10 	vmov	r2, s0
 8007cd8:	462b      	mov	r3, r5
 8007cda:	ee10 0a10 	vmov	r0, s0
 8007cde:	4629      	mov	r1, r5
 8007ce0:	f7f8 fada 	bl	8000298 <__aeabi_dsub>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	f7f8 fdb8 	bl	800085c <__aeabi_ddiv>
 8007cec:	4604      	mov	r4, r0
 8007cee:	460d      	mov	r5, r1
 8007cf0:	ec45 4b10 	vmov	d0, r4, r5
 8007cf4:	b003      	add	sp, #12
 8007cf6:	ecbd 8b04 	vpop	{d8-d9}
 8007cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfe:	4baf      	ldr	r3, [pc, #700]	; (8007fbc <__ieee754_asin+0x344>)
 8007d00:	4598      	cmp	r8, r3
 8007d02:	dc11      	bgt.n	8007d28 <__ieee754_asin+0xb0>
 8007d04:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007d08:	f280 80ae 	bge.w	8007e68 <__ieee754_asin+0x1f0>
 8007d0c:	a394      	add	r3, pc, #592	; (adr r3, 8007f60 <__ieee754_asin+0x2e8>)
 8007d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d12:	ee10 0a10 	vmov	r0, s0
 8007d16:	4629      	mov	r1, r5
 8007d18:	f7f8 fac0 	bl	800029c <__adddf3>
 8007d1c:	4ba8      	ldr	r3, [pc, #672]	; (8007fc0 <__ieee754_asin+0x348>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f7f8 ff02 	bl	8000b28 <__aeabi_dcmpgt>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d1e3      	bne.n	8007cf0 <__ieee754_asin+0x78>
 8007d28:	ec45 4b10 	vmov	d0, r4, r5
 8007d2c:	f000 fcd8 	bl	80086e0 <fabs>
 8007d30:	49a3      	ldr	r1, [pc, #652]	; (8007fc0 <__ieee754_asin+0x348>)
 8007d32:	ec53 2b10 	vmov	r2, r3, d0
 8007d36:	2000      	movs	r0, #0
 8007d38:	f7f8 faae 	bl	8000298 <__aeabi_dsub>
 8007d3c:	4ba1      	ldr	r3, [pc, #644]	; (8007fc4 <__ieee754_asin+0x34c>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f7f8 fc62 	bl	8000608 <__aeabi_dmul>
 8007d44:	a388      	add	r3, pc, #544	; (adr r3, 8007f68 <__ieee754_asin+0x2f0>)
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	460d      	mov	r5, r1
 8007d4e:	f7f8 fc5b 	bl	8000608 <__aeabi_dmul>
 8007d52:	a387      	add	r3, pc, #540	; (adr r3, 8007f70 <__ieee754_asin+0x2f8>)
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	f7f8 faa0 	bl	800029c <__adddf3>
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	462b      	mov	r3, r5
 8007d60:	f7f8 fc52 	bl	8000608 <__aeabi_dmul>
 8007d64:	a384      	add	r3, pc, #528	; (adr r3, 8007f78 <__ieee754_asin+0x300>)
 8007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6a:	f7f8 fa95 	bl	8000298 <__aeabi_dsub>
 8007d6e:	4622      	mov	r2, r4
 8007d70:	462b      	mov	r3, r5
 8007d72:	f7f8 fc49 	bl	8000608 <__aeabi_dmul>
 8007d76:	a382      	add	r3, pc, #520	; (adr r3, 8007f80 <__ieee754_asin+0x308>)
 8007d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7c:	f7f8 fa8e 	bl	800029c <__adddf3>
 8007d80:	4622      	mov	r2, r4
 8007d82:	462b      	mov	r3, r5
 8007d84:	f7f8 fc40 	bl	8000608 <__aeabi_dmul>
 8007d88:	a37f      	add	r3, pc, #508	; (adr r3, 8007f88 <__ieee754_asin+0x310>)
 8007d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8e:	f7f8 fa83 	bl	8000298 <__aeabi_dsub>
 8007d92:	4622      	mov	r2, r4
 8007d94:	462b      	mov	r3, r5
 8007d96:	f7f8 fc37 	bl	8000608 <__aeabi_dmul>
 8007d9a:	a37d      	add	r3, pc, #500	; (adr r3, 8007f90 <__ieee754_asin+0x318>)
 8007d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da0:	f7f8 fa7c 	bl	800029c <__adddf3>
 8007da4:	4622      	mov	r2, r4
 8007da6:	462b      	mov	r3, r5
 8007da8:	f7f8 fc2e 	bl	8000608 <__aeabi_dmul>
 8007dac:	a37a      	add	r3, pc, #488	; (adr r3, 8007f98 <__ieee754_asin+0x320>)
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	ec41 0b18 	vmov	d8, r0, r1
 8007db6:	4620      	mov	r0, r4
 8007db8:	4629      	mov	r1, r5
 8007dba:	f7f8 fc25 	bl	8000608 <__aeabi_dmul>
 8007dbe:	a378      	add	r3, pc, #480	; (adr r3, 8007fa0 <__ieee754_asin+0x328>)
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	f7f8 fa68 	bl	8000298 <__aeabi_dsub>
 8007dc8:	4622      	mov	r2, r4
 8007dca:	462b      	mov	r3, r5
 8007dcc:	f7f8 fc1c 	bl	8000608 <__aeabi_dmul>
 8007dd0:	a375      	add	r3, pc, #468	; (adr r3, 8007fa8 <__ieee754_asin+0x330>)
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	f7f8 fa61 	bl	800029c <__adddf3>
 8007dda:	4622      	mov	r2, r4
 8007ddc:	462b      	mov	r3, r5
 8007dde:	f7f8 fc13 	bl	8000608 <__aeabi_dmul>
 8007de2:	a373      	add	r3, pc, #460	; (adr r3, 8007fb0 <__ieee754_asin+0x338>)
 8007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de8:	f7f8 fa56 	bl	8000298 <__aeabi_dsub>
 8007dec:	4622      	mov	r2, r4
 8007dee:	462b      	mov	r3, r5
 8007df0:	f7f8 fc0a 	bl	8000608 <__aeabi_dmul>
 8007df4:	4b72      	ldr	r3, [pc, #456]	; (8007fc0 <__ieee754_asin+0x348>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	f7f8 fa50 	bl	800029c <__adddf3>
 8007dfc:	ec45 4b10 	vmov	d0, r4, r5
 8007e00:	4606      	mov	r6, r0
 8007e02:	460f      	mov	r7, r1
 8007e04:	f000 fa16 	bl	8008234 <__ieee754_sqrt>
 8007e08:	4b6f      	ldr	r3, [pc, #444]	; (8007fc8 <__ieee754_asin+0x350>)
 8007e0a:	4598      	cmp	r8, r3
 8007e0c:	ec5b ab10 	vmov	sl, fp, d0
 8007e10:	f340 80dc 	ble.w	8007fcc <__ieee754_asin+0x354>
 8007e14:	4632      	mov	r2, r6
 8007e16:	463b      	mov	r3, r7
 8007e18:	ec51 0b18 	vmov	r0, r1, d8
 8007e1c:	f7f8 fd1e 	bl	800085c <__aeabi_ddiv>
 8007e20:	4652      	mov	r2, sl
 8007e22:	465b      	mov	r3, fp
 8007e24:	f7f8 fbf0 	bl	8000608 <__aeabi_dmul>
 8007e28:	4652      	mov	r2, sl
 8007e2a:	465b      	mov	r3, fp
 8007e2c:	f7f8 fa36 	bl	800029c <__adddf3>
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	f7f8 fa32 	bl	800029c <__adddf3>
 8007e38:	a347      	add	r3, pc, #284	; (adr r3, 8007f58 <__ieee754_asin+0x2e0>)
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	f7f8 fa2b 	bl	8000298 <__aeabi_dsub>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	a142      	add	r1, pc, #264	; (adr r1, 8007f50 <__ieee754_asin+0x2d8>)
 8007e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e4c:	f7f8 fa24 	bl	8000298 <__aeabi_dsub>
 8007e50:	9b01      	ldr	r3, [sp, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	bfdc      	itt	le
 8007e56:	4602      	movle	r2, r0
 8007e58:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	460d      	mov	r5, r1
 8007e60:	bfdc      	itt	le
 8007e62:	4614      	movle	r4, r2
 8007e64:	461d      	movle	r5, r3
 8007e66:	e743      	b.n	8007cf0 <__ieee754_asin+0x78>
 8007e68:	ee10 2a10 	vmov	r2, s0
 8007e6c:	ee10 0a10 	vmov	r0, s0
 8007e70:	462b      	mov	r3, r5
 8007e72:	4629      	mov	r1, r5
 8007e74:	f7f8 fbc8 	bl	8000608 <__aeabi_dmul>
 8007e78:	a33b      	add	r3, pc, #236	; (adr r3, 8007f68 <__ieee754_asin+0x2f0>)
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	4606      	mov	r6, r0
 8007e80:	460f      	mov	r7, r1
 8007e82:	f7f8 fbc1 	bl	8000608 <__aeabi_dmul>
 8007e86:	a33a      	add	r3, pc, #232	; (adr r3, 8007f70 <__ieee754_asin+0x2f8>)
 8007e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8c:	f7f8 fa06 	bl	800029c <__adddf3>
 8007e90:	4632      	mov	r2, r6
 8007e92:	463b      	mov	r3, r7
 8007e94:	f7f8 fbb8 	bl	8000608 <__aeabi_dmul>
 8007e98:	a337      	add	r3, pc, #220	; (adr r3, 8007f78 <__ieee754_asin+0x300>)
 8007e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9e:	f7f8 f9fb 	bl	8000298 <__aeabi_dsub>
 8007ea2:	4632      	mov	r2, r6
 8007ea4:	463b      	mov	r3, r7
 8007ea6:	f7f8 fbaf 	bl	8000608 <__aeabi_dmul>
 8007eaa:	a335      	add	r3, pc, #212	; (adr r3, 8007f80 <__ieee754_asin+0x308>)
 8007eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb0:	f7f8 f9f4 	bl	800029c <__adddf3>
 8007eb4:	4632      	mov	r2, r6
 8007eb6:	463b      	mov	r3, r7
 8007eb8:	f7f8 fba6 	bl	8000608 <__aeabi_dmul>
 8007ebc:	a332      	add	r3, pc, #200	; (adr r3, 8007f88 <__ieee754_asin+0x310>)
 8007ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec2:	f7f8 f9e9 	bl	8000298 <__aeabi_dsub>
 8007ec6:	4632      	mov	r2, r6
 8007ec8:	463b      	mov	r3, r7
 8007eca:	f7f8 fb9d 	bl	8000608 <__aeabi_dmul>
 8007ece:	a330      	add	r3, pc, #192	; (adr r3, 8007f90 <__ieee754_asin+0x318>)
 8007ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed4:	f7f8 f9e2 	bl	800029c <__adddf3>
 8007ed8:	4632      	mov	r2, r6
 8007eda:	463b      	mov	r3, r7
 8007edc:	f7f8 fb94 	bl	8000608 <__aeabi_dmul>
 8007ee0:	a32d      	add	r3, pc, #180	; (adr r3, 8007f98 <__ieee754_asin+0x320>)
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	4680      	mov	r8, r0
 8007ee8:	4689      	mov	r9, r1
 8007eea:	4630      	mov	r0, r6
 8007eec:	4639      	mov	r1, r7
 8007eee:	f7f8 fb8b 	bl	8000608 <__aeabi_dmul>
 8007ef2:	a32b      	add	r3, pc, #172	; (adr r3, 8007fa0 <__ieee754_asin+0x328>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f7f8 f9ce 	bl	8000298 <__aeabi_dsub>
 8007efc:	4632      	mov	r2, r6
 8007efe:	463b      	mov	r3, r7
 8007f00:	f7f8 fb82 	bl	8000608 <__aeabi_dmul>
 8007f04:	a328      	add	r3, pc, #160	; (adr r3, 8007fa8 <__ieee754_asin+0x330>)
 8007f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0a:	f7f8 f9c7 	bl	800029c <__adddf3>
 8007f0e:	4632      	mov	r2, r6
 8007f10:	463b      	mov	r3, r7
 8007f12:	f7f8 fb79 	bl	8000608 <__aeabi_dmul>
 8007f16:	a326      	add	r3, pc, #152	; (adr r3, 8007fb0 <__ieee754_asin+0x338>)
 8007f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1c:	f7f8 f9bc 	bl	8000298 <__aeabi_dsub>
 8007f20:	4632      	mov	r2, r6
 8007f22:	463b      	mov	r3, r7
 8007f24:	f7f8 fb70 	bl	8000608 <__aeabi_dmul>
 8007f28:	4b25      	ldr	r3, [pc, #148]	; (8007fc0 <__ieee754_asin+0x348>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f7f8 f9b6 	bl	800029c <__adddf3>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4640      	mov	r0, r8
 8007f36:	4649      	mov	r1, r9
 8007f38:	f7f8 fc90 	bl	800085c <__aeabi_ddiv>
 8007f3c:	4622      	mov	r2, r4
 8007f3e:	462b      	mov	r3, r5
 8007f40:	f7f8 fb62 	bl	8000608 <__aeabi_dmul>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	4620      	mov	r0, r4
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	e6bf      	b.n	8007cce <__ieee754_asin+0x56>
 8007f4e:	bf00      	nop
 8007f50:	54442d18 	.word	0x54442d18
 8007f54:	3ff921fb 	.word	0x3ff921fb
 8007f58:	33145c07 	.word	0x33145c07
 8007f5c:	3c91a626 	.word	0x3c91a626
 8007f60:	8800759c 	.word	0x8800759c
 8007f64:	7e37e43c 	.word	0x7e37e43c
 8007f68:	0dfdf709 	.word	0x0dfdf709
 8007f6c:	3f023de1 	.word	0x3f023de1
 8007f70:	7501b288 	.word	0x7501b288
 8007f74:	3f49efe0 	.word	0x3f49efe0
 8007f78:	b5688f3b 	.word	0xb5688f3b
 8007f7c:	3fa48228 	.word	0x3fa48228
 8007f80:	0e884455 	.word	0x0e884455
 8007f84:	3fc9c155 	.word	0x3fc9c155
 8007f88:	03eb6f7d 	.word	0x03eb6f7d
 8007f8c:	3fd4d612 	.word	0x3fd4d612
 8007f90:	55555555 	.word	0x55555555
 8007f94:	3fc55555 	.word	0x3fc55555
 8007f98:	b12e9282 	.word	0xb12e9282
 8007f9c:	3fb3b8c5 	.word	0x3fb3b8c5
 8007fa0:	1b8d0159 	.word	0x1b8d0159
 8007fa4:	3fe6066c 	.word	0x3fe6066c
 8007fa8:	9c598ac8 	.word	0x9c598ac8
 8007fac:	40002ae5 	.word	0x40002ae5
 8007fb0:	1c8a2d4b 	.word	0x1c8a2d4b
 8007fb4:	40033a27 	.word	0x40033a27
 8007fb8:	3fefffff 	.word	0x3fefffff
 8007fbc:	3fdfffff 	.word	0x3fdfffff
 8007fc0:	3ff00000 	.word	0x3ff00000
 8007fc4:	3fe00000 	.word	0x3fe00000
 8007fc8:	3fef3332 	.word	0x3fef3332
 8007fcc:	ee10 2a10 	vmov	r2, s0
 8007fd0:	ee10 0a10 	vmov	r0, s0
 8007fd4:	465b      	mov	r3, fp
 8007fd6:	4659      	mov	r1, fp
 8007fd8:	f7f8 f960 	bl	800029c <__adddf3>
 8007fdc:	4632      	mov	r2, r6
 8007fde:	463b      	mov	r3, r7
 8007fe0:	ec41 0b19 	vmov	d9, r0, r1
 8007fe4:	ec51 0b18 	vmov	r0, r1, d8
 8007fe8:	f7f8 fc38 	bl	800085c <__aeabi_ddiv>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	ec51 0b19 	vmov	r0, r1, d9
 8007ff4:	f7f8 fb08 	bl	8000608 <__aeabi_dmul>
 8007ff8:	f04f 0800 	mov.w	r8, #0
 8007ffc:	4606      	mov	r6, r0
 8007ffe:	460f      	mov	r7, r1
 8008000:	4642      	mov	r2, r8
 8008002:	465b      	mov	r3, fp
 8008004:	4640      	mov	r0, r8
 8008006:	4659      	mov	r1, fp
 8008008:	f7f8 fafe 	bl	8000608 <__aeabi_dmul>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4620      	mov	r0, r4
 8008012:	4629      	mov	r1, r5
 8008014:	f7f8 f940 	bl	8000298 <__aeabi_dsub>
 8008018:	4642      	mov	r2, r8
 800801a:	4604      	mov	r4, r0
 800801c:	460d      	mov	r5, r1
 800801e:	465b      	mov	r3, fp
 8008020:	4650      	mov	r0, sl
 8008022:	4659      	mov	r1, fp
 8008024:	f7f8 f93a 	bl	800029c <__adddf3>
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	4620      	mov	r0, r4
 800802e:	4629      	mov	r1, r5
 8008030:	f7f8 fc14 	bl	800085c <__aeabi_ddiv>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	f7f8 f930 	bl	800029c <__adddf3>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	a113      	add	r1, pc, #76	; (adr r1, 8008090 <__ieee754_asin+0x418>)
 8008042:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008046:	f7f8 f927 	bl	8000298 <__aeabi_dsub>
 800804a:	4602      	mov	r2, r0
 800804c:	460b      	mov	r3, r1
 800804e:	4630      	mov	r0, r6
 8008050:	4639      	mov	r1, r7
 8008052:	f7f8 f921 	bl	8000298 <__aeabi_dsub>
 8008056:	4642      	mov	r2, r8
 8008058:	4604      	mov	r4, r0
 800805a:	460d      	mov	r5, r1
 800805c:	465b      	mov	r3, fp
 800805e:	4640      	mov	r0, r8
 8008060:	4659      	mov	r1, fp
 8008062:	f7f8 f91b 	bl	800029c <__adddf3>
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	a10b      	add	r1, pc, #44	; (adr r1, 8008098 <__ieee754_asin+0x420>)
 800806c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008070:	f7f8 f912 	bl	8000298 <__aeabi_dsub>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4620      	mov	r0, r4
 800807a:	4629      	mov	r1, r5
 800807c:	f7f8 f90c 	bl	8000298 <__aeabi_dsub>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	a104      	add	r1, pc, #16	; (adr r1, 8008098 <__ieee754_asin+0x420>)
 8008086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800808a:	e6df      	b.n	8007e4c <__ieee754_asin+0x1d4>
 800808c:	f3af 8000 	nop.w
 8008090:	33145c07 	.word	0x33145c07
 8008094:	3c91a626 	.word	0x3c91a626
 8008098:	54442d18 	.word	0x54442d18
 800809c:	3fe921fb 	.word	0x3fe921fb

080080a0 <__ieee754_atan2>:
 80080a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080a4:	ec57 6b11 	vmov	r6, r7, d1
 80080a8:	4273      	negs	r3, r6
 80080aa:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008230 <__ieee754_atan2+0x190>
 80080ae:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80080b2:	4333      	orrs	r3, r6
 80080b4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80080b8:	4573      	cmp	r3, lr
 80080ba:	ec51 0b10 	vmov	r0, r1, d0
 80080be:	ee11 8a10 	vmov	r8, s2
 80080c2:	d80a      	bhi.n	80080da <__ieee754_atan2+0x3a>
 80080c4:	4244      	negs	r4, r0
 80080c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80080ca:	4304      	orrs	r4, r0
 80080cc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80080d0:	4574      	cmp	r4, lr
 80080d2:	ee10 9a10 	vmov	r9, s0
 80080d6:	468c      	mov	ip, r1
 80080d8:	d907      	bls.n	80080ea <__ieee754_atan2+0x4a>
 80080da:	4632      	mov	r2, r6
 80080dc:	463b      	mov	r3, r7
 80080de:	f7f8 f8dd 	bl	800029c <__adddf3>
 80080e2:	ec41 0b10 	vmov	d0, r0, r1
 80080e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80080ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80080f2:	4334      	orrs	r4, r6
 80080f4:	d103      	bne.n	80080fe <__ieee754_atan2+0x5e>
 80080f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080fa:	f000 b951 	b.w	80083a0 <atan>
 80080fe:	17bc      	asrs	r4, r7, #30
 8008100:	f004 0402 	and.w	r4, r4, #2
 8008104:	ea53 0909 	orrs.w	r9, r3, r9
 8008108:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800810c:	d107      	bne.n	800811e <__ieee754_atan2+0x7e>
 800810e:	2c02      	cmp	r4, #2
 8008110:	d060      	beq.n	80081d4 <__ieee754_atan2+0x134>
 8008112:	2c03      	cmp	r4, #3
 8008114:	d1e5      	bne.n	80080e2 <__ieee754_atan2+0x42>
 8008116:	a142      	add	r1, pc, #264	; (adr r1, 8008220 <__ieee754_atan2+0x180>)
 8008118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800811c:	e7e1      	b.n	80080e2 <__ieee754_atan2+0x42>
 800811e:	ea52 0808 	orrs.w	r8, r2, r8
 8008122:	d106      	bne.n	8008132 <__ieee754_atan2+0x92>
 8008124:	f1bc 0f00 	cmp.w	ip, #0
 8008128:	da5f      	bge.n	80081ea <__ieee754_atan2+0x14a>
 800812a:	a13f      	add	r1, pc, #252	; (adr r1, 8008228 <__ieee754_atan2+0x188>)
 800812c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008130:	e7d7      	b.n	80080e2 <__ieee754_atan2+0x42>
 8008132:	4572      	cmp	r2, lr
 8008134:	d10f      	bne.n	8008156 <__ieee754_atan2+0xb6>
 8008136:	4293      	cmp	r3, r2
 8008138:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800813c:	d107      	bne.n	800814e <__ieee754_atan2+0xae>
 800813e:	2c02      	cmp	r4, #2
 8008140:	d84c      	bhi.n	80081dc <__ieee754_atan2+0x13c>
 8008142:	4b35      	ldr	r3, [pc, #212]	; (8008218 <__ieee754_atan2+0x178>)
 8008144:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008148:	e9d4 0100 	ldrd	r0, r1, [r4]
 800814c:	e7c9      	b.n	80080e2 <__ieee754_atan2+0x42>
 800814e:	2c02      	cmp	r4, #2
 8008150:	d848      	bhi.n	80081e4 <__ieee754_atan2+0x144>
 8008152:	4b32      	ldr	r3, [pc, #200]	; (800821c <__ieee754_atan2+0x17c>)
 8008154:	e7f6      	b.n	8008144 <__ieee754_atan2+0xa4>
 8008156:	4573      	cmp	r3, lr
 8008158:	d0e4      	beq.n	8008124 <__ieee754_atan2+0x84>
 800815a:	1a9b      	subs	r3, r3, r2
 800815c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008160:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008164:	da1e      	bge.n	80081a4 <__ieee754_atan2+0x104>
 8008166:	2f00      	cmp	r7, #0
 8008168:	da01      	bge.n	800816e <__ieee754_atan2+0xce>
 800816a:	323c      	adds	r2, #60	; 0x3c
 800816c:	db1e      	blt.n	80081ac <__ieee754_atan2+0x10c>
 800816e:	4632      	mov	r2, r6
 8008170:	463b      	mov	r3, r7
 8008172:	f7f8 fb73 	bl	800085c <__aeabi_ddiv>
 8008176:	ec41 0b10 	vmov	d0, r0, r1
 800817a:	f000 fab1 	bl	80086e0 <fabs>
 800817e:	f000 f90f 	bl	80083a0 <atan>
 8008182:	ec51 0b10 	vmov	r0, r1, d0
 8008186:	2c01      	cmp	r4, #1
 8008188:	d013      	beq.n	80081b2 <__ieee754_atan2+0x112>
 800818a:	2c02      	cmp	r4, #2
 800818c:	d015      	beq.n	80081ba <__ieee754_atan2+0x11a>
 800818e:	2c00      	cmp	r4, #0
 8008190:	d0a7      	beq.n	80080e2 <__ieee754_atan2+0x42>
 8008192:	a319      	add	r3, pc, #100	; (adr r3, 80081f8 <__ieee754_atan2+0x158>)
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	f7f8 f87e 	bl	8000298 <__aeabi_dsub>
 800819c:	a318      	add	r3, pc, #96	; (adr r3, 8008200 <__ieee754_atan2+0x160>)
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	e014      	b.n	80081ce <__ieee754_atan2+0x12e>
 80081a4:	a118      	add	r1, pc, #96	; (adr r1, 8008208 <__ieee754_atan2+0x168>)
 80081a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081aa:	e7ec      	b.n	8008186 <__ieee754_atan2+0xe6>
 80081ac:	2000      	movs	r0, #0
 80081ae:	2100      	movs	r1, #0
 80081b0:	e7e9      	b.n	8008186 <__ieee754_atan2+0xe6>
 80081b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081b6:	4619      	mov	r1, r3
 80081b8:	e793      	b.n	80080e2 <__ieee754_atan2+0x42>
 80081ba:	a30f      	add	r3, pc, #60	; (adr r3, 80081f8 <__ieee754_atan2+0x158>)
 80081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c0:	f7f8 f86a 	bl	8000298 <__aeabi_dsub>
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	a10d      	add	r1, pc, #52	; (adr r1, 8008200 <__ieee754_atan2+0x160>)
 80081ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081ce:	f7f8 f863 	bl	8000298 <__aeabi_dsub>
 80081d2:	e786      	b.n	80080e2 <__ieee754_atan2+0x42>
 80081d4:	a10a      	add	r1, pc, #40	; (adr r1, 8008200 <__ieee754_atan2+0x160>)
 80081d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081da:	e782      	b.n	80080e2 <__ieee754_atan2+0x42>
 80081dc:	a10c      	add	r1, pc, #48	; (adr r1, 8008210 <__ieee754_atan2+0x170>)
 80081de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081e2:	e77e      	b.n	80080e2 <__ieee754_atan2+0x42>
 80081e4:	2000      	movs	r0, #0
 80081e6:	2100      	movs	r1, #0
 80081e8:	e77b      	b.n	80080e2 <__ieee754_atan2+0x42>
 80081ea:	a107      	add	r1, pc, #28	; (adr r1, 8008208 <__ieee754_atan2+0x168>)
 80081ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081f0:	e777      	b.n	80080e2 <__ieee754_atan2+0x42>
 80081f2:	bf00      	nop
 80081f4:	f3af 8000 	nop.w
 80081f8:	33145c07 	.word	0x33145c07
 80081fc:	3ca1a626 	.word	0x3ca1a626
 8008200:	54442d18 	.word	0x54442d18
 8008204:	400921fb 	.word	0x400921fb
 8008208:	54442d18 	.word	0x54442d18
 800820c:	3ff921fb 	.word	0x3ff921fb
 8008210:	54442d18 	.word	0x54442d18
 8008214:	3fe921fb 	.word	0x3fe921fb
 8008218:	08008db8 	.word	0x08008db8
 800821c:	08008dd0 	.word	0x08008dd0
 8008220:	54442d18 	.word	0x54442d18
 8008224:	c00921fb 	.word	0xc00921fb
 8008228:	54442d18 	.word	0x54442d18
 800822c:	bff921fb 	.word	0xbff921fb
 8008230:	7ff00000 	.word	0x7ff00000

08008234 <__ieee754_sqrt>:
 8008234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008238:	ec55 4b10 	vmov	r4, r5, d0
 800823c:	4e56      	ldr	r6, [pc, #344]	; (8008398 <__ieee754_sqrt+0x164>)
 800823e:	43ae      	bics	r6, r5
 8008240:	ee10 0a10 	vmov	r0, s0
 8008244:	ee10 3a10 	vmov	r3, s0
 8008248:	4629      	mov	r1, r5
 800824a:	462a      	mov	r2, r5
 800824c:	d110      	bne.n	8008270 <__ieee754_sqrt+0x3c>
 800824e:	ee10 2a10 	vmov	r2, s0
 8008252:	462b      	mov	r3, r5
 8008254:	f7f8 f9d8 	bl	8000608 <__aeabi_dmul>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	4620      	mov	r0, r4
 800825e:	4629      	mov	r1, r5
 8008260:	f7f8 f81c 	bl	800029c <__adddf3>
 8008264:	4604      	mov	r4, r0
 8008266:	460d      	mov	r5, r1
 8008268:	ec45 4b10 	vmov	d0, r4, r5
 800826c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008270:	2d00      	cmp	r5, #0
 8008272:	dc10      	bgt.n	8008296 <__ieee754_sqrt+0x62>
 8008274:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008278:	4330      	orrs	r0, r6
 800827a:	d0f5      	beq.n	8008268 <__ieee754_sqrt+0x34>
 800827c:	b15d      	cbz	r5, 8008296 <__ieee754_sqrt+0x62>
 800827e:	ee10 2a10 	vmov	r2, s0
 8008282:	462b      	mov	r3, r5
 8008284:	ee10 0a10 	vmov	r0, s0
 8008288:	f7f8 f806 	bl	8000298 <__aeabi_dsub>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	f7f8 fae4 	bl	800085c <__aeabi_ddiv>
 8008294:	e7e6      	b.n	8008264 <__ieee754_sqrt+0x30>
 8008296:	1509      	asrs	r1, r1, #20
 8008298:	d076      	beq.n	8008388 <__ieee754_sqrt+0x154>
 800829a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800829e:	07ce      	lsls	r6, r1, #31
 80082a0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80082a4:	bf5e      	ittt	pl
 80082a6:	0fda      	lsrpl	r2, r3, #31
 80082a8:	005b      	lslpl	r3, r3, #1
 80082aa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80082ae:	0fda      	lsrs	r2, r3, #31
 80082b0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80082b4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80082b8:	2000      	movs	r0, #0
 80082ba:	106d      	asrs	r5, r5, #1
 80082bc:	005b      	lsls	r3, r3, #1
 80082be:	f04f 0e16 	mov.w	lr, #22
 80082c2:	4684      	mov	ip, r0
 80082c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082c8:	eb0c 0401 	add.w	r4, ip, r1
 80082cc:	4294      	cmp	r4, r2
 80082ce:	bfde      	ittt	le
 80082d0:	1b12      	suble	r2, r2, r4
 80082d2:	eb04 0c01 	addle.w	ip, r4, r1
 80082d6:	1840      	addle	r0, r0, r1
 80082d8:	0052      	lsls	r2, r2, #1
 80082da:	f1be 0e01 	subs.w	lr, lr, #1
 80082de:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80082e2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80082e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80082ea:	d1ed      	bne.n	80082c8 <__ieee754_sqrt+0x94>
 80082ec:	4671      	mov	r1, lr
 80082ee:	2720      	movs	r7, #32
 80082f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80082f4:	4562      	cmp	r2, ip
 80082f6:	eb04 060e 	add.w	r6, r4, lr
 80082fa:	dc02      	bgt.n	8008302 <__ieee754_sqrt+0xce>
 80082fc:	d113      	bne.n	8008326 <__ieee754_sqrt+0xf2>
 80082fe:	429e      	cmp	r6, r3
 8008300:	d811      	bhi.n	8008326 <__ieee754_sqrt+0xf2>
 8008302:	2e00      	cmp	r6, #0
 8008304:	eb06 0e04 	add.w	lr, r6, r4
 8008308:	da43      	bge.n	8008392 <__ieee754_sqrt+0x15e>
 800830a:	f1be 0f00 	cmp.w	lr, #0
 800830e:	db40      	blt.n	8008392 <__ieee754_sqrt+0x15e>
 8008310:	f10c 0801 	add.w	r8, ip, #1
 8008314:	eba2 020c 	sub.w	r2, r2, ip
 8008318:	429e      	cmp	r6, r3
 800831a:	bf88      	it	hi
 800831c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8008320:	1b9b      	subs	r3, r3, r6
 8008322:	4421      	add	r1, r4
 8008324:	46c4      	mov	ip, r8
 8008326:	0052      	lsls	r2, r2, #1
 8008328:	3f01      	subs	r7, #1
 800832a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800832e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008332:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008336:	d1dd      	bne.n	80082f4 <__ieee754_sqrt+0xc0>
 8008338:	4313      	orrs	r3, r2
 800833a:	d006      	beq.n	800834a <__ieee754_sqrt+0x116>
 800833c:	1c4c      	adds	r4, r1, #1
 800833e:	bf13      	iteet	ne
 8008340:	3101      	addne	r1, #1
 8008342:	3001      	addeq	r0, #1
 8008344:	4639      	moveq	r1, r7
 8008346:	f021 0101 	bicne.w	r1, r1, #1
 800834a:	1043      	asrs	r3, r0, #1
 800834c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008350:	0849      	lsrs	r1, r1, #1
 8008352:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008356:	07c2      	lsls	r2, r0, #31
 8008358:	bf48      	it	mi
 800835a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800835e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8008362:	460c      	mov	r4, r1
 8008364:	463d      	mov	r5, r7
 8008366:	e77f      	b.n	8008268 <__ieee754_sqrt+0x34>
 8008368:	0ada      	lsrs	r2, r3, #11
 800836a:	3815      	subs	r0, #21
 800836c:	055b      	lsls	r3, r3, #21
 800836e:	2a00      	cmp	r2, #0
 8008370:	d0fa      	beq.n	8008368 <__ieee754_sqrt+0x134>
 8008372:	02d7      	lsls	r7, r2, #11
 8008374:	d50a      	bpl.n	800838c <__ieee754_sqrt+0x158>
 8008376:	f1c1 0420 	rsb	r4, r1, #32
 800837a:	fa23 f404 	lsr.w	r4, r3, r4
 800837e:	1e4d      	subs	r5, r1, #1
 8008380:	408b      	lsls	r3, r1
 8008382:	4322      	orrs	r2, r4
 8008384:	1b41      	subs	r1, r0, r5
 8008386:	e788      	b.n	800829a <__ieee754_sqrt+0x66>
 8008388:	4608      	mov	r0, r1
 800838a:	e7f0      	b.n	800836e <__ieee754_sqrt+0x13a>
 800838c:	0052      	lsls	r2, r2, #1
 800838e:	3101      	adds	r1, #1
 8008390:	e7ef      	b.n	8008372 <__ieee754_sqrt+0x13e>
 8008392:	46e0      	mov	r8, ip
 8008394:	e7be      	b.n	8008314 <__ieee754_sqrt+0xe0>
 8008396:	bf00      	nop
 8008398:	7ff00000 	.word	0x7ff00000
 800839c:	00000000 	.word	0x00000000

080083a0 <atan>:
 80083a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a4:	ec55 4b10 	vmov	r4, r5, d0
 80083a8:	4bc3      	ldr	r3, [pc, #780]	; (80086b8 <atan+0x318>)
 80083aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80083ae:	429e      	cmp	r6, r3
 80083b0:	46ab      	mov	fp, r5
 80083b2:	dd18      	ble.n	80083e6 <atan+0x46>
 80083b4:	4bc1      	ldr	r3, [pc, #772]	; (80086bc <atan+0x31c>)
 80083b6:	429e      	cmp	r6, r3
 80083b8:	dc01      	bgt.n	80083be <atan+0x1e>
 80083ba:	d109      	bne.n	80083d0 <atan+0x30>
 80083bc:	b144      	cbz	r4, 80083d0 <atan+0x30>
 80083be:	4622      	mov	r2, r4
 80083c0:	462b      	mov	r3, r5
 80083c2:	4620      	mov	r0, r4
 80083c4:	4629      	mov	r1, r5
 80083c6:	f7f7 ff69 	bl	800029c <__adddf3>
 80083ca:	4604      	mov	r4, r0
 80083cc:	460d      	mov	r5, r1
 80083ce:	e006      	b.n	80083de <atan+0x3e>
 80083d0:	f1bb 0f00 	cmp.w	fp, #0
 80083d4:	f300 8131 	bgt.w	800863a <atan+0x29a>
 80083d8:	a59b      	add	r5, pc, #620	; (adr r5, 8008648 <atan+0x2a8>)
 80083da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80083de:	ec45 4b10 	vmov	d0, r4, r5
 80083e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e6:	4bb6      	ldr	r3, [pc, #728]	; (80086c0 <atan+0x320>)
 80083e8:	429e      	cmp	r6, r3
 80083ea:	dc14      	bgt.n	8008416 <atan+0x76>
 80083ec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80083f0:	429e      	cmp	r6, r3
 80083f2:	dc0d      	bgt.n	8008410 <atan+0x70>
 80083f4:	a396      	add	r3, pc, #600	; (adr r3, 8008650 <atan+0x2b0>)
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	ee10 0a10 	vmov	r0, s0
 80083fe:	4629      	mov	r1, r5
 8008400:	f7f7 ff4c 	bl	800029c <__adddf3>
 8008404:	4baf      	ldr	r3, [pc, #700]	; (80086c4 <atan+0x324>)
 8008406:	2200      	movs	r2, #0
 8008408:	f7f8 fb8e 	bl	8000b28 <__aeabi_dcmpgt>
 800840c:	2800      	cmp	r0, #0
 800840e:	d1e6      	bne.n	80083de <atan+0x3e>
 8008410:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008414:	e02b      	b.n	800846e <atan+0xce>
 8008416:	f000 f963 	bl	80086e0 <fabs>
 800841a:	4bab      	ldr	r3, [pc, #684]	; (80086c8 <atan+0x328>)
 800841c:	429e      	cmp	r6, r3
 800841e:	ec55 4b10 	vmov	r4, r5, d0
 8008422:	f300 80bf 	bgt.w	80085a4 <atan+0x204>
 8008426:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800842a:	429e      	cmp	r6, r3
 800842c:	f300 80a0 	bgt.w	8008570 <atan+0x1d0>
 8008430:	ee10 2a10 	vmov	r2, s0
 8008434:	ee10 0a10 	vmov	r0, s0
 8008438:	462b      	mov	r3, r5
 800843a:	4629      	mov	r1, r5
 800843c:	f7f7 ff2e 	bl	800029c <__adddf3>
 8008440:	4ba0      	ldr	r3, [pc, #640]	; (80086c4 <atan+0x324>)
 8008442:	2200      	movs	r2, #0
 8008444:	f7f7 ff28 	bl	8000298 <__aeabi_dsub>
 8008448:	2200      	movs	r2, #0
 800844a:	4606      	mov	r6, r0
 800844c:	460f      	mov	r7, r1
 800844e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008452:	4620      	mov	r0, r4
 8008454:	4629      	mov	r1, r5
 8008456:	f7f7 ff21 	bl	800029c <__adddf3>
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	4630      	mov	r0, r6
 8008460:	4639      	mov	r1, r7
 8008462:	f7f8 f9fb 	bl	800085c <__aeabi_ddiv>
 8008466:	f04f 0a00 	mov.w	sl, #0
 800846a:	4604      	mov	r4, r0
 800846c:	460d      	mov	r5, r1
 800846e:	4622      	mov	r2, r4
 8008470:	462b      	mov	r3, r5
 8008472:	4620      	mov	r0, r4
 8008474:	4629      	mov	r1, r5
 8008476:	f7f8 f8c7 	bl	8000608 <__aeabi_dmul>
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	4680      	mov	r8, r0
 8008480:	4689      	mov	r9, r1
 8008482:	f7f8 f8c1 	bl	8000608 <__aeabi_dmul>
 8008486:	a374      	add	r3, pc, #464	; (adr r3, 8008658 <atan+0x2b8>)
 8008488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848c:	4606      	mov	r6, r0
 800848e:	460f      	mov	r7, r1
 8008490:	f7f8 f8ba 	bl	8000608 <__aeabi_dmul>
 8008494:	a372      	add	r3, pc, #456	; (adr r3, 8008660 <atan+0x2c0>)
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	f7f7 feff 	bl	800029c <__adddf3>
 800849e:	4632      	mov	r2, r6
 80084a0:	463b      	mov	r3, r7
 80084a2:	f7f8 f8b1 	bl	8000608 <__aeabi_dmul>
 80084a6:	a370      	add	r3, pc, #448	; (adr r3, 8008668 <atan+0x2c8>)
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	f7f7 fef6 	bl	800029c <__adddf3>
 80084b0:	4632      	mov	r2, r6
 80084b2:	463b      	mov	r3, r7
 80084b4:	f7f8 f8a8 	bl	8000608 <__aeabi_dmul>
 80084b8:	a36d      	add	r3, pc, #436	; (adr r3, 8008670 <atan+0x2d0>)
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	f7f7 feed 	bl	800029c <__adddf3>
 80084c2:	4632      	mov	r2, r6
 80084c4:	463b      	mov	r3, r7
 80084c6:	f7f8 f89f 	bl	8000608 <__aeabi_dmul>
 80084ca:	a36b      	add	r3, pc, #428	; (adr r3, 8008678 <atan+0x2d8>)
 80084cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d0:	f7f7 fee4 	bl	800029c <__adddf3>
 80084d4:	4632      	mov	r2, r6
 80084d6:	463b      	mov	r3, r7
 80084d8:	f7f8 f896 	bl	8000608 <__aeabi_dmul>
 80084dc:	a368      	add	r3, pc, #416	; (adr r3, 8008680 <atan+0x2e0>)
 80084de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e2:	f7f7 fedb 	bl	800029c <__adddf3>
 80084e6:	4642      	mov	r2, r8
 80084e8:	464b      	mov	r3, r9
 80084ea:	f7f8 f88d 	bl	8000608 <__aeabi_dmul>
 80084ee:	a366      	add	r3, pc, #408	; (adr r3, 8008688 <atan+0x2e8>)
 80084f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f4:	4680      	mov	r8, r0
 80084f6:	4689      	mov	r9, r1
 80084f8:	4630      	mov	r0, r6
 80084fa:	4639      	mov	r1, r7
 80084fc:	f7f8 f884 	bl	8000608 <__aeabi_dmul>
 8008500:	a363      	add	r3, pc, #396	; (adr r3, 8008690 <atan+0x2f0>)
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	f7f7 fec7 	bl	8000298 <__aeabi_dsub>
 800850a:	4632      	mov	r2, r6
 800850c:	463b      	mov	r3, r7
 800850e:	f7f8 f87b 	bl	8000608 <__aeabi_dmul>
 8008512:	a361      	add	r3, pc, #388	; (adr r3, 8008698 <atan+0x2f8>)
 8008514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008518:	f7f7 febe 	bl	8000298 <__aeabi_dsub>
 800851c:	4632      	mov	r2, r6
 800851e:	463b      	mov	r3, r7
 8008520:	f7f8 f872 	bl	8000608 <__aeabi_dmul>
 8008524:	a35e      	add	r3, pc, #376	; (adr r3, 80086a0 <atan+0x300>)
 8008526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852a:	f7f7 feb5 	bl	8000298 <__aeabi_dsub>
 800852e:	4632      	mov	r2, r6
 8008530:	463b      	mov	r3, r7
 8008532:	f7f8 f869 	bl	8000608 <__aeabi_dmul>
 8008536:	a35c      	add	r3, pc, #368	; (adr r3, 80086a8 <atan+0x308>)
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	f7f7 feac 	bl	8000298 <__aeabi_dsub>
 8008540:	4632      	mov	r2, r6
 8008542:	463b      	mov	r3, r7
 8008544:	f7f8 f860 	bl	8000608 <__aeabi_dmul>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4640      	mov	r0, r8
 800854e:	4649      	mov	r1, r9
 8008550:	f7f7 fea4 	bl	800029c <__adddf3>
 8008554:	4622      	mov	r2, r4
 8008556:	462b      	mov	r3, r5
 8008558:	f7f8 f856 	bl	8000608 <__aeabi_dmul>
 800855c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	d14b      	bne.n	80085fe <atan+0x25e>
 8008566:	4620      	mov	r0, r4
 8008568:	4629      	mov	r1, r5
 800856a:	f7f7 fe95 	bl	8000298 <__aeabi_dsub>
 800856e:	e72c      	b.n	80083ca <atan+0x2a>
 8008570:	ee10 0a10 	vmov	r0, s0
 8008574:	4b53      	ldr	r3, [pc, #332]	; (80086c4 <atan+0x324>)
 8008576:	2200      	movs	r2, #0
 8008578:	4629      	mov	r1, r5
 800857a:	f7f7 fe8d 	bl	8000298 <__aeabi_dsub>
 800857e:	4b51      	ldr	r3, [pc, #324]	; (80086c4 <atan+0x324>)
 8008580:	4606      	mov	r6, r0
 8008582:	460f      	mov	r7, r1
 8008584:	2200      	movs	r2, #0
 8008586:	4620      	mov	r0, r4
 8008588:	4629      	mov	r1, r5
 800858a:	f7f7 fe87 	bl	800029c <__adddf3>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	4630      	mov	r0, r6
 8008594:	4639      	mov	r1, r7
 8008596:	f7f8 f961 	bl	800085c <__aeabi_ddiv>
 800859a:	f04f 0a01 	mov.w	sl, #1
 800859e:	4604      	mov	r4, r0
 80085a0:	460d      	mov	r5, r1
 80085a2:	e764      	b.n	800846e <atan+0xce>
 80085a4:	4b49      	ldr	r3, [pc, #292]	; (80086cc <atan+0x32c>)
 80085a6:	429e      	cmp	r6, r3
 80085a8:	da1d      	bge.n	80085e6 <atan+0x246>
 80085aa:	ee10 0a10 	vmov	r0, s0
 80085ae:	4b48      	ldr	r3, [pc, #288]	; (80086d0 <atan+0x330>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	4629      	mov	r1, r5
 80085b4:	f7f7 fe70 	bl	8000298 <__aeabi_dsub>
 80085b8:	4b45      	ldr	r3, [pc, #276]	; (80086d0 <atan+0x330>)
 80085ba:	4606      	mov	r6, r0
 80085bc:	460f      	mov	r7, r1
 80085be:	2200      	movs	r2, #0
 80085c0:	4620      	mov	r0, r4
 80085c2:	4629      	mov	r1, r5
 80085c4:	f7f8 f820 	bl	8000608 <__aeabi_dmul>
 80085c8:	4b3e      	ldr	r3, [pc, #248]	; (80086c4 <atan+0x324>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	f7f7 fe66 	bl	800029c <__adddf3>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4630      	mov	r0, r6
 80085d6:	4639      	mov	r1, r7
 80085d8:	f7f8 f940 	bl	800085c <__aeabi_ddiv>
 80085dc:	f04f 0a02 	mov.w	sl, #2
 80085e0:	4604      	mov	r4, r0
 80085e2:	460d      	mov	r5, r1
 80085e4:	e743      	b.n	800846e <atan+0xce>
 80085e6:	462b      	mov	r3, r5
 80085e8:	ee10 2a10 	vmov	r2, s0
 80085ec:	4939      	ldr	r1, [pc, #228]	; (80086d4 <atan+0x334>)
 80085ee:	2000      	movs	r0, #0
 80085f0:	f7f8 f934 	bl	800085c <__aeabi_ddiv>
 80085f4:	f04f 0a03 	mov.w	sl, #3
 80085f8:	4604      	mov	r4, r0
 80085fa:	460d      	mov	r5, r1
 80085fc:	e737      	b.n	800846e <atan+0xce>
 80085fe:	4b36      	ldr	r3, [pc, #216]	; (80086d8 <atan+0x338>)
 8008600:	4e36      	ldr	r6, [pc, #216]	; (80086dc <atan+0x33c>)
 8008602:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008606:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800860a:	e9da 2300 	ldrd	r2, r3, [sl]
 800860e:	f7f7 fe43 	bl	8000298 <__aeabi_dsub>
 8008612:	4622      	mov	r2, r4
 8008614:	462b      	mov	r3, r5
 8008616:	f7f7 fe3f 	bl	8000298 <__aeabi_dsub>
 800861a:	4602      	mov	r2, r0
 800861c:	460b      	mov	r3, r1
 800861e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008622:	f7f7 fe39 	bl	8000298 <__aeabi_dsub>
 8008626:	f1bb 0f00 	cmp.w	fp, #0
 800862a:	4604      	mov	r4, r0
 800862c:	460d      	mov	r5, r1
 800862e:	f6bf aed6 	bge.w	80083de <atan+0x3e>
 8008632:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008636:	461d      	mov	r5, r3
 8008638:	e6d1      	b.n	80083de <atan+0x3e>
 800863a:	a51d      	add	r5, pc, #116	; (adr r5, 80086b0 <atan+0x310>)
 800863c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008640:	e6cd      	b.n	80083de <atan+0x3e>
 8008642:	bf00      	nop
 8008644:	f3af 8000 	nop.w
 8008648:	54442d18 	.word	0x54442d18
 800864c:	bff921fb 	.word	0xbff921fb
 8008650:	8800759c 	.word	0x8800759c
 8008654:	7e37e43c 	.word	0x7e37e43c
 8008658:	e322da11 	.word	0xe322da11
 800865c:	3f90ad3a 	.word	0x3f90ad3a
 8008660:	24760deb 	.word	0x24760deb
 8008664:	3fa97b4b 	.word	0x3fa97b4b
 8008668:	a0d03d51 	.word	0xa0d03d51
 800866c:	3fb10d66 	.word	0x3fb10d66
 8008670:	c54c206e 	.word	0xc54c206e
 8008674:	3fb745cd 	.word	0x3fb745cd
 8008678:	920083ff 	.word	0x920083ff
 800867c:	3fc24924 	.word	0x3fc24924
 8008680:	5555550d 	.word	0x5555550d
 8008684:	3fd55555 	.word	0x3fd55555
 8008688:	2c6a6c2f 	.word	0x2c6a6c2f
 800868c:	bfa2b444 	.word	0xbfa2b444
 8008690:	52defd9a 	.word	0x52defd9a
 8008694:	3fadde2d 	.word	0x3fadde2d
 8008698:	af749a6d 	.word	0xaf749a6d
 800869c:	3fb3b0f2 	.word	0x3fb3b0f2
 80086a0:	fe231671 	.word	0xfe231671
 80086a4:	3fbc71c6 	.word	0x3fbc71c6
 80086a8:	9998ebc4 	.word	0x9998ebc4
 80086ac:	3fc99999 	.word	0x3fc99999
 80086b0:	54442d18 	.word	0x54442d18
 80086b4:	3ff921fb 	.word	0x3ff921fb
 80086b8:	440fffff 	.word	0x440fffff
 80086bc:	7ff00000 	.word	0x7ff00000
 80086c0:	3fdbffff 	.word	0x3fdbffff
 80086c4:	3ff00000 	.word	0x3ff00000
 80086c8:	3ff2ffff 	.word	0x3ff2ffff
 80086cc:	40038000 	.word	0x40038000
 80086d0:	3ff80000 	.word	0x3ff80000
 80086d4:	bff00000 	.word	0xbff00000
 80086d8:	08008e08 	.word	0x08008e08
 80086dc:	08008de8 	.word	0x08008de8

080086e0 <fabs>:
 80086e0:	ec51 0b10 	vmov	r0, r1, d0
 80086e4:	ee10 2a10 	vmov	r2, s0
 80086e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80086ec:	ec43 2b10 	vmov	d0, r2, r3
 80086f0:	4770      	bx	lr
 80086f2:	0000      	movs	r0, r0
 80086f4:	0000      	movs	r0, r0
	...

080086f8 <nan>:
 80086f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008700 <nan+0x8>
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	00000000 	.word	0x00000000
 8008704:	7ff80000 	.word	0x7ff80000

08008708 <_init>:
 8008708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870a:	bf00      	nop
 800870c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870e:	bc08      	pop	{r3}
 8008710:	469e      	mov	lr, r3
 8008712:	4770      	bx	lr

08008714 <_fini>:
 8008714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008716:	bf00      	nop
 8008718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800871a:	bc08      	pop	{r3}
 800871c:	469e      	mov	lr, r3
 800871e:	4770      	bx	lr
