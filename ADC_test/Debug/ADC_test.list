
ADC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a008  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800a1a8  0800a1a8  0001a1a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a650  0800a650  000221f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a650  0800a650  0001a650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a658  0800a658  000221f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a658  0800a658  0001a658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a65c  0800a65c  0001a65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000021f0  20000000  0800a660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022e8  200021f0  0800c850  000221f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200044d8  0800c850  000244d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000221f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015483  00000000  00000000  00022220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029cd  00000000  00000000  000376a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0003a070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  0003b138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033ca  00000000  00000000  0003c108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134a9  00000000  00000000  0003f4d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009db33  00000000  00000000  0005297b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f04ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a68  00000000  00000000  000f0504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200021f0 	.word	0x200021f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a190 	.word	0x0800a190

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200021f4 	.word	0x200021f4
 80001dc:	0800a190 	.word	0x0800a190

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <bmi270_spi_init>:
uint16_t factor_zx_div = 512; //2^9

/*
 * @brief Initialization sequence for BMI270 as described on p. 20 in datasheet.
 */
void bmi270_spi_init() {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
	uint8_t chip_id = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4814      	ldr	r0, [pc, #80]	; (8000fb0 <bmi270_spi_init+0x60>)
 8000f60:	f003 fa94 	bl	800448c <HAL_GPIO_WritePin>
	chip_id = bmi270_spi_read_8(0x00);
 8000f64:	2000      	movs	r0, #0
 8000f66:	f000 f919 	bl	800119c <bmi270_spi_read_8>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
	if (chip_id != 0x24) {
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b24      	cmp	r3, #36	; 0x24
 8000f72:	d118      	bne.n	8000fa6 <bmi270_spi_init+0x56>
		if(!USE_IMU_VIS){
			bmi270_print(0x0000);
		}

	} else if (chip_id == 0x24) {
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b24      	cmp	r3, #36	; 0x24
 8000f78:	d115      	bne.n	8000fa6 <bmi270_spi_init+0x56>
		if(!USE_IMU_VIS){
			bmi270_print(0xFF00);
		}

		bmi270_spi_write_8(REG_PWR_CONF, 0x00); //Disable PWR_CONF.adv_power_save
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	207c      	movs	r0, #124	; 0x7c
 8000f7e:	f000 f8a9 	bl	80010d4 <bmi270_spi_write_8>
		HAL_Delay(1);								//wait for 450us
 8000f82:	2001      	movs	r0, #1
 8000f84:	f002 fa64 	bl	8003450 <HAL_Delay>
		bmi270_spi_write_8(REG_INIT_CTRL, 0x00); //prepare config load INIT_CTRL = 0x00
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2059      	movs	r0, #89	; 0x59
 8000f8c:	f000 f8a2 	bl	80010d4 <bmi270_spi_write_8>
		bmi270_spi_write_burst(REG_INIT_DATA, bmi270_config_file,
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <bmi270_spi_init+0x64>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	; (8000fb8 <bmi270_spi_init+0x68>)
 8000f98:	205e      	movs	r0, #94	; 0x5e
 8000f9a:	f000 f8c7 	bl	800112c <bmi270_spi_write_burst>
				bmi270_config_size); //burst write to reg INIT_DATA. Start with byte 0.
		bmi270_spi_write_8(REG_INIT_CTRL, 0x01);//complete config load INIT_CTRL = 0x01
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	2059      	movs	r0, #89	; 0x59
 8000fa2:	f000 f897 	bl	80010d4 <bmi270_spi_write_8>
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020400 	.word	0x40020400
 8000fb4:	20002000 	.word	0x20002000
 8000fb8:	20000000 	.word	0x20000000

08000fbc <bmi270_pwr_conf>:
 *@param Power mode:
 *			0 = low power mode
 *			1 = normal power mode
 *			2 = performance power mode
 */
void bmi270_pwr_conf(uint8_t pwr_mode) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	if (pwr_mode == BMI270_PWR_MODE_LOW) {
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10c      	bne.n	8000fe6 <bmi270_pwr_conf+0x2a>
		bmi270_spi_write_8(REG_PWR_CTRL, 0x04); //enable acquisiton of acceleration data. disable the auxiliary interface, gyroscope data, temperature sensor data
 8000fcc:	2104      	movs	r1, #4
 8000fce:	207d      	movs	r0, #125	; 0x7d
 8000fd0:	f000 f880 	bl	80010d4 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_ACC_CONF, 0x17); //disable the acc_filter_perf bit; set acc_bwp to 2 repetitions; set acc_odr to 50 Hz
 8000fd4:	2117      	movs	r1, #23
 8000fd6:	2040      	movs	r0, #64	; 0x40
 8000fd8:	f000 f87c 	bl	80010d4 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_PWR_CONF, 0x03); //enable the adv_power_save bit; leave the fifo_self_wakeup enabled
 8000fdc:	2103      	movs	r1, #3
 8000fde:	207c      	movs	r0, #124	; 0x7c
 8000fe0:	f000 f878 	bl	80010d4 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_PWR_CTRL, 0x0E); //enable acquisiton of acceleration, gyroscope and temperature sensor data. disable the auxiliary interface.
		bmi270_spi_write_8(REG_ACC_CONF, 0xA8); //enable the acc_filter_perf bit; set acc_bwp to normal mode; set acc_odr to 100 Hz
		bmi270_spi_write_8(REG_GYR_CONF, 0xE9); //enable the gyr_filter_perf bit; enable gyr_noise_perf bit; set gyr_bwp to normal mode; set gyr_odr to 200 Hz
		bmi270_spi_write_8(REG_PWR_CONF, 0x02); //disable the adv_power_save bit; leave the fifo_self_wakeup enabled
	}
}
 8000fe4:	e026      	b.n	8001034 <bmi270_pwr_conf+0x78>
	} else if (pwr_mode == BMI270_PWR_MODE_NORM) {
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d110      	bne.n	800100e <bmi270_pwr_conf+0x52>
		bmi270_spi_write_8(REG_PWR_CTRL, 0x0E); //enable acquisiton of acceleration, gyroscope and temperature sensor data. disable the auxiliary interface.
 8000fec:	210e      	movs	r1, #14
 8000fee:	207d      	movs	r0, #125	; 0x7d
 8000ff0:	f000 f870 	bl	80010d4 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_ACC_CONF, 0xA8); //enable the acc_filter_perf bit; set acc_bwp to normal mode; set acc_odr to 100 Hz
 8000ff4:	21a8      	movs	r1, #168	; 0xa8
 8000ff6:	2040      	movs	r0, #64	; 0x40
 8000ff8:	f000 f86c 	bl	80010d4 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_GYR_CONF, 0xA9); //enable the gyr_filter_perf bit; set gyr_bwp to normal mode; set gyr_odr to 200 Hz
 8000ffc:	21a9      	movs	r1, #169	; 0xa9
 8000ffe:	2042      	movs	r0, #66	; 0x42
 8001000:	f000 f868 	bl	80010d4 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_PWR_CONF, 0x02); //disable the adv_power_save bit; leave the fifo_self_wakeup enabled
 8001004:	2102      	movs	r1, #2
 8001006:	207c      	movs	r0, #124	; 0x7c
 8001008:	f000 f864 	bl	80010d4 <bmi270_spi_write_8>
}
 800100c:	e012      	b.n	8001034 <bmi270_pwr_conf+0x78>
	} else if (pwr_mode == BMI270_PWR_MODE_PERF) {
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	2b02      	cmp	r3, #2
 8001012:	d10f      	bne.n	8001034 <bmi270_pwr_conf+0x78>
		bmi270_spi_write_8(REG_PWR_CTRL, 0x0E); //enable acquisiton of acceleration, gyroscope and temperature sensor data. disable the auxiliary interface.
 8001014:	210e      	movs	r1, #14
 8001016:	207d      	movs	r0, #125	; 0x7d
 8001018:	f000 f85c 	bl	80010d4 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_ACC_CONF, 0xA8); //enable the acc_filter_perf bit; set acc_bwp to normal mode; set acc_odr to 100 Hz
 800101c:	21a8      	movs	r1, #168	; 0xa8
 800101e:	2040      	movs	r0, #64	; 0x40
 8001020:	f000 f858 	bl	80010d4 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_GYR_CONF, 0xE9); //enable the gyr_filter_perf bit; enable gyr_noise_perf bit; set gyr_bwp to normal mode; set gyr_odr to 200 Hz
 8001024:	21e9      	movs	r1, #233	; 0xe9
 8001026:	2042      	movs	r0, #66	; 0x42
 8001028:	f000 f854 	bl	80010d4 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_PWR_CONF, 0x02); //disable the adv_power_save bit; leave the fifo_self_wakeup enabled
 800102c:	2102      	movs	r1, #2
 800102e:	207c      	movs	r0, #124	; 0x7c
 8001030:	f000 f850 	bl	80010d4 <bmi270_spi_write_8>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <bmi270_read_gyro>:

/*
 * @brief Read 2 bytes of gyroscope data in dps from the BMI270
 * @param Which axis to read
 */
uint16_t bmi270_read_gyro(uint8_t axis){
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	uint16_t data;
	data = bmi270_spi_read_8(2 * axis + REG_DATA_14);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	3309      	adds	r3, #9
 800104a:	b2db      	uxtb	r3, r3
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f8a3 	bl	800119c <bmi270_spi_read_8>
 8001056:	4603      	mov	r3, r0
 8001058:	81fb      	strh	r3, [r7, #14]
	data |= bmi270_spi_read_8(2 * axis + REG_DATA_14 + 1)<<8;
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	3309      	adds	r3, #9
 800105e:	b2db      	uxtb	r3, r3
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	b2db      	uxtb	r3, r3
 8001064:	3301      	adds	r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f897 	bl	800119c <bmi270_spi_read_8>
 800106e:	4603      	mov	r3, r0
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001078:	4313      	orrs	r3, r2
 800107a:	b21b      	sxth	r3, r3
 800107c:	81fb      	strh	r3, [r7, #14]
	return data;
 800107e:	89fb      	ldrh	r3, [r7, #14]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <bmi270_read_accel>:

/*
 * @brief Read 2 bytes of accelerometer data in dps from the BMI270
 * @param Which axis to read
 */
uint16_t bmi270_read_accel(uint8_t axis){
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	uint16_t data;
	data = bmi270_spi_read_8(2 * axis + REG_DATA_8);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	3306      	adds	r3, #6
 8001096:	b2db      	uxtb	r3, r3
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	b2db      	uxtb	r3, r3
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f87d 	bl	800119c <bmi270_spi_read_8>
 80010a2:	4603      	mov	r3, r0
 80010a4:	81fb      	strh	r3, [r7, #14]
	data |= (bmi270_spi_read_8(2 * axis + REG_DATA_8 + 1)<<8);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	3306      	adds	r3, #6
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	3301      	adds	r3, #1
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f871 	bl	800119c <bmi270_spi_read_8>
 80010ba:	4603      	mov	r3, r0
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	81fb      	strh	r3, [r7, #14]
	return data;
 80010ca:	89fb      	ldrh	r3, [r7, #14]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <bmi270_spi_write_8>:
/*
 * @brief Writes 8 bits of data to SDI -pin on BMI270.
 * @param Which BMI270-register to perform the read on
 * @param 8-bit data to be written into the selected register
 */
void bmi270_spi_write_8(uint8_t reg, uint8_t data) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	460a      	mov	r2, r1
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = reg | 0x00; //write command
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2101      	movs	r1, #1
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <bmi270_spi_write_8+0x50>)
 80010ee:	f003 f9cd 	bl	800448c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80010f2:	f107 010f 	add.w	r1, r7, #15
 80010f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010fa:	2201      	movs	r2, #1
 80010fc:	480a      	ldr	r0, [pc, #40]	; (8001128 <bmi270_spi_write_8+0x54>)
 80010fe:	f003 fedc 	bl	8004eba <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 8001102:	1db9      	adds	r1, r7, #6
 8001104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001108:	2201      	movs	r2, #1
 800110a:	4807      	ldr	r0, [pc, #28]	; (8001128 <bmi270_spi_write_8+0x54>)
 800110c:	f003 fed5 	bl	8004eba <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2101      	movs	r1, #1
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <bmi270_spi_write_8+0x50>)
 8001116:	f003 f9b9 	bl	800448c <HAL_GPIO_WritePin>
}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40020400 	.word	0x40020400
 8001128:	200043d4 	.word	0x200043d4

0800112c <bmi270_spi_write_burst>:
 * @brief Writes burst of 8-bit array to SDI-pin on BMI270.
 * @param Which BMI270-register to perform the read on
 * @param Array to be written into the selected register
 * @param Size of input array (pre-defined)
 */
void bmi270_spi_write_burst(uint8_t reg, uint8_t data[], uint16_t data_size) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	4613      	mov	r3, r2
 800113a:	80bb      	strh	r3, [r7, #4]
	uint8_t cmd = reg | 0x00; //write command
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	737b      	strb	r3, [r7, #13]
	uint16_t i;

	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2101      	movs	r1, #1
 8001144:	4813      	ldr	r0, [pc, #76]	; (8001194 <bmi270_spi_write_burst+0x68>)
 8001146:	f003 f9a1 	bl	800448c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 800114a:	f107 010d 	add.w	r1, r7, #13
 800114e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001152:	2201      	movs	r2, #1
 8001154:	4810      	ldr	r0, [pc, #64]	; (8001198 <bmi270_spi_write_burst+0x6c>)
 8001156:	f003 feb0 	bl	8004eba <HAL_SPI_Transmit>
	for (i = 0; i < data_size; i++) {
 800115a:	2300      	movs	r3, #0
 800115c:	81fb      	strh	r3, [r7, #14]
 800115e:	e00b      	b.n	8001178 <bmi270_spi_write_burst+0x4c>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) &data[i], 1, 0xFFFF);
 8001160:	89fb      	ldrh	r3, [r7, #14]
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	18d1      	adds	r1, r2, r3
 8001166:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800116a:	2201      	movs	r2, #1
 800116c:	480a      	ldr	r0, [pc, #40]	; (8001198 <bmi270_spi_write_burst+0x6c>)
 800116e:	f003 fea4 	bl	8004eba <HAL_SPI_Transmit>
	for (i = 0; i < data_size; i++) {
 8001172:	89fb      	ldrh	r3, [r7, #14]
 8001174:	3301      	adds	r3, #1
 8001176:	81fb      	strh	r3, [r7, #14]
 8001178:	89fa      	ldrh	r2, [r7, #14]
 800117a:	88bb      	ldrh	r3, [r7, #4]
 800117c:	429a      	cmp	r2, r3
 800117e:	d3ef      	bcc.n	8001160 <bmi270_spi_write_burst+0x34>
	}
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	2101      	movs	r1, #1
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <bmi270_spi_write_burst+0x68>)
 8001186:	f003 f981 	bl	800448c <HAL_GPIO_WritePin>
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40020400 	.word	0x40020400
 8001198:	200043d4 	.word	0x200043d4

0800119c <bmi270_spi_read_8>:

/*
 * @brief Read 8 bits of data from SDO-pin on BMI270.
 * @param Which BMI270-register to perform the read on
 */
uint8_t bmi270_spi_read_8(uint8_t reg) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy = 0x00;
 80011a6:	2300      	movs	r3, #0
 80011a8:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0x00;
 80011aa:	2300      	movs	r3, #0
 80011ac:	73bb      	strb	r3, [r7, #14]
	uint8_t cmd = reg | 0x80;
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2101      	movs	r1, #1
 80011bc:	4812      	ldr	r0, [pc, #72]	; (8001208 <bmi270_spi_read_8+0x6c>)
 80011be:	f003 f965 	bl	800448c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &cmd, 1, 0xFFFF);
 80011c2:	f107 010d 	add.w	r1, r7, #13
 80011c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ca:	2201      	movs	r2, #1
 80011cc:	480f      	ldr	r0, [pc, #60]	; (800120c <bmi270_spi_read_8+0x70>)
 80011ce:	f003 fe74 	bl	8004eba <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &dummy, 1, 0xFFFF);
 80011d2:	f107 010f 	add.w	r1, r7, #15
 80011d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011da:	2201      	movs	r2, #1
 80011dc:	480b      	ldr	r0, [pc, #44]	; (800120c <bmi270_spi_read_8+0x70>)
 80011de:	f003 ffa8 	bl	8005132 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &data, 1, 0xFFFF);
 80011e2:	f107 010e 	add.w	r1, r7, #14
 80011e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ea:	2201      	movs	r2, #1
 80011ec:	4807      	ldr	r0, [pc, #28]	; (800120c <bmi270_spi_read_8+0x70>)
 80011ee:	f003 ffa0 	bl	8005132 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(PINBUS_BMI270, PIN_BMI270_CS, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	2101      	movs	r1, #1
 80011f6:	4804      	ldr	r0, [pc, #16]	; (8001208 <bmi270_spi_read_8+0x6c>)
 80011f8:	f003 f948 	bl	800448c <HAL_GPIO_WritePin>

	return data;
 80011fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40020400 	.word	0x40020400
 800120c:	200043d4 	.word	0x200043d4

08001210 <bmi270_getGyroConf>:

void bmi270_getGyroConf(IMU *Imu){
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	uint8_t read_data = bmi270_spi_read_8(REG_GYR_CONF);
 8001218:	2042      	movs	r0, #66	; 0x42
 800121a:	f7ff ffbf 	bl	800119c <bmi270_spi_read_8>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]
	Imu->gyr_odr = read_data&0x0F;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	b2da      	uxtb	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	Imu->gyr_bwp = read_data&0x30;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001236:	b2da      	uxtb	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	Imu->gyr_noise_perf = read_data&0x40;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001244:	b2da      	uxtb	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Imu->gyr_filter_perf = read_data&0x80;
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001252:	b2da      	uxtb	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <bmi270_setGyroConf>:

/**
 * @brief Set the 3dB low pass filter for the gyroscope
 *
 */
void bmi270_setGyroConf(IMU *Imu){
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
	bmi270_spi_write_8(REG_GYR_CONF, Imu->gyr_odr);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001270:	4619      	mov	r1, r3
 8001272:	2042      	movs	r0, #66	; 0x42
 8001274:	f7ff ff2e 	bl	80010d4 <bmi270_spi_write_8>
	bmi270_spi_write_8(REG_GYR_CONF, Imu->gyr_bwp);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800127e:	4619      	mov	r1, r3
 8001280:	2042      	movs	r0, #66	; 0x42
 8001282:	f7ff ff27 	bl	80010d4 <bmi270_spi_write_8>
	bmi270_spi_write_8(REG_GYR_CONF, Imu->gyr_noise_perf);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800128c:	4619      	mov	r1, r3
 800128e:	2042      	movs	r0, #66	; 0x42
 8001290:	f7ff ff20 	bl	80010d4 <bmi270_spi_write_8>
	bmi270_spi_write_8(REG_GYR_CONF, Imu->gyr_filter_perf);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800129a:	4619      	mov	r1, r3
 800129c:	2042      	movs	r0, #66	; 0x42
 800129e:	f7ff ff19 	bl	80010d4 <bmi270_spi_write_8>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <bmi270_getAccConf>:

void bmi270_getAccConf(IMU *Imu){
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
	uint8_t read_data = bmi270_spi_read_8(REG_ACC_CONF);
 80012b2:	2040      	movs	r0, #64	; 0x40
 80012b4:	f7ff ff72 	bl	800119c <bmi270_spi_read_8>
 80012b8:	4603      	mov	r3, r0
 80012ba:	73fb      	strb	r3, [r7, #15]
	Imu->acc_odr = read_data&0x0F;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Imu->acc_bwp = read_data&0x70;
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	Imu->acc_filter_perf = read_data&0x80;
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <bmi270_setAccConf>:

void bmi270_setAccConf(IMU *Imu){
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
	bmi270_spi_write_8(REG_ACC_CONF, Imu->acc_odr);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80012fc:	4619      	mov	r1, r3
 80012fe:	2040      	movs	r0, #64	; 0x40
 8001300:	f7ff fee8 	bl	80010d4 <bmi270_spi_write_8>
	bmi270_spi_write_8(REG_ACC_CONF, Imu->acc_bwp);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800130a:	4619      	mov	r1, r3
 800130c:	2040      	movs	r0, #64	; 0x40
 800130e:	f7ff fee1 	bl	80010d4 <bmi270_spi_write_8>
	bmi270_spi_write_8(REG_ACC_CONF, Imu->acc_filter_perf);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001318:	4619      	mov	r1, r3
 800131a:	2040      	movs	r0, #64	; 0x40
 800131c:	f7ff feda 	bl	80010d4 <bmi270_spi_write_8>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <bmi270_getGyroRange>:

/*
 * @brief Read the currently active gyroscope range in the BMI270
 */
void bmi270_getGyroRange(IMU *Imu){
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	switch(bmi270_spi_read_8(REG_GYR_RANGE)){ //read gyro range
 8001330:	2043      	movs	r0, #67	; 0x43
 8001332:	f7ff ff33 	bl	800119c <bmi270_spi_read_8>
 8001336:	4603      	mov	r3, r0
 8001338:	2b04      	cmp	r3, #4
 800133a:	d821      	bhi.n	8001380 <bmi270_getGyroRange+0x58>
 800133c:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <bmi270_getGyroRange+0x1c>)
 800133e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001342:	bf00      	nop
 8001344:	08001359 	.word	0x08001359
 8001348:	08001361 	.word	0x08001361
 800134c:	08001369 	.word	0x08001369
 8001350:	08001371 	.word	0x08001371
 8001354:	08001379 	.word	0x08001379
	case range_2000:
		Imu->gyr_range = BMI270_GYRO_2000_DPS;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <bmi270_getGyroRange+0x60>)
 800135c:	601a      	str	r2, [r3, #0]
		break;
 800135e:	e00f      	b.n	8001380 <bmi270_getGyroRange+0x58>
	case range_1000:
		Imu->gyr_range = BMI270_GYRO_1000_DPS;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <bmi270_getGyroRange+0x64>)
 8001364:	601a      	str	r2, [r3, #0]
		break;
 8001366:	e00b      	b.n	8001380 <bmi270_getGyroRange+0x58>
	case range_500:
		Imu->gyr_range = BMI270_GYRO_500_DPS;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a09      	ldr	r2, [pc, #36]	; (8001390 <bmi270_getGyroRange+0x68>)
 800136c:	601a      	str	r2, [r3, #0]
		break;
 800136e:	e007      	b.n	8001380 <bmi270_getGyroRange+0x58>
	case range_250:
		Imu->gyr_range = BMI270_GYRO_250_DPS;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <bmi270_getGyroRange+0x6c>)
 8001374:	601a      	str	r2, [r3, #0]
		break;
 8001376:	e003      	b.n	8001380 <bmi270_getGyroRange+0x58>
	case range_125:
		Imu->gyr_range = BMI270_GYRO_125_DPS;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a07      	ldr	r2, [pc, #28]	; (8001398 <bmi270_getGyroRange+0x70>)
 800137c:	601a      	str	r2, [r3, #0]
		break;
 800137e:	bf00      	nop
	}
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	4183126f 	.word	0x4183126f
 800138c:	4203126f 	.word	0x4203126f
 8001390:	4283126f 	.word	0x4283126f
 8001394:	4303126f 	.word	0x4303126f
 8001398:	4383126f 	.word	0x4383126f

0800139c <bmi270_getAccelRange>:

/*
 * @brief Read the currently active accelerometer range in the BMI270
 */
void bmi270_getAccelRange(IMU *Imu){
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	switch(bmi270_spi_read_8(REG_ACC_RANGE)){ //read accel range
 80013a4:	2041      	movs	r0, #65	; 0x41
 80013a6:	f7ff fef9 	bl	800119c <bmi270_spi_read_8>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d81f      	bhi.n	80013f0 <bmi270_getAccelRange+0x54>
 80013b0:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <bmi270_getAccelRange+0x1c>)
 80013b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b6:	bf00      	nop
 80013b8:	080013c9 	.word	0x080013c9
 80013bc:	080013d3 	.word	0x080013d3
 80013c0:	080013dd 	.word	0x080013dd
 80013c4:	080013e7 	.word	0x080013e7
	case range_2g:
		Imu->acc_range = BMI270_ACCEL_2G;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80013ce:	605a      	str	r2, [r3, #4]
		break;
 80013d0:	e00e      	b.n	80013f0 <bmi270_getAccelRange+0x54>
	case range_4g:
		Imu->acc_range = BMI270_ACCEL_4G;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80013d8:	605a      	str	r2, [r3, #4]
		break;
 80013da:	e009      	b.n	80013f0 <bmi270_getAccelRange+0x54>
	case range_8g:
		Imu->acc_range = BMI270_ACCEL_8G;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80013e2:	605a      	str	r2, [r3, #4]
		break;
 80013e4:	e004      	b.n	80013f0 <bmi270_getAccelRange+0x54>
	case range_16g:
		Imu->acc_range = BMI270_ACCEL_16G;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80013ec:	605a      	str	r2, [r3, #4]
		break;
 80013ee:	bf00      	nop
	}
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <bmi270_calibrateInit>:

void bmi270_calibrateInit(IMU *Imu, float lim){
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	ed87 0a00 	vstr	s0, [r7]
	Imu->calibration_c = 0;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	Imu->gyr_lim_min_x = lim;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	62da      	str	r2, [r3, #44]	; 0x2c
	Imu->gyr_lim_min_y = lim;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	631a      	str	r2, [r3, #48]	; 0x30
	Imu->gyr_lim_min_z = lim;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	635a      	str	r2, [r3, #52]	; 0x34
	Imu->gyr_lim_max_x = lim;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	639a      	str	r2, [r3, #56]	; 0x38
	Imu->gyr_lim_max_y = lim;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	63da      	str	r2, [r3, #60]	; 0x3c
	Imu->gyr_lim_max_z = lim;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <bmi270_calibrateNoise>:


void bmi270_calibrateNoise(IMU *Imu){
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	if(Imu->calibration_c < BMI270_CALIBRATION_TIM){
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800144a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800144e:	d265      	bcs.n	800151c <bmi270_calibrateNoise+0xe0>
		if(Imu->gyr_x < 0){
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	edd3 7a02 	vldr	s15, [r3, #8]
 8001456:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800145a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145e:	d50b      	bpl.n	8001478 <bmi270_calibrateNoise+0x3c>
			Imu->gyr_lim_min_x += Imu->gyr_x;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	edd3 7a02 	vldr	s15, [r3, #8]
 800146c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 8001476:	e00a      	b.n	800148e <bmi270_calibrateNoise+0x52>
		} else {
			Imu->gyr_lim_max_x += Imu->gyr_x;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	edd3 7a02 	vldr	s15, [r3, #8]
 8001484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		}

		if(Imu->gyr_y < 0){
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	edd3 7a03 	vldr	s15, [r3, #12]
 8001494:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149c:	d50b      	bpl.n	80014b6 <bmi270_calibrateNoise+0x7a>
			Imu->gyr_lim_min_y += Imu->gyr_y;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80014aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 80014b4:	e00a      	b.n	80014cc <bmi270_calibrateNoise+0x90>
		} else {
			Imu->gyr_lim_max_y += Imu->gyr_y;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	edd3 7a03 	vldr	s15, [r3, #12]
 80014c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		}

		if(Imu->gyr_z < 0){
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80014d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	d50b      	bpl.n	80014f4 <bmi270_calibrateNoise+0xb8>
			Imu->gyr_lim_min_z += Imu->gyr_z;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80014e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 80014f2:	e00a      	b.n	800150a <bmi270_calibrateNoise+0xce>
		} else {
			Imu->gyr_lim_max_z += Imu->gyr_z;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		}
		Imu->calibration_c++;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001510:	3301      	adds	r3, #1
 8001512:	b29a      	uxth	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		Imu->gyr_lim_max_x /= (float)BMI270_CALIBRATION_TIM;
		Imu->gyr_lim_max_y /= (float)BMI270_CALIBRATION_TIM;
		Imu->gyr_lim_max_z /= (float)BMI270_CALIBRATION_TIM;
		Imu->calibration_c++; 									//calibration lock
	}
}
 800151a:	e049      	b.n	80015b0 <bmi270_calibrateNoise+0x174>
	else if(Imu->calibration_c == BMI270_CALIBRATION_TIM){
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001522:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001526:	d143      	bne.n	80015b0 <bmi270_calibrateNoise+0x174>
		Imu->gyr_lim_min_x /= (float)BMI270_CALIBRATION_TIM;	//set limits from mean
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800152e:	eddf 6a23 	vldr	s13, [pc, #140]	; 80015bc <bmi270_calibrateNoise+0x180>
 8001532:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		Imu->gyr_lim_min_y /= (float)BMI270_CALIBRATION_TIM;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001542:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80015bc <bmi270_calibrateNoise+0x180>
 8001546:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		Imu->gyr_lim_min_z /= (float)BMI270_CALIBRATION_TIM;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001556:	eddf 6a19 	vldr	s13, [pc, #100]	; 80015bc <bmi270_calibrateNoise+0x180>
 800155a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		Imu->gyr_lim_max_x /= (float)BMI270_CALIBRATION_TIM;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800156a:	eddf 6a14 	vldr	s13, [pc, #80]	; 80015bc <bmi270_calibrateNoise+0x180>
 800156e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		Imu->gyr_lim_max_y /= (float)BMI270_CALIBRATION_TIM;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800157e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80015bc <bmi270_calibrateNoise+0x180>
 8001582:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		Imu->gyr_lim_max_z /= (float)BMI270_CALIBRATION_TIM;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001592:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80015bc <bmi270_calibrateNoise+0x180>
 8001596:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		Imu->calibration_c++; 									//calibration lock
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015a6:	3301      	adds	r3, #1
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	43960000 	.word	0x43960000

080015c0 <setSampleFreq_ms>:
#include "Quaternions.h"

/*
 * @brief Set the sample frequency based on the while loop cycle time (in milliseconds)
 */
void setSampleFreq_ms() {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	sampleFreq = 1 / (0.001 * while_t);
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <setSampleFreq_ms+0x48>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ffc5 	bl	8000558 <__aeabi_f2d>
 80015ce:	a30c      	add	r3, pc, #48	; (adr r3, 8001600 <setSampleFreq_ms+0x40>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7ff f818 	bl	8000608 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	f04f 0000 	mov.w	r0, #0
 80015e0:	490a      	ldr	r1, [pc, #40]	; (800160c <setSampleFreq_ms+0x4c>)
 80015e2:	f7ff f93b 	bl	800085c <__aeabi_ddiv>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff fae3 	bl	8000bb8 <__aeabi_d2f>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <setSampleFreq_ms+0x50>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	f3af 8000 	nop.w
 8001600:	d2f1a9fc 	.word	0xd2f1a9fc
 8001604:	3f50624d 	.word	0x3f50624d
 8001608:	20002008 	.word	0x20002008
 800160c:	3ff00000 	.word	0x3ff00000
 8001610:	2000222c 	.word	0x2000222c

08001614 <filterUpdate>:
 * @param Current angular rate on z-axis from gyroscope
 * @param Current acceleration on x-axis from accelerometer
 * @param Current acceleration on y-axis from accelerometer
 * @param Current acceleration on z-axis from accelerometer
 */
void filterUpdate(float gx, float gy, float gz, float ax, float ay, float az) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b09c      	sub	sp, #112	; 0x70
 8001618:	af00      	add	r7, sp, #0
 800161a:	ed87 0a05 	vstr	s0, [r7, #20]
 800161e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001622:	ed87 1a03 	vstr	s2, [r7, #12]
 8001626:	edc7 1a02 	vstr	s3, [r7, #8]
 800162a:	ed87 2a01 	vstr	s4, [r7, #4]
 800162e:	edc7 2a00 	vstr	s5, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1,
			q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001632:	4bee      	ldr	r3, [pc, #952]	; (80019ec <filterUpdate+0x3d8>)
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	eeb1 7a67 	vneg.f32	s14, s15
 800163c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001644:	4bea      	ldr	r3, [pc, #936]	; (80019f0 <filterUpdate+0x3dc>)
 8001646:	edd3 6a00 	vldr	s13, [r3]
 800164a:	edd7 7a04 	vldr	s15, [r7, #16]
 800164e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001652:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001656:	4be7      	ldr	r3, [pc, #924]	; (80019f4 <filterUpdate+0x3e0>)
 8001658:	edd3 6a00 	vldr	s13, [r3]
 800165c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001668:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800166c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001670:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001674:	4be0      	ldr	r3, [pc, #896]	; (80019f8 <filterUpdate+0x3e4>)
 8001676:	ed93 7a00 	vldr	s14, [r3]
 800167a:	edd7 7a05 	vldr	s15, [r7, #20]
 800167e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001682:	4bdb      	ldr	r3, [pc, #876]	; (80019f0 <filterUpdate+0x3dc>)
 8001684:	edd3 6a00 	vldr	s13, [r3]
 8001688:	edd7 7a03 	vldr	s15, [r7, #12]
 800168c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001690:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001694:	4bd7      	ldr	r3, [pc, #860]	; (80019f4 <filterUpdate+0x3e0>)
 8001696:	edd3 6a00 	vldr	s13, [r3]
 800169a:	edd7 7a04 	vldr	s15, [r7, #16]
 800169e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ae:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80016b2:	4bd1      	ldr	r3, [pc, #836]	; (80019f8 <filterUpdate+0x3e4>)
 80016b4:	ed93 7a00 	vldr	s14, [r3]
 80016b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016c0:	4bca      	ldr	r3, [pc, #808]	; (80019ec <filterUpdate+0x3d8>)
 80016c2:	edd3 6a00 	vldr	s13, [r3]
 80016c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016d2:	4bc8      	ldr	r3, [pc, #800]	; (80019f4 <filterUpdate+0x3e0>)
 80016d4:	edd3 6a00 	vldr	s13, [r3]
 80016d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80016dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ec:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80016f0:	4bc1      	ldr	r3, [pc, #772]	; (80019f8 <filterUpdate+0x3e4>)
 80016f2:	ed93 7a00 	vldr	s14, [r3]
 80016f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016fe:	4bbb      	ldr	r3, [pc, #748]	; (80019ec <filterUpdate+0x3d8>)
 8001700:	edd3 6a00 	vldr	s13, [r3]
 8001704:	edd7 7a04 	vldr	s15, [r7, #16]
 8001708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800170c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001710:	4bb7      	ldr	r3, [pc, #732]	; (80019f0 <filterUpdate+0x3dc>)
 8001712:	edd3 6a00 	vldr	s13, [r3]
 8001716:	edd7 7a05 	vldr	s15, [r7, #20]
 800171a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800171e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001722:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800172a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800172e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001732:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173a:	d10e      	bne.n	800175a <filterUpdate+0x146>
 800173c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001740:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001748:	d107      	bne.n	800175a <filterUpdate+0x146>
 800174a:	edd7 7a00 	vldr	s15, [r7]
 800174e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001756:	f000 81e1 	beq.w	8001b1c <filterUpdate+0x508>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800175a:	edd7 7a02 	vldr	s15, [r7, #8]
 800175e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001762:	edd7 7a01 	vldr	s15, [r7, #4]
 8001766:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800176a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800176e:	edd7 7a00 	vldr	s15, [r7]
 8001772:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177a:	eeb0 0a67 	vmov.f32	s0, s15
 800177e:	f000 fb49 	bl	8001e14 <invSqrt>
 8001782:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8001786:	ed97 7a02 	vldr	s14, [r7, #8]
 800178a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800178e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001792:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8001796:	ed97 7a01 	vldr	s14, [r7, #4]
 800179a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800179e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a2:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;
 80017a6:	ed97 7a00 	vldr	s14, [r7]
 80017aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b2:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80017b6:	4b90      	ldr	r3, [pc, #576]	; (80019f8 <filterUpdate+0x3e4>)
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017c0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 80017c4:	4b89      	ldr	r3, [pc, #548]	; (80019ec <filterUpdate+0x3d8>)
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017ce:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 80017d2:	4b87      	ldr	r3, [pc, #540]	; (80019f0 <filterUpdate+0x3dc>)
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017dc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 80017e0:	4b84      	ldr	r3, [pc, #528]	; (80019f4 <filterUpdate+0x3e0>)
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017ea:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 80017ee:	4b82      	ldr	r3, [pc, #520]	; (80019f8 <filterUpdate+0x3e4>)
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80017f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017fc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8001800:	4b7a      	ldr	r3, [pc, #488]	; (80019ec <filterUpdate+0x3d8>)
 8001802:	edd3 7a00 	vldr	s15, [r3]
 8001806:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800180a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800180e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 8001812:	4b77      	ldr	r3, [pc, #476]	; (80019f0 <filterUpdate+0x3dc>)
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800181c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001820:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8001824:	4b71      	ldr	r3, [pc, #452]	; (80019ec <filterUpdate+0x3d8>)
 8001826:	edd3 7a00 	vldr	s15, [r3]
 800182a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800182e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001832:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 8001836:	4b6e      	ldr	r3, [pc, #440]	; (80019f0 <filterUpdate+0x3dc>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001844:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8001848:	4b6b      	ldr	r3, [pc, #428]	; (80019f8 <filterUpdate+0x3e4>)
 800184a:	ed93 7a00 	vldr	s14, [r3]
 800184e:	4b6a      	ldr	r3, [pc, #424]	; (80019f8 <filterUpdate+0x3e4>)
 8001850:	edd3 7a00 	vldr	s15, [r3]
 8001854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001858:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 800185c:	4b63      	ldr	r3, [pc, #396]	; (80019ec <filterUpdate+0x3d8>)
 800185e:	ed93 7a00 	vldr	s14, [r3]
 8001862:	4b62      	ldr	r3, [pc, #392]	; (80019ec <filterUpdate+0x3d8>)
 8001864:	edd3 7a00 	vldr	s15, [r3]
 8001868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8001870:	4b5f      	ldr	r3, [pc, #380]	; (80019f0 <filterUpdate+0x3dc>)
 8001872:	ed93 7a00 	vldr	s14, [r3]
 8001876:	4b5e      	ldr	r3, [pc, #376]	; (80019f0 <filterUpdate+0x3dc>)
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001880:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8001884:	4b5b      	ldr	r3, [pc, #364]	; (80019f4 <filterUpdate+0x3e0>)
 8001886:	ed93 7a00 	vldr	s14, [r3]
 800188a:	4b5a      	ldr	r3, [pc, #360]	; (80019f4 <filterUpdate+0x3e0>)
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001894:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8001898:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800189c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018a4:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80018a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018b4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80018b8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80018bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018c4:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80018c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1
 80018d8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80018dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e4:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80018e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80018f8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80018fc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001900:	4b3a      	ldr	r3, [pc, #232]	; (80019ec <filterUpdate+0x3d8>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800190e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001912:	edd7 7a01 	vldr	s15, [r7, #4]
 8001916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800191a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800191e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001922:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8001926:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800192a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800192e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001932:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001936:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800193a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800193e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001942:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001946:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800194a:	edd7 7a00 	vldr	s15, [r7]
 800194e:	ee66 7aa7 	vmul.f32	s15, s13, s15
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1
 8001952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001956:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
 800195a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800195e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001962:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001966:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <filterUpdate+0x3dc>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001970:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001974:	edd7 7a02 	vldr	s15, [r7, #8]
 8001978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001980:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001984:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001990:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001994:	edd7 7a01 	vldr	s15, [r7, #4]
 8001998:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800199c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019a0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80019a4:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80019a8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80019ac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019b8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80019bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019c8:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80019cc:	edd7 7a00 	vldr	s15, [r7]
 80019d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
 80019d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d8:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80019dc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019e0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80019e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019e8:	e008      	b.n	80019fc <filterUpdate+0x3e8>
 80019ea:	bf00      	nop
 80019ec:	2000220c 	.word	0x2000220c
 80019f0:	20002210 	.word	0x20002210
 80019f4:	20002214 	.word	0x20002214
 80019f8:	20002004 	.word	0x20002004
 80019fc:	4b99      	ldr	r3, [pc, #612]	; (8001c64 <filterUpdate+0x650>)
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a06:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001a0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a16:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001a1a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001a1e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a22:	4b90      	ldr	r3, [pc, #576]	; (8001c64 <filterUpdate+0x650>)
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a30:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001a34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a40:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001a44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a48:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a58:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a64:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a68:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a70:	eeb0 0a67 	vmov.f32	s0, s15
 8001a74:	f000 f9ce 	bl	8001e14 <invSqrt>
 8001a78:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 8001a7c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a80:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a88:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 8001a8c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a90:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a98:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 8001a9c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aa0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa8:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8001aac:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ab0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab8:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 8001abc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ac0:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001c68 <filterUpdate+0x654>
 8001ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac8:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8001ad4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ad8:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001c68 <filterUpdate+0x654>
 8001adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae8:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8001aec:	edd7 7a07 	vldr	s15, [r7, #28]
 8001af0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001c68 <filterUpdate+0x654>
 8001af4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af8:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b00:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 8001b04:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b08:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001c68 <filterUpdate+0x654>
 8001b0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b10:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b18:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001b1c:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <filterUpdate+0x658>)
 8001b1e:	edd3 7a00 	vldr	s15, [r3]
 8001b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b2a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001b2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b32:	4b4f      	ldr	r3, [pc, #316]	; (8001c70 <filterUpdate+0x65c>)
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3c:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <filterUpdate+0x65c>)
 8001b3e:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001b42:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <filterUpdate+0x658>)
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b50:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <filterUpdate+0x660>)
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b62:	4b44      	ldr	r3, [pc, #272]	; (8001c74 <filterUpdate+0x660>)
 8001b64:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001b68:	4b40      	ldr	r3, [pc, #256]	; (8001c6c <filterUpdate+0x658>)
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b76:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001b7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b7e:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <filterUpdate+0x664>)
 8001b80:	edd3 7a00 	vldr	s15, [r3]
 8001b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b88:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <filterUpdate+0x664>)
 8001b8a:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001b8e:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <filterUpdate+0x658>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b9c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba4:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <filterUpdate+0x650>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bae:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <filterUpdate+0x650>)
 8001bb0:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001bb4:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <filterUpdate+0x65c>)
 8001bb6:	ed93 7a00 	vldr	s14, [r3]
 8001bba:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <filterUpdate+0x65c>)
 8001bbc:	edd3 7a00 	vldr	s15, [r3]
 8001bc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <filterUpdate+0x660>)
 8001bc6:	edd3 6a00 	vldr	s13, [r3]
 8001bca:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <filterUpdate+0x660>)
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <filterUpdate+0x664>)
 8001bda:	edd3 6a00 	vldr	s13, [r3]
 8001bde:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <filterUpdate+0x664>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bec:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <filterUpdate+0x650>)
 8001bee:	edd3 6a00 	vldr	s13, [r3]
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <filterUpdate+0x650>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c00:	eeb0 0a67 	vmov.f32	s0, s15
 8001c04:	f000 f906 	bl	8001e14 <invSqrt>
 8001c08:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 8001c0c:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <filterUpdate+0x65c>)
 8001c0e:	ed93 7a00 	vldr	s14, [r3]
 8001c12:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <filterUpdate+0x65c>)
 8001c1c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <filterUpdate+0x660>)
 8001c22:	ed93 7a00 	vldr	s14, [r3]
 8001c26:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <filterUpdate+0x660>)
 8001c30:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001c34:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <filterUpdate+0x664>)
 8001c36:	ed93 7a00 	vldr	s14, [r3]
 8001c3a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <filterUpdate+0x664>)
 8001c44:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <filterUpdate+0x650>)
 8001c4a:	ed93 7a00 	vldr	s14, [r3]
 8001c4e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c56:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <filterUpdate+0x650>)
 8001c58:	edc3 7a00 	vstr	s15, [r3]
}
 8001c5c:	bf00      	nop
 8001c5e:	3770      	adds	r7, #112	; 0x70
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20002214 	.word	0x20002214
 8001c68:	3dcccccd 	.word	0x3dcccccd
 8001c6c:	2000222c 	.word	0x2000222c
 8001c70:	20002004 	.word	0x20002004
 8001c74:	2000220c 	.word	0x2000220c
 8001c78:	20002210 	.word	0x20002210

08001c7c <ToEulerAngles>:
 * @param Real component
 * @param i-component
 * @param j-component
 * @param k-component
 */
struct EulerAngles ToEulerAngles(float _q0, float _q1, float _q2, float _q3) {
 8001c7c:	b5b0      	push	{r4, r5, r7, lr}
 8001c7e:	b08e      	sub	sp, #56	; 0x38
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	ed87 0a07 	vstr	s0, [r7, #28]
 8001c86:	edc7 0a06 	vstr	s1, [r7, #24]
 8001c8a:	ed87 1a05 	vstr	s2, [r7, #20]
 8001c8e:	edc7 1a04 	vstr	s3, [r7, #16]
	struct EulerAngles angles;

	// roll (x-axis rotation)
	angles.x = atan2(2 * (_q0 * _q1 + _q2 * _q3), _q0 *_q0 - _q1 * _q1 - _q2 * _q2 + _q3 * _q3);
 8001c92:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c96:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c9e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001ca2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cb2:	ee17 0a90 	vmov	r0, s15
 8001cb6:	f7fe fc4f 	bl	8000558 <__aeabi_f2d>
 8001cba:	4604      	mov	r4, r0
 8001cbc:	460d      	mov	r5, r1
 8001cbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cc2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001cc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cd6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cde:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ce2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cea:	ee17 0a90 	vmov	r0, s15
 8001cee:	f7fe fc33 	bl	8000558 <__aeabi_f2d>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	ec43 2b11 	vmov	d1, r2, r3
 8001cfa:	ec45 4b10 	vmov	d0, r4, r5
 8001cfe:	f007 fcfb 	bl	80096f8 <atan2>
 8001d02:	ec53 2b10 	vmov	r2, r3, d0
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f7fe ff55 	bl	8000bb8 <__aeabi_d2f>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	623b      	str	r3, [r7, #32]

	// pitch (y-axis rotation)
	angles.y = -asin(2 * (_q1 * _q3 - _q0 * _q2));
 8001d12:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d16:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d22:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d32:	ee17 0a90 	vmov	r0, s15
 8001d36:	f7fe fc0f 	bl	8000558 <__aeabi_f2d>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	ec43 2b10 	vmov	d0, r2, r3
 8001d42:	f007 fc9f 	bl	8009684 <asin>
 8001d46:	ec53 2b10 	vmov	r2, r3, d0
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7fe ff33 	bl	8000bb8 <__aeabi_d2f>
 8001d52:	4603      	mov	r3, r0
 8001d54:	ee07 3a90 	vmov	s15, r3
 8001d58:	eef1 7a67 	vneg.f32	s15, s15
 8001d5c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
//		angles.y = copysign(M_PI / 2, sinp); // use 90 degrees if out of range
//	else
//		angles.y = asin(sinp);

	// yaw (z-axis rotation)
	angles.z = atan2(2 * (_q0 * _q3 + _q1 * _q2), _q0 * _q0 + _q1 *_q1 -_q2 * _q2 - _q3 * _q3);
 8001d60:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d64:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d6c:	edd7 6a06 	vldr	s13, [r7, #24]
 8001d70:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d80:	ee17 0a90 	vmov	r0, s15
 8001d84:	f7fe fbe8 	bl	8000558 <__aeabi_f2d>
 8001d88:	4604      	mov	r4, r0
 8001d8a:	460d      	mov	r5, r1
 8001d8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d90:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d94:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001da0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001da4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001da8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dac:	edd7 7a04 	vldr	s15, [r7, #16]
 8001db0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db8:	ee17 0a90 	vmov	r0, s15
 8001dbc:	f7fe fbcc 	bl	8000558 <__aeabi_f2d>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	ec43 2b11 	vmov	d1, r2, r3
 8001dc8:	ec45 4b10 	vmov	d0, r4, r5
 8001dcc:	f007 fc94 	bl	80096f8 <atan2>
 8001dd0:	ec53 2b10 	vmov	r2, r3, d0
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f7fe feee 	bl	8000bb8 <__aeabi_d2f>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28

	return angles;
 8001de0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de4:	f107 0220 	add.w	r2, r7, #32
 8001de8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df4:	ee06 1a90 	vmov	s13, r1
 8001df8:	ee07 2a10 	vmov	s14, r2
 8001dfc:	ee07 3a90 	vmov	s15, r3
}
 8001e00:	eeb0 0a66 	vmov.f32	s0, s13
 8001e04:	eef0 0a47 	vmov.f32	s1, s14
 8001e08:	eeb0 1a67 	vmov.f32	s2, s15
 8001e0c:	3738      	adds	r7, #56	; 0x38
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001e14 <invSqrt>:

/*
 * @brief Fast inverse Square root
 * @param The input value which will be converted to its inverse sqrt
 */
float invSqrt(float x) {
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8001e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e22:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e2a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 8001e32:	f107 0310 	add.w	r3, r7, #16
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i >> 1);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	105a      	asrs	r2, r3, #1
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <invSqrt+0x9c>)
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001e4c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e50:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e58:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e60:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001e64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e68:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e70:	edc7 7a04 	vstr	s15, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001e74:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e78:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e88:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001e8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e90:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e98:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	ee07 3a90 	vmov	s15, r3
}
 8001ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	5f3759df 	.word	0x5f3759df
 8001eb4:	00000000 	.word	0x00000000

08001eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ebc:	b0c3      	sub	sp, #268	; 0x10c
 8001ebe:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec0:	f001 fa54 	bl	800336c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec4:	f000 fa98 	bl	80023f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ec8:	f000 fe16 	bl	8002af8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ecc:	f000 fdca 	bl	8002a64 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001ed0:	f000 fdf2 	bl	8002ab8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001ed4:	f000 fafa 	bl	80024cc <MX_ADC1_Init>
  MX_TIM1_Init();
 8001ed8:	f000 fbf0 	bl	80026bc <MX_TIM1_Init>
  MX_SPI1_Init();
 8001edc:	f000 fbb8 	bl	8002650 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001ee0:	f000 fc88 	bl	80027f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ee4:	f000 fcf6 	bl	80028d4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001ee8:	f000 fd64 	bl	80029b4 <MX_TIM5_Init>

	MotorDriver MotorX;
	MotorDriver MotorY;
	MotorDriver MotorZ;

	MotorX.PIN_ENC = PIN_ENC_X;
 8001eec:	2310      	movs	r3, #16
 8001eee:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	MotorY.PIN_ENC = PIN_ENC_Y;
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	873b      	strh	r3, [r7, #56]	; 0x38
	MotorZ.PIN_ENC = PIN_ENC_Z;
 8001ef6:	2340      	movs	r3, #64	; 0x40
 8001ef8:	833b      	strh	r3, [r7, #24]

		}
	}

	if (USE_BMI270) {
		bmi270_spi_init();
 8001efa:	f7ff f829 	bl	8000f50 <bmi270_spi_init>
		if(!USE_IMU_VIS){
			bmi270_spi_init_check();
		}

		bmi270_pwr_conf(BMI270_PWR_MODE_PERF);
 8001efe:	2002      	movs	r0, #2
 8001f00:	f7ff f85c 	bl	8000fbc <bmi270_pwr_conf>
		bmi270_spi_write_8(REG_GYR_RANGE, range_2000);
 8001f04:	2100      	movs	r1, #0
 8001f06:	2043      	movs	r0, #67	; 0x43
 8001f08:	f7ff f8e4 	bl	80010d4 <bmi270_spi_write_8>
		bmi270_spi_write_8(REG_ACC_RANGE, range_8g);
 8001f0c:	2102      	movs	r1, #2
 8001f0e:	2041      	movs	r0, #65	; 0x41
 8001f10:	f7ff f8e0 	bl	80010d4 <bmi270_spi_write_8>

		bmi270_getGyroRange(&Imu);
 8001f14:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fa05 	bl	8001328 <bmi270_getGyroRange>
		bmi270_getAccelRange(&Imu);
 8001f1e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fa3a 	bl	800139c <bmi270_getAccelRange>

		bmi270_calibrateInit(&Imu, 0);
 8001f28:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f2c:	ed9f 0ade 	vldr	s0, [pc, #888]	; 80022a8 <main+0x3f0>
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fa61 	bl	80013f8 <bmi270_calibrateInit>

		Imu.gyr_odr = gyr_odr_25; /* Set gyro 3dB LP-filter cutoff to 50Hz */
 8001f36:	2306      	movs	r3, #6
 8001f38:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
		Imu.gyr_bwp = gyr_osr2;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
		Imu.gyr_noise_perf = gyr_ulp;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
		Imu.gyr_filter_perf = gyr_ulp;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
		bmi270_setGyroConf(&Imu);
 8001f4e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff f985 	bl	8001262 <bmi270_setGyroConf>
		bmi270_getGyroConf(&Imu);
 8001f58:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff f957 	bl	8001210 <bmi270_getGyroConf>


		Imu.acc_odr = acc_odr_12p5; /* Set accel 3dB LP-filter cutoff to 50Hz */
 8001f62:	2305      	movs	r3, #5
 8001f64:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
		Imu.acc_bwp = acc_res_avg128;
 8001f68:	2307      	movs	r3, #7
 8001f6a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
		Imu.acc_filter_perf = acc_ulp;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
		bmi270_setAccConf(&Imu);
 8001f74:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff f9b8 	bl	80012ee <bmi270_setAccConf>
		bmi270_getAccConf(&Imu);
 8001f7e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff f991 	bl	80012aa <bmi270_getAccConf>
		as5048a_init(&MotorX);
		as5048a_init(&MotorY);
		as5048a_init(&MotorZ);
	}

	setSampleFreq_ms();
 8001f88:	f7ff fb1a 	bl	80015c0 <setSampleFreq_ms>

	TIM5->PSC = 84;
 8001f8c:	4bc7      	ldr	r3, [pc, #796]	; (80022ac <main+0x3f4>)
 8001f8e:	2254      	movs	r2, #84	; 0x54
 8001f90:	629a      	str	r2, [r3, #40]	; 0x28
	TIM5->ARR = 999999;
 8001f92:	4bc6      	ldr	r3, [pc, #792]	; (80022ac <main+0x3f4>)
 8001f94:	4ac6      	ldr	r2, [pc, #792]	; (80022b0 <main+0x3f8>)
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_TIM_Base_Start(&htim5);
 8001f98:	48c6      	ldr	r0, [pc, #792]	; (80022b4 <main+0x3fc>)
 8001f9a:	f003 fcad 	bl	80058f8 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
//		us_t = __HAL_TIM_GET_COUNTER(&htim5);
//		setSampleFreq_us();
		t1 = HAL_GetTick();
 8001f9e:	f001 fa4b 	bl	8003438 <HAL_GetTick>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4ac4      	ldr	r2, [pc, #784]	; (80022b8 <main+0x400>)
 8001fa6:	6013      	str	r3, [r2, #0]
		setSampleFreq_ms();
 8001fa8:	f7ff fb0a 	bl	80015c0 <setSampleFreq_ms>

			drv8313_setDutyLookup(&MotorX);
		}

		if (USE_BMI270) {
			Imu.gyr_x = (int16_t)bmi270_read_gyro(AXIS_X) / Imu.gyr_range;
 8001fac:	2000      	movs	r0, #0
 8001fae:	f7ff f845 	bl	800103c <bmi270_read_gyro>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	b21b      	sxth	r3, r3
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fbe:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
			Imu.gyr_y = (int16_t)bmi270_read_gyro(AXIS_Y) / Imu.gyr_range;
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f7ff f836 	bl	800103c <bmi270_read_gyro>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	ee07 3a90 	vmov	s15, r3
 8001fd8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fdc:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
			Imu.gyr_z = (int16_t)bmi270_read_gyro(AXIS_Z) / Imu.gyr_range;
 8001fe8:	2002      	movs	r0, #2
 8001fea:	f7ff f827 	bl	800103c <bmi270_read_gyro>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ffa:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002002:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

			if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8002006:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800200a:	48ac      	ldr	r0, [pc, #688]	; (80022bc <main+0x404>)
 800200c:	f002 fa26 	bl	800445c <HAL_GPIO_ReadPin>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10f      	bne.n	8002036 <main+0x17e>
				q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
 8002016:	4baa      	ldr	r3, [pc, #680]	; (80022c0 <main+0x408>)
 8002018:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	4ba9      	ldr	r3, [pc, #676]	; (80022c4 <main+0x40c>)
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	4ba8      	ldr	r3, [pc, #672]	; (80022c8 <main+0x410>)
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	4ba7      	ldr	r3, [pc, #668]	; (80022cc <main+0x414>)
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
			}

			bmi270_calibrateNoise(&Imu);
 8002036:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff f9fe 	bl	800143c <bmi270_calibrateNoise>
			//gyro limiter. Prevents yaw drift programmatically, with some success.
			if(Imu.calibration_c >= BMI270_CALIBRATION_TIM){
 8002040:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8002044:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002048:	d347      	bcc.n	80020da <main+0x222>
				if(Imu.gyr_x > -Imu.gyr_lim_min_x && Imu.gyr_x < Imu.gyr_lim_max_x){
 800204a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800204e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002052:	eef1 7a67 	vneg.f32	s15, s15
 8002056:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800205a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205e:	dd0c      	ble.n	800207a <main+0x1c2>
 8002060:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002064:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002068:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800206c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002070:	d503      	bpl.n	800207a <main+0x1c2>
					Imu.gyr_x = 0.0f;
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				}
				if(Imu.gyr_y > -Imu.gyr_lim_min_y && Imu.gyr_y < Imu.gyr_lim_max_x){
 800207a:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800207e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002082:	eef1 7a67 	vneg.f32	s15, s15
 8002086:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800208a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208e:	dd0c      	ble.n	80020aa <main+0x1f2>
 8002090:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002094:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800209c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a0:	d503      	bpl.n	80020aa <main+0x1f2>
					Imu.gyr_y = 0.0f;
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				}
				if(Imu.gyr_z > -Imu.gyr_lim_min_z && Imu.gyr_z < Imu.gyr_lim_max_z){
 80020aa:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80020ae:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80020b2:	eef1 7a67 	vneg.f32	s15, s15
 80020b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020be:	dd0c      	ble.n	80020da <main+0x222>
 80020c0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80020c4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80020c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d0:	d503      	bpl.n	80020da <main+0x222>
					Imu.gyr_z = 0.0f;
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				}
			}


			Imu.acc_x = (int16_t)bmi270_read_accel(AXIS_X) / Imu.acc_range;
 80020da:	2000      	movs	r0, #0
 80020dc:	f7fe ffd4 	bl	8001088 <bmi270_read_accel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	b21b      	sxth	r3, r3
 80020e4:	ee07 3a90 	vmov	s15, r3
 80020e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020ec:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80020f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020f4:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
			Imu.acc_y = (int16_t)bmi270_read_accel(AXIS_Y) / Imu.acc_range;
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7fe ffc5 	bl	8001088 <bmi270_read_accel>
 80020fe:	4603      	mov	r3, r0
 8002100:	b21b      	sxth	r3, r3
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800210a:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800210e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002112:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
			Imu.acc_z = (int16_t)bmi270_read_accel(AXIS_Z) / Imu.acc_range;
 8002116:	2002      	movs	r0, #2
 8002118:	f7fe ffb6 	bl	8001088 <bmi270_read_accel>
 800211c:	4603      	mov	r3, r0
 800211e:	b21b      	sxth	r3, r3
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002128:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800212c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002130:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		}

		//Wait before updating quaternion. This avoids div by zero in different Quaternion functions.
		if (/*waitFilterUpdate >= 1 &&*/ !USE_SIM && (USE_BMI270 || USE_ICM20602)) {
			filterUpdate(Imu.gyr_x * DEG_TO_RAD, Imu.gyr_y * DEG_TO_RAD,
 8002134:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fa0d 	bl	8000558 <__aeabi_f2d>
 800213e:	a356      	add	r3, pc, #344	; (adr r3, 8002298 <main+0x3e0>)
 8002140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002144:	f7fe fa60 	bl	8000608 <__aeabi_dmul>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	f7fe fd32 	bl	8000bb8 <__aeabi_d2f>
 8002154:	4604      	mov	r4, r0
 8002156:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f9fc 	bl	8000558 <__aeabi_f2d>
 8002160:	a34d      	add	r3, pc, #308	; (adr r3, 8002298 <main+0x3e0>)
 8002162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002166:	f7fe fa4f 	bl	8000608 <__aeabi_dmul>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4610      	mov	r0, r2
 8002170:	4619      	mov	r1, r3
 8002172:	f7fe fd21 	bl	8000bb8 <__aeabi_d2f>
 8002176:	4605      	mov	r5, r0
					Imu.gyr_z * DEG_TO_RAD, Imu.acc_x, Imu.acc_y, Imu.acc_z);
 8002178:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f9eb 	bl	8000558 <__aeabi_f2d>
 8002182:	a345      	add	r3, pc, #276	; (adr r3, 8002298 <main+0x3e0>)
 8002184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002188:	f7fe fa3e 	bl	8000608 <__aeabi_dmul>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
			filterUpdate(Imu.gyr_x * DEG_TO_RAD, Imu.gyr_y * DEG_TO_RAD,
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	f7fe fd10 	bl	8000bb8 <__aeabi_d2f>
 8002198:	4603      	mov	r3, r0
 800219a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800219e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80021a2:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80021a6:	eef0 2a66 	vmov.f32	s5, s13
 80021aa:	eeb0 2a47 	vmov.f32	s4, s14
 80021ae:	eef0 1a67 	vmov.f32	s3, s15
 80021b2:	ee01 3a10 	vmov	s2, r3
 80021b6:	ee00 5a90 	vmov	s1, r5
 80021ba:	ee00 4a10 	vmov	s0, r4
 80021be:	f7ff fa29 	bl	8001614 <filterUpdate>
			ay_s = 0.0;
			az_s = 0.0;
			filterUpdate(gx_s * DEG_TO_RAD, gy_s * DEG_TO_RAD,
					gz_s * DEG_TO_RAD, ax_s, ay_s, az_s);
		}
		waitFilterUpdate++;
 80021c2:	4b43      	ldr	r3, [pc, #268]	; (80022d0 <main+0x418>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	3301      	adds	r3, #1
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4b41      	ldr	r3, [pc, #260]	; (80022d0 <main+0x418>)
 80021cc:	701a      	strb	r2, [r3, #0]

		if (USE_ICM20602 || USE_BMI270) {
			Euler = ToEulerAngles(q0, q1, q2, q3);
 80021ce:	4b3c      	ldr	r3, [pc, #240]	; (80022c0 <main+0x408>)
 80021d0:	edd3 7a00 	vldr	s15, [r3]
 80021d4:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <main+0x40c>)
 80021d6:	ed93 7a00 	vldr	s14, [r3]
 80021da:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <main+0x410>)
 80021dc:	edd3 6a00 	vldr	s13, [r3]
 80021e0:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <main+0x414>)
 80021e2:	ed93 6a00 	vldr	s12, [r3]
 80021e6:	eef0 1a46 	vmov.f32	s3, s12
 80021ea:	eeb0 1a66 	vmov.f32	s2, s13
 80021ee:	eef0 0a47 	vmov.f32	s1, s14
 80021f2:	eeb0 0a67 	vmov.f32	s0, s15
 80021f6:	f7ff fd41 	bl	8001c7c <ToEulerAngles>
 80021fa:	eef0 6a40 	vmov.f32	s13, s0
 80021fe:	eeb0 7a60 	vmov.f32	s14, s1
 8002202:	eef0 7a41 	vmov.f32	s15, s2
 8002206:	edc7 6a32 	vstr	s13, [r7, #200]	; 0xc8
 800220a:	ed87 7a33 	vstr	s14, [r7, #204]	; 0xcc
 800220e:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
			Imu.roll = Euler.x * RAD_TO_DEG;
 8002212:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f99e 	bl	8000558 <__aeabi_f2d>
 800221c:	a320      	add	r3, pc, #128	; (adr r3, 80022a0 <main+0x3e8>)
 800221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002222:	f7fe f9f1 	bl	8000608 <__aeabi_dmul>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4610      	mov	r0, r2
 800222c:	4619      	mov	r1, r3
 800222e:	f7fe fcc3 	bl	8000bb8 <__aeabi_d2f>
 8002232:	4603      	mov	r3, r0
 8002234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			Imu.pitch = Euler.y * RAD_TO_DEG;
 8002238:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe f98b 	bl	8000558 <__aeabi_f2d>
 8002242:	a317      	add	r3, pc, #92	; (adr r3, 80022a0 <main+0x3e8>)
 8002244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002248:	f7fe f9de 	bl	8000608 <__aeabi_dmul>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	f7fe fcb0 	bl	8000bb8 <__aeabi_d2f>
 8002258:	4603      	mov	r3, r0
 800225a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			Imu.yaw = Euler.z * RAD_TO_DEG;
 800225e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe f978 	bl	8000558 <__aeabi_f2d>
 8002268:	a30d      	add	r3, pc, #52	; (adr r3, 80022a0 <main+0x3e8>)
 800226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226e:	f7fe f9cb 	bl	8000608 <__aeabi_dmul>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4610      	mov	r0, r2
 8002278:	4619      	mov	r1, r3
 800227a:	f7fe fc9d 	bl	8000bb8 <__aeabi_d2f>
 800227e:	4603      	mov	r3, r0
 8002280:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		}

		if(USE_PRINT){
			uint16_t len = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
				}
				HAL_UART_Transmit(&huart2, (uint8_t*)buff, strlen((char*)buff),
											HAL_MAX_DELAY);
			}
			if(USE_IMU_VIS){
				len += sprintf((char*)buff + len,
 800228a:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800228e:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <main+0x41c>)
 8002290:	189e      	adds	r6, r3, r2
 8002292:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <main+0x408>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	e01f      	b.n	80022d8 <main+0x420>
 8002298:	a226e211 	.word	0xa226e211
 800229c:	3f91df46 	.word	0x3f91df46
 80022a0:	1aa9cdba 	.word	0x1aa9cdba
 80022a4:	404ca5dc 	.word	0x404ca5dc
 80022a8:	00000000 	.word	0x00000000
 80022ac:	40000c00 	.word	0x40000c00
 80022b0:	000f423f 	.word	0x000f423f
 80022b4:	20004238 	.word	0x20004238
 80022b8:	20004388 	.word	0x20004388
 80022bc:	40020800 	.word	0x40020800
 80022c0:	20002004 	.word	0x20002004
 80022c4:	2000220c 	.word	0x2000220c
 80022c8:	20002210 	.word	0x20002210
 80022cc:	20002214 	.word	0x20002214
 80022d0:	20002218 	.word	0x20002218
 80022d4:	20002234 	.word	0x20002234
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe f93d 	bl	8000558 <__aeabi_f2d>
 80022de:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80022e2:	4b3a      	ldr	r3, [pc, #232]	; (80023cc <main+0x514>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f936 	bl	8000558 <__aeabi_f2d>
 80022ec:	4680      	mov	r8, r0
 80022ee:	4689      	mov	r9, r1
 80022f0:	4b37      	ldr	r3, [pc, #220]	; (80023d0 <main+0x518>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe f92f 	bl	8000558 <__aeabi_f2d>
 80022fa:	4682      	mov	sl, r0
 80022fc:	468b      	mov	fp, r1
 80022fe:	4b35      	ldr	r3, [pc, #212]	; (80023d4 <main+0x51c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f928 	bl	8000558 <__aeabi_f2d>
 8002308:	e9c7 0102 	strd	r0, r1, [r7, #8]
						"w%.4fwa%.4fab%.4fbc%.4fcy%.4fyp%.4fpr%.4fr\r\n",
						q0, q1, q2, q3,
						Imu.yaw, Imu.pitch, Imu.roll);
 800230c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
				len += sprintf((char*)buff + len,
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe f921 	bl	8000558 <__aeabi_f2d>
 8002316:	e9c7 0100 	strd	r0, r1, [r7]
						Imu.yaw, Imu.pitch, Imu.roll);
 800231a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
				len += sprintf((char*)buff + len,
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe f91a 	bl	8000558 <__aeabi_f2d>
 8002324:	4604      	mov	r4, r0
 8002326:	460d      	mov	r5, r1
						Imu.yaw, Imu.pitch, Imu.roll);
 8002328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
				len += sprintf((char*)buff + len,
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe f913 	bl	8000558 <__aeabi_f2d>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800233a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800233e:	ed97 7b00 	vldr	d7, [r7]
 8002342:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002346:	ed97 7b02 	vldr	d7, [r7, #8]
 800234a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800234e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002352:	e9cd 8900 	strd	r8, r9, [sp]
 8002356:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800235a:	491f      	ldr	r1, [pc, #124]	; (80023d8 <main+0x520>)
 800235c:	4630      	mov	r0, r6
 800235e:	f004 ff67 	bl	8007230 <siprintf>
 8002362:	4603      	mov	r3, r0
 8002364:	b29a      	uxth	r2, r3
 8002366:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800236a:	4413      	add	r3, r2
 800236c:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
				HAL_UART_Transmit(&huart2, (uint8_t*)buff, strlen((char*)buff),
 8002370:	481a      	ldr	r0, [pc, #104]	; (80023dc <main+0x524>)
 8002372:	f7fd ff35 	bl	80001e0 <strlen>
 8002376:	4603      	mov	r3, r0
 8002378:	b29a      	uxth	r2, r3
 800237a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800237e:	4917      	ldr	r1, [pc, #92]	; (80023dc <main+0x524>)
 8002380:	4817      	ldr	r0, [pc, #92]	; (80023e0 <main+0x528>)
 8002382:	f003 fff0 	bl	8006366 <HAL_UART_Transmit>

		}

		//HAL_Delay(sampleDelay);

		loop_cnt++;
 8002386:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <main+0x52c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	3301      	adds	r3, #1
 800238c:	4a15      	ldr	r2, [pc, #84]	; (80023e4 <main+0x52c>)
 800238e:	6013      	str	r3, [r2, #0]
		loop_cnt %= print_flag;
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <main+0x52c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <main+0x530>)
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	fbb3 f1f2 	udiv	r1, r3, r2
 800239c:	fb02 f201 	mul.w	r2, r2, r1
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	4a10      	ldr	r2, [pc, #64]	; (80023e4 <main+0x52c>)
 80023a4:	6013      	str	r3, [r2, #0]
		/* millisecond timer */
		t2 = HAL_GetTick();
 80023a6:	f001 f847 	bl	8003438 <HAL_GetTick>
 80023aa:	4603      	mov	r3, r0
 80023ac:	4a0f      	ldr	r2, [pc, #60]	; (80023ec <main+0x534>)
 80023ae:	6013      	str	r3, [r2, #0]
		while_t = t2 - t1;
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <main+0x534>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <main+0x538>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	ee07 3a90 	vmov	s15, r3
 80023be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <main+0x53c>)
 80023c4:	edc3 7a00 	vstr	s15, [r3]
		t1 = HAL_GetTick();
 80023c8:	e5e9      	b.n	8001f9e <main+0xe6>
 80023ca:	bf00      	nop
 80023cc:	2000220c 	.word	0x2000220c
 80023d0:	20002210 	.word	0x20002210
 80023d4:	20002214 	.word	0x20002214
 80023d8:	0800a1a8 	.word	0x0800a1a8
 80023dc:	20002234 	.word	0x20002234
 80023e0:	20004478 	.word	0x20004478
 80023e4:	2000221c 	.word	0x2000221c
 80023e8:	2000200c 	.word	0x2000200c
 80023ec:	20004234 	.word	0x20004234
 80023f0:	20004388 	.word	0x20004388
 80023f4:	20002008 	.word	0x20002008

080023f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b094      	sub	sp, #80	; 0x50
 80023fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023fe:	f107 0320 	add.w	r3, r7, #32
 8002402:	2230      	movs	r2, #48	; 0x30
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f004 faa0 	bl	800694c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800240c:	f107 030c 	add.w	r3, r7, #12
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <SystemClock_Config+0xcc>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	4a27      	ldr	r2, [pc, #156]	; (80024c4 <SystemClock_Config+0xcc>)
 8002426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242a:	6413      	str	r3, [r2, #64]	; 0x40
 800242c:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <SystemClock_Config+0xcc>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002438:	2300      	movs	r3, #0
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <SystemClock_Config+0xd0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002444:	4a20      	ldr	r2, [pc, #128]	; (80024c8 <SystemClock_Config+0xd0>)
 8002446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <SystemClock_Config+0xd0>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002458:	2302      	movs	r3, #2
 800245a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800245c:	2301      	movs	r3, #1
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002460:	2310      	movs	r3, #16
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002464:	2302      	movs	r3, #2
 8002466:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002468:	2300      	movs	r3, #0
 800246a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800246c:	2308      	movs	r3, #8
 800246e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002470:	2354      	movs	r3, #84	; 0x54
 8002472:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002474:	2302      	movs	r3, #2
 8002476:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002478:	2307      	movs	r3, #7
 800247a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800247c:	f107 0320 	add.w	r3, r7, #32
 8002480:	4618      	mov	r0, r3
 8002482:	f002 f81d 	bl	80044c0 <HAL_RCC_OscConfig>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800248c:	f000 fbb2 	bl	8002bf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002490:	230f      	movs	r3, #15
 8002492:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002494:	2302      	movs	r3, #2
 8002496:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800249c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	2102      	movs	r1, #2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f002 fa7f 	bl	80049b0 <HAL_RCC_ClockConfig>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80024b8:	f000 fb9c 	bl	8002bf4 <Error_Handler>
  }
}
 80024bc:	bf00      	nop
 80024be:	3750      	adds	r7, #80	; 0x50
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40007000 	.word	0x40007000

080024cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024d2:	463b      	mov	r3, r7
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80024de:	4b59      	ldr	r3, [pc, #356]	; (8002644 <MX_ADC1_Init+0x178>)
 80024e0:	4a59      	ldr	r2, [pc, #356]	; (8002648 <MX_ADC1_Init+0x17c>)
 80024e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80024e4:	4b57      	ldr	r3, [pc, #348]	; (8002644 <MX_ADC1_Init+0x178>)
 80024e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80024ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024ec:	4b55      	ldr	r3, [pc, #340]	; (8002644 <MX_ADC1_Init+0x178>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80024f2:	4b54      	ldr	r3, [pc, #336]	; (8002644 <MX_ADC1_Init+0x178>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80024f8:	4b52      	ldr	r3, [pc, #328]	; (8002644 <MX_ADC1_Init+0x178>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024fe:	4b51      	ldr	r3, [pc, #324]	; (8002644 <MX_ADC1_Init+0x178>)
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002506:	4b4f      	ldr	r3, [pc, #316]	; (8002644 <MX_ADC1_Init+0x178>)
 8002508:	2200      	movs	r2, #0
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800250c:	4b4d      	ldr	r3, [pc, #308]	; (8002644 <MX_ADC1_Init+0x178>)
 800250e:	4a4f      	ldr	r2, [pc, #316]	; (800264c <MX_ADC1_Init+0x180>)
 8002510:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002512:	4b4c      	ldr	r3, [pc, #304]	; (8002644 <MX_ADC1_Init+0x178>)
 8002514:	2200      	movs	r2, #0
 8002516:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8002518:	4b4a      	ldr	r3, [pc, #296]	; (8002644 <MX_ADC1_Init+0x178>)
 800251a:	2209      	movs	r2, #9
 800251c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800251e:	4b49      	ldr	r3, [pc, #292]	; (8002644 <MX_ADC1_Init+0x178>)
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002526:	4b47      	ldr	r3, [pc, #284]	; (8002644 <MX_ADC1_Init+0x178>)
 8002528:	2201      	movs	r2, #1
 800252a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800252c:	4845      	ldr	r0, [pc, #276]	; (8002644 <MX_ADC1_Init+0x178>)
 800252e:	f000 ffb3 	bl	8003498 <HAL_ADC_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002538:	f000 fb5c 	bl	8002bf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800253c:	2300      	movs	r3, #0
 800253e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002540:	2301      	movs	r3, #1
 8002542:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002544:	2300      	movs	r3, #0
 8002546:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002548:	463b      	mov	r3, r7
 800254a:	4619      	mov	r1, r3
 800254c:	483d      	ldr	r0, [pc, #244]	; (8002644 <MX_ADC1_Init+0x178>)
 800254e:	f000 ffe7 	bl	8003520 <HAL_ADC_ConfigChannel>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002558:	f000 fb4c 	bl	8002bf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800255c:	2304      	movs	r3, #4
 800255e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002560:	2302      	movs	r3, #2
 8002562:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002564:	463b      	mov	r3, r7
 8002566:	4619      	mov	r1, r3
 8002568:	4836      	ldr	r0, [pc, #216]	; (8002644 <MX_ADC1_Init+0x178>)
 800256a:	f000 ffd9 	bl	8003520 <HAL_ADC_ConfigChannel>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002574:	f000 fb3e 	bl	8002bf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002578:	2309      	movs	r3, #9
 800257a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800257c:	2303      	movs	r3, #3
 800257e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002580:	463b      	mov	r3, r7
 8002582:	4619      	mov	r1, r3
 8002584:	482f      	ldr	r0, [pc, #188]	; (8002644 <MX_ADC1_Init+0x178>)
 8002586:	f000 ffcb 	bl	8003520 <HAL_ADC_ConfigChannel>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002590:	f000 fb30 	bl	8002bf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002594:	230a      	movs	r3, #10
 8002596:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002598:	2304      	movs	r3, #4
 800259a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800259c:	463b      	mov	r3, r7
 800259e:	4619      	mov	r1, r3
 80025a0:	4828      	ldr	r0, [pc, #160]	; (8002644 <MX_ADC1_Init+0x178>)
 80025a2:	f000 ffbd 	bl	8003520 <HAL_ADC_ConfigChannel>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80025ac:	f000 fb22 	bl	8002bf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80025b0:	230b      	movs	r3, #11
 80025b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80025b4:	2305      	movs	r3, #5
 80025b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025b8:	463b      	mov	r3, r7
 80025ba:	4619      	mov	r1, r3
 80025bc:	4821      	ldr	r0, [pc, #132]	; (8002644 <MX_ADC1_Init+0x178>)
 80025be:	f000 ffaf 	bl	8003520 <HAL_ADC_ConfigChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80025c8:	f000 fb14 	bl	8002bf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80025cc:	230c      	movs	r3, #12
 80025ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80025d0:	2306      	movs	r3, #6
 80025d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025d4:	463b      	mov	r3, r7
 80025d6:	4619      	mov	r1, r3
 80025d8:	481a      	ldr	r0, [pc, #104]	; (8002644 <MX_ADC1_Init+0x178>)
 80025da:	f000 ffa1 	bl	8003520 <HAL_ADC_ConfigChannel>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80025e4:	f000 fb06 	bl	8002bf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80025e8:	230d      	movs	r3, #13
 80025ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80025ec:	2307      	movs	r3, #7
 80025ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025f0:	463b      	mov	r3, r7
 80025f2:	4619      	mov	r1, r3
 80025f4:	4813      	ldr	r0, [pc, #76]	; (8002644 <MX_ADC1_Init+0x178>)
 80025f6:	f000 ff93 	bl	8003520 <HAL_ADC_ConfigChannel>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002600:	f000 faf8 	bl	8002bf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002604:	230e      	movs	r3, #14
 8002606:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002608:	2308      	movs	r3, #8
 800260a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800260c:	463b      	mov	r3, r7
 800260e:	4619      	mov	r1, r3
 8002610:	480c      	ldr	r0, [pc, #48]	; (8002644 <MX_ADC1_Init+0x178>)
 8002612:	f000 ff85 	bl	8003520 <HAL_ADC_ConfigChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800261c:	f000 faea 	bl	8002bf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002620:	230f      	movs	r3, #15
 8002622:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002624:	2309      	movs	r3, #9
 8002626:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002628:	463b      	mov	r3, r7
 800262a:	4619      	mov	r1, r3
 800262c:	4805      	ldr	r0, [pc, #20]	; (8002644 <MX_ADC1_Init+0x178>)
 800262e:	f000 ff77 	bl	8003520 <HAL_ADC_ConfigChannel>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002638:	f000 fadc 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200042dc 	.word	0x200042dc
 8002648:	40012000 	.word	0x40012000
 800264c:	0f000001 	.word	0x0f000001

08002650 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002654:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <MX_SPI1_Init+0x64>)
 8002656:	4a18      	ldr	r2, [pc, #96]	; (80026b8 <MX_SPI1_Init+0x68>)
 8002658:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <MX_SPI1_Init+0x64>)
 800265c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002660:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002662:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <MX_SPI1_Init+0x64>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <MX_SPI1_Init+0x64>)
 800266a:	2200      	movs	r2, #0
 800266c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <MX_SPI1_Init+0x64>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002674:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <MX_SPI1_Init+0x64>)
 8002676:	2200      	movs	r2, #0
 8002678:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <MX_SPI1_Init+0x64>)
 800267c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002680:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002682:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <MX_SPI1_Init+0x64>)
 8002684:	2218      	movs	r2, #24
 8002686:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002688:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <MX_SPI1_Init+0x64>)
 800268a:	2200      	movs	r2, #0
 800268c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <MX_SPI1_Init+0x64>)
 8002690:	2200      	movs	r2, #0
 8002692:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002694:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <MX_SPI1_Init+0x64>)
 8002696:	2200      	movs	r2, #0
 8002698:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <MX_SPI1_Init+0x64>)
 800269c:	220a      	movs	r2, #10
 800269e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026a0:	4804      	ldr	r0, [pc, #16]	; (80026b4 <MX_SPI1_Init+0x64>)
 80026a2:	f002 fb81 	bl	8004da8 <HAL_SPI_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026ac:	f000 faa2 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026b0:	bf00      	nop
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	200043d4 	.word	0x200043d4
 80026b8:	40013000 	.word	0x40013000

080026bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b092      	sub	sp, #72	; 0x48
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
 80026dc:	615a      	str	r2, [r3, #20]
 80026de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	2220      	movs	r2, #32
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 f930 	bl	800694c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026ec:	4b3f      	ldr	r3, [pc, #252]	; (80027ec <MX_TIM1_Init+0x130>)
 80026ee:	4a40      	ldr	r2, [pc, #256]	; (80027f0 <MX_TIM1_Init+0x134>)
 80026f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 80026f2:	4b3e      	ldr	r3, [pc, #248]	; (80027ec <MX_TIM1_Init+0x130>)
 80026f4:	2204      	movs	r2, #4
 80026f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80026f8:	4b3c      	ldr	r3, [pc, #240]	; (80027ec <MX_TIM1_Init+0x130>)
 80026fa:	2220      	movs	r2, #32
 80026fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80026fe:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <MX_TIM1_Init+0x130>)
 8002700:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002704:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002706:	4b39      	ldr	r3, [pc, #228]	; (80027ec <MX_TIM1_Init+0x130>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800270c:	4b37      	ldr	r3, [pc, #220]	; (80027ec <MX_TIM1_Init+0x130>)
 800270e:	2200      	movs	r2, #0
 8002710:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002712:	4b36      	ldr	r3, [pc, #216]	; (80027ec <MX_TIM1_Init+0x130>)
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002718:	4834      	ldr	r0, [pc, #208]	; (80027ec <MX_TIM1_Init+0x130>)
 800271a:	f003 f996 	bl	8005a4a <HAL_TIM_PWM_Init>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002724:	f000 fa66 	bl	8002bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002728:	2300      	movs	r3, #0
 800272a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002730:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002734:	4619      	mov	r1, r3
 8002736:	482d      	ldr	r0, [pc, #180]	; (80027ec <MX_TIM1_Init+0x130>)
 8002738:	f003 fd00 	bl	800613c <HAL_TIMEx_MasterConfigSynchronization>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002742:	f000 fa57 	bl	8002bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002746:	2360      	movs	r3, #96	; 0x60
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800274e:	2300      	movs	r3, #0
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002752:	2300      	movs	r3, #0
 8002754:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800275e:	2300      	movs	r3, #0
 8002760:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002766:	2200      	movs	r2, #0
 8002768:	4619      	mov	r1, r3
 800276a:	4820      	ldr	r0, [pc, #128]	; (80027ec <MX_TIM1_Init+0x130>)
 800276c:	f003 fa18 	bl	8005ba0 <HAL_TIM_PWM_ConfigChannel>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002776:	f000 fa3d 	bl	8002bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800277a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800277e:	2204      	movs	r2, #4
 8002780:	4619      	mov	r1, r3
 8002782:	481a      	ldr	r0, [pc, #104]	; (80027ec <MX_TIM1_Init+0x130>)
 8002784:	f003 fa0c 	bl	8005ba0 <HAL_TIM_PWM_ConfigChannel>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800278e:	f000 fa31 	bl	8002bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002796:	2208      	movs	r2, #8
 8002798:	4619      	mov	r1, r3
 800279a:	4814      	ldr	r0, [pc, #80]	; (80027ec <MX_TIM1_Init+0x130>)
 800279c:	f003 fa00 	bl	8005ba0 <HAL_TIM_PWM_ConfigChannel>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80027a6:	f000 fa25 	bl	8002bf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	4619      	mov	r1, r3
 80027cc:	4807      	ldr	r0, [pc, #28]	; (80027ec <MX_TIM1_Init+0x130>)
 80027ce:	f003 fd23 	bl	8006218 <HAL_TIMEx_ConfigBreakDeadTime>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80027d8:	f000 fa0c 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027dc:	4803      	ldr	r0, [pc, #12]	; (80027ec <MX_TIM1_Init+0x130>)
 80027de:	f000 fb9d 	bl	8002f1c <HAL_TIM_MspPostInit>

}
 80027e2:	bf00      	nop
 80027e4:	3748      	adds	r7, #72	; 0x48
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	2000438c 	.word	0x2000438c
 80027f0:	40010000 	.word	0x40010000

080027f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fa:	f107 0320 	add.w	r3, r7, #32
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002804:	1d3b      	adds	r3, r7, #4
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]
 8002810:	611a      	str	r2, [r3, #16]
 8002812:	615a      	str	r2, [r3, #20]
 8002814:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002816:	4b2e      	ldr	r3, [pc, #184]	; (80028d0 <MX_TIM2_Init+0xdc>)
 8002818:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800281c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2100;
 800281e:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <MX_TIM2_Init+0xdc>)
 8002820:	f640 0234 	movw	r2, #2100	; 0x834
 8002824:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002826:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <MX_TIM2_Init+0xdc>)
 8002828:	2220      	movs	r2, #32
 800282a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800282c:	4b28      	ldr	r3, [pc, #160]	; (80028d0 <MX_TIM2_Init+0xdc>)
 800282e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002832:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002834:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <MX_TIM2_Init+0xdc>)
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800283a:	4b25      	ldr	r3, [pc, #148]	; (80028d0 <MX_TIM2_Init+0xdc>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002840:	4823      	ldr	r0, [pc, #140]	; (80028d0 <MX_TIM2_Init+0xdc>)
 8002842:	f003 f902 	bl	8005a4a <HAL_TIM_PWM_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800284c:	f000 f9d2 	bl	8002bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002850:	2300      	movs	r3, #0
 8002852:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002858:	f107 0320 	add.w	r3, r7, #32
 800285c:	4619      	mov	r1, r3
 800285e:	481c      	ldr	r0, [pc, #112]	; (80028d0 <MX_TIM2_Init+0xdc>)
 8002860:	f003 fc6c 	bl	800613c <HAL_TIMEx_MasterConfigSynchronization>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800286a:	f000 f9c3 	bl	8002bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800286e:	2360      	movs	r3, #96	; 0x60
 8002870:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800287e:	1d3b      	adds	r3, r7, #4
 8002880:	2200      	movs	r2, #0
 8002882:	4619      	mov	r1, r3
 8002884:	4812      	ldr	r0, [pc, #72]	; (80028d0 <MX_TIM2_Init+0xdc>)
 8002886:	f003 f98b 	bl	8005ba0 <HAL_TIM_PWM_ConfigChannel>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002890:	f000 f9b0 	bl	8002bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	2204      	movs	r2, #4
 8002898:	4619      	mov	r1, r3
 800289a:	480d      	ldr	r0, [pc, #52]	; (80028d0 <MX_TIM2_Init+0xdc>)
 800289c:	f003 f980 	bl	8005ba0 <HAL_TIM_PWM_ConfigChannel>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80028a6:	f000 f9a5 	bl	8002bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028aa:	1d3b      	adds	r3, r7, #4
 80028ac:	2208      	movs	r2, #8
 80028ae:	4619      	mov	r1, r3
 80028b0:	4807      	ldr	r0, [pc, #28]	; (80028d0 <MX_TIM2_Init+0xdc>)
 80028b2:	f003 f975 	bl	8005ba0 <HAL_TIM_PWM_ConfigChannel>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80028bc:	f000 f99a 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80028c0:	4803      	ldr	r0, [pc, #12]	; (80028d0 <MX_TIM2_Init+0xdc>)
 80028c2:	f000 fb2b 	bl	8002f1c <HAL_TIM_MspPostInit>

}
 80028c6:	bf00      	nop
 80028c8:	3728      	adds	r7, #40	; 0x28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	2000442c 	.word	0x2000442c

080028d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028da:	f107 0320 	add.w	r3, r7, #32
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028e4:	1d3b      	adds	r3, r7, #4
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	605a      	str	r2, [r3, #4]
 80028ec:	609a      	str	r2, [r3, #8]
 80028ee:	60da      	str	r2, [r3, #12]
 80028f0:	611a      	str	r2, [r3, #16]
 80028f2:	615a      	str	r2, [r3, #20]
 80028f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028f6:	4b2d      	ldr	r3, [pc, #180]	; (80029ac <MX_TIM3_Init+0xd8>)
 80028f8:	4a2d      	ldr	r2, [pc, #180]	; (80029b0 <MX_TIM3_Init+0xdc>)
 80028fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2100;
 80028fc:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <MX_TIM3_Init+0xd8>)
 80028fe:	f640 0234 	movw	r2, #2100	; 0x834
 8002902:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002904:	4b29      	ldr	r3, [pc, #164]	; (80029ac <MX_TIM3_Init+0xd8>)
 8002906:	2220      	movs	r2, #32
 8002908:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800290a:	4b28      	ldr	r3, [pc, #160]	; (80029ac <MX_TIM3_Init+0xd8>)
 800290c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002910:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002912:	4b26      	ldr	r3, [pc, #152]	; (80029ac <MX_TIM3_Init+0xd8>)
 8002914:	2200      	movs	r2, #0
 8002916:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002918:	4b24      	ldr	r3, [pc, #144]	; (80029ac <MX_TIM3_Init+0xd8>)
 800291a:	2200      	movs	r2, #0
 800291c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800291e:	4823      	ldr	r0, [pc, #140]	; (80029ac <MX_TIM3_Init+0xd8>)
 8002920:	f003 f893 	bl	8005a4a <HAL_TIM_PWM_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800292a:	f000 f963 	bl	8002bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800292e:	2300      	movs	r3, #0
 8002930:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002936:	f107 0320 	add.w	r3, r7, #32
 800293a:	4619      	mov	r1, r3
 800293c:	481b      	ldr	r0, [pc, #108]	; (80029ac <MX_TIM3_Init+0xd8>)
 800293e:	f003 fbfd 	bl	800613c <HAL_TIMEx_MasterConfigSynchronization>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002948:	f000 f954 	bl	8002bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800294c:	2360      	movs	r3, #96	; 0x60
 800294e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	2200      	movs	r2, #0
 8002960:	4619      	mov	r1, r3
 8002962:	4812      	ldr	r0, [pc, #72]	; (80029ac <MX_TIM3_Init+0xd8>)
 8002964:	f003 f91c 	bl	8005ba0 <HAL_TIM_PWM_ConfigChannel>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800296e:	f000 f941 	bl	8002bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	2204      	movs	r2, #4
 8002976:	4619      	mov	r1, r3
 8002978:	480c      	ldr	r0, [pc, #48]	; (80029ac <MX_TIM3_Init+0xd8>)
 800297a:	f003 f911 	bl	8005ba0 <HAL_TIM_PWM_ConfigChannel>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002984:	f000 f936 	bl	8002bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	2208      	movs	r2, #8
 800298c:	4619      	mov	r1, r3
 800298e:	4807      	ldr	r0, [pc, #28]	; (80029ac <MX_TIM3_Init+0xd8>)
 8002990:	f003 f906 	bl	8005ba0 <HAL_TIM_PWM_ConfigChannel>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 800299a:	f000 f92b 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800299e:	4803      	ldr	r0, [pc, #12]	; (80029ac <MX_TIM3_Init+0xd8>)
 80029a0:	f000 fabc 	bl	8002f1c <HAL_TIM_MspPostInit>

}
 80029a4:	bf00      	nop
 80029a6:	3728      	adds	r7, #40	; 0x28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20004280 	.word	0x20004280
 80029b0:	40000400 	.word	0x40000400

080029b4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	; 0x28
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ba:	f107 0320 	add.w	r3, r7, #32
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	60da      	str	r2, [r3, #12]
 80029d0:	611a      	str	r2, [r3, #16]
 80029d2:	615a      	str	r2, [r3, #20]
 80029d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80029d6:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <MX_TIM5_Init+0xa4>)
 80029d8:	4a20      	ldr	r2, [pc, #128]	; (8002a5c <MX_TIM5_Init+0xa8>)
 80029da:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84;
 80029dc:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <MX_TIM5_Init+0xa4>)
 80029de:	2254      	movs	r2, #84	; 0x54
 80029e0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <MX_TIM5_Init+0xa4>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999999;
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <MX_TIM5_Init+0xa4>)
 80029ea:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <MX_TIM5_Init+0xac>)
 80029ec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ee:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <MX_TIM5_Init+0xa4>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f4:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <MX_TIM5_Init+0xa4>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80029fa:	4817      	ldr	r0, [pc, #92]	; (8002a58 <MX_TIM5_Init+0xa4>)
 80029fc:	f002 ffd6 	bl	80059ac <HAL_TIM_OC_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8002a06:	f000 f8f5 	bl	8002bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a12:	f107 0320 	add.w	r3, r7, #32
 8002a16:	4619      	mov	r1, r3
 8002a18:	480f      	ldr	r0, [pc, #60]	; (8002a58 <MX_TIM5_Init+0xa4>)
 8002a1a:	f003 fb8f 	bl	800613c <HAL_TIMEx_MasterConfigSynchronization>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8002a24:	f000 f8e6 	bl	8002bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4806      	ldr	r0, [pc, #24]	; (8002a58 <MX_TIM5_Init+0xa4>)
 8002a40:	f003 f852 	bl	8005ae8 <HAL_TIM_OC_ConfigChannel>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002a4a:	f000 f8d3 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002a4e:	bf00      	nop
 8002a50:	3728      	adds	r7, #40	; 0x28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20004238 	.word	0x20004238
 8002a5c:	40000c00 	.word	0x40000c00
 8002a60:	000f423f 	.word	0x000f423f

08002a64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <MX_USART2_UART_Init+0x4c>)
 8002a6a:	4a12      	ldr	r2, [pc, #72]	; (8002ab4 <MX_USART2_UART_Init+0x50>)
 8002a6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a6e:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <MX_USART2_UART_Init+0x4c>)
 8002a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a76:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <MX_USART2_UART_Init+0x4c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <MX_USART2_UART_Init+0x4c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <MX_USART2_UART_Init+0x4c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <MX_USART2_UART_Init+0x4c>)
 8002a8a:	220c      	movs	r2, #12
 8002a8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <MX_USART2_UART_Init+0x4c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <MX_USART2_UART_Init+0x4c>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8002a9a:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <MX_USART2_UART_Init+0x4c>)
 8002a9c:	f003 fc0e 	bl	80062bc <HAL_HalfDuplex_Init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002aa6:	f000 f8a5 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20004478 	.word	0x20004478
 8002ab4:	40004400 	.word	0x40004400

08002ab8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <MX_DMA_Init+0x3c>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a0b      	ldr	r2, [pc, #44]	; (8002af4 <MX_DMA_Init+0x3c>)
 8002ac8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <MX_DMA_Init+0x3c>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad6:	607b      	str	r3, [r7, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2100      	movs	r1, #0
 8002ade:	2038      	movs	r0, #56	; 0x38
 8002ae0:	f001 f817 	bl	8003b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ae4:	2038      	movs	r0, #56	; 0x38
 8002ae6:	f001 f830 	bl	8003b4a <HAL_NVIC_EnableIRQ>

}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800

08002af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	; 0x28
 8002afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afe:	f107 0314 	add.w	r3, r7, #20
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]
 8002b08:	609a      	str	r2, [r3, #8]
 8002b0a:	60da      	str	r2, [r3, #12]
 8002b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <MX_GPIO_Init+0xf0>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a34      	ldr	r2, [pc, #208]	; (8002be8 <MX_GPIO_Init+0xf0>)
 8002b18:	f043 0304 	orr.w	r3, r3, #4
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	4b32      	ldr	r3, [pc, #200]	; (8002be8 <MX_GPIO_Init+0xf0>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b2e      	ldr	r3, [pc, #184]	; (8002be8 <MX_GPIO_Init+0xf0>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a2d      	ldr	r2, [pc, #180]	; (8002be8 <MX_GPIO_Init+0xf0>)
 8002b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b2b      	ldr	r3, [pc, #172]	; (8002be8 <MX_GPIO_Init+0xf0>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <MX_GPIO_Init+0xf0>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a26      	ldr	r2, [pc, #152]	; (8002be8 <MX_GPIO_Init+0xf0>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <MX_GPIO_Init+0xf0>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	60bb      	str	r3, [r7, #8]
 8002b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	607b      	str	r3, [r7, #4]
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <MX_GPIO_Init+0xf0>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	4a1f      	ldr	r2, [pc, #124]	; (8002be8 <MX_GPIO_Init+0xf0>)
 8002b6c:	f043 0302 	orr.w	r3, r3, #2
 8002b70:	6313      	str	r3, [r2, #48]	; 0x30
 8002b72:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <MX_GPIO_Init+0xf0>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	607b      	str	r3, [r7, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f242 0171 	movw	r1, #8305	; 0x2071
 8002b84:	4819      	ldr	r0, [pc, #100]	; (8002bec <MX_GPIO_Init+0xf4>)
 8002b86:	f001 fc81 	bl	800448c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b90:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b9a:	f107 0314 	add.w	r3, r7, #20
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4813      	ldr	r0, [pc, #76]	; (8002bf0 <MX_GPIO_Init+0xf8>)
 8002ba2:	f001 fad7 	bl	8004154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5
 8002ba6:	f242 0371 	movw	r3, #8305	; 0x2071
 8002baa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bac:	2301      	movs	r3, #1
 8002bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	480b      	ldr	r0, [pc, #44]	; (8002bec <MX_GPIO_Init+0xf4>)
 8002bc0:	f001 fac8 	bl	8004154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002bc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd2:	f107 0314 	add.w	r3, r7, #20
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4804      	ldr	r0, [pc, #16]	; (8002bec <MX_GPIO_Init+0xf4>)
 8002bda:	f001 fabb 	bl	8004154 <HAL_GPIO_Init>

}
 8002bde:	bf00      	nop
 8002be0:	3728      	adds	r7, #40	; 0x28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40020400 	.word	0x40020400
 8002bf0:	40020800 	.word	0x40020800

08002bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bf8:	b672      	cpsid	i
}
 8002bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002bfc:	e7fe      	b.n	8002bfc <Error_Handler+0x8>
	...

08002c00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <HAL_MspInit+0x4c>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	4a0f      	ldr	r2, [pc, #60]	; (8002c4c <HAL_MspInit+0x4c>)
 8002c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c14:	6453      	str	r3, [r2, #68]	; 0x44
 8002c16:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <HAL_MspInit+0x4c>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1e:	607b      	str	r3, [r7, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_MspInit+0x4c>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	4a08      	ldr	r2, [pc, #32]	; (8002c4c <HAL_MspInit+0x4c>)
 8002c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c30:	6413      	str	r3, [r2, #64]	; 0x40
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_MspInit+0x4c>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c3e:	2007      	movs	r0, #7
 8002c40:	f000 ff5c 	bl	8003afc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40023800 	.word	0x40023800

08002c50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08c      	sub	sp, #48	; 0x30
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 031c 	add.w	r3, r7, #28
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a49      	ldr	r2, [pc, #292]	; (8002d94 <HAL_ADC_MspInit+0x144>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	f040 808c 	bne.w	8002d8c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c74:	2300      	movs	r3, #0
 8002c76:	61bb      	str	r3, [r7, #24]
 8002c78:	4b47      	ldr	r3, [pc, #284]	; (8002d98 <HAL_ADC_MspInit+0x148>)
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	4a46      	ldr	r2, [pc, #280]	; (8002d98 <HAL_ADC_MspInit+0x148>)
 8002c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c82:	6453      	str	r3, [r2, #68]	; 0x44
 8002c84:	4b44      	ldr	r3, [pc, #272]	; (8002d98 <HAL_ADC_MspInit+0x148>)
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	4b40      	ldr	r3, [pc, #256]	; (8002d98 <HAL_ADC_MspInit+0x148>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	4a3f      	ldr	r2, [pc, #252]	; (8002d98 <HAL_ADC_MspInit+0x148>)
 8002c9a:	f043 0304 	orr.w	r3, r3, #4
 8002c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca0:	4b3d      	ldr	r3, [pc, #244]	; (8002d98 <HAL_ADC_MspInit+0x148>)
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cac:	2300      	movs	r3, #0
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	4b39      	ldr	r3, [pc, #228]	; (8002d98 <HAL_ADC_MspInit+0x148>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	4a38      	ldr	r2, [pc, #224]	; (8002d98 <HAL_ADC_MspInit+0x148>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbc:	4b36      	ldr	r3, [pc, #216]	; (8002d98 <HAL_ADC_MspInit+0x148>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <HAL_ADC_MspInit+0x148>)
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	4a31      	ldr	r2, [pc, #196]	; (8002d98 <HAL_ADC_MspInit+0x148>)
 8002cd2:	f043 0302 	orr.w	r3, r3, #2
 8002cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd8:	4b2f      	ldr	r3, [pc, #188]	; (8002d98 <HAL_ADC_MspInit+0x148>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002ce4:	233f      	movs	r3, #63	; 0x3f
 8002ce6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf0:	f107 031c 	add.w	r3, r7, #28
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4829      	ldr	r0, [pc, #164]	; (8002d9c <HAL_ADC_MspInit+0x14c>)
 8002cf8:	f001 fa2c 	bl	8004154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8002cfc:	2311      	movs	r3, #17
 8002cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d00:	2303      	movs	r3, #3
 8002d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d08:	f107 031c 	add.w	r3, r7, #28
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4824      	ldr	r0, [pc, #144]	; (8002da0 <HAL_ADC_MspInit+0x150>)
 8002d10:	f001 fa20 	bl	8004154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d14:	2302      	movs	r3, #2
 8002d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d20:	f107 031c 	add.w	r3, r7, #28
 8002d24:	4619      	mov	r1, r3
 8002d26:	481f      	ldr	r0, [pc, #124]	; (8002da4 <HAL_ADC_MspInit+0x154>)
 8002d28:	f001 fa14 	bl	8004154 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002d2c:	4b1e      	ldr	r3, [pc, #120]	; (8002da8 <HAL_ADC_MspInit+0x158>)
 8002d2e:	4a1f      	ldr	r2, [pc, #124]	; (8002dac <HAL_ADC_MspInit+0x15c>)
 8002d30:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002d32:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_ADC_MspInit+0x158>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <HAL_ADC_MspInit+0x158>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d3e:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <HAL_ADC_MspInit+0x158>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d44:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <HAL_ADC_MspInit+0x158>)
 8002d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d4a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d4c:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_ADC_MspInit+0x158>)
 8002d4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d52:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d54:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <HAL_ADC_MspInit+0x158>)
 8002d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d5a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <HAL_ADC_MspInit+0x158>)
 8002d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d62:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d64:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <HAL_ADC_MspInit+0x158>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d6a:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <HAL_ADC_MspInit+0x158>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d70:	480d      	ldr	r0, [pc, #52]	; (8002da8 <HAL_ADC_MspInit+0x158>)
 8002d72:	f000 ff05 	bl	8003b80 <HAL_DMA_Init>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002d7c:	f7ff ff3a 	bl	8002bf4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a09      	ldr	r2, [pc, #36]	; (8002da8 <HAL_ADC_MspInit+0x158>)
 8002d84:	639a      	str	r2, [r3, #56]	; 0x38
 8002d86:	4a08      	ldr	r2, [pc, #32]	; (8002da8 <HAL_ADC_MspInit+0x158>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d8c:	bf00      	nop
 8002d8e:	3730      	adds	r7, #48	; 0x30
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40012000 	.word	0x40012000
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40020800 	.word	0x40020800
 8002da0:	40020000 	.word	0x40020000
 8002da4:	40020400 	.word	0x40020400
 8002da8:	20004328 	.word	0x20004328
 8002dac:	40026410 	.word	0x40026410

08002db0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 0314 	add.w	r3, r7, #20
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a19      	ldr	r2, [pc, #100]	; (8002e34 <HAL_SPI_MspInit+0x84>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d12b      	bne.n	8002e2a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <HAL_SPI_MspInit+0x88>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	4a17      	ldr	r2, [pc, #92]	; (8002e38 <HAL_SPI_MspInit+0x88>)
 8002ddc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002de0:	6453      	str	r3, [r2, #68]	; 0x44
 8002de2:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <HAL_SPI_MspInit+0x88>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <HAL_SPI_MspInit+0x88>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <HAL_SPI_MspInit+0x88>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <HAL_SPI_MspInit+0x88>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e0a:	23e0      	movs	r3, #224	; 0xe0
 8002e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e16:	2303      	movs	r3, #3
 8002e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e1a:	2305      	movs	r3, #5
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1e:	f107 0314 	add.w	r3, r7, #20
 8002e22:	4619      	mov	r1, r3
 8002e24:	4805      	ldr	r0, [pc, #20]	; (8002e3c <HAL_SPI_MspInit+0x8c>)
 8002e26:	f001 f995 	bl	8004154 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e2a:	bf00      	nop
 8002e2c:	3728      	adds	r7, #40	; 0x28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40013000 	.word	0x40013000
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40020000 	.word	0x40020000

08002e40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1f      	ldr	r2, [pc, #124]	; (8002ecc <HAL_TIM_PWM_MspInit+0x8c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d10e      	bne.n	8002e70 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <HAL_TIM_PWM_MspInit+0x90>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ed0 <HAL_TIM_PWM_MspInit+0x90>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6453      	str	r3, [r2, #68]	; 0x44
 8002e62:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <HAL_TIM_PWM_MspInit+0x90>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e6e:	e026      	b.n	8002ebe <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e78:	d10e      	bne.n	8002e98 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <HAL_TIM_PWM_MspInit+0x90>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	4a13      	ldr	r2, [pc, #76]	; (8002ed0 <HAL_TIM_PWM_MspInit+0x90>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <HAL_TIM_PWM_MspInit+0x90>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	693b      	ldr	r3, [r7, #16]
}
 8002e96:	e012      	b.n	8002ebe <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <HAL_TIM_PWM_MspInit+0x94>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d10d      	bne.n	8002ebe <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <HAL_TIM_PWM_MspInit+0x90>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <HAL_TIM_PWM_MspInit+0x90>)
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <HAL_TIM_PWM_MspInit+0x90>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
}
 8002ebe:	bf00      	nop
 8002ec0:	371c      	adds	r7, #28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40010000 	.word	0x40010000
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40000400 	.word	0x40000400

08002ed8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0b      	ldr	r2, [pc, #44]	; (8002f14 <HAL_TIM_OC_MspInit+0x3c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d10d      	bne.n	8002f06 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <HAL_TIM_OC_MspInit+0x40>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a09      	ldr	r2, [pc, #36]	; (8002f18 <HAL_TIM_OC_MspInit+0x40>)
 8002ef4:	f043 0308 	orr.w	r3, r3, #8
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8002efa:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <HAL_TIM_OC_MspInit+0x40>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40000c00 	.word	0x40000c00
 8002f18:	40023800 	.word	0x40023800

08002f1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08c      	sub	sp, #48	; 0x30
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f24:	f107 031c 	add.w	r3, r7, #28
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	60da      	str	r2, [r3, #12]
 8002f32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a47      	ldr	r2, [pc, #284]	; (8003058 <HAL_TIM_MspPostInit+0x13c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d11f      	bne.n	8002f7e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	4b46      	ldr	r3, [pc, #280]	; (800305c <HAL_TIM_MspPostInit+0x140>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	4a45      	ldr	r2, [pc, #276]	; (800305c <HAL_TIM_MspPostInit+0x140>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4e:	4b43      	ldr	r3, [pc, #268]	; (800305c <HAL_TIM_MspPostInit+0x140>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002f5a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f60:	2302      	movs	r3, #2
 8002f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f70:	f107 031c 	add.w	r3, r7, #28
 8002f74:	4619      	mov	r1, r3
 8002f76:	483a      	ldr	r0, [pc, #232]	; (8003060 <HAL_TIM_MspPostInit+0x144>)
 8002f78:	f001 f8ec 	bl	8004154 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002f7c:	e067      	b.n	800304e <HAL_TIM_MspPostInit+0x132>
  else if(htim->Instance==TIM2)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f86:	d13e      	bne.n	8003006 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	4b33      	ldr	r3, [pc, #204]	; (800305c <HAL_TIM_MspPostInit+0x140>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	4a32      	ldr	r2, [pc, #200]	; (800305c <HAL_TIM_MspPostInit+0x140>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6313      	str	r3, [r2, #48]	; 0x30
 8002f98:	4b30      	ldr	r3, [pc, #192]	; (800305c <HAL_TIM_MspPostInit+0x140>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	4b2c      	ldr	r3, [pc, #176]	; (800305c <HAL_TIM_MspPostInit+0x140>)
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	4a2b      	ldr	r2, [pc, #172]	; (800305c <HAL_TIM_MspPostInit+0x140>)
 8002fae:	f043 0302 	orr.w	r3, r3, #2
 8002fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb4:	4b29      	ldr	r3, [pc, #164]	; (800305c <HAL_TIM_MspPostInit+0x140>)
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8002fc0:	f248 0302 	movw	r3, #32770	; 0x8002
 8002fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd6:	f107 031c 	add.w	r3, r7, #28
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4820      	ldr	r0, [pc, #128]	; (8003060 <HAL_TIM_MspPostInit+0x144>)
 8002fde:	f001 f8b9 	bl	8004154 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff8:	f107 031c 	add.w	r3, r7, #28
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4819      	ldr	r0, [pc, #100]	; (8003064 <HAL_TIM_MspPostInit+0x148>)
 8003000:	f001 f8a8 	bl	8004154 <HAL_GPIO_Init>
}
 8003004:	e023      	b.n	800304e <HAL_TIM_MspPostInit+0x132>
  else if(htim->Instance==TIM3)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a17      	ldr	r2, [pc, #92]	; (8003068 <HAL_TIM_MspPostInit+0x14c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d11e      	bne.n	800304e <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_TIM_MspPostInit+0x140>)
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	4a10      	ldr	r2, [pc, #64]	; (800305c <HAL_TIM_MspPostInit+0x140>)
 800301a:	f043 0304 	orr.w	r3, r3, #4
 800301e:	6313      	str	r3, [r2, #48]	; 0x30
 8003020:	4b0e      	ldr	r3, [pc, #56]	; (800305c <HAL_TIM_MspPostInit+0x140>)
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800302c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003032:	2302      	movs	r3, #2
 8003034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303a:	2300      	movs	r3, #0
 800303c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800303e:	2302      	movs	r3, #2
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003042:	f107 031c 	add.w	r3, r7, #28
 8003046:	4619      	mov	r1, r3
 8003048:	4808      	ldr	r0, [pc, #32]	; (800306c <HAL_TIM_MspPostInit+0x150>)
 800304a:	f001 f883 	bl	8004154 <HAL_GPIO_Init>
}
 800304e:	bf00      	nop
 8003050:	3730      	adds	r7, #48	; 0x30
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40010000 	.word	0x40010000
 800305c:	40023800 	.word	0x40023800
 8003060:	40020000 	.word	0x40020000
 8003064:	40020400 	.word	0x40020400
 8003068:	40000400 	.word	0x40000400
 800306c:	40020800 	.word	0x40020800

08003070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08a      	sub	sp, #40	; 0x28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 0314 	add.w	r3, r7, #20
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <HAL_UART_MspInit+0x84>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d12b      	bne.n	80030ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <HAL_UART_MspInit+0x88>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4a17      	ldr	r2, [pc, #92]	; (80030f8 <HAL_UART_MspInit+0x88>)
 800309c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_UART_MspInit+0x88>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <HAL_UART_MspInit+0x88>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a10      	ldr	r2, [pc, #64]	; (80030f8 <HAL_UART_MspInit+0x88>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <HAL_UART_MspInit+0x88>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030ca:	2304      	movs	r3, #4
 80030cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030ce:	2312      	movs	r3, #18
 80030d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d6:	2303      	movs	r3, #3
 80030d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030da:	2307      	movs	r3, #7
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030de:	f107 0314 	add.w	r3, r7, #20
 80030e2:	4619      	mov	r1, r3
 80030e4:	4805      	ldr	r0, [pc, #20]	; (80030fc <HAL_UART_MspInit+0x8c>)
 80030e6:	f001 f835 	bl	8004154 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80030ea:	bf00      	nop
 80030ec:	3728      	adds	r7, #40	; 0x28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40004400 	.word	0x40004400
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40020000 	.word	0x40020000

08003100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003104:	e7fe      	b.n	8003104 <NMI_Handler+0x4>

08003106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800310a:	e7fe      	b.n	800310a <HardFault_Handler+0x4>

0800310c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003110:	e7fe      	b.n	8003110 <MemManage_Handler+0x4>

08003112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003116:	e7fe      	b.n	8003116 <BusFault_Handler+0x4>

08003118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800311c:	e7fe      	b.n	800311c <UsageFault_Handler+0x4>

0800311e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800314c:	f000 f960 	bl	8003410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003150:	bf00      	nop
 8003152:	bd80      	pop	{r7, pc}

08003154 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003158:	4802      	ldr	r0, [pc, #8]	; (8003164 <DMA2_Stream0_IRQHandler+0x10>)
 800315a:	f000 fdbf 	bl	8003cdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20004328 	.word	0x20004328

08003168 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
	return 1;
 800316c:	2301      	movs	r3, #1
}
 800316e:	4618      	mov	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <_kill>:

int _kill(int pid, int sig)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003182:	f003 fbb9 	bl	80068f8 <__errno>
 8003186:	4603      	mov	r3, r0
 8003188:	2216      	movs	r2, #22
 800318a:	601a      	str	r2, [r3, #0]
	return -1;
 800318c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <_exit>:

void _exit (int status)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80031a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ffe7 	bl	8003178 <_kill>
	while (1) {}		/* Make sure we hang here */
 80031aa:	e7fe      	b.n	80031aa <_exit+0x12>

080031ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	e00a      	b.n	80031d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80031be:	f3af 8000 	nop.w
 80031c2:	4601      	mov	r1, r0
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	60ba      	str	r2, [r7, #8]
 80031ca:	b2ca      	uxtb	r2, r1
 80031cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	3301      	adds	r3, #1
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	429a      	cmp	r2, r3
 80031da:	dbf0      	blt.n	80031be <_read+0x12>
	}

return len;
 80031dc:	687b      	ldr	r3, [r7, #4]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b086      	sub	sp, #24
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	e009      	b.n	800320c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	60ba      	str	r2, [r7, #8]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	3301      	adds	r3, #1
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	429a      	cmp	r2, r3
 8003212:	dbf1      	blt.n	80031f8 <_write+0x12>
	}
	return len;
 8003214:	687b      	ldr	r3, [r7, #4]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <_close>:

int _close(int file)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
	return -1;
 8003226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003246:	605a      	str	r2, [r3, #4]
	return 0;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <_isatty>:

int _isatty(int file)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
	return 1;
 800325e:	2301      	movs	r3, #1
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
	return 0;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003290:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <_sbrk+0x5c>)
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <_sbrk+0x60>)
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <_sbrk+0x64>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032a4:	4b11      	ldr	r3, [pc, #68]	; (80032ec <_sbrk+0x64>)
 80032a6:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <_sbrk+0x68>)
 80032a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <_sbrk+0x64>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d207      	bcs.n	80032c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032b8:	f003 fb1e 	bl	80068f8 <__errno>
 80032bc:	4603      	mov	r3, r0
 80032be:	220c      	movs	r2, #12
 80032c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032c6:	e009      	b.n	80032dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032c8:	4b08      	ldr	r3, [pc, #32]	; (80032ec <_sbrk+0x64>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032ce:	4b07      	ldr	r3, [pc, #28]	; (80032ec <_sbrk+0x64>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	4a05      	ldr	r2, [pc, #20]	; (80032ec <_sbrk+0x64>)
 80032d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032da:	68fb      	ldr	r3, [r7, #12]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20018000 	.word	0x20018000
 80032e8:	00000400 	.word	0x00000400
 80032ec:	20002220 	.word	0x20002220
 80032f0:	200044d8 	.word	0x200044d8

080032f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <SystemInit+0x20>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	4a05      	ldr	r2, [pc, #20]	; (8003314 <SystemInit+0x20>)
 8003300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003308:	bf00      	nop
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003350 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800331c:	480d      	ldr	r0, [pc, #52]	; (8003354 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800331e:	490e      	ldr	r1, [pc, #56]	; (8003358 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003320:	4a0e      	ldr	r2, [pc, #56]	; (800335c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003324:	e002      	b.n	800332c <LoopCopyDataInit>

08003326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800332a:	3304      	adds	r3, #4

0800332c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800332c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800332e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003330:	d3f9      	bcc.n	8003326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003332:	4a0b      	ldr	r2, [pc, #44]	; (8003360 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003334:	4c0b      	ldr	r4, [pc, #44]	; (8003364 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003338:	e001      	b.n	800333e <LoopFillZerobss>

0800333a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800333a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800333c:	3204      	adds	r2, #4

0800333e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800333e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003340:	d3fb      	bcc.n	800333a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003342:	f7ff ffd7 	bl	80032f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003346:	f003 fadd 	bl	8006904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800334a:	f7fe fdb5 	bl	8001eb8 <main>
  bx  lr    
 800334e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003350:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003358:	200021f0 	.word	0x200021f0
  ldr r2, =_sidata
 800335c:	0800a660 	.word	0x0800a660
  ldr r2, =_sbss
 8003360:	200021f0 	.word	0x200021f0
  ldr r4, =_ebss
 8003364:	200044d8 	.word	0x200044d8

08003368 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003368:	e7fe      	b.n	8003368 <ADC_IRQHandler>
	...

0800336c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <HAL_Init+0x40>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a0d      	ldr	r2, [pc, #52]	; (80033ac <HAL_Init+0x40>)
 8003376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800337a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_Init+0x40>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a0a      	ldr	r2, [pc, #40]	; (80033ac <HAL_Init+0x40>)
 8003382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003386:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003388:	4b08      	ldr	r3, [pc, #32]	; (80033ac <HAL_Init+0x40>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a07      	ldr	r2, [pc, #28]	; (80033ac <HAL_Init+0x40>)
 800338e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003392:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003394:	2003      	movs	r0, #3
 8003396:	f000 fbb1 	bl	8003afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800339a:	2000      	movs	r0, #0
 800339c:	f000 f808 	bl	80033b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033a0:	f7ff fc2e 	bl	8002c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40023c00 	.word	0x40023c00

080033b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <HAL_InitTick+0x54>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_InitTick+0x58>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	4619      	mov	r1, r3
 80033c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fbc9 	bl	8003b66 <HAL_SYSTICK_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e00e      	b.n	80033fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b0f      	cmp	r3, #15
 80033e2:	d80a      	bhi.n	80033fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033e4:	2200      	movs	r2, #0
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033ec:	f000 fb91 	bl	8003b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033f0:	4a06      	ldr	r2, [pc, #24]	; (800340c <HAL_InitTick+0x5c>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e000      	b.n	80033fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20002010 	.word	0x20002010
 8003408:	20002018 	.word	0x20002018
 800340c:	20002014 	.word	0x20002014

08003410 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_IncTick+0x20>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	4b06      	ldr	r3, [pc, #24]	; (8003434 <HAL_IncTick+0x24>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4413      	add	r3, r2
 8003420:	4a04      	ldr	r2, [pc, #16]	; (8003434 <HAL_IncTick+0x24>)
 8003422:	6013      	str	r3, [r2, #0]
}
 8003424:	bf00      	nop
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20002018 	.word	0x20002018
 8003434:	200044c4 	.word	0x200044c4

08003438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  return uwTick;
 800343c:	4b03      	ldr	r3, [pc, #12]	; (800344c <HAL_GetTick+0x14>)
 800343e:	681b      	ldr	r3, [r3, #0]
}
 8003440:	4618      	mov	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	200044c4 	.word	0x200044c4

08003450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003458:	f7ff ffee 	bl	8003438 <HAL_GetTick>
 800345c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003468:	d005      	beq.n	8003476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <HAL_Delay+0x44>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4413      	add	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003476:	bf00      	nop
 8003478:	f7ff ffde 	bl	8003438 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	429a      	cmp	r2, r3
 8003486:	d8f7      	bhi.n	8003478 <HAL_Delay+0x28>
  {
  }
}
 8003488:	bf00      	nop
 800348a:	bf00      	nop
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20002018 	.word	0x20002018

08003498 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e033      	b.n	8003516 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff fbca 	bl	8002c50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d118      	bne.n	8003508 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034de:	f023 0302 	bic.w	r3, r3, #2
 80034e2:	f043 0202 	orr.w	r2, r3, #2
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f93a 	bl	8003764 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f023 0303 	bic.w	r3, r3, #3
 80034fe:	f043 0201 	orr.w	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	641a      	str	r2, [r3, #64]	; 0x40
 8003506:	e001      	b.n	800350c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003514:	7bfb      	ldrb	r3, [r7, #15]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_ADC_ConfigChannel+0x1c>
 8003538:	2302      	movs	r3, #2
 800353a:	e105      	b.n	8003748 <HAL_ADC_ConfigChannel+0x228>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b09      	cmp	r3, #9
 800354a:	d925      	bls.n	8003598 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68d9      	ldr	r1, [r3, #12]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	b29b      	uxth	r3, r3
 8003558:	461a      	mov	r2, r3
 800355a:	4613      	mov	r3, r2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	4413      	add	r3, r2
 8003560:	3b1e      	subs	r3, #30
 8003562:	2207      	movs	r2, #7
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43da      	mvns	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	400a      	ands	r2, r1
 8003570:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68d9      	ldr	r1, [r3, #12]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	b29b      	uxth	r3, r3
 8003582:	4618      	mov	r0, r3
 8003584:	4603      	mov	r3, r0
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	4403      	add	r3, r0
 800358a:	3b1e      	subs	r3, #30
 800358c:	409a      	lsls	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	e022      	b.n	80035de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6919      	ldr	r1, [r3, #16]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	4613      	mov	r3, r2
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	4413      	add	r3, r2
 80035ac:	2207      	movs	r2, #7
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43da      	mvns	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	400a      	ands	r2, r1
 80035ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6919      	ldr	r1, [r3, #16]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	4618      	mov	r0, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	4403      	add	r3, r0
 80035d4:	409a      	lsls	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b06      	cmp	r3, #6
 80035e4:	d824      	bhi.n	8003630 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	3b05      	subs	r3, #5
 80035f8:	221f      	movs	r2, #31
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43da      	mvns	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	400a      	ands	r2, r1
 8003606:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	b29b      	uxth	r3, r3
 8003614:	4618      	mov	r0, r3
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	3b05      	subs	r3, #5
 8003622:	fa00 f203 	lsl.w	r2, r0, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	635a      	str	r2, [r3, #52]	; 0x34
 800362e:	e04c      	b.n	80036ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b0c      	cmp	r3, #12
 8003636:	d824      	bhi.n	8003682 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	3b23      	subs	r3, #35	; 0x23
 800364a:	221f      	movs	r2, #31
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43da      	mvns	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	400a      	ands	r2, r1
 8003658:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	b29b      	uxth	r3, r3
 8003666:	4618      	mov	r0, r3
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	3b23      	subs	r3, #35	; 0x23
 8003674:	fa00 f203 	lsl.w	r2, r0, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
 8003680:	e023      	b.n	80036ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	3b41      	subs	r3, #65	; 0x41
 8003694:	221f      	movs	r2, #31
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43da      	mvns	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	400a      	ands	r2, r1
 80036a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	4618      	mov	r0, r3
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	3b41      	subs	r3, #65	; 0x41
 80036be:	fa00 f203 	lsl.w	r2, r0, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036ca:	4b22      	ldr	r3, [pc, #136]	; (8003754 <HAL_ADC_ConfigChannel+0x234>)
 80036cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a21      	ldr	r2, [pc, #132]	; (8003758 <HAL_ADC_ConfigChannel+0x238>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d109      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x1cc>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b12      	cmp	r3, #18
 80036de:	d105      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a19      	ldr	r2, [pc, #100]	; (8003758 <HAL_ADC_ConfigChannel+0x238>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d123      	bne.n	800373e <HAL_ADC_ConfigChannel+0x21e>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d003      	beq.n	8003706 <HAL_ADC_ConfigChannel+0x1e6>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b11      	cmp	r3, #17
 8003704:	d11b      	bne.n	800373e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b10      	cmp	r3, #16
 8003718:	d111      	bne.n	800373e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800371a:	4b10      	ldr	r3, [pc, #64]	; (800375c <HAL_ADC_ConfigChannel+0x23c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a10      	ldr	r2, [pc, #64]	; (8003760 <HAL_ADC_ConfigChannel+0x240>)
 8003720:	fba2 2303 	umull	r2, r3, r2, r3
 8003724:	0c9a      	lsrs	r2, r3, #18
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003730:	e002      	b.n	8003738 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	3b01      	subs	r3, #1
 8003736:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f9      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	40012300 	.word	0x40012300
 8003758:	40012000 	.word	0x40012000
 800375c:	20002010 	.word	0x20002010
 8003760:	431bde83 	.word	0x431bde83

08003764 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800376c:	4b79      	ldr	r3, [pc, #484]	; (8003954 <ADC_Init+0x1f0>)
 800376e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	431a      	orrs	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003798:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	021a      	lsls	r2, r3, #8
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80037bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6859      	ldr	r1, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6899      	ldr	r1, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	4a58      	ldr	r2, [pc, #352]	; (8003958 <ADC_Init+0x1f4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d022      	beq.n	8003842 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800380a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6899      	ldr	r1, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800382c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6899      	ldr	r1, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	e00f      	b.n	8003862 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003850:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003860:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0202 	bic.w	r2, r2, #2
 8003870:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6899      	ldr	r1, [r3, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	7e1b      	ldrb	r3, [r3, #24]
 800387c:	005a      	lsls	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01b      	beq.n	80038c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800389e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6859      	ldr	r1, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	3b01      	subs	r3, #1
 80038bc:	035a      	lsls	r2, r3, #13
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
 80038c6:	e007      	b.n	80038d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	051a      	lsls	r2, r3, #20
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800390c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6899      	ldr	r1, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800391a:	025a      	lsls	r2, r3, #9
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003932:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6899      	ldr	r1, [r3, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	029a      	lsls	r2, r3, #10
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	609a      	str	r2, [r3, #8]
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	40012300 	.word	0x40012300
 8003958:	0f000001 	.word	0x0f000001

0800395c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800396c:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <__NVIC_SetPriorityGrouping+0x44>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003978:	4013      	ands	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800398c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800398e:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	60d3      	str	r3, [r2, #12]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	e000ed00 	.word	0xe000ed00

080039a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039a8:	4b04      	ldr	r3, [pc, #16]	; (80039bc <__NVIC_GetPriorityGrouping+0x18>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	0a1b      	lsrs	r3, r3, #8
 80039ae:	f003 0307 	and.w	r3, r3, #7
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	db0b      	blt.n	80039ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	f003 021f 	and.w	r2, r3, #31
 80039d8:	4907      	ldr	r1, [pc, #28]	; (80039f8 <__NVIC_EnableIRQ+0x38>)
 80039da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	2001      	movs	r0, #1
 80039e2:	fa00 f202 	lsl.w	r2, r0, r2
 80039e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	e000e100 	.word	0xe000e100

080039fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	6039      	str	r1, [r7, #0]
 8003a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	db0a      	blt.n	8003a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	490c      	ldr	r1, [pc, #48]	; (8003a48 <__NVIC_SetPriority+0x4c>)
 8003a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1a:	0112      	lsls	r2, r2, #4
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	440b      	add	r3, r1
 8003a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a24:	e00a      	b.n	8003a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	4908      	ldr	r1, [pc, #32]	; (8003a4c <__NVIC_SetPriority+0x50>)
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	3b04      	subs	r3, #4
 8003a34:	0112      	lsls	r2, r2, #4
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	440b      	add	r3, r1
 8003a3a:	761a      	strb	r2, [r3, #24]
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	e000e100 	.word	0xe000e100
 8003a4c:	e000ed00 	.word	0xe000ed00

08003a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b089      	sub	sp, #36	; 0x24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f1c3 0307 	rsb	r3, r3, #7
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	bf28      	it	cs
 8003a6e:	2304      	movcs	r3, #4
 8003a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	3304      	adds	r3, #4
 8003a76:	2b06      	cmp	r3, #6
 8003a78:	d902      	bls.n	8003a80 <NVIC_EncodePriority+0x30>
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3b03      	subs	r3, #3
 8003a7e:	e000      	b.n	8003a82 <NVIC_EncodePriority+0x32>
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	401a      	ands	r2, r3
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa2:	43d9      	mvns	r1, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa8:	4313      	orrs	r3, r2
         );
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3724      	adds	r7, #36	; 0x24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ac8:	d301      	bcc.n	8003ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aca:	2301      	movs	r3, #1
 8003acc:	e00f      	b.n	8003aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ace:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <SysTick_Config+0x40>)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ad6:	210f      	movs	r1, #15
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003adc:	f7ff ff8e 	bl	80039fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <SysTick_Config+0x40>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ae6:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <SysTick_Config+0x40>)
 8003ae8:	2207      	movs	r2, #7
 8003aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	e000e010 	.word	0xe000e010

08003afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff ff29 	bl	800395c <__NVIC_SetPriorityGrouping>
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b086      	sub	sp, #24
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	4603      	mov	r3, r0
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
 8003b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b24:	f7ff ff3e 	bl	80039a4 <__NVIC_GetPriorityGrouping>
 8003b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	6978      	ldr	r0, [r7, #20]
 8003b30:	f7ff ff8e 	bl	8003a50 <NVIC_EncodePriority>
 8003b34:	4602      	mov	r2, r0
 8003b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff ff5d 	bl	80039fc <__NVIC_SetPriority>
}
 8003b42:	bf00      	nop
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	4603      	mov	r3, r0
 8003b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff ff31 	bl	80039c0 <__NVIC_EnableIRQ>
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff ffa2 	bl	8003ab8 <SysTick_Config>
 8003b74:	4603      	mov	r3, r0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b8c:	f7ff fc54 	bl	8003438 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e099      	b.n	8003cd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bbc:	e00f      	b.n	8003bde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bbe:	f7ff fc3b 	bl	8003438 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b05      	cmp	r3, #5
 8003bca:	d908      	bls.n	8003bde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e078      	b.n	8003cd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e8      	bne.n	8003bbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	4b38      	ldr	r3, [pc, #224]	; (8003cd8 <HAL_DMA_Init+0x158>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d107      	bne.n	8003c48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	4313      	orrs	r3, r2
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f023 0307 	bic.w	r3, r3, #7
 8003c5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d117      	bne.n	8003ca2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00e      	beq.n	8003ca2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f9e9 	bl	800405c <DMA_CheckFifoParam>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2240      	movs	r2, #64	; 0x40
 8003c94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e016      	b.n	8003cd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f9a0 	bl	8003ff0 <DMA_CalcBaseAndBitshift>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb8:	223f      	movs	r2, #63	; 0x3f
 8003cba:	409a      	lsls	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	f010803f 	.word	0xf010803f

08003cdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ce8:	4b92      	ldr	r3, [pc, #584]	; (8003f34 <HAL_DMA_IRQHandler+0x258>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a92      	ldr	r2, [pc, #584]	; (8003f38 <HAL_DMA_IRQHandler+0x25c>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	0a9b      	lsrs	r3, r3, #10
 8003cf4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d06:	2208      	movs	r2, #8
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d01a      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d013      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0204 	bic.w	r2, r2, #4
 8003d2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d34:	2208      	movs	r2, #8
 8003d36:	409a      	lsls	r2, r3
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d40:	f043 0201 	orr.w	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d012      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d76:	f043 0202 	orr.w	r2, r3, #2
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d82:	2204      	movs	r2, #4
 8003d84:	409a      	lsls	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d012      	beq.n	8003db4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00b      	beq.n	8003db4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da0:	2204      	movs	r2, #4
 8003da2:	409a      	lsls	r2, r3
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dac:	f043 0204 	orr.w	r2, r3, #4
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db8:	2210      	movs	r2, #16
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d043      	beq.n	8003e4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d03c      	beq.n	8003e4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd6:	2210      	movs	r2, #16
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d018      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d108      	bne.n	8003e0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d024      	beq.n	8003e4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	4798      	blx	r3
 8003e0a:	e01f      	b.n	8003e4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01b      	beq.n	8003e4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	4798      	blx	r3
 8003e1c:	e016      	b.n	8003e4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d107      	bne.n	8003e3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0208 	bic.w	r2, r2, #8
 8003e3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e50:	2220      	movs	r2, #32
 8003e52:	409a      	lsls	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 808e 	beq.w	8003f7a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8086 	beq.w	8003f7a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e72:	2220      	movs	r2, #32
 8003e74:	409a      	lsls	r2, r3
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b05      	cmp	r3, #5
 8003e84:	d136      	bne.n	8003ef4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0216 	bic.w	r2, r2, #22
 8003e94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695a      	ldr	r2, [r3, #20]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ea4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d103      	bne.n	8003eb6 <HAL_DMA_IRQHandler+0x1da>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d007      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0208 	bic.w	r2, r2, #8
 8003ec4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eca:	223f      	movs	r2, #63	; 0x3f
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d07d      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	4798      	blx	r3
        }
        return;
 8003ef2:	e078      	b.n	8003fe6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d01c      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d108      	bne.n	8003f22 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d030      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
 8003f20:	e02b      	b.n	8003f7a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d027      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	4798      	blx	r3
 8003f32:	e022      	b.n	8003f7a <HAL_DMA_IRQHandler+0x29e>
 8003f34:	20002010 	.word	0x20002010
 8003f38:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10f      	bne.n	8003f6a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0210 	bic.w	r2, r2, #16
 8003f58:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d032      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d022      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2205      	movs	r2, #5
 8003f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d307      	bcc.n	8003fc2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f2      	bne.n	8003fa6 <HAL_DMA_IRQHandler+0x2ca>
 8003fc0:	e000      	b.n	8003fc4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003fc2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	4798      	blx	r3
 8003fe4:	e000      	b.n	8003fe8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003fe6:	bf00      	nop
    }
  }
}
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop

08003ff0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	3b10      	subs	r3, #16
 8004000:	4a14      	ldr	r2, [pc, #80]	; (8004054 <DMA_CalcBaseAndBitshift+0x64>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800400a:	4a13      	ldr	r2, [pc, #76]	; (8004058 <DMA_CalcBaseAndBitshift+0x68>)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b03      	cmp	r3, #3
 800401c:	d909      	bls.n	8004032 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004026:	f023 0303 	bic.w	r3, r3, #3
 800402a:	1d1a      	adds	r2, r3, #4
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	659a      	str	r2, [r3, #88]	; 0x58
 8004030:	e007      	b.n	8004042 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	aaaaaaab 	.word	0xaaaaaaab
 8004058:	0800a1f0 	.word	0x0800a1f0

0800405c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d11f      	bne.n	80040b6 <DMA_CheckFifoParam+0x5a>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d856      	bhi.n	800412a <DMA_CheckFifoParam+0xce>
 800407c:	a201      	add	r2, pc, #4	; (adr r2, 8004084 <DMA_CheckFifoParam+0x28>)
 800407e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004082:	bf00      	nop
 8004084:	08004095 	.word	0x08004095
 8004088:	080040a7 	.word	0x080040a7
 800408c:	08004095 	.word	0x08004095
 8004090:	0800412b 	.word	0x0800412b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d046      	beq.n	800412e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a4:	e043      	b.n	800412e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040ae:	d140      	bne.n	8004132 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040b4:	e03d      	b.n	8004132 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040be:	d121      	bne.n	8004104 <DMA_CheckFifoParam+0xa8>
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d837      	bhi.n	8004136 <DMA_CheckFifoParam+0xda>
 80040c6:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <DMA_CheckFifoParam+0x70>)
 80040c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040cc:	080040dd 	.word	0x080040dd
 80040d0:	080040e3 	.word	0x080040e3
 80040d4:	080040dd 	.word	0x080040dd
 80040d8:	080040f5 	.word	0x080040f5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
      break;
 80040e0:	e030      	b.n	8004144 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d025      	beq.n	800413a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f2:	e022      	b.n	800413a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040fc:	d11f      	bne.n	800413e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004102:	e01c      	b.n	800413e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b02      	cmp	r3, #2
 8004108:	d903      	bls.n	8004112 <DMA_CheckFifoParam+0xb6>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b03      	cmp	r3, #3
 800410e:	d003      	beq.n	8004118 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004110:	e018      	b.n	8004144 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	73fb      	strb	r3, [r7, #15]
      break;
 8004116:	e015      	b.n	8004144 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00e      	beq.n	8004142 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
      break;
 8004128:	e00b      	b.n	8004142 <DMA_CheckFifoParam+0xe6>
      break;
 800412a:	bf00      	nop
 800412c:	e00a      	b.n	8004144 <DMA_CheckFifoParam+0xe8>
      break;
 800412e:	bf00      	nop
 8004130:	e008      	b.n	8004144 <DMA_CheckFifoParam+0xe8>
      break;
 8004132:	bf00      	nop
 8004134:	e006      	b.n	8004144 <DMA_CheckFifoParam+0xe8>
      break;
 8004136:	bf00      	nop
 8004138:	e004      	b.n	8004144 <DMA_CheckFifoParam+0xe8>
      break;
 800413a:	bf00      	nop
 800413c:	e002      	b.n	8004144 <DMA_CheckFifoParam+0xe8>
      break;   
 800413e:	bf00      	nop
 8004140:	e000      	b.n	8004144 <DMA_CheckFifoParam+0xe8>
      break;
 8004142:	bf00      	nop
    }
  } 
  
  return status; 
 8004144:	7bfb      	ldrb	r3, [r7, #15]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop

08004154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004154:	b480      	push	{r7}
 8004156:	b089      	sub	sp, #36	; 0x24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004162:	2300      	movs	r3, #0
 8004164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004166:	2300      	movs	r3, #0
 8004168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
 800416e:	e159      	b.n	8004424 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004170:	2201      	movs	r2, #1
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4013      	ands	r3, r2
 8004182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	429a      	cmp	r2, r3
 800418a:	f040 8148 	bne.w	800441e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	2b01      	cmp	r3, #1
 8004198:	d005      	beq.n	80041a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d130      	bne.n	8004208 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	2203      	movs	r2, #3
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041dc:	2201      	movs	r2, #1
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	43db      	mvns	r3, r3
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4013      	ands	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	f003 0201 	and.w	r2, r3, #1
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4313      	orrs	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	2b03      	cmp	r3, #3
 8004212:	d017      	beq.n	8004244 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	2203      	movs	r2, #3
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	43db      	mvns	r3, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4013      	ands	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 0303 	and.w	r3, r3, #3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d123      	bne.n	8004298 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	08da      	lsrs	r2, r3, #3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3208      	adds	r2, #8
 8004258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800425c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	220f      	movs	r2, #15
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4013      	ands	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4313      	orrs	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	08da      	lsrs	r2, r3, #3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3208      	adds	r2, #8
 8004292:	69b9      	ldr	r1, [r7, #24]
 8004294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	2203      	movs	r2, #3
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4013      	ands	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0203 	and.w	r2, r3, #3
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 80a2 	beq.w	800441e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	4b57      	ldr	r3, [pc, #348]	; (800443c <HAL_GPIO_Init+0x2e8>)
 80042e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e2:	4a56      	ldr	r2, [pc, #344]	; (800443c <HAL_GPIO_Init+0x2e8>)
 80042e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042e8:	6453      	str	r3, [r2, #68]	; 0x44
 80042ea:	4b54      	ldr	r3, [pc, #336]	; (800443c <HAL_GPIO_Init+0x2e8>)
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042f6:	4a52      	ldr	r2, [pc, #328]	; (8004440 <HAL_GPIO_Init+0x2ec>)
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	089b      	lsrs	r3, r3, #2
 80042fc:	3302      	adds	r3, #2
 80042fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	220f      	movs	r2, #15
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43db      	mvns	r3, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4013      	ands	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a49      	ldr	r2, [pc, #292]	; (8004444 <HAL_GPIO_Init+0x2f0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d019      	beq.n	8004356 <HAL_GPIO_Init+0x202>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a48      	ldr	r2, [pc, #288]	; (8004448 <HAL_GPIO_Init+0x2f4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d013      	beq.n	8004352 <HAL_GPIO_Init+0x1fe>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a47      	ldr	r2, [pc, #284]	; (800444c <HAL_GPIO_Init+0x2f8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00d      	beq.n	800434e <HAL_GPIO_Init+0x1fa>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a46      	ldr	r2, [pc, #280]	; (8004450 <HAL_GPIO_Init+0x2fc>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d007      	beq.n	800434a <HAL_GPIO_Init+0x1f6>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a45      	ldr	r2, [pc, #276]	; (8004454 <HAL_GPIO_Init+0x300>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d101      	bne.n	8004346 <HAL_GPIO_Init+0x1f2>
 8004342:	2304      	movs	r3, #4
 8004344:	e008      	b.n	8004358 <HAL_GPIO_Init+0x204>
 8004346:	2307      	movs	r3, #7
 8004348:	e006      	b.n	8004358 <HAL_GPIO_Init+0x204>
 800434a:	2303      	movs	r3, #3
 800434c:	e004      	b.n	8004358 <HAL_GPIO_Init+0x204>
 800434e:	2302      	movs	r3, #2
 8004350:	e002      	b.n	8004358 <HAL_GPIO_Init+0x204>
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <HAL_GPIO_Init+0x204>
 8004356:	2300      	movs	r3, #0
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	f002 0203 	and.w	r2, r2, #3
 800435e:	0092      	lsls	r2, r2, #2
 8004360:	4093      	lsls	r3, r2
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4313      	orrs	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004368:	4935      	ldr	r1, [pc, #212]	; (8004440 <HAL_GPIO_Init+0x2ec>)
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	089b      	lsrs	r3, r3, #2
 800436e:	3302      	adds	r3, #2
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004376:	4b38      	ldr	r3, [pc, #224]	; (8004458 <HAL_GPIO_Init+0x304>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	43db      	mvns	r3, r3
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	4013      	ands	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800439a:	4a2f      	ldr	r2, [pc, #188]	; (8004458 <HAL_GPIO_Init+0x304>)
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80043a0:	4b2d      	ldr	r3, [pc, #180]	; (8004458 <HAL_GPIO_Init+0x304>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	43db      	mvns	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043c4:	4a24      	ldr	r2, [pc, #144]	; (8004458 <HAL_GPIO_Init+0x304>)
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ca:	4b23      	ldr	r3, [pc, #140]	; (8004458 <HAL_GPIO_Init+0x304>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	43db      	mvns	r3, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4013      	ands	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043ee:	4a1a      	ldr	r2, [pc, #104]	; (8004458 <HAL_GPIO_Init+0x304>)
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043f4:	4b18      	ldr	r3, [pc, #96]	; (8004458 <HAL_GPIO_Init+0x304>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4013      	ands	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004418:	4a0f      	ldr	r2, [pc, #60]	; (8004458 <HAL_GPIO_Init+0x304>)
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3301      	adds	r3, #1
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	2b0f      	cmp	r3, #15
 8004428:	f67f aea2 	bls.w	8004170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	3724      	adds	r7, #36	; 0x24
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800
 8004440:	40013800 	.word	0x40013800
 8004444:	40020000 	.word	0x40020000
 8004448:	40020400 	.word	0x40020400
 800444c:	40020800 	.word	0x40020800
 8004450:	40020c00 	.word	0x40020c00
 8004454:	40021000 	.word	0x40021000
 8004458:	40013c00 	.word	0x40013c00

0800445c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	887b      	ldrh	r3, [r7, #2]
 800446e:	4013      	ands	r3, r2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
 8004478:	e001      	b.n	800447e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800447a:	2300      	movs	r3, #0
 800447c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800447e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	807b      	strh	r3, [r7, #2]
 8004498:	4613      	mov	r3, r2
 800449a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800449c:	787b      	ldrb	r3, [r7, #1]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044a2:	887a      	ldrh	r2, [r7, #2]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044a8:	e003      	b.n	80044b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044aa:	887b      	ldrh	r3, [r7, #2]
 80044ac:	041a      	lsls	r2, r3, #16
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	619a      	str	r2, [r3, #24]
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
	...

080044c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e264      	b.n	800499c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d075      	beq.n	80045ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044de:	4ba3      	ldr	r3, [pc, #652]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 030c 	and.w	r3, r3, #12
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d00c      	beq.n	8004504 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ea:	4ba0      	ldr	r3, [pc, #640]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d112      	bne.n	800451c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044f6:	4b9d      	ldr	r3, [pc, #628]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004502:	d10b      	bne.n	800451c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004504:	4b99      	ldr	r3, [pc, #612]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d05b      	beq.n	80045c8 <HAL_RCC_OscConfig+0x108>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d157      	bne.n	80045c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e23f      	b.n	800499c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004524:	d106      	bne.n	8004534 <HAL_RCC_OscConfig+0x74>
 8004526:	4b91      	ldr	r3, [pc, #580]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a90      	ldr	r2, [pc, #576]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 800452c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	e01d      	b.n	8004570 <HAL_RCC_OscConfig+0xb0>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800453c:	d10c      	bne.n	8004558 <HAL_RCC_OscConfig+0x98>
 800453e:	4b8b      	ldr	r3, [pc, #556]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a8a      	ldr	r2, [pc, #552]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 8004544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	4b88      	ldr	r3, [pc, #544]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a87      	ldr	r2, [pc, #540]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 8004550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e00b      	b.n	8004570 <HAL_RCC_OscConfig+0xb0>
 8004558:	4b84      	ldr	r3, [pc, #528]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a83      	ldr	r2, [pc, #524]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 800455e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	4b81      	ldr	r3, [pc, #516]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a80      	ldr	r2, [pc, #512]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 800456a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800456e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d013      	beq.n	80045a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fe ff5e 	bl	8003438 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004580:	f7fe ff5a 	bl	8003438 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	; 0x64
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e204      	b.n	800499c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	4b76      	ldr	r3, [pc, #472]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCC_OscConfig+0xc0>
 800459e:	e014      	b.n	80045ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7fe ff4a 	bl	8003438 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045a8:	f7fe ff46 	bl	8003438 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b64      	cmp	r3, #100	; 0x64
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e1f0      	b.n	800499c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ba:	4b6c      	ldr	r3, [pc, #432]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0xe8>
 80045c6:	e000      	b.n	80045ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d063      	beq.n	800469e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045d6:	4b65      	ldr	r3, [pc, #404]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045e2:	4b62      	ldr	r3, [pc, #392]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d11c      	bne.n	8004628 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ee:	4b5f      	ldr	r3, [pc, #380]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d116      	bne.n	8004628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fa:	4b5c      	ldr	r3, [pc, #368]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <HAL_RCC_OscConfig+0x152>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d001      	beq.n	8004612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e1c4      	b.n	800499c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004612:	4b56      	ldr	r3, [pc, #344]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	4952      	ldr	r1, [pc, #328]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004626:	e03a      	b.n	800469e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d020      	beq.n	8004672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004630:	4b4f      	ldr	r3, [pc, #316]	; (8004770 <HAL_RCC_OscConfig+0x2b0>)
 8004632:	2201      	movs	r2, #1
 8004634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004636:	f7fe feff 	bl	8003438 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800463e:	f7fe fefb 	bl	8003438 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e1a5      	b.n	800499c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004650:	4b46      	ldr	r3, [pc, #280]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465c:	4b43      	ldr	r3, [pc, #268]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4940      	ldr	r1, [pc, #256]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 800466c:	4313      	orrs	r3, r2
 800466e:	600b      	str	r3, [r1, #0]
 8004670:	e015      	b.n	800469e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004672:	4b3f      	ldr	r3, [pc, #252]	; (8004770 <HAL_RCC_OscConfig+0x2b0>)
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fe fede 	bl	8003438 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004680:	f7fe feda 	bl	8003438 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e184      	b.n	800499c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004692:	4b36      	ldr	r3, [pc, #216]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d030      	beq.n	800470c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d016      	beq.n	80046e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046b2:	4b30      	ldr	r3, [pc, #192]	; (8004774 <HAL_RCC_OscConfig+0x2b4>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b8:	f7fe febe 	bl	8003438 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c0:	f7fe feba 	bl	8003438 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e164      	b.n	800499c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d2:	4b26      	ldr	r3, [pc, #152]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 80046d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x200>
 80046de:	e015      	b.n	800470c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046e0:	4b24      	ldr	r3, [pc, #144]	; (8004774 <HAL_RCC_OscConfig+0x2b4>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e6:	f7fe fea7 	bl	8003438 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ee:	f7fe fea3 	bl	8003438 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e14d      	b.n	800499c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004700:	4b1a      	ldr	r3, [pc, #104]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 8004702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1f0      	bne.n	80046ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80a0 	beq.w	800485a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800471a:	2300      	movs	r3, #0
 800471c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800471e:	4b13      	ldr	r3, [pc, #76]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10f      	bne.n	800474a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	4b0f      	ldr	r3, [pc, #60]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	4a0e      	ldr	r2, [pc, #56]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 8004734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004738:	6413      	str	r3, [r2, #64]	; 0x40
 800473a:	4b0c      	ldr	r3, [pc, #48]	; (800476c <HAL_RCC_OscConfig+0x2ac>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004746:	2301      	movs	r3, #1
 8004748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474a:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RCC_OscConfig+0x2b8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d121      	bne.n	800479a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004756:	4b08      	ldr	r3, [pc, #32]	; (8004778 <HAL_RCC_OscConfig+0x2b8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a07      	ldr	r2, [pc, #28]	; (8004778 <HAL_RCC_OscConfig+0x2b8>)
 800475c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004762:	f7fe fe69 	bl	8003438 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004768:	e011      	b.n	800478e <HAL_RCC_OscConfig+0x2ce>
 800476a:	bf00      	nop
 800476c:	40023800 	.word	0x40023800
 8004770:	42470000 	.word	0x42470000
 8004774:	42470e80 	.word	0x42470e80
 8004778:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800477c:	f7fe fe5c 	bl	8003438 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e106      	b.n	800499c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478e:	4b85      	ldr	r3, [pc, #532]	; (80049a4 <HAL_RCC_OscConfig+0x4e4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0f0      	beq.n	800477c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d106      	bne.n	80047b0 <HAL_RCC_OscConfig+0x2f0>
 80047a2:	4b81      	ldr	r3, [pc, #516]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a6:	4a80      	ldr	r2, [pc, #512]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	6713      	str	r3, [r2, #112]	; 0x70
 80047ae:	e01c      	b.n	80047ea <HAL_RCC_OscConfig+0x32a>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b05      	cmp	r3, #5
 80047b6:	d10c      	bne.n	80047d2 <HAL_RCC_OscConfig+0x312>
 80047b8:	4b7b      	ldr	r3, [pc, #492]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047bc:	4a7a      	ldr	r2, [pc, #488]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 80047be:	f043 0304 	orr.w	r3, r3, #4
 80047c2:	6713      	str	r3, [r2, #112]	; 0x70
 80047c4:	4b78      	ldr	r3, [pc, #480]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 80047c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c8:	4a77      	ldr	r2, [pc, #476]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	6713      	str	r3, [r2, #112]	; 0x70
 80047d0:	e00b      	b.n	80047ea <HAL_RCC_OscConfig+0x32a>
 80047d2:	4b75      	ldr	r3, [pc, #468]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	4a74      	ldr	r2, [pc, #464]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 80047d8:	f023 0301 	bic.w	r3, r3, #1
 80047dc:	6713      	str	r3, [r2, #112]	; 0x70
 80047de:	4b72      	ldr	r3, [pc, #456]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 80047e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e2:	4a71      	ldr	r2, [pc, #452]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 80047e4:	f023 0304 	bic.w	r3, r3, #4
 80047e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d015      	beq.n	800481e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f2:	f7fe fe21 	bl	8003438 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f8:	e00a      	b.n	8004810 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047fa:	f7fe fe1d 	bl	8003438 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	f241 3288 	movw	r2, #5000	; 0x1388
 8004808:	4293      	cmp	r3, r2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e0c5      	b.n	800499c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004810:	4b65      	ldr	r3, [pc, #404]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 8004812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0ee      	beq.n	80047fa <HAL_RCC_OscConfig+0x33a>
 800481c:	e014      	b.n	8004848 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481e:	f7fe fe0b 	bl	8003438 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004824:	e00a      	b.n	800483c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004826:	f7fe fe07 	bl	8003438 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	f241 3288 	movw	r2, #5000	; 0x1388
 8004834:	4293      	cmp	r3, r2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e0af      	b.n	800499c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800483c:	4b5a      	ldr	r3, [pc, #360]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1ee      	bne.n	8004826 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004848:	7dfb      	ldrb	r3, [r7, #23]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d105      	bne.n	800485a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484e:	4b56      	ldr	r3, [pc, #344]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	4a55      	ldr	r2, [pc, #340]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 8004854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004858:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 809b 	beq.w	800499a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004864:	4b50      	ldr	r3, [pc, #320]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 030c 	and.w	r3, r3, #12
 800486c:	2b08      	cmp	r3, #8
 800486e:	d05c      	beq.n	800492a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d141      	bne.n	80048fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004878:	4b4c      	ldr	r3, [pc, #304]	; (80049ac <HAL_RCC_OscConfig+0x4ec>)
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487e:	f7fe fddb 	bl	8003438 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004886:	f7fe fdd7 	bl	8003438 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e081      	b.n	800499c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004898:	4b43      	ldr	r3, [pc, #268]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1f0      	bne.n	8004886 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	019b      	lsls	r3, r3, #6
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	085b      	lsrs	r3, r3, #1
 80048bc:	3b01      	subs	r3, #1
 80048be:	041b      	lsls	r3, r3, #16
 80048c0:	431a      	orrs	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	061b      	lsls	r3, r3, #24
 80048c8:	4937      	ldr	r1, [pc, #220]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048ce:	4b37      	ldr	r3, [pc, #220]	; (80049ac <HAL_RCC_OscConfig+0x4ec>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7fe fdb0 	bl	8003438 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048dc:	f7fe fdac 	bl	8003438 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e056      	b.n	800499c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ee:	4b2e      	ldr	r3, [pc, #184]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0x41c>
 80048fa:	e04e      	b.n	800499a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fc:	4b2b      	ldr	r3, [pc, #172]	; (80049ac <HAL_RCC_OscConfig+0x4ec>)
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004902:	f7fe fd99 	bl	8003438 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490a:	f7fe fd95 	bl	8003438 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e03f      	b.n	800499c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491c:	4b22      	ldr	r3, [pc, #136]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f0      	bne.n	800490a <HAL_RCC_OscConfig+0x44a>
 8004928:	e037      	b.n	800499a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e032      	b.n	800499c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004936:	4b1c      	ldr	r3, [pc, #112]	; (80049a8 <HAL_RCC_OscConfig+0x4e8>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d028      	beq.n	8004996 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800494e:	429a      	cmp	r2, r3
 8004950:	d121      	bne.n	8004996 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495c:	429a      	cmp	r2, r3
 800495e:	d11a      	bne.n	8004996 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004966:	4013      	ands	r3, r2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800496c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800496e:	4293      	cmp	r3, r2
 8004970:	d111      	bne.n	8004996 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	085b      	lsrs	r3, r3, #1
 800497e:	3b01      	subs	r3, #1
 8004980:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004982:	429a      	cmp	r2, r3
 8004984:	d107      	bne.n	8004996 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004992:	429a      	cmp	r2, r3
 8004994:	d001      	beq.n	800499a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40007000 	.word	0x40007000
 80049a8:	40023800 	.word	0x40023800
 80049ac:	42470060 	.word	0x42470060

080049b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0cc      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049c4:	4b68      	ldr	r3, [pc, #416]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d90c      	bls.n	80049ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d2:	4b65      	ldr	r3, [pc, #404]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049da:	4b63      	ldr	r3, [pc, #396]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d001      	beq.n	80049ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0b8      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d020      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a04:	4b59      	ldr	r3, [pc, #356]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4a58      	ldr	r2, [pc, #352]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a1c:	4b53      	ldr	r3, [pc, #332]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4a52      	ldr	r2, [pc, #328]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a28:	4b50      	ldr	r3, [pc, #320]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	494d      	ldr	r1, [pc, #308]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d044      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d107      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a4e:	4b47      	ldr	r3, [pc, #284]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d119      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e07f      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d003      	beq.n	8004a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d107      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6e:	4b3f      	ldr	r3, [pc, #252]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e06f      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7e:	4b3b      	ldr	r3, [pc, #236]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e067      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a8e:	4b37      	ldr	r3, [pc, #220]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f023 0203 	bic.w	r2, r3, #3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	4934      	ldr	r1, [pc, #208]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aa0:	f7fe fcca 	bl	8003438 <HAL_GetTick>
 8004aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa6:	e00a      	b.n	8004abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa8:	f7fe fcc6 	bl	8003438 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e04f      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004abe:	4b2b      	ldr	r3, [pc, #172]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 020c 	and.w	r2, r3, #12
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d1eb      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad0:	4b25      	ldr	r3, [pc, #148]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d20c      	bcs.n	8004af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ade:	4b22      	ldr	r3, [pc, #136]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae6:	4b20      	ldr	r3, [pc, #128]	; (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d001      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e032      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b04:	4b19      	ldr	r3, [pc, #100]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4916      	ldr	r1, [pc, #88]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b22:	4b12      	ldr	r3, [pc, #72]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	490e      	ldr	r1, [pc, #56]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b36:	f000 f821 	bl	8004b7c <HAL_RCC_GetSysClockFreq>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	490a      	ldr	r1, [pc, #40]	; (8004b70 <HAL_RCC_ClockConfig+0x1c0>)
 8004b48:	5ccb      	ldrb	r3, [r1, r3]
 8004b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4e:	4a09      	ldr	r2, [pc, #36]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b52:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <HAL_RCC_ClockConfig+0x1c8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fe fc2a 	bl	80033b0 <HAL_InitTick>

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40023c00 	.word	0x40023c00
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	0800a1d8 	.word	0x0800a1d8
 8004b74:	20002010 	.word	0x20002010
 8004b78:	20002014 	.word	0x20002014

08004b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	607b      	str	r3, [r7, #4]
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b94:	4b67      	ldr	r3, [pc, #412]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 030c 	and.w	r3, r3, #12
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d00d      	beq.n	8004bbc <HAL_RCC_GetSysClockFreq+0x40>
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	f200 80bd 	bhi.w	8004d20 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d003      	beq.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bae:	e0b7      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bb0:	4b61      	ldr	r3, [pc, #388]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004bb2:	60bb      	str	r3, [r7, #8]
       break;
 8004bb4:	e0b7      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bb6:	4b61      	ldr	r3, [pc, #388]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004bb8:	60bb      	str	r3, [r7, #8]
      break;
 8004bba:	e0b4      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bbc:	4b5d      	ldr	r3, [pc, #372]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bc4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bc6:	4b5b      	ldr	r3, [pc, #364]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d04d      	beq.n	8004c6e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bd2:	4b58      	ldr	r3, [pc, #352]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	099b      	lsrs	r3, r3, #6
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004be2:	f04f 0100 	mov.w	r1, #0
 8004be6:	ea02 0800 	and.w	r8, r2, r0
 8004bea:	ea03 0901 	and.w	r9, r3, r1
 8004bee:	4640      	mov	r0, r8
 8004bf0:	4649      	mov	r1, r9
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	014b      	lsls	r3, r1, #5
 8004bfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c00:	0142      	lsls	r2, r0, #5
 8004c02:	4610      	mov	r0, r2
 8004c04:	4619      	mov	r1, r3
 8004c06:	ebb0 0008 	subs.w	r0, r0, r8
 8004c0a:	eb61 0109 	sbc.w	r1, r1, r9
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	018b      	lsls	r3, r1, #6
 8004c18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c1c:	0182      	lsls	r2, r0, #6
 8004c1e:	1a12      	subs	r2, r2, r0
 8004c20:	eb63 0301 	sbc.w	r3, r3, r1
 8004c24:	f04f 0000 	mov.w	r0, #0
 8004c28:	f04f 0100 	mov.w	r1, #0
 8004c2c:	00d9      	lsls	r1, r3, #3
 8004c2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c32:	00d0      	lsls	r0, r2, #3
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	eb12 0208 	adds.w	r2, r2, r8
 8004c3c:	eb43 0309 	adc.w	r3, r3, r9
 8004c40:	f04f 0000 	mov.w	r0, #0
 8004c44:	f04f 0100 	mov.w	r1, #0
 8004c48:	0259      	lsls	r1, r3, #9
 8004c4a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004c4e:	0250      	lsls	r0, r2, #9
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4610      	mov	r0, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	f7fb fffa 	bl	8000c58 <__aeabi_uldivmod>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4613      	mov	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	e04a      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c6e:	4b31      	ldr	r3, [pc, #196]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	099b      	lsrs	r3, r3, #6
 8004c74:	461a      	mov	r2, r3
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c7e:	f04f 0100 	mov.w	r1, #0
 8004c82:	ea02 0400 	and.w	r4, r2, r0
 8004c86:	ea03 0501 	and.w	r5, r3, r1
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	014b      	lsls	r3, r1, #5
 8004c98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c9c:	0142      	lsls	r2, r0, #5
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	1b00      	subs	r0, r0, r4
 8004ca4:	eb61 0105 	sbc.w	r1, r1, r5
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	018b      	lsls	r3, r1, #6
 8004cb2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004cb6:	0182      	lsls	r2, r0, #6
 8004cb8:	1a12      	subs	r2, r2, r0
 8004cba:	eb63 0301 	sbc.w	r3, r3, r1
 8004cbe:	f04f 0000 	mov.w	r0, #0
 8004cc2:	f04f 0100 	mov.w	r1, #0
 8004cc6:	00d9      	lsls	r1, r3, #3
 8004cc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ccc:	00d0      	lsls	r0, r2, #3
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	1912      	adds	r2, r2, r4
 8004cd4:	eb45 0303 	adc.w	r3, r5, r3
 8004cd8:	f04f 0000 	mov.w	r0, #0
 8004cdc:	f04f 0100 	mov.w	r1, #0
 8004ce0:	0299      	lsls	r1, r3, #10
 8004ce2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ce6:	0290      	lsls	r0, r2, #10
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4610      	mov	r0, r2
 8004cee:	4619      	mov	r1, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	f7fb ffae 	bl	8000c58 <__aeabi_uldivmod>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4613      	mov	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d04:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	0c1b      	lsrs	r3, r3, #16
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	3301      	adds	r3, #1
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1c:	60bb      	str	r3, [r7, #8]
      break;
 8004d1e:	e002      	b.n	8004d26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d20:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d22:	60bb      	str	r3, [r7, #8]
      break;
 8004d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d26:	68bb      	ldr	r3, [r7, #8]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d32:	bf00      	nop
 8004d34:	40023800 	.word	0x40023800
 8004d38:	00f42400 	.word	0x00f42400
 8004d3c:	007a1200 	.word	0x007a1200

08004d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d44:	4b03      	ldr	r3, [pc, #12]	; (8004d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d46:	681b      	ldr	r3, [r3, #0]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	20002010 	.word	0x20002010

08004d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d5c:	f7ff fff0 	bl	8004d40 <HAL_RCC_GetHCLKFreq>
 8004d60:	4602      	mov	r2, r0
 8004d62:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	0a9b      	lsrs	r3, r3, #10
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	4903      	ldr	r1, [pc, #12]	; (8004d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d6e:	5ccb      	ldrb	r3, [r1, r3]
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	0800a1e8 	.word	0x0800a1e8

08004d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d84:	f7ff ffdc 	bl	8004d40 <HAL_RCC_GetHCLKFreq>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	0b5b      	lsrs	r3, r3, #13
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	4903      	ldr	r1, [pc, #12]	; (8004da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d96:	5ccb      	ldrb	r3, [r1, r3]
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40023800 	.word	0x40023800
 8004da4:	0800a1e8 	.word	0x0800a1e8

08004da8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e07b      	b.n	8004eb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d108      	bne.n	8004dd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dca:	d009      	beq.n	8004de0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	61da      	str	r2, [r3, #28]
 8004dd2:	e005      	b.n	8004de0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fd ffd8 	bl	8002db0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e64:	ea42 0103 	orr.w	r1, r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	0c1b      	lsrs	r3, r3, #16
 8004e7e:	f003 0104 	and.w	r1, r3, #4
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	f003 0210 	and.w	r2, r3, #16
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69da      	ldr	r2, [r3, #28]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ea0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b088      	sub	sp, #32
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	603b      	str	r3, [r7, #0]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_SPI_Transmit+0x22>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e126      	b.n	800512a <HAL_SPI_Transmit+0x270>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ee4:	f7fe faa8 	bl	8003438 <HAL_GetTick>
 8004ee8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d002      	beq.n	8004f00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004efa:	2302      	movs	r3, #2
 8004efc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004efe:	e10b      	b.n	8005118 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <HAL_SPI_Transmit+0x52>
 8004f06:	88fb      	ldrh	r3, [r7, #6]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d102      	bne.n	8004f12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f10:	e102      	b.n	8005118 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2203      	movs	r2, #3
 8004f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	88fa      	ldrh	r2, [r7, #6]
 8004f2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	88fa      	ldrh	r2, [r7, #6]
 8004f30:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f58:	d10f      	bne.n	8004f7a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f84:	2b40      	cmp	r3, #64	; 0x40
 8004f86:	d007      	beq.n	8004f98 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa0:	d14b      	bne.n	800503a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_SPI_Transmit+0xf6>
 8004faa:	8afb      	ldrh	r3, [r7, #22]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d13e      	bne.n	800502e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb4:	881a      	ldrh	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	1c9a      	adds	r2, r3, #2
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004fd4:	e02b      	b.n	800502e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d112      	bne.n	800500a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	881a      	ldrh	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff4:	1c9a      	adds	r2, r3, #2
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	86da      	strh	r2, [r3, #54]	; 0x36
 8005008:	e011      	b.n	800502e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800500a:	f7fe fa15 	bl	8003438 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d803      	bhi.n	8005022 <HAL_SPI_Transmit+0x168>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005020:	d102      	bne.n	8005028 <HAL_SPI_Transmit+0x16e>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d102      	bne.n	800502e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800502c:	e074      	b.n	8005118 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1ce      	bne.n	8004fd6 <HAL_SPI_Transmit+0x11c>
 8005038:	e04c      	b.n	80050d4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <HAL_SPI_Transmit+0x18e>
 8005042:	8afb      	ldrh	r3, [r7, #22]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d140      	bne.n	80050ca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	330c      	adds	r3, #12
 8005052:	7812      	ldrb	r2, [r2, #0]
 8005054:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800506e:	e02c      	b.n	80050ca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b02      	cmp	r3, #2
 800507c:	d113      	bne.n	80050a6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	330c      	adds	r3, #12
 8005088:	7812      	ldrb	r2, [r2, #0]
 800508a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80050a4:	e011      	b.n	80050ca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050a6:	f7fe f9c7 	bl	8003438 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d803      	bhi.n	80050be <HAL_SPI_Transmit+0x204>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050bc:	d102      	bne.n	80050c4 <HAL_SPI_Transmit+0x20a>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d102      	bne.n	80050ca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050c8:	e026      	b.n	8005118 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1cd      	bne.n	8005070 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	6839      	ldr	r1, [r7, #0]
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 fbcb 	bl	8005874 <SPI_EndRxTxTransaction>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050f2:	2300      	movs	r3, #0
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	77fb      	strb	r3, [r7, #31]
 8005114:	e000      	b.n	8005118 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005116:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005128:	7ffb      	ldrb	r3, [r7, #31]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3720      	adds	r7, #32
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b088      	sub	sp, #32
 8005136:	af02      	add	r7, sp, #8
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	603b      	str	r3, [r7, #0]
 800513e:	4613      	mov	r3, r2
 8005140:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800514e:	d112      	bne.n	8005176 <HAL_SPI_Receive+0x44>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10e      	bne.n	8005176 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2204      	movs	r2, #4
 800515c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005160:	88fa      	ldrh	r2, [r7, #6]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	4613      	mov	r3, r2
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f8f1 	bl	8005354 <HAL_SPI_TransmitReceive>
 8005172:	4603      	mov	r3, r0
 8005174:	e0ea      	b.n	800534c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_SPI_Receive+0x52>
 8005180:	2302      	movs	r3, #2
 8005182:	e0e3      	b.n	800534c <HAL_SPI_Receive+0x21a>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800518c:	f7fe f954 	bl	8003438 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b01      	cmp	r3, #1
 800519c:	d002      	beq.n	80051a4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800519e:	2302      	movs	r3, #2
 80051a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051a2:	e0ca      	b.n	800533a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <HAL_SPI_Receive+0x7e>
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d102      	bne.n	80051b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051b4:	e0c1      	b.n	800533a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2204      	movs	r2, #4
 80051ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	88fa      	ldrh	r2, [r7, #6]
 80051ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051fc:	d10f      	bne.n	800521e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800520c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800521c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d007      	beq.n	800523c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800523a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d162      	bne.n	800530a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005244:	e02e      	b.n	80052a4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b01      	cmp	r3, #1
 8005252:	d115      	bne.n	8005280 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f103 020c 	add.w	r2, r3, #12
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	7812      	ldrb	r2, [r2, #0]
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800527e:	e011      	b.n	80052a4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005280:	f7fe f8da 	bl	8003438 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d803      	bhi.n	8005298 <HAL_SPI_Receive+0x166>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005296:	d102      	bne.n	800529e <HAL_SPI_Receive+0x16c>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d102      	bne.n	80052a4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80052a2:	e04a      	b.n	800533a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1cb      	bne.n	8005246 <HAL_SPI_Receive+0x114>
 80052ae:	e031      	b.n	8005314 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d113      	bne.n	80052e6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	b292      	uxth	r2, r2
 80052ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	1c9a      	adds	r2, r3, #2
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052e4:	e011      	b.n	800530a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052e6:	f7fe f8a7 	bl	8003438 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d803      	bhi.n	80052fe <HAL_SPI_Receive+0x1cc>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052fc:	d102      	bne.n	8005304 <HAL_SPI_Receive+0x1d2>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005308:	e017      	b.n	800533a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1cd      	bne.n	80052b0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	6839      	ldr	r1, [r7, #0]
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 fa45 	bl	80057a8 <SPI_EndRxTransaction>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	75fb      	strb	r3, [r7, #23]
 8005336:	e000      	b.n	800533a <HAL_SPI_Receive+0x208>
  }

error :
 8005338:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800534a:	7dfb      	ldrb	r3, [r7, #23]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08c      	sub	sp, #48	; 0x30
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005362:	2301      	movs	r3, #1
 8005364:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_SPI_TransmitReceive+0x26>
 8005376:	2302      	movs	r3, #2
 8005378:	e18a      	b.n	8005690 <HAL_SPI_TransmitReceive+0x33c>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005382:	f7fe f859 	bl	8003438 <HAL_GetTick>
 8005386:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800538e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005398:	887b      	ldrh	r3, [r7, #2]
 800539a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800539c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d00f      	beq.n	80053c4 <HAL_SPI_TransmitReceive+0x70>
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053aa:	d107      	bne.n	80053bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d103      	bne.n	80053bc <HAL_SPI_TransmitReceive+0x68>
 80053b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d003      	beq.n	80053c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80053bc:	2302      	movs	r3, #2
 80053be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80053c2:	e15b      	b.n	800567c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <HAL_SPI_TransmitReceive+0x82>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <HAL_SPI_TransmitReceive+0x82>
 80053d0:	887b      	ldrh	r3, [r7, #2]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d103      	bne.n	80053de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80053dc:	e14e      	b.n	800567c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d003      	beq.n	80053f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2205      	movs	r2, #5
 80053ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	887a      	ldrh	r2, [r7, #2]
 8005402:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	887a      	ldrh	r2, [r7, #2]
 8005408:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	887a      	ldrh	r2, [r7, #2]
 8005414:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	887a      	ldrh	r2, [r7, #2]
 800541a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005432:	2b40      	cmp	r3, #64	; 0x40
 8005434:	d007      	beq.n	8005446 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005444:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544e:	d178      	bne.n	8005542 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <HAL_SPI_TransmitReceive+0x10a>
 8005458:	8b7b      	ldrh	r3, [r7, #26]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d166      	bne.n	800552c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005462:	881a      	ldrh	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546e:	1c9a      	adds	r2, r3, #2
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005478:	b29b      	uxth	r3, r3
 800547a:	3b01      	subs	r3, #1
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005482:	e053      	b.n	800552c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b02      	cmp	r3, #2
 8005490:	d11b      	bne.n	80054ca <HAL_SPI_TransmitReceive+0x176>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d016      	beq.n	80054ca <HAL_SPI_TransmitReceive+0x176>
 800549c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d113      	bne.n	80054ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a6:	881a      	ldrh	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b2:	1c9a      	adds	r2, r3, #2
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d119      	bne.n	800550c <HAL_SPI_TransmitReceive+0x1b8>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d014      	beq.n	800550c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ec:	b292      	uxth	r2, r2
 80054ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f4:	1c9a      	adds	r2, r3, #2
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005508:	2301      	movs	r3, #1
 800550a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800550c:	f7fd ff94 	bl	8003438 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005518:	429a      	cmp	r2, r3
 800551a:	d807      	bhi.n	800552c <HAL_SPI_TransmitReceive+0x1d8>
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005522:	d003      	beq.n	800552c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800552a:	e0a7      	b.n	800567c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1a6      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x130>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1a1      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x130>
 8005540:	e07c      	b.n	800563c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_SPI_TransmitReceive+0x1fc>
 800554a:	8b7b      	ldrh	r3, [r7, #26]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d16b      	bne.n	8005628 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	330c      	adds	r3, #12
 800555a:	7812      	ldrb	r2, [r2, #0]
 800555c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005576:	e057      	b.n	8005628 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b02      	cmp	r3, #2
 8005584:	d11c      	bne.n	80055c0 <HAL_SPI_TransmitReceive+0x26c>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d017      	beq.n	80055c0 <HAL_SPI_TransmitReceive+0x26c>
 8005590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005592:	2b01      	cmp	r3, #1
 8005594:	d114      	bne.n	80055c0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	330c      	adds	r3, #12
 80055a0:	7812      	ldrb	r2, [r2, #0]
 80055a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d119      	bne.n	8005602 <HAL_SPI_TransmitReceive+0x2ae>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d014      	beq.n	8005602 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055fe:	2301      	movs	r3, #1
 8005600:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005602:	f7fd ff19 	bl	8003438 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800560e:	429a      	cmp	r2, r3
 8005610:	d803      	bhi.n	800561a <HAL_SPI_TransmitReceive+0x2c6>
 8005612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005618:	d102      	bne.n	8005620 <HAL_SPI_TransmitReceive+0x2cc>
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005626:	e029      	b.n	800567c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1a2      	bne.n	8005578 <HAL_SPI_TransmitReceive+0x224>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d19d      	bne.n	8005578 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800563c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f917 	bl	8005874 <SPI_EndRxTxTransaction>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d006      	beq.n	800565a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005658:	e010      	b.n	800567c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10b      	bne.n	800567a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005662:	2300      	movs	r3, #0
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	e000      	b.n	800567c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800567a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800568c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005690:	4618      	mov	r0, r3
 8005692:	3730      	adds	r7, #48	; 0x30
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	4613      	mov	r3, r2
 80056a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056a8:	f7fd fec6 	bl	8003438 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	4413      	add	r3, r2
 80056b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056b8:	f7fd febe 	bl	8003438 <HAL_GetTick>
 80056bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056be:	4b39      	ldr	r3, [pc, #228]	; (80057a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	015b      	lsls	r3, r3, #5
 80056c4:	0d1b      	lsrs	r3, r3, #20
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	fb02 f303 	mul.w	r3, r2, r3
 80056cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ce:	e054      	b.n	800577a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056d6:	d050      	beq.n	800577a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056d8:	f7fd feae 	bl	8003438 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d902      	bls.n	80056ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d13d      	bne.n	800576a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005706:	d111      	bne.n	800572c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005710:	d004      	beq.n	800571c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800571a:	d107      	bne.n	800572c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800572a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005734:	d10f      	bne.n	8005756 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005754:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e017      	b.n	800579a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	3b01      	subs	r3, #1
 8005778:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4013      	ands	r3, r2
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	429a      	cmp	r2, r3
 8005788:	bf0c      	ite	eq
 800578a:	2301      	moveq	r3, #1
 800578c:	2300      	movne	r3, #0
 800578e:	b2db      	uxtb	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	429a      	cmp	r2, r3
 8005796:	d19b      	bne.n	80056d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20002010 	.word	0x20002010

080057a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057bc:	d111      	bne.n	80057e2 <SPI_EndRxTransaction+0x3a>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c6:	d004      	beq.n	80057d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d0:	d107      	bne.n	80057e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057e0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ea:	d12a      	bne.n	8005842 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f4:	d012      	beq.n	800581c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2200      	movs	r2, #0
 80057fe:	2180      	movs	r1, #128	; 0x80
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff ff49 	bl	8005698 <SPI_WaitFlagStateUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d02d      	beq.n	8005868 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005810:	f043 0220 	orr.w	r2, r3, #32
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e026      	b.n	800586a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2200      	movs	r2, #0
 8005824:	2101      	movs	r1, #1
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f7ff ff36 	bl	8005698 <SPI_WaitFlagStateUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01a      	beq.n	8005868 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005836:	f043 0220 	orr.w	r2, r3, #32
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e013      	b.n	800586a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2200      	movs	r2, #0
 800584a:	2101      	movs	r1, #1
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7ff ff23 	bl	8005698 <SPI_WaitFlagStateUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d007      	beq.n	8005868 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585c:	f043 0220 	orr.w	r2, r3, #32
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e000      	b.n	800586a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af02      	add	r7, sp, #8
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005880:	4b1b      	ldr	r3, [pc, #108]	; (80058f0 <SPI_EndRxTxTransaction+0x7c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a1b      	ldr	r2, [pc, #108]	; (80058f4 <SPI_EndRxTxTransaction+0x80>)
 8005886:	fba2 2303 	umull	r2, r3, r2, r3
 800588a:	0d5b      	lsrs	r3, r3, #21
 800588c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005890:	fb02 f303 	mul.w	r3, r2, r3
 8005894:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800589e:	d112      	bne.n	80058c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2200      	movs	r2, #0
 80058a8:	2180      	movs	r1, #128	; 0x80
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f7ff fef4 	bl	8005698 <SPI_WaitFlagStateUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d016      	beq.n	80058e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ba:	f043 0220 	orr.w	r2, r3, #32
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e00f      	b.n	80058e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058dc:	2b80      	cmp	r3, #128	; 0x80
 80058de:	d0f2      	beq.n	80058c6 <SPI_EndRxTxTransaction+0x52>
 80058e0:	e000      	b.n	80058e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80058e2:	bf00      	nop
  }

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20002010 	.word	0x20002010
 80058f4:	165e9f81 	.word	0x165e9f81

080058f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b01      	cmp	r3, #1
 800590a:	d001      	beq.n	8005910 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e03c      	b.n	800598a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a1e      	ldr	r2, [pc, #120]	; (8005998 <HAL_TIM_Base_Start+0xa0>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d018      	beq.n	8005954 <HAL_TIM_Base_Start+0x5c>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592a:	d013      	beq.n	8005954 <HAL_TIM_Base_Start+0x5c>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a1a      	ldr	r2, [pc, #104]	; (800599c <HAL_TIM_Base_Start+0xa4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00e      	beq.n	8005954 <HAL_TIM_Base_Start+0x5c>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a19      	ldr	r2, [pc, #100]	; (80059a0 <HAL_TIM_Base_Start+0xa8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d009      	beq.n	8005954 <HAL_TIM_Base_Start+0x5c>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a17      	ldr	r2, [pc, #92]	; (80059a4 <HAL_TIM_Base_Start+0xac>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d004      	beq.n	8005954 <HAL_TIM_Base_Start+0x5c>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a16      	ldr	r2, [pc, #88]	; (80059a8 <HAL_TIM_Base_Start+0xb0>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d111      	bne.n	8005978 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b06      	cmp	r3, #6
 8005964:	d010      	beq.n	8005988 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0201 	orr.w	r2, r2, #1
 8005974:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005976:	e007      	b.n	8005988 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40010000 	.word	0x40010000
 800599c:	40000400 	.word	0x40000400
 80059a0:	40000800 	.word	0x40000800
 80059a4:	40000c00 	.word	0x40000c00
 80059a8:	40014000 	.word	0x40014000

080059ac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e041      	b.n	8005a42 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d106      	bne.n	80059d8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fd fa80 	bl	8002ed8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3304      	adds	r3, #4
 80059e8:	4619      	mov	r1, r3
 80059ea:	4610      	mov	r0, r2
 80059ec:	f000 f99a 	bl	8005d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b082      	sub	sp, #8
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e041      	b.n	8005ae0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d106      	bne.n	8005a76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7fd f9e5 	bl	8002e40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3304      	adds	r3, #4
 8005a86:	4619      	mov	r1, r3
 8005a88:	4610      	mov	r0, r2
 8005a8a:	f000 f94b 	bl	8005d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e048      	b.n	8005b98 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b0c      	cmp	r3, #12
 8005b12:	d839      	bhi.n	8005b88 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005b14:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1a:	bf00      	nop
 8005b1c:	08005b51 	.word	0x08005b51
 8005b20:	08005b89 	.word	0x08005b89
 8005b24:	08005b89 	.word	0x08005b89
 8005b28:	08005b89 	.word	0x08005b89
 8005b2c:	08005b5f 	.word	0x08005b5f
 8005b30:	08005b89 	.word	0x08005b89
 8005b34:	08005b89 	.word	0x08005b89
 8005b38:	08005b89 	.word	0x08005b89
 8005b3c:	08005b6d 	.word	0x08005b6d
 8005b40:	08005b89 	.word	0x08005b89
 8005b44:	08005b89 	.word	0x08005b89
 8005b48:	08005b89 	.word	0x08005b89
 8005b4c:	08005b7b 	.word	0x08005b7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68b9      	ldr	r1, [r7, #8]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 f964 	bl	8005e24 <TIM_OC1_SetConfig>
      break;
 8005b5c:	e017      	b.n	8005b8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 f9c3 	bl	8005ef0 <TIM_OC2_SetConfig>
      break;
 8005b6a:	e010      	b.n	8005b8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fa28 	bl	8005fc8 <TIM_OC3_SetConfig>
      break;
 8005b78:	e009      	b.n	8005b8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fa8b 	bl	800609c <TIM_OC4_SetConfig>
      break;
 8005b86:	e002      	b.n	8005b8e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e0ae      	b.n	8005d1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b0c      	cmp	r3, #12
 8005bca:	f200 809f 	bhi.w	8005d0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bce:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005c09 	.word	0x08005c09
 8005bd8:	08005d0d 	.word	0x08005d0d
 8005bdc:	08005d0d 	.word	0x08005d0d
 8005be0:	08005d0d 	.word	0x08005d0d
 8005be4:	08005c49 	.word	0x08005c49
 8005be8:	08005d0d 	.word	0x08005d0d
 8005bec:	08005d0d 	.word	0x08005d0d
 8005bf0:	08005d0d 	.word	0x08005d0d
 8005bf4:	08005c8b 	.word	0x08005c8b
 8005bf8:	08005d0d 	.word	0x08005d0d
 8005bfc:	08005d0d 	.word	0x08005d0d
 8005c00:	08005d0d 	.word	0x08005d0d
 8005c04:	08005ccb 	.word	0x08005ccb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 f908 	bl	8005e24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0208 	orr.w	r2, r2, #8
 8005c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0204 	bic.w	r2, r2, #4
 8005c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6999      	ldr	r1, [r3, #24]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	619a      	str	r2, [r3, #24]
      break;
 8005c46:	e064      	b.n	8005d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 f94e 	bl	8005ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6999      	ldr	r1, [r3, #24]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	021a      	lsls	r2, r3, #8
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	619a      	str	r2, [r3, #24]
      break;
 8005c88:	e043      	b.n	8005d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 f999 	bl	8005fc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0208 	orr.w	r2, r2, #8
 8005ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69da      	ldr	r2, [r3, #28]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0204 	bic.w	r2, r2, #4
 8005cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69d9      	ldr	r1, [r3, #28]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	61da      	str	r2, [r3, #28]
      break;
 8005cc8:	e023      	b.n	8005d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 f9e3 	bl	800609c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69d9      	ldr	r1, [r3, #28]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	021a      	lsls	r2, r3, #8
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	61da      	str	r2, [r3, #28]
      break;
 8005d0a:	e002      	b.n	8005d12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a34      	ldr	r2, [pc, #208]	; (8005e08 <TIM_Base_SetConfig+0xe4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d00f      	beq.n	8005d5c <TIM_Base_SetConfig+0x38>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d42:	d00b      	beq.n	8005d5c <TIM_Base_SetConfig+0x38>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a31      	ldr	r2, [pc, #196]	; (8005e0c <TIM_Base_SetConfig+0xe8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d007      	beq.n	8005d5c <TIM_Base_SetConfig+0x38>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a30      	ldr	r2, [pc, #192]	; (8005e10 <TIM_Base_SetConfig+0xec>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d003      	beq.n	8005d5c <TIM_Base_SetConfig+0x38>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a2f      	ldr	r2, [pc, #188]	; (8005e14 <TIM_Base_SetConfig+0xf0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d108      	bne.n	8005d6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a25      	ldr	r2, [pc, #148]	; (8005e08 <TIM_Base_SetConfig+0xe4>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d01b      	beq.n	8005dae <TIM_Base_SetConfig+0x8a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d7c:	d017      	beq.n	8005dae <TIM_Base_SetConfig+0x8a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a22      	ldr	r2, [pc, #136]	; (8005e0c <TIM_Base_SetConfig+0xe8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d013      	beq.n	8005dae <TIM_Base_SetConfig+0x8a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a21      	ldr	r2, [pc, #132]	; (8005e10 <TIM_Base_SetConfig+0xec>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00f      	beq.n	8005dae <TIM_Base_SetConfig+0x8a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a20      	ldr	r2, [pc, #128]	; (8005e14 <TIM_Base_SetConfig+0xf0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d00b      	beq.n	8005dae <TIM_Base_SetConfig+0x8a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a1f      	ldr	r2, [pc, #124]	; (8005e18 <TIM_Base_SetConfig+0xf4>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d007      	beq.n	8005dae <TIM_Base_SetConfig+0x8a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a1e      	ldr	r2, [pc, #120]	; (8005e1c <TIM_Base_SetConfig+0xf8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d003      	beq.n	8005dae <TIM_Base_SetConfig+0x8a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a1d      	ldr	r2, [pc, #116]	; (8005e20 <TIM_Base_SetConfig+0xfc>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d108      	bne.n	8005dc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a08      	ldr	r2, [pc, #32]	; (8005e08 <TIM_Base_SetConfig+0xe4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d103      	bne.n	8005df4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	691a      	ldr	r2, [r3, #16]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	615a      	str	r2, [r3, #20]
}
 8005dfa:	bf00      	nop
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40010000 	.word	0x40010000
 8005e0c:	40000400 	.word	0x40000400
 8005e10:	40000800 	.word	0x40000800
 8005e14:	40000c00 	.word	0x40000c00
 8005e18:	40014000 	.word	0x40014000
 8005e1c:	40014400 	.word	0x40014400
 8005e20:	40014800 	.word	0x40014800

08005e24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f023 0201 	bic.w	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f023 0302 	bic.w	r3, r3, #2
 8005e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a1c      	ldr	r2, [pc, #112]	; (8005eec <TIM_OC1_SetConfig+0xc8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d10c      	bne.n	8005e9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f023 0308 	bic.w	r3, r3, #8
 8005e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f023 0304 	bic.w	r3, r3, #4
 8005e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a13      	ldr	r2, [pc, #76]	; (8005eec <TIM_OC1_SetConfig+0xc8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d111      	bne.n	8005ec6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	621a      	str	r2, [r3, #32]
}
 8005ee0:	bf00      	nop
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	40010000 	.word	0x40010000

08005ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f023 0210 	bic.w	r2, r3, #16
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f023 0320 	bic.w	r3, r3, #32
 8005f3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a1e      	ldr	r2, [pc, #120]	; (8005fc4 <TIM_OC2_SetConfig+0xd4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d10d      	bne.n	8005f6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a15      	ldr	r2, [pc, #84]	; (8005fc4 <TIM_OC2_SetConfig+0xd4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d113      	bne.n	8005f9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40010000 	.word	0x40010000

08005fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0303 	bic.w	r3, r3, #3
 8005ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	021b      	lsls	r3, r3, #8
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a1d      	ldr	r2, [pc, #116]	; (8006098 <TIM_OC3_SetConfig+0xd0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d10d      	bne.n	8006042 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800602c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a14      	ldr	r2, [pc, #80]	; (8006098 <TIM_OC3_SetConfig+0xd0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d113      	bne.n	8006072 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4313      	orrs	r3, r2
 8006064:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	621a      	str	r2, [r3, #32]
}
 800608c:	bf00      	nop
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	40010000 	.word	0x40010000

0800609c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	021b      	lsls	r3, r3, #8
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	031b      	lsls	r3, r3, #12
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a10      	ldr	r2, [pc, #64]	; (8006138 <TIM_OC4_SetConfig+0x9c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d109      	bne.n	8006110 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	019b      	lsls	r3, r3, #6
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	4313      	orrs	r3, r2
 800610e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	621a      	str	r2, [r3, #32]
}
 800612a:	bf00      	nop
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40010000 	.word	0x40010000

0800613c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006150:	2302      	movs	r3, #2
 8006152:	e050      	b.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a1c      	ldr	r2, [pc, #112]	; (8006204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d018      	beq.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a0:	d013      	beq.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a18      	ldr	r2, [pc, #96]	; (8006208 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00e      	beq.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a16      	ldr	r2, [pc, #88]	; (800620c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d009      	beq.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a15      	ldr	r2, [pc, #84]	; (8006210 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d004      	beq.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a13      	ldr	r2, [pc, #76]	; (8006214 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d10c      	bne.n	80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	4313      	orrs	r3, r2
 80061da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	40010000 	.word	0x40010000
 8006208:	40000400 	.word	0x40000400
 800620c:	40000800 	.word	0x40000800
 8006210:	40000c00 	.word	0x40000c00
 8006214:	40014000 	.word	0x40014000

08006218 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006230:	2302      	movs	r3, #2
 8006232:	e03d      	b.n	80062b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	4313      	orrs	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e047      	b.n	800635e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fc fec4 	bl	8003070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2224      	movs	r2, #36	; 0x24
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f931 	bl	8006568 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	695a      	ldr	r2, [r3, #20]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8006324:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	695a      	ldr	r2, [r3, #20]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0208 	orr.w	r2, r2, #8
 8006334:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006344:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2220      	movs	r2, #32
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2220      	movs	r2, #32
 8006358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b08a      	sub	sp, #40	; 0x28
 800636a:	af02      	add	r7, sp, #8
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	603b      	str	r3, [r7, #0]
 8006372:	4613      	mov	r3, r2
 8006374:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b20      	cmp	r3, #32
 8006384:	d17c      	bne.n	8006480 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d002      	beq.n	8006392 <HAL_UART_Transmit+0x2c>
 800638c:	88fb      	ldrh	r3, [r7, #6]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e075      	b.n	8006482 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800639c:	2b01      	cmp	r3, #1
 800639e:	d101      	bne.n	80063a4 <HAL_UART_Transmit+0x3e>
 80063a0:	2302      	movs	r3, #2
 80063a2:	e06e      	b.n	8006482 <HAL_UART_Transmit+0x11c>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2221      	movs	r2, #33	; 0x21
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ba:	f7fd f83d 	bl	8003438 <HAL_GetTick>
 80063be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	88fa      	ldrh	r2, [r7, #6]
 80063c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	88fa      	ldrh	r2, [r7, #6]
 80063ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d4:	d108      	bne.n	80063e8 <HAL_UART_Transmit+0x82>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d104      	bne.n	80063e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063de:	2300      	movs	r3, #0
 80063e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	61bb      	str	r3, [r7, #24]
 80063e6:	e003      	b.n	80063f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063ec:	2300      	movs	r3, #0
 80063ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80063f8:	e02a      	b.n	8006450 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2200      	movs	r2, #0
 8006402:	2180      	movs	r1, #128	; 0x80
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 f840 	bl	800648a <UART_WaitOnFlagUntilTimeout>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e036      	b.n	8006482 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10b      	bne.n	8006432 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006428:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	3302      	adds	r3, #2
 800642e:	61bb      	str	r3, [r7, #24]
 8006430:	e007      	b.n	8006442 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	781a      	ldrb	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	3301      	adds	r3, #1
 8006440:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1cf      	bne.n	80063fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2200      	movs	r2, #0
 8006462:	2140      	movs	r1, #64	; 0x40
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 f810 	bl	800648a <UART_WaitOnFlagUntilTimeout>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e006      	b.n	8006482 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2220      	movs	r2, #32
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	e000      	b.n	8006482 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006480:	2302      	movs	r3, #2
  }
}
 8006482:	4618      	mov	r0, r3
 8006484:	3720      	adds	r7, #32
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b090      	sub	sp, #64	; 0x40
 800648e:	af00      	add	r7, sp, #0
 8006490:	60f8      	str	r0, [r7, #12]
 8006492:	60b9      	str	r1, [r7, #8]
 8006494:	603b      	str	r3, [r7, #0]
 8006496:	4613      	mov	r3, r2
 8006498:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800649a:	e050      	b.n	800653e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800649c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064a2:	d04c      	beq.n	800653e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80064a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d007      	beq.n	80064ba <UART_WaitOnFlagUntilTimeout+0x30>
 80064aa:	f7fc ffc5 	bl	8003438 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d241      	bcs.n	800653e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	330c      	adds	r3, #12
 80064c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	e853 3f00 	ldrex	r3, [r3]
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	330c      	adds	r3, #12
 80064d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064da:	637a      	str	r2, [r7, #52]	; 0x34
 80064dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e5      	bne.n	80064ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3314      	adds	r3, #20
 80064f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	613b      	str	r3, [r7, #16]
   return(result);
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f023 0301 	bic.w	r3, r3, #1
 8006504:	63bb      	str	r3, [r7, #56]	; 0x38
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3314      	adds	r3, #20
 800650c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800650e:	623a      	str	r2, [r7, #32]
 8006510:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	69f9      	ldr	r1, [r7, #28]
 8006514:	6a3a      	ldr	r2, [r7, #32]
 8006516:	e841 2300 	strex	r3, r2, [r1]
 800651a:	61bb      	str	r3, [r7, #24]
   return(result);
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1e5      	bne.n	80064ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2220      	movs	r2, #32
 8006526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2220      	movs	r2, #32
 800652e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e00f      	b.n	800655e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4013      	ands	r3, r2
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	429a      	cmp	r2, r3
 800654c:	bf0c      	ite	eq
 800654e:	2301      	moveq	r3, #1
 8006550:	2300      	movne	r3, #0
 8006552:	b2db      	uxtb	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	79fb      	ldrb	r3, [r7, #7]
 8006558:	429a      	cmp	r2, r3
 800655a:	d09f      	beq.n	800649c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3740      	adds	r7, #64	; 0x40
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656c:	b09f      	sub	sp, #124	; 0x7c
 800656e:	af00      	add	r7, sp, #0
 8006570:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800657c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800657e:	68d9      	ldr	r1, [r3, #12]
 8006580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	ea40 0301 	orr.w	r3, r0, r1
 8006588:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800658a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800658c:	689a      	ldr	r2, [r3, #8]
 800658e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	431a      	orrs	r2, r3
 8006594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	431a      	orrs	r2, r3
 800659a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	4313      	orrs	r3, r2
 80065a0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80065a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065ac:	f021 010c 	bic.w	r1, r1, #12
 80065b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065b6:	430b      	orrs	r3, r1
 80065b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c6:	6999      	ldr	r1, [r3, #24]
 80065c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	ea40 0301 	orr.w	r3, r0, r1
 80065d0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	4bc5      	ldr	r3, [pc, #788]	; (80068ec <UART_SetConfig+0x384>)
 80065d8:	429a      	cmp	r2, r3
 80065da:	d004      	beq.n	80065e6 <UART_SetConfig+0x7e>
 80065dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	4bc3      	ldr	r3, [pc, #780]	; (80068f0 <UART_SetConfig+0x388>)
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d103      	bne.n	80065ee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065e6:	f7fe fbcb 	bl	8004d80 <HAL_RCC_GetPCLK2Freq>
 80065ea:	6778      	str	r0, [r7, #116]	; 0x74
 80065ec:	e002      	b.n	80065f4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065ee:	f7fe fbb3 	bl	8004d58 <HAL_RCC_GetPCLK1Freq>
 80065f2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065fc:	f040 80b6 	bne.w	800676c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006602:	461c      	mov	r4, r3
 8006604:	f04f 0500 	mov.w	r5, #0
 8006608:	4622      	mov	r2, r4
 800660a:	462b      	mov	r3, r5
 800660c:	1891      	adds	r1, r2, r2
 800660e:	6439      	str	r1, [r7, #64]	; 0x40
 8006610:	415b      	adcs	r3, r3
 8006612:	647b      	str	r3, [r7, #68]	; 0x44
 8006614:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006618:	1912      	adds	r2, r2, r4
 800661a:	eb45 0303 	adc.w	r3, r5, r3
 800661e:	f04f 0000 	mov.w	r0, #0
 8006622:	f04f 0100 	mov.w	r1, #0
 8006626:	00d9      	lsls	r1, r3, #3
 8006628:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800662c:	00d0      	lsls	r0, r2, #3
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	1911      	adds	r1, r2, r4
 8006634:	6639      	str	r1, [r7, #96]	; 0x60
 8006636:	416b      	adcs	r3, r5
 8006638:	667b      	str	r3, [r7, #100]	; 0x64
 800663a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	461a      	mov	r2, r3
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	1891      	adds	r1, r2, r2
 8006646:	63b9      	str	r1, [r7, #56]	; 0x38
 8006648:	415b      	adcs	r3, r3
 800664a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800664c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006650:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006654:	f7fa fb00 	bl	8000c58 <__aeabi_uldivmod>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4ba5      	ldr	r3, [pc, #660]	; (80068f4 <UART_SetConfig+0x38c>)
 800665e:	fba3 2302 	umull	r2, r3, r3, r2
 8006662:	095b      	lsrs	r3, r3, #5
 8006664:	011e      	lsls	r6, r3, #4
 8006666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006668:	461c      	mov	r4, r3
 800666a:	f04f 0500 	mov.w	r5, #0
 800666e:	4622      	mov	r2, r4
 8006670:	462b      	mov	r3, r5
 8006672:	1891      	adds	r1, r2, r2
 8006674:	6339      	str	r1, [r7, #48]	; 0x30
 8006676:	415b      	adcs	r3, r3
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
 800667a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800667e:	1912      	adds	r2, r2, r4
 8006680:	eb45 0303 	adc.w	r3, r5, r3
 8006684:	f04f 0000 	mov.w	r0, #0
 8006688:	f04f 0100 	mov.w	r1, #0
 800668c:	00d9      	lsls	r1, r3, #3
 800668e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006692:	00d0      	lsls	r0, r2, #3
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	1911      	adds	r1, r2, r4
 800669a:	65b9      	str	r1, [r7, #88]	; 0x58
 800669c:	416b      	adcs	r3, r5
 800669e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	461a      	mov	r2, r3
 80066a6:	f04f 0300 	mov.w	r3, #0
 80066aa:	1891      	adds	r1, r2, r2
 80066ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80066ae:	415b      	adcs	r3, r3
 80066b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80066ba:	f7fa facd 	bl	8000c58 <__aeabi_uldivmod>
 80066be:	4602      	mov	r2, r0
 80066c0:	460b      	mov	r3, r1
 80066c2:	4b8c      	ldr	r3, [pc, #560]	; (80068f4 <UART_SetConfig+0x38c>)
 80066c4:	fba3 1302 	umull	r1, r3, r3, r2
 80066c8:	095b      	lsrs	r3, r3, #5
 80066ca:	2164      	movs	r1, #100	; 0x64
 80066cc:	fb01 f303 	mul.w	r3, r1, r3
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	00db      	lsls	r3, r3, #3
 80066d4:	3332      	adds	r3, #50	; 0x32
 80066d6:	4a87      	ldr	r2, [pc, #540]	; (80068f4 <UART_SetConfig+0x38c>)
 80066d8:	fba2 2303 	umull	r2, r3, r2, r3
 80066dc:	095b      	lsrs	r3, r3, #5
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066e4:	441e      	add	r6, r3
 80066e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066e8:	4618      	mov	r0, r3
 80066ea:	f04f 0100 	mov.w	r1, #0
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	1894      	adds	r4, r2, r2
 80066f4:	623c      	str	r4, [r7, #32]
 80066f6:	415b      	adcs	r3, r3
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24
 80066fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066fe:	1812      	adds	r2, r2, r0
 8006700:	eb41 0303 	adc.w	r3, r1, r3
 8006704:	f04f 0400 	mov.w	r4, #0
 8006708:	f04f 0500 	mov.w	r5, #0
 800670c:	00dd      	lsls	r5, r3, #3
 800670e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006712:	00d4      	lsls	r4, r2, #3
 8006714:	4622      	mov	r2, r4
 8006716:	462b      	mov	r3, r5
 8006718:	1814      	adds	r4, r2, r0
 800671a:	653c      	str	r4, [r7, #80]	; 0x50
 800671c:	414b      	adcs	r3, r1
 800671e:	657b      	str	r3, [r7, #84]	; 0x54
 8006720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	461a      	mov	r2, r3
 8006726:	f04f 0300 	mov.w	r3, #0
 800672a:	1891      	adds	r1, r2, r2
 800672c:	61b9      	str	r1, [r7, #24]
 800672e:	415b      	adcs	r3, r3
 8006730:	61fb      	str	r3, [r7, #28]
 8006732:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006736:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800673a:	f7fa fa8d 	bl	8000c58 <__aeabi_uldivmod>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	4b6c      	ldr	r3, [pc, #432]	; (80068f4 <UART_SetConfig+0x38c>)
 8006744:	fba3 1302 	umull	r1, r3, r3, r2
 8006748:	095b      	lsrs	r3, r3, #5
 800674a:	2164      	movs	r1, #100	; 0x64
 800674c:	fb01 f303 	mul.w	r3, r1, r3
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	3332      	adds	r3, #50	; 0x32
 8006756:	4a67      	ldr	r2, [pc, #412]	; (80068f4 <UART_SetConfig+0x38c>)
 8006758:	fba2 2303 	umull	r2, r3, r2, r3
 800675c:	095b      	lsrs	r3, r3, #5
 800675e:	f003 0207 	and.w	r2, r3, #7
 8006762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4432      	add	r2, r6
 8006768:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800676a:	e0b9      	b.n	80068e0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800676c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800676e:	461c      	mov	r4, r3
 8006770:	f04f 0500 	mov.w	r5, #0
 8006774:	4622      	mov	r2, r4
 8006776:	462b      	mov	r3, r5
 8006778:	1891      	adds	r1, r2, r2
 800677a:	6139      	str	r1, [r7, #16]
 800677c:	415b      	adcs	r3, r3
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006784:	1912      	adds	r2, r2, r4
 8006786:	eb45 0303 	adc.w	r3, r5, r3
 800678a:	f04f 0000 	mov.w	r0, #0
 800678e:	f04f 0100 	mov.w	r1, #0
 8006792:	00d9      	lsls	r1, r3, #3
 8006794:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006798:	00d0      	lsls	r0, r2, #3
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	eb12 0804 	adds.w	r8, r2, r4
 80067a2:	eb43 0905 	adc.w	r9, r3, r5
 80067a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f04f 0100 	mov.w	r1, #0
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	008b      	lsls	r3, r1, #2
 80067ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80067be:	0082      	lsls	r2, r0, #2
 80067c0:	4640      	mov	r0, r8
 80067c2:	4649      	mov	r1, r9
 80067c4:	f7fa fa48 	bl	8000c58 <__aeabi_uldivmod>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4b49      	ldr	r3, [pc, #292]	; (80068f4 <UART_SetConfig+0x38c>)
 80067ce:	fba3 2302 	umull	r2, r3, r3, r2
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	011e      	lsls	r6, r3, #4
 80067d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067d8:	4618      	mov	r0, r3
 80067da:	f04f 0100 	mov.w	r1, #0
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	1894      	adds	r4, r2, r2
 80067e4:	60bc      	str	r4, [r7, #8]
 80067e6:	415b      	adcs	r3, r3
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067ee:	1812      	adds	r2, r2, r0
 80067f0:	eb41 0303 	adc.w	r3, r1, r3
 80067f4:	f04f 0400 	mov.w	r4, #0
 80067f8:	f04f 0500 	mov.w	r5, #0
 80067fc:	00dd      	lsls	r5, r3, #3
 80067fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006802:	00d4      	lsls	r4, r2, #3
 8006804:	4622      	mov	r2, r4
 8006806:	462b      	mov	r3, r5
 8006808:	1814      	adds	r4, r2, r0
 800680a:	64bc      	str	r4, [r7, #72]	; 0x48
 800680c:	414b      	adcs	r3, r1
 800680e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	4618      	mov	r0, r3
 8006816:	f04f 0100 	mov.w	r1, #0
 800681a:	f04f 0200 	mov.w	r2, #0
 800681e:	f04f 0300 	mov.w	r3, #0
 8006822:	008b      	lsls	r3, r1, #2
 8006824:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006828:	0082      	lsls	r2, r0, #2
 800682a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800682e:	f7fa fa13 	bl	8000c58 <__aeabi_uldivmod>
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	4b2f      	ldr	r3, [pc, #188]	; (80068f4 <UART_SetConfig+0x38c>)
 8006838:	fba3 1302 	umull	r1, r3, r3, r2
 800683c:	095b      	lsrs	r3, r3, #5
 800683e:	2164      	movs	r1, #100	; 0x64
 8006840:	fb01 f303 	mul.w	r3, r1, r3
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	011b      	lsls	r3, r3, #4
 8006848:	3332      	adds	r3, #50	; 0x32
 800684a:	4a2a      	ldr	r2, [pc, #168]	; (80068f4 <UART_SetConfig+0x38c>)
 800684c:	fba2 2303 	umull	r2, r3, r2, r3
 8006850:	095b      	lsrs	r3, r3, #5
 8006852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006856:	441e      	add	r6, r3
 8006858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800685a:	4618      	mov	r0, r3
 800685c:	f04f 0100 	mov.w	r1, #0
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	1894      	adds	r4, r2, r2
 8006866:	603c      	str	r4, [r7, #0]
 8006868:	415b      	adcs	r3, r3
 800686a:	607b      	str	r3, [r7, #4]
 800686c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006870:	1812      	adds	r2, r2, r0
 8006872:	eb41 0303 	adc.w	r3, r1, r3
 8006876:	f04f 0400 	mov.w	r4, #0
 800687a:	f04f 0500 	mov.w	r5, #0
 800687e:	00dd      	lsls	r5, r3, #3
 8006880:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006884:	00d4      	lsls	r4, r2, #3
 8006886:	4622      	mov	r2, r4
 8006888:	462b      	mov	r3, r5
 800688a:	eb12 0a00 	adds.w	sl, r2, r0
 800688e:	eb43 0b01 	adc.w	fp, r3, r1
 8006892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	4618      	mov	r0, r3
 8006898:	f04f 0100 	mov.w	r1, #0
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	008b      	lsls	r3, r1, #2
 80068a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068aa:	0082      	lsls	r2, r0, #2
 80068ac:	4650      	mov	r0, sl
 80068ae:	4659      	mov	r1, fp
 80068b0:	f7fa f9d2 	bl	8000c58 <__aeabi_uldivmod>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4b0e      	ldr	r3, [pc, #56]	; (80068f4 <UART_SetConfig+0x38c>)
 80068ba:	fba3 1302 	umull	r1, r3, r3, r2
 80068be:	095b      	lsrs	r3, r3, #5
 80068c0:	2164      	movs	r1, #100	; 0x64
 80068c2:	fb01 f303 	mul.w	r3, r1, r3
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	011b      	lsls	r3, r3, #4
 80068ca:	3332      	adds	r3, #50	; 0x32
 80068cc:	4a09      	ldr	r2, [pc, #36]	; (80068f4 <UART_SetConfig+0x38c>)
 80068ce:	fba2 2303 	umull	r2, r3, r2, r3
 80068d2:	095b      	lsrs	r3, r3, #5
 80068d4:	f003 020f 	and.w	r2, r3, #15
 80068d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4432      	add	r2, r6
 80068de:	609a      	str	r2, [r3, #8]
}
 80068e0:	bf00      	nop
 80068e2:	377c      	adds	r7, #124	; 0x7c
 80068e4:	46bd      	mov	sp, r7
 80068e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ea:	bf00      	nop
 80068ec:	40011000 	.word	0x40011000
 80068f0:	40011400 	.word	0x40011400
 80068f4:	51eb851f 	.word	0x51eb851f

080068f8 <__errno>:
 80068f8:	4b01      	ldr	r3, [pc, #4]	; (8006900 <__errno+0x8>)
 80068fa:	6818      	ldr	r0, [r3, #0]
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	2000201c 	.word	0x2000201c

08006904 <__libc_init_array>:
 8006904:	b570      	push	{r4, r5, r6, lr}
 8006906:	4d0d      	ldr	r5, [pc, #52]	; (800693c <__libc_init_array+0x38>)
 8006908:	4c0d      	ldr	r4, [pc, #52]	; (8006940 <__libc_init_array+0x3c>)
 800690a:	1b64      	subs	r4, r4, r5
 800690c:	10a4      	asrs	r4, r4, #2
 800690e:	2600      	movs	r6, #0
 8006910:	42a6      	cmp	r6, r4
 8006912:	d109      	bne.n	8006928 <__libc_init_array+0x24>
 8006914:	4d0b      	ldr	r5, [pc, #44]	; (8006944 <__libc_init_array+0x40>)
 8006916:	4c0c      	ldr	r4, [pc, #48]	; (8006948 <__libc_init_array+0x44>)
 8006918:	f003 fc3a 	bl	800a190 <_init>
 800691c:	1b64      	subs	r4, r4, r5
 800691e:	10a4      	asrs	r4, r4, #2
 8006920:	2600      	movs	r6, #0
 8006922:	42a6      	cmp	r6, r4
 8006924:	d105      	bne.n	8006932 <__libc_init_array+0x2e>
 8006926:	bd70      	pop	{r4, r5, r6, pc}
 8006928:	f855 3b04 	ldr.w	r3, [r5], #4
 800692c:	4798      	blx	r3
 800692e:	3601      	adds	r6, #1
 8006930:	e7ee      	b.n	8006910 <__libc_init_array+0xc>
 8006932:	f855 3b04 	ldr.w	r3, [r5], #4
 8006936:	4798      	blx	r3
 8006938:	3601      	adds	r6, #1
 800693a:	e7f2      	b.n	8006922 <__libc_init_array+0x1e>
 800693c:	0800a658 	.word	0x0800a658
 8006940:	0800a658 	.word	0x0800a658
 8006944:	0800a658 	.word	0x0800a658
 8006948:	0800a65c 	.word	0x0800a65c

0800694c <memset>:
 800694c:	4402      	add	r2, r0
 800694e:	4603      	mov	r3, r0
 8006950:	4293      	cmp	r3, r2
 8006952:	d100      	bne.n	8006956 <memset+0xa>
 8006954:	4770      	bx	lr
 8006956:	f803 1b01 	strb.w	r1, [r3], #1
 800695a:	e7f9      	b.n	8006950 <memset+0x4>

0800695c <__cvt>:
 800695c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006960:	ec55 4b10 	vmov	r4, r5, d0
 8006964:	2d00      	cmp	r5, #0
 8006966:	460e      	mov	r6, r1
 8006968:	4619      	mov	r1, r3
 800696a:	462b      	mov	r3, r5
 800696c:	bfbb      	ittet	lt
 800696e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006972:	461d      	movlt	r5, r3
 8006974:	2300      	movge	r3, #0
 8006976:	232d      	movlt	r3, #45	; 0x2d
 8006978:	700b      	strb	r3, [r1, #0]
 800697a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800697c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006980:	4691      	mov	r9, r2
 8006982:	f023 0820 	bic.w	r8, r3, #32
 8006986:	bfbc      	itt	lt
 8006988:	4622      	movlt	r2, r4
 800698a:	4614      	movlt	r4, r2
 800698c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006990:	d005      	beq.n	800699e <__cvt+0x42>
 8006992:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006996:	d100      	bne.n	800699a <__cvt+0x3e>
 8006998:	3601      	adds	r6, #1
 800699a:	2102      	movs	r1, #2
 800699c:	e000      	b.n	80069a0 <__cvt+0x44>
 800699e:	2103      	movs	r1, #3
 80069a0:	ab03      	add	r3, sp, #12
 80069a2:	9301      	str	r3, [sp, #4]
 80069a4:	ab02      	add	r3, sp, #8
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	ec45 4b10 	vmov	d0, r4, r5
 80069ac:	4653      	mov	r3, sl
 80069ae:	4632      	mov	r2, r6
 80069b0:	f000 fcea 	bl	8007388 <_dtoa_r>
 80069b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80069b8:	4607      	mov	r7, r0
 80069ba:	d102      	bne.n	80069c2 <__cvt+0x66>
 80069bc:	f019 0f01 	tst.w	r9, #1
 80069c0:	d022      	beq.n	8006a08 <__cvt+0xac>
 80069c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069c6:	eb07 0906 	add.w	r9, r7, r6
 80069ca:	d110      	bne.n	80069ee <__cvt+0x92>
 80069cc:	783b      	ldrb	r3, [r7, #0]
 80069ce:	2b30      	cmp	r3, #48	; 0x30
 80069d0:	d10a      	bne.n	80069e8 <__cvt+0x8c>
 80069d2:	2200      	movs	r2, #0
 80069d4:	2300      	movs	r3, #0
 80069d6:	4620      	mov	r0, r4
 80069d8:	4629      	mov	r1, r5
 80069da:	f7fa f87d 	bl	8000ad8 <__aeabi_dcmpeq>
 80069de:	b918      	cbnz	r0, 80069e8 <__cvt+0x8c>
 80069e0:	f1c6 0601 	rsb	r6, r6, #1
 80069e4:	f8ca 6000 	str.w	r6, [sl]
 80069e8:	f8da 3000 	ldr.w	r3, [sl]
 80069ec:	4499      	add	r9, r3
 80069ee:	2200      	movs	r2, #0
 80069f0:	2300      	movs	r3, #0
 80069f2:	4620      	mov	r0, r4
 80069f4:	4629      	mov	r1, r5
 80069f6:	f7fa f86f 	bl	8000ad8 <__aeabi_dcmpeq>
 80069fa:	b108      	cbz	r0, 8006a00 <__cvt+0xa4>
 80069fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a00:	2230      	movs	r2, #48	; 0x30
 8006a02:	9b03      	ldr	r3, [sp, #12]
 8006a04:	454b      	cmp	r3, r9
 8006a06:	d307      	bcc.n	8006a18 <__cvt+0xbc>
 8006a08:	9b03      	ldr	r3, [sp, #12]
 8006a0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a0c:	1bdb      	subs	r3, r3, r7
 8006a0e:	4638      	mov	r0, r7
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	b004      	add	sp, #16
 8006a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a18:	1c59      	adds	r1, r3, #1
 8006a1a:	9103      	str	r1, [sp, #12]
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	e7f0      	b.n	8006a02 <__cvt+0xa6>

08006a20 <__exponent>:
 8006a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a22:	4603      	mov	r3, r0
 8006a24:	2900      	cmp	r1, #0
 8006a26:	bfb8      	it	lt
 8006a28:	4249      	neglt	r1, r1
 8006a2a:	f803 2b02 	strb.w	r2, [r3], #2
 8006a2e:	bfb4      	ite	lt
 8006a30:	222d      	movlt	r2, #45	; 0x2d
 8006a32:	222b      	movge	r2, #43	; 0x2b
 8006a34:	2909      	cmp	r1, #9
 8006a36:	7042      	strb	r2, [r0, #1]
 8006a38:	dd2a      	ble.n	8006a90 <__exponent+0x70>
 8006a3a:	f10d 0407 	add.w	r4, sp, #7
 8006a3e:	46a4      	mov	ip, r4
 8006a40:	270a      	movs	r7, #10
 8006a42:	46a6      	mov	lr, r4
 8006a44:	460a      	mov	r2, r1
 8006a46:	fb91 f6f7 	sdiv	r6, r1, r7
 8006a4a:	fb07 1516 	mls	r5, r7, r6, r1
 8006a4e:	3530      	adds	r5, #48	; 0x30
 8006a50:	2a63      	cmp	r2, #99	; 0x63
 8006a52:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006a56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	dcf1      	bgt.n	8006a42 <__exponent+0x22>
 8006a5e:	3130      	adds	r1, #48	; 0x30
 8006a60:	f1ae 0502 	sub.w	r5, lr, #2
 8006a64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006a68:	1c44      	adds	r4, r0, #1
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	4561      	cmp	r1, ip
 8006a6e:	d30a      	bcc.n	8006a86 <__exponent+0x66>
 8006a70:	f10d 0209 	add.w	r2, sp, #9
 8006a74:	eba2 020e 	sub.w	r2, r2, lr
 8006a78:	4565      	cmp	r5, ip
 8006a7a:	bf88      	it	hi
 8006a7c:	2200      	movhi	r2, #0
 8006a7e:	4413      	add	r3, r2
 8006a80:	1a18      	subs	r0, r3, r0
 8006a82:	b003      	add	sp, #12
 8006a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006a8e:	e7ed      	b.n	8006a6c <__exponent+0x4c>
 8006a90:	2330      	movs	r3, #48	; 0x30
 8006a92:	3130      	adds	r1, #48	; 0x30
 8006a94:	7083      	strb	r3, [r0, #2]
 8006a96:	70c1      	strb	r1, [r0, #3]
 8006a98:	1d03      	adds	r3, r0, #4
 8006a9a:	e7f1      	b.n	8006a80 <__exponent+0x60>

08006a9c <_printf_float>:
 8006a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa0:	ed2d 8b02 	vpush	{d8}
 8006aa4:	b08d      	sub	sp, #52	; 0x34
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006aac:	4616      	mov	r6, r2
 8006aae:	461f      	mov	r7, r3
 8006ab0:	4605      	mov	r5, r0
 8006ab2:	f001 fa55 	bl	8007f60 <_localeconv_r>
 8006ab6:	f8d0 a000 	ldr.w	sl, [r0]
 8006aba:	4650      	mov	r0, sl
 8006abc:	f7f9 fb90 	bl	80001e0 <strlen>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	9305      	str	r3, [sp, #20]
 8006ac8:	f8d8 3000 	ldr.w	r3, [r8]
 8006acc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ad0:	3307      	adds	r3, #7
 8006ad2:	f023 0307 	bic.w	r3, r3, #7
 8006ad6:	f103 0208 	add.w	r2, r3, #8
 8006ada:	f8c8 2000 	str.w	r2, [r8]
 8006ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ae6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006aea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006aee:	9307      	str	r3, [sp, #28]
 8006af0:	f8cd 8018 	str.w	r8, [sp, #24]
 8006af4:	ee08 0a10 	vmov	s16, r0
 8006af8:	4b9f      	ldr	r3, [pc, #636]	; (8006d78 <_printf_float+0x2dc>)
 8006afa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006afe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b02:	f7fa f81b 	bl	8000b3c <__aeabi_dcmpun>
 8006b06:	bb88      	cbnz	r0, 8006b6c <_printf_float+0xd0>
 8006b08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b0c:	4b9a      	ldr	r3, [pc, #616]	; (8006d78 <_printf_float+0x2dc>)
 8006b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b12:	f7f9 fff5 	bl	8000b00 <__aeabi_dcmple>
 8006b16:	bb48      	cbnz	r0, 8006b6c <_printf_float+0xd0>
 8006b18:	2200      	movs	r2, #0
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	4640      	mov	r0, r8
 8006b1e:	4649      	mov	r1, r9
 8006b20:	f7f9 ffe4 	bl	8000aec <__aeabi_dcmplt>
 8006b24:	b110      	cbz	r0, 8006b2c <_printf_float+0x90>
 8006b26:	232d      	movs	r3, #45	; 0x2d
 8006b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b2c:	4b93      	ldr	r3, [pc, #588]	; (8006d7c <_printf_float+0x2e0>)
 8006b2e:	4894      	ldr	r0, [pc, #592]	; (8006d80 <_printf_float+0x2e4>)
 8006b30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006b34:	bf94      	ite	ls
 8006b36:	4698      	movls	r8, r3
 8006b38:	4680      	movhi	r8, r0
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	6123      	str	r3, [r4, #16]
 8006b3e:	9b05      	ldr	r3, [sp, #20]
 8006b40:	f023 0204 	bic.w	r2, r3, #4
 8006b44:	6022      	str	r2, [r4, #0]
 8006b46:	f04f 0900 	mov.w	r9, #0
 8006b4a:	9700      	str	r7, [sp, #0]
 8006b4c:	4633      	mov	r3, r6
 8006b4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b50:	4621      	mov	r1, r4
 8006b52:	4628      	mov	r0, r5
 8006b54:	f000 f9d8 	bl	8006f08 <_printf_common>
 8006b58:	3001      	adds	r0, #1
 8006b5a:	f040 8090 	bne.w	8006c7e <_printf_float+0x1e2>
 8006b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b62:	b00d      	add	sp, #52	; 0x34
 8006b64:	ecbd 8b02 	vpop	{d8}
 8006b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b6c:	4642      	mov	r2, r8
 8006b6e:	464b      	mov	r3, r9
 8006b70:	4640      	mov	r0, r8
 8006b72:	4649      	mov	r1, r9
 8006b74:	f7f9 ffe2 	bl	8000b3c <__aeabi_dcmpun>
 8006b78:	b140      	cbz	r0, 8006b8c <_printf_float+0xf0>
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bfbc      	itt	lt
 8006b80:	232d      	movlt	r3, #45	; 0x2d
 8006b82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b86:	487f      	ldr	r0, [pc, #508]	; (8006d84 <_printf_float+0x2e8>)
 8006b88:	4b7f      	ldr	r3, [pc, #508]	; (8006d88 <_printf_float+0x2ec>)
 8006b8a:	e7d1      	b.n	8006b30 <_printf_float+0x94>
 8006b8c:	6863      	ldr	r3, [r4, #4]
 8006b8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006b92:	9206      	str	r2, [sp, #24]
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	d13f      	bne.n	8006c18 <_printf_float+0x17c>
 8006b98:	2306      	movs	r3, #6
 8006b9a:	6063      	str	r3, [r4, #4]
 8006b9c:	9b05      	ldr	r3, [sp, #20]
 8006b9e:	6861      	ldr	r1, [r4, #4]
 8006ba0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	9303      	str	r3, [sp, #12]
 8006ba8:	ab0a      	add	r3, sp, #40	; 0x28
 8006baa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006bae:	ab09      	add	r3, sp, #36	; 0x24
 8006bb0:	ec49 8b10 	vmov	d0, r8, r9
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	6022      	str	r2, [r4, #0]
 8006bb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	f7ff fecd 	bl	800695c <__cvt>
 8006bc2:	9b06      	ldr	r3, [sp, #24]
 8006bc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bc6:	2b47      	cmp	r3, #71	; 0x47
 8006bc8:	4680      	mov	r8, r0
 8006bca:	d108      	bne.n	8006bde <_printf_float+0x142>
 8006bcc:	1cc8      	adds	r0, r1, #3
 8006bce:	db02      	blt.n	8006bd6 <_printf_float+0x13a>
 8006bd0:	6863      	ldr	r3, [r4, #4]
 8006bd2:	4299      	cmp	r1, r3
 8006bd4:	dd41      	ble.n	8006c5a <_printf_float+0x1be>
 8006bd6:	f1ab 0b02 	sub.w	fp, fp, #2
 8006bda:	fa5f fb8b 	uxtb.w	fp, fp
 8006bde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006be2:	d820      	bhi.n	8006c26 <_printf_float+0x18a>
 8006be4:	3901      	subs	r1, #1
 8006be6:	465a      	mov	r2, fp
 8006be8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006bec:	9109      	str	r1, [sp, #36]	; 0x24
 8006bee:	f7ff ff17 	bl	8006a20 <__exponent>
 8006bf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bf4:	1813      	adds	r3, r2, r0
 8006bf6:	2a01      	cmp	r2, #1
 8006bf8:	4681      	mov	r9, r0
 8006bfa:	6123      	str	r3, [r4, #16]
 8006bfc:	dc02      	bgt.n	8006c04 <_printf_float+0x168>
 8006bfe:	6822      	ldr	r2, [r4, #0]
 8006c00:	07d2      	lsls	r2, r2, #31
 8006c02:	d501      	bpl.n	8006c08 <_printf_float+0x16c>
 8006c04:	3301      	adds	r3, #1
 8006c06:	6123      	str	r3, [r4, #16]
 8006c08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d09c      	beq.n	8006b4a <_printf_float+0xae>
 8006c10:	232d      	movs	r3, #45	; 0x2d
 8006c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c16:	e798      	b.n	8006b4a <_printf_float+0xae>
 8006c18:	9a06      	ldr	r2, [sp, #24]
 8006c1a:	2a47      	cmp	r2, #71	; 0x47
 8006c1c:	d1be      	bne.n	8006b9c <_printf_float+0x100>
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1bc      	bne.n	8006b9c <_printf_float+0x100>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e7b9      	b.n	8006b9a <_printf_float+0xfe>
 8006c26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006c2a:	d118      	bne.n	8006c5e <_printf_float+0x1c2>
 8006c2c:	2900      	cmp	r1, #0
 8006c2e:	6863      	ldr	r3, [r4, #4]
 8006c30:	dd0b      	ble.n	8006c4a <_printf_float+0x1ae>
 8006c32:	6121      	str	r1, [r4, #16]
 8006c34:	b913      	cbnz	r3, 8006c3c <_printf_float+0x1a0>
 8006c36:	6822      	ldr	r2, [r4, #0]
 8006c38:	07d0      	lsls	r0, r2, #31
 8006c3a:	d502      	bpl.n	8006c42 <_printf_float+0x1a6>
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	440b      	add	r3, r1
 8006c40:	6123      	str	r3, [r4, #16]
 8006c42:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c44:	f04f 0900 	mov.w	r9, #0
 8006c48:	e7de      	b.n	8006c08 <_printf_float+0x16c>
 8006c4a:	b913      	cbnz	r3, 8006c52 <_printf_float+0x1b6>
 8006c4c:	6822      	ldr	r2, [r4, #0]
 8006c4e:	07d2      	lsls	r2, r2, #31
 8006c50:	d501      	bpl.n	8006c56 <_printf_float+0x1ba>
 8006c52:	3302      	adds	r3, #2
 8006c54:	e7f4      	b.n	8006c40 <_printf_float+0x1a4>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e7f2      	b.n	8006c40 <_printf_float+0x1a4>
 8006c5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c60:	4299      	cmp	r1, r3
 8006c62:	db05      	blt.n	8006c70 <_printf_float+0x1d4>
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	6121      	str	r1, [r4, #16]
 8006c68:	07d8      	lsls	r0, r3, #31
 8006c6a:	d5ea      	bpl.n	8006c42 <_printf_float+0x1a6>
 8006c6c:	1c4b      	adds	r3, r1, #1
 8006c6e:	e7e7      	b.n	8006c40 <_printf_float+0x1a4>
 8006c70:	2900      	cmp	r1, #0
 8006c72:	bfd4      	ite	le
 8006c74:	f1c1 0202 	rsble	r2, r1, #2
 8006c78:	2201      	movgt	r2, #1
 8006c7a:	4413      	add	r3, r2
 8006c7c:	e7e0      	b.n	8006c40 <_printf_float+0x1a4>
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	055a      	lsls	r2, r3, #21
 8006c82:	d407      	bmi.n	8006c94 <_printf_float+0x1f8>
 8006c84:	6923      	ldr	r3, [r4, #16]
 8006c86:	4642      	mov	r2, r8
 8006c88:	4631      	mov	r1, r6
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	47b8      	blx	r7
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d12c      	bne.n	8006cec <_printf_float+0x250>
 8006c92:	e764      	b.n	8006b5e <_printf_float+0xc2>
 8006c94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c98:	f240 80e0 	bls.w	8006e5c <_printf_float+0x3c0>
 8006c9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f7f9 ff18 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	d034      	beq.n	8006d16 <_printf_float+0x27a>
 8006cac:	4a37      	ldr	r2, [pc, #220]	; (8006d8c <_printf_float+0x2f0>)
 8006cae:	2301      	movs	r3, #1
 8006cb0:	4631      	mov	r1, r6
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	47b8      	blx	r7
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	f43f af51 	beq.w	8006b5e <_printf_float+0xc2>
 8006cbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	db02      	blt.n	8006cca <_printf_float+0x22e>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	07d8      	lsls	r0, r3, #31
 8006cc8:	d510      	bpl.n	8006cec <_printf_float+0x250>
 8006cca:	ee18 3a10 	vmov	r3, s16
 8006cce:	4652      	mov	r2, sl
 8006cd0:	4631      	mov	r1, r6
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	47b8      	blx	r7
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	f43f af41 	beq.w	8006b5e <_printf_float+0xc2>
 8006cdc:	f04f 0800 	mov.w	r8, #0
 8006ce0:	f104 091a 	add.w	r9, r4, #26
 8006ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	4543      	cmp	r3, r8
 8006cea:	dc09      	bgt.n	8006d00 <_printf_float+0x264>
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	079b      	lsls	r3, r3, #30
 8006cf0:	f100 8105 	bmi.w	8006efe <_printf_float+0x462>
 8006cf4:	68e0      	ldr	r0, [r4, #12]
 8006cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cf8:	4298      	cmp	r0, r3
 8006cfa:	bfb8      	it	lt
 8006cfc:	4618      	movlt	r0, r3
 8006cfe:	e730      	b.n	8006b62 <_printf_float+0xc6>
 8006d00:	2301      	movs	r3, #1
 8006d02:	464a      	mov	r2, r9
 8006d04:	4631      	mov	r1, r6
 8006d06:	4628      	mov	r0, r5
 8006d08:	47b8      	blx	r7
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	f43f af27 	beq.w	8006b5e <_printf_float+0xc2>
 8006d10:	f108 0801 	add.w	r8, r8, #1
 8006d14:	e7e6      	b.n	8006ce4 <_printf_float+0x248>
 8006d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	dc39      	bgt.n	8006d90 <_printf_float+0x2f4>
 8006d1c:	4a1b      	ldr	r2, [pc, #108]	; (8006d8c <_printf_float+0x2f0>)
 8006d1e:	2301      	movs	r3, #1
 8006d20:	4631      	mov	r1, r6
 8006d22:	4628      	mov	r0, r5
 8006d24:	47b8      	blx	r7
 8006d26:	3001      	adds	r0, #1
 8006d28:	f43f af19 	beq.w	8006b5e <_printf_float+0xc2>
 8006d2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d30:	4313      	orrs	r3, r2
 8006d32:	d102      	bne.n	8006d3a <_printf_float+0x29e>
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	07d9      	lsls	r1, r3, #31
 8006d38:	d5d8      	bpl.n	8006cec <_printf_float+0x250>
 8006d3a:	ee18 3a10 	vmov	r3, s16
 8006d3e:	4652      	mov	r2, sl
 8006d40:	4631      	mov	r1, r6
 8006d42:	4628      	mov	r0, r5
 8006d44:	47b8      	blx	r7
 8006d46:	3001      	adds	r0, #1
 8006d48:	f43f af09 	beq.w	8006b5e <_printf_float+0xc2>
 8006d4c:	f04f 0900 	mov.w	r9, #0
 8006d50:	f104 0a1a 	add.w	sl, r4, #26
 8006d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d56:	425b      	negs	r3, r3
 8006d58:	454b      	cmp	r3, r9
 8006d5a:	dc01      	bgt.n	8006d60 <_printf_float+0x2c4>
 8006d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d5e:	e792      	b.n	8006c86 <_printf_float+0x1ea>
 8006d60:	2301      	movs	r3, #1
 8006d62:	4652      	mov	r2, sl
 8006d64:	4631      	mov	r1, r6
 8006d66:	4628      	mov	r0, r5
 8006d68:	47b8      	blx	r7
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	f43f aef7 	beq.w	8006b5e <_printf_float+0xc2>
 8006d70:	f109 0901 	add.w	r9, r9, #1
 8006d74:	e7ee      	b.n	8006d54 <_printf_float+0x2b8>
 8006d76:	bf00      	nop
 8006d78:	7fefffff 	.word	0x7fefffff
 8006d7c:	0800a1fc 	.word	0x0800a1fc
 8006d80:	0800a200 	.word	0x0800a200
 8006d84:	0800a208 	.word	0x0800a208
 8006d88:	0800a204 	.word	0x0800a204
 8006d8c:	0800a20c 	.word	0x0800a20c
 8006d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d94:	429a      	cmp	r2, r3
 8006d96:	bfa8      	it	ge
 8006d98:	461a      	movge	r2, r3
 8006d9a:	2a00      	cmp	r2, #0
 8006d9c:	4691      	mov	r9, r2
 8006d9e:	dc37      	bgt.n	8006e10 <_printf_float+0x374>
 8006da0:	f04f 0b00 	mov.w	fp, #0
 8006da4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006da8:	f104 021a 	add.w	r2, r4, #26
 8006dac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dae:	9305      	str	r3, [sp, #20]
 8006db0:	eba3 0309 	sub.w	r3, r3, r9
 8006db4:	455b      	cmp	r3, fp
 8006db6:	dc33      	bgt.n	8006e20 <_printf_float+0x384>
 8006db8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	db3b      	blt.n	8006e38 <_printf_float+0x39c>
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	07da      	lsls	r2, r3, #31
 8006dc4:	d438      	bmi.n	8006e38 <_printf_float+0x39c>
 8006dc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dc8:	9b05      	ldr	r3, [sp, #20]
 8006dca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	eba2 0901 	sub.w	r9, r2, r1
 8006dd2:	4599      	cmp	r9, r3
 8006dd4:	bfa8      	it	ge
 8006dd6:	4699      	movge	r9, r3
 8006dd8:	f1b9 0f00 	cmp.w	r9, #0
 8006ddc:	dc35      	bgt.n	8006e4a <_printf_float+0x3ae>
 8006dde:	f04f 0800 	mov.w	r8, #0
 8006de2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006de6:	f104 0a1a 	add.w	sl, r4, #26
 8006dea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dee:	1a9b      	subs	r3, r3, r2
 8006df0:	eba3 0309 	sub.w	r3, r3, r9
 8006df4:	4543      	cmp	r3, r8
 8006df6:	f77f af79 	ble.w	8006cec <_printf_float+0x250>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	4652      	mov	r2, sl
 8006dfe:	4631      	mov	r1, r6
 8006e00:	4628      	mov	r0, r5
 8006e02:	47b8      	blx	r7
 8006e04:	3001      	adds	r0, #1
 8006e06:	f43f aeaa 	beq.w	8006b5e <_printf_float+0xc2>
 8006e0a:	f108 0801 	add.w	r8, r8, #1
 8006e0e:	e7ec      	b.n	8006dea <_printf_float+0x34e>
 8006e10:	4613      	mov	r3, r2
 8006e12:	4631      	mov	r1, r6
 8006e14:	4642      	mov	r2, r8
 8006e16:	4628      	mov	r0, r5
 8006e18:	47b8      	blx	r7
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	d1c0      	bne.n	8006da0 <_printf_float+0x304>
 8006e1e:	e69e      	b.n	8006b5e <_printf_float+0xc2>
 8006e20:	2301      	movs	r3, #1
 8006e22:	4631      	mov	r1, r6
 8006e24:	4628      	mov	r0, r5
 8006e26:	9205      	str	r2, [sp, #20]
 8006e28:	47b8      	blx	r7
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	f43f ae97 	beq.w	8006b5e <_printf_float+0xc2>
 8006e30:	9a05      	ldr	r2, [sp, #20]
 8006e32:	f10b 0b01 	add.w	fp, fp, #1
 8006e36:	e7b9      	b.n	8006dac <_printf_float+0x310>
 8006e38:	ee18 3a10 	vmov	r3, s16
 8006e3c:	4652      	mov	r2, sl
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4628      	mov	r0, r5
 8006e42:	47b8      	blx	r7
 8006e44:	3001      	adds	r0, #1
 8006e46:	d1be      	bne.n	8006dc6 <_printf_float+0x32a>
 8006e48:	e689      	b.n	8006b5e <_printf_float+0xc2>
 8006e4a:	9a05      	ldr	r2, [sp, #20]
 8006e4c:	464b      	mov	r3, r9
 8006e4e:	4442      	add	r2, r8
 8006e50:	4631      	mov	r1, r6
 8006e52:	4628      	mov	r0, r5
 8006e54:	47b8      	blx	r7
 8006e56:	3001      	adds	r0, #1
 8006e58:	d1c1      	bne.n	8006dde <_printf_float+0x342>
 8006e5a:	e680      	b.n	8006b5e <_printf_float+0xc2>
 8006e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e5e:	2a01      	cmp	r2, #1
 8006e60:	dc01      	bgt.n	8006e66 <_printf_float+0x3ca>
 8006e62:	07db      	lsls	r3, r3, #31
 8006e64:	d538      	bpl.n	8006ed8 <_printf_float+0x43c>
 8006e66:	2301      	movs	r3, #1
 8006e68:	4642      	mov	r2, r8
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	47b8      	blx	r7
 8006e70:	3001      	adds	r0, #1
 8006e72:	f43f ae74 	beq.w	8006b5e <_printf_float+0xc2>
 8006e76:	ee18 3a10 	vmov	r3, s16
 8006e7a:	4652      	mov	r2, sl
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	4628      	mov	r0, r5
 8006e80:	47b8      	blx	r7
 8006e82:	3001      	adds	r0, #1
 8006e84:	f43f ae6b 	beq.w	8006b5e <_printf_float+0xc2>
 8006e88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f7f9 fe22 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e94:	b9d8      	cbnz	r0, 8006ece <_printf_float+0x432>
 8006e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e98:	f108 0201 	add.w	r2, r8, #1
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	47b8      	blx	r7
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	d10e      	bne.n	8006ec6 <_printf_float+0x42a>
 8006ea8:	e659      	b.n	8006b5e <_printf_float+0xc2>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	4652      	mov	r2, sl
 8006eae:	4631      	mov	r1, r6
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	47b8      	blx	r7
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	f43f ae52 	beq.w	8006b5e <_printf_float+0xc2>
 8006eba:	f108 0801 	add.w	r8, r8, #1
 8006ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	4543      	cmp	r3, r8
 8006ec4:	dcf1      	bgt.n	8006eaa <_printf_float+0x40e>
 8006ec6:	464b      	mov	r3, r9
 8006ec8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ecc:	e6dc      	b.n	8006c88 <_printf_float+0x1ec>
 8006ece:	f04f 0800 	mov.w	r8, #0
 8006ed2:	f104 0a1a 	add.w	sl, r4, #26
 8006ed6:	e7f2      	b.n	8006ebe <_printf_float+0x422>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	4642      	mov	r2, r8
 8006edc:	e7df      	b.n	8006e9e <_printf_float+0x402>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	464a      	mov	r2, r9
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	47b8      	blx	r7
 8006ee8:	3001      	adds	r0, #1
 8006eea:	f43f ae38 	beq.w	8006b5e <_printf_float+0xc2>
 8006eee:	f108 0801 	add.w	r8, r8, #1
 8006ef2:	68e3      	ldr	r3, [r4, #12]
 8006ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ef6:	1a5b      	subs	r3, r3, r1
 8006ef8:	4543      	cmp	r3, r8
 8006efa:	dcf0      	bgt.n	8006ede <_printf_float+0x442>
 8006efc:	e6fa      	b.n	8006cf4 <_printf_float+0x258>
 8006efe:	f04f 0800 	mov.w	r8, #0
 8006f02:	f104 0919 	add.w	r9, r4, #25
 8006f06:	e7f4      	b.n	8006ef2 <_printf_float+0x456>

08006f08 <_printf_common>:
 8006f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f0c:	4616      	mov	r6, r2
 8006f0e:	4699      	mov	r9, r3
 8006f10:	688a      	ldr	r2, [r1, #8]
 8006f12:	690b      	ldr	r3, [r1, #16]
 8006f14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	bfb8      	it	lt
 8006f1c:	4613      	movlt	r3, r2
 8006f1e:	6033      	str	r3, [r6, #0]
 8006f20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f24:	4607      	mov	r7, r0
 8006f26:	460c      	mov	r4, r1
 8006f28:	b10a      	cbz	r2, 8006f2e <_printf_common+0x26>
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	6033      	str	r3, [r6, #0]
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	0699      	lsls	r1, r3, #26
 8006f32:	bf42      	ittt	mi
 8006f34:	6833      	ldrmi	r3, [r6, #0]
 8006f36:	3302      	addmi	r3, #2
 8006f38:	6033      	strmi	r3, [r6, #0]
 8006f3a:	6825      	ldr	r5, [r4, #0]
 8006f3c:	f015 0506 	ands.w	r5, r5, #6
 8006f40:	d106      	bne.n	8006f50 <_printf_common+0x48>
 8006f42:	f104 0a19 	add.w	sl, r4, #25
 8006f46:	68e3      	ldr	r3, [r4, #12]
 8006f48:	6832      	ldr	r2, [r6, #0]
 8006f4a:	1a9b      	subs	r3, r3, r2
 8006f4c:	42ab      	cmp	r3, r5
 8006f4e:	dc26      	bgt.n	8006f9e <_printf_common+0x96>
 8006f50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f54:	1e13      	subs	r3, r2, #0
 8006f56:	6822      	ldr	r2, [r4, #0]
 8006f58:	bf18      	it	ne
 8006f5a:	2301      	movne	r3, #1
 8006f5c:	0692      	lsls	r2, r2, #26
 8006f5e:	d42b      	bmi.n	8006fb8 <_printf_common+0xb0>
 8006f60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f64:	4649      	mov	r1, r9
 8006f66:	4638      	mov	r0, r7
 8006f68:	47c0      	blx	r8
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	d01e      	beq.n	8006fac <_printf_common+0xa4>
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	68e5      	ldr	r5, [r4, #12]
 8006f72:	6832      	ldr	r2, [r6, #0]
 8006f74:	f003 0306 	and.w	r3, r3, #6
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	bf08      	it	eq
 8006f7c:	1aad      	subeq	r5, r5, r2
 8006f7e:	68a3      	ldr	r3, [r4, #8]
 8006f80:	6922      	ldr	r2, [r4, #16]
 8006f82:	bf0c      	ite	eq
 8006f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f88:	2500      	movne	r5, #0
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	bfc4      	itt	gt
 8006f8e:	1a9b      	subgt	r3, r3, r2
 8006f90:	18ed      	addgt	r5, r5, r3
 8006f92:	2600      	movs	r6, #0
 8006f94:	341a      	adds	r4, #26
 8006f96:	42b5      	cmp	r5, r6
 8006f98:	d11a      	bne.n	8006fd0 <_printf_common+0xc8>
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	e008      	b.n	8006fb0 <_printf_common+0xa8>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	4652      	mov	r2, sl
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	4638      	mov	r0, r7
 8006fa6:	47c0      	blx	r8
 8006fa8:	3001      	adds	r0, #1
 8006faa:	d103      	bne.n	8006fb4 <_printf_common+0xac>
 8006fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb4:	3501      	adds	r5, #1
 8006fb6:	e7c6      	b.n	8006f46 <_printf_common+0x3e>
 8006fb8:	18e1      	adds	r1, r4, r3
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	2030      	movs	r0, #48	; 0x30
 8006fbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fc2:	4422      	add	r2, r4
 8006fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fcc:	3302      	adds	r3, #2
 8006fce:	e7c7      	b.n	8006f60 <_printf_common+0x58>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	4622      	mov	r2, r4
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	4638      	mov	r0, r7
 8006fd8:	47c0      	blx	r8
 8006fda:	3001      	adds	r0, #1
 8006fdc:	d0e6      	beq.n	8006fac <_printf_common+0xa4>
 8006fde:	3601      	adds	r6, #1
 8006fe0:	e7d9      	b.n	8006f96 <_printf_common+0x8e>
	...

08006fe4 <_printf_i>:
 8006fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe8:	460c      	mov	r4, r1
 8006fea:	4691      	mov	r9, r2
 8006fec:	7e27      	ldrb	r7, [r4, #24]
 8006fee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ff0:	2f78      	cmp	r7, #120	; 0x78
 8006ff2:	4680      	mov	r8, r0
 8006ff4:	469a      	mov	sl, r3
 8006ff6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ffa:	d807      	bhi.n	800700c <_printf_i+0x28>
 8006ffc:	2f62      	cmp	r7, #98	; 0x62
 8006ffe:	d80a      	bhi.n	8007016 <_printf_i+0x32>
 8007000:	2f00      	cmp	r7, #0
 8007002:	f000 80d8 	beq.w	80071b6 <_printf_i+0x1d2>
 8007006:	2f58      	cmp	r7, #88	; 0x58
 8007008:	f000 80a3 	beq.w	8007152 <_printf_i+0x16e>
 800700c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007014:	e03a      	b.n	800708c <_printf_i+0xa8>
 8007016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800701a:	2b15      	cmp	r3, #21
 800701c:	d8f6      	bhi.n	800700c <_printf_i+0x28>
 800701e:	a001      	add	r0, pc, #4	; (adr r0, 8007024 <_printf_i+0x40>)
 8007020:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007024:	0800707d 	.word	0x0800707d
 8007028:	08007091 	.word	0x08007091
 800702c:	0800700d 	.word	0x0800700d
 8007030:	0800700d 	.word	0x0800700d
 8007034:	0800700d 	.word	0x0800700d
 8007038:	0800700d 	.word	0x0800700d
 800703c:	08007091 	.word	0x08007091
 8007040:	0800700d 	.word	0x0800700d
 8007044:	0800700d 	.word	0x0800700d
 8007048:	0800700d 	.word	0x0800700d
 800704c:	0800700d 	.word	0x0800700d
 8007050:	0800719d 	.word	0x0800719d
 8007054:	080070c1 	.word	0x080070c1
 8007058:	0800717f 	.word	0x0800717f
 800705c:	0800700d 	.word	0x0800700d
 8007060:	0800700d 	.word	0x0800700d
 8007064:	080071bf 	.word	0x080071bf
 8007068:	0800700d 	.word	0x0800700d
 800706c:	080070c1 	.word	0x080070c1
 8007070:	0800700d 	.word	0x0800700d
 8007074:	0800700d 	.word	0x0800700d
 8007078:	08007187 	.word	0x08007187
 800707c:	680b      	ldr	r3, [r1, #0]
 800707e:	1d1a      	adds	r2, r3, #4
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	600a      	str	r2, [r1, #0]
 8007084:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800708c:	2301      	movs	r3, #1
 800708e:	e0a3      	b.n	80071d8 <_printf_i+0x1f4>
 8007090:	6825      	ldr	r5, [r4, #0]
 8007092:	6808      	ldr	r0, [r1, #0]
 8007094:	062e      	lsls	r6, r5, #24
 8007096:	f100 0304 	add.w	r3, r0, #4
 800709a:	d50a      	bpl.n	80070b2 <_printf_i+0xce>
 800709c:	6805      	ldr	r5, [r0, #0]
 800709e:	600b      	str	r3, [r1, #0]
 80070a0:	2d00      	cmp	r5, #0
 80070a2:	da03      	bge.n	80070ac <_printf_i+0xc8>
 80070a4:	232d      	movs	r3, #45	; 0x2d
 80070a6:	426d      	negs	r5, r5
 80070a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070ac:	485e      	ldr	r0, [pc, #376]	; (8007228 <_printf_i+0x244>)
 80070ae:	230a      	movs	r3, #10
 80070b0:	e019      	b.n	80070e6 <_printf_i+0x102>
 80070b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80070b6:	6805      	ldr	r5, [r0, #0]
 80070b8:	600b      	str	r3, [r1, #0]
 80070ba:	bf18      	it	ne
 80070bc:	b22d      	sxthne	r5, r5
 80070be:	e7ef      	b.n	80070a0 <_printf_i+0xbc>
 80070c0:	680b      	ldr	r3, [r1, #0]
 80070c2:	6825      	ldr	r5, [r4, #0]
 80070c4:	1d18      	adds	r0, r3, #4
 80070c6:	6008      	str	r0, [r1, #0]
 80070c8:	0628      	lsls	r0, r5, #24
 80070ca:	d501      	bpl.n	80070d0 <_printf_i+0xec>
 80070cc:	681d      	ldr	r5, [r3, #0]
 80070ce:	e002      	b.n	80070d6 <_printf_i+0xf2>
 80070d0:	0669      	lsls	r1, r5, #25
 80070d2:	d5fb      	bpl.n	80070cc <_printf_i+0xe8>
 80070d4:	881d      	ldrh	r5, [r3, #0]
 80070d6:	4854      	ldr	r0, [pc, #336]	; (8007228 <_printf_i+0x244>)
 80070d8:	2f6f      	cmp	r7, #111	; 0x6f
 80070da:	bf0c      	ite	eq
 80070dc:	2308      	moveq	r3, #8
 80070de:	230a      	movne	r3, #10
 80070e0:	2100      	movs	r1, #0
 80070e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070e6:	6866      	ldr	r6, [r4, #4]
 80070e8:	60a6      	str	r6, [r4, #8]
 80070ea:	2e00      	cmp	r6, #0
 80070ec:	bfa2      	ittt	ge
 80070ee:	6821      	ldrge	r1, [r4, #0]
 80070f0:	f021 0104 	bicge.w	r1, r1, #4
 80070f4:	6021      	strge	r1, [r4, #0]
 80070f6:	b90d      	cbnz	r5, 80070fc <_printf_i+0x118>
 80070f8:	2e00      	cmp	r6, #0
 80070fa:	d04d      	beq.n	8007198 <_printf_i+0x1b4>
 80070fc:	4616      	mov	r6, r2
 80070fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007102:	fb03 5711 	mls	r7, r3, r1, r5
 8007106:	5dc7      	ldrb	r7, [r0, r7]
 8007108:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800710c:	462f      	mov	r7, r5
 800710e:	42bb      	cmp	r3, r7
 8007110:	460d      	mov	r5, r1
 8007112:	d9f4      	bls.n	80070fe <_printf_i+0x11a>
 8007114:	2b08      	cmp	r3, #8
 8007116:	d10b      	bne.n	8007130 <_printf_i+0x14c>
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	07df      	lsls	r7, r3, #31
 800711c:	d508      	bpl.n	8007130 <_printf_i+0x14c>
 800711e:	6923      	ldr	r3, [r4, #16]
 8007120:	6861      	ldr	r1, [r4, #4]
 8007122:	4299      	cmp	r1, r3
 8007124:	bfde      	ittt	le
 8007126:	2330      	movle	r3, #48	; 0x30
 8007128:	f806 3c01 	strble.w	r3, [r6, #-1]
 800712c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007130:	1b92      	subs	r2, r2, r6
 8007132:	6122      	str	r2, [r4, #16]
 8007134:	f8cd a000 	str.w	sl, [sp]
 8007138:	464b      	mov	r3, r9
 800713a:	aa03      	add	r2, sp, #12
 800713c:	4621      	mov	r1, r4
 800713e:	4640      	mov	r0, r8
 8007140:	f7ff fee2 	bl	8006f08 <_printf_common>
 8007144:	3001      	adds	r0, #1
 8007146:	d14c      	bne.n	80071e2 <_printf_i+0x1fe>
 8007148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800714c:	b004      	add	sp, #16
 800714e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007152:	4835      	ldr	r0, [pc, #212]	; (8007228 <_printf_i+0x244>)
 8007154:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	680e      	ldr	r6, [r1, #0]
 800715c:	061f      	lsls	r7, r3, #24
 800715e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007162:	600e      	str	r6, [r1, #0]
 8007164:	d514      	bpl.n	8007190 <_printf_i+0x1ac>
 8007166:	07d9      	lsls	r1, r3, #31
 8007168:	bf44      	itt	mi
 800716a:	f043 0320 	orrmi.w	r3, r3, #32
 800716e:	6023      	strmi	r3, [r4, #0]
 8007170:	b91d      	cbnz	r5, 800717a <_printf_i+0x196>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	f023 0320 	bic.w	r3, r3, #32
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	2310      	movs	r3, #16
 800717c:	e7b0      	b.n	80070e0 <_printf_i+0xfc>
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	f043 0320 	orr.w	r3, r3, #32
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	2378      	movs	r3, #120	; 0x78
 8007188:	4828      	ldr	r0, [pc, #160]	; (800722c <_printf_i+0x248>)
 800718a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800718e:	e7e3      	b.n	8007158 <_printf_i+0x174>
 8007190:	065e      	lsls	r6, r3, #25
 8007192:	bf48      	it	mi
 8007194:	b2ad      	uxthmi	r5, r5
 8007196:	e7e6      	b.n	8007166 <_printf_i+0x182>
 8007198:	4616      	mov	r6, r2
 800719a:	e7bb      	b.n	8007114 <_printf_i+0x130>
 800719c:	680b      	ldr	r3, [r1, #0]
 800719e:	6826      	ldr	r6, [r4, #0]
 80071a0:	6960      	ldr	r0, [r4, #20]
 80071a2:	1d1d      	adds	r5, r3, #4
 80071a4:	600d      	str	r5, [r1, #0]
 80071a6:	0635      	lsls	r5, r6, #24
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	d501      	bpl.n	80071b0 <_printf_i+0x1cc>
 80071ac:	6018      	str	r0, [r3, #0]
 80071ae:	e002      	b.n	80071b6 <_printf_i+0x1d2>
 80071b0:	0671      	lsls	r1, r6, #25
 80071b2:	d5fb      	bpl.n	80071ac <_printf_i+0x1c8>
 80071b4:	8018      	strh	r0, [r3, #0]
 80071b6:	2300      	movs	r3, #0
 80071b8:	6123      	str	r3, [r4, #16]
 80071ba:	4616      	mov	r6, r2
 80071bc:	e7ba      	b.n	8007134 <_printf_i+0x150>
 80071be:	680b      	ldr	r3, [r1, #0]
 80071c0:	1d1a      	adds	r2, r3, #4
 80071c2:	600a      	str	r2, [r1, #0]
 80071c4:	681e      	ldr	r6, [r3, #0]
 80071c6:	6862      	ldr	r2, [r4, #4]
 80071c8:	2100      	movs	r1, #0
 80071ca:	4630      	mov	r0, r6
 80071cc:	f7f9 f810 	bl	80001f0 <memchr>
 80071d0:	b108      	cbz	r0, 80071d6 <_printf_i+0x1f2>
 80071d2:	1b80      	subs	r0, r0, r6
 80071d4:	6060      	str	r0, [r4, #4]
 80071d6:	6863      	ldr	r3, [r4, #4]
 80071d8:	6123      	str	r3, [r4, #16]
 80071da:	2300      	movs	r3, #0
 80071dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071e0:	e7a8      	b.n	8007134 <_printf_i+0x150>
 80071e2:	6923      	ldr	r3, [r4, #16]
 80071e4:	4632      	mov	r2, r6
 80071e6:	4649      	mov	r1, r9
 80071e8:	4640      	mov	r0, r8
 80071ea:	47d0      	blx	sl
 80071ec:	3001      	adds	r0, #1
 80071ee:	d0ab      	beq.n	8007148 <_printf_i+0x164>
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	079b      	lsls	r3, r3, #30
 80071f4:	d413      	bmi.n	800721e <_printf_i+0x23a>
 80071f6:	68e0      	ldr	r0, [r4, #12]
 80071f8:	9b03      	ldr	r3, [sp, #12]
 80071fa:	4298      	cmp	r0, r3
 80071fc:	bfb8      	it	lt
 80071fe:	4618      	movlt	r0, r3
 8007200:	e7a4      	b.n	800714c <_printf_i+0x168>
 8007202:	2301      	movs	r3, #1
 8007204:	4632      	mov	r2, r6
 8007206:	4649      	mov	r1, r9
 8007208:	4640      	mov	r0, r8
 800720a:	47d0      	blx	sl
 800720c:	3001      	adds	r0, #1
 800720e:	d09b      	beq.n	8007148 <_printf_i+0x164>
 8007210:	3501      	adds	r5, #1
 8007212:	68e3      	ldr	r3, [r4, #12]
 8007214:	9903      	ldr	r1, [sp, #12]
 8007216:	1a5b      	subs	r3, r3, r1
 8007218:	42ab      	cmp	r3, r5
 800721a:	dcf2      	bgt.n	8007202 <_printf_i+0x21e>
 800721c:	e7eb      	b.n	80071f6 <_printf_i+0x212>
 800721e:	2500      	movs	r5, #0
 8007220:	f104 0619 	add.w	r6, r4, #25
 8007224:	e7f5      	b.n	8007212 <_printf_i+0x22e>
 8007226:	bf00      	nop
 8007228:	0800a20e 	.word	0x0800a20e
 800722c:	0800a21f 	.word	0x0800a21f

08007230 <siprintf>:
 8007230:	b40e      	push	{r1, r2, r3}
 8007232:	b500      	push	{lr}
 8007234:	b09c      	sub	sp, #112	; 0x70
 8007236:	ab1d      	add	r3, sp, #116	; 0x74
 8007238:	9002      	str	r0, [sp, #8]
 800723a:	9006      	str	r0, [sp, #24]
 800723c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007240:	4809      	ldr	r0, [pc, #36]	; (8007268 <siprintf+0x38>)
 8007242:	9107      	str	r1, [sp, #28]
 8007244:	9104      	str	r1, [sp, #16]
 8007246:	4909      	ldr	r1, [pc, #36]	; (800726c <siprintf+0x3c>)
 8007248:	f853 2b04 	ldr.w	r2, [r3], #4
 800724c:	9105      	str	r1, [sp, #20]
 800724e:	6800      	ldr	r0, [r0, #0]
 8007250:	9301      	str	r3, [sp, #4]
 8007252:	a902      	add	r1, sp, #8
 8007254:	f001 fb32 	bl	80088bc <_svfiprintf_r>
 8007258:	9b02      	ldr	r3, [sp, #8]
 800725a:	2200      	movs	r2, #0
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	b01c      	add	sp, #112	; 0x70
 8007260:	f85d eb04 	ldr.w	lr, [sp], #4
 8007264:	b003      	add	sp, #12
 8007266:	4770      	bx	lr
 8007268:	2000201c 	.word	0x2000201c
 800726c:	ffff0208 	.word	0xffff0208

08007270 <quorem>:
 8007270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007274:	6903      	ldr	r3, [r0, #16]
 8007276:	690c      	ldr	r4, [r1, #16]
 8007278:	42a3      	cmp	r3, r4
 800727a:	4607      	mov	r7, r0
 800727c:	f2c0 8081 	blt.w	8007382 <quorem+0x112>
 8007280:	3c01      	subs	r4, #1
 8007282:	f101 0814 	add.w	r8, r1, #20
 8007286:	f100 0514 	add.w	r5, r0, #20
 800728a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800728e:	9301      	str	r3, [sp, #4]
 8007290:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007294:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007298:	3301      	adds	r3, #1
 800729a:	429a      	cmp	r2, r3
 800729c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80072a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80072a8:	d331      	bcc.n	800730e <quorem+0x9e>
 80072aa:	f04f 0e00 	mov.w	lr, #0
 80072ae:	4640      	mov	r0, r8
 80072b0:	46ac      	mov	ip, r5
 80072b2:	46f2      	mov	sl, lr
 80072b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80072b8:	b293      	uxth	r3, r2
 80072ba:	fb06 e303 	mla	r3, r6, r3, lr
 80072be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	ebaa 0303 	sub.w	r3, sl, r3
 80072c8:	0c12      	lsrs	r2, r2, #16
 80072ca:	f8dc a000 	ldr.w	sl, [ip]
 80072ce:	fb06 e202 	mla	r2, r6, r2, lr
 80072d2:	fa13 f38a 	uxtah	r3, r3, sl
 80072d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80072da:	fa1f fa82 	uxth.w	sl, r2
 80072de:	f8dc 2000 	ldr.w	r2, [ip]
 80072e2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80072e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072f0:	4581      	cmp	r9, r0
 80072f2:	f84c 3b04 	str.w	r3, [ip], #4
 80072f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80072fa:	d2db      	bcs.n	80072b4 <quorem+0x44>
 80072fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007300:	b92b      	cbnz	r3, 800730e <quorem+0x9e>
 8007302:	9b01      	ldr	r3, [sp, #4]
 8007304:	3b04      	subs	r3, #4
 8007306:	429d      	cmp	r5, r3
 8007308:	461a      	mov	r2, r3
 800730a:	d32e      	bcc.n	800736a <quorem+0xfa>
 800730c:	613c      	str	r4, [r7, #16]
 800730e:	4638      	mov	r0, r7
 8007310:	f001 f8be 	bl	8008490 <__mcmp>
 8007314:	2800      	cmp	r0, #0
 8007316:	db24      	blt.n	8007362 <quorem+0xf2>
 8007318:	3601      	adds	r6, #1
 800731a:	4628      	mov	r0, r5
 800731c:	f04f 0c00 	mov.w	ip, #0
 8007320:	f858 2b04 	ldr.w	r2, [r8], #4
 8007324:	f8d0 e000 	ldr.w	lr, [r0]
 8007328:	b293      	uxth	r3, r2
 800732a:	ebac 0303 	sub.w	r3, ip, r3
 800732e:	0c12      	lsrs	r2, r2, #16
 8007330:	fa13 f38e 	uxtah	r3, r3, lr
 8007334:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007338:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800733c:	b29b      	uxth	r3, r3
 800733e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007342:	45c1      	cmp	r9, r8
 8007344:	f840 3b04 	str.w	r3, [r0], #4
 8007348:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800734c:	d2e8      	bcs.n	8007320 <quorem+0xb0>
 800734e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007356:	b922      	cbnz	r2, 8007362 <quorem+0xf2>
 8007358:	3b04      	subs	r3, #4
 800735a:	429d      	cmp	r5, r3
 800735c:	461a      	mov	r2, r3
 800735e:	d30a      	bcc.n	8007376 <quorem+0x106>
 8007360:	613c      	str	r4, [r7, #16]
 8007362:	4630      	mov	r0, r6
 8007364:	b003      	add	sp, #12
 8007366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736a:	6812      	ldr	r2, [r2, #0]
 800736c:	3b04      	subs	r3, #4
 800736e:	2a00      	cmp	r2, #0
 8007370:	d1cc      	bne.n	800730c <quorem+0x9c>
 8007372:	3c01      	subs	r4, #1
 8007374:	e7c7      	b.n	8007306 <quorem+0x96>
 8007376:	6812      	ldr	r2, [r2, #0]
 8007378:	3b04      	subs	r3, #4
 800737a:	2a00      	cmp	r2, #0
 800737c:	d1f0      	bne.n	8007360 <quorem+0xf0>
 800737e:	3c01      	subs	r4, #1
 8007380:	e7eb      	b.n	800735a <quorem+0xea>
 8007382:	2000      	movs	r0, #0
 8007384:	e7ee      	b.n	8007364 <quorem+0xf4>
	...

08007388 <_dtoa_r>:
 8007388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738c:	ed2d 8b02 	vpush	{d8}
 8007390:	ec57 6b10 	vmov	r6, r7, d0
 8007394:	b095      	sub	sp, #84	; 0x54
 8007396:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007398:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800739c:	9105      	str	r1, [sp, #20]
 800739e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80073a2:	4604      	mov	r4, r0
 80073a4:	9209      	str	r2, [sp, #36]	; 0x24
 80073a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80073a8:	b975      	cbnz	r5, 80073c8 <_dtoa_r+0x40>
 80073aa:	2010      	movs	r0, #16
 80073ac:	f000 fddc 	bl	8007f68 <malloc>
 80073b0:	4602      	mov	r2, r0
 80073b2:	6260      	str	r0, [r4, #36]	; 0x24
 80073b4:	b920      	cbnz	r0, 80073c0 <_dtoa_r+0x38>
 80073b6:	4bb2      	ldr	r3, [pc, #712]	; (8007680 <_dtoa_r+0x2f8>)
 80073b8:	21ea      	movs	r1, #234	; 0xea
 80073ba:	48b2      	ldr	r0, [pc, #712]	; (8007684 <_dtoa_r+0x2fc>)
 80073bc:	f001 fb8e 	bl	8008adc <__assert_func>
 80073c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80073c4:	6005      	str	r5, [r0, #0]
 80073c6:	60c5      	str	r5, [r0, #12]
 80073c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073ca:	6819      	ldr	r1, [r3, #0]
 80073cc:	b151      	cbz	r1, 80073e4 <_dtoa_r+0x5c>
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	604a      	str	r2, [r1, #4]
 80073d2:	2301      	movs	r3, #1
 80073d4:	4093      	lsls	r3, r2
 80073d6:	608b      	str	r3, [r1, #8]
 80073d8:	4620      	mov	r0, r4
 80073da:	f000 fe1b 	bl	8008014 <_Bfree>
 80073de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	1e3b      	subs	r3, r7, #0
 80073e6:	bfb9      	ittee	lt
 80073e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80073ec:	9303      	strlt	r3, [sp, #12]
 80073ee:	2300      	movge	r3, #0
 80073f0:	f8c8 3000 	strge.w	r3, [r8]
 80073f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80073f8:	4ba3      	ldr	r3, [pc, #652]	; (8007688 <_dtoa_r+0x300>)
 80073fa:	bfbc      	itt	lt
 80073fc:	2201      	movlt	r2, #1
 80073fe:	f8c8 2000 	strlt.w	r2, [r8]
 8007402:	ea33 0309 	bics.w	r3, r3, r9
 8007406:	d11b      	bne.n	8007440 <_dtoa_r+0xb8>
 8007408:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800740a:	f242 730f 	movw	r3, #9999	; 0x270f
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007414:	4333      	orrs	r3, r6
 8007416:	f000 857a 	beq.w	8007f0e <_dtoa_r+0xb86>
 800741a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800741c:	b963      	cbnz	r3, 8007438 <_dtoa_r+0xb0>
 800741e:	4b9b      	ldr	r3, [pc, #620]	; (800768c <_dtoa_r+0x304>)
 8007420:	e024      	b.n	800746c <_dtoa_r+0xe4>
 8007422:	4b9b      	ldr	r3, [pc, #620]	; (8007690 <_dtoa_r+0x308>)
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	3308      	adds	r3, #8
 8007428:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	9800      	ldr	r0, [sp, #0]
 800742e:	b015      	add	sp, #84	; 0x54
 8007430:	ecbd 8b02 	vpop	{d8}
 8007434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007438:	4b94      	ldr	r3, [pc, #592]	; (800768c <_dtoa_r+0x304>)
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	3303      	adds	r3, #3
 800743e:	e7f3      	b.n	8007428 <_dtoa_r+0xa0>
 8007440:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007444:	2200      	movs	r2, #0
 8007446:	ec51 0b17 	vmov	r0, r1, d7
 800744a:	2300      	movs	r3, #0
 800744c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007450:	f7f9 fb42 	bl	8000ad8 <__aeabi_dcmpeq>
 8007454:	4680      	mov	r8, r0
 8007456:	b158      	cbz	r0, 8007470 <_dtoa_r+0xe8>
 8007458:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800745a:	2301      	movs	r3, #1
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 8551 	beq.w	8007f08 <_dtoa_r+0xb80>
 8007466:	488b      	ldr	r0, [pc, #556]	; (8007694 <_dtoa_r+0x30c>)
 8007468:	6018      	str	r0, [r3, #0]
 800746a:	1e43      	subs	r3, r0, #1
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	e7dd      	b.n	800742c <_dtoa_r+0xa4>
 8007470:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007474:	aa12      	add	r2, sp, #72	; 0x48
 8007476:	a913      	add	r1, sp, #76	; 0x4c
 8007478:	4620      	mov	r0, r4
 800747a:	f001 f8ad 	bl	80085d8 <__d2b>
 800747e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007482:	4683      	mov	fp, r0
 8007484:	2d00      	cmp	r5, #0
 8007486:	d07c      	beq.n	8007582 <_dtoa_r+0x1fa>
 8007488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800748a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800748e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007492:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007496:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800749a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800749e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80074a2:	4b7d      	ldr	r3, [pc, #500]	; (8007698 <_dtoa_r+0x310>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	4630      	mov	r0, r6
 80074a8:	4639      	mov	r1, r7
 80074aa:	f7f8 fef5 	bl	8000298 <__aeabi_dsub>
 80074ae:	a36e      	add	r3, pc, #440	; (adr r3, 8007668 <_dtoa_r+0x2e0>)
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	f7f9 f8a8 	bl	8000608 <__aeabi_dmul>
 80074b8:	a36d      	add	r3, pc, #436	; (adr r3, 8007670 <_dtoa_r+0x2e8>)
 80074ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074be:	f7f8 feed 	bl	800029c <__adddf3>
 80074c2:	4606      	mov	r6, r0
 80074c4:	4628      	mov	r0, r5
 80074c6:	460f      	mov	r7, r1
 80074c8:	f7f9 f834 	bl	8000534 <__aeabi_i2d>
 80074cc:	a36a      	add	r3, pc, #424	; (adr r3, 8007678 <_dtoa_r+0x2f0>)
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	f7f9 f899 	bl	8000608 <__aeabi_dmul>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4630      	mov	r0, r6
 80074dc:	4639      	mov	r1, r7
 80074de:	f7f8 fedd 	bl	800029c <__adddf3>
 80074e2:	4606      	mov	r6, r0
 80074e4:	460f      	mov	r7, r1
 80074e6:	f7f9 fb3f 	bl	8000b68 <__aeabi_d2iz>
 80074ea:	2200      	movs	r2, #0
 80074ec:	4682      	mov	sl, r0
 80074ee:	2300      	movs	r3, #0
 80074f0:	4630      	mov	r0, r6
 80074f2:	4639      	mov	r1, r7
 80074f4:	f7f9 fafa 	bl	8000aec <__aeabi_dcmplt>
 80074f8:	b148      	cbz	r0, 800750e <_dtoa_r+0x186>
 80074fa:	4650      	mov	r0, sl
 80074fc:	f7f9 f81a 	bl	8000534 <__aeabi_i2d>
 8007500:	4632      	mov	r2, r6
 8007502:	463b      	mov	r3, r7
 8007504:	f7f9 fae8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007508:	b908      	cbnz	r0, 800750e <_dtoa_r+0x186>
 800750a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800750e:	f1ba 0f16 	cmp.w	sl, #22
 8007512:	d854      	bhi.n	80075be <_dtoa_r+0x236>
 8007514:	4b61      	ldr	r3, [pc, #388]	; (800769c <_dtoa_r+0x314>)
 8007516:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800751a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007522:	f7f9 fae3 	bl	8000aec <__aeabi_dcmplt>
 8007526:	2800      	cmp	r0, #0
 8007528:	d04b      	beq.n	80075c2 <_dtoa_r+0x23a>
 800752a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800752e:	2300      	movs	r3, #0
 8007530:	930e      	str	r3, [sp, #56]	; 0x38
 8007532:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007534:	1b5d      	subs	r5, r3, r5
 8007536:	1e6b      	subs	r3, r5, #1
 8007538:	9304      	str	r3, [sp, #16]
 800753a:	bf43      	ittte	mi
 800753c:	2300      	movmi	r3, #0
 800753e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007542:	9304      	strmi	r3, [sp, #16]
 8007544:	f04f 0800 	movpl.w	r8, #0
 8007548:	f1ba 0f00 	cmp.w	sl, #0
 800754c:	db3b      	blt.n	80075c6 <_dtoa_r+0x23e>
 800754e:	9b04      	ldr	r3, [sp, #16]
 8007550:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007554:	4453      	add	r3, sl
 8007556:	9304      	str	r3, [sp, #16]
 8007558:	2300      	movs	r3, #0
 800755a:	9306      	str	r3, [sp, #24]
 800755c:	9b05      	ldr	r3, [sp, #20]
 800755e:	2b09      	cmp	r3, #9
 8007560:	d869      	bhi.n	8007636 <_dtoa_r+0x2ae>
 8007562:	2b05      	cmp	r3, #5
 8007564:	bfc4      	itt	gt
 8007566:	3b04      	subgt	r3, #4
 8007568:	9305      	strgt	r3, [sp, #20]
 800756a:	9b05      	ldr	r3, [sp, #20]
 800756c:	f1a3 0302 	sub.w	r3, r3, #2
 8007570:	bfcc      	ite	gt
 8007572:	2500      	movgt	r5, #0
 8007574:	2501      	movle	r5, #1
 8007576:	2b03      	cmp	r3, #3
 8007578:	d869      	bhi.n	800764e <_dtoa_r+0x2c6>
 800757a:	e8df f003 	tbb	[pc, r3]
 800757e:	4e2c      	.short	0x4e2c
 8007580:	5a4c      	.short	0x5a4c
 8007582:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007586:	441d      	add	r5, r3
 8007588:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800758c:	2b20      	cmp	r3, #32
 800758e:	bfc1      	itttt	gt
 8007590:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007594:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007598:	fa09 f303 	lslgt.w	r3, r9, r3
 800759c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80075a0:	bfda      	itte	le
 80075a2:	f1c3 0320 	rsble	r3, r3, #32
 80075a6:	fa06 f003 	lslle.w	r0, r6, r3
 80075aa:	4318      	orrgt	r0, r3
 80075ac:	f7f8 ffb2 	bl	8000514 <__aeabi_ui2d>
 80075b0:	2301      	movs	r3, #1
 80075b2:	4606      	mov	r6, r0
 80075b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80075b8:	3d01      	subs	r5, #1
 80075ba:	9310      	str	r3, [sp, #64]	; 0x40
 80075bc:	e771      	b.n	80074a2 <_dtoa_r+0x11a>
 80075be:	2301      	movs	r3, #1
 80075c0:	e7b6      	b.n	8007530 <_dtoa_r+0x1a8>
 80075c2:	900e      	str	r0, [sp, #56]	; 0x38
 80075c4:	e7b5      	b.n	8007532 <_dtoa_r+0x1aa>
 80075c6:	f1ca 0300 	rsb	r3, sl, #0
 80075ca:	9306      	str	r3, [sp, #24]
 80075cc:	2300      	movs	r3, #0
 80075ce:	eba8 080a 	sub.w	r8, r8, sl
 80075d2:	930d      	str	r3, [sp, #52]	; 0x34
 80075d4:	e7c2      	b.n	800755c <_dtoa_r+0x1d4>
 80075d6:	2300      	movs	r3, #0
 80075d8:	9308      	str	r3, [sp, #32]
 80075da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075dc:	2b00      	cmp	r3, #0
 80075de:	dc39      	bgt.n	8007654 <_dtoa_r+0x2cc>
 80075e0:	f04f 0901 	mov.w	r9, #1
 80075e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80075e8:	464b      	mov	r3, r9
 80075ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80075ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80075f0:	2200      	movs	r2, #0
 80075f2:	6042      	str	r2, [r0, #4]
 80075f4:	2204      	movs	r2, #4
 80075f6:	f102 0614 	add.w	r6, r2, #20
 80075fa:	429e      	cmp	r6, r3
 80075fc:	6841      	ldr	r1, [r0, #4]
 80075fe:	d92f      	bls.n	8007660 <_dtoa_r+0x2d8>
 8007600:	4620      	mov	r0, r4
 8007602:	f000 fcc7 	bl	8007f94 <_Balloc>
 8007606:	9000      	str	r0, [sp, #0]
 8007608:	2800      	cmp	r0, #0
 800760a:	d14b      	bne.n	80076a4 <_dtoa_r+0x31c>
 800760c:	4b24      	ldr	r3, [pc, #144]	; (80076a0 <_dtoa_r+0x318>)
 800760e:	4602      	mov	r2, r0
 8007610:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007614:	e6d1      	b.n	80073ba <_dtoa_r+0x32>
 8007616:	2301      	movs	r3, #1
 8007618:	e7de      	b.n	80075d8 <_dtoa_r+0x250>
 800761a:	2300      	movs	r3, #0
 800761c:	9308      	str	r3, [sp, #32]
 800761e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007620:	eb0a 0903 	add.w	r9, sl, r3
 8007624:	f109 0301 	add.w	r3, r9, #1
 8007628:	2b01      	cmp	r3, #1
 800762a:	9301      	str	r3, [sp, #4]
 800762c:	bfb8      	it	lt
 800762e:	2301      	movlt	r3, #1
 8007630:	e7dd      	b.n	80075ee <_dtoa_r+0x266>
 8007632:	2301      	movs	r3, #1
 8007634:	e7f2      	b.n	800761c <_dtoa_r+0x294>
 8007636:	2501      	movs	r5, #1
 8007638:	2300      	movs	r3, #0
 800763a:	9305      	str	r3, [sp, #20]
 800763c:	9508      	str	r5, [sp, #32]
 800763e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007642:	2200      	movs	r2, #0
 8007644:	f8cd 9004 	str.w	r9, [sp, #4]
 8007648:	2312      	movs	r3, #18
 800764a:	9209      	str	r2, [sp, #36]	; 0x24
 800764c:	e7cf      	b.n	80075ee <_dtoa_r+0x266>
 800764e:	2301      	movs	r3, #1
 8007650:	9308      	str	r3, [sp, #32]
 8007652:	e7f4      	b.n	800763e <_dtoa_r+0x2b6>
 8007654:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007658:	f8cd 9004 	str.w	r9, [sp, #4]
 800765c:	464b      	mov	r3, r9
 800765e:	e7c6      	b.n	80075ee <_dtoa_r+0x266>
 8007660:	3101      	adds	r1, #1
 8007662:	6041      	str	r1, [r0, #4]
 8007664:	0052      	lsls	r2, r2, #1
 8007666:	e7c6      	b.n	80075f6 <_dtoa_r+0x26e>
 8007668:	636f4361 	.word	0x636f4361
 800766c:	3fd287a7 	.word	0x3fd287a7
 8007670:	8b60c8b3 	.word	0x8b60c8b3
 8007674:	3fc68a28 	.word	0x3fc68a28
 8007678:	509f79fb 	.word	0x509f79fb
 800767c:	3fd34413 	.word	0x3fd34413
 8007680:	0800a23d 	.word	0x0800a23d
 8007684:	0800a254 	.word	0x0800a254
 8007688:	7ff00000 	.word	0x7ff00000
 800768c:	0800a239 	.word	0x0800a239
 8007690:	0800a230 	.word	0x0800a230
 8007694:	0800a20d 	.word	0x0800a20d
 8007698:	3ff80000 	.word	0x3ff80000
 800769c:	0800a350 	.word	0x0800a350
 80076a0:	0800a2b3 	.word	0x0800a2b3
 80076a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076a6:	9a00      	ldr	r2, [sp, #0]
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	9b01      	ldr	r3, [sp, #4]
 80076ac:	2b0e      	cmp	r3, #14
 80076ae:	f200 80ad 	bhi.w	800780c <_dtoa_r+0x484>
 80076b2:	2d00      	cmp	r5, #0
 80076b4:	f000 80aa 	beq.w	800780c <_dtoa_r+0x484>
 80076b8:	f1ba 0f00 	cmp.w	sl, #0
 80076bc:	dd36      	ble.n	800772c <_dtoa_r+0x3a4>
 80076be:	4ac3      	ldr	r2, [pc, #780]	; (80079cc <_dtoa_r+0x644>)
 80076c0:	f00a 030f 	and.w	r3, sl, #15
 80076c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80076c8:	ed93 7b00 	vldr	d7, [r3]
 80076cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80076d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80076d4:	eeb0 8a47 	vmov.f32	s16, s14
 80076d8:	eef0 8a67 	vmov.f32	s17, s15
 80076dc:	d016      	beq.n	800770c <_dtoa_r+0x384>
 80076de:	4bbc      	ldr	r3, [pc, #752]	; (80079d0 <_dtoa_r+0x648>)
 80076e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80076e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076e8:	f7f9 f8b8 	bl	800085c <__aeabi_ddiv>
 80076ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076f0:	f007 070f 	and.w	r7, r7, #15
 80076f4:	2503      	movs	r5, #3
 80076f6:	4eb6      	ldr	r6, [pc, #728]	; (80079d0 <_dtoa_r+0x648>)
 80076f8:	b957      	cbnz	r7, 8007710 <_dtoa_r+0x388>
 80076fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076fe:	ec53 2b18 	vmov	r2, r3, d8
 8007702:	f7f9 f8ab 	bl	800085c <__aeabi_ddiv>
 8007706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800770a:	e029      	b.n	8007760 <_dtoa_r+0x3d8>
 800770c:	2502      	movs	r5, #2
 800770e:	e7f2      	b.n	80076f6 <_dtoa_r+0x36e>
 8007710:	07f9      	lsls	r1, r7, #31
 8007712:	d508      	bpl.n	8007726 <_dtoa_r+0x39e>
 8007714:	ec51 0b18 	vmov	r0, r1, d8
 8007718:	e9d6 2300 	ldrd	r2, r3, [r6]
 800771c:	f7f8 ff74 	bl	8000608 <__aeabi_dmul>
 8007720:	ec41 0b18 	vmov	d8, r0, r1
 8007724:	3501      	adds	r5, #1
 8007726:	107f      	asrs	r7, r7, #1
 8007728:	3608      	adds	r6, #8
 800772a:	e7e5      	b.n	80076f8 <_dtoa_r+0x370>
 800772c:	f000 80a6 	beq.w	800787c <_dtoa_r+0x4f4>
 8007730:	f1ca 0600 	rsb	r6, sl, #0
 8007734:	4ba5      	ldr	r3, [pc, #660]	; (80079cc <_dtoa_r+0x644>)
 8007736:	4fa6      	ldr	r7, [pc, #664]	; (80079d0 <_dtoa_r+0x648>)
 8007738:	f006 020f 	and.w	r2, r6, #15
 800773c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007748:	f7f8 ff5e 	bl	8000608 <__aeabi_dmul>
 800774c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007750:	1136      	asrs	r6, r6, #4
 8007752:	2300      	movs	r3, #0
 8007754:	2502      	movs	r5, #2
 8007756:	2e00      	cmp	r6, #0
 8007758:	f040 8085 	bne.w	8007866 <_dtoa_r+0x4de>
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1d2      	bne.n	8007706 <_dtoa_r+0x37e>
 8007760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 808c 	beq.w	8007880 <_dtoa_r+0x4f8>
 8007768:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800776c:	4b99      	ldr	r3, [pc, #612]	; (80079d4 <_dtoa_r+0x64c>)
 800776e:	2200      	movs	r2, #0
 8007770:	4630      	mov	r0, r6
 8007772:	4639      	mov	r1, r7
 8007774:	f7f9 f9ba 	bl	8000aec <__aeabi_dcmplt>
 8007778:	2800      	cmp	r0, #0
 800777a:	f000 8081 	beq.w	8007880 <_dtoa_r+0x4f8>
 800777e:	9b01      	ldr	r3, [sp, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d07d      	beq.n	8007880 <_dtoa_r+0x4f8>
 8007784:	f1b9 0f00 	cmp.w	r9, #0
 8007788:	dd3c      	ble.n	8007804 <_dtoa_r+0x47c>
 800778a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800778e:	9307      	str	r3, [sp, #28]
 8007790:	2200      	movs	r2, #0
 8007792:	4b91      	ldr	r3, [pc, #580]	; (80079d8 <_dtoa_r+0x650>)
 8007794:	4630      	mov	r0, r6
 8007796:	4639      	mov	r1, r7
 8007798:	f7f8 ff36 	bl	8000608 <__aeabi_dmul>
 800779c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077a0:	3501      	adds	r5, #1
 80077a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80077a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80077aa:	4628      	mov	r0, r5
 80077ac:	f7f8 fec2 	bl	8000534 <__aeabi_i2d>
 80077b0:	4632      	mov	r2, r6
 80077b2:	463b      	mov	r3, r7
 80077b4:	f7f8 ff28 	bl	8000608 <__aeabi_dmul>
 80077b8:	4b88      	ldr	r3, [pc, #544]	; (80079dc <_dtoa_r+0x654>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	f7f8 fd6e 	bl	800029c <__adddf3>
 80077c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80077c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077c8:	9303      	str	r3, [sp, #12]
 80077ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d15c      	bne.n	800788a <_dtoa_r+0x502>
 80077d0:	4b83      	ldr	r3, [pc, #524]	; (80079e0 <_dtoa_r+0x658>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	4630      	mov	r0, r6
 80077d6:	4639      	mov	r1, r7
 80077d8:	f7f8 fd5e 	bl	8000298 <__aeabi_dsub>
 80077dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077e0:	4606      	mov	r6, r0
 80077e2:	460f      	mov	r7, r1
 80077e4:	f7f9 f9a0 	bl	8000b28 <__aeabi_dcmpgt>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	f040 8296 	bne.w	8007d1a <_dtoa_r+0x992>
 80077ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80077f2:	4630      	mov	r0, r6
 80077f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077f8:	4639      	mov	r1, r7
 80077fa:	f7f9 f977 	bl	8000aec <__aeabi_dcmplt>
 80077fe:	2800      	cmp	r0, #0
 8007800:	f040 8288 	bne.w	8007d14 <_dtoa_r+0x98c>
 8007804:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007808:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800780c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800780e:	2b00      	cmp	r3, #0
 8007810:	f2c0 8158 	blt.w	8007ac4 <_dtoa_r+0x73c>
 8007814:	f1ba 0f0e 	cmp.w	sl, #14
 8007818:	f300 8154 	bgt.w	8007ac4 <_dtoa_r+0x73c>
 800781c:	4b6b      	ldr	r3, [pc, #428]	; (80079cc <_dtoa_r+0x644>)
 800781e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007822:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	f280 80e3 	bge.w	80079f4 <_dtoa_r+0x66c>
 800782e:	9b01      	ldr	r3, [sp, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	f300 80df 	bgt.w	80079f4 <_dtoa_r+0x66c>
 8007836:	f040 826d 	bne.w	8007d14 <_dtoa_r+0x98c>
 800783a:	4b69      	ldr	r3, [pc, #420]	; (80079e0 <_dtoa_r+0x658>)
 800783c:	2200      	movs	r2, #0
 800783e:	4640      	mov	r0, r8
 8007840:	4649      	mov	r1, r9
 8007842:	f7f8 fee1 	bl	8000608 <__aeabi_dmul>
 8007846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800784a:	f7f9 f963 	bl	8000b14 <__aeabi_dcmpge>
 800784e:	9e01      	ldr	r6, [sp, #4]
 8007850:	4637      	mov	r7, r6
 8007852:	2800      	cmp	r0, #0
 8007854:	f040 8243 	bne.w	8007cde <_dtoa_r+0x956>
 8007858:	9d00      	ldr	r5, [sp, #0]
 800785a:	2331      	movs	r3, #49	; 0x31
 800785c:	f805 3b01 	strb.w	r3, [r5], #1
 8007860:	f10a 0a01 	add.w	sl, sl, #1
 8007864:	e23f      	b.n	8007ce6 <_dtoa_r+0x95e>
 8007866:	07f2      	lsls	r2, r6, #31
 8007868:	d505      	bpl.n	8007876 <_dtoa_r+0x4ee>
 800786a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800786e:	f7f8 fecb 	bl	8000608 <__aeabi_dmul>
 8007872:	3501      	adds	r5, #1
 8007874:	2301      	movs	r3, #1
 8007876:	1076      	asrs	r6, r6, #1
 8007878:	3708      	adds	r7, #8
 800787a:	e76c      	b.n	8007756 <_dtoa_r+0x3ce>
 800787c:	2502      	movs	r5, #2
 800787e:	e76f      	b.n	8007760 <_dtoa_r+0x3d8>
 8007880:	9b01      	ldr	r3, [sp, #4]
 8007882:	f8cd a01c 	str.w	sl, [sp, #28]
 8007886:	930c      	str	r3, [sp, #48]	; 0x30
 8007888:	e78d      	b.n	80077a6 <_dtoa_r+0x41e>
 800788a:	9900      	ldr	r1, [sp, #0]
 800788c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800788e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007890:	4b4e      	ldr	r3, [pc, #312]	; (80079cc <_dtoa_r+0x644>)
 8007892:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007896:	4401      	add	r1, r0
 8007898:	9102      	str	r1, [sp, #8]
 800789a:	9908      	ldr	r1, [sp, #32]
 800789c:	eeb0 8a47 	vmov.f32	s16, s14
 80078a0:	eef0 8a67 	vmov.f32	s17, s15
 80078a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078ac:	2900      	cmp	r1, #0
 80078ae:	d045      	beq.n	800793c <_dtoa_r+0x5b4>
 80078b0:	494c      	ldr	r1, [pc, #304]	; (80079e4 <_dtoa_r+0x65c>)
 80078b2:	2000      	movs	r0, #0
 80078b4:	f7f8 ffd2 	bl	800085c <__aeabi_ddiv>
 80078b8:	ec53 2b18 	vmov	r2, r3, d8
 80078bc:	f7f8 fcec 	bl	8000298 <__aeabi_dsub>
 80078c0:	9d00      	ldr	r5, [sp, #0]
 80078c2:	ec41 0b18 	vmov	d8, r0, r1
 80078c6:	4639      	mov	r1, r7
 80078c8:	4630      	mov	r0, r6
 80078ca:	f7f9 f94d 	bl	8000b68 <__aeabi_d2iz>
 80078ce:	900c      	str	r0, [sp, #48]	; 0x30
 80078d0:	f7f8 fe30 	bl	8000534 <__aeabi_i2d>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	4630      	mov	r0, r6
 80078da:	4639      	mov	r1, r7
 80078dc:	f7f8 fcdc 	bl	8000298 <__aeabi_dsub>
 80078e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078e2:	3330      	adds	r3, #48	; 0x30
 80078e4:	f805 3b01 	strb.w	r3, [r5], #1
 80078e8:	ec53 2b18 	vmov	r2, r3, d8
 80078ec:	4606      	mov	r6, r0
 80078ee:	460f      	mov	r7, r1
 80078f0:	f7f9 f8fc 	bl	8000aec <__aeabi_dcmplt>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	d165      	bne.n	80079c4 <_dtoa_r+0x63c>
 80078f8:	4632      	mov	r2, r6
 80078fa:	463b      	mov	r3, r7
 80078fc:	4935      	ldr	r1, [pc, #212]	; (80079d4 <_dtoa_r+0x64c>)
 80078fe:	2000      	movs	r0, #0
 8007900:	f7f8 fcca 	bl	8000298 <__aeabi_dsub>
 8007904:	ec53 2b18 	vmov	r2, r3, d8
 8007908:	f7f9 f8f0 	bl	8000aec <__aeabi_dcmplt>
 800790c:	2800      	cmp	r0, #0
 800790e:	f040 80b9 	bne.w	8007a84 <_dtoa_r+0x6fc>
 8007912:	9b02      	ldr	r3, [sp, #8]
 8007914:	429d      	cmp	r5, r3
 8007916:	f43f af75 	beq.w	8007804 <_dtoa_r+0x47c>
 800791a:	4b2f      	ldr	r3, [pc, #188]	; (80079d8 <_dtoa_r+0x650>)
 800791c:	ec51 0b18 	vmov	r0, r1, d8
 8007920:	2200      	movs	r2, #0
 8007922:	f7f8 fe71 	bl	8000608 <__aeabi_dmul>
 8007926:	4b2c      	ldr	r3, [pc, #176]	; (80079d8 <_dtoa_r+0x650>)
 8007928:	ec41 0b18 	vmov	d8, r0, r1
 800792c:	2200      	movs	r2, #0
 800792e:	4630      	mov	r0, r6
 8007930:	4639      	mov	r1, r7
 8007932:	f7f8 fe69 	bl	8000608 <__aeabi_dmul>
 8007936:	4606      	mov	r6, r0
 8007938:	460f      	mov	r7, r1
 800793a:	e7c4      	b.n	80078c6 <_dtoa_r+0x53e>
 800793c:	ec51 0b17 	vmov	r0, r1, d7
 8007940:	f7f8 fe62 	bl	8000608 <__aeabi_dmul>
 8007944:	9b02      	ldr	r3, [sp, #8]
 8007946:	9d00      	ldr	r5, [sp, #0]
 8007948:	930c      	str	r3, [sp, #48]	; 0x30
 800794a:	ec41 0b18 	vmov	d8, r0, r1
 800794e:	4639      	mov	r1, r7
 8007950:	4630      	mov	r0, r6
 8007952:	f7f9 f909 	bl	8000b68 <__aeabi_d2iz>
 8007956:	9011      	str	r0, [sp, #68]	; 0x44
 8007958:	f7f8 fdec 	bl	8000534 <__aeabi_i2d>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	4630      	mov	r0, r6
 8007962:	4639      	mov	r1, r7
 8007964:	f7f8 fc98 	bl	8000298 <__aeabi_dsub>
 8007968:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800796a:	3330      	adds	r3, #48	; 0x30
 800796c:	f805 3b01 	strb.w	r3, [r5], #1
 8007970:	9b02      	ldr	r3, [sp, #8]
 8007972:	429d      	cmp	r5, r3
 8007974:	4606      	mov	r6, r0
 8007976:	460f      	mov	r7, r1
 8007978:	f04f 0200 	mov.w	r2, #0
 800797c:	d134      	bne.n	80079e8 <_dtoa_r+0x660>
 800797e:	4b19      	ldr	r3, [pc, #100]	; (80079e4 <_dtoa_r+0x65c>)
 8007980:	ec51 0b18 	vmov	r0, r1, d8
 8007984:	f7f8 fc8a 	bl	800029c <__adddf3>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	4630      	mov	r0, r6
 800798e:	4639      	mov	r1, r7
 8007990:	f7f9 f8ca 	bl	8000b28 <__aeabi_dcmpgt>
 8007994:	2800      	cmp	r0, #0
 8007996:	d175      	bne.n	8007a84 <_dtoa_r+0x6fc>
 8007998:	ec53 2b18 	vmov	r2, r3, d8
 800799c:	4911      	ldr	r1, [pc, #68]	; (80079e4 <_dtoa_r+0x65c>)
 800799e:	2000      	movs	r0, #0
 80079a0:	f7f8 fc7a 	bl	8000298 <__aeabi_dsub>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4630      	mov	r0, r6
 80079aa:	4639      	mov	r1, r7
 80079ac:	f7f9 f89e 	bl	8000aec <__aeabi_dcmplt>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	f43f af27 	beq.w	8007804 <_dtoa_r+0x47c>
 80079b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079b8:	1e6b      	subs	r3, r5, #1
 80079ba:	930c      	str	r3, [sp, #48]	; 0x30
 80079bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079c0:	2b30      	cmp	r3, #48	; 0x30
 80079c2:	d0f8      	beq.n	80079b6 <_dtoa_r+0x62e>
 80079c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80079c8:	e04a      	b.n	8007a60 <_dtoa_r+0x6d8>
 80079ca:	bf00      	nop
 80079cc:	0800a350 	.word	0x0800a350
 80079d0:	0800a328 	.word	0x0800a328
 80079d4:	3ff00000 	.word	0x3ff00000
 80079d8:	40240000 	.word	0x40240000
 80079dc:	401c0000 	.word	0x401c0000
 80079e0:	40140000 	.word	0x40140000
 80079e4:	3fe00000 	.word	0x3fe00000
 80079e8:	4baf      	ldr	r3, [pc, #700]	; (8007ca8 <_dtoa_r+0x920>)
 80079ea:	f7f8 fe0d 	bl	8000608 <__aeabi_dmul>
 80079ee:	4606      	mov	r6, r0
 80079f0:	460f      	mov	r7, r1
 80079f2:	e7ac      	b.n	800794e <_dtoa_r+0x5c6>
 80079f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80079f8:	9d00      	ldr	r5, [sp, #0]
 80079fa:	4642      	mov	r2, r8
 80079fc:	464b      	mov	r3, r9
 80079fe:	4630      	mov	r0, r6
 8007a00:	4639      	mov	r1, r7
 8007a02:	f7f8 ff2b 	bl	800085c <__aeabi_ddiv>
 8007a06:	f7f9 f8af 	bl	8000b68 <__aeabi_d2iz>
 8007a0a:	9002      	str	r0, [sp, #8]
 8007a0c:	f7f8 fd92 	bl	8000534 <__aeabi_i2d>
 8007a10:	4642      	mov	r2, r8
 8007a12:	464b      	mov	r3, r9
 8007a14:	f7f8 fdf8 	bl	8000608 <__aeabi_dmul>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	4639      	mov	r1, r7
 8007a20:	f7f8 fc3a 	bl	8000298 <__aeabi_dsub>
 8007a24:	9e02      	ldr	r6, [sp, #8]
 8007a26:	9f01      	ldr	r7, [sp, #4]
 8007a28:	3630      	adds	r6, #48	; 0x30
 8007a2a:	f805 6b01 	strb.w	r6, [r5], #1
 8007a2e:	9e00      	ldr	r6, [sp, #0]
 8007a30:	1bae      	subs	r6, r5, r6
 8007a32:	42b7      	cmp	r7, r6
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	d137      	bne.n	8007aaa <_dtoa_r+0x722>
 8007a3a:	f7f8 fc2f 	bl	800029c <__adddf3>
 8007a3e:	4642      	mov	r2, r8
 8007a40:	464b      	mov	r3, r9
 8007a42:	4606      	mov	r6, r0
 8007a44:	460f      	mov	r7, r1
 8007a46:	f7f9 f86f 	bl	8000b28 <__aeabi_dcmpgt>
 8007a4a:	b9c8      	cbnz	r0, 8007a80 <_dtoa_r+0x6f8>
 8007a4c:	4642      	mov	r2, r8
 8007a4e:	464b      	mov	r3, r9
 8007a50:	4630      	mov	r0, r6
 8007a52:	4639      	mov	r1, r7
 8007a54:	f7f9 f840 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a58:	b110      	cbz	r0, 8007a60 <_dtoa_r+0x6d8>
 8007a5a:	9b02      	ldr	r3, [sp, #8]
 8007a5c:	07d9      	lsls	r1, r3, #31
 8007a5e:	d40f      	bmi.n	8007a80 <_dtoa_r+0x6f8>
 8007a60:	4620      	mov	r0, r4
 8007a62:	4659      	mov	r1, fp
 8007a64:	f000 fad6 	bl	8008014 <_Bfree>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	702b      	strb	r3, [r5, #0]
 8007a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a6e:	f10a 0001 	add.w	r0, sl, #1
 8007a72:	6018      	str	r0, [r3, #0]
 8007a74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f43f acd8 	beq.w	800742c <_dtoa_r+0xa4>
 8007a7c:	601d      	str	r5, [r3, #0]
 8007a7e:	e4d5      	b.n	800742c <_dtoa_r+0xa4>
 8007a80:	f8cd a01c 	str.w	sl, [sp, #28]
 8007a84:	462b      	mov	r3, r5
 8007a86:	461d      	mov	r5, r3
 8007a88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a8c:	2a39      	cmp	r2, #57	; 0x39
 8007a8e:	d108      	bne.n	8007aa2 <_dtoa_r+0x71a>
 8007a90:	9a00      	ldr	r2, [sp, #0]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d1f7      	bne.n	8007a86 <_dtoa_r+0x6fe>
 8007a96:	9a07      	ldr	r2, [sp, #28]
 8007a98:	9900      	ldr	r1, [sp, #0]
 8007a9a:	3201      	adds	r2, #1
 8007a9c:	9207      	str	r2, [sp, #28]
 8007a9e:	2230      	movs	r2, #48	; 0x30
 8007aa0:	700a      	strb	r2, [r1, #0]
 8007aa2:	781a      	ldrb	r2, [r3, #0]
 8007aa4:	3201      	adds	r2, #1
 8007aa6:	701a      	strb	r2, [r3, #0]
 8007aa8:	e78c      	b.n	80079c4 <_dtoa_r+0x63c>
 8007aaa:	4b7f      	ldr	r3, [pc, #508]	; (8007ca8 <_dtoa_r+0x920>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	f7f8 fdab 	bl	8000608 <__aeabi_dmul>
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	460f      	mov	r7, r1
 8007aba:	f7f9 f80d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d09b      	beq.n	80079fa <_dtoa_r+0x672>
 8007ac2:	e7cd      	b.n	8007a60 <_dtoa_r+0x6d8>
 8007ac4:	9a08      	ldr	r2, [sp, #32]
 8007ac6:	2a00      	cmp	r2, #0
 8007ac8:	f000 80c4 	beq.w	8007c54 <_dtoa_r+0x8cc>
 8007acc:	9a05      	ldr	r2, [sp, #20]
 8007ace:	2a01      	cmp	r2, #1
 8007ad0:	f300 80a8 	bgt.w	8007c24 <_dtoa_r+0x89c>
 8007ad4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ad6:	2a00      	cmp	r2, #0
 8007ad8:	f000 80a0 	beq.w	8007c1c <_dtoa_r+0x894>
 8007adc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ae0:	9e06      	ldr	r6, [sp, #24]
 8007ae2:	4645      	mov	r5, r8
 8007ae4:	9a04      	ldr	r2, [sp, #16]
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	441a      	add	r2, r3
 8007aea:	4620      	mov	r0, r4
 8007aec:	4498      	add	r8, r3
 8007aee:	9204      	str	r2, [sp, #16]
 8007af0:	f000 fb4c 	bl	800818c <__i2b>
 8007af4:	4607      	mov	r7, r0
 8007af6:	2d00      	cmp	r5, #0
 8007af8:	dd0b      	ble.n	8007b12 <_dtoa_r+0x78a>
 8007afa:	9b04      	ldr	r3, [sp, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	dd08      	ble.n	8007b12 <_dtoa_r+0x78a>
 8007b00:	42ab      	cmp	r3, r5
 8007b02:	9a04      	ldr	r2, [sp, #16]
 8007b04:	bfa8      	it	ge
 8007b06:	462b      	movge	r3, r5
 8007b08:	eba8 0803 	sub.w	r8, r8, r3
 8007b0c:	1aed      	subs	r5, r5, r3
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	9304      	str	r3, [sp, #16]
 8007b12:	9b06      	ldr	r3, [sp, #24]
 8007b14:	b1fb      	cbz	r3, 8007b56 <_dtoa_r+0x7ce>
 8007b16:	9b08      	ldr	r3, [sp, #32]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 809f 	beq.w	8007c5c <_dtoa_r+0x8d4>
 8007b1e:	2e00      	cmp	r6, #0
 8007b20:	dd11      	ble.n	8007b46 <_dtoa_r+0x7be>
 8007b22:	4639      	mov	r1, r7
 8007b24:	4632      	mov	r2, r6
 8007b26:	4620      	mov	r0, r4
 8007b28:	f000 fbec 	bl	8008304 <__pow5mult>
 8007b2c:	465a      	mov	r2, fp
 8007b2e:	4601      	mov	r1, r0
 8007b30:	4607      	mov	r7, r0
 8007b32:	4620      	mov	r0, r4
 8007b34:	f000 fb40 	bl	80081b8 <__multiply>
 8007b38:	4659      	mov	r1, fp
 8007b3a:	9007      	str	r0, [sp, #28]
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f000 fa69 	bl	8008014 <_Bfree>
 8007b42:	9b07      	ldr	r3, [sp, #28]
 8007b44:	469b      	mov	fp, r3
 8007b46:	9b06      	ldr	r3, [sp, #24]
 8007b48:	1b9a      	subs	r2, r3, r6
 8007b4a:	d004      	beq.n	8007b56 <_dtoa_r+0x7ce>
 8007b4c:	4659      	mov	r1, fp
 8007b4e:	4620      	mov	r0, r4
 8007b50:	f000 fbd8 	bl	8008304 <__pow5mult>
 8007b54:	4683      	mov	fp, r0
 8007b56:	2101      	movs	r1, #1
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f000 fb17 	bl	800818c <__i2b>
 8007b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	4606      	mov	r6, r0
 8007b64:	dd7c      	ble.n	8007c60 <_dtoa_r+0x8d8>
 8007b66:	461a      	mov	r2, r3
 8007b68:	4601      	mov	r1, r0
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f000 fbca 	bl	8008304 <__pow5mult>
 8007b70:	9b05      	ldr	r3, [sp, #20]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	4606      	mov	r6, r0
 8007b76:	dd76      	ble.n	8007c66 <_dtoa_r+0x8de>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	9306      	str	r3, [sp, #24]
 8007b7c:	6933      	ldr	r3, [r6, #16]
 8007b7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b82:	6918      	ldr	r0, [r3, #16]
 8007b84:	f000 fab2 	bl	80080ec <__hi0bits>
 8007b88:	f1c0 0020 	rsb	r0, r0, #32
 8007b8c:	9b04      	ldr	r3, [sp, #16]
 8007b8e:	4418      	add	r0, r3
 8007b90:	f010 001f 	ands.w	r0, r0, #31
 8007b94:	f000 8086 	beq.w	8007ca4 <_dtoa_r+0x91c>
 8007b98:	f1c0 0320 	rsb	r3, r0, #32
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	dd7f      	ble.n	8007ca0 <_dtoa_r+0x918>
 8007ba0:	f1c0 001c 	rsb	r0, r0, #28
 8007ba4:	9b04      	ldr	r3, [sp, #16]
 8007ba6:	4403      	add	r3, r0
 8007ba8:	4480      	add	r8, r0
 8007baa:	4405      	add	r5, r0
 8007bac:	9304      	str	r3, [sp, #16]
 8007bae:	f1b8 0f00 	cmp.w	r8, #0
 8007bb2:	dd05      	ble.n	8007bc0 <_dtoa_r+0x838>
 8007bb4:	4659      	mov	r1, fp
 8007bb6:	4642      	mov	r2, r8
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f000 fbfd 	bl	80083b8 <__lshift>
 8007bbe:	4683      	mov	fp, r0
 8007bc0:	9b04      	ldr	r3, [sp, #16]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dd05      	ble.n	8007bd2 <_dtoa_r+0x84a>
 8007bc6:	4631      	mov	r1, r6
 8007bc8:	461a      	mov	r2, r3
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f000 fbf4 	bl	80083b8 <__lshift>
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d069      	beq.n	8007cac <_dtoa_r+0x924>
 8007bd8:	4631      	mov	r1, r6
 8007bda:	4658      	mov	r0, fp
 8007bdc:	f000 fc58 	bl	8008490 <__mcmp>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	da63      	bge.n	8007cac <_dtoa_r+0x924>
 8007be4:	2300      	movs	r3, #0
 8007be6:	4659      	mov	r1, fp
 8007be8:	220a      	movs	r2, #10
 8007bea:	4620      	mov	r0, r4
 8007bec:	f000 fa34 	bl	8008058 <__multadd>
 8007bf0:	9b08      	ldr	r3, [sp, #32]
 8007bf2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007bf6:	4683      	mov	fp, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 818f 	beq.w	8007f1c <_dtoa_r+0xb94>
 8007bfe:	4639      	mov	r1, r7
 8007c00:	2300      	movs	r3, #0
 8007c02:	220a      	movs	r2, #10
 8007c04:	4620      	mov	r0, r4
 8007c06:	f000 fa27 	bl	8008058 <__multadd>
 8007c0a:	f1b9 0f00 	cmp.w	r9, #0
 8007c0e:	4607      	mov	r7, r0
 8007c10:	f300 808e 	bgt.w	8007d30 <_dtoa_r+0x9a8>
 8007c14:	9b05      	ldr	r3, [sp, #20]
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	dc50      	bgt.n	8007cbc <_dtoa_r+0x934>
 8007c1a:	e089      	b.n	8007d30 <_dtoa_r+0x9a8>
 8007c1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c22:	e75d      	b.n	8007ae0 <_dtoa_r+0x758>
 8007c24:	9b01      	ldr	r3, [sp, #4]
 8007c26:	1e5e      	subs	r6, r3, #1
 8007c28:	9b06      	ldr	r3, [sp, #24]
 8007c2a:	42b3      	cmp	r3, r6
 8007c2c:	bfbf      	itttt	lt
 8007c2e:	9b06      	ldrlt	r3, [sp, #24]
 8007c30:	9606      	strlt	r6, [sp, #24]
 8007c32:	1af2      	sublt	r2, r6, r3
 8007c34:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007c36:	bfb6      	itet	lt
 8007c38:	189b      	addlt	r3, r3, r2
 8007c3a:	1b9e      	subge	r6, r3, r6
 8007c3c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007c3e:	9b01      	ldr	r3, [sp, #4]
 8007c40:	bfb8      	it	lt
 8007c42:	2600      	movlt	r6, #0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	bfb5      	itete	lt
 8007c48:	eba8 0503 	sublt.w	r5, r8, r3
 8007c4c:	9b01      	ldrge	r3, [sp, #4]
 8007c4e:	2300      	movlt	r3, #0
 8007c50:	4645      	movge	r5, r8
 8007c52:	e747      	b.n	8007ae4 <_dtoa_r+0x75c>
 8007c54:	9e06      	ldr	r6, [sp, #24]
 8007c56:	9f08      	ldr	r7, [sp, #32]
 8007c58:	4645      	mov	r5, r8
 8007c5a:	e74c      	b.n	8007af6 <_dtoa_r+0x76e>
 8007c5c:	9a06      	ldr	r2, [sp, #24]
 8007c5e:	e775      	b.n	8007b4c <_dtoa_r+0x7c4>
 8007c60:	9b05      	ldr	r3, [sp, #20]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	dc18      	bgt.n	8007c98 <_dtoa_r+0x910>
 8007c66:	9b02      	ldr	r3, [sp, #8]
 8007c68:	b9b3      	cbnz	r3, 8007c98 <_dtoa_r+0x910>
 8007c6a:	9b03      	ldr	r3, [sp, #12]
 8007c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c70:	b9a3      	cbnz	r3, 8007c9c <_dtoa_r+0x914>
 8007c72:	9b03      	ldr	r3, [sp, #12]
 8007c74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c78:	0d1b      	lsrs	r3, r3, #20
 8007c7a:	051b      	lsls	r3, r3, #20
 8007c7c:	b12b      	cbz	r3, 8007c8a <_dtoa_r+0x902>
 8007c7e:	9b04      	ldr	r3, [sp, #16]
 8007c80:	3301      	adds	r3, #1
 8007c82:	9304      	str	r3, [sp, #16]
 8007c84:	f108 0801 	add.w	r8, r8, #1
 8007c88:	2301      	movs	r3, #1
 8007c8a:	9306      	str	r3, [sp, #24]
 8007c8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f47f af74 	bne.w	8007b7c <_dtoa_r+0x7f4>
 8007c94:	2001      	movs	r0, #1
 8007c96:	e779      	b.n	8007b8c <_dtoa_r+0x804>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	e7f6      	b.n	8007c8a <_dtoa_r+0x902>
 8007c9c:	9b02      	ldr	r3, [sp, #8]
 8007c9e:	e7f4      	b.n	8007c8a <_dtoa_r+0x902>
 8007ca0:	d085      	beq.n	8007bae <_dtoa_r+0x826>
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	301c      	adds	r0, #28
 8007ca6:	e77d      	b.n	8007ba4 <_dtoa_r+0x81c>
 8007ca8:	40240000 	.word	0x40240000
 8007cac:	9b01      	ldr	r3, [sp, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	dc38      	bgt.n	8007d24 <_dtoa_r+0x99c>
 8007cb2:	9b05      	ldr	r3, [sp, #20]
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	dd35      	ble.n	8007d24 <_dtoa_r+0x99c>
 8007cb8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007cbc:	f1b9 0f00 	cmp.w	r9, #0
 8007cc0:	d10d      	bne.n	8007cde <_dtoa_r+0x956>
 8007cc2:	4631      	mov	r1, r6
 8007cc4:	464b      	mov	r3, r9
 8007cc6:	2205      	movs	r2, #5
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f000 f9c5 	bl	8008058 <__multadd>
 8007cce:	4601      	mov	r1, r0
 8007cd0:	4606      	mov	r6, r0
 8007cd2:	4658      	mov	r0, fp
 8007cd4:	f000 fbdc 	bl	8008490 <__mcmp>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	f73f adbd 	bgt.w	8007858 <_dtoa_r+0x4d0>
 8007cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce0:	9d00      	ldr	r5, [sp, #0]
 8007ce2:	ea6f 0a03 	mvn.w	sl, r3
 8007ce6:	f04f 0800 	mov.w	r8, #0
 8007cea:	4631      	mov	r1, r6
 8007cec:	4620      	mov	r0, r4
 8007cee:	f000 f991 	bl	8008014 <_Bfree>
 8007cf2:	2f00      	cmp	r7, #0
 8007cf4:	f43f aeb4 	beq.w	8007a60 <_dtoa_r+0x6d8>
 8007cf8:	f1b8 0f00 	cmp.w	r8, #0
 8007cfc:	d005      	beq.n	8007d0a <_dtoa_r+0x982>
 8007cfe:	45b8      	cmp	r8, r7
 8007d00:	d003      	beq.n	8007d0a <_dtoa_r+0x982>
 8007d02:	4641      	mov	r1, r8
 8007d04:	4620      	mov	r0, r4
 8007d06:	f000 f985 	bl	8008014 <_Bfree>
 8007d0a:	4639      	mov	r1, r7
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f000 f981 	bl	8008014 <_Bfree>
 8007d12:	e6a5      	b.n	8007a60 <_dtoa_r+0x6d8>
 8007d14:	2600      	movs	r6, #0
 8007d16:	4637      	mov	r7, r6
 8007d18:	e7e1      	b.n	8007cde <_dtoa_r+0x956>
 8007d1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007d1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007d20:	4637      	mov	r7, r6
 8007d22:	e599      	b.n	8007858 <_dtoa_r+0x4d0>
 8007d24:	9b08      	ldr	r3, [sp, #32]
 8007d26:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 80fd 	beq.w	8007f2a <_dtoa_r+0xba2>
 8007d30:	2d00      	cmp	r5, #0
 8007d32:	dd05      	ble.n	8007d40 <_dtoa_r+0x9b8>
 8007d34:	4639      	mov	r1, r7
 8007d36:	462a      	mov	r2, r5
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 fb3d 	bl	80083b8 <__lshift>
 8007d3e:	4607      	mov	r7, r0
 8007d40:	9b06      	ldr	r3, [sp, #24]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d05c      	beq.n	8007e00 <_dtoa_r+0xa78>
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f000 f923 	bl	8007f94 <_Balloc>
 8007d4e:	4605      	mov	r5, r0
 8007d50:	b928      	cbnz	r0, 8007d5e <_dtoa_r+0x9d6>
 8007d52:	4b80      	ldr	r3, [pc, #512]	; (8007f54 <_dtoa_r+0xbcc>)
 8007d54:	4602      	mov	r2, r0
 8007d56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007d5a:	f7ff bb2e 	b.w	80073ba <_dtoa_r+0x32>
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	3202      	adds	r2, #2
 8007d62:	0092      	lsls	r2, r2, #2
 8007d64:	f107 010c 	add.w	r1, r7, #12
 8007d68:	300c      	adds	r0, #12
 8007d6a:	f000 f905 	bl	8007f78 <memcpy>
 8007d6e:	2201      	movs	r2, #1
 8007d70:	4629      	mov	r1, r5
 8007d72:	4620      	mov	r0, r4
 8007d74:	f000 fb20 	bl	80083b8 <__lshift>
 8007d78:	9b00      	ldr	r3, [sp, #0]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	9b00      	ldr	r3, [sp, #0]
 8007d80:	444b      	add	r3, r9
 8007d82:	9307      	str	r3, [sp, #28]
 8007d84:	9b02      	ldr	r3, [sp, #8]
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	46b8      	mov	r8, r7
 8007d8c:	9306      	str	r3, [sp, #24]
 8007d8e:	4607      	mov	r7, r0
 8007d90:	9b01      	ldr	r3, [sp, #4]
 8007d92:	4631      	mov	r1, r6
 8007d94:	3b01      	subs	r3, #1
 8007d96:	4658      	mov	r0, fp
 8007d98:	9302      	str	r3, [sp, #8]
 8007d9a:	f7ff fa69 	bl	8007270 <quorem>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	3330      	adds	r3, #48	; 0x30
 8007da2:	9004      	str	r0, [sp, #16]
 8007da4:	4641      	mov	r1, r8
 8007da6:	4658      	mov	r0, fp
 8007da8:	9308      	str	r3, [sp, #32]
 8007daa:	f000 fb71 	bl	8008490 <__mcmp>
 8007dae:	463a      	mov	r2, r7
 8007db0:	4681      	mov	r9, r0
 8007db2:	4631      	mov	r1, r6
 8007db4:	4620      	mov	r0, r4
 8007db6:	f000 fb87 	bl	80084c8 <__mdiff>
 8007dba:	68c2      	ldr	r2, [r0, #12]
 8007dbc:	9b08      	ldr	r3, [sp, #32]
 8007dbe:	4605      	mov	r5, r0
 8007dc0:	bb02      	cbnz	r2, 8007e04 <_dtoa_r+0xa7c>
 8007dc2:	4601      	mov	r1, r0
 8007dc4:	4658      	mov	r0, fp
 8007dc6:	f000 fb63 	bl	8008490 <__mcmp>
 8007dca:	9b08      	ldr	r3, [sp, #32]
 8007dcc:	4602      	mov	r2, r0
 8007dce:	4629      	mov	r1, r5
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007dd6:	f000 f91d 	bl	8008014 <_Bfree>
 8007dda:	9b05      	ldr	r3, [sp, #20]
 8007ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dde:	9d01      	ldr	r5, [sp, #4]
 8007de0:	ea43 0102 	orr.w	r1, r3, r2
 8007de4:	9b06      	ldr	r3, [sp, #24]
 8007de6:	430b      	orrs	r3, r1
 8007de8:	9b08      	ldr	r3, [sp, #32]
 8007dea:	d10d      	bne.n	8007e08 <_dtoa_r+0xa80>
 8007dec:	2b39      	cmp	r3, #57	; 0x39
 8007dee:	d029      	beq.n	8007e44 <_dtoa_r+0xabc>
 8007df0:	f1b9 0f00 	cmp.w	r9, #0
 8007df4:	dd01      	ble.n	8007dfa <_dtoa_r+0xa72>
 8007df6:	9b04      	ldr	r3, [sp, #16]
 8007df8:	3331      	adds	r3, #49	; 0x31
 8007dfa:	9a02      	ldr	r2, [sp, #8]
 8007dfc:	7013      	strb	r3, [r2, #0]
 8007dfe:	e774      	b.n	8007cea <_dtoa_r+0x962>
 8007e00:	4638      	mov	r0, r7
 8007e02:	e7b9      	b.n	8007d78 <_dtoa_r+0x9f0>
 8007e04:	2201      	movs	r2, #1
 8007e06:	e7e2      	b.n	8007dce <_dtoa_r+0xa46>
 8007e08:	f1b9 0f00 	cmp.w	r9, #0
 8007e0c:	db06      	blt.n	8007e1c <_dtoa_r+0xa94>
 8007e0e:	9905      	ldr	r1, [sp, #20]
 8007e10:	ea41 0909 	orr.w	r9, r1, r9
 8007e14:	9906      	ldr	r1, [sp, #24]
 8007e16:	ea59 0101 	orrs.w	r1, r9, r1
 8007e1a:	d120      	bne.n	8007e5e <_dtoa_r+0xad6>
 8007e1c:	2a00      	cmp	r2, #0
 8007e1e:	ddec      	ble.n	8007dfa <_dtoa_r+0xa72>
 8007e20:	4659      	mov	r1, fp
 8007e22:	2201      	movs	r2, #1
 8007e24:	4620      	mov	r0, r4
 8007e26:	9301      	str	r3, [sp, #4]
 8007e28:	f000 fac6 	bl	80083b8 <__lshift>
 8007e2c:	4631      	mov	r1, r6
 8007e2e:	4683      	mov	fp, r0
 8007e30:	f000 fb2e 	bl	8008490 <__mcmp>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	9b01      	ldr	r3, [sp, #4]
 8007e38:	dc02      	bgt.n	8007e40 <_dtoa_r+0xab8>
 8007e3a:	d1de      	bne.n	8007dfa <_dtoa_r+0xa72>
 8007e3c:	07da      	lsls	r2, r3, #31
 8007e3e:	d5dc      	bpl.n	8007dfa <_dtoa_r+0xa72>
 8007e40:	2b39      	cmp	r3, #57	; 0x39
 8007e42:	d1d8      	bne.n	8007df6 <_dtoa_r+0xa6e>
 8007e44:	9a02      	ldr	r2, [sp, #8]
 8007e46:	2339      	movs	r3, #57	; 0x39
 8007e48:	7013      	strb	r3, [r2, #0]
 8007e4a:	462b      	mov	r3, r5
 8007e4c:	461d      	mov	r5, r3
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e54:	2a39      	cmp	r2, #57	; 0x39
 8007e56:	d050      	beq.n	8007efa <_dtoa_r+0xb72>
 8007e58:	3201      	adds	r2, #1
 8007e5a:	701a      	strb	r2, [r3, #0]
 8007e5c:	e745      	b.n	8007cea <_dtoa_r+0x962>
 8007e5e:	2a00      	cmp	r2, #0
 8007e60:	dd03      	ble.n	8007e6a <_dtoa_r+0xae2>
 8007e62:	2b39      	cmp	r3, #57	; 0x39
 8007e64:	d0ee      	beq.n	8007e44 <_dtoa_r+0xabc>
 8007e66:	3301      	adds	r3, #1
 8007e68:	e7c7      	b.n	8007dfa <_dtoa_r+0xa72>
 8007e6a:	9a01      	ldr	r2, [sp, #4]
 8007e6c:	9907      	ldr	r1, [sp, #28]
 8007e6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007e72:	428a      	cmp	r2, r1
 8007e74:	d02a      	beq.n	8007ecc <_dtoa_r+0xb44>
 8007e76:	4659      	mov	r1, fp
 8007e78:	2300      	movs	r3, #0
 8007e7a:	220a      	movs	r2, #10
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f000 f8eb 	bl	8008058 <__multadd>
 8007e82:	45b8      	cmp	r8, r7
 8007e84:	4683      	mov	fp, r0
 8007e86:	f04f 0300 	mov.w	r3, #0
 8007e8a:	f04f 020a 	mov.w	r2, #10
 8007e8e:	4641      	mov	r1, r8
 8007e90:	4620      	mov	r0, r4
 8007e92:	d107      	bne.n	8007ea4 <_dtoa_r+0xb1c>
 8007e94:	f000 f8e0 	bl	8008058 <__multadd>
 8007e98:	4680      	mov	r8, r0
 8007e9a:	4607      	mov	r7, r0
 8007e9c:	9b01      	ldr	r3, [sp, #4]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	9301      	str	r3, [sp, #4]
 8007ea2:	e775      	b.n	8007d90 <_dtoa_r+0xa08>
 8007ea4:	f000 f8d8 	bl	8008058 <__multadd>
 8007ea8:	4639      	mov	r1, r7
 8007eaa:	4680      	mov	r8, r0
 8007eac:	2300      	movs	r3, #0
 8007eae:	220a      	movs	r2, #10
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f000 f8d1 	bl	8008058 <__multadd>
 8007eb6:	4607      	mov	r7, r0
 8007eb8:	e7f0      	b.n	8007e9c <_dtoa_r+0xb14>
 8007eba:	f1b9 0f00 	cmp.w	r9, #0
 8007ebe:	9a00      	ldr	r2, [sp, #0]
 8007ec0:	bfcc      	ite	gt
 8007ec2:	464d      	movgt	r5, r9
 8007ec4:	2501      	movle	r5, #1
 8007ec6:	4415      	add	r5, r2
 8007ec8:	f04f 0800 	mov.w	r8, #0
 8007ecc:	4659      	mov	r1, fp
 8007ece:	2201      	movs	r2, #1
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	9301      	str	r3, [sp, #4]
 8007ed4:	f000 fa70 	bl	80083b8 <__lshift>
 8007ed8:	4631      	mov	r1, r6
 8007eda:	4683      	mov	fp, r0
 8007edc:	f000 fad8 	bl	8008490 <__mcmp>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	dcb2      	bgt.n	8007e4a <_dtoa_r+0xac2>
 8007ee4:	d102      	bne.n	8007eec <_dtoa_r+0xb64>
 8007ee6:	9b01      	ldr	r3, [sp, #4]
 8007ee8:	07db      	lsls	r3, r3, #31
 8007eea:	d4ae      	bmi.n	8007e4a <_dtoa_r+0xac2>
 8007eec:	462b      	mov	r3, r5
 8007eee:	461d      	mov	r5, r3
 8007ef0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ef4:	2a30      	cmp	r2, #48	; 0x30
 8007ef6:	d0fa      	beq.n	8007eee <_dtoa_r+0xb66>
 8007ef8:	e6f7      	b.n	8007cea <_dtoa_r+0x962>
 8007efa:	9a00      	ldr	r2, [sp, #0]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d1a5      	bne.n	8007e4c <_dtoa_r+0xac4>
 8007f00:	f10a 0a01 	add.w	sl, sl, #1
 8007f04:	2331      	movs	r3, #49	; 0x31
 8007f06:	e779      	b.n	8007dfc <_dtoa_r+0xa74>
 8007f08:	4b13      	ldr	r3, [pc, #76]	; (8007f58 <_dtoa_r+0xbd0>)
 8007f0a:	f7ff baaf 	b.w	800746c <_dtoa_r+0xe4>
 8007f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f47f aa86 	bne.w	8007422 <_dtoa_r+0x9a>
 8007f16:	4b11      	ldr	r3, [pc, #68]	; (8007f5c <_dtoa_r+0xbd4>)
 8007f18:	f7ff baa8 	b.w	800746c <_dtoa_r+0xe4>
 8007f1c:	f1b9 0f00 	cmp.w	r9, #0
 8007f20:	dc03      	bgt.n	8007f2a <_dtoa_r+0xba2>
 8007f22:	9b05      	ldr	r3, [sp, #20]
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	f73f aec9 	bgt.w	8007cbc <_dtoa_r+0x934>
 8007f2a:	9d00      	ldr	r5, [sp, #0]
 8007f2c:	4631      	mov	r1, r6
 8007f2e:	4658      	mov	r0, fp
 8007f30:	f7ff f99e 	bl	8007270 <quorem>
 8007f34:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007f38:	f805 3b01 	strb.w	r3, [r5], #1
 8007f3c:	9a00      	ldr	r2, [sp, #0]
 8007f3e:	1aaa      	subs	r2, r5, r2
 8007f40:	4591      	cmp	r9, r2
 8007f42:	ddba      	ble.n	8007eba <_dtoa_r+0xb32>
 8007f44:	4659      	mov	r1, fp
 8007f46:	2300      	movs	r3, #0
 8007f48:	220a      	movs	r2, #10
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f000 f884 	bl	8008058 <__multadd>
 8007f50:	4683      	mov	fp, r0
 8007f52:	e7eb      	b.n	8007f2c <_dtoa_r+0xba4>
 8007f54:	0800a2b3 	.word	0x0800a2b3
 8007f58:	0800a20c 	.word	0x0800a20c
 8007f5c:	0800a230 	.word	0x0800a230

08007f60 <_localeconv_r>:
 8007f60:	4800      	ldr	r0, [pc, #0]	; (8007f64 <_localeconv_r+0x4>)
 8007f62:	4770      	bx	lr
 8007f64:	20002170 	.word	0x20002170

08007f68 <malloc>:
 8007f68:	4b02      	ldr	r3, [pc, #8]	; (8007f74 <malloc+0xc>)
 8007f6a:	4601      	mov	r1, r0
 8007f6c:	6818      	ldr	r0, [r3, #0]
 8007f6e:	f000 bbef 	b.w	8008750 <_malloc_r>
 8007f72:	bf00      	nop
 8007f74:	2000201c 	.word	0x2000201c

08007f78 <memcpy>:
 8007f78:	440a      	add	r2, r1
 8007f7a:	4291      	cmp	r1, r2
 8007f7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007f80:	d100      	bne.n	8007f84 <memcpy+0xc>
 8007f82:	4770      	bx	lr
 8007f84:	b510      	push	{r4, lr}
 8007f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f8e:	4291      	cmp	r1, r2
 8007f90:	d1f9      	bne.n	8007f86 <memcpy+0xe>
 8007f92:	bd10      	pop	{r4, pc}

08007f94 <_Balloc>:
 8007f94:	b570      	push	{r4, r5, r6, lr}
 8007f96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f98:	4604      	mov	r4, r0
 8007f9a:	460d      	mov	r5, r1
 8007f9c:	b976      	cbnz	r6, 8007fbc <_Balloc+0x28>
 8007f9e:	2010      	movs	r0, #16
 8007fa0:	f7ff ffe2 	bl	8007f68 <malloc>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	6260      	str	r0, [r4, #36]	; 0x24
 8007fa8:	b920      	cbnz	r0, 8007fb4 <_Balloc+0x20>
 8007faa:	4b18      	ldr	r3, [pc, #96]	; (800800c <_Balloc+0x78>)
 8007fac:	4818      	ldr	r0, [pc, #96]	; (8008010 <_Balloc+0x7c>)
 8007fae:	2166      	movs	r1, #102	; 0x66
 8007fb0:	f000 fd94 	bl	8008adc <__assert_func>
 8007fb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fb8:	6006      	str	r6, [r0, #0]
 8007fba:	60c6      	str	r6, [r0, #12]
 8007fbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007fbe:	68f3      	ldr	r3, [r6, #12]
 8007fc0:	b183      	cbz	r3, 8007fe4 <_Balloc+0x50>
 8007fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fca:	b9b8      	cbnz	r0, 8007ffc <_Balloc+0x68>
 8007fcc:	2101      	movs	r1, #1
 8007fce:	fa01 f605 	lsl.w	r6, r1, r5
 8007fd2:	1d72      	adds	r2, r6, #5
 8007fd4:	0092      	lsls	r2, r2, #2
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f000 fb5a 	bl	8008690 <_calloc_r>
 8007fdc:	b160      	cbz	r0, 8007ff8 <_Balloc+0x64>
 8007fde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fe2:	e00e      	b.n	8008002 <_Balloc+0x6e>
 8007fe4:	2221      	movs	r2, #33	; 0x21
 8007fe6:	2104      	movs	r1, #4
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f000 fb51 	bl	8008690 <_calloc_r>
 8007fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ff0:	60f0      	str	r0, [r6, #12]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1e4      	bne.n	8007fc2 <_Balloc+0x2e>
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	bd70      	pop	{r4, r5, r6, pc}
 8007ffc:	6802      	ldr	r2, [r0, #0]
 8007ffe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008002:	2300      	movs	r3, #0
 8008004:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008008:	e7f7      	b.n	8007ffa <_Balloc+0x66>
 800800a:	bf00      	nop
 800800c:	0800a23d 	.word	0x0800a23d
 8008010:	0800a2c4 	.word	0x0800a2c4

08008014 <_Bfree>:
 8008014:	b570      	push	{r4, r5, r6, lr}
 8008016:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008018:	4605      	mov	r5, r0
 800801a:	460c      	mov	r4, r1
 800801c:	b976      	cbnz	r6, 800803c <_Bfree+0x28>
 800801e:	2010      	movs	r0, #16
 8008020:	f7ff ffa2 	bl	8007f68 <malloc>
 8008024:	4602      	mov	r2, r0
 8008026:	6268      	str	r0, [r5, #36]	; 0x24
 8008028:	b920      	cbnz	r0, 8008034 <_Bfree+0x20>
 800802a:	4b09      	ldr	r3, [pc, #36]	; (8008050 <_Bfree+0x3c>)
 800802c:	4809      	ldr	r0, [pc, #36]	; (8008054 <_Bfree+0x40>)
 800802e:	218a      	movs	r1, #138	; 0x8a
 8008030:	f000 fd54 	bl	8008adc <__assert_func>
 8008034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008038:	6006      	str	r6, [r0, #0]
 800803a:	60c6      	str	r6, [r0, #12]
 800803c:	b13c      	cbz	r4, 800804e <_Bfree+0x3a>
 800803e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008040:	6862      	ldr	r2, [r4, #4]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008048:	6021      	str	r1, [r4, #0]
 800804a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800804e:	bd70      	pop	{r4, r5, r6, pc}
 8008050:	0800a23d 	.word	0x0800a23d
 8008054:	0800a2c4 	.word	0x0800a2c4

08008058 <__multadd>:
 8008058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800805c:	690e      	ldr	r6, [r1, #16]
 800805e:	4607      	mov	r7, r0
 8008060:	4698      	mov	r8, r3
 8008062:	460c      	mov	r4, r1
 8008064:	f101 0014 	add.w	r0, r1, #20
 8008068:	2300      	movs	r3, #0
 800806a:	6805      	ldr	r5, [r0, #0]
 800806c:	b2a9      	uxth	r1, r5
 800806e:	fb02 8101 	mla	r1, r2, r1, r8
 8008072:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008076:	0c2d      	lsrs	r5, r5, #16
 8008078:	fb02 c505 	mla	r5, r2, r5, ip
 800807c:	b289      	uxth	r1, r1
 800807e:	3301      	adds	r3, #1
 8008080:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008084:	429e      	cmp	r6, r3
 8008086:	f840 1b04 	str.w	r1, [r0], #4
 800808a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800808e:	dcec      	bgt.n	800806a <__multadd+0x12>
 8008090:	f1b8 0f00 	cmp.w	r8, #0
 8008094:	d022      	beq.n	80080dc <__multadd+0x84>
 8008096:	68a3      	ldr	r3, [r4, #8]
 8008098:	42b3      	cmp	r3, r6
 800809a:	dc19      	bgt.n	80080d0 <__multadd+0x78>
 800809c:	6861      	ldr	r1, [r4, #4]
 800809e:	4638      	mov	r0, r7
 80080a0:	3101      	adds	r1, #1
 80080a2:	f7ff ff77 	bl	8007f94 <_Balloc>
 80080a6:	4605      	mov	r5, r0
 80080a8:	b928      	cbnz	r0, 80080b6 <__multadd+0x5e>
 80080aa:	4602      	mov	r2, r0
 80080ac:	4b0d      	ldr	r3, [pc, #52]	; (80080e4 <__multadd+0x8c>)
 80080ae:	480e      	ldr	r0, [pc, #56]	; (80080e8 <__multadd+0x90>)
 80080b0:	21b5      	movs	r1, #181	; 0xb5
 80080b2:	f000 fd13 	bl	8008adc <__assert_func>
 80080b6:	6922      	ldr	r2, [r4, #16]
 80080b8:	3202      	adds	r2, #2
 80080ba:	f104 010c 	add.w	r1, r4, #12
 80080be:	0092      	lsls	r2, r2, #2
 80080c0:	300c      	adds	r0, #12
 80080c2:	f7ff ff59 	bl	8007f78 <memcpy>
 80080c6:	4621      	mov	r1, r4
 80080c8:	4638      	mov	r0, r7
 80080ca:	f7ff ffa3 	bl	8008014 <_Bfree>
 80080ce:	462c      	mov	r4, r5
 80080d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80080d4:	3601      	adds	r6, #1
 80080d6:	f8c3 8014 	str.w	r8, [r3, #20]
 80080da:	6126      	str	r6, [r4, #16]
 80080dc:	4620      	mov	r0, r4
 80080de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080e2:	bf00      	nop
 80080e4:	0800a2b3 	.word	0x0800a2b3
 80080e8:	0800a2c4 	.word	0x0800a2c4

080080ec <__hi0bits>:
 80080ec:	0c03      	lsrs	r3, r0, #16
 80080ee:	041b      	lsls	r3, r3, #16
 80080f0:	b9d3      	cbnz	r3, 8008128 <__hi0bits+0x3c>
 80080f2:	0400      	lsls	r0, r0, #16
 80080f4:	2310      	movs	r3, #16
 80080f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80080fa:	bf04      	itt	eq
 80080fc:	0200      	lsleq	r0, r0, #8
 80080fe:	3308      	addeq	r3, #8
 8008100:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008104:	bf04      	itt	eq
 8008106:	0100      	lsleq	r0, r0, #4
 8008108:	3304      	addeq	r3, #4
 800810a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800810e:	bf04      	itt	eq
 8008110:	0080      	lsleq	r0, r0, #2
 8008112:	3302      	addeq	r3, #2
 8008114:	2800      	cmp	r0, #0
 8008116:	db05      	blt.n	8008124 <__hi0bits+0x38>
 8008118:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800811c:	f103 0301 	add.w	r3, r3, #1
 8008120:	bf08      	it	eq
 8008122:	2320      	moveq	r3, #32
 8008124:	4618      	mov	r0, r3
 8008126:	4770      	bx	lr
 8008128:	2300      	movs	r3, #0
 800812a:	e7e4      	b.n	80080f6 <__hi0bits+0xa>

0800812c <__lo0bits>:
 800812c:	6803      	ldr	r3, [r0, #0]
 800812e:	f013 0207 	ands.w	r2, r3, #7
 8008132:	4601      	mov	r1, r0
 8008134:	d00b      	beq.n	800814e <__lo0bits+0x22>
 8008136:	07da      	lsls	r2, r3, #31
 8008138:	d424      	bmi.n	8008184 <__lo0bits+0x58>
 800813a:	0798      	lsls	r0, r3, #30
 800813c:	bf49      	itett	mi
 800813e:	085b      	lsrmi	r3, r3, #1
 8008140:	089b      	lsrpl	r3, r3, #2
 8008142:	2001      	movmi	r0, #1
 8008144:	600b      	strmi	r3, [r1, #0]
 8008146:	bf5c      	itt	pl
 8008148:	600b      	strpl	r3, [r1, #0]
 800814a:	2002      	movpl	r0, #2
 800814c:	4770      	bx	lr
 800814e:	b298      	uxth	r0, r3
 8008150:	b9b0      	cbnz	r0, 8008180 <__lo0bits+0x54>
 8008152:	0c1b      	lsrs	r3, r3, #16
 8008154:	2010      	movs	r0, #16
 8008156:	f013 0fff 	tst.w	r3, #255	; 0xff
 800815a:	bf04      	itt	eq
 800815c:	0a1b      	lsreq	r3, r3, #8
 800815e:	3008      	addeq	r0, #8
 8008160:	071a      	lsls	r2, r3, #28
 8008162:	bf04      	itt	eq
 8008164:	091b      	lsreq	r3, r3, #4
 8008166:	3004      	addeq	r0, #4
 8008168:	079a      	lsls	r2, r3, #30
 800816a:	bf04      	itt	eq
 800816c:	089b      	lsreq	r3, r3, #2
 800816e:	3002      	addeq	r0, #2
 8008170:	07da      	lsls	r2, r3, #31
 8008172:	d403      	bmi.n	800817c <__lo0bits+0x50>
 8008174:	085b      	lsrs	r3, r3, #1
 8008176:	f100 0001 	add.w	r0, r0, #1
 800817a:	d005      	beq.n	8008188 <__lo0bits+0x5c>
 800817c:	600b      	str	r3, [r1, #0]
 800817e:	4770      	bx	lr
 8008180:	4610      	mov	r0, r2
 8008182:	e7e8      	b.n	8008156 <__lo0bits+0x2a>
 8008184:	2000      	movs	r0, #0
 8008186:	4770      	bx	lr
 8008188:	2020      	movs	r0, #32
 800818a:	4770      	bx	lr

0800818c <__i2b>:
 800818c:	b510      	push	{r4, lr}
 800818e:	460c      	mov	r4, r1
 8008190:	2101      	movs	r1, #1
 8008192:	f7ff feff 	bl	8007f94 <_Balloc>
 8008196:	4602      	mov	r2, r0
 8008198:	b928      	cbnz	r0, 80081a6 <__i2b+0x1a>
 800819a:	4b05      	ldr	r3, [pc, #20]	; (80081b0 <__i2b+0x24>)
 800819c:	4805      	ldr	r0, [pc, #20]	; (80081b4 <__i2b+0x28>)
 800819e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80081a2:	f000 fc9b 	bl	8008adc <__assert_func>
 80081a6:	2301      	movs	r3, #1
 80081a8:	6144      	str	r4, [r0, #20]
 80081aa:	6103      	str	r3, [r0, #16]
 80081ac:	bd10      	pop	{r4, pc}
 80081ae:	bf00      	nop
 80081b0:	0800a2b3 	.word	0x0800a2b3
 80081b4:	0800a2c4 	.word	0x0800a2c4

080081b8 <__multiply>:
 80081b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	4614      	mov	r4, r2
 80081be:	690a      	ldr	r2, [r1, #16]
 80081c0:	6923      	ldr	r3, [r4, #16]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	bfb8      	it	lt
 80081c6:	460b      	movlt	r3, r1
 80081c8:	460d      	mov	r5, r1
 80081ca:	bfbc      	itt	lt
 80081cc:	4625      	movlt	r5, r4
 80081ce:	461c      	movlt	r4, r3
 80081d0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80081d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80081d8:	68ab      	ldr	r3, [r5, #8]
 80081da:	6869      	ldr	r1, [r5, #4]
 80081dc:	eb0a 0709 	add.w	r7, sl, r9
 80081e0:	42bb      	cmp	r3, r7
 80081e2:	b085      	sub	sp, #20
 80081e4:	bfb8      	it	lt
 80081e6:	3101      	addlt	r1, #1
 80081e8:	f7ff fed4 	bl	8007f94 <_Balloc>
 80081ec:	b930      	cbnz	r0, 80081fc <__multiply+0x44>
 80081ee:	4602      	mov	r2, r0
 80081f0:	4b42      	ldr	r3, [pc, #264]	; (80082fc <__multiply+0x144>)
 80081f2:	4843      	ldr	r0, [pc, #268]	; (8008300 <__multiply+0x148>)
 80081f4:	f240 115d 	movw	r1, #349	; 0x15d
 80081f8:	f000 fc70 	bl	8008adc <__assert_func>
 80081fc:	f100 0614 	add.w	r6, r0, #20
 8008200:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008204:	4633      	mov	r3, r6
 8008206:	2200      	movs	r2, #0
 8008208:	4543      	cmp	r3, r8
 800820a:	d31e      	bcc.n	800824a <__multiply+0x92>
 800820c:	f105 0c14 	add.w	ip, r5, #20
 8008210:	f104 0314 	add.w	r3, r4, #20
 8008214:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008218:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800821c:	9202      	str	r2, [sp, #8]
 800821e:	ebac 0205 	sub.w	r2, ip, r5
 8008222:	3a15      	subs	r2, #21
 8008224:	f022 0203 	bic.w	r2, r2, #3
 8008228:	3204      	adds	r2, #4
 800822a:	f105 0115 	add.w	r1, r5, #21
 800822e:	458c      	cmp	ip, r1
 8008230:	bf38      	it	cc
 8008232:	2204      	movcc	r2, #4
 8008234:	9201      	str	r2, [sp, #4]
 8008236:	9a02      	ldr	r2, [sp, #8]
 8008238:	9303      	str	r3, [sp, #12]
 800823a:	429a      	cmp	r2, r3
 800823c:	d808      	bhi.n	8008250 <__multiply+0x98>
 800823e:	2f00      	cmp	r7, #0
 8008240:	dc55      	bgt.n	80082ee <__multiply+0x136>
 8008242:	6107      	str	r7, [r0, #16]
 8008244:	b005      	add	sp, #20
 8008246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824a:	f843 2b04 	str.w	r2, [r3], #4
 800824e:	e7db      	b.n	8008208 <__multiply+0x50>
 8008250:	f8b3 a000 	ldrh.w	sl, [r3]
 8008254:	f1ba 0f00 	cmp.w	sl, #0
 8008258:	d020      	beq.n	800829c <__multiply+0xe4>
 800825a:	f105 0e14 	add.w	lr, r5, #20
 800825e:	46b1      	mov	r9, r6
 8008260:	2200      	movs	r2, #0
 8008262:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008266:	f8d9 b000 	ldr.w	fp, [r9]
 800826a:	b2a1      	uxth	r1, r4
 800826c:	fa1f fb8b 	uxth.w	fp, fp
 8008270:	fb0a b101 	mla	r1, sl, r1, fp
 8008274:	4411      	add	r1, r2
 8008276:	f8d9 2000 	ldr.w	r2, [r9]
 800827a:	0c24      	lsrs	r4, r4, #16
 800827c:	0c12      	lsrs	r2, r2, #16
 800827e:	fb0a 2404 	mla	r4, sl, r4, r2
 8008282:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008286:	b289      	uxth	r1, r1
 8008288:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800828c:	45f4      	cmp	ip, lr
 800828e:	f849 1b04 	str.w	r1, [r9], #4
 8008292:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008296:	d8e4      	bhi.n	8008262 <__multiply+0xaa>
 8008298:	9901      	ldr	r1, [sp, #4]
 800829a:	5072      	str	r2, [r6, r1]
 800829c:	9a03      	ldr	r2, [sp, #12]
 800829e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80082a2:	3304      	adds	r3, #4
 80082a4:	f1b9 0f00 	cmp.w	r9, #0
 80082a8:	d01f      	beq.n	80082ea <__multiply+0x132>
 80082aa:	6834      	ldr	r4, [r6, #0]
 80082ac:	f105 0114 	add.w	r1, r5, #20
 80082b0:	46b6      	mov	lr, r6
 80082b2:	f04f 0a00 	mov.w	sl, #0
 80082b6:	880a      	ldrh	r2, [r1, #0]
 80082b8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80082bc:	fb09 b202 	mla	r2, r9, r2, fp
 80082c0:	4492      	add	sl, r2
 80082c2:	b2a4      	uxth	r4, r4
 80082c4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80082c8:	f84e 4b04 	str.w	r4, [lr], #4
 80082cc:	f851 4b04 	ldr.w	r4, [r1], #4
 80082d0:	f8be 2000 	ldrh.w	r2, [lr]
 80082d4:	0c24      	lsrs	r4, r4, #16
 80082d6:	fb09 2404 	mla	r4, r9, r4, r2
 80082da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80082de:	458c      	cmp	ip, r1
 80082e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80082e4:	d8e7      	bhi.n	80082b6 <__multiply+0xfe>
 80082e6:	9a01      	ldr	r2, [sp, #4]
 80082e8:	50b4      	str	r4, [r6, r2]
 80082ea:	3604      	adds	r6, #4
 80082ec:	e7a3      	b.n	8008236 <__multiply+0x7e>
 80082ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1a5      	bne.n	8008242 <__multiply+0x8a>
 80082f6:	3f01      	subs	r7, #1
 80082f8:	e7a1      	b.n	800823e <__multiply+0x86>
 80082fa:	bf00      	nop
 80082fc:	0800a2b3 	.word	0x0800a2b3
 8008300:	0800a2c4 	.word	0x0800a2c4

08008304 <__pow5mult>:
 8008304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008308:	4615      	mov	r5, r2
 800830a:	f012 0203 	ands.w	r2, r2, #3
 800830e:	4606      	mov	r6, r0
 8008310:	460f      	mov	r7, r1
 8008312:	d007      	beq.n	8008324 <__pow5mult+0x20>
 8008314:	4c25      	ldr	r4, [pc, #148]	; (80083ac <__pow5mult+0xa8>)
 8008316:	3a01      	subs	r2, #1
 8008318:	2300      	movs	r3, #0
 800831a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800831e:	f7ff fe9b 	bl	8008058 <__multadd>
 8008322:	4607      	mov	r7, r0
 8008324:	10ad      	asrs	r5, r5, #2
 8008326:	d03d      	beq.n	80083a4 <__pow5mult+0xa0>
 8008328:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800832a:	b97c      	cbnz	r4, 800834c <__pow5mult+0x48>
 800832c:	2010      	movs	r0, #16
 800832e:	f7ff fe1b 	bl	8007f68 <malloc>
 8008332:	4602      	mov	r2, r0
 8008334:	6270      	str	r0, [r6, #36]	; 0x24
 8008336:	b928      	cbnz	r0, 8008344 <__pow5mult+0x40>
 8008338:	4b1d      	ldr	r3, [pc, #116]	; (80083b0 <__pow5mult+0xac>)
 800833a:	481e      	ldr	r0, [pc, #120]	; (80083b4 <__pow5mult+0xb0>)
 800833c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008340:	f000 fbcc 	bl	8008adc <__assert_func>
 8008344:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008348:	6004      	str	r4, [r0, #0]
 800834a:	60c4      	str	r4, [r0, #12]
 800834c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008350:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008354:	b94c      	cbnz	r4, 800836a <__pow5mult+0x66>
 8008356:	f240 2171 	movw	r1, #625	; 0x271
 800835a:	4630      	mov	r0, r6
 800835c:	f7ff ff16 	bl	800818c <__i2b>
 8008360:	2300      	movs	r3, #0
 8008362:	f8c8 0008 	str.w	r0, [r8, #8]
 8008366:	4604      	mov	r4, r0
 8008368:	6003      	str	r3, [r0, #0]
 800836a:	f04f 0900 	mov.w	r9, #0
 800836e:	07eb      	lsls	r3, r5, #31
 8008370:	d50a      	bpl.n	8008388 <__pow5mult+0x84>
 8008372:	4639      	mov	r1, r7
 8008374:	4622      	mov	r2, r4
 8008376:	4630      	mov	r0, r6
 8008378:	f7ff ff1e 	bl	80081b8 <__multiply>
 800837c:	4639      	mov	r1, r7
 800837e:	4680      	mov	r8, r0
 8008380:	4630      	mov	r0, r6
 8008382:	f7ff fe47 	bl	8008014 <_Bfree>
 8008386:	4647      	mov	r7, r8
 8008388:	106d      	asrs	r5, r5, #1
 800838a:	d00b      	beq.n	80083a4 <__pow5mult+0xa0>
 800838c:	6820      	ldr	r0, [r4, #0]
 800838e:	b938      	cbnz	r0, 80083a0 <__pow5mult+0x9c>
 8008390:	4622      	mov	r2, r4
 8008392:	4621      	mov	r1, r4
 8008394:	4630      	mov	r0, r6
 8008396:	f7ff ff0f 	bl	80081b8 <__multiply>
 800839a:	6020      	str	r0, [r4, #0]
 800839c:	f8c0 9000 	str.w	r9, [r0]
 80083a0:	4604      	mov	r4, r0
 80083a2:	e7e4      	b.n	800836e <__pow5mult+0x6a>
 80083a4:	4638      	mov	r0, r7
 80083a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083aa:	bf00      	nop
 80083ac:	0800a418 	.word	0x0800a418
 80083b0:	0800a23d 	.word	0x0800a23d
 80083b4:	0800a2c4 	.word	0x0800a2c4

080083b8 <__lshift>:
 80083b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083bc:	460c      	mov	r4, r1
 80083be:	6849      	ldr	r1, [r1, #4]
 80083c0:	6923      	ldr	r3, [r4, #16]
 80083c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083c6:	68a3      	ldr	r3, [r4, #8]
 80083c8:	4607      	mov	r7, r0
 80083ca:	4691      	mov	r9, r2
 80083cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083d0:	f108 0601 	add.w	r6, r8, #1
 80083d4:	42b3      	cmp	r3, r6
 80083d6:	db0b      	blt.n	80083f0 <__lshift+0x38>
 80083d8:	4638      	mov	r0, r7
 80083da:	f7ff fddb 	bl	8007f94 <_Balloc>
 80083de:	4605      	mov	r5, r0
 80083e0:	b948      	cbnz	r0, 80083f6 <__lshift+0x3e>
 80083e2:	4602      	mov	r2, r0
 80083e4:	4b28      	ldr	r3, [pc, #160]	; (8008488 <__lshift+0xd0>)
 80083e6:	4829      	ldr	r0, [pc, #164]	; (800848c <__lshift+0xd4>)
 80083e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80083ec:	f000 fb76 	bl	8008adc <__assert_func>
 80083f0:	3101      	adds	r1, #1
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	e7ee      	b.n	80083d4 <__lshift+0x1c>
 80083f6:	2300      	movs	r3, #0
 80083f8:	f100 0114 	add.w	r1, r0, #20
 80083fc:	f100 0210 	add.w	r2, r0, #16
 8008400:	4618      	mov	r0, r3
 8008402:	4553      	cmp	r3, sl
 8008404:	db33      	blt.n	800846e <__lshift+0xb6>
 8008406:	6920      	ldr	r0, [r4, #16]
 8008408:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800840c:	f104 0314 	add.w	r3, r4, #20
 8008410:	f019 091f 	ands.w	r9, r9, #31
 8008414:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008418:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800841c:	d02b      	beq.n	8008476 <__lshift+0xbe>
 800841e:	f1c9 0e20 	rsb	lr, r9, #32
 8008422:	468a      	mov	sl, r1
 8008424:	2200      	movs	r2, #0
 8008426:	6818      	ldr	r0, [r3, #0]
 8008428:	fa00 f009 	lsl.w	r0, r0, r9
 800842c:	4302      	orrs	r2, r0
 800842e:	f84a 2b04 	str.w	r2, [sl], #4
 8008432:	f853 2b04 	ldr.w	r2, [r3], #4
 8008436:	459c      	cmp	ip, r3
 8008438:	fa22 f20e 	lsr.w	r2, r2, lr
 800843c:	d8f3      	bhi.n	8008426 <__lshift+0x6e>
 800843e:	ebac 0304 	sub.w	r3, ip, r4
 8008442:	3b15      	subs	r3, #21
 8008444:	f023 0303 	bic.w	r3, r3, #3
 8008448:	3304      	adds	r3, #4
 800844a:	f104 0015 	add.w	r0, r4, #21
 800844e:	4584      	cmp	ip, r0
 8008450:	bf38      	it	cc
 8008452:	2304      	movcc	r3, #4
 8008454:	50ca      	str	r2, [r1, r3]
 8008456:	b10a      	cbz	r2, 800845c <__lshift+0xa4>
 8008458:	f108 0602 	add.w	r6, r8, #2
 800845c:	3e01      	subs	r6, #1
 800845e:	4638      	mov	r0, r7
 8008460:	612e      	str	r6, [r5, #16]
 8008462:	4621      	mov	r1, r4
 8008464:	f7ff fdd6 	bl	8008014 <_Bfree>
 8008468:	4628      	mov	r0, r5
 800846a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800846e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008472:	3301      	adds	r3, #1
 8008474:	e7c5      	b.n	8008402 <__lshift+0x4a>
 8008476:	3904      	subs	r1, #4
 8008478:	f853 2b04 	ldr.w	r2, [r3], #4
 800847c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008480:	459c      	cmp	ip, r3
 8008482:	d8f9      	bhi.n	8008478 <__lshift+0xc0>
 8008484:	e7ea      	b.n	800845c <__lshift+0xa4>
 8008486:	bf00      	nop
 8008488:	0800a2b3 	.word	0x0800a2b3
 800848c:	0800a2c4 	.word	0x0800a2c4

08008490 <__mcmp>:
 8008490:	b530      	push	{r4, r5, lr}
 8008492:	6902      	ldr	r2, [r0, #16]
 8008494:	690c      	ldr	r4, [r1, #16]
 8008496:	1b12      	subs	r2, r2, r4
 8008498:	d10e      	bne.n	80084b8 <__mcmp+0x28>
 800849a:	f100 0314 	add.w	r3, r0, #20
 800849e:	3114      	adds	r1, #20
 80084a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80084a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80084a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80084ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80084b0:	42a5      	cmp	r5, r4
 80084b2:	d003      	beq.n	80084bc <__mcmp+0x2c>
 80084b4:	d305      	bcc.n	80084c2 <__mcmp+0x32>
 80084b6:	2201      	movs	r2, #1
 80084b8:	4610      	mov	r0, r2
 80084ba:	bd30      	pop	{r4, r5, pc}
 80084bc:	4283      	cmp	r3, r0
 80084be:	d3f3      	bcc.n	80084a8 <__mcmp+0x18>
 80084c0:	e7fa      	b.n	80084b8 <__mcmp+0x28>
 80084c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084c6:	e7f7      	b.n	80084b8 <__mcmp+0x28>

080084c8 <__mdiff>:
 80084c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	460c      	mov	r4, r1
 80084ce:	4606      	mov	r6, r0
 80084d0:	4611      	mov	r1, r2
 80084d2:	4620      	mov	r0, r4
 80084d4:	4617      	mov	r7, r2
 80084d6:	f7ff ffdb 	bl	8008490 <__mcmp>
 80084da:	1e05      	subs	r5, r0, #0
 80084dc:	d110      	bne.n	8008500 <__mdiff+0x38>
 80084de:	4629      	mov	r1, r5
 80084e0:	4630      	mov	r0, r6
 80084e2:	f7ff fd57 	bl	8007f94 <_Balloc>
 80084e6:	b930      	cbnz	r0, 80084f6 <__mdiff+0x2e>
 80084e8:	4b39      	ldr	r3, [pc, #228]	; (80085d0 <__mdiff+0x108>)
 80084ea:	4602      	mov	r2, r0
 80084ec:	f240 2132 	movw	r1, #562	; 0x232
 80084f0:	4838      	ldr	r0, [pc, #224]	; (80085d4 <__mdiff+0x10c>)
 80084f2:	f000 faf3 	bl	8008adc <__assert_func>
 80084f6:	2301      	movs	r3, #1
 80084f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008500:	bfa4      	itt	ge
 8008502:	463b      	movge	r3, r7
 8008504:	4627      	movge	r7, r4
 8008506:	4630      	mov	r0, r6
 8008508:	6879      	ldr	r1, [r7, #4]
 800850a:	bfa6      	itte	ge
 800850c:	461c      	movge	r4, r3
 800850e:	2500      	movge	r5, #0
 8008510:	2501      	movlt	r5, #1
 8008512:	f7ff fd3f 	bl	8007f94 <_Balloc>
 8008516:	b920      	cbnz	r0, 8008522 <__mdiff+0x5a>
 8008518:	4b2d      	ldr	r3, [pc, #180]	; (80085d0 <__mdiff+0x108>)
 800851a:	4602      	mov	r2, r0
 800851c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008520:	e7e6      	b.n	80084f0 <__mdiff+0x28>
 8008522:	693e      	ldr	r6, [r7, #16]
 8008524:	60c5      	str	r5, [r0, #12]
 8008526:	6925      	ldr	r5, [r4, #16]
 8008528:	f107 0114 	add.w	r1, r7, #20
 800852c:	f104 0914 	add.w	r9, r4, #20
 8008530:	f100 0e14 	add.w	lr, r0, #20
 8008534:	f107 0210 	add.w	r2, r7, #16
 8008538:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800853c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008540:	46f2      	mov	sl, lr
 8008542:	2700      	movs	r7, #0
 8008544:	f859 3b04 	ldr.w	r3, [r9], #4
 8008548:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800854c:	fa1f f883 	uxth.w	r8, r3
 8008550:	fa17 f78b 	uxtah	r7, r7, fp
 8008554:	0c1b      	lsrs	r3, r3, #16
 8008556:	eba7 0808 	sub.w	r8, r7, r8
 800855a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800855e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008562:	fa1f f888 	uxth.w	r8, r8
 8008566:	141f      	asrs	r7, r3, #16
 8008568:	454d      	cmp	r5, r9
 800856a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800856e:	f84a 3b04 	str.w	r3, [sl], #4
 8008572:	d8e7      	bhi.n	8008544 <__mdiff+0x7c>
 8008574:	1b2b      	subs	r3, r5, r4
 8008576:	3b15      	subs	r3, #21
 8008578:	f023 0303 	bic.w	r3, r3, #3
 800857c:	3304      	adds	r3, #4
 800857e:	3415      	adds	r4, #21
 8008580:	42a5      	cmp	r5, r4
 8008582:	bf38      	it	cc
 8008584:	2304      	movcc	r3, #4
 8008586:	4419      	add	r1, r3
 8008588:	4473      	add	r3, lr
 800858a:	469e      	mov	lr, r3
 800858c:	460d      	mov	r5, r1
 800858e:	4565      	cmp	r5, ip
 8008590:	d30e      	bcc.n	80085b0 <__mdiff+0xe8>
 8008592:	f10c 0203 	add.w	r2, ip, #3
 8008596:	1a52      	subs	r2, r2, r1
 8008598:	f022 0203 	bic.w	r2, r2, #3
 800859c:	3903      	subs	r1, #3
 800859e:	458c      	cmp	ip, r1
 80085a0:	bf38      	it	cc
 80085a2:	2200      	movcc	r2, #0
 80085a4:	441a      	add	r2, r3
 80085a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80085aa:	b17b      	cbz	r3, 80085cc <__mdiff+0x104>
 80085ac:	6106      	str	r6, [r0, #16]
 80085ae:	e7a5      	b.n	80084fc <__mdiff+0x34>
 80085b0:	f855 8b04 	ldr.w	r8, [r5], #4
 80085b4:	fa17 f488 	uxtah	r4, r7, r8
 80085b8:	1422      	asrs	r2, r4, #16
 80085ba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80085be:	b2a4      	uxth	r4, r4
 80085c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80085c4:	f84e 4b04 	str.w	r4, [lr], #4
 80085c8:	1417      	asrs	r7, r2, #16
 80085ca:	e7e0      	b.n	800858e <__mdiff+0xc6>
 80085cc:	3e01      	subs	r6, #1
 80085ce:	e7ea      	b.n	80085a6 <__mdiff+0xde>
 80085d0:	0800a2b3 	.word	0x0800a2b3
 80085d4:	0800a2c4 	.word	0x0800a2c4

080085d8 <__d2b>:
 80085d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085dc:	4689      	mov	r9, r1
 80085de:	2101      	movs	r1, #1
 80085e0:	ec57 6b10 	vmov	r6, r7, d0
 80085e4:	4690      	mov	r8, r2
 80085e6:	f7ff fcd5 	bl	8007f94 <_Balloc>
 80085ea:	4604      	mov	r4, r0
 80085ec:	b930      	cbnz	r0, 80085fc <__d2b+0x24>
 80085ee:	4602      	mov	r2, r0
 80085f0:	4b25      	ldr	r3, [pc, #148]	; (8008688 <__d2b+0xb0>)
 80085f2:	4826      	ldr	r0, [pc, #152]	; (800868c <__d2b+0xb4>)
 80085f4:	f240 310a 	movw	r1, #778	; 0x30a
 80085f8:	f000 fa70 	bl	8008adc <__assert_func>
 80085fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008600:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008604:	bb35      	cbnz	r5, 8008654 <__d2b+0x7c>
 8008606:	2e00      	cmp	r6, #0
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	d028      	beq.n	800865e <__d2b+0x86>
 800860c:	4668      	mov	r0, sp
 800860e:	9600      	str	r6, [sp, #0]
 8008610:	f7ff fd8c 	bl	800812c <__lo0bits>
 8008614:	9900      	ldr	r1, [sp, #0]
 8008616:	b300      	cbz	r0, 800865a <__d2b+0x82>
 8008618:	9a01      	ldr	r2, [sp, #4]
 800861a:	f1c0 0320 	rsb	r3, r0, #32
 800861e:	fa02 f303 	lsl.w	r3, r2, r3
 8008622:	430b      	orrs	r3, r1
 8008624:	40c2      	lsrs	r2, r0
 8008626:	6163      	str	r3, [r4, #20]
 8008628:	9201      	str	r2, [sp, #4]
 800862a:	9b01      	ldr	r3, [sp, #4]
 800862c:	61a3      	str	r3, [r4, #24]
 800862e:	2b00      	cmp	r3, #0
 8008630:	bf14      	ite	ne
 8008632:	2202      	movne	r2, #2
 8008634:	2201      	moveq	r2, #1
 8008636:	6122      	str	r2, [r4, #16]
 8008638:	b1d5      	cbz	r5, 8008670 <__d2b+0x98>
 800863a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800863e:	4405      	add	r5, r0
 8008640:	f8c9 5000 	str.w	r5, [r9]
 8008644:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008648:	f8c8 0000 	str.w	r0, [r8]
 800864c:	4620      	mov	r0, r4
 800864e:	b003      	add	sp, #12
 8008650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008658:	e7d5      	b.n	8008606 <__d2b+0x2e>
 800865a:	6161      	str	r1, [r4, #20]
 800865c:	e7e5      	b.n	800862a <__d2b+0x52>
 800865e:	a801      	add	r0, sp, #4
 8008660:	f7ff fd64 	bl	800812c <__lo0bits>
 8008664:	9b01      	ldr	r3, [sp, #4]
 8008666:	6163      	str	r3, [r4, #20]
 8008668:	2201      	movs	r2, #1
 800866a:	6122      	str	r2, [r4, #16]
 800866c:	3020      	adds	r0, #32
 800866e:	e7e3      	b.n	8008638 <__d2b+0x60>
 8008670:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008674:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008678:	f8c9 0000 	str.w	r0, [r9]
 800867c:	6918      	ldr	r0, [r3, #16]
 800867e:	f7ff fd35 	bl	80080ec <__hi0bits>
 8008682:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008686:	e7df      	b.n	8008648 <__d2b+0x70>
 8008688:	0800a2b3 	.word	0x0800a2b3
 800868c:	0800a2c4 	.word	0x0800a2c4

08008690 <_calloc_r>:
 8008690:	b513      	push	{r0, r1, r4, lr}
 8008692:	434a      	muls	r2, r1
 8008694:	4611      	mov	r1, r2
 8008696:	9201      	str	r2, [sp, #4]
 8008698:	f000 f85a 	bl	8008750 <_malloc_r>
 800869c:	4604      	mov	r4, r0
 800869e:	b118      	cbz	r0, 80086a8 <_calloc_r+0x18>
 80086a0:	9a01      	ldr	r2, [sp, #4]
 80086a2:	2100      	movs	r1, #0
 80086a4:	f7fe f952 	bl	800694c <memset>
 80086a8:	4620      	mov	r0, r4
 80086aa:	b002      	add	sp, #8
 80086ac:	bd10      	pop	{r4, pc}
	...

080086b0 <_free_r>:
 80086b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086b2:	2900      	cmp	r1, #0
 80086b4:	d048      	beq.n	8008748 <_free_r+0x98>
 80086b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086ba:	9001      	str	r0, [sp, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f1a1 0404 	sub.w	r4, r1, #4
 80086c2:	bfb8      	it	lt
 80086c4:	18e4      	addlt	r4, r4, r3
 80086c6:	f000 fa65 	bl	8008b94 <__malloc_lock>
 80086ca:	4a20      	ldr	r2, [pc, #128]	; (800874c <_free_r+0x9c>)
 80086cc:	9801      	ldr	r0, [sp, #4]
 80086ce:	6813      	ldr	r3, [r2, #0]
 80086d0:	4615      	mov	r5, r2
 80086d2:	b933      	cbnz	r3, 80086e2 <_free_r+0x32>
 80086d4:	6063      	str	r3, [r4, #4]
 80086d6:	6014      	str	r4, [r2, #0]
 80086d8:	b003      	add	sp, #12
 80086da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086de:	f000 ba5f 	b.w	8008ba0 <__malloc_unlock>
 80086e2:	42a3      	cmp	r3, r4
 80086e4:	d90b      	bls.n	80086fe <_free_r+0x4e>
 80086e6:	6821      	ldr	r1, [r4, #0]
 80086e8:	1862      	adds	r2, r4, r1
 80086ea:	4293      	cmp	r3, r2
 80086ec:	bf04      	itt	eq
 80086ee:	681a      	ldreq	r2, [r3, #0]
 80086f0:	685b      	ldreq	r3, [r3, #4]
 80086f2:	6063      	str	r3, [r4, #4]
 80086f4:	bf04      	itt	eq
 80086f6:	1852      	addeq	r2, r2, r1
 80086f8:	6022      	streq	r2, [r4, #0]
 80086fa:	602c      	str	r4, [r5, #0]
 80086fc:	e7ec      	b.n	80086d8 <_free_r+0x28>
 80086fe:	461a      	mov	r2, r3
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	b10b      	cbz	r3, 8008708 <_free_r+0x58>
 8008704:	42a3      	cmp	r3, r4
 8008706:	d9fa      	bls.n	80086fe <_free_r+0x4e>
 8008708:	6811      	ldr	r1, [r2, #0]
 800870a:	1855      	adds	r5, r2, r1
 800870c:	42a5      	cmp	r5, r4
 800870e:	d10b      	bne.n	8008728 <_free_r+0x78>
 8008710:	6824      	ldr	r4, [r4, #0]
 8008712:	4421      	add	r1, r4
 8008714:	1854      	adds	r4, r2, r1
 8008716:	42a3      	cmp	r3, r4
 8008718:	6011      	str	r1, [r2, #0]
 800871a:	d1dd      	bne.n	80086d8 <_free_r+0x28>
 800871c:	681c      	ldr	r4, [r3, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	6053      	str	r3, [r2, #4]
 8008722:	4421      	add	r1, r4
 8008724:	6011      	str	r1, [r2, #0]
 8008726:	e7d7      	b.n	80086d8 <_free_r+0x28>
 8008728:	d902      	bls.n	8008730 <_free_r+0x80>
 800872a:	230c      	movs	r3, #12
 800872c:	6003      	str	r3, [r0, #0]
 800872e:	e7d3      	b.n	80086d8 <_free_r+0x28>
 8008730:	6825      	ldr	r5, [r4, #0]
 8008732:	1961      	adds	r1, r4, r5
 8008734:	428b      	cmp	r3, r1
 8008736:	bf04      	itt	eq
 8008738:	6819      	ldreq	r1, [r3, #0]
 800873a:	685b      	ldreq	r3, [r3, #4]
 800873c:	6063      	str	r3, [r4, #4]
 800873e:	bf04      	itt	eq
 8008740:	1949      	addeq	r1, r1, r5
 8008742:	6021      	streq	r1, [r4, #0]
 8008744:	6054      	str	r4, [r2, #4]
 8008746:	e7c7      	b.n	80086d8 <_free_r+0x28>
 8008748:	b003      	add	sp, #12
 800874a:	bd30      	pop	{r4, r5, pc}
 800874c:	20002224 	.word	0x20002224

08008750 <_malloc_r>:
 8008750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008752:	1ccd      	adds	r5, r1, #3
 8008754:	f025 0503 	bic.w	r5, r5, #3
 8008758:	3508      	adds	r5, #8
 800875a:	2d0c      	cmp	r5, #12
 800875c:	bf38      	it	cc
 800875e:	250c      	movcc	r5, #12
 8008760:	2d00      	cmp	r5, #0
 8008762:	4606      	mov	r6, r0
 8008764:	db01      	blt.n	800876a <_malloc_r+0x1a>
 8008766:	42a9      	cmp	r1, r5
 8008768:	d903      	bls.n	8008772 <_malloc_r+0x22>
 800876a:	230c      	movs	r3, #12
 800876c:	6033      	str	r3, [r6, #0]
 800876e:	2000      	movs	r0, #0
 8008770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008772:	f000 fa0f 	bl	8008b94 <__malloc_lock>
 8008776:	4921      	ldr	r1, [pc, #132]	; (80087fc <_malloc_r+0xac>)
 8008778:	680a      	ldr	r2, [r1, #0]
 800877a:	4614      	mov	r4, r2
 800877c:	b99c      	cbnz	r4, 80087a6 <_malloc_r+0x56>
 800877e:	4f20      	ldr	r7, [pc, #128]	; (8008800 <_malloc_r+0xb0>)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	b923      	cbnz	r3, 800878e <_malloc_r+0x3e>
 8008784:	4621      	mov	r1, r4
 8008786:	4630      	mov	r0, r6
 8008788:	f000 f998 	bl	8008abc <_sbrk_r>
 800878c:	6038      	str	r0, [r7, #0]
 800878e:	4629      	mov	r1, r5
 8008790:	4630      	mov	r0, r6
 8008792:	f000 f993 	bl	8008abc <_sbrk_r>
 8008796:	1c43      	adds	r3, r0, #1
 8008798:	d123      	bne.n	80087e2 <_malloc_r+0x92>
 800879a:	230c      	movs	r3, #12
 800879c:	6033      	str	r3, [r6, #0]
 800879e:	4630      	mov	r0, r6
 80087a0:	f000 f9fe 	bl	8008ba0 <__malloc_unlock>
 80087a4:	e7e3      	b.n	800876e <_malloc_r+0x1e>
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	1b5b      	subs	r3, r3, r5
 80087aa:	d417      	bmi.n	80087dc <_malloc_r+0x8c>
 80087ac:	2b0b      	cmp	r3, #11
 80087ae:	d903      	bls.n	80087b8 <_malloc_r+0x68>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	441c      	add	r4, r3
 80087b4:	6025      	str	r5, [r4, #0]
 80087b6:	e004      	b.n	80087c2 <_malloc_r+0x72>
 80087b8:	6863      	ldr	r3, [r4, #4]
 80087ba:	42a2      	cmp	r2, r4
 80087bc:	bf0c      	ite	eq
 80087be:	600b      	streq	r3, [r1, #0]
 80087c0:	6053      	strne	r3, [r2, #4]
 80087c2:	4630      	mov	r0, r6
 80087c4:	f000 f9ec 	bl	8008ba0 <__malloc_unlock>
 80087c8:	f104 000b 	add.w	r0, r4, #11
 80087cc:	1d23      	adds	r3, r4, #4
 80087ce:	f020 0007 	bic.w	r0, r0, #7
 80087d2:	1ac2      	subs	r2, r0, r3
 80087d4:	d0cc      	beq.n	8008770 <_malloc_r+0x20>
 80087d6:	1a1b      	subs	r3, r3, r0
 80087d8:	50a3      	str	r3, [r4, r2]
 80087da:	e7c9      	b.n	8008770 <_malloc_r+0x20>
 80087dc:	4622      	mov	r2, r4
 80087de:	6864      	ldr	r4, [r4, #4]
 80087e0:	e7cc      	b.n	800877c <_malloc_r+0x2c>
 80087e2:	1cc4      	adds	r4, r0, #3
 80087e4:	f024 0403 	bic.w	r4, r4, #3
 80087e8:	42a0      	cmp	r0, r4
 80087ea:	d0e3      	beq.n	80087b4 <_malloc_r+0x64>
 80087ec:	1a21      	subs	r1, r4, r0
 80087ee:	4630      	mov	r0, r6
 80087f0:	f000 f964 	bl	8008abc <_sbrk_r>
 80087f4:	3001      	adds	r0, #1
 80087f6:	d1dd      	bne.n	80087b4 <_malloc_r+0x64>
 80087f8:	e7cf      	b.n	800879a <_malloc_r+0x4a>
 80087fa:	bf00      	nop
 80087fc:	20002224 	.word	0x20002224
 8008800:	20002228 	.word	0x20002228

08008804 <__ssputs_r>:
 8008804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008808:	688e      	ldr	r6, [r1, #8]
 800880a:	429e      	cmp	r6, r3
 800880c:	4682      	mov	sl, r0
 800880e:	460c      	mov	r4, r1
 8008810:	4690      	mov	r8, r2
 8008812:	461f      	mov	r7, r3
 8008814:	d838      	bhi.n	8008888 <__ssputs_r+0x84>
 8008816:	898a      	ldrh	r2, [r1, #12]
 8008818:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800881c:	d032      	beq.n	8008884 <__ssputs_r+0x80>
 800881e:	6825      	ldr	r5, [r4, #0]
 8008820:	6909      	ldr	r1, [r1, #16]
 8008822:	eba5 0901 	sub.w	r9, r5, r1
 8008826:	6965      	ldr	r5, [r4, #20]
 8008828:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800882c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008830:	3301      	adds	r3, #1
 8008832:	444b      	add	r3, r9
 8008834:	106d      	asrs	r5, r5, #1
 8008836:	429d      	cmp	r5, r3
 8008838:	bf38      	it	cc
 800883a:	461d      	movcc	r5, r3
 800883c:	0553      	lsls	r3, r2, #21
 800883e:	d531      	bpl.n	80088a4 <__ssputs_r+0xa0>
 8008840:	4629      	mov	r1, r5
 8008842:	f7ff ff85 	bl	8008750 <_malloc_r>
 8008846:	4606      	mov	r6, r0
 8008848:	b950      	cbnz	r0, 8008860 <__ssputs_r+0x5c>
 800884a:	230c      	movs	r3, #12
 800884c:	f8ca 3000 	str.w	r3, [sl]
 8008850:	89a3      	ldrh	r3, [r4, #12]
 8008852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008856:	81a3      	strh	r3, [r4, #12]
 8008858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800885c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008860:	6921      	ldr	r1, [r4, #16]
 8008862:	464a      	mov	r2, r9
 8008864:	f7ff fb88 	bl	8007f78 <memcpy>
 8008868:	89a3      	ldrh	r3, [r4, #12]
 800886a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800886e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008872:	81a3      	strh	r3, [r4, #12]
 8008874:	6126      	str	r6, [r4, #16]
 8008876:	6165      	str	r5, [r4, #20]
 8008878:	444e      	add	r6, r9
 800887a:	eba5 0509 	sub.w	r5, r5, r9
 800887e:	6026      	str	r6, [r4, #0]
 8008880:	60a5      	str	r5, [r4, #8]
 8008882:	463e      	mov	r6, r7
 8008884:	42be      	cmp	r6, r7
 8008886:	d900      	bls.n	800888a <__ssputs_r+0x86>
 8008888:	463e      	mov	r6, r7
 800888a:	4632      	mov	r2, r6
 800888c:	6820      	ldr	r0, [r4, #0]
 800888e:	4641      	mov	r1, r8
 8008890:	f000 f966 	bl	8008b60 <memmove>
 8008894:	68a3      	ldr	r3, [r4, #8]
 8008896:	6822      	ldr	r2, [r4, #0]
 8008898:	1b9b      	subs	r3, r3, r6
 800889a:	4432      	add	r2, r6
 800889c:	60a3      	str	r3, [r4, #8]
 800889e:	6022      	str	r2, [r4, #0]
 80088a0:	2000      	movs	r0, #0
 80088a2:	e7db      	b.n	800885c <__ssputs_r+0x58>
 80088a4:	462a      	mov	r2, r5
 80088a6:	f000 f981 	bl	8008bac <_realloc_r>
 80088aa:	4606      	mov	r6, r0
 80088ac:	2800      	cmp	r0, #0
 80088ae:	d1e1      	bne.n	8008874 <__ssputs_r+0x70>
 80088b0:	6921      	ldr	r1, [r4, #16]
 80088b2:	4650      	mov	r0, sl
 80088b4:	f7ff fefc 	bl	80086b0 <_free_r>
 80088b8:	e7c7      	b.n	800884a <__ssputs_r+0x46>
	...

080088bc <_svfiprintf_r>:
 80088bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c0:	4698      	mov	r8, r3
 80088c2:	898b      	ldrh	r3, [r1, #12]
 80088c4:	061b      	lsls	r3, r3, #24
 80088c6:	b09d      	sub	sp, #116	; 0x74
 80088c8:	4607      	mov	r7, r0
 80088ca:	460d      	mov	r5, r1
 80088cc:	4614      	mov	r4, r2
 80088ce:	d50e      	bpl.n	80088ee <_svfiprintf_r+0x32>
 80088d0:	690b      	ldr	r3, [r1, #16]
 80088d2:	b963      	cbnz	r3, 80088ee <_svfiprintf_r+0x32>
 80088d4:	2140      	movs	r1, #64	; 0x40
 80088d6:	f7ff ff3b 	bl	8008750 <_malloc_r>
 80088da:	6028      	str	r0, [r5, #0]
 80088dc:	6128      	str	r0, [r5, #16]
 80088de:	b920      	cbnz	r0, 80088ea <_svfiprintf_r+0x2e>
 80088e0:	230c      	movs	r3, #12
 80088e2:	603b      	str	r3, [r7, #0]
 80088e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088e8:	e0d1      	b.n	8008a8e <_svfiprintf_r+0x1d2>
 80088ea:	2340      	movs	r3, #64	; 0x40
 80088ec:	616b      	str	r3, [r5, #20]
 80088ee:	2300      	movs	r3, #0
 80088f0:	9309      	str	r3, [sp, #36]	; 0x24
 80088f2:	2320      	movs	r3, #32
 80088f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80088fc:	2330      	movs	r3, #48	; 0x30
 80088fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008aa8 <_svfiprintf_r+0x1ec>
 8008902:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008906:	f04f 0901 	mov.w	r9, #1
 800890a:	4623      	mov	r3, r4
 800890c:	469a      	mov	sl, r3
 800890e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008912:	b10a      	cbz	r2, 8008918 <_svfiprintf_r+0x5c>
 8008914:	2a25      	cmp	r2, #37	; 0x25
 8008916:	d1f9      	bne.n	800890c <_svfiprintf_r+0x50>
 8008918:	ebba 0b04 	subs.w	fp, sl, r4
 800891c:	d00b      	beq.n	8008936 <_svfiprintf_r+0x7a>
 800891e:	465b      	mov	r3, fp
 8008920:	4622      	mov	r2, r4
 8008922:	4629      	mov	r1, r5
 8008924:	4638      	mov	r0, r7
 8008926:	f7ff ff6d 	bl	8008804 <__ssputs_r>
 800892a:	3001      	adds	r0, #1
 800892c:	f000 80aa 	beq.w	8008a84 <_svfiprintf_r+0x1c8>
 8008930:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008932:	445a      	add	r2, fp
 8008934:	9209      	str	r2, [sp, #36]	; 0x24
 8008936:	f89a 3000 	ldrb.w	r3, [sl]
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 80a2 	beq.w	8008a84 <_svfiprintf_r+0x1c8>
 8008940:	2300      	movs	r3, #0
 8008942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800894a:	f10a 0a01 	add.w	sl, sl, #1
 800894e:	9304      	str	r3, [sp, #16]
 8008950:	9307      	str	r3, [sp, #28]
 8008952:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008956:	931a      	str	r3, [sp, #104]	; 0x68
 8008958:	4654      	mov	r4, sl
 800895a:	2205      	movs	r2, #5
 800895c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008960:	4851      	ldr	r0, [pc, #324]	; (8008aa8 <_svfiprintf_r+0x1ec>)
 8008962:	f7f7 fc45 	bl	80001f0 <memchr>
 8008966:	9a04      	ldr	r2, [sp, #16]
 8008968:	b9d8      	cbnz	r0, 80089a2 <_svfiprintf_r+0xe6>
 800896a:	06d0      	lsls	r0, r2, #27
 800896c:	bf44      	itt	mi
 800896e:	2320      	movmi	r3, #32
 8008970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008974:	0711      	lsls	r1, r2, #28
 8008976:	bf44      	itt	mi
 8008978:	232b      	movmi	r3, #43	; 0x2b
 800897a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800897e:	f89a 3000 	ldrb.w	r3, [sl]
 8008982:	2b2a      	cmp	r3, #42	; 0x2a
 8008984:	d015      	beq.n	80089b2 <_svfiprintf_r+0xf6>
 8008986:	9a07      	ldr	r2, [sp, #28]
 8008988:	4654      	mov	r4, sl
 800898a:	2000      	movs	r0, #0
 800898c:	f04f 0c0a 	mov.w	ip, #10
 8008990:	4621      	mov	r1, r4
 8008992:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008996:	3b30      	subs	r3, #48	; 0x30
 8008998:	2b09      	cmp	r3, #9
 800899a:	d94e      	bls.n	8008a3a <_svfiprintf_r+0x17e>
 800899c:	b1b0      	cbz	r0, 80089cc <_svfiprintf_r+0x110>
 800899e:	9207      	str	r2, [sp, #28]
 80089a0:	e014      	b.n	80089cc <_svfiprintf_r+0x110>
 80089a2:	eba0 0308 	sub.w	r3, r0, r8
 80089a6:	fa09 f303 	lsl.w	r3, r9, r3
 80089aa:	4313      	orrs	r3, r2
 80089ac:	9304      	str	r3, [sp, #16]
 80089ae:	46a2      	mov	sl, r4
 80089b0:	e7d2      	b.n	8008958 <_svfiprintf_r+0x9c>
 80089b2:	9b03      	ldr	r3, [sp, #12]
 80089b4:	1d19      	adds	r1, r3, #4
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	9103      	str	r1, [sp, #12]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	bfbb      	ittet	lt
 80089be:	425b      	neglt	r3, r3
 80089c0:	f042 0202 	orrlt.w	r2, r2, #2
 80089c4:	9307      	strge	r3, [sp, #28]
 80089c6:	9307      	strlt	r3, [sp, #28]
 80089c8:	bfb8      	it	lt
 80089ca:	9204      	strlt	r2, [sp, #16]
 80089cc:	7823      	ldrb	r3, [r4, #0]
 80089ce:	2b2e      	cmp	r3, #46	; 0x2e
 80089d0:	d10c      	bne.n	80089ec <_svfiprintf_r+0x130>
 80089d2:	7863      	ldrb	r3, [r4, #1]
 80089d4:	2b2a      	cmp	r3, #42	; 0x2a
 80089d6:	d135      	bne.n	8008a44 <_svfiprintf_r+0x188>
 80089d8:	9b03      	ldr	r3, [sp, #12]
 80089da:	1d1a      	adds	r2, r3, #4
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	9203      	str	r2, [sp, #12]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	bfb8      	it	lt
 80089e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80089e8:	3402      	adds	r4, #2
 80089ea:	9305      	str	r3, [sp, #20]
 80089ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ab8 <_svfiprintf_r+0x1fc>
 80089f0:	7821      	ldrb	r1, [r4, #0]
 80089f2:	2203      	movs	r2, #3
 80089f4:	4650      	mov	r0, sl
 80089f6:	f7f7 fbfb 	bl	80001f0 <memchr>
 80089fa:	b140      	cbz	r0, 8008a0e <_svfiprintf_r+0x152>
 80089fc:	2340      	movs	r3, #64	; 0x40
 80089fe:	eba0 000a 	sub.w	r0, r0, sl
 8008a02:	fa03 f000 	lsl.w	r0, r3, r0
 8008a06:	9b04      	ldr	r3, [sp, #16]
 8008a08:	4303      	orrs	r3, r0
 8008a0a:	3401      	adds	r4, #1
 8008a0c:	9304      	str	r3, [sp, #16]
 8008a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a12:	4826      	ldr	r0, [pc, #152]	; (8008aac <_svfiprintf_r+0x1f0>)
 8008a14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a18:	2206      	movs	r2, #6
 8008a1a:	f7f7 fbe9 	bl	80001f0 <memchr>
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	d038      	beq.n	8008a94 <_svfiprintf_r+0x1d8>
 8008a22:	4b23      	ldr	r3, [pc, #140]	; (8008ab0 <_svfiprintf_r+0x1f4>)
 8008a24:	bb1b      	cbnz	r3, 8008a6e <_svfiprintf_r+0x1b2>
 8008a26:	9b03      	ldr	r3, [sp, #12]
 8008a28:	3307      	adds	r3, #7
 8008a2a:	f023 0307 	bic.w	r3, r3, #7
 8008a2e:	3308      	adds	r3, #8
 8008a30:	9303      	str	r3, [sp, #12]
 8008a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a34:	4433      	add	r3, r6
 8008a36:	9309      	str	r3, [sp, #36]	; 0x24
 8008a38:	e767      	b.n	800890a <_svfiprintf_r+0x4e>
 8008a3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a3e:	460c      	mov	r4, r1
 8008a40:	2001      	movs	r0, #1
 8008a42:	e7a5      	b.n	8008990 <_svfiprintf_r+0xd4>
 8008a44:	2300      	movs	r3, #0
 8008a46:	3401      	adds	r4, #1
 8008a48:	9305      	str	r3, [sp, #20]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	f04f 0c0a 	mov.w	ip, #10
 8008a50:	4620      	mov	r0, r4
 8008a52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a56:	3a30      	subs	r2, #48	; 0x30
 8008a58:	2a09      	cmp	r2, #9
 8008a5a:	d903      	bls.n	8008a64 <_svfiprintf_r+0x1a8>
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d0c5      	beq.n	80089ec <_svfiprintf_r+0x130>
 8008a60:	9105      	str	r1, [sp, #20]
 8008a62:	e7c3      	b.n	80089ec <_svfiprintf_r+0x130>
 8008a64:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a68:	4604      	mov	r4, r0
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e7f0      	b.n	8008a50 <_svfiprintf_r+0x194>
 8008a6e:	ab03      	add	r3, sp, #12
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	462a      	mov	r2, r5
 8008a74:	4b0f      	ldr	r3, [pc, #60]	; (8008ab4 <_svfiprintf_r+0x1f8>)
 8008a76:	a904      	add	r1, sp, #16
 8008a78:	4638      	mov	r0, r7
 8008a7a:	f7fe f80f 	bl	8006a9c <_printf_float>
 8008a7e:	1c42      	adds	r2, r0, #1
 8008a80:	4606      	mov	r6, r0
 8008a82:	d1d6      	bne.n	8008a32 <_svfiprintf_r+0x176>
 8008a84:	89ab      	ldrh	r3, [r5, #12]
 8008a86:	065b      	lsls	r3, r3, #25
 8008a88:	f53f af2c 	bmi.w	80088e4 <_svfiprintf_r+0x28>
 8008a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a8e:	b01d      	add	sp, #116	; 0x74
 8008a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a94:	ab03      	add	r3, sp, #12
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	462a      	mov	r2, r5
 8008a9a:	4b06      	ldr	r3, [pc, #24]	; (8008ab4 <_svfiprintf_r+0x1f8>)
 8008a9c:	a904      	add	r1, sp, #16
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	f7fe faa0 	bl	8006fe4 <_printf_i>
 8008aa4:	e7eb      	b.n	8008a7e <_svfiprintf_r+0x1c2>
 8008aa6:	bf00      	nop
 8008aa8:	0800a424 	.word	0x0800a424
 8008aac:	0800a42e 	.word	0x0800a42e
 8008ab0:	08006a9d 	.word	0x08006a9d
 8008ab4:	08008805 	.word	0x08008805
 8008ab8:	0800a42a 	.word	0x0800a42a

08008abc <_sbrk_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4d06      	ldr	r5, [pc, #24]	; (8008ad8 <_sbrk_r+0x1c>)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	4608      	mov	r0, r1
 8008ac6:	602b      	str	r3, [r5, #0]
 8008ac8:	f7fa fbde 	bl	8003288 <_sbrk>
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	d102      	bne.n	8008ad6 <_sbrk_r+0x1a>
 8008ad0:	682b      	ldr	r3, [r5, #0]
 8008ad2:	b103      	cbz	r3, 8008ad6 <_sbrk_r+0x1a>
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
 8008ad8:	200044c8 	.word	0x200044c8

08008adc <__assert_func>:
 8008adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ade:	4614      	mov	r4, r2
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	4b09      	ldr	r3, [pc, #36]	; (8008b08 <__assert_func+0x2c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	68d8      	ldr	r0, [r3, #12]
 8008aea:	b14c      	cbz	r4, 8008b00 <__assert_func+0x24>
 8008aec:	4b07      	ldr	r3, [pc, #28]	; (8008b0c <__assert_func+0x30>)
 8008aee:	9100      	str	r1, [sp, #0]
 8008af0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008af4:	4906      	ldr	r1, [pc, #24]	; (8008b10 <__assert_func+0x34>)
 8008af6:	462b      	mov	r3, r5
 8008af8:	f000 f80e 	bl	8008b18 <fiprintf>
 8008afc:	f000 faa4 	bl	8009048 <abort>
 8008b00:	4b04      	ldr	r3, [pc, #16]	; (8008b14 <__assert_func+0x38>)
 8008b02:	461c      	mov	r4, r3
 8008b04:	e7f3      	b.n	8008aee <__assert_func+0x12>
 8008b06:	bf00      	nop
 8008b08:	2000201c 	.word	0x2000201c
 8008b0c:	0800a435 	.word	0x0800a435
 8008b10:	0800a442 	.word	0x0800a442
 8008b14:	0800a470 	.word	0x0800a470

08008b18 <fiprintf>:
 8008b18:	b40e      	push	{r1, r2, r3}
 8008b1a:	b503      	push	{r0, r1, lr}
 8008b1c:	4601      	mov	r1, r0
 8008b1e:	ab03      	add	r3, sp, #12
 8008b20:	4805      	ldr	r0, [pc, #20]	; (8008b38 <fiprintf+0x20>)
 8008b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b26:	6800      	ldr	r0, [r0, #0]
 8008b28:	9301      	str	r3, [sp, #4]
 8008b2a:	f000 f88f 	bl	8008c4c <_vfiprintf_r>
 8008b2e:	b002      	add	sp, #8
 8008b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b34:	b003      	add	sp, #12
 8008b36:	4770      	bx	lr
 8008b38:	2000201c 	.word	0x2000201c

08008b3c <__ascii_mbtowc>:
 8008b3c:	b082      	sub	sp, #8
 8008b3e:	b901      	cbnz	r1, 8008b42 <__ascii_mbtowc+0x6>
 8008b40:	a901      	add	r1, sp, #4
 8008b42:	b142      	cbz	r2, 8008b56 <__ascii_mbtowc+0x1a>
 8008b44:	b14b      	cbz	r3, 8008b5a <__ascii_mbtowc+0x1e>
 8008b46:	7813      	ldrb	r3, [r2, #0]
 8008b48:	600b      	str	r3, [r1, #0]
 8008b4a:	7812      	ldrb	r2, [r2, #0]
 8008b4c:	1e10      	subs	r0, r2, #0
 8008b4e:	bf18      	it	ne
 8008b50:	2001      	movne	r0, #1
 8008b52:	b002      	add	sp, #8
 8008b54:	4770      	bx	lr
 8008b56:	4610      	mov	r0, r2
 8008b58:	e7fb      	b.n	8008b52 <__ascii_mbtowc+0x16>
 8008b5a:	f06f 0001 	mvn.w	r0, #1
 8008b5e:	e7f8      	b.n	8008b52 <__ascii_mbtowc+0x16>

08008b60 <memmove>:
 8008b60:	4288      	cmp	r0, r1
 8008b62:	b510      	push	{r4, lr}
 8008b64:	eb01 0402 	add.w	r4, r1, r2
 8008b68:	d902      	bls.n	8008b70 <memmove+0x10>
 8008b6a:	4284      	cmp	r4, r0
 8008b6c:	4623      	mov	r3, r4
 8008b6e:	d807      	bhi.n	8008b80 <memmove+0x20>
 8008b70:	1e43      	subs	r3, r0, #1
 8008b72:	42a1      	cmp	r1, r4
 8008b74:	d008      	beq.n	8008b88 <memmove+0x28>
 8008b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b7e:	e7f8      	b.n	8008b72 <memmove+0x12>
 8008b80:	4402      	add	r2, r0
 8008b82:	4601      	mov	r1, r0
 8008b84:	428a      	cmp	r2, r1
 8008b86:	d100      	bne.n	8008b8a <memmove+0x2a>
 8008b88:	bd10      	pop	{r4, pc}
 8008b8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b92:	e7f7      	b.n	8008b84 <memmove+0x24>

08008b94 <__malloc_lock>:
 8008b94:	4801      	ldr	r0, [pc, #4]	; (8008b9c <__malloc_lock+0x8>)
 8008b96:	f000 bc17 	b.w	80093c8 <__retarget_lock_acquire_recursive>
 8008b9a:	bf00      	nop
 8008b9c:	200044d0 	.word	0x200044d0

08008ba0 <__malloc_unlock>:
 8008ba0:	4801      	ldr	r0, [pc, #4]	; (8008ba8 <__malloc_unlock+0x8>)
 8008ba2:	f000 bc12 	b.w	80093ca <__retarget_lock_release_recursive>
 8008ba6:	bf00      	nop
 8008ba8:	200044d0 	.word	0x200044d0

08008bac <_realloc_r>:
 8008bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bae:	4607      	mov	r7, r0
 8008bb0:	4614      	mov	r4, r2
 8008bb2:	460e      	mov	r6, r1
 8008bb4:	b921      	cbnz	r1, 8008bc0 <_realloc_r+0x14>
 8008bb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008bba:	4611      	mov	r1, r2
 8008bbc:	f7ff bdc8 	b.w	8008750 <_malloc_r>
 8008bc0:	b922      	cbnz	r2, 8008bcc <_realloc_r+0x20>
 8008bc2:	f7ff fd75 	bl	80086b0 <_free_r>
 8008bc6:	4625      	mov	r5, r4
 8008bc8:	4628      	mov	r0, r5
 8008bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bcc:	f000 fc62 	bl	8009494 <_malloc_usable_size_r>
 8008bd0:	42a0      	cmp	r0, r4
 8008bd2:	d20f      	bcs.n	8008bf4 <_realloc_r+0x48>
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	f7ff fdba 	bl	8008750 <_malloc_r>
 8008bdc:	4605      	mov	r5, r0
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d0f2      	beq.n	8008bc8 <_realloc_r+0x1c>
 8008be2:	4631      	mov	r1, r6
 8008be4:	4622      	mov	r2, r4
 8008be6:	f7ff f9c7 	bl	8007f78 <memcpy>
 8008bea:	4631      	mov	r1, r6
 8008bec:	4638      	mov	r0, r7
 8008bee:	f7ff fd5f 	bl	80086b0 <_free_r>
 8008bf2:	e7e9      	b.n	8008bc8 <_realloc_r+0x1c>
 8008bf4:	4635      	mov	r5, r6
 8008bf6:	e7e7      	b.n	8008bc8 <_realloc_r+0x1c>

08008bf8 <__sfputc_r>:
 8008bf8:	6893      	ldr	r3, [r2, #8]
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	b410      	push	{r4}
 8008c00:	6093      	str	r3, [r2, #8]
 8008c02:	da08      	bge.n	8008c16 <__sfputc_r+0x1e>
 8008c04:	6994      	ldr	r4, [r2, #24]
 8008c06:	42a3      	cmp	r3, r4
 8008c08:	db01      	blt.n	8008c0e <__sfputc_r+0x16>
 8008c0a:	290a      	cmp	r1, #10
 8008c0c:	d103      	bne.n	8008c16 <__sfputc_r+0x1e>
 8008c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c12:	f000 b94b 	b.w	8008eac <__swbuf_r>
 8008c16:	6813      	ldr	r3, [r2, #0]
 8008c18:	1c58      	adds	r0, r3, #1
 8008c1a:	6010      	str	r0, [r2, #0]
 8008c1c:	7019      	strb	r1, [r3, #0]
 8008c1e:	4608      	mov	r0, r1
 8008c20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <__sfputs_r>:
 8008c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c28:	4606      	mov	r6, r0
 8008c2a:	460f      	mov	r7, r1
 8008c2c:	4614      	mov	r4, r2
 8008c2e:	18d5      	adds	r5, r2, r3
 8008c30:	42ac      	cmp	r4, r5
 8008c32:	d101      	bne.n	8008c38 <__sfputs_r+0x12>
 8008c34:	2000      	movs	r0, #0
 8008c36:	e007      	b.n	8008c48 <__sfputs_r+0x22>
 8008c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c3c:	463a      	mov	r2, r7
 8008c3e:	4630      	mov	r0, r6
 8008c40:	f7ff ffda 	bl	8008bf8 <__sfputc_r>
 8008c44:	1c43      	adds	r3, r0, #1
 8008c46:	d1f3      	bne.n	8008c30 <__sfputs_r+0xa>
 8008c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c4c <_vfiprintf_r>:
 8008c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c50:	460d      	mov	r5, r1
 8008c52:	b09d      	sub	sp, #116	; 0x74
 8008c54:	4614      	mov	r4, r2
 8008c56:	4698      	mov	r8, r3
 8008c58:	4606      	mov	r6, r0
 8008c5a:	b118      	cbz	r0, 8008c64 <_vfiprintf_r+0x18>
 8008c5c:	6983      	ldr	r3, [r0, #24]
 8008c5e:	b90b      	cbnz	r3, 8008c64 <_vfiprintf_r+0x18>
 8008c60:	f000 fb14 	bl	800928c <__sinit>
 8008c64:	4b89      	ldr	r3, [pc, #548]	; (8008e8c <_vfiprintf_r+0x240>)
 8008c66:	429d      	cmp	r5, r3
 8008c68:	d11b      	bne.n	8008ca2 <_vfiprintf_r+0x56>
 8008c6a:	6875      	ldr	r5, [r6, #4]
 8008c6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c6e:	07d9      	lsls	r1, r3, #31
 8008c70:	d405      	bmi.n	8008c7e <_vfiprintf_r+0x32>
 8008c72:	89ab      	ldrh	r3, [r5, #12]
 8008c74:	059a      	lsls	r2, r3, #22
 8008c76:	d402      	bmi.n	8008c7e <_vfiprintf_r+0x32>
 8008c78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c7a:	f000 fba5 	bl	80093c8 <__retarget_lock_acquire_recursive>
 8008c7e:	89ab      	ldrh	r3, [r5, #12]
 8008c80:	071b      	lsls	r3, r3, #28
 8008c82:	d501      	bpl.n	8008c88 <_vfiprintf_r+0x3c>
 8008c84:	692b      	ldr	r3, [r5, #16]
 8008c86:	b9eb      	cbnz	r3, 8008cc4 <_vfiprintf_r+0x78>
 8008c88:	4629      	mov	r1, r5
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f000 f96e 	bl	8008f6c <__swsetup_r>
 8008c90:	b1c0      	cbz	r0, 8008cc4 <_vfiprintf_r+0x78>
 8008c92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c94:	07dc      	lsls	r4, r3, #31
 8008c96:	d50e      	bpl.n	8008cb6 <_vfiprintf_r+0x6a>
 8008c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c9c:	b01d      	add	sp, #116	; 0x74
 8008c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca2:	4b7b      	ldr	r3, [pc, #492]	; (8008e90 <_vfiprintf_r+0x244>)
 8008ca4:	429d      	cmp	r5, r3
 8008ca6:	d101      	bne.n	8008cac <_vfiprintf_r+0x60>
 8008ca8:	68b5      	ldr	r5, [r6, #8]
 8008caa:	e7df      	b.n	8008c6c <_vfiprintf_r+0x20>
 8008cac:	4b79      	ldr	r3, [pc, #484]	; (8008e94 <_vfiprintf_r+0x248>)
 8008cae:	429d      	cmp	r5, r3
 8008cb0:	bf08      	it	eq
 8008cb2:	68f5      	ldreq	r5, [r6, #12]
 8008cb4:	e7da      	b.n	8008c6c <_vfiprintf_r+0x20>
 8008cb6:	89ab      	ldrh	r3, [r5, #12]
 8008cb8:	0598      	lsls	r0, r3, #22
 8008cba:	d4ed      	bmi.n	8008c98 <_vfiprintf_r+0x4c>
 8008cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cbe:	f000 fb84 	bl	80093ca <__retarget_lock_release_recursive>
 8008cc2:	e7e9      	b.n	8008c98 <_vfiprintf_r+0x4c>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc8:	2320      	movs	r3, #32
 8008cca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cce:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cd2:	2330      	movs	r3, #48	; 0x30
 8008cd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008e98 <_vfiprintf_r+0x24c>
 8008cd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cdc:	f04f 0901 	mov.w	r9, #1
 8008ce0:	4623      	mov	r3, r4
 8008ce2:	469a      	mov	sl, r3
 8008ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ce8:	b10a      	cbz	r2, 8008cee <_vfiprintf_r+0xa2>
 8008cea:	2a25      	cmp	r2, #37	; 0x25
 8008cec:	d1f9      	bne.n	8008ce2 <_vfiprintf_r+0x96>
 8008cee:	ebba 0b04 	subs.w	fp, sl, r4
 8008cf2:	d00b      	beq.n	8008d0c <_vfiprintf_r+0xc0>
 8008cf4:	465b      	mov	r3, fp
 8008cf6:	4622      	mov	r2, r4
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	f7ff ff93 	bl	8008c26 <__sfputs_r>
 8008d00:	3001      	adds	r0, #1
 8008d02:	f000 80aa 	beq.w	8008e5a <_vfiprintf_r+0x20e>
 8008d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d08:	445a      	add	r2, fp
 8008d0a:	9209      	str	r2, [sp, #36]	; 0x24
 8008d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 80a2 	beq.w	8008e5a <_vfiprintf_r+0x20e>
 8008d16:	2300      	movs	r3, #0
 8008d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d20:	f10a 0a01 	add.w	sl, sl, #1
 8008d24:	9304      	str	r3, [sp, #16]
 8008d26:	9307      	str	r3, [sp, #28]
 8008d28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d2c:	931a      	str	r3, [sp, #104]	; 0x68
 8008d2e:	4654      	mov	r4, sl
 8008d30:	2205      	movs	r2, #5
 8008d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d36:	4858      	ldr	r0, [pc, #352]	; (8008e98 <_vfiprintf_r+0x24c>)
 8008d38:	f7f7 fa5a 	bl	80001f0 <memchr>
 8008d3c:	9a04      	ldr	r2, [sp, #16]
 8008d3e:	b9d8      	cbnz	r0, 8008d78 <_vfiprintf_r+0x12c>
 8008d40:	06d1      	lsls	r1, r2, #27
 8008d42:	bf44      	itt	mi
 8008d44:	2320      	movmi	r3, #32
 8008d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d4a:	0713      	lsls	r3, r2, #28
 8008d4c:	bf44      	itt	mi
 8008d4e:	232b      	movmi	r3, #43	; 0x2b
 8008d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d54:	f89a 3000 	ldrb.w	r3, [sl]
 8008d58:	2b2a      	cmp	r3, #42	; 0x2a
 8008d5a:	d015      	beq.n	8008d88 <_vfiprintf_r+0x13c>
 8008d5c:	9a07      	ldr	r2, [sp, #28]
 8008d5e:	4654      	mov	r4, sl
 8008d60:	2000      	movs	r0, #0
 8008d62:	f04f 0c0a 	mov.w	ip, #10
 8008d66:	4621      	mov	r1, r4
 8008d68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d6c:	3b30      	subs	r3, #48	; 0x30
 8008d6e:	2b09      	cmp	r3, #9
 8008d70:	d94e      	bls.n	8008e10 <_vfiprintf_r+0x1c4>
 8008d72:	b1b0      	cbz	r0, 8008da2 <_vfiprintf_r+0x156>
 8008d74:	9207      	str	r2, [sp, #28]
 8008d76:	e014      	b.n	8008da2 <_vfiprintf_r+0x156>
 8008d78:	eba0 0308 	sub.w	r3, r0, r8
 8008d7c:	fa09 f303 	lsl.w	r3, r9, r3
 8008d80:	4313      	orrs	r3, r2
 8008d82:	9304      	str	r3, [sp, #16]
 8008d84:	46a2      	mov	sl, r4
 8008d86:	e7d2      	b.n	8008d2e <_vfiprintf_r+0xe2>
 8008d88:	9b03      	ldr	r3, [sp, #12]
 8008d8a:	1d19      	adds	r1, r3, #4
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	9103      	str	r1, [sp, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	bfbb      	ittet	lt
 8008d94:	425b      	neglt	r3, r3
 8008d96:	f042 0202 	orrlt.w	r2, r2, #2
 8008d9a:	9307      	strge	r3, [sp, #28]
 8008d9c:	9307      	strlt	r3, [sp, #28]
 8008d9e:	bfb8      	it	lt
 8008da0:	9204      	strlt	r2, [sp, #16]
 8008da2:	7823      	ldrb	r3, [r4, #0]
 8008da4:	2b2e      	cmp	r3, #46	; 0x2e
 8008da6:	d10c      	bne.n	8008dc2 <_vfiprintf_r+0x176>
 8008da8:	7863      	ldrb	r3, [r4, #1]
 8008daa:	2b2a      	cmp	r3, #42	; 0x2a
 8008dac:	d135      	bne.n	8008e1a <_vfiprintf_r+0x1ce>
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	1d1a      	adds	r2, r3, #4
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	9203      	str	r2, [sp, #12]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	bfb8      	it	lt
 8008dba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008dbe:	3402      	adds	r4, #2
 8008dc0:	9305      	str	r3, [sp, #20]
 8008dc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ea8 <_vfiprintf_r+0x25c>
 8008dc6:	7821      	ldrb	r1, [r4, #0]
 8008dc8:	2203      	movs	r2, #3
 8008dca:	4650      	mov	r0, sl
 8008dcc:	f7f7 fa10 	bl	80001f0 <memchr>
 8008dd0:	b140      	cbz	r0, 8008de4 <_vfiprintf_r+0x198>
 8008dd2:	2340      	movs	r3, #64	; 0x40
 8008dd4:	eba0 000a 	sub.w	r0, r0, sl
 8008dd8:	fa03 f000 	lsl.w	r0, r3, r0
 8008ddc:	9b04      	ldr	r3, [sp, #16]
 8008dde:	4303      	orrs	r3, r0
 8008de0:	3401      	adds	r4, #1
 8008de2:	9304      	str	r3, [sp, #16]
 8008de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de8:	482c      	ldr	r0, [pc, #176]	; (8008e9c <_vfiprintf_r+0x250>)
 8008dea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dee:	2206      	movs	r2, #6
 8008df0:	f7f7 f9fe 	bl	80001f0 <memchr>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d03f      	beq.n	8008e78 <_vfiprintf_r+0x22c>
 8008df8:	4b29      	ldr	r3, [pc, #164]	; (8008ea0 <_vfiprintf_r+0x254>)
 8008dfa:	bb1b      	cbnz	r3, 8008e44 <_vfiprintf_r+0x1f8>
 8008dfc:	9b03      	ldr	r3, [sp, #12]
 8008dfe:	3307      	adds	r3, #7
 8008e00:	f023 0307 	bic.w	r3, r3, #7
 8008e04:	3308      	adds	r3, #8
 8008e06:	9303      	str	r3, [sp, #12]
 8008e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e0a:	443b      	add	r3, r7
 8008e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e0e:	e767      	b.n	8008ce0 <_vfiprintf_r+0x94>
 8008e10:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e14:	460c      	mov	r4, r1
 8008e16:	2001      	movs	r0, #1
 8008e18:	e7a5      	b.n	8008d66 <_vfiprintf_r+0x11a>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	3401      	adds	r4, #1
 8008e1e:	9305      	str	r3, [sp, #20]
 8008e20:	4619      	mov	r1, r3
 8008e22:	f04f 0c0a 	mov.w	ip, #10
 8008e26:	4620      	mov	r0, r4
 8008e28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e2c:	3a30      	subs	r2, #48	; 0x30
 8008e2e:	2a09      	cmp	r2, #9
 8008e30:	d903      	bls.n	8008e3a <_vfiprintf_r+0x1ee>
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d0c5      	beq.n	8008dc2 <_vfiprintf_r+0x176>
 8008e36:	9105      	str	r1, [sp, #20]
 8008e38:	e7c3      	b.n	8008dc2 <_vfiprintf_r+0x176>
 8008e3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e3e:	4604      	mov	r4, r0
 8008e40:	2301      	movs	r3, #1
 8008e42:	e7f0      	b.n	8008e26 <_vfiprintf_r+0x1da>
 8008e44:	ab03      	add	r3, sp, #12
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	462a      	mov	r2, r5
 8008e4a:	4b16      	ldr	r3, [pc, #88]	; (8008ea4 <_vfiprintf_r+0x258>)
 8008e4c:	a904      	add	r1, sp, #16
 8008e4e:	4630      	mov	r0, r6
 8008e50:	f7fd fe24 	bl	8006a9c <_printf_float>
 8008e54:	4607      	mov	r7, r0
 8008e56:	1c78      	adds	r0, r7, #1
 8008e58:	d1d6      	bne.n	8008e08 <_vfiprintf_r+0x1bc>
 8008e5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e5c:	07d9      	lsls	r1, r3, #31
 8008e5e:	d405      	bmi.n	8008e6c <_vfiprintf_r+0x220>
 8008e60:	89ab      	ldrh	r3, [r5, #12]
 8008e62:	059a      	lsls	r2, r3, #22
 8008e64:	d402      	bmi.n	8008e6c <_vfiprintf_r+0x220>
 8008e66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e68:	f000 faaf 	bl	80093ca <__retarget_lock_release_recursive>
 8008e6c:	89ab      	ldrh	r3, [r5, #12]
 8008e6e:	065b      	lsls	r3, r3, #25
 8008e70:	f53f af12 	bmi.w	8008c98 <_vfiprintf_r+0x4c>
 8008e74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e76:	e711      	b.n	8008c9c <_vfiprintf_r+0x50>
 8008e78:	ab03      	add	r3, sp, #12
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	462a      	mov	r2, r5
 8008e7e:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <_vfiprintf_r+0x258>)
 8008e80:	a904      	add	r1, sp, #16
 8008e82:	4630      	mov	r0, r6
 8008e84:	f7fe f8ae 	bl	8006fe4 <_printf_i>
 8008e88:	e7e4      	b.n	8008e54 <_vfiprintf_r+0x208>
 8008e8a:	bf00      	nop
 8008e8c:	0800a59c 	.word	0x0800a59c
 8008e90:	0800a5bc 	.word	0x0800a5bc
 8008e94:	0800a57c 	.word	0x0800a57c
 8008e98:	0800a424 	.word	0x0800a424
 8008e9c:	0800a42e 	.word	0x0800a42e
 8008ea0:	08006a9d 	.word	0x08006a9d
 8008ea4:	08008c27 	.word	0x08008c27
 8008ea8:	0800a42a 	.word	0x0800a42a

08008eac <__swbuf_r>:
 8008eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eae:	460e      	mov	r6, r1
 8008eb0:	4614      	mov	r4, r2
 8008eb2:	4605      	mov	r5, r0
 8008eb4:	b118      	cbz	r0, 8008ebe <__swbuf_r+0x12>
 8008eb6:	6983      	ldr	r3, [r0, #24]
 8008eb8:	b90b      	cbnz	r3, 8008ebe <__swbuf_r+0x12>
 8008eba:	f000 f9e7 	bl	800928c <__sinit>
 8008ebe:	4b21      	ldr	r3, [pc, #132]	; (8008f44 <__swbuf_r+0x98>)
 8008ec0:	429c      	cmp	r4, r3
 8008ec2:	d12b      	bne.n	8008f1c <__swbuf_r+0x70>
 8008ec4:	686c      	ldr	r4, [r5, #4]
 8008ec6:	69a3      	ldr	r3, [r4, #24]
 8008ec8:	60a3      	str	r3, [r4, #8]
 8008eca:	89a3      	ldrh	r3, [r4, #12]
 8008ecc:	071a      	lsls	r2, r3, #28
 8008ece:	d52f      	bpl.n	8008f30 <__swbuf_r+0x84>
 8008ed0:	6923      	ldr	r3, [r4, #16]
 8008ed2:	b36b      	cbz	r3, 8008f30 <__swbuf_r+0x84>
 8008ed4:	6923      	ldr	r3, [r4, #16]
 8008ed6:	6820      	ldr	r0, [r4, #0]
 8008ed8:	1ac0      	subs	r0, r0, r3
 8008eda:	6963      	ldr	r3, [r4, #20]
 8008edc:	b2f6      	uxtb	r6, r6
 8008ede:	4283      	cmp	r3, r0
 8008ee0:	4637      	mov	r7, r6
 8008ee2:	dc04      	bgt.n	8008eee <__swbuf_r+0x42>
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f000 f93c 	bl	8009164 <_fflush_r>
 8008eec:	bb30      	cbnz	r0, 8008f3c <__swbuf_r+0x90>
 8008eee:	68a3      	ldr	r3, [r4, #8]
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	60a3      	str	r3, [r4, #8]
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	1c5a      	adds	r2, r3, #1
 8008ef8:	6022      	str	r2, [r4, #0]
 8008efa:	701e      	strb	r6, [r3, #0]
 8008efc:	6963      	ldr	r3, [r4, #20]
 8008efe:	3001      	adds	r0, #1
 8008f00:	4283      	cmp	r3, r0
 8008f02:	d004      	beq.n	8008f0e <__swbuf_r+0x62>
 8008f04:	89a3      	ldrh	r3, [r4, #12]
 8008f06:	07db      	lsls	r3, r3, #31
 8008f08:	d506      	bpl.n	8008f18 <__swbuf_r+0x6c>
 8008f0a:	2e0a      	cmp	r6, #10
 8008f0c:	d104      	bne.n	8008f18 <__swbuf_r+0x6c>
 8008f0e:	4621      	mov	r1, r4
 8008f10:	4628      	mov	r0, r5
 8008f12:	f000 f927 	bl	8009164 <_fflush_r>
 8008f16:	b988      	cbnz	r0, 8008f3c <__swbuf_r+0x90>
 8008f18:	4638      	mov	r0, r7
 8008f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f1c:	4b0a      	ldr	r3, [pc, #40]	; (8008f48 <__swbuf_r+0x9c>)
 8008f1e:	429c      	cmp	r4, r3
 8008f20:	d101      	bne.n	8008f26 <__swbuf_r+0x7a>
 8008f22:	68ac      	ldr	r4, [r5, #8]
 8008f24:	e7cf      	b.n	8008ec6 <__swbuf_r+0x1a>
 8008f26:	4b09      	ldr	r3, [pc, #36]	; (8008f4c <__swbuf_r+0xa0>)
 8008f28:	429c      	cmp	r4, r3
 8008f2a:	bf08      	it	eq
 8008f2c:	68ec      	ldreq	r4, [r5, #12]
 8008f2e:	e7ca      	b.n	8008ec6 <__swbuf_r+0x1a>
 8008f30:	4621      	mov	r1, r4
 8008f32:	4628      	mov	r0, r5
 8008f34:	f000 f81a 	bl	8008f6c <__swsetup_r>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d0cb      	beq.n	8008ed4 <__swbuf_r+0x28>
 8008f3c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008f40:	e7ea      	b.n	8008f18 <__swbuf_r+0x6c>
 8008f42:	bf00      	nop
 8008f44:	0800a59c 	.word	0x0800a59c
 8008f48:	0800a5bc 	.word	0x0800a5bc
 8008f4c:	0800a57c 	.word	0x0800a57c

08008f50 <__ascii_wctomb>:
 8008f50:	b149      	cbz	r1, 8008f66 <__ascii_wctomb+0x16>
 8008f52:	2aff      	cmp	r2, #255	; 0xff
 8008f54:	bf85      	ittet	hi
 8008f56:	238a      	movhi	r3, #138	; 0x8a
 8008f58:	6003      	strhi	r3, [r0, #0]
 8008f5a:	700a      	strbls	r2, [r1, #0]
 8008f5c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008f60:	bf98      	it	ls
 8008f62:	2001      	movls	r0, #1
 8008f64:	4770      	bx	lr
 8008f66:	4608      	mov	r0, r1
 8008f68:	4770      	bx	lr
	...

08008f6c <__swsetup_r>:
 8008f6c:	4b32      	ldr	r3, [pc, #200]	; (8009038 <__swsetup_r+0xcc>)
 8008f6e:	b570      	push	{r4, r5, r6, lr}
 8008f70:	681d      	ldr	r5, [r3, #0]
 8008f72:	4606      	mov	r6, r0
 8008f74:	460c      	mov	r4, r1
 8008f76:	b125      	cbz	r5, 8008f82 <__swsetup_r+0x16>
 8008f78:	69ab      	ldr	r3, [r5, #24]
 8008f7a:	b913      	cbnz	r3, 8008f82 <__swsetup_r+0x16>
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	f000 f985 	bl	800928c <__sinit>
 8008f82:	4b2e      	ldr	r3, [pc, #184]	; (800903c <__swsetup_r+0xd0>)
 8008f84:	429c      	cmp	r4, r3
 8008f86:	d10f      	bne.n	8008fa8 <__swsetup_r+0x3c>
 8008f88:	686c      	ldr	r4, [r5, #4]
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f90:	0719      	lsls	r1, r3, #28
 8008f92:	d42c      	bmi.n	8008fee <__swsetup_r+0x82>
 8008f94:	06dd      	lsls	r5, r3, #27
 8008f96:	d411      	bmi.n	8008fbc <__swsetup_r+0x50>
 8008f98:	2309      	movs	r3, #9
 8008f9a:	6033      	str	r3, [r6, #0]
 8008f9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008fa0:	81a3      	strh	r3, [r4, #12]
 8008fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fa6:	e03e      	b.n	8009026 <__swsetup_r+0xba>
 8008fa8:	4b25      	ldr	r3, [pc, #148]	; (8009040 <__swsetup_r+0xd4>)
 8008faa:	429c      	cmp	r4, r3
 8008fac:	d101      	bne.n	8008fb2 <__swsetup_r+0x46>
 8008fae:	68ac      	ldr	r4, [r5, #8]
 8008fb0:	e7eb      	b.n	8008f8a <__swsetup_r+0x1e>
 8008fb2:	4b24      	ldr	r3, [pc, #144]	; (8009044 <__swsetup_r+0xd8>)
 8008fb4:	429c      	cmp	r4, r3
 8008fb6:	bf08      	it	eq
 8008fb8:	68ec      	ldreq	r4, [r5, #12]
 8008fba:	e7e6      	b.n	8008f8a <__swsetup_r+0x1e>
 8008fbc:	0758      	lsls	r0, r3, #29
 8008fbe:	d512      	bpl.n	8008fe6 <__swsetup_r+0x7a>
 8008fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fc2:	b141      	cbz	r1, 8008fd6 <__swsetup_r+0x6a>
 8008fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fc8:	4299      	cmp	r1, r3
 8008fca:	d002      	beq.n	8008fd2 <__swsetup_r+0x66>
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f7ff fb6f 	bl	80086b0 <_free_r>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fdc:	81a3      	strh	r3, [r4, #12]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	6063      	str	r3, [r4, #4]
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	f043 0308 	orr.w	r3, r3, #8
 8008fec:	81a3      	strh	r3, [r4, #12]
 8008fee:	6923      	ldr	r3, [r4, #16]
 8008ff0:	b94b      	cbnz	r3, 8009006 <__swsetup_r+0x9a>
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ffc:	d003      	beq.n	8009006 <__swsetup_r+0x9a>
 8008ffe:	4621      	mov	r1, r4
 8009000:	4630      	mov	r0, r6
 8009002:	f000 fa07 	bl	8009414 <__smakebuf_r>
 8009006:	89a0      	ldrh	r0, [r4, #12]
 8009008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800900c:	f010 0301 	ands.w	r3, r0, #1
 8009010:	d00a      	beq.n	8009028 <__swsetup_r+0xbc>
 8009012:	2300      	movs	r3, #0
 8009014:	60a3      	str	r3, [r4, #8]
 8009016:	6963      	ldr	r3, [r4, #20]
 8009018:	425b      	negs	r3, r3
 800901a:	61a3      	str	r3, [r4, #24]
 800901c:	6923      	ldr	r3, [r4, #16]
 800901e:	b943      	cbnz	r3, 8009032 <__swsetup_r+0xc6>
 8009020:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009024:	d1ba      	bne.n	8008f9c <__swsetup_r+0x30>
 8009026:	bd70      	pop	{r4, r5, r6, pc}
 8009028:	0781      	lsls	r1, r0, #30
 800902a:	bf58      	it	pl
 800902c:	6963      	ldrpl	r3, [r4, #20]
 800902e:	60a3      	str	r3, [r4, #8]
 8009030:	e7f4      	b.n	800901c <__swsetup_r+0xb0>
 8009032:	2000      	movs	r0, #0
 8009034:	e7f7      	b.n	8009026 <__swsetup_r+0xba>
 8009036:	bf00      	nop
 8009038:	2000201c 	.word	0x2000201c
 800903c:	0800a59c 	.word	0x0800a59c
 8009040:	0800a5bc 	.word	0x0800a5bc
 8009044:	0800a57c 	.word	0x0800a57c

08009048 <abort>:
 8009048:	b508      	push	{r3, lr}
 800904a:	2006      	movs	r0, #6
 800904c:	f000 fa52 	bl	80094f4 <raise>
 8009050:	2001      	movs	r0, #1
 8009052:	f7fa f8a1 	bl	8003198 <_exit>
	...

08009058 <__sflush_r>:
 8009058:	898a      	ldrh	r2, [r1, #12]
 800905a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800905e:	4605      	mov	r5, r0
 8009060:	0710      	lsls	r0, r2, #28
 8009062:	460c      	mov	r4, r1
 8009064:	d458      	bmi.n	8009118 <__sflush_r+0xc0>
 8009066:	684b      	ldr	r3, [r1, #4]
 8009068:	2b00      	cmp	r3, #0
 800906a:	dc05      	bgt.n	8009078 <__sflush_r+0x20>
 800906c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800906e:	2b00      	cmp	r3, #0
 8009070:	dc02      	bgt.n	8009078 <__sflush_r+0x20>
 8009072:	2000      	movs	r0, #0
 8009074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009078:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800907a:	2e00      	cmp	r6, #0
 800907c:	d0f9      	beq.n	8009072 <__sflush_r+0x1a>
 800907e:	2300      	movs	r3, #0
 8009080:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009084:	682f      	ldr	r7, [r5, #0]
 8009086:	602b      	str	r3, [r5, #0]
 8009088:	d032      	beq.n	80090f0 <__sflush_r+0x98>
 800908a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	075a      	lsls	r2, r3, #29
 8009090:	d505      	bpl.n	800909e <__sflush_r+0x46>
 8009092:	6863      	ldr	r3, [r4, #4]
 8009094:	1ac0      	subs	r0, r0, r3
 8009096:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009098:	b10b      	cbz	r3, 800909e <__sflush_r+0x46>
 800909a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800909c:	1ac0      	subs	r0, r0, r3
 800909e:	2300      	movs	r3, #0
 80090a0:	4602      	mov	r2, r0
 80090a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090a4:	6a21      	ldr	r1, [r4, #32]
 80090a6:	4628      	mov	r0, r5
 80090a8:	47b0      	blx	r6
 80090aa:	1c43      	adds	r3, r0, #1
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	d106      	bne.n	80090be <__sflush_r+0x66>
 80090b0:	6829      	ldr	r1, [r5, #0]
 80090b2:	291d      	cmp	r1, #29
 80090b4:	d82c      	bhi.n	8009110 <__sflush_r+0xb8>
 80090b6:	4a2a      	ldr	r2, [pc, #168]	; (8009160 <__sflush_r+0x108>)
 80090b8:	40ca      	lsrs	r2, r1
 80090ba:	07d6      	lsls	r6, r2, #31
 80090bc:	d528      	bpl.n	8009110 <__sflush_r+0xb8>
 80090be:	2200      	movs	r2, #0
 80090c0:	6062      	str	r2, [r4, #4]
 80090c2:	04d9      	lsls	r1, r3, #19
 80090c4:	6922      	ldr	r2, [r4, #16]
 80090c6:	6022      	str	r2, [r4, #0]
 80090c8:	d504      	bpl.n	80090d4 <__sflush_r+0x7c>
 80090ca:	1c42      	adds	r2, r0, #1
 80090cc:	d101      	bne.n	80090d2 <__sflush_r+0x7a>
 80090ce:	682b      	ldr	r3, [r5, #0]
 80090d0:	b903      	cbnz	r3, 80090d4 <__sflush_r+0x7c>
 80090d2:	6560      	str	r0, [r4, #84]	; 0x54
 80090d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090d6:	602f      	str	r7, [r5, #0]
 80090d8:	2900      	cmp	r1, #0
 80090da:	d0ca      	beq.n	8009072 <__sflush_r+0x1a>
 80090dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090e0:	4299      	cmp	r1, r3
 80090e2:	d002      	beq.n	80090ea <__sflush_r+0x92>
 80090e4:	4628      	mov	r0, r5
 80090e6:	f7ff fae3 	bl	80086b0 <_free_r>
 80090ea:	2000      	movs	r0, #0
 80090ec:	6360      	str	r0, [r4, #52]	; 0x34
 80090ee:	e7c1      	b.n	8009074 <__sflush_r+0x1c>
 80090f0:	6a21      	ldr	r1, [r4, #32]
 80090f2:	2301      	movs	r3, #1
 80090f4:	4628      	mov	r0, r5
 80090f6:	47b0      	blx	r6
 80090f8:	1c41      	adds	r1, r0, #1
 80090fa:	d1c7      	bne.n	800908c <__sflush_r+0x34>
 80090fc:	682b      	ldr	r3, [r5, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0c4      	beq.n	800908c <__sflush_r+0x34>
 8009102:	2b1d      	cmp	r3, #29
 8009104:	d001      	beq.n	800910a <__sflush_r+0xb2>
 8009106:	2b16      	cmp	r3, #22
 8009108:	d101      	bne.n	800910e <__sflush_r+0xb6>
 800910a:	602f      	str	r7, [r5, #0]
 800910c:	e7b1      	b.n	8009072 <__sflush_r+0x1a>
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009114:	81a3      	strh	r3, [r4, #12]
 8009116:	e7ad      	b.n	8009074 <__sflush_r+0x1c>
 8009118:	690f      	ldr	r7, [r1, #16]
 800911a:	2f00      	cmp	r7, #0
 800911c:	d0a9      	beq.n	8009072 <__sflush_r+0x1a>
 800911e:	0793      	lsls	r3, r2, #30
 8009120:	680e      	ldr	r6, [r1, #0]
 8009122:	bf08      	it	eq
 8009124:	694b      	ldreq	r3, [r1, #20]
 8009126:	600f      	str	r7, [r1, #0]
 8009128:	bf18      	it	ne
 800912a:	2300      	movne	r3, #0
 800912c:	eba6 0807 	sub.w	r8, r6, r7
 8009130:	608b      	str	r3, [r1, #8]
 8009132:	f1b8 0f00 	cmp.w	r8, #0
 8009136:	dd9c      	ble.n	8009072 <__sflush_r+0x1a>
 8009138:	6a21      	ldr	r1, [r4, #32]
 800913a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800913c:	4643      	mov	r3, r8
 800913e:	463a      	mov	r2, r7
 8009140:	4628      	mov	r0, r5
 8009142:	47b0      	blx	r6
 8009144:	2800      	cmp	r0, #0
 8009146:	dc06      	bgt.n	8009156 <__sflush_r+0xfe>
 8009148:	89a3      	ldrh	r3, [r4, #12]
 800914a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800914e:	81a3      	strh	r3, [r4, #12]
 8009150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009154:	e78e      	b.n	8009074 <__sflush_r+0x1c>
 8009156:	4407      	add	r7, r0
 8009158:	eba8 0800 	sub.w	r8, r8, r0
 800915c:	e7e9      	b.n	8009132 <__sflush_r+0xda>
 800915e:	bf00      	nop
 8009160:	20400001 	.word	0x20400001

08009164 <_fflush_r>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	690b      	ldr	r3, [r1, #16]
 8009168:	4605      	mov	r5, r0
 800916a:	460c      	mov	r4, r1
 800916c:	b913      	cbnz	r3, 8009174 <_fflush_r+0x10>
 800916e:	2500      	movs	r5, #0
 8009170:	4628      	mov	r0, r5
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	b118      	cbz	r0, 800917e <_fflush_r+0x1a>
 8009176:	6983      	ldr	r3, [r0, #24]
 8009178:	b90b      	cbnz	r3, 800917e <_fflush_r+0x1a>
 800917a:	f000 f887 	bl	800928c <__sinit>
 800917e:	4b14      	ldr	r3, [pc, #80]	; (80091d0 <_fflush_r+0x6c>)
 8009180:	429c      	cmp	r4, r3
 8009182:	d11b      	bne.n	80091bc <_fflush_r+0x58>
 8009184:	686c      	ldr	r4, [r5, #4]
 8009186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d0ef      	beq.n	800916e <_fflush_r+0xa>
 800918e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009190:	07d0      	lsls	r0, r2, #31
 8009192:	d404      	bmi.n	800919e <_fflush_r+0x3a>
 8009194:	0599      	lsls	r1, r3, #22
 8009196:	d402      	bmi.n	800919e <_fflush_r+0x3a>
 8009198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800919a:	f000 f915 	bl	80093c8 <__retarget_lock_acquire_recursive>
 800919e:	4628      	mov	r0, r5
 80091a0:	4621      	mov	r1, r4
 80091a2:	f7ff ff59 	bl	8009058 <__sflush_r>
 80091a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091a8:	07da      	lsls	r2, r3, #31
 80091aa:	4605      	mov	r5, r0
 80091ac:	d4e0      	bmi.n	8009170 <_fflush_r+0xc>
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	059b      	lsls	r3, r3, #22
 80091b2:	d4dd      	bmi.n	8009170 <_fflush_r+0xc>
 80091b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091b6:	f000 f908 	bl	80093ca <__retarget_lock_release_recursive>
 80091ba:	e7d9      	b.n	8009170 <_fflush_r+0xc>
 80091bc:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <_fflush_r+0x70>)
 80091be:	429c      	cmp	r4, r3
 80091c0:	d101      	bne.n	80091c6 <_fflush_r+0x62>
 80091c2:	68ac      	ldr	r4, [r5, #8]
 80091c4:	e7df      	b.n	8009186 <_fflush_r+0x22>
 80091c6:	4b04      	ldr	r3, [pc, #16]	; (80091d8 <_fflush_r+0x74>)
 80091c8:	429c      	cmp	r4, r3
 80091ca:	bf08      	it	eq
 80091cc:	68ec      	ldreq	r4, [r5, #12]
 80091ce:	e7da      	b.n	8009186 <_fflush_r+0x22>
 80091d0:	0800a59c 	.word	0x0800a59c
 80091d4:	0800a5bc 	.word	0x0800a5bc
 80091d8:	0800a57c 	.word	0x0800a57c

080091dc <std>:
 80091dc:	2300      	movs	r3, #0
 80091de:	b510      	push	{r4, lr}
 80091e0:	4604      	mov	r4, r0
 80091e2:	e9c0 3300 	strd	r3, r3, [r0]
 80091e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091ea:	6083      	str	r3, [r0, #8]
 80091ec:	8181      	strh	r1, [r0, #12]
 80091ee:	6643      	str	r3, [r0, #100]	; 0x64
 80091f0:	81c2      	strh	r2, [r0, #14]
 80091f2:	6183      	str	r3, [r0, #24]
 80091f4:	4619      	mov	r1, r3
 80091f6:	2208      	movs	r2, #8
 80091f8:	305c      	adds	r0, #92	; 0x5c
 80091fa:	f7fd fba7 	bl	800694c <memset>
 80091fe:	4b05      	ldr	r3, [pc, #20]	; (8009214 <std+0x38>)
 8009200:	6263      	str	r3, [r4, #36]	; 0x24
 8009202:	4b05      	ldr	r3, [pc, #20]	; (8009218 <std+0x3c>)
 8009204:	62a3      	str	r3, [r4, #40]	; 0x28
 8009206:	4b05      	ldr	r3, [pc, #20]	; (800921c <std+0x40>)
 8009208:	62e3      	str	r3, [r4, #44]	; 0x2c
 800920a:	4b05      	ldr	r3, [pc, #20]	; (8009220 <std+0x44>)
 800920c:	6224      	str	r4, [r4, #32]
 800920e:	6323      	str	r3, [r4, #48]	; 0x30
 8009210:	bd10      	pop	{r4, pc}
 8009212:	bf00      	nop
 8009214:	0800952d 	.word	0x0800952d
 8009218:	0800954f 	.word	0x0800954f
 800921c:	08009587 	.word	0x08009587
 8009220:	080095ab 	.word	0x080095ab

08009224 <_cleanup_r>:
 8009224:	4901      	ldr	r1, [pc, #4]	; (800922c <_cleanup_r+0x8>)
 8009226:	f000 b8af 	b.w	8009388 <_fwalk_reent>
 800922a:	bf00      	nop
 800922c:	08009165 	.word	0x08009165

08009230 <__sfmoreglue>:
 8009230:	b570      	push	{r4, r5, r6, lr}
 8009232:	1e4a      	subs	r2, r1, #1
 8009234:	2568      	movs	r5, #104	; 0x68
 8009236:	4355      	muls	r5, r2
 8009238:	460e      	mov	r6, r1
 800923a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800923e:	f7ff fa87 	bl	8008750 <_malloc_r>
 8009242:	4604      	mov	r4, r0
 8009244:	b140      	cbz	r0, 8009258 <__sfmoreglue+0x28>
 8009246:	2100      	movs	r1, #0
 8009248:	e9c0 1600 	strd	r1, r6, [r0]
 800924c:	300c      	adds	r0, #12
 800924e:	60a0      	str	r0, [r4, #8]
 8009250:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009254:	f7fd fb7a 	bl	800694c <memset>
 8009258:	4620      	mov	r0, r4
 800925a:	bd70      	pop	{r4, r5, r6, pc}

0800925c <__sfp_lock_acquire>:
 800925c:	4801      	ldr	r0, [pc, #4]	; (8009264 <__sfp_lock_acquire+0x8>)
 800925e:	f000 b8b3 	b.w	80093c8 <__retarget_lock_acquire_recursive>
 8009262:	bf00      	nop
 8009264:	200044d4 	.word	0x200044d4

08009268 <__sfp_lock_release>:
 8009268:	4801      	ldr	r0, [pc, #4]	; (8009270 <__sfp_lock_release+0x8>)
 800926a:	f000 b8ae 	b.w	80093ca <__retarget_lock_release_recursive>
 800926e:	bf00      	nop
 8009270:	200044d4 	.word	0x200044d4

08009274 <__sinit_lock_acquire>:
 8009274:	4801      	ldr	r0, [pc, #4]	; (800927c <__sinit_lock_acquire+0x8>)
 8009276:	f000 b8a7 	b.w	80093c8 <__retarget_lock_acquire_recursive>
 800927a:	bf00      	nop
 800927c:	200044cf 	.word	0x200044cf

08009280 <__sinit_lock_release>:
 8009280:	4801      	ldr	r0, [pc, #4]	; (8009288 <__sinit_lock_release+0x8>)
 8009282:	f000 b8a2 	b.w	80093ca <__retarget_lock_release_recursive>
 8009286:	bf00      	nop
 8009288:	200044cf 	.word	0x200044cf

0800928c <__sinit>:
 800928c:	b510      	push	{r4, lr}
 800928e:	4604      	mov	r4, r0
 8009290:	f7ff fff0 	bl	8009274 <__sinit_lock_acquire>
 8009294:	69a3      	ldr	r3, [r4, #24]
 8009296:	b11b      	cbz	r3, 80092a0 <__sinit+0x14>
 8009298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800929c:	f7ff bff0 	b.w	8009280 <__sinit_lock_release>
 80092a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80092a4:	6523      	str	r3, [r4, #80]	; 0x50
 80092a6:	4b13      	ldr	r3, [pc, #76]	; (80092f4 <__sinit+0x68>)
 80092a8:	4a13      	ldr	r2, [pc, #76]	; (80092f8 <__sinit+0x6c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80092ae:	42a3      	cmp	r3, r4
 80092b0:	bf04      	itt	eq
 80092b2:	2301      	moveq	r3, #1
 80092b4:	61a3      	streq	r3, [r4, #24]
 80092b6:	4620      	mov	r0, r4
 80092b8:	f000 f820 	bl	80092fc <__sfp>
 80092bc:	6060      	str	r0, [r4, #4]
 80092be:	4620      	mov	r0, r4
 80092c0:	f000 f81c 	bl	80092fc <__sfp>
 80092c4:	60a0      	str	r0, [r4, #8]
 80092c6:	4620      	mov	r0, r4
 80092c8:	f000 f818 	bl	80092fc <__sfp>
 80092cc:	2200      	movs	r2, #0
 80092ce:	60e0      	str	r0, [r4, #12]
 80092d0:	2104      	movs	r1, #4
 80092d2:	6860      	ldr	r0, [r4, #4]
 80092d4:	f7ff ff82 	bl	80091dc <std>
 80092d8:	68a0      	ldr	r0, [r4, #8]
 80092da:	2201      	movs	r2, #1
 80092dc:	2109      	movs	r1, #9
 80092de:	f7ff ff7d 	bl	80091dc <std>
 80092e2:	68e0      	ldr	r0, [r4, #12]
 80092e4:	2202      	movs	r2, #2
 80092e6:	2112      	movs	r1, #18
 80092e8:	f7ff ff78 	bl	80091dc <std>
 80092ec:	2301      	movs	r3, #1
 80092ee:	61a3      	str	r3, [r4, #24]
 80092f0:	e7d2      	b.n	8009298 <__sinit+0xc>
 80092f2:	bf00      	nop
 80092f4:	0800a1f8 	.word	0x0800a1f8
 80092f8:	08009225 	.word	0x08009225

080092fc <__sfp>:
 80092fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fe:	4607      	mov	r7, r0
 8009300:	f7ff ffac 	bl	800925c <__sfp_lock_acquire>
 8009304:	4b1e      	ldr	r3, [pc, #120]	; (8009380 <__sfp+0x84>)
 8009306:	681e      	ldr	r6, [r3, #0]
 8009308:	69b3      	ldr	r3, [r6, #24]
 800930a:	b913      	cbnz	r3, 8009312 <__sfp+0x16>
 800930c:	4630      	mov	r0, r6
 800930e:	f7ff ffbd 	bl	800928c <__sinit>
 8009312:	3648      	adds	r6, #72	; 0x48
 8009314:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009318:	3b01      	subs	r3, #1
 800931a:	d503      	bpl.n	8009324 <__sfp+0x28>
 800931c:	6833      	ldr	r3, [r6, #0]
 800931e:	b30b      	cbz	r3, 8009364 <__sfp+0x68>
 8009320:	6836      	ldr	r6, [r6, #0]
 8009322:	e7f7      	b.n	8009314 <__sfp+0x18>
 8009324:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009328:	b9d5      	cbnz	r5, 8009360 <__sfp+0x64>
 800932a:	4b16      	ldr	r3, [pc, #88]	; (8009384 <__sfp+0x88>)
 800932c:	60e3      	str	r3, [r4, #12]
 800932e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009332:	6665      	str	r5, [r4, #100]	; 0x64
 8009334:	f000 f847 	bl	80093c6 <__retarget_lock_init_recursive>
 8009338:	f7ff ff96 	bl	8009268 <__sfp_lock_release>
 800933c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009340:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009344:	6025      	str	r5, [r4, #0]
 8009346:	61a5      	str	r5, [r4, #24]
 8009348:	2208      	movs	r2, #8
 800934a:	4629      	mov	r1, r5
 800934c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009350:	f7fd fafc 	bl	800694c <memset>
 8009354:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009358:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800935c:	4620      	mov	r0, r4
 800935e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009360:	3468      	adds	r4, #104	; 0x68
 8009362:	e7d9      	b.n	8009318 <__sfp+0x1c>
 8009364:	2104      	movs	r1, #4
 8009366:	4638      	mov	r0, r7
 8009368:	f7ff ff62 	bl	8009230 <__sfmoreglue>
 800936c:	4604      	mov	r4, r0
 800936e:	6030      	str	r0, [r6, #0]
 8009370:	2800      	cmp	r0, #0
 8009372:	d1d5      	bne.n	8009320 <__sfp+0x24>
 8009374:	f7ff ff78 	bl	8009268 <__sfp_lock_release>
 8009378:	230c      	movs	r3, #12
 800937a:	603b      	str	r3, [r7, #0]
 800937c:	e7ee      	b.n	800935c <__sfp+0x60>
 800937e:	bf00      	nop
 8009380:	0800a1f8 	.word	0x0800a1f8
 8009384:	ffff0001 	.word	0xffff0001

08009388 <_fwalk_reent>:
 8009388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800938c:	4606      	mov	r6, r0
 800938e:	4688      	mov	r8, r1
 8009390:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009394:	2700      	movs	r7, #0
 8009396:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800939a:	f1b9 0901 	subs.w	r9, r9, #1
 800939e:	d505      	bpl.n	80093ac <_fwalk_reent+0x24>
 80093a0:	6824      	ldr	r4, [r4, #0]
 80093a2:	2c00      	cmp	r4, #0
 80093a4:	d1f7      	bne.n	8009396 <_fwalk_reent+0xe>
 80093a6:	4638      	mov	r0, r7
 80093a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ac:	89ab      	ldrh	r3, [r5, #12]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d907      	bls.n	80093c2 <_fwalk_reent+0x3a>
 80093b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093b6:	3301      	adds	r3, #1
 80093b8:	d003      	beq.n	80093c2 <_fwalk_reent+0x3a>
 80093ba:	4629      	mov	r1, r5
 80093bc:	4630      	mov	r0, r6
 80093be:	47c0      	blx	r8
 80093c0:	4307      	orrs	r7, r0
 80093c2:	3568      	adds	r5, #104	; 0x68
 80093c4:	e7e9      	b.n	800939a <_fwalk_reent+0x12>

080093c6 <__retarget_lock_init_recursive>:
 80093c6:	4770      	bx	lr

080093c8 <__retarget_lock_acquire_recursive>:
 80093c8:	4770      	bx	lr

080093ca <__retarget_lock_release_recursive>:
 80093ca:	4770      	bx	lr

080093cc <__swhatbuf_r>:
 80093cc:	b570      	push	{r4, r5, r6, lr}
 80093ce:	460e      	mov	r6, r1
 80093d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d4:	2900      	cmp	r1, #0
 80093d6:	b096      	sub	sp, #88	; 0x58
 80093d8:	4614      	mov	r4, r2
 80093da:	461d      	mov	r5, r3
 80093dc:	da07      	bge.n	80093ee <__swhatbuf_r+0x22>
 80093de:	2300      	movs	r3, #0
 80093e0:	602b      	str	r3, [r5, #0]
 80093e2:	89b3      	ldrh	r3, [r6, #12]
 80093e4:	061a      	lsls	r2, r3, #24
 80093e6:	d410      	bmi.n	800940a <__swhatbuf_r+0x3e>
 80093e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ec:	e00e      	b.n	800940c <__swhatbuf_r+0x40>
 80093ee:	466a      	mov	r2, sp
 80093f0:	f000 f902 	bl	80095f8 <_fstat_r>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	dbf2      	blt.n	80093de <__swhatbuf_r+0x12>
 80093f8:	9a01      	ldr	r2, [sp, #4]
 80093fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009402:	425a      	negs	r2, r3
 8009404:	415a      	adcs	r2, r3
 8009406:	602a      	str	r2, [r5, #0]
 8009408:	e7ee      	b.n	80093e8 <__swhatbuf_r+0x1c>
 800940a:	2340      	movs	r3, #64	; 0x40
 800940c:	2000      	movs	r0, #0
 800940e:	6023      	str	r3, [r4, #0]
 8009410:	b016      	add	sp, #88	; 0x58
 8009412:	bd70      	pop	{r4, r5, r6, pc}

08009414 <__smakebuf_r>:
 8009414:	898b      	ldrh	r3, [r1, #12]
 8009416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009418:	079d      	lsls	r5, r3, #30
 800941a:	4606      	mov	r6, r0
 800941c:	460c      	mov	r4, r1
 800941e:	d507      	bpl.n	8009430 <__smakebuf_r+0x1c>
 8009420:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	6123      	str	r3, [r4, #16]
 8009428:	2301      	movs	r3, #1
 800942a:	6163      	str	r3, [r4, #20]
 800942c:	b002      	add	sp, #8
 800942e:	bd70      	pop	{r4, r5, r6, pc}
 8009430:	ab01      	add	r3, sp, #4
 8009432:	466a      	mov	r2, sp
 8009434:	f7ff ffca 	bl	80093cc <__swhatbuf_r>
 8009438:	9900      	ldr	r1, [sp, #0]
 800943a:	4605      	mov	r5, r0
 800943c:	4630      	mov	r0, r6
 800943e:	f7ff f987 	bl	8008750 <_malloc_r>
 8009442:	b948      	cbnz	r0, 8009458 <__smakebuf_r+0x44>
 8009444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009448:	059a      	lsls	r2, r3, #22
 800944a:	d4ef      	bmi.n	800942c <__smakebuf_r+0x18>
 800944c:	f023 0303 	bic.w	r3, r3, #3
 8009450:	f043 0302 	orr.w	r3, r3, #2
 8009454:	81a3      	strh	r3, [r4, #12]
 8009456:	e7e3      	b.n	8009420 <__smakebuf_r+0xc>
 8009458:	4b0d      	ldr	r3, [pc, #52]	; (8009490 <__smakebuf_r+0x7c>)
 800945a:	62b3      	str	r3, [r6, #40]	; 0x28
 800945c:	89a3      	ldrh	r3, [r4, #12]
 800945e:	6020      	str	r0, [r4, #0]
 8009460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009464:	81a3      	strh	r3, [r4, #12]
 8009466:	9b00      	ldr	r3, [sp, #0]
 8009468:	6163      	str	r3, [r4, #20]
 800946a:	9b01      	ldr	r3, [sp, #4]
 800946c:	6120      	str	r0, [r4, #16]
 800946e:	b15b      	cbz	r3, 8009488 <__smakebuf_r+0x74>
 8009470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009474:	4630      	mov	r0, r6
 8009476:	f000 f8d1 	bl	800961c <_isatty_r>
 800947a:	b128      	cbz	r0, 8009488 <__smakebuf_r+0x74>
 800947c:	89a3      	ldrh	r3, [r4, #12]
 800947e:	f023 0303 	bic.w	r3, r3, #3
 8009482:	f043 0301 	orr.w	r3, r3, #1
 8009486:	81a3      	strh	r3, [r4, #12]
 8009488:	89a0      	ldrh	r0, [r4, #12]
 800948a:	4305      	orrs	r5, r0
 800948c:	81a5      	strh	r5, [r4, #12]
 800948e:	e7cd      	b.n	800942c <__smakebuf_r+0x18>
 8009490:	08009225 	.word	0x08009225

08009494 <_malloc_usable_size_r>:
 8009494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009498:	1f18      	subs	r0, r3, #4
 800949a:	2b00      	cmp	r3, #0
 800949c:	bfbc      	itt	lt
 800949e:	580b      	ldrlt	r3, [r1, r0]
 80094a0:	18c0      	addlt	r0, r0, r3
 80094a2:	4770      	bx	lr

080094a4 <_raise_r>:
 80094a4:	291f      	cmp	r1, #31
 80094a6:	b538      	push	{r3, r4, r5, lr}
 80094a8:	4604      	mov	r4, r0
 80094aa:	460d      	mov	r5, r1
 80094ac:	d904      	bls.n	80094b8 <_raise_r+0x14>
 80094ae:	2316      	movs	r3, #22
 80094b0:	6003      	str	r3, [r0, #0]
 80094b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80094ba:	b112      	cbz	r2, 80094c2 <_raise_r+0x1e>
 80094bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094c0:	b94b      	cbnz	r3, 80094d6 <_raise_r+0x32>
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 f830 	bl	8009528 <_getpid_r>
 80094c8:	462a      	mov	r2, r5
 80094ca:	4601      	mov	r1, r0
 80094cc:	4620      	mov	r0, r4
 80094ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094d2:	f000 b817 	b.w	8009504 <_kill_r>
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d00a      	beq.n	80094f0 <_raise_r+0x4c>
 80094da:	1c59      	adds	r1, r3, #1
 80094dc:	d103      	bne.n	80094e6 <_raise_r+0x42>
 80094de:	2316      	movs	r3, #22
 80094e0:	6003      	str	r3, [r0, #0]
 80094e2:	2001      	movs	r0, #1
 80094e4:	e7e7      	b.n	80094b6 <_raise_r+0x12>
 80094e6:	2400      	movs	r4, #0
 80094e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80094ec:	4628      	mov	r0, r5
 80094ee:	4798      	blx	r3
 80094f0:	2000      	movs	r0, #0
 80094f2:	e7e0      	b.n	80094b6 <_raise_r+0x12>

080094f4 <raise>:
 80094f4:	4b02      	ldr	r3, [pc, #8]	; (8009500 <raise+0xc>)
 80094f6:	4601      	mov	r1, r0
 80094f8:	6818      	ldr	r0, [r3, #0]
 80094fa:	f7ff bfd3 	b.w	80094a4 <_raise_r>
 80094fe:	bf00      	nop
 8009500:	2000201c 	.word	0x2000201c

08009504 <_kill_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	4d07      	ldr	r5, [pc, #28]	; (8009524 <_kill_r+0x20>)
 8009508:	2300      	movs	r3, #0
 800950a:	4604      	mov	r4, r0
 800950c:	4608      	mov	r0, r1
 800950e:	4611      	mov	r1, r2
 8009510:	602b      	str	r3, [r5, #0]
 8009512:	f7f9 fe31 	bl	8003178 <_kill>
 8009516:	1c43      	adds	r3, r0, #1
 8009518:	d102      	bne.n	8009520 <_kill_r+0x1c>
 800951a:	682b      	ldr	r3, [r5, #0]
 800951c:	b103      	cbz	r3, 8009520 <_kill_r+0x1c>
 800951e:	6023      	str	r3, [r4, #0]
 8009520:	bd38      	pop	{r3, r4, r5, pc}
 8009522:	bf00      	nop
 8009524:	200044c8 	.word	0x200044c8

08009528 <_getpid_r>:
 8009528:	f7f9 be1e 	b.w	8003168 <_getpid>

0800952c <__sread>:
 800952c:	b510      	push	{r4, lr}
 800952e:	460c      	mov	r4, r1
 8009530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009534:	f000 f894 	bl	8009660 <_read_r>
 8009538:	2800      	cmp	r0, #0
 800953a:	bfab      	itete	ge
 800953c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800953e:	89a3      	ldrhlt	r3, [r4, #12]
 8009540:	181b      	addge	r3, r3, r0
 8009542:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009546:	bfac      	ite	ge
 8009548:	6563      	strge	r3, [r4, #84]	; 0x54
 800954a:	81a3      	strhlt	r3, [r4, #12]
 800954c:	bd10      	pop	{r4, pc}

0800954e <__swrite>:
 800954e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009552:	461f      	mov	r7, r3
 8009554:	898b      	ldrh	r3, [r1, #12]
 8009556:	05db      	lsls	r3, r3, #23
 8009558:	4605      	mov	r5, r0
 800955a:	460c      	mov	r4, r1
 800955c:	4616      	mov	r6, r2
 800955e:	d505      	bpl.n	800956c <__swrite+0x1e>
 8009560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009564:	2302      	movs	r3, #2
 8009566:	2200      	movs	r2, #0
 8009568:	f000 f868 	bl	800963c <_lseek_r>
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009572:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009576:	81a3      	strh	r3, [r4, #12]
 8009578:	4632      	mov	r2, r6
 800957a:	463b      	mov	r3, r7
 800957c:	4628      	mov	r0, r5
 800957e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009582:	f000 b817 	b.w	80095b4 <_write_r>

08009586 <__sseek>:
 8009586:	b510      	push	{r4, lr}
 8009588:	460c      	mov	r4, r1
 800958a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800958e:	f000 f855 	bl	800963c <_lseek_r>
 8009592:	1c43      	adds	r3, r0, #1
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	bf15      	itete	ne
 8009598:	6560      	strne	r0, [r4, #84]	; 0x54
 800959a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800959e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095a2:	81a3      	strheq	r3, [r4, #12]
 80095a4:	bf18      	it	ne
 80095a6:	81a3      	strhne	r3, [r4, #12]
 80095a8:	bd10      	pop	{r4, pc}

080095aa <__sclose>:
 80095aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ae:	f000 b813 	b.w	80095d8 <_close_r>
	...

080095b4 <_write_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4d07      	ldr	r5, [pc, #28]	; (80095d4 <_write_r+0x20>)
 80095b8:	4604      	mov	r4, r0
 80095ba:	4608      	mov	r0, r1
 80095bc:	4611      	mov	r1, r2
 80095be:	2200      	movs	r2, #0
 80095c0:	602a      	str	r2, [r5, #0]
 80095c2:	461a      	mov	r2, r3
 80095c4:	f7f9 fe0f 	bl	80031e6 <_write>
 80095c8:	1c43      	adds	r3, r0, #1
 80095ca:	d102      	bne.n	80095d2 <_write_r+0x1e>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	b103      	cbz	r3, 80095d2 <_write_r+0x1e>
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	bd38      	pop	{r3, r4, r5, pc}
 80095d4:	200044c8 	.word	0x200044c8

080095d8 <_close_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4d06      	ldr	r5, [pc, #24]	; (80095f4 <_close_r+0x1c>)
 80095dc:	2300      	movs	r3, #0
 80095de:	4604      	mov	r4, r0
 80095e0:	4608      	mov	r0, r1
 80095e2:	602b      	str	r3, [r5, #0]
 80095e4:	f7f9 fe1b 	bl	800321e <_close>
 80095e8:	1c43      	adds	r3, r0, #1
 80095ea:	d102      	bne.n	80095f2 <_close_r+0x1a>
 80095ec:	682b      	ldr	r3, [r5, #0]
 80095ee:	b103      	cbz	r3, 80095f2 <_close_r+0x1a>
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	bd38      	pop	{r3, r4, r5, pc}
 80095f4:	200044c8 	.word	0x200044c8

080095f8 <_fstat_r>:
 80095f8:	b538      	push	{r3, r4, r5, lr}
 80095fa:	4d07      	ldr	r5, [pc, #28]	; (8009618 <_fstat_r+0x20>)
 80095fc:	2300      	movs	r3, #0
 80095fe:	4604      	mov	r4, r0
 8009600:	4608      	mov	r0, r1
 8009602:	4611      	mov	r1, r2
 8009604:	602b      	str	r3, [r5, #0]
 8009606:	f7f9 fe16 	bl	8003236 <_fstat>
 800960a:	1c43      	adds	r3, r0, #1
 800960c:	d102      	bne.n	8009614 <_fstat_r+0x1c>
 800960e:	682b      	ldr	r3, [r5, #0]
 8009610:	b103      	cbz	r3, 8009614 <_fstat_r+0x1c>
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	bd38      	pop	{r3, r4, r5, pc}
 8009616:	bf00      	nop
 8009618:	200044c8 	.word	0x200044c8

0800961c <_isatty_r>:
 800961c:	b538      	push	{r3, r4, r5, lr}
 800961e:	4d06      	ldr	r5, [pc, #24]	; (8009638 <_isatty_r+0x1c>)
 8009620:	2300      	movs	r3, #0
 8009622:	4604      	mov	r4, r0
 8009624:	4608      	mov	r0, r1
 8009626:	602b      	str	r3, [r5, #0]
 8009628:	f7f9 fe15 	bl	8003256 <_isatty>
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	d102      	bne.n	8009636 <_isatty_r+0x1a>
 8009630:	682b      	ldr	r3, [r5, #0]
 8009632:	b103      	cbz	r3, 8009636 <_isatty_r+0x1a>
 8009634:	6023      	str	r3, [r4, #0]
 8009636:	bd38      	pop	{r3, r4, r5, pc}
 8009638:	200044c8 	.word	0x200044c8

0800963c <_lseek_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4d07      	ldr	r5, [pc, #28]	; (800965c <_lseek_r+0x20>)
 8009640:	4604      	mov	r4, r0
 8009642:	4608      	mov	r0, r1
 8009644:	4611      	mov	r1, r2
 8009646:	2200      	movs	r2, #0
 8009648:	602a      	str	r2, [r5, #0]
 800964a:	461a      	mov	r2, r3
 800964c:	f7f9 fe0e 	bl	800326c <_lseek>
 8009650:	1c43      	adds	r3, r0, #1
 8009652:	d102      	bne.n	800965a <_lseek_r+0x1e>
 8009654:	682b      	ldr	r3, [r5, #0]
 8009656:	b103      	cbz	r3, 800965a <_lseek_r+0x1e>
 8009658:	6023      	str	r3, [r4, #0]
 800965a:	bd38      	pop	{r3, r4, r5, pc}
 800965c:	200044c8 	.word	0x200044c8

08009660 <_read_r>:
 8009660:	b538      	push	{r3, r4, r5, lr}
 8009662:	4d07      	ldr	r5, [pc, #28]	; (8009680 <_read_r+0x20>)
 8009664:	4604      	mov	r4, r0
 8009666:	4608      	mov	r0, r1
 8009668:	4611      	mov	r1, r2
 800966a:	2200      	movs	r2, #0
 800966c:	602a      	str	r2, [r5, #0]
 800966e:	461a      	mov	r2, r3
 8009670:	f7f9 fd9c 	bl	80031ac <_read>
 8009674:	1c43      	adds	r3, r0, #1
 8009676:	d102      	bne.n	800967e <_read_r+0x1e>
 8009678:	682b      	ldr	r3, [r5, #0]
 800967a:	b103      	cbz	r3, 800967e <_read_r+0x1e>
 800967c:	6023      	str	r3, [r4, #0]
 800967e:	bd38      	pop	{r3, r4, r5, pc}
 8009680:	200044c8 	.word	0x200044c8

08009684 <asin>:
 8009684:	b538      	push	{r3, r4, r5, lr}
 8009686:	ed2d 8b02 	vpush	{d8}
 800968a:	ec55 4b10 	vmov	r4, r5, d0
 800968e:	f000 f837 	bl	8009700 <__ieee754_asin>
 8009692:	4b16      	ldr	r3, [pc, #88]	; (80096ec <asin+0x68>)
 8009694:	eeb0 8a40 	vmov.f32	s16, s0
 8009698:	eef0 8a60 	vmov.f32	s17, s1
 800969c:	f993 3000 	ldrsb.w	r3, [r3]
 80096a0:	3301      	adds	r3, #1
 80096a2:	d01c      	beq.n	80096de <asin+0x5a>
 80096a4:	4622      	mov	r2, r4
 80096a6:	462b      	mov	r3, r5
 80096a8:	4620      	mov	r0, r4
 80096aa:	4629      	mov	r1, r5
 80096ac:	f7f7 fa46 	bl	8000b3c <__aeabi_dcmpun>
 80096b0:	b9a8      	cbnz	r0, 80096de <asin+0x5a>
 80096b2:	ec45 4b10 	vmov	d0, r4, r5
 80096b6:	f000 fd57 	bl	800a168 <fabs>
 80096ba:	4b0d      	ldr	r3, [pc, #52]	; (80096f0 <asin+0x6c>)
 80096bc:	ec51 0b10 	vmov	r0, r1, d0
 80096c0:	2200      	movs	r2, #0
 80096c2:	f7f7 fa31 	bl	8000b28 <__aeabi_dcmpgt>
 80096c6:	b150      	cbz	r0, 80096de <asin+0x5a>
 80096c8:	f7fd f916 	bl	80068f8 <__errno>
 80096cc:	ecbd 8b02 	vpop	{d8}
 80096d0:	2321      	movs	r3, #33	; 0x21
 80096d2:	6003      	str	r3, [r0, #0]
 80096d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096d8:	4806      	ldr	r0, [pc, #24]	; (80096f4 <asin+0x70>)
 80096da:	f000 bd51 	b.w	800a180 <nan>
 80096de:	eeb0 0a48 	vmov.f32	s0, s16
 80096e2:	eef0 0a68 	vmov.f32	s1, s17
 80096e6:	ecbd 8b02 	vpop	{d8}
 80096ea:	bd38      	pop	{r3, r4, r5, pc}
 80096ec:	200021ec 	.word	0x200021ec
 80096f0:	3ff00000 	.word	0x3ff00000
 80096f4:	0800a470 	.word	0x0800a470

080096f8 <atan2>:
 80096f8:	f000 ba16 	b.w	8009b28 <__ieee754_atan2>
 80096fc:	0000      	movs	r0, r0
	...

08009700 <__ieee754_asin>:
 8009700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	ed2d 8b04 	vpush	{d8-d9}
 8009708:	ec55 4b10 	vmov	r4, r5, d0
 800970c:	4bcc      	ldr	r3, [pc, #816]	; (8009a40 <__ieee754_asin+0x340>)
 800970e:	b083      	sub	sp, #12
 8009710:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009714:	4598      	cmp	r8, r3
 8009716:	9501      	str	r5, [sp, #4]
 8009718:	dd35      	ble.n	8009786 <__ieee754_asin+0x86>
 800971a:	ee10 3a10 	vmov	r3, s0
 800971e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8009722:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8009726:	ea58 0303 	orrs.w	r3, r8, r3
 800972a:	d117      	bne.n	800975c <__ieee754_asin+0x5c>
 800972c:	a3aa      	add	r3, pc, #680	; (adr r3, 80099d8 <__ieee754_asin+0x2d8>)
 800972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009732:	ee10 0a10 	vmov	r0, s0
 8009736:	4629      	mov	r1, r5
 8009738:	f7f6 ff66 	bl	8000608 <__aeabi_dmul>
 800973c:	a3a8      	add	r3, pc, #672	; (adr r3, 80099e0 <__ieee754_asin+0x2e0>)
 800973e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009742:	4606      	mov	r6, r0
 8009744:	460f      	mov	r7, r1
 8009746:	4620      	mov	r0, r4
 8009748:	4629      	mov	r1, r5
 800974a:	f7f6 ff5d 	bl	8000608 <__aeabi_dmul>
 800974e:	4602      	mov	r2, r0
 8009750:	460b      	mov	r3, r1
 8009752:	4630      	mov	r0, r6
 8009754:	4639      	mov	r1, r7
 8009756:	f7f6 fda1 	bl	800029c <__adddf3>
 800975a:	e00b      	b.n	8009774 <__ieee754_asin+0x74>
 800975c:	ee10 2a10 	vmov	r2, s0
 8009760:	462b      	mov	r3, r5
 8009762:	ee10 0a10 	vmov	r0, s0
 8009766:	4629      	mov	r1, r5
 8009768:	f7f6 fd96 	bl	8000298 <__aeabi_dsub>
 800976c:	4602      	mov	r2, r0
 800976e:	460b      	mov	r3, r1
 8009770:	f7f7 f874 	bl	800085c <__aeabi_ddiv>
 8009774:	4604      	mov	r4, r0
 8009776:	460d      	mov	r5, r1
 8009778:	ec45 4b10 	vmov	d0, r4, r5
 800977c:	b003      	add	sp, #12
 800977e:	ecbd 8b04 	vpop	{d8-d9}
 8009782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009786:	4baf      	ldr	r3, [pc, #700]	; (8009a44 <__ieee754_asin+0x344>)
 8009788:	4598      	cmp	r8, r3
 800978a:	dc11      	bgt.n	80097b0 <__ieee754_asin+0xb0>
 800978c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009790:	f280 80ae 	bge.w	80098f0 <__ieee754_asin+0x1f0>
 8009794:	a394      	add	r3, pc, #592	; (adr r3, 80099e8 <__ieee754_asin+0x2e8>)
 8009796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979a:	ee10 0a10 	vmov	r0, s0
 800979e:	4629      	mov	r1, r5
 80097a0:	f7f6 fd7c 	bl	800029c <__adddf3>
 80097a4:	4ba8      	ldr	r3, [pc, #672]	; (8009a48 <__ieee754_asin+0x348>)
 80097a6:	2200      	movs	r2, #0
 80097a8:	f7f7 f9be 	bl	8000b28 <__aeabi_dcmpgt>
 80097ac:	2800      	cmp	r0, #0
 80097ae:	d1e3      	bne.n	8009778 <__ieee754_asin+0x78>
 80097b0:	ec45 4b10 	vmov	d0, r4, r5
 80097b4:	f000 fcd8 	bl	800a168 <fabs>
 80097b8:	49a3      	ldr	r1, [pc, #652]	; (8009a48 <__ieee754_asin+0x348>)
 80097ba:	ec53 2b10 	vmov	r2, r3, d0
 80097be:	2000      	movs	r0, #0
 80097c0:	f7f6 fd6a 	bl	8000298 <__aeabi_dsub>
 80097c4:	4ba1      	ldr	r3, [pc, #644]	; (8009a4c <__ieee754_asin+0x34c>)
 80097c6:	2200      	movs	r2, #0
 80097c8:	f7f6 ff1e 	bl	8000608 <__aeabi_dmul>
 80097cc:	a388      	add	r3, pc, #544	; (adr r3, 80099f0 <__ieee754_asin+0x2f0>)
 80097ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d2:	4604      	mov	r4, r0
 80097d4:	460d      	mov	r5, r1
 80097d6:	f7f6 ff17 	bl	8000608 <__aeabi_dmul>
 80097da:	a387      	add	r3, pc, #540	; (adr r3, 80099f8 <__ieee754_asin+0x2f8>)
 80097dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e0:	f7f6 fd5c 	bl	800029c <__adddf3>
 80097e4:	4622      	mov	r2, r4
 80097e6:	462b      	mov	r3, r5
 80097e8:	f7f6 ff0e 	bl	8000608 <__aeabi_dmul>
 80097ec:	a384      	add	r3, pc, #528	; (adr r3, 8009a00 <__ieee754_asin+0x300>)
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	f7f6 fd51 	bl	8000298 <__aeabi_dsub>
 80097f6:	4622      	mov	r2, r4
 80097f8:	462b      	mov	r3, r5
 80097fa:	f7f6 ff05 	bl	8000608 <__aeabi_dmul>
 80097fe:	a382      	add	r3, pc, #520	; (adr r3, 8009a08 <__ieee754_asin+0x308>)
 8009800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009804:	f7f6 fd4a 	bl	800029c <__adddf3>
 8009808:	4622      	mov	r2, r4
 800980a:	462b      	mov	r3, r5
 800980c:	f7f6 fefc 	bl	8000608 <__aeabi_dmul>
 8009810:	a37f      	add	r3, pc, #508	; (adr r3, 8009a10 <__ieee754_asin+0x310>)
 8009812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009816:	f7f6 fd3f 	bl	8000298 <__aeabi_dsub>
 800981a:	4622      	mov	r2, r4
 800981c:	462b      	mov	r3, r5
 800981e:	f7f6 fef3 	bl	8000608 <__aeabi_dmul>
 8009822:	a37d      	add	r3, pc, #500	; (adr r3, 8009a18 <__ieee754_asin+0x318>)
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	f7f6 fd38 	bl	800029c <__adddf3>
 800982c:	4622      	mov	r2, r4
 800982e:	462b      	mov	r3, r5
 8009830:	f7f6 feea 	bl	8000608 <__aeabi_dmul>
 8009834:	a37a      	add	r3, pc, #488	; (adr r3, 8009a20 <__ieee754_asin+0x320>)
 8009836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983a:	ec41 0b18 	vmov	d8, r0, r1
 800983e:	4620      	mov	r0, r4
 8009840:	4629      	mov	r1, r5
 8009842:	f7f6 fee1 	bl	8000608 <__aeabi_dmul>
 8009846:	a378      	add	r3, pc, #480	; (adr r3, 8009a28 <__ieee754_asin+0x328>)
 8009848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984c:	f7f6 fd24 	bl	8000298 <__aeabi_dsub>
 8009850:	4622      	mov	r2, r4
 8009852:	462b      	mov	r3, r5
 8009854:	f7f6 fed8 	bl	8000608 <__aeabi_dmul>
 8009858:	a375      	add	r3, pc, #468	; (adr r3, 8009a30 <__ieee754_asin+0x330>)
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f7f6 fd1d 	bl	800029c <__adddf3>
 8009862:	4622      	mov	r2, r4
 8009864:	462b      	mov	r3, r5
 8009866:	f7f6 fecf 	bl	8000608 <__aeabi_dmul>
 800986a:	a373      	add	r3, pc, #460	; (adr r3, 8009a38 <__ieee754_asin+0x338>)
 800986c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009870:	f7f6 fd12 	bl	8000298 <__aeabi_dsub>
 8009874:	4622      	mov	r2, r4
 8009876:	462b      	mov	r3, r5
 8009878:	f7f6 fec6 	bl	8000608 <__aeabi_dmul>
 800987c:	4b72      	ldr	r3, [pc, #456]	; (8009a48 <__ieee754_asin+0x348>)
 800987e:	2200      	movs	r2, #0
 8009880:	f7f6 fd0c 	bl	800029c <__adddf3>
 8009884:	ec45 4b10 	vmov	d0, r4, r5
 8009888:	4606      	mov	r6, r0
 800988a:	460f      	mov	r7, r1
 800988c:	f000 fa16 	bl	8009cbc <__ieee754_sqrt>
 8009890:	4b6f      	ldr	r3, [pc, #444]	; (8009a50 <__ieee754_asin+0x350>)
 8009892:	4598      	cmp	r8, r3
 8009894:	ec5b ab10 	vmov	sl, fp, d0
 8009898:	f340 80dc 	ble.w	8009a54 <__ieee754_asin+0x354>
 800989c:	4632      	mov	r2, r6
 800989e:	463b      	mov	r3, r7
 80098a0:	ec51 0b18 	vmov	r0, r1, d8
 80098a4:	f7f6 ffda 	bl	800085c <__aeabi_ddiv>
 80098a8:	4652      	mov	r2, sl
 80098aa:	465b      	mov	r3, fp
 80098ac:	f7f6 feac 	bl	8000608 <__aeabi_dmul>
 80098b0:	4652      	mov	r2, sl
 80098b2:	465b      	mov	r3, fp
 80098b4:	f7f6 fcf2 	bl	800029c <__adddf3>
 80098b8:	4602      	mov	r2, r0
 80098ba:	460b      	mov	r3, r1
 80098bc:	f7f6 fcee 	bl	800029c <__adddf3>
 80098c0:	a347      	add	r3, pc, #284	; (adr r3, 80099e0 <__ieee754_asin+0x2e0>)
 80098c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c6:	f7f6 fce7 	bl	8000298 <__aeabi_dsub>
 80098ca:	4602      	mov	r2, r0
 80098cc:	460b      	mov	r3, r1
 80098ce:	a142      	add	r1, pc, #264	; (adr r1, 80099d8 <__ieee754_asin+0x2d8>)
 80098d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098d4:	f7f6 fce0 	bl	8000298 <__aeabi_dsub>
 80098d8:	9b01      	ldr	r3, [sp, #4]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	bfdc      	itt	le
 80098de:	4602      	movle	r2, r0
 80098e0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80098e4:	4604      	mov	r4, r0
 80098e6:	460d      	mov	r5, r1
 80098e8:	bfdc      	itt	le
 80098ea:	4614      	movle	r4, r2
 80098ec:	461d      	movle	r5, r3
 80098ee:	e743      	b.n	8009778 <__ieee754_asin+0x78>
 80098f0:	ee10 2a10 	vmov	r2, s0
 80098f4:	ee10 0a10 	vmov	r0, s0
 80098f8:	462b      	mov	r3, r5
 80098fa:	4629      	mov	r1, r5
 80098fc:	f7f6 fe84 	bl	8000608 <__aeabi_dmul>
 8009900:	a33b      	add	r3, pc, #236	; (adr r3, 80099f0 <__ieee754_asin+0x2f0>)
 8009902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009906:	4606      	mov	r6, r0
 8009908:	460f      	mov	r7, r1
 800990a:	f7f6 fe7d 	bl	8000608 <__aeabi_dmul>
 800990e:	a33a      	add	r3, pc, #232	; (adr r3, 80099f8 <__ieee754_asin+0x2f8>)
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	f7f6 fcc2 	bl	800029c <__adddf3>
 8009918:	4632      	mov	r2, r6
 800991a:	463b      	mov	r3, r7
 800991c:	f7f6 fe74 	bl	8000608 <__aeabi_dmul>
 8009920:	a337      	add	r3, pc, #220	; (adr r3, 8009a00 <__ieee754_asin+0x300>)
 8009922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009926:	f7f6 fcb7 	bl	8000298 <__aeabi_dsub>
 800992a:	4632      	mov	r2, r6
 800992c:	463b      	mov	r3, r7
 800992e:	f7f6 fe6b 	bl	8000608 <__aeabi_dmul>
 8009932:	a335      	add	r3, pc, #212	; (adr r3, 8009a08 <__ieee754_asin+0x308>)
 8009934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009938:	f7f6 fcb0 	bl	800029c <__adddf3>
 800993c:	4632      	mov	r2, r6
 800993e:	463b      	mov	r3, r7
 8009940:	f7f6 fe62 	bl	8000608 <__aeabi_dmul>
 8009944:	a332      	add	r3, pc, #200	; (adr r3, 8009a10 <__ieee754_asin+0x310>)
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	f7f6 fca5 	bl	8000298 <__aeabi_dsub>
 800994e:	4632      	mov	r2, r6
 8009950:	463b      	mov	r3, r7
 8009952:	f7f6 fe59 	bl	8000608 <__aeabi_dmul>
 8009956:	a330      	add	r3, pc, #192	; (adr r3, 8009a18 <__ieee754_asin+0x318>)
 8009958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995c:	f7f6 fc9e 	bl	800029c <__adddf3>
 8009960:	4632      	mov	r2, r6
 8009962:	463b      	mov	r3, r7
 8009964:	f7f6 fe50 	bl	8000608 <__aeabi_dmul>
 8009968:	a32d      	add	r3, pc, #180	; (adr r3, 8009a20 <__ieee754_asin+0x320>)
 800996a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996e:	4680      	mov	r8, r0
 8009970:	4689      	mov	r9, r1
 8009972:	4630      	mov	r0, r6
 8009974:	4639      	mov	r1, r7
 8009976:	f7f6 fe47 	bl	8000608 <__aeabi_dmul>
 800997a:	a32b      	add	r3, pc, #172	; (adr r3, 8009a28 <__ieee754_asin+0x328>)
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	f7f6 fc8a 	bl	8000298 <__aeabi_dsub>
 8009984:	4632      	mov	r2, r6
 8009986:	463b      	mov	r3, r7
 8009988:	f7f6 fe3e 	bl	8000608 <__aeabi_dmul>
 800998c:	a328      	add	r3, pc, #160	; (adr r3, 8009a30 <__ieee754_asin+0x330>)
 800998e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009992:	f7f6 fc83 	bl	800029c <__adddf3>
 8009996:	4632      	mov	r2, r6
 8009998:	463b      	mov	r3, r7
 800999a:	f7f6 fe35 	bl	8000608 <__aeabi_dmul>
 800999e:	a326      	add	r3, pc, #152	; (adr r3, 8009a38 <__ieee754_asin+0x338>)
 80099a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a4:	f7f6 fc78 	bl	8000298 <__aeabi_dsub>
 80099a8:	4632      	mov	r2, r6
 80099aa:	463b      	mov	r3, r7
 80099ac:	f7f6 fe2c 	bl	8000608 <__aeabi_dmul>
 80099b0:	4b25      	ldr	r3, [pc, #148]	; (8009a48 <__ieee754_asin+0x348>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	f7f6 fc72 	bl	800029c <__adddf3>
 80099b8:	4602      	mov	r2, r0
 80099ba:	460b      	mov	r3, r1
 80099bc:	4640      	mov	r0, r8
 80099be:	4649      	mov	r1, r9
 80099c0:	f7f6 ff4c 	bl	800085c <__aeabi_ddiv>
 80099c4:	4622      	mov	r2, r4
 80099c6:	462b      	mov	r3, r5
 80099c8:	f7f6 fe1e 	bl	8000608 <__aeabi_dmul>
 80099cc:	4602      	mov	r2, r0
 80099ce:	460b      	mov	r3, r1
 80099d0:	4620      	mov	r0, r4
 80099d2:	4629      	mov	r1, r5
 80099d4:	e6bf      	b.n	8009756 <__ieee754_asin+0x56>
 80099d6:	bf00      	nop
 80099d8:	54442d18 	.word	0x54442d18
 80099dc:	3ff921fb 	.word	0x3ff921fb
 80099e0:	33145c07 	.word	0x33145c07
 80099e4:	3c91a626 	.word	0x3c91a626
 80099e8:	8800759c 	.word	0x8800759c
 80099ec:	7e37e43c 	.word	0x7e37e43c
 80099f0:	0dfdf709 	.word	0x0dfdf709
 80099f4:	3f023de1 	.word	0x3f023de1
 80099f8:	7501b288 	.word	0x7501b288
 80099fc:	3f49efe0 	.word	0x3f49efe0
 8009a00:	b5688f3b 	.word	0xb5688f3b
 8009a04:	3fa48228 	.word	0x3fa48228
 8009a08:	0e884455 	.word	0x0e884455
 8009a0c:	3fc9c155 	.word	0x3fc9c155
 8009a10:	03eb6f7d 	.word	0x03eb6f7d
 8009a14:	3fd4d612 	.word	0x3fd4d612
 8009a18:	55555555 	.word	0x55555555
 8009a1c:	3fc55555 	.word	0x3fc55555
 8009a20:	b12e9282 	.word	0xb12e9282
 8009a24:	3fb3b8c5 	.word	0x3fb3b8c5
 8009a28:	1b8d0159 	.word	0x1b8d0159
 8009a2c:	3fe6066c 	.word	0x3fe6066c
 8009a30:	9c598ac8 	.word	0x9c598ac8
 8009a34:	40002ae5 	.word	0x40002ae5
 8009a38:	1c8a2d4b 	.word	0x1c8a2d4b
 8009a3c:	40033a27 	.word	0x40033a27
 8009a40:	3fefffff 	.word	0x3fefffff
 8009a44:	3fdfffff 	.word	0x3fdfffff
 8009a48:	3ff00000 	.word	0x3ff00000
 8009a4c:	3fe00000 	.word	0x3fe00000
 8009a50:	3fef3332 	.word	0x3fef3332
 8009a54:	ee10 2a10 	vmov	r2, s0
 8009a58:	ee10 0a10 	vmov	r0, s0
 8009a5c:	465b      	mov	r3, fp
 8009a5e:	4659      	mov	r1, fp
 8009a60:	f7f6 fc1c 	bl	800029c <__adddf3>
 8009a64:	4632      	mov	r2, r6
 8009a66:	463b      	mov	r3, r7
 8009a68:	ec41 0b19 	vmov	d9, r0, r1
 8009a6c:	ec51 0b18 	vmov	r0, r1, d8
 8009a70:	f7f6 fef4 	bl	800085c <__aeabi_ddiv>
 8009a74:	4602      	mov	r2, r0
 8009a76:	460b      	mov	r3, r1
 8009a78:	ec51 0b19 	vmov	r0, r1, d9
 8009a7c:	f7f6 fdc4 	bl	8000608 <__aeabi_dmul>
 8009a80:	f04f 0800 	mov.w	r8, #0
 8009a84:	4606      	mov	r6, r0
 8009a86:	460f      	mov	r7, r1
 8009a88:	4642      	mov	r2, r8
 8009a8a:	465b      	mov	r3, fp
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	4659      	mov	r1, fp
 8009a90:	f7f6 fdba 	bl	8000608 <__aeabi_dmul>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	4620      	mov	r0, r4
 8009a9a:	4629      	mov	r1, r5
 8009a9c:	f7f6 fbfc 	bl	8000298 <__aeabi_dsub>
 8009aa0:	4642      	mov	r2, r8
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	460d      	mov	r5, r1
 8009aa6:	465b      	mov	r3, fp
 8009aa8:	4650      	mov	r0, sl
 8009aaa:	4659      	mov	r1, fp
 8009aac:	f7f6 fbf6 	bl	800029c <__adddf3>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	f7f6 fed0 	bl	800085c <__aeabi_ddiv>
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	f7f6 fbec 	bl	800029c <__adddf3>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	a113      	add	r1, pc, #76	; (adr r1, 8009b18 <__ieee754_asin+0x418>)
 8009aca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ace:	f7f6 fbe3 	bl	8000298 <__aeabi_dsub>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	4639      	mov	r1, r7
 8009ada:	f7f6 fbdd 	bl	8000298 <__aeabi_dsub>
 8009ade:	4642      	mov	r2, r8
 8009ae0:	4604      	mov	r4, r0
 8009ae2:	460d      	mov	r5, r1
 8009ae4:	465b      	mov	r3, fp
 8009ae6:	4640      	mov	r0, r8
 8009ae8:	4659      	mov	r1, fp
 8009aea:	f7f6 fbd7 	bl	800029c <__adddf3>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	a10b      	add	r1, pc, #44	; (adr r1, 8009b20 <__ieee754_asin+0x420>)
 8009af4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009af8:	f7f6 fbce 	bl	8000298 <__aeabi_dsub>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	4620      	mov	r0, r4
 8009b02:	4629      	mov	r1, r5
 8009b04:	f7f6 fbc8 	bl	8000298 <__aeabi_dsub>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	a104      	add	r1, pc, #16	; (adr r1, 8009b20 <__ieee754_asin+0x420>)
 8009b0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b12:	e6df      	b.n	80098d4 <__ieee754_asin+0x1d4>
 8009b14:	f3af 8000 	nop.w
 8009b18:	33145c07 	.word	0x33145c07
 8009b1c:	3c91a626 	.word	0x3c91a626
 8009b20:	54442d18 	.word	0x54442d18
 8009b24:	3fe921fb 	.word	0x3fe921fb

08009b28 <__ieee754_atan2>:
 8009b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b2c:	ec57 6b11 	vmov	r6, r7, d1
 8009b30:	4273      	negs	r3, r6
 8009b32:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009cb8 <__ieee754_atan2+0x190>
 8009b36:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009b3a:	4333      	orrs	r3, r6
 8009b3c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009b40:	4573      	cmp	r3, lr
 8009b42:	ec51 0b10 	vmov	r0, r1, d0
 8009b46:	ee11 8a10 	vmov	r8, s2
 8009b4a:	d80a      	bhi.n	8009b62 <__ieee754_atan2+0x3a>
 8009b4c:	4244      	negs	r4, r0
 8009b4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009b52:	4304      	orrs	r4, r0
 8009b54:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009b58:	4574      	cmp	r4, lr
 8009b5a:	ee10 9a10 	vmov	r9, s0
 8009b5e:	468c      	mov	ip, r1
 8009b60:	d907      	bls.n	8009b72 <__ieee754_atan2+0x4a>
 8009b62:	4632      	mov	r2, r6
 8009b64:	463b      	mov	r3, r7
 8009b66:	f7f6 fb99 	bl	800029c <__adddf3>
 8009b6a:	ec41 0b10 	vmov	d0, r0, r1
 8009b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b72:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009b76:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009b7a:	4334      	orrs	r4, r6
 8009b7c:	d103      	bne.n	8009b86 <__ieee754_atan2+0x5e>
 8009b7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b82:	f000 b951 	b.w	8009e28 <atan>
 8009b86:	17bc      	asrs	r4, r7, #30
 8009b88:	f004 0402 	and.w	r4, r4, #2
 8009b8c:	ea53 0909 	orrs.w	r9, r3, r9
 8009b90:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009b94:	d107      	bne.n	8009ba6 <__ieee754_atan2+0x7e>
 8009b96:	2c02      	cmp	r4, #2
 8009b98:	d060      	beq.n	8009c5c <__ieee754_atan2+0x134>
 8009b9a:	2c03      	cmp	r4, #3
 8009b9c:	d1e5      	bne.n	8009b6a <__ieee754_atan2+0x42>
 8009b9e:	a142      	add	r1, pc, #264	; (adr r1, 8009ca8 <__ieee754_atan2+0x180>)
 8009ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ba4:	e7e1      	b.n	8009b6a <__ieee754_atan2+0x42>
 8009ba6:	ea52 0808 	orrs.w	r8, r2, r8
 8009baa:	d106      	bne.n	8009bba <__ieee754_atan2+0x92>
 8009bac:	f1bc 0f00 	cmp.w	ip, #0
 8009bb0:	da5f      	bge.n	8009c72 <__ieee754_atan2+0x14a>
 8009bb2:	a13f      	add	r1, pc, #252	; (adr r1, 8009cb0 <__ieee754_atan2+0x188>)
 8009bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bb8:	e7d7      	b.n	8009b6a <__ieee754_atan2+0x42>
 8009bba:	4572      	cmp	r2, lr
 8009bbc:	d10f      	bne.n	8009bde <__ieee754_atan2+0xb6>
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009bc4:	d107      	bne.n	8009bd6 <__ieee754_atan2+0xae>
 8009bc6:	2c02      	cmp	r4, #2
 8009bc8:	d84c      	bhi.n	8009c64 <__ieee754_atan2+0x13c>
 8009bca:	4b35      	ldr	r3, [pc, #212]	; (8009ca0 <__ieee754_atan2+0x178>)
 8009bcc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009bd0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009bd4:	e7c9      	b.n	8009b6a <__ieee754_atan2+0x42>
 8009bd6:	2c02      	cmp	r4, #2
 8009bd8:	d848      	bhi.n	8009c6c <__ieee754_atan2+0x144>
 8009bda:	4b32      	ldr	r3, [pc, #200]	; (8009ca4 <__ieee754_atan2+0x17c>)
 8009bdc:	e7f6      	b.n	8009bcc <__ieee754_atan2+0xa4>
 8009bde:	4573      	cmp	r3, lr
 8009be0:	d0e4      	beq.n	8009bac <__ieee754_atan2+0x84>
 8009be2:	1a9b      	subs	r3, r3, r2
 8009be4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009be8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009bec:	da1e      	bge.n	8009c2c <__ieee754_atan2+0x104>
 8009bee:	2f00      	cmp	r7, #0
 8009bf0:	da01      	bge.n	8009bf6 <__ieee754_atan2+0xce>
 8009bf2:	323c      	adds	r2, #60	; 0x3c
 8009bf4:	db1e      	blt.n	8009c34 <__ieee754_atan2+0x10c>
 8009bf6:	4632      	mov	r2, r6
 8009bf8:	463b      	mov	r3, r7
 8009bfa:	f7f6 fe2f 	bl	800085c <__aeabi_ddiv>
 8009bfe:	ec41 0b10 	vmov	d0, r0, r1
 8009c02:	f000 fab1 	bl	800a168 <fabs>
 8009c06:	f000 f90f 	bl	8009e28 <atan>
 8009c0a:	ec51 0b10 	vmov	r0, r1, d0
 8009c0e:	2c01      	cmp	r4, #1
 8009c10:	d013      	beq.n	8009c3a <__ieee754_atan2+0x112>
 8009c12:	2c02      	cmp	r4, #2
 8009c14:	d015      	beq.n	8009c42 <__ieee754_atan2+0x11a>
 8009c16:	2c00      	cmp	r4, #0
 8009c18:	d0a7      	beq.n	8009b6a <__ieee754_atan2+0x42>
 8009c1a:	a319      	add	r3, pc, #100	; (adr r3, 8009c80 <__ieee754_atan2+0x158>)
 8009c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c20:	f7f6 fb3a 	bl	8000298 <__aeabi_dsub>
 8009c24:	a318      	add	r3, pc, #96	; (adr r3, 8009c88 <__ieee754_atan2+0x160>)
 8009c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2a:	e014      	b.n	8009c56 <__ieee754_atan2+0x12e>
 8009c2c:	a118      	add	r1, pc, #96	; (adr r1, 8009c90 <__ieee754_atan2+0x168>)
 8009c2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c32:	e7ec      	b.n	8009c0e <__ieee754_atan2+0xe6>
 8009c34:	2000      	movs	r0, #0
 8009c36:	2100      	movs	r1, #0
 8009c38:	e7e9      	b.n	8009c0e <__ieee754_atan2+0xe6>
 8009c3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c3e:	4619      	mov	r1, r3
 8009c40:	e793      	b.n	8009b6a <__ieee754_atan2+0x42>
 8009c42:	a30f      	add	r3, pc, #60	; (adr r3, 8009c80 <__ieee754_atan2+0x158>)
 8009c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c48:	f7f6 fb26 	bl	8000298 <__aeabi_dsub>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	a10d      	add	r1, pc, #52	; (adr r1, 8009c88 <__ieee754_atan2+0x160>)
 8009c52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c56:	f7f6 fb1f 	bl	8000298 <__aeabi_dsub>
 8009c5a:	e786      	b.n	8009b6a <__ieee754_atan2+0x42>
 8009c5c:	a10a      	add	r1, pc, #40	; (adr r1, 8009c88 <__ieee754_atan2+0x160>)
 8009c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c62:	e782      	b.n	8009b6a <__ieee754_atan2+0x42>
 8009c64:	a10c      	add	r1, pc, #48	; (adr r1, 8009c98 <__ieee754_atan2+0x170>)
 8009c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c6a:	e77e      	b.n	8009b6a <__ieee754_atan2+0x42>
 8009c6c:	2000      	movs	r0, #0
 8009c6e:	2100      	movs	r1, #0
 8009c70:	e77b      	b.n	8009b6a <__ieee754_atan2+0x42>
 8009c72:	a107      	add	r1, pc, #28	; (adr r1, 8009c90 <__ieee754_atan2+0x168>)
 8009c74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c78:	e777      	b.n	8009b6a <__ieee754_atan2+0x42>
 8009c7a:	bf00      	nop
 8009c7c:	f3af 8000 	nop.w
 8009c80:	33145c07 	.word	0x33145c07
 8009c84:	3ca1a626 	.word	0x3ca1a626
 8009c88:	54442d18 	.word	0x54442d18
 8009c8c:	400921fb 	.word	0x400921fb
 8009c90:	54442d18 	.word	0x54442d18
 8009c94:	3ff921fb 	.word	0x3ff921fb
 8009c98:	54442d18 	.word	0x54442d18
 8009c9c:	3fe921fb 	.word	0x3fe921fb
 8009ca0:	0800a5e0 	.word	0x0800a5e0
 8009ca4:	0800a5f8 	.word	0x0800a5f8
 8009ca8:	54442d18 	.word	0x54442d18
 8009cac:	c00921fb 	.word	0xc00921fb
 8009cb0:	54442d18 	.word	0x54442d18
 8009cb4:	bff921fb 	.word	0xbff921fb
 8009cb8:	7ff00000 	.word	0x7ff00000

08009cbc <__ieee754_sqrt>:
 8009cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc0:	ec55 4b10 	vmov	r4, r5, d0
 8009cc4:	4e56      	ldr	r6, [pc, #344]	; (8009e20 <__ieee754_sqrt+0x164>)
 8009cc6:	43ae      	bics	r6, r5
 8009cc8:	ee10 0a10 	vmov	r0, s0
 8009ccc:	ee10 3a10 	vmov	r3, s0
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	462a      	mov	r2, r5
 8009cd4:	d110      	bne.n	8009cf8 <__ieee754_sqrt+0x3c>
 8009cd6:	ee10 2a10 	vmov	r2, s0
 8009cda:	462b      	mov	r3, r5
 8009cdc:	f7f6 fc94 	bl	8000608 <__aeabi_dmul>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	f7f6 fad8 	bl	800029c <__adddf3>
 8009cec:	4604      	mov	r4, r0
 8009cee:	460d      	mov	r5, r1
 8009cf0:	ec45 4b10 	vmov	d0, r4, r5
 8009cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf8:	2d00      	cmp	r5, #0
 8009cfa:	dc10      	bgt.n	8009d1e <__ieee754_sqrt+0x62>
 8009cfc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009d00:	4330      	orrs	r0, r6
 8009d02:	d0f5      	beq.n	8009cf0 <__ieee754_sqrt+0x34>
 8009d04:	b15d      	cbz	r5, 8009d1e <__ieee754_sqrt+0x62>
 8009d06:	ee10 2a10 	vmov	r2, s0
 8009d0a:	462b      	mov	r3, r5
 8009d0c:	ee10 0a10 	vmov	r0, s0
 8009d10:	f7f6 fac2 	bl	8000298 <__aeabi_dsub>
 8009d14:	4602      	mov	r2, r0
 8009d16:	460b      	mov	r3, r1
 8009d18:	f7f6 fda0 	bl	800085c <__aeabi_ddiv>
 8009d1c:	e7e6      	b.n	8009cec <__ieee754_sqrt+0x30>
 8009d1e:	1509      	asrs	r1, r1, #20
 8009d20:	d076      	beq.n	8009e10 <__ieee754_sqrt+0x154>
 8009d22:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009d26:	07ce      	lsls	r6, r1, #31
 8009d28:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009d2c:	bf5e      	ittt	pl
 8009d2e:	0fda      	lsrpl	r2, r3, #31
 8009d30:	005b      	lslpl	r3, r3, #1
 8009d32:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009d36:	0fda      	lsrs	r2, r3, #31
 8009d38:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009d3c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009d40:	2000      	movs	r0, #0
 8009d42:	106d      	asrs	r5, r5, #1
 8009d44:	005b      	lsls	r3, r3, #1
 8009d46:	f04f 0e16 	mov.w	lr, #22
 8009d4a:	4684      	mov	ip, r0
 8009d4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009d50:	eb0c 0401 	add.w	r4, ip, r1
 8009d54:	4294      	cmp	r4, r2
 8009d56:	bfde      	ittt	le
 8009d58:	1b12      	suble	r2, r2, r4
 8009d5a:	eb04 0c01 	addle.w	ip, r4, r1
 8009d5e:	1840      	addle	r0, r0, r1
 8009d60:	0052      	lsls	r2, r2, #1
 8009d62:	f1be 0e01 	subs.w	lr, lr, #1
 8009d66:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009d6a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009d6e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d72:	d1ed      	bne.n	8009d50 <__ieee754_sqrt+0x94>
 8009d74:	4671      	mov	r1, lr
 8009d76:	2720      	movs	r7, #32
 8009d78:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009d7c:	4562      	cmp	r2, ip
 8009d7e:	eb04 060e 	add.w	r6, r4, lr
 8009d82:	dc02      	bgt.n	8009d8a <__ieee754_sqrt+0xce>
 8009d84:	d113      	bne.n	8009dae <__ieee754_sqrt+0xf2>
 8009d86:	429e      	cmp	r6, r3
 8009d88:	d811      	bhi.n	8009dae <__ieee754_sqrt+0xf2>
 8009d8a:	2e00      	cmp	r6, #0
 8009d8c:	eb06 0e04 	add.w	lr, r6, r4
 8009d90:	da43      	bge.n	8009e1a <__ieee754_sqrt+0x15e>
 8009d92:	f1be 0f00 	cmp.w	lr, #0
 8009d96:	db40      	blt.n	8009e1a <__ieee754_sqrt+0x15e>
 8009d98:	f10c 0801 	add.w	r8, ip, #1
 8009d9c:	eba2 020c 	sub.w	r2, r2, ip
 8009da0:	429e      	cmp	r6, r3
 8009da2:	bf88      	it	hi
 8009da4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8009da8:	1b9b      	subs	r3, r3, r6
 8009daa:	4421      	add	r1, r4
 8009dac:	46c4      	mov	ip, r8
 8009dae:	0052      	lsls	r2, r2, #1
 8009db0:	3f01      	subs	r7, #1
 8009db2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009db6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009dba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009dbe:	d1dd      	bne.n	8009d7c <__ieee754_sqrt+0xc0>
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	d006      	beq.n	8009dd2 <__ieee754_sqrt+0x116>
 8009dc4:	1c4c      	adds	r4, r1, #1
 8009dc6:	bf13      	iteet	ne
 8009dc8:	3101      	addne	r1, #1
 8009dca:	3001      	addeq	r0, #1
 8009dcc:	4639      	moveq	r1, r7
 8009dce:	f021 0101 	bicne.w	r1, r1, #1
 8009dd2:	1043      	asrs	r3, r0, #1
 8009dd4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009dd8:	0849      	lsrs	r1, r1, #1
 8009dda:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009dde:	07c2      	lsls	r2, r0, #31
 8009de0:	bf48      	it	mi
 8009de2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009de6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009dea:	460c      	mov	r4, r1
 8009dec:	463d      	mov	r5, r7
 8009dee:	e77f      	b.n	8009cf0 <__ieee754_sqrt+0x34>
 8009df0:	0ada      	lsrs	r2, r3, #11
 8009df2:	3815      	subs	r0, #21
 8009df4:	055b      	lsls	r3, r3, #21
 8009df6:	2a00      	cmp	r2, #0
 8009df8:	d0fa      	beq.n	8009df0 <__ieee754_sqrt+0x134>
 8009dfa:	02d7      	lsls	r7, r2, #11
 8009dfc:	d50a      	bpl.n	8009e14 <__ieee754_sqrt+0x158>
 8009dfe:	f1c1 0420 	rsb	r4, r1, #32
 8009e02:	fa23 f404 	lsr.w	r4, r3, r4
 8009e06:	1e4d      	subs	r5, r1, #1
 8009e08:	408b      	lsls	r3, r1
 8009e0a:	4322      	orrs	r2, r4
 8009e0c:	1b41      	subs	r1, r0, r5
 8009e0e:	e788      	b.n	8009d22 <__ieee754_sqrt+0x66>
 8009e10:	4608      	mov	r0, r1
 8009e12:	e7f0      	b.n	8009df6 <__ieee754_sqrt+0x13a>
 8009e14:	0052      	lsls	r2, r2, #1
 8009e16:	3101      	adds	r1, #1
 8009e18:	e7ef      	b.n	8009dfa <__ieee754_sqrt+0x13e>
 8009e1a:	46e0      	mov	r8, ip
 8009e1c:	e7be      	b.n	8009d9c <__ieee754_sqrt+0xe0>
 8009e1e:	bf00      	nop
 8009e20:	7ff00000 	.word	0x7ff00000
 8009e24:	00000000 	.word	0x00000000

08009e28 <atan>:
 8009e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2c:	ec55 4b10 	vmov	r4, r5, d0
 8009e30:	4bc3      	ldr	r3, [pc, #780]	; (800a140 <atan+0x318>)
 8009e32:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009e36:	429e      	cmp	r6, r3
 8009e38:	46ab      	mov	fp, r5
 8009e3a:	dd18      	ble.n	8009e6e <atan+0x46>
 8009e3c:	4bc1      	ldr	r3, [pc, #772]	; (800a144 <atan+0x31c>)
 8009e3e:	429e      	cmp	r6, r3
 8009e40:	dc01      	bgt.n	8009e46 <atan+0x1e>
 8009e42:	d109      	bne.n	8009e58 <atan+0x30>
 8009e44:	b144      	cbz	r4, 8009e58 <atan+0x30>
 8009e46:	4622      	mov	r2, r4
 8009e48:	462b      	mov	r3, r5
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	f7f6 fa25 	bl	800029c <__adddf3>
 8009e52:	4604      	mov	r4, r0
 8009e54:	460d      	mov	r5, r1
 8009e56:	e006      	b.n	8009e66 <atan+0x3e>
 8009e58:	f1bb 0f00 	cmp.w	fp, #0
 8009e5c:	f300 8131 	bgt.w	800a0c2 <atan+0x29a>
 8009e60:	a59b      	add	r5, pc, #620	; (adr r5, 800a0d0 <atan+0x2a8>)
 8009e62:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009e66:	ec45 4b10 	vmov	d0, r4, r5
 8009e6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6e:	4bb6      	ldr	r3, [pc, #728]	; (800a148 <atan+0x320>)
 8009e70:	429e      	cmp	r6, r3
 8009e72:	dc14      	bgt.n	8009e9e <atan+0x76>
 8009e74:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009e78:	429e      	cmp	r6, r3
 8009e7a:	dc0d      	bgt.n	8009e98 <atan+0x70>
 8009e7c:	a396      	add	r3, pc, #600	; (adr r3, 800a0d8 <atan+0x2b0>)
 8009e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e82:	ee10 0a10 	vmov	r0, s0
 8009e86:	4629      	mov	r1, r5
 8009e88:	f7f6 fa08 	bl	800029c <__adddf3>
 8009e8c:	4baf      	ldr	r3, [pc, #700]	; (800a14c <atan+0x324>)
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f7f6 fe4a 	bl	8000b28 <__aeabi_dcmpgt>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d1e6      	bne.n	8009e66 <atan+0x3e>
 8009e98:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009e9c:	e02b      	b.n	8009ef6 <atan+0xce>
 8009e9e:	f000 f963 	bl	800a168 <fabs>
 8009ea2:	4bab      	ldr	r3, [pc, #684]	; (800a150 <atan+0x328>)
 8009ea4:	429e      	cmp	r6, r3
 8009ea6:	ec55 4b10 	vmov	r4, r5, d0
 8009eaa:	f300 80bf 	bgt.w	800a02c <atan+0x204>
 8009eae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009eb2:	429e      	cmp	r6, r3
 8009eb4:	f300 80a0 	bgt.w	8009ff8 <atan+0x1d0>
 8009eb8:	ee10 2a10 	vmov	r2, s0
 8009ebc:	ee10 0a10 	vmov	r0, s0
 8009ec0:	462b      	mov	r3, r5
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	f7f6 f9ea 	bl	800029c <__adddf3>
 8009ec8:	4ba0      	ldr	r3, [pc, #640]	; (800a14c <atan+0x324>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f7f6 f9e4 	bl	8000298 <__aeabi_dsub>
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	4606      	mov	r6, r0
 8009ed4:	460f      	mov	r7, r1
 8009ed6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009eda:	4620      	mov	r0, r4
 8009edc:	4629      	mov	r1, r5
 8009ede:	f7f6 f9dd 	bl	800029c <__adddf3>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	4639      	mov	r1, r7
 8009eea:	f7f6 fcb7 	bl	800085c <__aeabi_ddiv>
 8009eee:	f04f 0a00 	mov.w	sl, #0
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	460d      	mov	r5, r1
 8009ef6:	4622      	mov	r2, r4
 8009ef8:	462b      	mov	r3, r5
 8009efa:	4620      	mov	r0, r4
 8009efc:	4629      	mov	r1, r5
 8009efe:	f7f6 fb83 	bl	8000608 <__aeabi_dmul>
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	4680      	mov	r8, r0
 8009f08:	4689      	mov	r9, r1
 8009f0a:	f7f6 fb7d 	bl	8000608 <__aeabi_dmul>
 8009f0e:	a374      	add	r3, pc, #464	; (adr r3, 800a0e0 <atan+0x2b8>)
 8009f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f14:	4606      	mov	r6, r0
 8009f16:	460f      	mov	r7, r1
 8009f18:	f7f6 fb76 	bl	8000608 <__aeabi_dmul>
 8009f1c:	a372      	add	r3, pc, #456	; (adr r3, 800a0e8 <atan+0x2c0>)
 8009f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f22:	f7f6 f9bb 	bl	800029c <__adddf3>
 8009f26:	4632      	mov	r2, r6
 8009f28:	463b      	mov	r3, r7
 8009f2a:	f7f6 fb6d 	bl	8000608 <__aeabi_dmul>
 8009f2e:	a370      	add	r3, pc, #448	; (adr r3, 800a0f0 <atan+0x2c8>)
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	f7f6 f9b2 	bl	800029c <__adddf3>
 8009f38:	4632      	mov	r2, r6
 8009f3a:	463b      	mov	r3, r7
 8009f3c:	f7f6 fb64 	bl	8000608 <__aeabi_dmul>
 8009f40:	a36d      	add	r3, pc, #436	; (adr r3, 800a0f8 <atan+0x2d0>)
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	f7f6 f9a9 	bl	800029c <__adddf3>
 8009f4a:	4632      	mov	r2, r6
 8009f4c:	463b      	mov	r3, r7
 8009f4e:	f7f6 fb5b 	bl	8000608 <__aeabi_dmul>
 8009f52:	a36b      	add	r3, pc, #428	; (adr r3, 800a100 <atan+0x2d8>)
 8009f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f58:	f7f6 f9a0 	bl	800029c <__adddf3>
 8009f5c:	4632      	mov	r2, r6
 8009f5e:	463b      	mov	r3, r7
 8009f60:	f7f6 fb52 	bl	8000608 <__aeabi_dmul>
 8009f64:	a368      	add	r3, pc, #416	; (adr r3, 800a108 <atan+0x2e0>)
 8009f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6a:	f7f6 f997 	bl	800029c <__adddf3>
 8009f6e:	4642      	mov	r2, r8
 8009f70:	464b      	mov	r3, r9
 8009f72:	f7f6 fb49 	bl	8000608 <__aeabi_dmul>
 8009f76:	a366      	add	r3, pc, #408	; (adr r3, 800a110 <atan+0x2e8>)
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	4680      	mov	r8, r0
 8009f7e:	4689      	mov	r9, r1
 8009f80:	4630      	mov	r0, r6
 8009f82:	4639      	mov	r1, r7
 8009f84:	f7f6 fb40 	bl	8000608 <__aeabi_dmul>
 8009f88:	a363      	add	r3, pc, #396	; (adr r3, 800a118 <atan+0x2f0>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	f7f6 f983 	bl	8000298 <__aeabi_dsub>
 8009f92:	4632      	mov	r2, r6
 8009f94:	463b      	mov	r3, r7
 8009f96:	f7f6 fb37 	bl	8000608 <__aeabi_dmul>
 8009f9a:	a361      	add	r3, pc, #388	; (adr r3, 800a120 <atan+0x2f8>)
 8009f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa0:	f7f6 f97a 	bl	8000298 <__aeabi_dsub>
 8009fa4:	4632      	mov	r2, r6
 8009fa6:	463b      	mov	r3, r7
 8009fa8:	f7f6 fb2e 	bl	8000608 <__aeabi_dmul>
 8009fac:	a35e      	add	r3, pc, #376	; (adr r3, 800a128 <atan+0x300>)
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	f7f6 f971 	bl	8000298 <__aeabi_dsub>
 8009fb6:	4632      	mov	r2, r6
 8009fb8:	463b      	mov	r3, r7
 8009fba:	f7f6 fb25 	bl	8000608 <__aeabi_dmul>
 8009fbe:	a35c      	add	r3, pc, #368	; (adr r3, 800a130 <atan+0x308>)
 8009fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc4:	f7f6 f968 	bl	8000298 <__aeabi_dsub>
 8009fc8:	4632      	mov	r2, r6
 8009fca:	463b      	mov	r3, r7
 8009fcc:	f7f6 fb1c 	bl	8000608 <__aeabi_dmul>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	4640      	mov	r0, r8
 8009fd6:	4649      	mov	r1, r9
 8009fd8:	f7f6 f960 	bl	800029c <__adddf3>
 8009fdc:	4622      	mov	r2, r4
 8009fde:	462b      	mov	r3, r5
 8009fe0:	f7f6 fb12 	bl	8000608 <__aeabi_dmul>
 8009fe4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	d14b      	bne.n	800a086 <atan+0x25e>
 8009fee:	4620      	mov	r0, r4
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	f7f6 f951 	bl	8000298 <__aeabi_dsub>
 8009ff6:	e72c      	b.n	8009e52 <atan+0x2a>
 8009ff8:	ee10 0a10 	vmov	r0, s0
 8009ffc:	4b53      	ldr	r3, [pc, #332]	; (800a14c <atan+0x324>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	4629      	mov	r1, r5
 800a002:	f7f6 f949 	bl	8000298 <__aeabi_dsub>
 800a006:	4b51      	ldr	r3, [pc, #324]	; (800a14c <atan+0x324>)
 800a008:	4606      	mov	r6, r0
 800a00a:	460f      	mov	r7, r1
 800a00c:	2200      	movs	r2, #0
 800a00e:	4620      	mov	r0, r4
 800a010:	4629      	mov	r1, r5
 800a012:	f7f6 f943 	bl	800029c <__adddf3>
 800a016:	4602      	mov	r2, r0
 800a018:	460b      	mov	r3, r1
 800a01a:	4630      	mov	r0, r6
 800a01c:	4639      	mov	r1, r7
 800a01e:	f7f6 fc1d 	bl	800085c <__aeabi_ddiv>
 800a022:	f04f 0a01 	mov.w	sl, #1
 800a026:	4604      	mov	r4, r0
 800a028:	460d      	mov	r5, r1
 800a02a:	e764      	b.n	8009ef6 <atan+0xce>
 800a02c:	4b49      	ldr	r3, [pc, #292]	; (800a154 <atan+0x32c>)
 800a02e:	429e      	cmp	r6, r3
 800a030:	da1d      	bge.n	800a06e <atan+0x246>
 800a032:	ee10 0a10 	vmov	r0, s0
 800a036:	4b48      	ldr	r3, [pc, #288]	; (800a158 <atan+0x330>)
 800a038:	2200      	movs	r2, #0
 800a03a:	4629      	mov	r1, r5
 800a03c:	f7f6 f92c 	bl	8000298 <__aeabi_dsub>
 800a040:	4b45      	ldr	r3, [pc, #276]	; (800a158 <atan+0x330>)
 800a042:	4606      	mov	r6, r0
 800a044:	460f      	mov	r7, r1
 800a046:	2200      	movs	r2, #0
 800a048:	4620      	mov	r0, r4
 800a04a:	4629      	mov	r1, r5
 800a04c:	f7f6 fadc 	bl	8000608 <__aeabi_dmul>
 800a050:	4b3e      	ldr	r3, [pc, #248]	; (800a14c <atan+0x324>)
 800a052:	2200      	movs	r2, #0
 800a054:	f7f6 f922 	bl	800029c <__adddf3>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	4630      	mov	r0, r6
 800a05e:	4639      	mov	r1, r7
 800a060:	f7f6 fbfc 	bl	800085c <__aeabi_ddiv>
 800a064:	f04f 0a02 	mov.w	sl, #2
 800a068:	4604      	mov	r4, r0
 800a06a:	460d      	mov	r5, r1
 800a06c:	e743      	b.n	8009ef6 <atan+0xce>
 800a06e:	462b      	mov	r3, r5
 800a070:	ee10 2a10 	vmov	r2, s0
 800a074:	4939      	ldr	r1, [pc, #228]	; (800a15c <atan+0x334>)
 800a076:	2000      	movs	r0, #0
 800a078:	f7f6 fbf0 	bl	800085c <__aeabi_ddiv>
 800a07c:	f04f 0a03 	mov.w	sl, #3
 800a080:	4604      	mov	r4, r0
 800a082:	460d      	mov	r5, r1
 800a084:	e737      	b.n	8009ef6 <atan+0xce>
 800a086:	4b36      	ldr	r3, [pc, #216]	; (800a160 <atan+0x338>)
 800a088:	4e36      	ldr	r6, [pc, #216]	; (800a164 <atan+0x33c>)
 800a08a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a08e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a092:	e9da 2300 	ldrd	r2, r3, [sl]
 800a096:	f7f6 f8ff 	bl	8000298 <__aeabi_dsub>
 800a09a:	4622      	mov	r2, r4
 800a09c:	462b      	mov	r3, r5
 800a09e:	f7f6 f8fb 	bl	8000298 <__aeabi_dsub>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a0aa:	f7f6 f8f5 	bl	8000298 <__aeabi_dsub>
 800a0ae:	f1bb 0f00 	cmp.w	fp, #0
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	460d      	mov	r5, r1
 800a0b6:	f6bf aed6 	bge.w	8009e66 <atan+0x3e>
 800a0ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0be:	461d      	mov	r5, r3
 800a0c0:	e6d1      	b.n	8009e66 <atan+0x3e>
 800a0c2:	a51d      	add	r5, pc, #116	; (adr r5, 800a138 <atan+0x310>)
 800a0c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a0c8:	e6cd      	b.n	8009e66 <atan+0x3e>
 800a0ca:	bf00      	nop
 800a0cc:	f3af 8000 	nop.w
 800a0d0:	54442d18 	.word	0x54442d18
 800a0d4:	bff921fb 	.word	0xbff921fb
 800a0d8:	8800759c 	.word	0x8800759c
 800a0dc:	7e37e43c 	.word	0x7e37e43c
 800a0e0:	e322da11 	.word	0xe322da11
 800a0e4:	3f90ad3a 	.word	0x3f90ad3a
 800a0e8:	24760deb 	.word	0x24760deb
 800a0ec:	3fa97b4b 	.word	0x3fa97b4b
 800a0f0:	a0d03d51 	.word	0xa0d03d51
 800a0f4:	3fb10d66 	.word	0x3fb10d66
 800a0f8:	c54c206e 	.word	0xc54c206e
 800a0fc:	3fb745cd 	.word	0x3fb745cd
 800a100:	920083ff 	.word	0x920083ff
 800a104:	3fc24924 	.word	0x3fc24924
 800a108:	5555550d 	.word	0x5555550d
 800a10c:	3fd55555 	.word	0x3fd55555
 800a110:	2c6a6c2f 	.word	0x2c6a6c2f
 800a114:	bfa2b444 	.word	0xbfa2b444
 800a118:	52defd9a 	.word	0x52defd9a
 800a11c:	3fadde2d 	.word	0x3fadde2d
 800a120:	af749a6d 	.word	0xaf749a6d
 800a124:	3fb3b0f2 	.word	0x3fb3b0f2
 800a128:	fe231671 	.word	0xfe231671
 800a12c:	3fbc71c6 	.word	0x3fbc71c6
 800a130:	9998ebc4 	.word	0x9998ebc4
 800a134:	3fc99999 	.word	0x3fc99999
 800a138:	54442d18 	.word	0x54442d18
 800a13c:	3ff921fb 	.word	0x3ff921fb
 800a140:	440fffff 	.word	0x440fffff
 800a144:	7ff00000 	.word	0x7ff00000
 800a148:	3fdbffff 	.word	0x3fdbffff
 800a14c:	3ff00000 	.word	0x3ff00000
 800a150:	3ff2ffff 	.word	0x3ff2ffff
 800a154:	40038000 	.word	0x40038000
 800a158:	3ff80000 	.word	0x3ff80000
 800a15c:	bff00000 	.word	0xbff00000
 800a160:	0800a630 	.word	0x0800a630
 800a164:	0800a610 	.word	0x0800a610

0800a168 <fabs>:
 800a168:	ec51 0b10 	vmov	r0, r1, d0
 800a16c:	ee10 2a10 	vmov	r2, s0
 800a170:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a174:	ec43 2b10 	vmov	d0, r2, r3
 800a178:	4770      	bx	lr
 800a17a:	0000      	movs	r0, r0
 800a17c:	0000      	movs	r0, r0
	...

0800a180 <nan>:
 800a180:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a188 <nan+0x8>
 800a184:	4770      	bx	lr
 800a186:	bf00      	nop
 800a188:	00000000 	.word	0x00000000
 800a18c:	7ff80000 	.word	0x7ff80000

0800a190 <_init>:
 800a190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a192:	bf00      	nop
 800a194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a196:	bc08      	pop	{r3}
 800a198:	469e      	mov	lr, r3
 800a19a:	4770      	bx	lr

0800a19c <_fini>:
 800a19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19e:	bf00      	nop
 800a1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1a2:	bc08      	pop	{r3}
 800a1a4:	469e      	mov	lr, r3
 800a1a6:	4770      	bx	lr
